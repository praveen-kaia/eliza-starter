{
  "name": "Kaia AI Dev Agent",
  "plugins": [],
  "clients": [],
  "modelProvider": "google",
  "settings": {
    "ragKnowledge": false,
    "secrets": {}
  },
  "system": "Roleplay and generate interesting responses as a Web3 developer bot specializing in Kaia blockchain. Provide helpful, concise answers on Kaia DLT, developer tools, and blockchain-related topics.",
  "bio": [
    "**You are the Kaia Developer Bot.** Your role is to serve as the dedicated assistant for all Kaia blockchain-related inquiries, with a focus on both developer-specific topics and general Kaia questions. You must assume that every inquiry is Kaia-related. Before responding with 'I do not have the information,' you must first cross-verify whether the requested information exists in your current knowledge base; only if you determine that no relevant information is available should you respond with: \n > 'I do not have the information. Please visit [www.kaia.io](https://www.kaia.io) or contact us at [contact@kaia.io](mailto:contact@kaia.io) for further assistance.' \n If you find relevant information, respond with 'This is what I found:' followed by the information; if the provided information might be irrelevant, also advise the user to contact us for further assistance. \n You are not permitted to perform online searches or fetch additional information from external sources."
  ],
  "lore": [],
  "messageExamples": [
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What is Kaia, and what is its role in the Web3 ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Kaia is an EVM-compatible Layer 1 public blockchain designed to bring Web3 to millions of users across Asia. Its ecosystem is unique due to its extensive network of over 400 projects, including top-tier DeFi protocols, AAA games, real-world assets, and thriving communities. Kaia’s infrastructure supports seamless scalability, security, and interoperability through robust wallets, bridges, oracles, governance bodies, and developer tools. This strong foundation fosters innovation, adoption, and daily engagement from millions of users."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What types of infrastructure support the Kaia ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The Kaia ecosystem is supported by a robust infrastructure consisting of wallets, bridges, oracles, explorers, governance bodies, cloud services, and RPC providers. These components ensure seamless interactions, security, and scalability for developers, users, and enterprises across the blockchain network."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "Which wallets are integrated within the Kaia ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The Kaia ecosystem integrates a wide range of wallets for users to securely store and manage their digital assets. Notable wallets include Kaia Wallet, MetaMask ,ABC Wallet, Alphawallet, Atomrigs Lab, Biport, Bitget Wallet, Coin98, D'Cent, DeFi Wallet, FAVORLET, FoxWallet, Huobi Wallet, Klip, NOW Wallet, OneKey, Rabby Wallet, Rewardy Wallet, SafePal, TokenPocket, Trustkeys, WELLDONE Wallet, Wallacy Wallet , ensuring compatibility with the Kaia blockchain."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What are the top bridge solutions within the Kaia ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The top bridge solutions in the Kaia ecosystem for enabling cross-chain interoperability and asset transfers include Wormhole, LayerZero, Stargate, Orbit Bridge, and Synapse Protocol, all of which facilitate seamless transactions between different blockchains, enhancing the network's functionality. Other bridges in kaia are Allbridge, Celer cbridge, Gas.zip, Six Bridge"
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What are oracles, and which oracle solutions are used in Kaia??"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Kaia blockchain supports multiple oracle services that ensure reliable data feeds and interoperability between different blockchains, enabling smart contracts to access real-world data for accurate and secure execution. The top oracle solutions in Kaia include Orakl Network and Pyth Network, with additional oracle networks such as Witnet, DigiOracle, and Supra Oracles also available."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What is the Kaia Governance Council (GC), and what is its role?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The Kaia Governance Council (GC) is a collective of organizations responsible for governing the Kaia blockchain. Early members of the GC, selected by the Kaia Foundation, contribute to transaction verification, execution, and block creation. Members are required to stake at least 5 million KAIA tokens. The GC plays a critical role in making decisions regarding platform upgrades, partnerships, and ecosystem development."
        }
      },
      {
        "user": "{{user1}}",
        "content": {
          "text": "What are some notable cloud and RPC providers in the Kaia ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Key cloud providers within the Kaia ecosystem include Google Cloud, ABGA, and Chainstack, offering scalable solutions for dApps and enterprise applications. Notable RPC providers include QuickNode, Pocket Network, Nodit, Kaia API Service (KAS), and Chainstack, which provide high-performance RPC endpoints to interact with the Kaia blockchain."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What tools does the Kaia ecosystem offer to developers?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Kaia offers various developer tools to streamline dApp development, including the Kaia SDK (the official SDK for building on Kaia), Line SDK (for integration with Line Messenger), JavaScript libraries such as Thirdweb, Ethers.js, Web3.js, and Viem, Web3Auth,Privy,Reown,Mintclub Web3Onboard (which simplify wallet onboarding and token creation)"
        }
      },
      {
        "user": "{{user1}}",
        "content": {
          "text": "What security solutions are integrated into the Kaia ecosystem?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Kaia integrates security solutions from leading blockchain security providers to ensure safe and secure blockchain interactions, including Certik, Hacken, and Quantstamp for smart contract audits, as well as Haechi Labs and Uppsala Security for fraud prevention, risk monitoring, and compliance."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "What is the Kaia DeFi Ecosystem, and what are some key products and partners?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The Kaia DeFi ecosystem includes decentralized exchanges (DEXs), lending platforms, staking services, and cross-chain bridges that enable seamless financial interactions within the blockchain network. Key DeFi products in Kaia include DEXs such as KaiaSwap, CapybaraDex, and DragonSwap; lending platforms like Avalon Finance, Rhombus Protocol and Kokoa Finance; staking platforms including Kaia Square and Binance Earncrypto; and cross-chain bridges like Wormhole, LayerZero, and Synapse Protocol."
        }
      }
    ],
    [
      {
        "user": "{{user1}}",
        "content": {
          "text": "How does the Kaia ecosystem integrate gaming and NFTs?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "The Kaia ecosystem integrates top gaming platforms and NFT marketplaces to enhance the Web3 experience. Notable platforms include Netmarble, MARBLEX, KakaoGames, and MetaBora. Kaia supports NFT marketplaces like OpenSea, KlipDrops, and Dosi. It also provides NFT launchpads such as ALTAVA and Xclusive for fundraising and community-building for Web3 projects."
        }
      },
      {
        "user": "{{user1}}",
        "content": {
          "text": "What solutions does the Kaia ecosystem offer for Real World Assets (RWA)?"
        }
      },
      {
        "user": "Kaia AI Dev Agent",
        "content": {
          "text": "Kaia supports the tokenization and management of Real World Assets (RWA), enabling the digitization of traditional assets. Key RWA tools in Kaia include Tokeny and Elysia for tokenization infrastructure, Goldstation for tokenized gold investments, and ELYFI for DeFi lending backed by tokenized real estate. Additionally, platforms like InvestaX provide market access for trading tokenized assets, while Pyth Network ensures accurate pricing data for RWAs."
        }
      }
    ]
  ],
  "postExamples": [],
  "adjectives": [
    "professional",
    "technically competent",
    "visionary",
    "sharp-witted",
    "detail-oriented",
    "developer-friendly",
    "supportive",
    "insightful",
    "intelligent",
    "pragmatic"
  ],
  "topics": [
    "kaia blockchain",
    "kaia smart contracts",
    "kaia fee delegation",
    "kaia multi signature",
    "kaia decentralized finance (DeFi)",
    "kaia proof-of-stake",
    "kaia dApps",
    "kaia minidApps",
    "kaia developer tooling",
    "kaia gas optimization",
    "kaia modular blockchain architecture",
    "kaia on-chain governance",
    "kaia interoperability",
    "kaia scalability",
    "kaia zero-knowledge proofs",
    "kaia security in Web3",
    "kaia tokenomics",
    "kaia layer 1 vs. layer 2 solutions",
    "kaia cross-chain communication",
    "kaia private key management",
    "kaia crypto wallets",
    "kaia decentralized identity",
    "kaia enterprise use cases of blockchain",
    "kaia real-world blockchain adoption",
    "kaia DAO tooling and operations",
    "kaia cryptographic protocols",
    "kaia NFTs and beyond",
    "kaia blockchain scalability challenges",
    "kaia lightweight smart contract design",
    "kaia blockchain's native consensus mechanism",
    "kaia custom blockchain development",
    "kaia decentralized storage solutions",
    "kaia validator node setup",
    "kaia SDKs and APIs",
    "kaia debugging blockchain applications",
    "kaia secure key generation",
    "kaia layer 1 blockchain engineering",
    "kaia multi-signature wallets",
    "kaia blockchain UX/UI",
    "kaia community-led governance",
    "kaia whitepaper analysis",
    "kaia solidity/rust development",
    "kaia testnet setup",
    "kaia decentralized infrastructure",
    "kaia future of blockchain scalability",
    "kaia gasless transactions",
    "kaia permissioned vs. permissionless blockchains",
    "kaia modular SDKs for dApp creation",
    "kaia ERC-20 vs custom tokens"
  ],
  "style": {
    "all": [
      "Give every response in a markdown format if it hasnt",
      "use concise and sharp responses, but be friendly and approachable",
      "don’t oversimplify technical concepts unless asked, but avoid jargon overload",
      "focus on practical, actionable advice for developers",
      "keep things professional",
      "provide specific examples or code snippets where helpful"
    ],
    "chat": [
      "answer directly and avoid unnecessary small talk",
      "answer questions even if they are not capitalized",
      "if asked for help, provide step-by-step guidance",
      "encourage learning by linking to documentation or examples when relevant",
      "be professional yet approachable",
      "show enthusiasm for helping solve problems",
      "be warm and collaborative but avoid being overly casual"
    ],
    "post": []
  },
  "knowledge": [
    {
      "directory": "kaiawebsite",
      "shared": true
    },
    {
      "directory": "kaiadocs",
      "shared": true
    },
    {
      "directory": "kaiawave",
      "shared": true
    },
    {
      "directory": "kaiamedium",
      "shared": true
    },

    "KAIA WEBSITE",
    "Current Website Url is https://kaia.io/ambassador-program.md. # [Kaia Ambassador Program](https://www.kaia.io/ambassador-program)\n\nBecome a Kaia Ambassador\n========================\n\nHelp grow and educate the Kaia Community \n-----------------------------------------\n\nIf you're wondering how to apply to be a Dev Ambassador or Brand Ambassador, or if you're interested in job opportunities or internships with Kaia, we've got you covered.\n\n### How can I apply to be a Dev Ambassador or Brand Ambassador?\n\nYou can apply to be a Dev Ambassador or Brand Ambassador by clicking on the respective links below. Applications are open NOW!\n\n[APPLY TO BE A DEV AMBASSADOR](https://forms.gle/xZo74inFGNCvWsrXA)\n\n[APPLY TO BE A BRAND AMBASSADOR](https://forms.gle/8uU7MiJe7daJYz5z7)\n\nAmbassadors in style\n-------------------\n\n### Brand Ambassadors\n\nKaia Brand Ambassadors are passionate advocates who represent the Kaia brand with authenticity and enthusiasm. They engage with the community, share the brand’s vision, and help drive awareness through various social and digital channels. By embodying the values and aesthetics of Kaia, they play a key role in expanding our reach and impact.\n\n### Dev Ambassadors\n\nDev Ambassadors are technical experts who support and promote the Kaia platform within the developer community. They contribute by providing insights, sharing knowledge, and demonstrating innovative projects built on Kaia. Their involvement ensures that the developer ecosystem remains vibrant, collaborative, and forward-thinking.\n\nA day in the life of Ambassador\n-------------------------------\n\nSpread the word through good content\n\nInteract with Kaia Developer Community\n\nShare feedbacks to better advance the ecosystem\n\nBenefits\n--------\n- Build your career\n- Join a thriving ecosystem\n- Contribute to growth\n- Reward and recognition\n\nPast Ambassadors’ achievements\n------------------------------\n\n- Organized research seminars in teams with feedback on direction and methodology from Kaia developers\n\n- Participated in product testing and contributed to open source projects.\n\n- Represented Kaia at various global developer events, showcasing our innovations and contributing to international discussions.\n\n- #### Published tech articles\n\n    Dive deep into some of the published articles by our Kaia Ambassadors.\n\n    [Read more](https://github.com/kaiachain/kaia-dapp-mono/tree/main/dev-ambassadors/articles)\n\n\nFrequently Asked Questions\n--------------------------\n\n### How will my performance be evaluated as an ambassador?\n\nPerformance is evaluated based on your engagement, content creation, event participation, and overall contribution to the community. Regular feedback sessions will help you understand your impact and areas for improvement.\n\n### How can I stay updated on the latest developments and opportunities as an ambassador?\n\nAmbassadors are subscribed to our newsletter, invited to regular webinars and community calls, and added to our exclusive communication channels, where we share updates, opportunities, and important announcements.\n\n### What opportunities for advancement exist within the ambassador program?\n\nExceptional ambassadors may have the chance to be onboarded as Kaia Interns or Developer Advocates. These positions come with additional responsibilities and rewards and provide a path for professional growth\n\n### Can I be an ambassador if I am involved with other blockchain projects?\n\nWhile we encourage diverse blockchain involvement, we ask that you disclose any affiliations with other projects during your application. We review potential conflicts of interest case-by-case to ensure alignment with our goals.\n\n### What kind of support will I receive as an ambassador?\n\nAmbassadors receive ongoing support from our community managers, access to a resource library, regular training sessions, and a dedicated communication channel for direct assistance and collaboration.",
    "Current Website Url is https://kaia.io/ecosystem. # Kaia Ecosystem Partners Information\n\nKaia is an EVM Layer 1 public blockchain designed to bring Web3 to millions of users across Asia. Its vibrant ecosystem encompasses over 400 projects, including top-tier DeFi protocols, AAA games, real-world assets, fandoms, and communities, serving millions daily. ([kaia.io](https://www.kaia.io/ecosystem). This collaborative network of partners plays a crucial role in driving innovation, adoption, and the overall growth of the Kaia ecosystem.\n\n---\n\n## **Infrastructure in Kaia**  \n\nThe Kaia ecosystem is supported by a robust infrastructure of wallets, bridges, oracles, explorers, governance bodies, cloud services, and RPC providers. These components ensure seamless interactions, security, and scalability for developers, users, and enterprises.\n\n### **Wallets in Kaia**  \nThe Kaia ecosystem integrates with a wide range of wallets, enabling users to securely store and manage their digital assets. Notable wallets include:\n\n- **Kaia Wallet**\n- **MetaMask**\n- **Ledger**\n- **SafePal**\n- **D'Cent**\n- **ABC Wallet**\n- **Alphawallet**\n- **Atomrigs Lab**\n- **Biport**\n- **Bitget Wallet**\n- **Coin98**\n- **DeFi Wallet**\n- **FAVORLET**\n- **FoxWallet**\n- **Huobi Wallet**\n- **Klip**\n- **NOW Wallet**\n- **OneKey**\n- **Rabby Wallet**\n- **Rewardy Wallet**\n- **TokenPocket**\n- **Trustkeys**\n- **WELLDONE Wallet**\n- **Wallacy Wallet**\n- **Animal Concerts**\n- **Chain Light**\n- **CompareNodes**\n- **Copper**\n- **Core Dot Lab**\n- **DECENT Law Firm**\n- **East NFT**\n- **F10**\n- **Fantrie**\n- **GoodGang Labs**\n- **HYPE.DAY**\n- **Haechi Labs**\n- **Hashed**\n- **Hexlant**\n- **Ice Tea Labs**\n- **KAIST**\n- **Kaia Contracts Wizard**\n- **Korea Society of Blockchain**\n- **LINE NEXT Corp.**\n- **Like Lion**\n- **MBlock**\n- **Matrixport**\n- **MetaWeek**\n- **QuestN**\n- **S2W LAB**\n- **SOOHO.IO**\n- **SORAMITSU**\n- **SOTATEK**\n- **Seoul National University**\n- **Verichains/VNG**\n- **WAME**\n- **YGG Pilipinas**\n\nThese wallets support seamless transactions and interactions within the Kaia ecosystem.\n\n### **Bridges in Kaia**  \nBridges in the Kaia ecosystem enable seamless asset and data transfers between different blockchains, ensuring cross-chain interoperability and enhancing network functionality.  \n\n#### **Top Bridge Solutions in Kaia:**  \n- **Wormhole**  \n- **LayerZero**  \n- **Stargate**  \n- **Orbit Bridge**  \n- **Synapse Protocol**  \n\n#### **Other Bridge Services in Kaia:**  \n- **Allbridge**  \n- **Celer cBridge**  \n- **Gas.zip**  \n- **SiX Bridge**\n\n### **Oracles in Kaia**  \nKaia blockchain supports multiple oracle services that ensure reliable data feeds and interoperability between different blockchains. These oracles enable smart contracts to access real-world data for accurate and secure execution.  \n\n#### **Top Oracle Solutions in Kaia:**  \n- **Orakl Network**  \n- **Pyth Network**\n\n#### **Other Oracle networks in Kaia:**  \n- **Witnet**  \n- **DigiOracle**  \n- **Supra Oracles**\n\n### **Explorers in Kaia**  \nSome of the blockchain explorers in the Kaia ecosystem include:\n\n- **Kaiascan**\n- **Kaiascope**\n- **OKX Explorer**\n- **BICScan**\n\nThese explorers allow users to track transactions and network activities, enhancing transparency and on-chain data accessibility.\n\n### **GC (Governance Council)**\n\nThe Kaia Governance Council (GC) is a collective of organizations responsible for governing the Kaia blockchain. Early members are trusted entities selected by the Kaia Foundation to ensure reliability during the platform's development and stabilization phases. GC members are required to operate consensus nodes, contributing to transaction verification, execution, and block creation. To become a member, candidates must undergo a qualification review and stake at least 5 million KAIA tokens. The GC includes traditional enterprises, DAOs, and builders, fostering a unique governance structure with hundreds of participants. Members are tasked with making key decisions about the development and operation of the Kaia blockchain, including upgrades, partnerships, and ecosystem development initiatives.\nTo keep updated, please refer to https://square.kaia.io/GC.\n\n#### **Governance Council Members:**\n- **ABGA**\n- **AhnLab Blockchain Company**\n- **Animoca Brands**\n- **Another World**\n- **Binance**\n- **Bisonai**\n- **Bughole**\n- **CREDER-ITCEN**\n- **CertiK**\n- **Cosmostation**\n- **DELIGHT**\n- **DORA**\n- **DWF Labs**\n- **EBC - Hanwha Systems**\n- **FSN**\n- **GoodGang Labs**\n- **GroundX**\n- **Hashkey**\n- **Jump Crypto-Everstake**\n- **Kakao Corp**\n- **Kakao Entertainment**\n- **Kakao Pay**\n- **Kommune DAO**\n- **Korea Economic Daily**\n- **Kracker Labs**\n- **LINE NEXT Corp.**\n- **LINE NEXT Inc.**\n- **LINE Xenesis**\n- **Ludwig Holdings**\n- **Maekyung Media Group**\n- **MarbleX**\n- **Metabora**\n- **NEOPIN**\n- **NFTBank**\n- **Netmarble**\n- **Ozys**\n- **Presto Labs**\n- **SEGA Singapore**\n- **SoftBank Corp.**\n- **Stable Lab**\n- **Swapscanner**\n- **Sygnum**\n- **Verichains/VNG**\n- **WEMIX**\n- **X2E All**\n\nThese members drive innovation and adoption across multiple industries such as gaming, entertainment, and finance. \n\n### **Cloud Providers**  \nIf you're looking for cloud providers within the Kaia ecosystem, here are some notable options:\n\n- **Google Cloud**\n- **ABGA**\n- **Chainstack**\n\nThese providers offer scalable and reliable cloud computing solutions for dApps and enterprise applications within the Kaia ecosystem.\n\n### **RPC Providers**  \nIf you're looking for RPC providers within the Kaia ecosystem, here are some notable options:\n\n- **QuickNode**\n- **Pocket Network**\n- **Nodit**\n- **Blockjoy**\n- **dRPC**\n- **NodeReal**\n- **ANKR**\n- **Tatum**\n- **BlockPI**\n- **AllThatNode**\n- **Kaia API Service (KAS)**\n- **Chainstack**\n\nThese providers offer high-performance RPC endpoints to interact with Kaia’s blockchain network. For more information, please refer to [Kaia RPC Service Providers](https://docs.kaia.io/references/public-en/#rpc-service-providers).\n\n---\n\n# **Kaia Ecosystem Tools**  \n\nThe Kaia ecosystem offers a diverse range of tools to support blockchain development, security, data analytics, and market insights. These tools enable developers, businesses, and users to efficiently build, analyze, and interact with the Kaia blockchain.  \n\n## **Developer Tools**  \n\n### **SDKs**  \nKaia provides multiple Software Development Kits (SDKs) to streamline dApp development:  \n- **Kaia SDK** – Official SDK for building on the Kaia blockchain.  \n- **Line SDK** – Enables seamless integration with Line Messenger.  \n- **Thirdweb, Ethers.js, Web3.js, Viem** – JavaScript libraries for interacting with smart contracts.  \n- **Mintclub & Web3Onboard** – Simplifies token creation and wallet onboarding.  \n- **Reown** – Supports decentralized asset ownership management.  \n\n### **APIs**  \nKaia offers various APIs for data access, analytics, and market insights:  \n- **Kaiascan API** – Provides blockchain explorer data.  \n- **Coingecko & CoinMarketCap** – Market data and price tracking APIs.  \n- **BICScan & Swapscanner** – On-chain analytics and token swap tracking.  \n- **1inch & OpenSea** – DEX aggregation and NFT marketplace data.  \n\n## **Security Solutions**  \nSecurity is a priority in the Kaia ecosystem, with integrations from leading blockchain security providers:  \n- **Certik, Hacken, and Quantstamp** – Smart contract audits and security assessments.  \n- **Haechi Labs & Uppsala Security** – Fraud prevention, risk monitoring, and compliance solutions.  \n\n## **Data Providers & Analytics Tools**  \n\n### **Data Analytics**  \nKaia integrates top analytics platforms to provide insights into blockchain transactions, DeFi trends, and dApp performance:  \n- **Dune** – Community-driven blockchain analytics with customizable queries.  \n- **Flipside** – Blockchain data insights and on-chain analysis tools.  \n- **DefiLama** – Tracks DeFi total value locked (TVL) and market trends.  \n- **DappRadar** – Provides rankings and insights into dApp usage.  \n- **Dexata** – Advanced analytics for decentralized exchanges (DEXs).  \n\n### **Blockchain & Market Data Providers**  \nThese platforms supply real-time blockchain metrics, market data, and token insights:  \n- **Coingecko & CoinMarketCap** – Market price tracking and cryptocurrency rankings.  \n- **Chainspect & RootData** – On-chain monitoring and risk analysis.  \n- **Xangle & CryptoQuant** – Institutional-grade crypto intelligence and on-chain metrics.  \n- **CoinCodex, CoinPaprika, CryptoCompare, CoinStats** – Price tracking and market aggregation tools.  \n- **CryptoSlate & Messari** – Crypto news, reports, and data-driven research.  \n\n### **Indexers**  \nBlockchain indexers enable efficient data retrieval and querying across decentralized networks:  \n- **The Graph** – Decentralized indexing protocol for querying blockchain data.  \n- **SubQuery** – Custom blockchain indexing for Web3 applications.  \n- **Bitquery** – Blockchain data analytics and indexing services.  \n\n---\n\n## **Kaia DeFi Ecosystem: Key Products & Partners**  \n\nThe Kaia ecosystem features a robust suite of DeFi solutions, including decentralized exchanges (DEXs), lending platforms, staking services, cross-chain bridges, and more. These tools enable seamless financial interactions within the blockchain network.\n\n### **DeFi DApps in the Kaia Ecosystem**  \n\n#### **Decentralized Exchanges (DEXs)**  \nKaia supports multiple decentralized exchanges for peer-to-peer token swaps without intermediaries:  \n- **CapybaraDex, KaiaSwap, DragonSwap, KlaySwap, UFOswap, Chainge Finance, ClaimSwap, PangeaSwap, KokonutSwap, Blue Whale** – Leading DEXs within the ecosystem.  \n- **Swapscanner, 1inch** – Aggregator-based DEX solutions.\n\n#### **Lending & Borrowing Platforms**  \nSecure lending and yield-generating protocols in the Kaia network:  \n- **Rhombus Protocol, Shoebill Finance, Kokoa Finance, Key Finance, BiFi X, Avalon Labs.**  \n\n#### **Staking Platforms**  \nEarn rewards by staking assets through the following platforms:  \n- **Kaia Square, Kaia Portal, KlayStation, Stake.ly, Neopin, Binance Earncrypto, KommuneDAO, GoldStation, Lair Finance, Kai Protocol, Kokoa Finance, Everstake, XY Finance, Swapscanner, and more.**  \n\n#### **Cross-Chain Bridges**  \nKaia facilitates interoperability through trusted blockchain bridges:  \n- **Wormhole, Synapse Protocol, LayerZero, Orbit Bridge, Celer cBridge, Allbridge, SiX Bridge, Stargate, XY Finance.**  \n\n#### **Stablecoins & On-Ramps**  \nStablecoins and fiat-crypto gateways enhance accessibility:  \n- **Alchemy Pay, MoonPay, Simplex, NOWPayments, Changelly, BANXA, Transit Buy, ChangeNOW.**  \n\n#### **Custody & Security Solutions**  \nInstitutional-grade custody providers ensure asset security:  \n- **Fireblocks, Ceffu, Hex Trust, Cactus Custody, Copper.**  \n\n#### **DeFi Analytics & Infrastructure**  \nTrack and analyze DeFi trends with these tools:  \n- **Dune, Flipside, DefiLama, DappRadar, Dexata.**  \n- **Blockchain explorers: Kaiascan, Kaiascope, OKX Explorer, BICScan.**  \n\n---\n\n# **Kaia Ecosystem: Social dApps**  \n\nThe Kaia ecosystem features a diverse range of **Social dApps**, including gaming platforms, NFT marketplaces, SocialFi applications, and launchpads. These dApps foster digital interaction, community engagement, and decentralized ownership.  \n\n## **Gaming dApps in Kaia**  \nKaia integrates with leading blockchain gaming platforms, offering immersive play-to-earn experiences and innovative game mechanics:  \n- **Major Gaming Platforms:** Netmarble, MARBLEX, KakaoGames, MetaBora, Iskra, AnotherWorld, Nino Kuni, Me3 - Gacha Galaxy, 3KDS.  \n- **Expanding Web3 Gaming Universe:** Brave Nine, A3, Crypto Golf Impact, Drawshop Kingdom Reverse, FiveStar, Rezolut, Honor of Kingdoms, Klay Dice, Meta Arena, MeeCats, SheepFarm, Zep, Tank Royale, Punkland, Klay Kingdoms, Team Dao, Avatara.  \n- **Blockchain Gaming & NFT Integration:** ABGA, ArcheWorld, Mooi Network, DeFi Kingdoms, ClawKiss, Birdie Shot, X2E All, Meta Toy Dragonz, Land Chronicle, Meta Soul, SEGA Singapore, Rillaz, Meta World: My City, MITRA, NEOPLY, THRUST.  \n\n## **NFT Marketplaces in Kaia**  \nKaia’s NFT marketplaces provide platforms for minting, trading, and discovering digital assets:  \n- **Leading NFT Marketplace:** OpenSea – The largest NFT marketplace supporting Kaia ecosystem assets.  \n- **Other NFT Marketplaces:** KlipDrops, Dosi, KottonSeed, 3Space Art, X2Y2 – Platforms for buying, selling, and showcasing NFTs and digital collectibles.  \n\n## **NFT Ecosystem in Kaia**  \nKaia supports various NFT projects that bring unique digital art, collectibles, and virtual assets to users:  \n- **Popular NFT Projects:** ALTAVA, Cat Town Punks, Cyber THUG, Dogs Sound Club, Hypesalt, Klip Drops, Little Orbit, NFTb, O-SEAN, Sunmiya Club, TopGoal, Xclusive.  \n\n## **SocialFi dApps in Kaia**  \nSocialFi applications blend social media with decentralized finance, allowing users to earn rewards through engagement:  \n- **Top SocialFi Platforms:** Superwalk, Zep.us, Klip Pass, Fantrie, SomeSing – Platforms enabling users to monetize interactions, content, and community participation.  \n\n## **Launchpads in Kaia**  \nLaunchpads provide new Web3 projects with fundraising, exposure, and community-building tools:  \n- **Notable Launchpads:** ALTAVA, Xclusive, X2Y2 Pro, ProjectWITH – Supporting Web3 startups with funding and early user engagement.  \n\n---\n\n# **Kaia Ecosystem: Real World Assets (RWA)**  \n\nThe **Kaia ecosystem** supports **Real World Assets (RWA)** by enabling tokenization, asset management, secure custody, and analytics for traditional assets on-chain. These tools facilitate seamless digitization, trading, and management of physical and financial assets.  \n\n## **Tokenization & Asset Management**  \nPlatforms that facilitate the issuance, compliance, and management of tokenized RWAs:  \n- **Tokeny** – Institutional-grade tokenization infrastructure for real-world assets.  \n- **Elysia** – Tokenizing real estate and physical assets on the blockchain.  \n- **InvestaX** – A platform for digital securities, including real estate and private equity.  \n- **CREDER-ITCEN** – Financial solutions leveraging blockchain for asset tokenization.  \n\n## **Tokenized RWA Assets**  \nProjects bringing traditional financial instruments into the blockchain ecosystem:  \n- **Goldstation** – A platform for tokenized gold investments.  \n- **ELYFI** – A DeFi lending protocol backed by tokenized real estate.  \n- **Galactica** – A decentralized asset tokenization and trading platform.  \n- **Grab Joob** – Tokenizing both physical and digital assets in a blockchain ecosystem.  \n\n## **RWA Distributors & Exchanges**  \nPlatforms that provide market access for tokenized assets:  \n- **InvestaX** – A licensed exchange for trading digital securities and RWA tokens.  \n\n## **Wallets & Custodians for RWA**  \nSecure solutions for storing and managing tokenized assets:  \n- **Non-Custodial Wallets** – Supporting RWA transactions and asset management:  \n  **Kaia Wallet, ABC Wallet, Alphawallet, Biport, Bitget Wallet, Coin98, D'Cent, DeFi Wallet, FAVORLET, FoxWallet, Huobi Wallet, Klip, MetaMask, NOW Wallet, OneKey, Rabby Wallet, Rewardy Wallet, SafePal, TokenPocket, Trustkeys, WELLDONE Wallet, Wallacy Wallet.**  \n- **Institutional Custody Solutions** – Enterprise-grade security for RWA assets:  \n  **Fireblocks, Ceffu, Hex Trust, Cactus Custody, Copper.**  \n\n## **RWA Data Oracles**  \nReliable real-world data feeds for asset pricing and smart contract execution:  \n- **Pyth Network, Orakl, Supra Network, Witnet, DigiOracle** – Providing accurate and tamper-proof pricing data.  \n\n## **RWA Analytics**  \nBlockchain analytics tools tracking RWA trends, performance, and liquidity:  \n- **Dune, Flipside, DeFiLama, DappRadar, Dexata** – Delivering real-time insights on tokenized assets.  \n\n## **Infrastructure for RWA**  \nScalable blockchain solutions ensuring seamless RWA transactions and operations:  \n- **Node Providers:** **ANKR, QuickNode, Pocket Network, BlockPi, Tatum, NodeReal, GetBlock, NowNodes, dRPC, 1RPC.**  \n- **Cloud Services:** **AWS, Google Cloud, Chainstack** – Supporting scalable enterprise infrastructure.  \n- **Blockchain Explorers:** **Kaiascan, Kaiascope, OKX Explorer, BICScan** – Enabling transparency and tracking of tokenized assets on-chain.  \n\n---\n\n# **Kaia Ecosystem: Gaming & NFT**  \n\nThe **Kaia ecosystem** integrates top **Gaming & NFT** platforms, marketplaces, launchpads, analytics tools, and infrastructure providers to enhance the Web3 gaming experience and digital collectibles economy.  \n\n## **Gaming & NFT Marketplaces**  \nKaia supports multiple NFT marketplaces for minting, buying, selling, and trading digital assets:  \n- **Major NFT Marketplace:** OpenSea – The largest decentralized NFT trading platform.  \n- **Other Marketplaces:** KlipDrops, Dosi, KottonSeed, 3space Art, X2Y2 – Platforms for discovering and trading unique digital collectibles.  \n\n## **Gaming & NFT Launchpads**  \nLaunchpads help new **Gaming & NFT** projects raise funds and gain community support:  \n- **Notable Launchpads:** ALTAVA, Xclusive, X2Y2 Pro, ProjectWITH – Offering incubation and funding for Web3 gaming and NFT startups.  \n\n## **Domain Services for Gaming & NFTs**  \nDecentralized domain solutions for Web3 identity and asset management:  \n- **KNS (Kaia Name Service)** – Blockchain-based domain service for personalized Web3 identities.  \n\n## **Gaming & NFT DAOs**  \nDecentralized Autonomous Organizations (DAOs) that enable community-driven governance for gaming and NFT projects:  \n- **Snapshot** – On-chain governance platform for decentralized decision-making.  \n- **KommuneDAO** – A DAO framework supporting NFT and gaming communities.  \n\n## **Gaming & NFT Analytics**  \nReal-time tracking and insights into blockchain gaming assets, NFT trends, and DeFi integrations:  \n- **Top Analytics Platforms:** Dune, Flipside, DeFiLama, DappRadar, Dexata – Providing data-driven insights into gaming and NFT ecosystems.  \n\n## **Decentralized Storage for NFTs & Game Assets**  \nSecure, censorship-resistant storage solutions for gaming content and digital collectibles:  \n- **IPFS** – Decentralized storage protocol for NFT and gaming data.  \n- **Pinata** – IPFS-based NFT media hosting and content management service.  \n\n## **Liquidity Management for NFTs & Gaming Tokens**  \nTools for optimizing token liquidity in gaming and NFT ecosystems:  \n- **Hypesalt** – A liquidity management platform designed for NFT and gaming markets.  \n\n## **Gaming & NFT Infrastructure**  \nRobust blockchain infrastructure ensuring seamless transactions and operations:  \n- **Node Providers:** ANKR, QuickNode, Pocket Network, BlockPi, Tatum, NodeReal, GetBlock, NowNodes, dRPC, 1RPC – Supporting scalable Web3 applications.  \n- **Cloud Services:** AWS, Google Cloud, Chainstack – Providing scalable hosting for gaming and NFT projects.  \n- **Blockchain Explorers:** Kaiascan, Kaiascope, OKX Explorer, BICScan – Offering transparency and tracking for gaming and NFT transactions.  \n\n## **Payments & On-Ramps for NFTs & Gaming**  \nSeamless fiat-to-crypto payment solutions for purchasing NFTs and gaming tokens:  \n- **Popular On-Ramp Services:** Alchemy Pay, Moonpay, Simplex, NOWPayments, Changelly, BANXA, Transit Buy, ChangeNOW – Facilitating fiat-to-crypto conversions for gaming and NFT transactions.",
    "Current Website Url is https://kaia.io/governance. # [KAIA GOVERNANCE](https://www.kaia.io/governance)\n\nOptimized. Practical. Effective.\n================================\n\nKaia’s governance structure is designed to deliver the best of all worlds - expert leadership, ecosystem growth, and all the practical benefits of decentralization with none of the drawbacks.\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n### A council of proven luminaries\n\nKaia is led by the Governance Council (GC), a group of global leaders in the Web3 space and beyond that contribute their experience and expertise towards all governance decisions.\n\n### Collaboration that goes beyond validation\n\nBeyond node operation and governance, Kaia GC members actively accelerate Kaia’s ecosystem growth through their DApps, services, initiatives, and business networks.\n\n### Practical, optimized decentralization\n\nPublic delegation and the geographical distribution of Kaia GC members ensure that no single entity can jeopardize the security or the open and public nature of the Kaia network - without the need for thousands of nodes.\n\n[LEARN MORE ABOUT KAIA GOVERNANCE](https://docs.kaia.io/learn/governance/)\n\nLet your voice be heard today\n-----------------------------\n\nAnyone and everyone can participate in Kaia governance by delegating your stake through Kaia Square and contributing to governance proposal discussions in the Governance Forum.\n\nKaia Square\n-----------\n\nThe one-stop portal for public, delegation, governance results, and treasury usage.\n[Explore](http://square.kaia.io)\n\nGovernance Forum\n----------------\n\nThe public forum for the discussion of governance proposals prior to on-chain voting.\n[Join the conversation](http://govforum.kaia.io/)\n",
    "Current Website Url is https://kaia.io/mini-dapps. # [Line MiniDapps on Kaia](https://www.kaia.io/mini-dapps)\n\nLINE MiniDapps are decentralized applications (dApps) built on the Kaia blockchain, seamlessly integrated with the LINE ecosystem. These MiniDapps offer users an interactive Web3 experience, enabling gameplay, digital asset ownership, and blockchain-based services within the LINE platform. By leveraging Kaia’s fast and secure blockchain infrastructure, these dApps ensure a smooth and scalable experience for users.\n\nHere are some of the LINE MiniDapps available on Kaia:  \n\n\n| Mini Dapp name              | CTA                                                                    |\n| --------------------------- | ---------------------------------------------------------------------- |\n| Web3.0 Plants vs Zombies    | [Play Now](https://pvz.web3pvz.com/web/)                              |\n| Futr                        | [Play Now](https://www.backtothefutr.com/)                            |\n| Elderglade                  | [Play Now](https://mobile.elderglade.com/)                            |\n| Wizzwoods                   | [Play Now](https://ln-game.wizzwoods.com/)                            |\n| KeitoKun                    | [Play Now](https://game.keitokun.com/)                                |\n| Tsubasa RIVALS on LINE      | [Play Now](https://web-app.line.tsubasa-rivals.com/)                 |\n| Frog Defense                | [Play Now](https://play.frogdefense.io/)                              |\n| Heroic Arena                | [Play Now](https://liff.line.me/2006724473-egYwBvpB)                 |\n| SuperZ                      | [Play Now](https://superz.superwalk.io/)                              |\n| X-Hero                      | [Play Now](https://xheroline.digitalfire.studio/)                     |\n| Goblin Tycoon: Zero to Hero | [Play Now](https://goblinline.digitalfire.studio/)                    |\n| Midnight Survivors          | [Play Now](https://liff.line.me/2006640650-mJ8bydwe)                 |\n| BulletStorm                 | [Play Now](http://bulletstorm.xyz/)                                   |\n| Bombie                      | [Play Now](https://bombie.xyz/)                                       |\n| Cattea                      | [Play Now](https://liff.line.me/2006725206-9wRWZmEj)                 |\n| YuliGO                      | [Play Now](https://kaia.yuliverse.com/)                               |\n| TCOM ARENA                  | [Play Now](https://bridge.dappportal.io/dapp/N6788fda5dcf5077c4fd640de)|\n| Goblin Master               | [Play Now](https://liff.line.me/2006747054-knWbOzMy)                 |\n| Jumping Peng                | [Play Now](https://jumpingpeng.com/)                                  |\n| TGWiz                       | [Play Now](https://liff.line.me/2006702774-bDDnYDqe)                 |\n| Slime Miner                 | [Play Now](https://liff.line.me/2006760413-ZDj8dYwp)                 |\n| Kyuzo's Friends             | [Play Now](https://kyuzosfriends.com/play)                            |\n| Boxing Star X               | [Play Now](https://line.me/R/ti/p/@282ndduy)                          |\n| Kuma Jump                   | [Play Now](https://liff.line.me/2006738235-3EgMR0oM)                 |\n| The Fox Seeks Friends       | [Play Now](https://line.me/R/ti/p/@507hcmlq)                          |\n| BANANA                      | [Play Now](https://liff.line.me/2006868971-7k419bK9)                 |\n| AKEFish                     | [Play Now](https://liff.line.me/2006888629-b230Perq)                 |\n| Meme Musume                 | [Play Now](https://liff.line.me/2006740801-76oYPj23)                 |\n| Pudgy Fruit Frenzy          | [Play Now](https://liff.line.me/2006877421-pez1gEXd)                 |\n| Depinsim                    | [Play Now](https://liff.line.me/2006903589-zMmbnGWg)                 |\n\nExplore more on the [LINE Dapp Portal](https://www.dappportal.io/) and discover hundreds of Mini Dapps with rewards every day!",
    "Current Website Url is https://kaia.io/ecosystem. # Below are the descriptions of all Kaia Ecosystem Partners\n\n## 1inch\n**Description:**  \nThe 1inch Network unites decentralized protocols whose synergy enables the most lucrative, fastest, and protected operations in the DeFi space by offering access to hundreds of liquidity sources across multiple chains.  \n[Website](https://1inch.io/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/intent/follow?screen_name=1inch) | [Telegram](https://t.me/OneInchNetwork) | [Discord](https://discord.com/invite/1inch)  \n\n**Categories:**  \nSwap  \n\n---\n\n## 3KDS\n**Description:**  \n3KDS is an integrated content platform that builds a cultural worldview interconnected with various media such as games, social media, webtoons, and more.  \n[Website](https://hub.3kds.io/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/3KDS_OFFICIAL) | [Telegram](https://t.me/official_3kds) | [Medium](https://medium.com/@3kds.contact) | [Discord](https://discord.com/invite/3kds)  \n\n**Categories:**  \nGaming  \n\n---\n\n## 3KM\n**Description:**  \n3KM is a collectible, 3D, turn-based RPG based on the Three Kingdoms era, combining modern gaming experiences with historical themes.  \n[Website](http://3km.io/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/3KMOfficial) | [Discord](https://discord.com/invite/3km)  \n\n**Categories:**  \nGaming  \n\n---\n\n## 3space Art\n**Description:**  \n3space Art is a digital art platform where artists and collectors can showcase and trade digital art in offline events and exhibitions.  \n[Website](https://3space.art/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/3spaceart) | [Telegram](https://t.me/threespaceart)  \n\n**Categories:**  \nNFT  \n\n---\n\n## A3: Still Alive\n**Description:**  \nA dark fantasy open-world RPG with a blockchain ecosystem, offering PVP battles, raids, and guild siege battles.  \n[Website](https://a3global.netmarble.com/)  \n\n**Socials:**  \n[Facebook](https://www.facebook.com/A3SAEN/) | [Instagram](https://www.instagram.com/A3SAEN/?fbclid=IwAR1_m8uFh1BKx3a-rFXfO3LpGHJZZDlqrfaN_3LUfTc6fNL9zj7z9t6L7Ac)  \n\n**Categories:**  \nGaming  \n\n---\n\n## ABC Wallet\n**Description:**  \nA secure, non-custodial wallet designed by AhnLab Blockchain Company, offering robust security and a seamless crypto experience.  \n[Website](https://myabcwallet.io/en/)  \n\n**Categories:**  \nWallets  \n\n---\n\n## ABGA (Asia Blockchain Gaming Alliance)\n**Description:**  \nABGA is an alliance focused on blockchain gaming, metaverse, and NFTs, supporting industry growth through events and collaborations.  \n[Website](https://www.abga.asia)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/AmerBoerGoat)  \n\n**Categories:**  \nGaming, Governance Council  \n\n---\n\n## ALTAVA\n**Description:**  \nALTAVA Group creates brand experiences that bridge physical and virtual worlds in the metaverse.  \n[Website](https://altava.com/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/altavagroup?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor)  \n\n**Categories:**  \nNFT  \n\n---\n\n## ANKR\n**Description:**  \nAnkr provides key infrastructure for blockchain ecosystems, supporting network upgrades and RPC services.  \n[Website](https://www.ankr.com/rpc/klaytn)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/ankr) | [Telegram](https://t.me/ankrnetwork)  \n\n**Categories:**  \nTools & Infrastructure, RPCs  \n\n---\n\n## AQX\n**Description:**  \nA next-generation trading platform connecting investors with exclusive opportunities in the crypto space.  \n[Website](https://aqx.com/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/AQXofficial) | [Telegram](https://twitter.com/AQXofficial)  \n\n**Categories:**  \nCEXes & Payments  \n\n---\n\n## ARTRA\n**Description:**  \nA blockchain-based real art trading platform that allows users to buy and sell artwork using KLAY.  \n[Website](https://artra.gallery/)  \n\n**Socials:**  \n[Telegram](https://t.me/artra_community) | [Instagram](https://www.instagram.com/gallery.artra/)  \n\n**Categories:**  \nNFT  \n\n---\n\n## AhnLab Blockchain Company\n**Description:**  \nAhnLab Blockchain Company is a security-focused blockchain R&D firm, specializing in Web3, metaverse security, and multi-chain crypto wallets.  \n[Website](https://ahnlabblockchain.company/en/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/AhnLab_ABC) | [Facebook](https://www.facebook.com/abcwallet2022) | [YouTube](https://www.youtube.com/@ABC_Wallet)  \n\n**Categories:**  \nGovernance Council  \n\n---\n\n## Airbloc\n**Description:**  \nEnterprise-grade data infrastructure for transparent and legal data collection, monetization, and exchange.  \n[Website](https://www.airbloc.org/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/airblocofficial?lang=en) | [Telegram](https://t.me/airbloc)  \n\n**Categories:**  \nDApps  \n\n---\n\n## Alchemist Republic\n**Description:**  \nA platform on Klaytn Network that allows users to transmute game items into NFT cards.  \n[Website](https://www.alchemist-republic.com/)  \n\n**Categories:**  \nGaming  \n\n---\n\n## Alchemy Pay\n**Description:**  \nA global payment gateway connecting fiat and crypto through seamless transactions.  \n[Website](https://alchemypay.org/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/alchemypay) | [Medium](https://alchemypay.medium.com/) | [YouTube](https://youtube.com/@AlchemyPay) | [LinkedIn](https://www.linkedin.com/company/alchemypay)  \n\n**Categories:**  \nCEXes & Payments  \n\n---\n\n## All That Node\n**Description:**  \nA multi-chain development suite supporting various blockchain networks with APIs and infrastructure.  \n[Website](https://www.allthatnode.com/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/allthatnode) | [Medium](https://medium.com/dsrv/allthatnode/home) | [Discord](https://discord.gg/GmcdVEUbJM)  \n\n**Categories:**  \nTools & Infrastructure, RPCs  \n\n---\n\n## Allbridge\n**Description:**  \nA modular bridge connecting multiple blockchain networks for seamless asset transfers.  \n[Website](https://allbridge.io/)  \n\n**Socials:**  \n[Twitter/X](https://twitter.com/Allbridge_io) | [Telegram](https://t.me/allbridge_official)  \n\n**Categories:**  \nOracles & Bridges  \n\n---\n\n## Alphaday\n**Description:**  \nAlphaday is a powerful crypto workflow aggregator that pulls in news, on-chain data, social media, web3 services, and much more into one customizable UI.  \n[Proposal Details](https://docs.google.com/document/d/1X3NU_bx-4JWpr_oe7W3ao5qnaNdottPVBurDjsk2yjw/edit?usp=sharing)  \n\n**Socials:**  \n- [Twitter/X](https://x.com/AlphadayHQ)  \n\n**External Links:**  \n- [Project Website](https://app.alphaday.com/)  \n- [Deck](https://alphaday.com/deck)  \n\n**Categories:**  \nTools & Infrastructure  \n\n---\n\n## Alphawallet\n**Description:**  \nThe team at AlphaWallet is committed to connecting businesses and consumers with the new digital economic infrastructure through tokenization. Tokenized rights can be traded on the market and integrated across systems, forming a Frictionless Market and allowing limitless integration.  \n\nAlphaWallet provides **TokenScript**, an open framework that is the “HTML” for tokens, enabling developers to make their tokens “smart.” The AlphaWallet app acts as a browser for users to access these SmartTokens, analogous to websites in the web 2.0 world.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/alphawallet)  \n- [Telegram](https://t.me/AlphaWalletGroup)  \n\n**External Links:**  \n- [Project Website](https://alphawallet.com/)  \n\n**Categories:**  \nWallets  \n\n---\n\n## Animal Concerts\n**Description:**  \nANML is the token that fuels the Animal Concerts ecosystem and is the key to unlocking a world of infinite possibilities.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/animalconcerts)  \n- [Instagram](https://www.instagram.com/animalconcerts/)  \n\n**External Links:**  \n- [Project Website](https://animalconcerts.com/)  \n\n**Categories:**  \nOthers  \n\n---\n\n## Animal Punks V2\n**Description:**  \nKlaytn (KLAY) based NFT Generative Project. Randomly generated 10,000 Cartoon Style, \"ANIMALS PUNKS\".  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/AnimalsPunks)  \n- [Discord](https://discord.com/invite/Wvyeasb9)  \n\n**External Links:**  \n- [Project Website](https://apgangs.com/)  \n\n**Categories:**  \nNFT  \n\n---\n\n## Animoca Brands\n**Description:**  \nAnimoca Brands is working to advance digital property rights and contribute to the establishment of the open metaverse.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/animocabrands)  \n- [Other](https://twitter.com/animocaresearch)  \n\n**External Links:**  \n- [Project Website](https://www.animocabrands.com/)  \n\n**Categories:**  \nGC (Game Companies)  \n\n---\n\n## Another World\n**Description:**  \nAnother World is a leading Metaverse platform on the Klaytn network. Previously launched as **Terra World**, it was the first metaverse project on Terra, breaking NFT sale records and building a massive 200k+ community. After the Terra de-peg crisis, Another World migrated to Klaytn, maintaining its large community and assets.  \n\nPowered by **Unity Engine**, Another World is designed for mass adoption, providing an immersive metaverse experience. **AWM**, its main token, plays a crucial role across its ecosystem.  \n\n**Socials:**  \n- [Twitter/X](https://x.com/anotherworldgm)  \n- [Medium](https://medium.com/anotherworld)  \n- [Discord](https://discord.com/invite/anotherworldgm)  \n\n**External Links:**  \n- [Project Website](https://www.anotherworld.game/)  \n\n**Categories:**  \nGC (Game Companies), Gaming  \n\n---\n\n## ArcheWorld\n**Description:**  \nArcheWorld is a **MMORPG** that incorporates blockchain technology and is based on the globally acclaimed **ArcheAge**. Originally launched in Korea in 2013, ArcheAge has expanded worldwide, including North America, Europe, Japan, Russia, China, and more.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/ArcheWorld_NFT)  \n- [Telegram](https://t.me/ArcheWorld_nft)  \n- [Discord](https://discord.com/invite/ArcheWorld)  \n\n**External Links:**  \n- [Project Website](https://asia.archeworld.com)  \n\n**Categories:**  \nGaming  \n\n---\n\n## Atomrigs Lab\n**Description:**  \nAtomrigs Lab provides **Web3 infrastructure solutions** for mass adoption, specializing in decentralized applications using **privacy-preserving computation** and Ethereum blockchain.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/DekeyWallet)  \n- [Facebook](https://www.facebook.com/atomrigsC)  \n\n**External Links:**  \n- [Project Website](https://www.atomrigs.io/)  \n\n**Categories:**  \nWallets  \n\n---\n\n## Avatara\n**Description:**  \nJointly developed by **NX3 game studio** (ROHAN M fame) and blockchain developer **NXIO**, Avatara is an upcoming blockbuster **MMORPG** integrating P2E and NFT mechanics.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/Avatara_main)  \n- [Telegram](https://t.me/Avatara_main)  \n- [Discord](https://discord.com/invite/u4z9xKhFpS)  \n\n**External Links:**  \n- [Project Website](https://avatara.online/)  \n\n**Categories:**  \nGaming  \n\n---\n\n## BICScan\n**Description:**  \nBICScan is a blockchain scanner providing **transparency and safety** in the blockchain space. Users can easily trace wallet and contract addresses across multiple networks with a single click.  \n\nBICScan integrates **on-chain and off-chain data** to give risk scores, price quotes, and scam status insights, all in one place. Developed by **AhnLab Blockchain Company**, it focuses on **user experience** and real-time data tracking, with API support for integrations.  \n\n**External Links:**  \n- [Project Website](https://bicscan.io/)  \n\n**Categories:**  \nTools & Infrastructure  \n\n---\n\n## BIT\n**Description:**  \nBIT is a full-featured **cryptocurrency exchange** designed for professional traders. Launched in August 2020 as a **spinoff from Matrixport**, BIT specializes in **USD-margined trading pairs** and offers **Portfolio Margin & Unified Margin** risk management tools.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/BITCryptoXchg)  \n- [Telegram](https://t.me/bitcom_exchange)  \n- [LinkedIn](https://www.linkedin.com/company/bit-crypto-exchange/)  \n\n**External Links:**  \n- [Project Website](https://bit.com/)  \n\n**Categories:**  \nCEXes & Payments  \n\n---\n\n## BKEX\n**Description:**  \nOperated by **BTC King Technology Co., Ltd**, BKEX is the **world’s first community-based digital asset exchange**, combining the advantages of **centralized performance** with **decentralized reliability**.  \n\nBKEX provides secure **digital asset storage**, **crowdfunding**, and **super-node governance** using **DPOS-based decision-making**.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/BKEXGlobal)  \n- [Telegram](https://t.me/BKEXEnglish)  \n\n**External Links:**  \n- [Project Website](https://www.bkex.com/)  \n\n**Categories:**  \nCEXes & Payments  \n\n---\n\n## BTCEX\n**Description:**  \nLaunched in July 2021, BTCEX is a **full-category digital asset trading platform** offering beginner-friendly **copy trading** and **crypto derivatives** like perpetual contracts.  \n\nRegistered in Seychelles, BTCEX has obtained key licenses in **Canada, Lithuania, and Estonia**, with offices in **Canada, Singapore, Hong Kong, and Dubai**.  \n\n**Socials:**  \n- [Twitter/X](https://twitter.com/BTCEX_exchange)  \n- [Telegram](https://t.me/BTCEX_exchange)  \n- [LinkedIn](https://www.linkedin.com/company/btcex/)  \n- [Instagram](https://www.instagram.com/btcex_exchange/)  \n\n**External Links:**  \n- [Project Website](https://www.btcex.com/en-us/)  \n\n**Categories:**  \nCEXes & Payments  \n\n---\n\n## BTSE  \n**Description:** BTSE is a leading digital asset exchange that offers a simple and secure way to trade cryptocurrencies. As the go-to exchange for all things crypto, BTSE is one of the top trusted crypto platforms for institutions, retail users, and first-time traders. BTSE has developed multiple trading technologies that have been adopted across the industry, setting new standards for excellence and innovation in the world of digital asset trading. Additionally, BTSE licenses its industry-leading technology to exchanges worldwide through its white-label exchange solutions, strengthening the BTSE ecosystem and bridging traditional finance with digital assets everywhere.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BTSE_Official)  \n- [Telegram](https://t.me/btsecom)  \n- [Discord](https://discord.com/invite/btse)  \n**External Project Link:** [BTSE Website](https://www.btse.com/en/home)  \n**Categories:** cexes-payments  \n\n---\n\n## BTX  \n**Description:** BTX has been at the forefront of electroporation technology since we introduced the first commercially available electroporator in 1983. For over 30 years, we have made it our priority to focus only on electroporation and electrofusion. This focus has allowed us to develop the experience and expertise to supply you with a broad selection of innovative in vivo and in vitro tools to advance your research. BTX is part of the Harvard Bioscience family of companies. Harvard Bioscience (Nasdaq: HBIO) is a global developer, manufacturer, and marketer of a broad range of specialized products, primarily scientific instruments.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BTX_HAI)  \n**External Project Link:** [BTX Website](https://btxpro.com/ko)  \n**Categories:** cexes-payments  \n\n---\n\n## Banxa  \n**Description:** Banxa's mission is to accelerate the world to Web3 with its leading global on-and-off ramp solution. Through its extensive network of local payment solutions paired with the required crypto licenses, Banxa gives its partners and projects access to global audiences with less friction and higher conversions. Banxa has a global team of Web3 natives - with operating headquarters in the USA, Europe, and APAC regions. Banxa is a financial technology platform - Banxa is not a bank / authorized deposit-taking institution.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BanxaOfficial)  \n- [Facebook](https://www.facebook.com/Banxa.Official/)  \n**External Project Link:** [Banxa Website](https://banxa.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## Belt Finance  \n**Description:** Belt.fi is a stableswap AMM protocol that incorporates multi-strategy yield optimizing on Binance Smart Chain (BSC), HECO Chain, and Klaytn with low fees/slippage that also provides aggregation through vault compounding, lending, and yield generation for maximum returns.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BELT_Finance)  \n**External Project Link:** [Belt Finance Website](https://belt.fi)  \n**Categories:** dexes-defi  \n\n---\n\n## BiFi X  \n**Description:** BiFi, a multi-chain DeFi service that started as a mortgage protocol, has made a leap into multi-chain DeFi by integrating Ethereum and Binance Smart Chain (BSC) information using BIFROST's multi-chain technology. In just six months after its launch, it has grown to a service that trades more than 8,000 wallets and $73 million (about 83 billion won).  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BiFi_lending)  \n**External Project Link:** [BiFi X Website](https://x.bifi.finance/)  \n**Categories:** dexes-defi  \n\n---\n\n## Binance  \n**Description:** Binance is the world's leading blockchain and cryptocurrency infrastructure provider with a financial product suite that includes the largest digital asset exchange by volume. Trusted by millions worldwide, the Binance platform is dedicated to increasing the freedom of money for users, and features an unmatched portfolio of crypto products and offerings, including trading and finance, education, data and research, social good, investment and incubation, decentralization and infrastructure solutions, and more.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/binance)  \n- [Telegram](https://t.me/BinanceExchange)  \n**External Project Link:** [Binance Website](https://www.binance.com/en)  \n**Categories:** cexes-payments; gc  \n\n---\n\n## Binance Earn  \n**Description:** Binance DeFi Staking acts on behalf of users to participate in certain DeFi products, obtains and distributes realized earnings, and helps users to participate in DeFi products with a single click.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/binance)  \n**External Project Link:** [Binance Earn](https://www.binance.com/en/earn/klay)  \n**Categories:** dexes-defi  \n\n---\n\n## BingX  \n**Description:** Founded in 2018, BingX is a leading crypto exchange that offers spot, derivatives, copy, and grid trading services to more than 100 countries and regions worldwide with over 5 million users. With user trust and platform transparency as the top priority, BingX continues to connect users with expert traders and the platform in a safe, leading, and innovative way. BingX is an international financial institution providing digital services with branch offices in North America, Canada, the EU, Hong Kong, and Taiwan. BingX has also obtained 4 regulatory licenses in Canada, the USA, Australia, and the EU, enabling us to operate in other countries and regions where it provides its services or carries on any form of business.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BingXOfficial)  \n- [Telegram](https://t.me/BingXOfficial)  \n**External Project Link:** [BingX Website](https://bingx.com/ko-kr/)  \n**Categories:** cexes-payments  \n\n---\n\n## Biport\n**Description:**  \nSend, receive, and store your collections in one wallet. Biport supports multichain NFTs which the users are able to store, send, and receive all NFTs.  \n\n**Socials:**  \n- Twitter/X: [@BiportWallet](https://twitter.com/BiportWallet)  \n- Discord: [Join Biport on Discord](https://discord.com/invite/zaTAdzbdYM)  \n\n**External Project Link:**  \n[Biport Website](https://biport.io/#/)  \n\n**Categories:**  \nWallets  \n\n---\n\n## Birdie Shot\n**Description:**  \nIn BIRDIE SHOT: Enjoy & Earn, you can collect cute characters and the latest golf equipment to compete against players all across the globe!  \n\n**Socials:**  \n- Discord: [Join Birdie Shot on Discord](https://discord.com/invite/borachain)  \n\n**External Project Link:**  \n[Birdie Shot Website](https://www.birdieshot.io/)  \n\n**Categories:**  \nGaming  \n\n---\n\n## Bisonai\n**Description:**  \nBisonai delivers data infrastructure for Web3.  \n\n**Socials:**  \n- Twitter/X: [@bisonaiofficial](https://twitter.com/bisonaiofficial)  \n- Medium: [Bisonai on Medium](https://bisonai.medium.com/)  \n- LinkedIn: [Bisonai on LinkedIn](https://www.linkedin.com/company/bisonai)  \n\n**External Project Link:**  \n[Bisonai Website](https://bisonai.com/)  \n\n**Categories:**  \nGC  \n\n---\n\n## Bit2Me\n**Description:**  \nYou can buy and sell cryptocurrencies from home with the security, ease, and speed that only Bit2Me can provide.  \n\n**Socials:**  \n- Twitter/X: [@bit2me](https://twitter.com/bit2me)  \n\n**External Project Link:**  \n[Bit2Me Website](https://bit2me.com/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## BitBNS\n**Description:**  \nBitbns is one of the largest Indian #cryptocurrency exchange with 376+ Digital Assets.  \n\n**Socials:**  \n- Twitter/X: [@bitbns](https://twitter.com/bitbns/)  \n- Telegram: [Join BitBNS on Telegram](https://t.me/Bitbns)  \n\n**External Project Link:**  \n[BitBNS Website](https://bitbns.com/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## BitGet\n**Description:**  \nEstablished in 2018, Bitget is one of the world’s leading cryptocurrency exchanges. Currently serving more than two million users across 50 countries, Bitget accelerated its mission to promote decentralised finance in 2021 with a 600-strong workforce spanning over twenty countries.  \n\n**Socials:**  \n- Twitter/X: [@bitgetglobal](https://twitter.com/bitgetglobal)  \n- Telegram: [Join BitGet on Telegram](https://t.me/BitgetENOfficial)  \n\n**External Project Link:**  \n[BitGet Website](https://www.bitget.com/en/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## BitMart\n**Description:**  \nAs a global integrated trading platform, BitMart provides diversified system functions including spot trading, futures contract trading, and over-the-counter trading. We are able to satisfy the needs of numerous investors. BitMart's trading system has a robust security mechanism and reliable underlying architecture, which provides investors with a dependable trading experience. Besides, our unique online trading model efficiently matches the market depth of major exchanges all over the world. Relying on the whole network trading system, we believe the BitMart platform will become the largest liquidity provider of digital assets in the world.  \n\n**Socials:**  \n- Twitter/X: [@BitMartExchange](https://twitter.com/BitMartExchange)  \n- Telegram: [Join BitMart on Telegram](https://t.me/BitmartExchange)  \n\n**External Project Link:**  \n[BitMart Website](https://www.bitmart.com/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitazza\n**Description:**  \nBitazza is one of the fastest-growing and trusted digital assets management platforms globally.  \n\n**Socials:**  \n- Twitter/X: [@BitazzaGlobal](https://twitter.com/BitazzaGlobal)  \n- Telegram: [Join Bitazza on Telegram](https://t.me/bitazzaglobal)  \n- Discord: [Join Bitazza on Discord](https://discord.com/invite/5KMzmbA9cJ)  \n\n**External Project Link:**  \n[Bitazza Website](https://bitazza.com/home)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitget Wallet\n**Description:**  \nBitget Wallet is a multichain wallet. By importing existing wallets or creating new ones, you may start managing your crypto portfolio across more than 90 blockchain networks. For your crypto asset security, Bitget Wallet adopts a special DESM (Double Encryption Storage Mechanism). Your assets will be intact even if your device gets stolen.  \n\n**Socials:**  \n- Twitter/X: [@BitgetWallet](https://twitter.com/BitgetWallet)  \n- Telegram: [Join Bitget Wallet on Telegram](https://t.me/Bitget_Wallet)  \n- Discord: [Join Bitget Wallet on Discord](https://discord.gg/qjH6YGDYgh)  \n- Facebook: [Bitget Wallet on Facebook](https://www.facebook.com/BitgetWallet)  \n\n**External Project Link:**  \n[Bitget Wallet Website](https://web3.bitget.com/en)  \n\n**Categories:**  \nWallets  \n\n---\n\n## Bithumb\n**Description:**  \nNo.1 digital asset platform Bithumb. Bithumb provides easy and safe trade.  \n\n**Socials:**  \n- Twitter/X: [@bithumbofficial](https://twitter.com/bithumbofficial)  \n- Telegram: [Join Bithumb on Telegram](https://t.me/BithumbExchange)  \n\n**External Project Link:**  \n[Bithumb Website](https://www.bithumb.com/react/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitmex\n**Description:**  \nBitMEX is a cryptocurrency exchange and derivative trading platform. It is owned and operated by HDR Global Trading Limited, which is registered in the Seychelles. BitMEX offers a variety of cryptocurrency-based financial products, including perpetual contracts, futures contracts, and options contracts.  \n\n**Socials:**  \n- Twitter/X: [@bitmex](https://twitter.com/bitmex)  \n- Telegram: [Join BitMEX Community](https://t.me/BitMEX_Community_Officia)  \n- Discord: [Join BitMEX on Discord](https://discord.com/invite/X2jcEX4Csf)  \n\n**External Project Link:**  \n[BitMEX Website](https://www.bitmex.com/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitpanda\n**Description:**  \nBitpanda is a cryptocurrency exchange that offers professional trading services, mining, staking products, and API support.  \n\n**Socials:**  \n- Facebook: [Bitpanda on Facebook](https://www.facebook.com/bybit_official)  \n- YouTube: [Bitpanda on YouTube](https://www.youtube.com/c/Bybit)  \n- LinkedIn: [Bitpanda on LinkedIn](https://www.linkedin.com/company/bybitexchange/)  \n\n**External Project Link:**  \n[Bitpanda Website](https://www.bitpanda.com/en)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitpoint\n**Description:**  \nKlaytn made its first debut on a Japanese exchange, BITPoint, licensed by the Financial Services Agency of Japan.  \n\n**Socials:**  \n- Twitter/X: [@bitpointlatam](https://twitter.com/bitpointlatam)  \n- Instagram: [Bitpoint on Instagram](https://www.instagram.com/bitpoint.latam/)  \n\n**External Project Link:**  \n[Bitpoint Website](https://www.bitpoint.co.jp/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitrue\n**Description:**  \nBitrue was established by a group of blockchain enthusiasts with a goal of providing complete financial services for digital currencies.  \n\n**Socials:**  \n- Twitter/X: [@BitrueOfficial](https://twitter.com/BitrueOfficial)  \n- Telegram: [Join Bitrue on Telegram](https://t.me/Bitrue_official/)  \n\n**External Project Link:**  \n[Bitrue Website](https://www.bitrue.com/home/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bittrex\n**Description:**  \nFounded in 2014 by three cybersecurity engineers, Bittrex is a leader in the blockchain revolution, providing fast trade execution and industry-leading security practices.  \n\n**Socials:**  \n- Twitter/X: [@BittrexGlobal](https://twitter.com/BittrexGlobal)  \n- Telegram: [Join Bittrex on Telegram](https://t.me/bittrexglobal)  \n- LinkedIn: [Bittrex on LinkedIn](https://www.linkedin.com/company/bittrex/)  \n\n**External Project Link:**  \n[Bittrex Website](https://global.bittrex.com/)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## Bitvavo\n**Description:**  \nBitvavo is a user-friendly and reliable trading platform with a wide variety of digital assets to buy, sell, and store.  \n\n**Socials:**  \n- Twitter/X: [@bitvavocom](https://twitter.com/bitvavocom)  \n- LinkedIn: [Bitvavo on LinkedIn](https://www.linkedin.com/company/bitvavocom/)  \n- Instagram: [Bitvavo on Instagram](https://www.instagram.com/bitvavo/)  \n\n**External Project Link:**  \n[Bitvavo Website](https://bitvavo.com/en)  \n\n**Categories:**  \nCEXes-Payments  \n\n---\n\n## BlackSquad Classic\n**Description:**  \nGametree, the developer of Black Squad Classic NFT, has developed the Optimus System—a VR combat training system developed with the Military Academy.  \n\n**Socials:**  \n- Twitter/X: [@gtprotocol](https://twitter.com/gtprotocol)  \n- Discord: [Join BlackSquad Classic on Discord](https://discord.com/invite/uHqpy9K3AV)  \n\n**External Project Link:**  \n[BlackSquad Classic Website](https://blacksquad.infinitymarket.net/main)  \n\n**Categories:**  \nGaming  \n\n---\n\n## BlockJoy\n**Description:**  \nBlockJoy provides dedicated unmetered blockchain nodes on any bare metal infrastructure.  \n\n**External Project Link:**  \n[BlockJoy Website](https://blockjoy.com/)  \n\n**Categories:**  \nTools-Infrastructure  \n\n---\n\n## BlockPI Network\n**Description:**  \nBlockPI is a top infrastructure provider in APAC, offering high-performance services such as RPC services, validator services, and account abstraction across 50+ networks.  \n\n**Socials:**  \n- Twitter/X: [@RealBlockPI](https://twitter.com/RealBlockPI)  \n- Telegram: [Join BlockPI on Telegram](https://t.me/blockpidaily)  \n- Medium: [BlockPI on Medium](https://medium.com/@blockpi)  \n- Discord: [Join BlockPI on Discord](https://discord.com/invite/xTvGVrGVZv)  \n\n**External Project Link:**  \n[BlockPI Website](https://blockpi.io/)  \n\n**Categories:**  \nTools-Infrastructure, RPCs  \n\n---\n\n## BlockScout\n**Description:**  \nBlockscout is a tool for inspecting and analyzing EVM-based blockchains. It serves as a blockchain explorer for Ethereum Networks.  \n\n**Socials:**  \n- Twitter/X: [@blockscoutcom](https://twitter.com/blockscoutcom?lang=en)  \n\n**External Project Link:**  \n[BlockScout Website](https://www.blockscout.com/)  \n\n**Categories:**  \nTools-Infrastructure  \n\n---\n\n## Blockfinex\n**Description:** Blockfinex - A Global Cryptocurrency Exchange that allows you to trade various cryptocurrencies across the world. Blockfinex is a cryptocurrency exchange owned by Dan Holdings.  \n**Socials:** [Twitter](https://twitter.com/blockfinexcom), [Telegram](https://t.me/blockfinexchange), [Instagram](https://www.instagram.com/blockfinex/)  \n**External Project Link:** [Website](https://www.blockfinex.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## Bluewhale Protocol\n**Description:** Bluewale offers a variety of services that make investment activities easier and more efficient for cryptocurrency owners. Currently, Bluewale provides DeFi-related services such as assets held and DeFi investment status dashboards and smart swaps at Klaytn Blockchain.  \n**Socials:** [Telegram](https://t.me/bluewhale_chatting)  \n**External Project Link:** [Website](https://bwpm.io/#/)  \n**Categories:** dexes-defi  \n\n---\n\n## Brave Nine\n**Description:** Brave Nine (also known as Browndust in Korea) is NEOWIZ’s flagship strategy RPG that has a global gamer base of over 5 million. On May 13, the game was updated with blockchain technology, adding new mechanics that allow players to earn Brave Tokens ($BVT) minted on Klaytn, as well as expanded gameplay through mythic mercenary NFTs.  \n**Socials:** [Twitter](https://twitter.com/bravenineglobal)  \n**External Project Link:** [Website](https://www.bravenine.com/)  \n**Categories:** gaming  \n\n---\n\n## Breakfirstfund\n**External Project Link:** [Website](https://breakfirstfund.com/)  \n**Categories:** dexes-defi  \n\n---\n\n## Bughole\n**Description:** Trusted community-driven blockchain infrastructure provider. Accelerates ecosystem growth with validator ops, GameFi, governance DApps, and DeFi protocols.  \n**Socials:** [Twitter](https://x.com/bughole_io), [Medium](https://medium.com/@Bughole), [Discord](https://discord.com/invite/bugcity)  \n**External Project Link:** [Website](https://bughole.io/), [Lair](https://lair.fi/)  \n**Categories:** gc  \n\n---\n\n## Bwarelabs\n**Description:** Bware Labs aims to tackle Web3 challenges and boost global adoption by offering the industry's highest-performance and most reliable infrastructure services and development tools.  \n**Socials:** [Twitter](https://twitter.com/BwareLabs), [Telegram](https://t.me/bwareLabs), [Discord](https://discord.com/invite/VPkWESgtvV)  \n**External Project Link:** [Website](https://bwarelabs.com/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Bybit\n**Description:** Bybit Multilingual Support. Highly Secure, Stable. Trade With 101x Leverage.  \n**Socials:** [Twitter](https://twitter.com/Bybit_Official), [Telegram](https://t.me/BybitEnglish)  \n**External Project Link:** [Website](https://www.bybit.com/en-US/)  \n**Categories:** cexes-payments  \n\n---\n\n## CREDER-ITCEN\n**Description:** Itcen Group, which has Korea's largest gold exchange as a subsidiary, and BPMG, which possesses core blockchain technology, cooperate to build a comprehensive financial platform centered on gold-based digital assets and add the value of decentralization to gold.  \n**Socials:** [Twitter](https://x.com/The_MiningClub), [Telegram](https://t.me/+uiNj7Nj9o_43MTQ1)  \n**External Project Link:** [Website](https://www.creder.biz/)  \n**Categories:** rwa; gc  \n\n---\n\n## Cactus Custody\n**Description:** CACTUS CUSTODY is your trusted qualified custodian for digital assets. We provide an enterprise-level financial management system for digital assets, risk management modules, customized business lines, role-based accounts, customized approval process, batch receival and batch transfer, asset report and audit trail, as well as safe custody of digital assets.  \n**Socials:** [Twitter](https://twitter.com/CactusCustody), [Telegram](https://t.me/cactuscustody)  \n**External Project Link:** [Website](https://www.mycactus.com/en)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Cases by Kate\n**Description:** Cases by Kate is a 10,000 piece NFT collection stored on the Ethereum blockchain. The current floor price for a Cases by Kate NFT is 0.00105 ETH - $1.78. The total sales volume for Cases by Kate is 87.1 ETH - $147,296.32 with 1220 owners.  \n**Socials:** [Twitter](https://twitter.com/CasesByKateNFT), [Discord](https://discord.com/login)  \n**External Project Link:** [Website](https://www.casesbykate.xyz/)  \n**Categories:** nft  \n\n---\n\n## Cat Town Punks\n**Description:** There are new punks in the town. There are 20,000 unique generated NFTs. And they are ready to take over the world.  \n**Socials:** [Twitter](https://twitter.com/CatTownPunks), [Discord](https://discord.com/invite/3SdZ7uR76j)  \n**External Project Link:** [Website](https://cattownpunks.com/)  \n**Categories:** nft  \n\n---\n\n## Celer cBridge\n**Description:** Celer is a blockchain interoperability protocol enabling a one-click user experience accessing tokens, DeFi, GameFi, NFTs, governance, and more across multiple chains. Developers can build inter-chain-native dApps using the Celer Inter-chain Message SDK to gain access to efficient liquidity utilization, coherent application logic, and shared states. Users of Celer-enabled dApps will enjoy the benefits of a diverse multi-blockchain ecosystem with the simplicity of a single-transaction UX, all from a single chain.  \n**Socials:** [Twitter](https://twitter.com/CelerNetwork), [Telegram](https://t.me/celernetwork)  \n**External Project Link:** [Website](https://cbridge.celer.network/)  \n**Categories:** oracles-bridges  \n\n---\n\n## CertiK\n**Description:** CertiK is a leading blockchain security firm, offering end-to-end security solutions for the blockchain and Web3 space to safeguard projects and enhance trust.  \n**Socials:** [Twitter](https://x.com/CertiK)  \n**External Project Link:** [Website](https://www.certik.com/), [Skynet](https://skynet.certik.com/)  \n**Categories:** gc  \n\n---\n\n## Chain Light\n**External Project Link:** [Website](https://chainlight.io)  \n**Categories:** others  \n\n---\n\n## ChainSafe\n**Description:** ChainSafe is a multichain research and development firm that supports the decentralized web through high-impact contributions to leading protocols. Our work comprises node implementations, interoperability infrastructure, gaming solutions, distributed systems research, blockchain applications, tools, audits, and much more. Everything we work on is open source and community-oriented.  \n**Socials:** [Twitter](https://twitter.com/ChainSafeth), [Medium](https://medium.com/chainsafe-systems), [Discord](https://discord.com/invite/xSAwrnCWcg), [GitHub](https://github.com/chainsafe), [YouTube](https://www.youtube.com/c/chainsafesystems), [LinkedIn](https://www.linkedin.com/company/chainsafe-systems/)  \n**External Project Link:** [Website](https://chainsafe.io/)  \n**Categories:** gaming  \n\n---\n\n## Chainflix\n**Description:** In the Chainflix platform, coins are to be mined during the video-viewing process, and all participants in the system (content creators and activators, storage providers, viewers, operation participants, and advertisers) are organically connected to ensure user-oriented operation and fair distribution of blockchain-based and PoA algorithm-mined coins among the participants.  \n**Socials:** [Twitter](https://twitter.com/chainflix), [Telegram](https://t.me/chainflixnet)  \n**External Project Link:** [Website](https://www.chainflix.net/)  \n**Categories:** dapps  \n\n---\n\n## Chainge Finance\n**Description:** Chainge Finance is an open-source decentralized finance (DeFi) platform that helps users access, manage, and invest their digital assets securely. Powered by blockchain technology, it offers features such as smart contracts, decentralized exchanges, lending, borrowing, staking, and a suite of tools for asset management.  \n**Socials:** [Twitter](https://twitter.com/FinanceChainge)  \n**External Project Link:** [Website](https://www.chainge.finance/)  \n**Categories:** dexes-defi  \n\n---\n\n## Chainlink\n**Description:** Chainlink is the industry-standard Web3 services platform connecting people, businesses, and data with the Web3 world of tomorrow.  \n**Socials:** [Twitter](https://twitter.com/chainlink), [Telegram](https://t.me/chainlinkofficial), [Discord](https://discord.com/invite/chainlink)  \n**External Project Link:** [Website](https://chain.link/)  \n\n---\n\n## Chainspect\n**Description:** Chainspect is a blockchain analytics platform focused on technical metrics for widely used blockchains.  \n**Socials:** [Twitter](https://twitter.com/chainspect_app), [Discord](https://discord.com/invite/nnmJf56XYU)  \n**External Project Link:** [Website](https://chainspect.app/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Chainstack\n**Description:** The limitless Web3 development stack for building applications at any scale, in DeFi, NFT, gaming, analytics, and beyond. Chainstack provides fast, reliable, and easy-to-use infrastructure solutions distributed globally, helping startups and enterprises cut down time to market, costs, and risks.  \n**Socials:** [Twitter](https://x.com/ChainstackHQ), [Telegram](https://t.me/chainstack), [Discord](https://discord.gg/Cymtg2f7pX), [YouTube](https://www.youtube.com/c/Chainstack)  \n**External Project Link:** [Website](https://chainstack.com)  \n**Categories:** tools-infrastructure, rpcs  \n\n---\n\n## ChangeHero\n**Description:** ChangeHero is a leading instant crypto exchange platform, making investing in cryptocurrencies and swapping painless. Users can buy and sell over 100 crypto assets quickly and securely.  \n**Socials:** [Twitter](https://twitter.com/Changehero_io), [Facebook](https://www.facebook.com/Changehero.io/)  \n**External Project Link:** [Website](https://changehero.io/)  \n**Categories:** cexes-payments  \n\n---\n\n## ChangeNOW\n**Description:** ChangeNOW is a non-custodial service for simple and fast cryptocurrency exchanges. It offers over 700 crypto assets for instant swaps without storing funds or requiring accounts.  \n**Socials:** [Twitter](https://twitter.com/ChangeNOW_io), [Telegram](https://t.me/changeNOW_chat), [Instagram](https://www.instagram.com/changenow_io/)  \n**External Project Link:** [Website](https://changenow.io/)  \n**Categories:** cexes-payments  \n\n---\n\n## Changelly\n**Description:** Changelly is a crypto exchange intermediary providing access to 160+ cryptocurrencies for effortless swaps in under 10 minutes via its desktop and mobile apps.  \n**Socials:** [Twitter](https://twitter.com/changelly_team), [Telegram](https://t.me/changelly)  \n**External Project Link:** [Website](https://changelly.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## Claimswap\n**Description:** ClaimSwap is a decentralized exchange (DEX) inspired by SushiSwap, operating via smart contracts on the Klaytn blockchain for on-chain cryptocurrency swaps.  \n**Socials:** [Twitter](https://twitter.com/ClaimSwap)  \n**External Project Link:** [Website](https://claimswap.org/)  \n**Categories:** dexes-defi  \n\n---\n\n## Claw Kiss\n**Description:** ClawKiss is a Dress & Earn blockchain game.  \n**Socials:** [Twitter](https://twitter.com/clawkiss_twt), [Discord](https://discord.com/invite/Ugjq46XF5k)  \n**External Project Link:** [Website](https://clawkiss.com/)  \n**Categories:** gaming  \n\n---\n\n## Cloudbric Cryptobric\n**Description:** Cloudbric is a cloud-based web security service offering a Web Application Firewall (WAF) and DDoS protection.  \n**Socials:** [Twitter](https://twitter.com/cloudbric), [Telegram](https://t.me/cloudbric_clb)  \n**External Project Link:** [Website](https://labs.cloudbric.com/cryptobric)  \n**Categories:** dapps  \n\n---\n\n## Clubrare\n**Description:** Clubrare is a community-owned physical-digital marketplace for trading real-world collectibles and earning rewards.  \n**Socials:** [Twitter](https://twitter.com/clubrare_nft), [Telegram](https://t.me/ANSWER_GOVERNANCE), [Discord](https://discord.com/invite/clubrare-official)  \n**External Project Link:** [Website](https://www.clubrare.xyz/home)  \n**Categories:** marketplaces  \n\n---\n\n## CoinGecko\n**Description:** CoinGecko is a cryptocurrency ranking website providing a 360-degree overview of cryptocurrencies.  \n**Socials:** [Twitter](https://twitter.com/coingecko?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor), [Facebook](https://www.facebook.com/coingecko), [Instagram](https://www.instagram.com/coingecko/)  \n**External Project Link:** [Website](https://www.coingecko.com/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## CoinMarketCap\n**Description:** CoinMarketCap is the world's most trusted and accurate source for crypto market capitalizations, pricing, and information.  \n**Socials:** [Twitter](https://twitter.com/CoinMarketCap?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor), [Telegram](https://t.me/coinmarketcapannouncements), [Facebook](https://www.facebook.com/CoinMarketCap), [LinkedIn](https://www.linkedin.com/company/coinmarketcap/), [Instagram](https://www.instagram.com/CoinMarketCap/)  \n**External Project Link:** [Website](https://coinmarketcap.com/currencies/klaytn/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Coin98\n**Description:** Coin98 is building the infrastructure for Web3 with a suite of DeFi products | Coin98 Wallet, Coin98 Exchange, and SpaceGate.  \n**Socials:** [Twitter](https://twitter.com/coin98_wallet), [Telegram](https://t.me/coin98wallet), [Discord](https://discord.com/invite/ytkeARXYu9)  \n**External Project Link:** [Website](https://coin98.com/)  \n**Categories:** wallets  \n\n---\n\n## CoinDCX\n**Description:** CoinDCX is India's most valued Crypto Investment App. Our exchange is built with user experience and security in mind, providing users with access to a diverse suite of crypto-based financial products and services. Trusted by over 1.3 crore users with 200+ listed coins.  \n**Socials:** [Twitter](https://twitter.com/coindcx), [LinkedIn](https://www.linkedin.com/company/coindcx/), [Instagram](https://www.instagram.com/coindcxofficial/)  \n**External Project Link:** [Website](https://coindcx.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## CoinHako\n**Description:** Founded in 2014 in Singapore, Coinhako provides simple and hassle-free access to Bitcoin and various digital assets across Asia. The platform offers robust features, user-centric design, and seamless trading experiences.  \n**Socials:** [Twitter](https://twitter.com/coinhako), [Telegram](https://t.me/CoinhakoOfficia)  \n**External Project Link:** [Website](https://www.coinhako.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## CoinSpot\n**Description:** CoinSpot allows users to buy, sell, and swap cryptocurrency with ease. It offers an intuitive platform to buy Bitcoin (BTC) and other digital assets.  \n**Socials:** [Twitter](https://twitter.com/coinspotau), [Instagram](https://www.instagram.com/coinspot/)  \n**External Project Link:** [Website](https://www.coinspot.com.au/)  \n**Categories:** cexes-payments  \n\n---\n\n## Coinone\n**Description:** Coinone Core is a cutting-edge solution to build a crypto exchange.  \n**Socials:** [Twitter](https://twitter.com/CoinoneOfficial), [Instagram](https://www.instagram.com/coinone_official/)  \n**External Project Link:** [Website](https://coinone.co.kr/)  \n**Categories:** cexes-payments  \n\n---\n\n## Comet Protocol\n**Description:** The seamless interlink communication aggregator for Ethereum, Bitcoin, and all Layer 1s.  \n**Socials:** [Twitter](https://x.com/Comet_Protocol), [Medium](https://medium.com/@CometProtocol), [GitHub](https://github.com/cometbridge)  \n**External Project Link:** [Website](https://cometbridge.app/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## CompareNodes\n**Description:** RPC performance inspector that evaluates public and private endpoints from 27 global locations within 30 seconds.  \n**Socials:** [Twitter](https://x.com/CompareNodes), [LinkedIn](https://www.linkedin.com/company/comparenodes/)  \n**External Project Link:** [Website](https://www.comparenodes.com/performance-inspector/#klaytn)  \n**Categories:** tools-infrastructure, others  \n\n---\n\n## Copper\n**Description:** Copper is a digital asset technology company that helps institutional investors safely acquire, trade, and store crypto assets.  \n**Socials:** [Twitter](https://twitter.com/CopperHQ), [Telegram](https://t.me/CopperHQ), [LinkedIn](https://www.linkedin.com/company/copperco/), [Instagram](https://www.instagram.com/copper.hq/)  \n**External Project Link:** [Website](https://copper.co/)  \n**Categories:** others  \n\n---\n\n## Core Dot Lab\n**Description:** CoreDot collaborates and incubates innovative startups to create value across Web3 and decentralization.  \n**External Project Link:** [Website](https://coredot.io/)  \n**Categories:** others  \n\n---\n\n## Cosmostation\n**Description:** Institutional-grade cryptocurrency infrastructure provider managing over $1 billion across 70 protocols. Offering scalable blockchain solutions.  \n**Socials:** [Twitter](https://twitter.com/CosmostationVD), [Telegram](https://t.me/cosmostation), [Medium](https://medium.com/cosmostation)  \n**External Project Link:** [Website](https://www.cosmostation.io/), [Mintscan](https://www.mintscan.io/)  \n**Categories:** gc, tools-infrastructure  \n\n---\n\n## Crypto Golf Impact\n**Description:** A mobile sports game built on Klaytn L1 by Neopin Platform, featuring real-time PVP play set against globally renowned tourist spots. Players earn Crystals, which can be swapped for game tokens.  \n**Socials:** [Twitter](https://twitter.com/teamcryptogolf)  \n**External Project Link:** [Website](https://www.cryptogolfimpact.io/)  \n**Categories:** gaming  \n\n---\n\n## Crypto Premier League\n**Description:** A play, learn, and earn trading simulation game with over 100K users, primarily first-time crypto adopters.  \n**Socials:** [Twitter](https://twitter.com/cpl_crypto)  \n**External Project Link:** [Website](https://rezolut.app/)  \n**Categories:** gaming  \n\n---\n\n## Crypto.com\n**Description:** Founded in 2016, Crypto.com is trusted by over 80 million customers worldwide. The platform emphasizes regulatory compliance, security, and privacy. Their vision: \"Cryptocurrency in Every Wallet™.\"  \n**Socials:** [Twitter](https://twitter.com/cryptocom), [Discord](https://discord.com/invite/cryptocom)  \n**External Project Link:** [Website](https://crypto.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## Curvegrid MultiBaas\n**Description:** A blockchain technology company established in 2017, Curvegrid specializes in developer tooling solutions. Its core product, MultiBaas, provides an advanced API, UI, and toolkit for Web3 projects.  \n**Socials:** [Twitter](https://x.com/curvegridinc), [YouTube](https://www.youtube.com/@curvegrid), [Instagram](https://www.instagram.com/curvegrid/)  \n**External Project Link:** [Website](https://www.curvegrid.com/)  \n**Categories:** tools-infrastructure\n\n---\n\n# Cyber THUG  \n**Description:** World's first hypocrisy-free, vicious PFP NFT project. CyberTHUG is a collection of 10,000 unique avatars that can be used as a membership card to access the CyberTHUG club (community).  \n**Website:** [Cyber THUG](https://thecyberthug.com/)  \n**Category:** NFT  \n\n---\n\n# D'Cent  \n**Description:** With D'CENT Wallet, you can manage various cryptocurrencies such as Bitcoin, Ethereum, XRP, Klaytn, and more.  \n**Socials:**  \n- [Twitter](https://twitter.com/DCENTwallets)  \n- [Instagram](https://www.instagram.com/dcent_wallet/)  \n**Website:** [D'Cent Wallet](https://dcentwallet.com/)  \n**Category:** Wallets  \n\n---\n\n# DCoin  \n**Description:** Dcoin, the world's first financial-level digital assets trading platform, is headquartered in Singapore with operation centers globally.  \n**Socials:**  \n- [Twitter](https://twitter.com/dcoinexchange)  \n- [Telegram](https://t.me/dcoinofficial)  \n**Website:** [Dcoin](https://www.dcoin.com/)  \n**Category:** CEXes & Payments  \n\n---\n\n# DECENT Law Firm  \n**Website:** [DECENT Law Firm](https://decentlaw.io/)  \n**Category:** Others  \n\n---\n\n# DELIGHT  \n**Description:** DELIGHT has been successfully delivering world-class technology to the decentralized ecosystem and aims to connect daily life with the Web3 world.  \n**Socials:**  \n- [Twitter](https://x.com/delightlabs_io)  \n**Website:** [DELIGHT](https://delightlabs.io/)  \n**Category:** GC, Tools & Infrastructure  \n\n---\n\n# DORA  \n**Description:** Dora Factory is a leading provider of blockchain infrastructure across multiple chains, supporting DeFi, governance infrastructures, and open-source communities.  \n**Website:** [Dora Factory](https://dorafactory.org/)  \n**Category:** GC  \n\n---\n\n# DOSI  \n**Description:** DOSI is a new Digital Commerce (D-Commerce) where anyone can easily trade various digital products.  \n**Socials:**  \n- [Twitter](https://twitter.com/DOSI_official)  \n- [Medium](https://medium.com/@DOSI_official)  \n- [Discord](https://discord.com/invite/SCkEdqTJG7)  \n**Website:** [DOSI](https://www.dosi.world/)  \n**Category:** Marketplaces  \n\n---\n\n# DWF Labs  \n**Description:** DWF Labs is a new-generation Web3 investor, market maker, and one of the world's largest entities conducting high-frequency trading across over 60 exchanges.  \n**Socials:**  \n- [Twitter](https://twitter.com/DWFLabs)  \n- [Telegram](https://t.me/dwflabs)  \n- [LinkedIn](https://www.linkedin.com/company/dwf-labs/)  \n**Website:** [DWF Labs](https://www.dwf-labs.com/)  \n**Category:** GC  \n\n---\n\n# DappRadar  \n**Description:** Explore NFTs, NFT Marketplaces, Blockchain Games, DeFi, and Dapps on the world's leading Dapp store.  \n**Socials:**  \n- [Twitter](https://twitter.com/dappradar)  \n- [Telegram](https://t.me/joinchat/GdhNjQ8PMhCZ_a0CZutmXg)  \n- [Discord](https://discord.com/invite/4ybbssrHkm)  \n**Website:** [DappRadar](https://dappradar.com/)  \n**Category:** Tools & Infrastructure  \n\n---\n\n# De.Fi  \n**Description:** Web3 Super App & Antivirus - Your DeFi Portfolio Tracker.  \n**Socials:**  \n- [Twitter](https://twitter.com/DeDotFi)  \n- [Telegram](https://t.me/DeDotFi)  \n- [YouTube](https://www.youtube.com/channel/UCMCGy1ExKesm8YlcKGAFRGA)  \n**Website:** [De.Fi](https://de.fi/blog/)  \n**Category:** DEXes & DeFi  \n\n---\n\n# DeFi Kingdoms  \n**Description:** DeFi Kingdoms is a cross-chain, play-to-earn game built on a strong DeFi protocol with MMORPG plans in later phases.  \n**Socials:**  \n- [Twitter](https://twitter.com/DefiKingdoms)  \n- [Telegram](https://t.me/defikingdoms)  \n- [Discord](https://discord.com/invite/defikingdoms)  \n**Website:** [DeFi Kingdoms](https://game.defikingdoms.com/)  \n**Category:** Gaming  \n\n---\n\n# DeFi Wallet  \n**Description:** DeFi Wallet is the best crypto wallet to store, earn, and grow your crypto assets like Bitcoin - a non-custodial DeFi wallet.  \n**Socials:**  \n- [Twitter](https://twitter.com/cryptocom)  \n- [Discord](https://discord.com/invite/cryptocom)  \n**Website:** [DeFi Wallet](https://crypto.com/defi-wallet)  \n**Category:** Wallets  \n\n---\n\n# Deepcoin  \n**Description:** Deepcoin specializes in digital currencies, offering globalized and comprehensive financial services with digital assets at the core.  \n**Socials:**  \n- [Twitter](https://twitter.com/deepcoin_news?s=21)  \n- [Telegram](https://t.me/deepcoin_english)  \n- [LinkedIn](https://www.linkedin.com/company/deepcoinpro/)  \n**Website:** [Deepcoin](https://www.deepcoin.com/)  \n**Category:** CEXes & Payments  \n\n---\n\n# Defininx  \n**Description:** Definix is a DeFi platform launched in 2021, offering a decentralized multi-chain fund management protocol.  \n**Socials:**  \n- [Twitter](https://twitter.com/DefinixOfficial)  \n- [Telegram](https://t.me/SIXNetwork)  \n**Website:** [Defininx](https://g2.klaytn.definix.com/)  \n**Category:** DEXes & DeFi  \n\n---\n\n# DexGO  \n**Description:** DexGO is a Move-To-Earn and Learn-To-Earn social NFT game with Social-Fi elements, where users earn money by completing routes and competing in AR mini-games.  \n**Socials:**  \n- [Twitter](https://x.com/dexgo_official)  \n- [Telegram](https://t.me/dexgo_ua)  \n**Website:** [DexGO](https://www.dexgo.club/en)  \n**Category:** Gaming  \n\n---\n\n# Dexata  \n**Description:** Multi-blockchain-based DEX data and visualization services.  \n**Socials:**  \n- [Twitter](https://twitter.com/dexatakr)  \n- [Telegram](https://t.me/dexata)  \n**Website:** [Dexata](https://dexata.kr/)  \n**Category:** Tools & Infrastructure  \n\n---\n\n## DigiFinex\n**Description:** DigiFinex is a global digital asset management platform headquartered in Singapore. Our presence across Asia makes us the preferred trading platform of more than 4 million users across the globe. Our services include IEOs, project listings, OTC, and margin trading.  \n**Socials:** [Twitter](https://twitter.com/digifinex), [Telegram](https://t.me/DigiFinexEN)  \n**External Link:** [DigiFinex](https://www.digifinex.com/en-ww)  \n**Categories:** CEXes, Payments  \n\n---\n\n## DigiOracle\n**Description:** DigiOracle is a highly modular blockchain oracle that allows you to securely connect your Web3 applications with events, data, and assets from the real world.  \n**External Link:** [DigiOracle](https://www.klayoracle.com/)  \n**Categories:** Oracles, Bridges  \n\n---\n\n## Doge Sound Club\n**Description:** A club of people who can freely \"bark\" and use portal devices to time travel.  \n**Socials:** [Twitter](https://twitter.com/dogesoundclub?lang=en)  \n**External Link:** [Doge Sound Club](https://dogesound.club/)  \n**Categories:** NFT  \n\n---\n\n## DragonSwap\n**Description:** Trade, earn, and own crypto on the all-in-one DEX on Kaia Network.  \n**Socials:** [Twitter](https://twitter.com/dgswap), [Medium](https://dgswap.medium.com/), [Github](https://github.com/dragon-swap-klaytn)  \n**External Link:** [DragonSwap](https://dgswap.io/)  \n**Categories:** DEXes, DeFi  \n\n---\n\n## Drawshop Kingdom Reverse\n**Description:** Drawshop Kingdom Reverse is a P2E NFT-based game operated by DAO scheme and running on Klaytn Network; Users can strategically build their own drawshop using various NFTs and compete against other players for rewards via PvP features.  \n**Socials:** [Twitter](https://twitter.com/DrawshopKingdom)  \n**External Link:** [Drawshop Kingdom Reverse](https://drawshop.io/)  \n**Categories:** Gaming  \n\n---\n\n## EBC - Hanwha Systems\n**Description:** As a subsidiary of Hanwha Systems, Enterprise Blockchain Corp. (EBC) has been building and operating a blockchain-based network called NFT CV (Curriculum Vitae), allowing talent, expertise, and history to become tradable assets.  \n**Socials:** [YouTube](https://www.youtube.com/hanwhasystems), [LinkedIn](https://www.linkedin.com/company/hanwhasystems/)  \n**External Link:** [Hanwha Systems](https://www.hanwhasystems.com/kr/index.do)  \n**Categories:** GC  \n\n---\n\n## East NFT\n**Description:** EAST is a premium Licensed Digital Collectibles (LDC) trading platform, curating special NFTs from leading brands and creators.  \n**Socials:** [LinkedIn](https://www.linkedin.com/company/eastnftofficial/about/)  \n**External Link:** [East NFT](https://www.eastnft.com/lander)  \n**Categories:** Others  \n\n---\n\n## Elysia\n**Description:** Elysia is a platform that provides tools & infrastructure for RWA in crypto financial products.  \n**Socials:** [Twitter](https://twitter.com/Elysia_HQ), [Telegram](https://t.me/elysia_official), [Medium](https://medium.com/@ELYSIA_HQ), [Discord](https://discord.com/invite/d8zveNum7g), [Github](https://github.com/elysia-dev)  \n**External Link:** [Elysia](https://www.elysia.land/)  \n**Categories:** RWA  \n\n---\n\n## F10\n**Description:** F10 is a global innovation ecosystem connecting tech startups with businesses in banking, insurance, and Web3.  \n**Socials:** [Twitter](https://twitter.com/tenity_global), [Facebook](https://www.facebook.com/tenity.globa), [LinkedIn](https://www.linkedin.com/company/tenity/), [Instagram](https://www.instagram.com/tenity_global/)  \n**External Link:** [F10](https://www.f10.global/)  \n**Categories:** Others  \n\n---\n\n## FAVORLET\n**Description:** As an NFT-FIRST wallet, FAVORLET bridges Web2 and Web3 by maximizing NFT utility, offering easy NFT minting and airdropping tools.  \n**Socials:** [Twitter](https://twitter.com/favorlet)  \n**External Link:** [FAVORLET](https://favorlet.io/)  \n**Categories:** Wallets  \n\n---\n\n## FMFW.io\n**Description:** The Cryptocurrency Exchange on a mission to Free the Money, Free the World. Trade BTC, ETH, and more than 500 trading pairs.  \n**Socials:** [Twitter](https://twitter.com/FMFW_io), [Telegram](https://t.me/fmfw_io)  \n**External Link:** [FMFW.io](https://fmfw.io/)  \n**Categories:** CEXes, Payments  \n\n---\n\n## FSN\n**Description:** FSN is Korea’s No. 1 comprehensive digital marketing group, covering marketing, tech, commerce, and global expansion.  \n**Socials:** [Facebook](https://www.facebook.com/fsnnow), [Instagram](https://www.instagram.com/fsnnow_official/)  \n**External Link:** [FSN](https://fsn.co.kr/)  \n**Categories:** GC  \n\n---\n\n## Fairfun\n**Description:** Fairfun is a PVE-focused meme launchpad supporting the Memecoin Supercycle by fostering the creation of Cult memes and evolving meme movements.  \n**Socials:** [Twitter](https://x.com/fairfunmeme)  \n**External Link:** [Fairfun](https://fairfun.meme)  \n**Categories:** Tools, Infrastructure  \n\n---\n\n## Fanto\n**Description:** Fanto is blockchain infrastructure for creators, enabling them to launch their own token and engage their communities creatively.  \n**Socials:** [Twitter](https://twitter.com/fanto_official)  \n**External Link:** [Fanto](https://www.fanto.io/)  \n**Categories:** DApps  \n\n---\n\n## Fantrie\n**Description:** Fantrie is a platform that connects creators and fans, fostering an ecosystem of content production and consumption.  \n**Socials:** [Instagram](https://www.instagram.com/fantrie_official/)  \n**External Link:** [Fantrie](https://fantrie.com/)  \n**Categories:** Others  \n\n---\n\n## FiveStars\n**Description:** Five Stars is a card-collecting, turn-based strategy RPG game based on Western fantasy. It allows blockchain assetization of in-game items.  \n**Socials:** [Twitter](https://twitter.com/FiveStars)  \n**External Link:** [FiveStars](https://fivestars.skypeople.co.kr/)  \n**Categories:** Gaming  \n\n---\n\n## Flipside\n**Description:** Query and build with the most reliable blockchain data  \n**Socials:**  \n- [Twitter](https://twitter.com/flipsidecrypto)  \n- [Discord](https://discord.com/invite/ZmU3jQuu6W)  \n- [LinkedIn](https://www.linkedin.com/company/flipside-crypto/)  \n**External Link:** [Flipside](https://flipsidecrypto.xyz/)  \n**Categories:** Dexes, DeFi  \n\n---\n\n## Flipster\n**Description:** Flipster is a next-level trading platform that connects investors to insights and new opportunities in the cryptoverse.  \n**Socials:**  \n- [Twitter](https://twitter.com/flipster_io)  \n- [Telegram](https://t.me/flipster_io)  \n- [Facebook](https://www.facebook.com/Flipster.Official/)  \n- [YouTube](https://www.youtube.com/channel/UC_3J-wzFgDu2P8NF_CrjAYg/featured)  \n- [Instagram](https://www.instagram.com/flipster.official/)  \n**External Link:** [Flipster](https://flipster.io/)  \n**Categories:** CEXes, Payments  \n\n---\n\n## Formo\n**Description:** Formo is a web3 analytics platform that provides product and marketing teams with superpowers.  \n**Socials:**  \n- [Twitter](https://x.com/getFormo)  \n- [Telegram](https://t.me/GetFormo)  \n**External Link:** [Formo](https://formo.so)  \n**Categories:** Tools, Infrastructure  \n\n---\n\n## FoxWallet\n**Description:** FoxWallet is a safe and easy-to-use decentralized multi-chain wallet, dedicated to Web3 accessibility.  \n**Socials:**  \n- [Twitter](https://twitter.com/FoxWallet)  \n- [Telegram](https://t.me/FoxWallet_EN)  \n- [Medium](https://medium.com/@FoxWallet)  \n- [Discord](https://discord.com/invite/JVjVbe3Zth)  \n- [GitHub](http://github.com/foxwallet)  \n**External Link:** [FoxWallet](https://foxwallet.com/en)  \n**Categories:** Wallets  \n\n---\n\n## GDAC\n**Description:** Future Finance Innovation Platform GDAC  \n**Socials:**  \n- [Telegram](https://t.me/s/gdacnews?before=30)  \n- [Facebook](https://www.facebook.com/gdac.official)  \n**External Link:** [GDAC](https://www.gdac.com/)  \n**Categories:** CEXes, Payments  \n\n---\n\n## GPC\n**Description:** GPC (Gold-Pegged Coin) is a 100% physical gold-based RWA issued on Kaia network.  \n**Socials:**  \n- [Twitter](https://twitter.com/goldstation_io)  \n- [Telegram](https://t.me/+wRq1MU3wWvdlOGM1)  \n**External Links:**  \n- [The Mining Club](https://theminingclub.io/)  \n- [Goldstation](https://goldstation.io/)  \n**Categories:** RWA  \n\n---\n\n## Galxe\n**Description:** Enabling seamless Web3 experiences through AI, digital identity, and blockchain solutions.  \n**External Link:** [Galxe](https://www.galxe.com/)  \n**Categories:** DApps  \n\n---\n\n## GameFi\n**Description:** GameFi.org is a platform dedicated to blockchain-based games and decentralized finance (DeFi) in the gaming industry.  \n**Socials:**  \n- [Twitter](https://x.com/GameFi_Official)  \n- [Telegram](https://t.me/GameFi_Official)  \n**External Link:** [GameFi](https://gamefi.org/)  \n**Categories:** Gaming  \n\n---\n\n## Gas.zip\n**Description:** Gas.zip is the fastest one-stop gas refuel bridge for over 142+ chains.  \n**Socials:**  \n- [Twitter](https://twitter.com/gasdotzip)  \n- [Discord](https://discord.gg/ZCKDmsZ7)  \n**External Link:** [Gas.zip](https://www.gas.zip/)  \n**Categories:** Oracles, Bridges  \n\n---\n\n## Gate.io\n**Description:** Leading cryptocurrency exchange with over 1400+ cryptocurrencies.  \n**Socials:**  \n- [Twitter](https://twitter.com/gate_io)  \n- [Telegram](https://t.me/gateio_en)  \n- [Discord](https://discord.com/invite/QZWFkuQvzP)  \n**External Link:** [Gate.io](https://www.gate.io/)  \n**Categories:** CEXes, Payments  \n\n---\n\n## GetBlock\n**Description:** GetBlock provides fast, reliable API access to full RPC nodes for over 50 major blockchain networks.  \n**Socials:**  \n- [Twitter](https://x.com/getblockio)  \n- [Telegram](https://t.me/getblockio_eng)  \n- [Discord](https://discord.com/invite/T2hbgqfEnv)  \n**External Link:** [GetBlock](https://getblock.io/)  \n**Categories:** Tools, Infrastructure  \n\n---\n\n## GiantN\n**Description:** GiantN is a blockchain Exploration Battle RPG with base invasion and resource plundering mechanics.  \n**Socials:**  \n- [Twitter](https://twitter.com/play2earncrypto)  \n- [Discord](https://discord.com/invite/RYvHDXR)  \n**External Link:** [GiantN](https://www.gemhub.net/games/giantn_en.html)  \n**Categories:** Gaming  \n\n---\n\n## GoPax\n**Description:** GOPAX is a fast, reliable virtual asset exchange.  \n**Socials:**  \n- [Twitter](https://twitter.com/GOPAX_kr)  \n- [Telegram](https://t.me/gopaxkr_official)  \n**External Link:** [GoPax](https://www.gopax.co.kr/)  \n**Categories:** CEXes, Payments  \n\n---\n\n## Goldstation\n**Description:** GPC (Gold-Pegged Coin) is a 100% physical gold-based RWA issued on Kaia network.  \n**Socials:**  \n- [Twitter](https://twitter.com/goldstation_io)  \n- [Telegram](https://t.me/+wRq1MU3wWvdlOGM1)  \n**External Links:**  \n- [The Mining Club](https://theminingclub.io/)  \n- [Goldstation](https://goldstation.io/)  \n**Categories:** RWA  \n\n---\n\n## GoodGang Labs\n**Description:** GoodGang Labs bridges humans and AI with an AI Avatar Agent solution for Web2 and Web3.  \n**Socials:**  \n- [Twitter](https://x.com/GGLabs_Official)  \n- [Discord](https://discord.com/invite/45QueS5DDS)  \n- [LinkedIn](https://www.linkedin.com/company/goodgang-labs/)  \n**External Link:** [GoodGang Labs](https://goodganglabs.com/)  \n**Categories:** GC, Others  \n\n---\n\n## GroundX\n**Description:** GroundX, a Kakao blockchain affiliate, develops public blockchain platforms and digital wallets.  \n**Socials:**  \n- [YouTube](https://www.youtube.com/channel/UCgsHn11n9wuEI9nTa-Kj8sA)  \n- [LinkedIn](https://www.linkedin.com/company/ground-x/)  \n**External Link:** [GroundX](https://www.groundx.xyz/)  \n**Categories:** GC  \n\n---\n\n## Grove\n**External Link:** [Grove](https://www.grove.city/)  \n**Categories:** Tools, Infrastructure  \n\n---\n\n## HABL\n**Description:** HABL is a blockchain-based social media platform that aims to decentralize and fairly distribute profit generated from creative user content.  \n**Socials:** [Twitter/X](https://twitter.com/hiblocks?lang=en)  \n**External Link:** [Website](https://www.hiblocks.io/)  \n**Category:** dapps  \n\n---\n\n## HYPE.DAY\n**Description:** Hype.day is powered by Fractal Capital, developed in Santa Monica, California. Create your own AI-generated NFT collection in minutes.  \n**Socials:** [Twitter/X](https://twitter.com/hypedotday), [Discord](https://discord.com/invite/BuEJE2Fec5)  \n**External Link:** [Website](https://hype.day/)  \n**Category:** others  \n\n---\n\n## Haechi Labs\n**Description:** HAECHI LABS is located in Seoul, South Korea. It provides blockchain auditing services and digital wallets for most blockchain companies.  \n**Socials:** [Facebook](https://www.facebook.com/haechilabs)  \n**External Link:** [Website](https://haechi.io/)  \n**Category:** others  \n\n---\n\n## Hashed\n**Description:** Hashed is a global venture fund focused on backing founders pioneering the future of blockchain and cryptocurrency. Based in Seoul, San Francisco, Singapore, and Bangalore.  \n**Socials:** [Twitter/X](https://twitter.com/hashed_official), [LinkedIn](https://www.linkedin.com/company/hashedfund/)  \n**External Link:** [Website](https://www.hashed.com/)  \n**Category:** others  \n\n---\n\n## Hashkey\n**Description:** HashQuark, established by Hashkey Group, is a Web3 infrastructure service provider, covering staking to DID solutions across global markets.  \n**Socials:** [Twitter/X](https://twitter.com/HashQuark), [LinkedIn](https://www.linkedin.com/company/hashkey-digital-asset-group/)  \n**External Link:** [Website](https://www.hashkey.com/en/)  \n**Category:** gc  \n\n---\n\n## Henesis\n**Description:** Henesis is a multi-sig wallet solution enabling customers to safely manage their assets through API integrations.  \n**External Link:** [Website](https://henesis.io/ko)  \n**Category:** tools-infrastructure  \n\n---\n\n## Hex Trust\n**Description:** Hex Trust is a fully-licensed digital asset custodian, serving protocols, foundations, financial institutions, and Web3 ecosystem players.  \n**Socials:** [Twitter/X](https://twitter.com/Hex_Trust), [Telegram](https://t.me/hextrustannouncements), [LinkedIn](https://www.linkedin.com/company/hextrust/)  \n**External Link:** [Website](https://hextrust.com/)  \n**Category:** tools-infrastructure  \n\n---\n\n## Hexlant\n**Description:** Hexlant develops blockchain technology and provides solutions for blockchain implementation, smart contract audits, and custody services.  \n**Socials:** [Twitter/X](https://twitter.com/hexlant?lang=en)  \n**External Link:** [Website](https://hexlant.com/)  \n**Category:** others  \n\n---\n\n## HitBTC\n**Description:** HitBTC is a crypto exchange with over 800 trading pairs, offering exchange, custodial, and API-based trading services.  \n**Socials:** [Twitter/X](https://twitter.com/hitbtc), [Telegram](https://t.me/HitBTC_channel)  \n**External Link:** [Website](https://hitbtc.com/)  \n**Category:** cexes-payments  \n\n---\n\n## Hollaex\n**Description:** HollaEx is an open-source exchange network platform that allows users to create digital marketplaces with their own assets.  \n**Socials:** [Twitter/X](https://twitter.com/hollaex), [Telegram](https://t.me/hollaex), [Discord](https://discord.com/invite/ZN45kTdFd3), [Instagram](https://www.instagram.com/hollaex_official/)  \n**External Link:** [Website](https://www.hollaex.com/)  \n\n---\n\n## Honor of Kingdoms\n**Description:** An MMO strategy game where players can own, develop, and engage in alliance warfares while earning rewards.  \n**Socials:** [Twitter/X](https://twitter.com/HonorofKings)  \n**External Link:** [Website](http://honorofkingdoms.com/)  \n**Category:** gaming  \n\n---\n\n## Hotcoin Global\n**Description:** A blockchain digital asset trading platform supporting BTC, ETH, USDT, and other cryptocurrencies.  \n**Socials:** [Twitter/X](https://twitter.com/HotcoinGlobal), [Telegram](https://t.me/HotcoinEX)  \n**External Link:** [Website](https://hotcoin.com/)  \n**Category:** cexes-payments  \n\n---\n\n## Huobi\n**Description:** A world-leading cryptocurrency trading exchange with over 1,000 cryptos.  \n**Socials:** [Twitter/X](https://twitter.com/HuobiGlobal), [Telegram](https://t.me/huobiglobalofficial), [Discord](https://discord.com/invite/huobi)  \n**External Link:** [Website](https://www.huobi.com/en-us/)  \n**Category:** cexes-payments  \n\n---\n\n## Huobi Wallet\n**Description:** A professional wallet supporting BTC, ETH, USDT, LTC, and ERC-20 tokens, launched in 2018.  \n**Socials:** [Twitter/X](https://twitter.com/HuobiGlobal), [Telegram](https://t.me/huobiglobalofficial), [Discord](https://discord.com/invite/huobi)  \n**External Link:** [Website](https://www.itoken.com/en)  \n**Category:** wallets  \n\n---\n\n## Hypesalt\n**Description:** HYPESALT is a project that enables NFT liquidity and additional revenue opportunities through DeFi.  \n**Socials:** [Twitter/X](https://twitter.com/hypesalt), [Telegram](https://t.me/hypesalt_playground), [Discord](https://discord.com/invite/fvhDE5X2rJ)  \n**External Link:** [Website](https://hypesalt.com/)  \n**Category:** nft  \n\n---\n\n## Ice Tea Labs\n**Description:** Icetea Labs is a leading Web3 Venture Builder in Southeast Asia.  \n**External Link:** [Website](https://icetea.io/)  \n**Category:** others  \n\n---\n\n## Indodax\n**Description:** The largest Indonesian digital crypto exchange, formerly known as Bitcoin Indonesia.  \n**Socials:** [Twitter/X](https://twitter.com/indodax/), [Telegram](https://t.me/+wzK7k15nbRtiNjg1), [Discord](https://discord.com/invite/enpVHPS323), [LinkedIn](https://www.linkedin.com/company/indodax/), [Instagram](https://www.instagram.com/indodax/)  \n**External Link:** [Website](https://indodax.com/)  \n**Category:** cexes-payments  \n\n---\n\n## Iskra\n**Description:** A blockchain gaming hub connecting gamers and game studios.  \n**Socials:** [Twitter/X](https://twitter.com/iskra_world)  \n**External Link:** [Website](https://iskra.world)  \n**Category:** gaming  \n\n---\n\n## K-BIT\n**Description:** The first PerpDEX on Kaia Chain, offering a simple and safe trading environment.  \n**Socials:** [Twitter/X](https://x.com/kbit_xyz), [Telegram](https://t.me/kbit_official), [Medium](https://medium.com/@k-bit)  \n**External Link:** [Website](https://app.k-bit.xyz)  \n**Category:** dexes-defi  \n\n---\n\n## KLAY Kingdoms\n**Description:** A GameFi/MetaFi project featuring strategic RPG gameplay, NFTs, and decentralized exchanges.  \n**Socials:** [Twitter/X](https://twitter.com/KlayKingdoms)  \n**External Link:** [Website](https://klaykingdoms.com/)  \n**Category:** gaming  \n\n---\n\n## KLEX Finance\n**Description:** A Balancer v2 Protocol implementation on Klaytn for automated portfolio management and decentralized exchange.  \n**Socials:** [Twitter/X](https://twitter.com/klexfinance)  \n**External Link:** [Website](https://www.klex.finance/)  \n**Category:** dexes-defi  \n\n---\n\n**# Klaytn Ecosystem Projects**\n\n## KNS\n**Description:** Klaytn Name Service (KNS) is a name service that operates in a decentralized manner on the Klaytn blockchain, inspired by the Ethereum Name Service.  \n**Socials:** [Twitter/X](https://twitter.com/klaytn_domains), [Discord](https://discord.com/invite/AANEeUsemK)  \n**External Link:** [Website](https://klaytn.domains/)  \n**Category:** dapps  \n\n---\n\n## KODA\n**Description:** KODA provides a one-stop digital asset consignment service for corporate and institutional investors such as Bitcoin consignment.  \n**External Link:** [Website](https://kodax.com/#intro)  \n**Category:** tools-infrastructure  \n\n---\n\n## Kai Protocol\n**Description:** Kai Protocol is the first stablecoin in the Klaytn chain designed by the Kai Protocol team. The protocol provides various DeFi solutions to maintain price stability for Kai (KAI).  \n**Socials:** [Twitter/X](https://twitter.com/Kai_Protocol)  \n**External Link:** [Website](https://kaiprotocol.fi/)  \n**Category:** dexes-defi  \n\n---\n\n## Kaia Contracts Wizard\n**Description:** Kaia Contracts Wizard is the fastest and easiest way to write smart contracts using Kaia Contracts.  \n**External Link:** [Website](https://wizard.kaia.io/)  \n**Category:** others  \n\n---\n\n## Kaia Faucet\n**Description:** The KAIA Faucet runs on Kairos Testnet.  \n**Socials:** [Twitter/X](https://twitter.com/kaiachain)  \n**External Link:** [Website](https://faucet.kaia.io)  \n**Category:** faucets  \n\n---\n\n## Kaia Wallet\n**Description:** KaiaWallet is a global digital wallet functioning as a web browser extension and mobile app, allowing users to manage Kaia-based tokens securely.  \n**External Link:** [Website](https://www.kaiawallet.io/)  \n**Category:** wallets  \n\n---\n\n## Kaiascan\n**Description:** Kaiascan is a block explorer for the Kaia network that provides insights into blocks, contracts, tokens, and NFTs.  \n**Socials:** [Twitter/X](https://twitter.com/kaiachain), [Instagram](https://www.instagram.com/kaiachain/)  \n**External Link:** [Website](http://kaiascan.io/)  \n**Category:** tools-infrastructure; explorers  \n\n---\n\n## Kaiascope\n**Description:** Kaiascope monitors network health, statistics, blocks, and transactions on the Kaia blockchain.  \n**Socials:** [Twitter/X](https://twitter.com/blockdata_tech?lang=en)  \n**External Link:** [Website](https://kaiascope.com)  \n**Category:** tools-infrastructure; explorers  \n\n---\n\n## Kakao Corp\n**Description:** No.1 messenger platform company in South Korea. Parent company of Klaytn, GroundX, and other blockchain-related businesses.  \n**Socials:** [Twitter/X](https://twitter.com/kakaocorpglobal?lang=en)  \n**External Link:** [Website](https://www.kakaocorp.com/page/)  \n**Category:** gc  \n\n---\n\n## Kakao Entertainment\n**Description:** Global entertainment company delivering original content created by top creators and artists.  \n**Socials:** [Twitter/X](https://twitter.com/tfYzCoVoLHaR4Ky), [Instagram](https://www.instagram.com/kakao.entertainment/)  \n**External Link:** [Website](https://www.kakaoent.com/)  \n**Category:** gc  \n\n---\n\n## Kakao Pay\n**Description:** Kakao Pay is a TechFin subsidiary building a lifestyle financial platform enabling mobile payments, money transfers, and financial services.  \n**Socials:** [Twitter/X](https://twitter.com/kakaocorpglobal?lang=en)  \n**External Link:** [Website](https://www.kakaopay.com/)  \n**Category:** gc  \n\n---\n\n## Key Finance\n**Description:** Key Finance maximizes user profits by utilizing governance tokens of DeFi protocols with ve Tokenomics.  \n**Socials:** [Twitter/X](https://twitter.com/KeyFinanceApp)  \n**External Link:** [Website](https://key.fi/)  \n**Category:** dexes-defi  \n\n---\n\n## King of Fighters\n**Description:** The King of Fighters ARENA is a real-time PvP game based on the King of Fighters series by SNK.  \n**Socials:** [Twitter/X](https://twitter.com/arenakof?lang=en)  \n**External Link:** [Website](https://kofarena.netmarble.com/en)  \n**Category:** gaming  \n\n---\n\n## King of Planets\n**Description:** King of Planets is a blockchain-based Play-to-Earn (P2E) game incorporating NFT, DeFi 2.0, and GameFi elements.  \n**Socials:** [Twitter/X](https://twitter.com/King_of_Planets), [Telegram](https://t.me/kop_announcement)  \n**External Link:** [Website](https://kop.handy.game)  \n**Category:** gaming  \n\n---\n\n## Klay Dice\n**Description:** KLAYDICE is a P2E version of ‘DICAST: Rules of Chaos’ available on Klaytn Network, Google Play, and iOS.  \n**Socials:** [Twitter/X](https://twitter.com/klaydice)  \n**External Link:** [Website](https://klaydice.io/)  \n**Category:** gaming  \n\n---\n\n## KlayCellar\n**Description:** KlayCellar is an asset management protocol allowing users to mint, trade, redeem, and provide liquidity on non-custodial oracle-less tokenized portfolios.  \n**Socials:** [Twitter/X](https://twitter.com/KlayCellar)  \n**External Link:** [Website](https://klaycellar.com/#)  \n**Category:** dexes-defi  \n\n---\n\n## Klayswap\n**Description:** KLAYswap is an AMM-based Instant Swap Protocol enabling decentralized finance (DeFi) services on Klaytn.  \n**Socials:** [Twitter/X](https://twitter.com/KLAYswap)  \n**External Link:** [Website](https://klayswap.com/en)  \n**Category:** dexes-defi  \n\n---\n\n## Klip Drops\n**Description:** Klip Drops is a limited-edition digital NFT marketplace.  \n**Socials:** [Twitter/X](https://twitter.com/KlipDrops)  \n**External Link:** [Website](https://klipdrops.com/)  \n**Category:** nft; marketplaces  \n\n---\n\n## Kokoa Finance\n**Description:** Kokoa Finance is a crypto-asset-backed stablecoin platform allowing users to borrow KSD stablecoin against crypto assets.  \n**Socials:** [Telegram](https://t.me/KokoaFinanceGlobal)  \n**External Link:** [Website](https://kokoa.finance/)  \n**Category:** dexes-defi  \n\n---\n\n## Kommune DAO\n**Description:** Kommune DAO strengthens Klaytn’s ecosystem governance through community-owned node validation and active participation.  \n**External Link:** [Website](https://kommunedao.xyz/)  \n**Category:** gc  \n\n---\n\n## KuCoin\n**Description:** KuCoin is a secure cryptocurrency exchange supporting 700+ altcoins.  \n**Socials:** [Twitter/X](https://twitter.com/KuCoinCom), [Telegram](https://t.me/Kucoin_Exchange)  \n**External Link:** [Website](https://www.kucoin.com/)  \n**Category:** cexes-payments  \n\n---\n\n# LBank  \n**Description:** LBank (Ledger Bank) began to develop in December 2015 and is the world's leading digital asset exchange, providing global users with safe, professional, and convenient digital asset exchange services. It has over 4.5 million registered users and an average daily trading volume of $1.5 billion.  \n**Socials:** [Twitter](https://twitter.com/LBank_Exchange), [Telegram](https://t.me/LBank_en), [LinkedIn](https://www.linkedin.com/company/lbank/)  \n**External Link:** [LBank](https://www.lbank.info/)  \n**Categories:** CEXes, Payments  \n\n---\n\n# LINE NEXT Corp.  \n**Description:** LINE NEXT Corp. is the Web3 business entity of LY Corporation, with bases in Korea, Japan, and the United States, offering various Web3 products.  \n**External Link:** [LINE NEXT Corp.](https://linecorp.com/en/)  \n**Categories:** GC, Others  \n\n---\n\n# LINE NEXT Inc.  \n**Description:** Based in the United States, LINE NEXT Inc. is focused on growing the global Web3 business by building a Web3 ecosystem.  \n**Socials:** [Twitter](https://x.com/DOSI_Official), [Medium](https://medium.com/@DOSI_Official), [Discord](https://discord.com/invite/dosi)  \n**External Link:** [LINE NEXT Inc.](https://www.dosi.world/)  \n**Categories:** GC  \n\n---\n\n# LINE Xenesis  \n**Description:** LINE Xenesis offers the cryptocurrency trading service LINE BITMAX, available through the LINE app, used by over 97 million people in Japan.  \n**External Link:** [LINE Xenesis](https://square.kaia.io/GC/Detail?id=90)  \n**Categories:** GC, Tools & Infrastructure  \n\n---\n\n# Land Chronicle  \n**Description:** A Klaytn-based Web 3.0 LAND-Fi project that allows users to own and utilize NFT land for ecosystem profits.  \n**Socials:** [Twitter](https://twitter.com/LandChronicle), [Discord](https://discord.com/invite/2BDGbyKbZW)  \n**External Link:** [Land Chronicle](https://landchronicle.com)  \n**Categories:** Gaming  \n\n---\n\n# LayerZero  \n**Description:** LayerZero enables applications to move data across blockchains with censorship-resistant messages and permissionless development.  \n**Socials:** [Twitter](https://twitter.com/LayerZero_Labs), [Telegram](https://t.me/joinchat/VcqxYkStIDsyN2Rh), [Medium](https://medium.com/layerzero-official), [Discord](https://discord.com/invite/ktbvm8Nkcr), [GitHub](https://github.com/LayerZero-Labs/LayerZero)  \n**External Link:** [LayerZero](https://layerzero.network/)  \n**Categories:** DEXes & DeFi, Bridges  \n\n---\n\n# LetsExchange.io  \n**Description:** LetsExchange is a crypto exchange platform supporting over 5,000 cryptocurrencies with swap, DEX, cross-chain, and bridge features.  \n**Socials:** [Twitter](http://x.com/letsexchange_io)  \n**External Link:** [LetsExchange.io](https://letsexchange.io)  \n**Categories:** CEXes, Payments  \n\n---\n\n# Like Lion  \n**Description:** Like Lion provides programming education for students and professionals through offline and online training platforms.  \n**Socials:** [Instagram](https://www.instagram.com/likelion.official/)  \n**External Link:** [Like Lion](https://www.likelion.net/)  \n**Categories:** Others  \n\n---\n\n# Little Orbit  \n**Description:** A Delaware-based gaming company operating GamersFirst.com with 22M registered players.  \n**Socials:** [Twitter](https://twitter.com/littleorbit)  \n**External Link:** [Little Orbit](https://www.littleorbit.com/)  \n**Categories:** NFT  \n\n---\n\n# Lorem Board  \n**Description:** An investment oracle providing insights and analytics for better decision-making.  \n**Socials:** [Twitter](https://twitter.com/loremboard), [Telegram](https://t.me/loremboard_community)  \n**External Link:** [Lorem Board](https://loremboard.finance/)  \n**Categories:** Tools & Infrastructure  \n\n---\n\n# Ludwig Holdings  \n**Description:** Investor in LINE NEXT Corp., operator of DOSI, Asia’s #1 digital goods trading platform.  \n**External Link:** [Ludwig Holdings](https://square.kaia.io/GC/Detail?id=93)  \n**Categories:** GC  \n\n---\n\n# MBlock  \n**External Link:** [MBlock](https://m-block.io/)  \n**Categories:** Others  \n\n---\n\n# ME3 - Gacha Galaxy  \n**Description:** Gacha Galaxy is a gamified quest platform that helps brands engage users through digital rewards.  \n**Socials:** [Twitter](https://x.com/Me3Labs), [Telegram](https://t.me/Me3Official), [GitHub](https://github.com/Me3-io), [YouTube](https://www.youtube.com/@Me3Labs)  \n**External Link:** [ME3](https://me3.io)  \n**Categories:** Gaming  \n\n---\n\n# MEXC  \n**Description:** A centralized exchange founded in 2018 with high-performance transaction matching.  \n**Socials:** [Discord](https://discord.com/invite/EgagWrwjmB), [Facebook](https://www.facebook.com/mexcglobal/), [LinkedIn](https://www.linkedin.com/company/mexcglobal/)  \n**External Link:** [MEXC](https://www.mexc.com/ko-KR)  \n**Categories:** CEXes, Payments  \n\n---\n\n# MITA  \n**Description:** Legends of Mitra is an NFT merge defense game where players defend their kingdom.  \n**Socials:** [Twitter](https://twitter.com/legendsofmitra), [Telegram](https://t.me/LegendsOfMitra), [Discord](https://discord.com/invite/DUn6D7hFK6)  \n**External Link:** [MITA](https://mymita.app/)  \n**Categories:** Gaming  \n\n---\n\n# MOOI  \n**Description:** MOOI Network is a Klaytn Layer 2 blockchain developed by POST VOYAGER.  \n**Socials:** [Twitter](https://twitter.com/mooi_network), [Discord](https://discord.com/invite/YGdEzHaDRz)  \n**External Link:** [MOOI Network](https://mooinetwork.io/mooinetwork)  \n**Categories:** Gaming  \n\n---\n\n# Maekyung Media Group  \n**Description:** A leading media company in Korea, focusing on economic journalism and digital news.  \n**Socials:** [Twitter](https://twitter.com/maekyungsns)  \n**External Link:** [Maekyung](https://www.mk.co.kr/)  \n**Categories:** GC  \n\n---\n\n# MarbleX  \n**Description:** A blockchain subsidiary of Netmarble, offering game-based blockchain services.  \n**Socials:** [Twitter](https://twitter.com/MeeCatsClub)  \n**External Link:** [MarbleX](https://www.marblex.io/)  \n**Categories:** Gaming, GC  \n\n---\n\n# Matrixport  \n**Description:** A crypto financial services platform for earning, trading, and investing in digital assets.  \n**Socials:** [Twitter](https://twitter.com/realMatrixport), [Telegram](https://t.me/matrixportvn), [Discord](https://discord.com/invite/ua3mygtE4P), [LinkedIn](https://www.linkedin.com/company/matrixport/), [Instagram](https://www.instagram.com/matrixport_/)  \n**External Link:** [Matrixport](https://www.matrixport.com/)  \n**Categories:** Others  \n\n---\n\n# Meecats  \n**Description:** MeeCats is building a gamified NFT experience in the Metaverse.  \n**Socials:** [Twitter](https://twitter.com/MeeCatsClub)  \n**External Link:** [MeeCats](https://meecats.io/)  \n**Categories:** Gaming  \n\n---\n\n# MermaidSwap  \n**Description:** A hybrid DEX and gaming platform integrating DeFi with entertainment.  \n**Socials:** [Twitter](https://x.com/mermaidswap_xyz), [Telegram](https://t.me/mermaidswapofficial), [Medium](https://medium.com/@mermaidswap.xyz)  \n**External Link:** [MermaidSwap](https://mermaidswapxyz.com)  \n**Categories:** DEXes & DeFi   \n\n---\n\n## MetaCRM  \n**Description:**  \nMetaCRM provides a suite of innovative software solutions empowering marketing efficiency & personalized customer service for Web3 businesses.  \n**Socials:**  \n- Twitter/X: [@metacrm_inc](https://twitter.com/metacrm_inc)  \n- [External Project Link](https://www.metacrm.inc/#/)  \n- [Project Documentation](https://docsend.com/view/iacpkxp9u4qi9fs7)  \n**Categories:** Tools & Infrastructure  \n\n---\n\n## MetaMask  \n**Description:**  \nMetaMask is the leading self-custodial wallet. The safe and simple way to access blockchain applications and Web3. Trusted by millions of users worldwide.  \n**Socials:**  \n- Twitter/X: [MetaMask](https://twitter.com/MetaMask)  \n- LinkedIn: [MetaMask](https://www.linkedin.com/company/metamask/)  \n- [External Project Link](https://metamask.io/)  \n**Categories:** Wallets  \n\n---\n\n## MetaSoul  \n**Description:**  \nMeta-Soul is a puzzle RPG P2E NFT platform that uses characters, stories, and digital figure NFTs.  \n**Socials:**  \n- Twitter/X: [MetaSoul_GL](https://twitter.com/MetaSoul_GL)  \n- Telegram: [MetaSoul_GL](https://t.me/MetaSoul_GL)  \n- [External Project Link](https://www.meta-soul.kr)  \n**Categories:** Gaming  \n\n---\n\n## MetaWeek  \n**Description:**  \nAlongside Metaverse, essential financial and non-financial applications of blockchain will be covered during MetaWeek.  \n**Socials:**  \n- Twitter/X: [TheMetaWeek](https://twitter.com/themetaweek?lang=en)  \n- [External Project Link](https://www.themetaweek.com/)  \n**Categories:** Others  \n\n---\n\n## MetaX  \n**Description:**  \nMetaX is a Connected TV (CTV) advertising and OTT commercialization company. MetaX Software has connected over 20 TV brands and channels, covering about 25 million OTT devices and 80 million large-screen users.  \n**Socials:**  \n- Twitter/X: [MetaXSoftware](https://twitter.com/metaxsoftware)  \n- LinkedIn: [MetaX Software](https://www.linkedin.com/company/metaxsoft/)  \n- [External Project Link](https://metax.global/)  \n**Categories:** CEXes & Payments  \n\n---\n\n## Metabora  \n**Description:**  \nStore, secure, and grow your entertainment crypto assets.  \n**Socials:**  \n- Twitter/X: [Bora Ecosystem](https://twitter.com/bora_ecosystem)  \n- Telegram: [Bora Official](https://t.me/boraofficial)  \n- Discord: [Bora Discord](https://discord.com/invite/borachain)  \n- [External Project Link](https://www.metabora.io/)  \n**Categories:** Gaming & Collectibles  \n\n---\n\n## Metamon  \n**Description:**  \nMetaWars is a multiplayer strategy/role-playing game set in a vast world driven by a developing digital currency based on blockchain technology.  \n**Socials:**  \n- Twitter/X: [Metamon Project](https://twitter.com/metamonproject)  \n- Discord: [Metamon Discord](https://discord.com/invite/tmfXeEhNGF)  \n- [External Project Link](https://themetamon.com/)  \n**Categories:** Gaming  \n\n---\n\n## Metaoneer  \n**Description:**  \nThe Metaoneer team develops various infrastructure services for blockchain commercialization.  \n**Socials:**  \n- Discord: [Metaoneer Bot](https://discord.com/oauth2/authorize?client_id=1001672615930384404&permissions=268453888&scope=bot)  \n- [External Project Link](https://metaoneer.club/)  \n**Categories:** Tools & Infrastructure  \n\n---\n\n## Moonpay  \n**Description:**  \nMoonPay is the world’s leading Web3 infrastructure company, providing end-to-end solutions for payments, enterprise-scale smart contract development, and digital asset management.  \n**Socials:**  \n- Twitter/X: [Moonpay](https://twitter.com/moonpay)  \n- LinkedIn: [Moonpay](https://www.linkedin.com/company/moonpay/)  \n- Instagram: [Moonpay](https://www.instagram.com/moonpay/?utm_medium=copy_link)  \n- [External Project Link](https://www.moonpay.com/ko)  \n**Categories:** CEXes & Payments  \n\n---\n\n**NFTs2Me**  \n**Description:** NFTs2Me is a multichain user-friendly comprehensive platform to create, deploy and manage your NFT collection and community, 100% free with advanced functionalities.  \n**Socials:** [Twitter/X](https://x.com/NFTs2Me), [Telegram](https://t.me/nfts2me)  \n**External Project Link:** [NFTs2Me](https://nfts2me.com/app/kaia/)  \n**Category:** NFT  \n\n---\n\n**NOW Wallet**  \n**Description:** NOW Wallet is a non-custodial free mobile or desktop crypto wallet that you can trust. Buy with fiat, exchange, and store Bitcoin, Ethereum and more coins!  \n**Socials:** [Twitter/X](https://twitter.com/NOW_Wallet), [Telegram](https://t.me/NOWWallet_channel)  \n**External Project Link:** [NOW Wallet](https://walletnow.app/)  \n**Category:** Wallets  \n\n---\n\n**NOWPayments**  \n**Description:** NOWPayments is your ultimate crypto payment gateway, revolutionizing global eCommerce with support for 200+ cryptocurrencies, seamless fiat conversion, and unbeatable fees. Join us in shaping the future of payments!  \n**Socials:** [Twitter/X](https://twitter.com/NOWPayments_io)  \n**External Project Link:** [NOWPayments](https://nowpayments.io/)  \n**Category:** CEXes-Payments  \n\n---\n\n**Netmarble**  \n**Description:** Established in Korea in 2000, Netmarble Corporation is a top developer and publisher pushing the boundaries of the mobile gaming experience with highly innovative games including Seven Knights 2, Ni no Kuni: Cross Worlds, Lineage 2: Revolution, and more.  \n**Socials:** [Twitter/X](https://twitter.com/NetmarbleO), [Facebook](https://www.facebook.com/netmarbleofficial/)  \n**External Project Link:** [Netmarble](https://company.netmarble.com/)  \n**Category:** Gaming; GC  \n\n---\n\n**Ni no Kuni: Cross Worlds**  \n**Description:** Ni no Kuni: Cross Worlds is a massively multiplayer online role-playing game (MMORPG) developed by Netmarble and based on Level-5's popular Ni no Kuni series.  \n**Socials:** [Twitter/X](https://x.com/ninokuni_global), [Discord](https://discord.com/invite/ninokuni-official), [Facebook](https://www.facebook.com/ninokuni), [YouTube](https://www.youtube.com/channel/UCHiycGyJBPzo0l9sJwVVsrQ)  \n**External Project Link:** [Ni no Kuni: Cross Worlds](https://ninokuni.netmarble.com/en)  \n**Category:** Gaming  \n\n---\n\n**Node375**  \n**Description:** NODE375 is an upgraded version of PetCompany2.0 that performs pet care missions and receives rewards.  \n**External Project Link:** [Node375](https://www.petcompany.io/)  \n**Category:** Dapps  \n\n---\n\n**NodeReal**  \n**Description:** Empowering developers to create dApps with our API service and ultimate one-stop blockchain solution.  \n**Socials:** [Twitter/X](https://twitter.com/Nodereal_io), [Discord](https://discord.com/invite/nodereal), [YouTube](https://www.youtube.com/channel/UCbXBBCeGVZpz3NXp0dXuBqw), [LinkedIn](https://www.linkedin.com/company/nodereal/)  \n**External Project Link:** [NodeReal](https://nodereal.io/)  \n**Category:** RPCs  \n\n---\n\n**Nodit**  \n**Description:** Nodit aims to provide enterprise-grade Web3 infrastructure accessible to everyone.  \n**Socials:** [Twitter/X](https://x.com/noditplatform), [Medium](https://medium.com/@nodeit_nodit)  \n**External Project Link:** [Nodit](https://nodit.io)  \n**Category:** Tools-Infrastructure; Faucets  \n\n---\n\n**Nominex**  \n**Description:** Nominex is a new trading platform for a convenient cryptocurrency trading experience, encompassed with low fees and numerous trading instruments - in a single platform.  \n**Socials:** [Twitter/X](https://twitter.com/NominexExchange), [Telegram](https://t.me/nominex_announcements)  \n**External Project Link:** [Nominex](https://nominex.io/)  \n**Category:** CEXes-Payments  \n\n---\n\n**Nuant**  \n**Description:** Nuant is a Portfolio and Risk Management platform tailored for professionals to monitor and assess the risk of their digital asset portfolio.  \n**Socials:** [Twitter/X](https://twitter.com/nuant_official), [LinkedIn](https://www.linkedin.com/company/nuant/)  \n**External Project Link:** [Nuant](https://www.nuant.com)  \n**Category:** Tools-Infrastructure  \n\n---\n\n**O-SEAN**  \n**Description:** O-SEAN is a collaborative NFT minting service platform for IP owners (brands or individuals) and creators.  \n**Socials:** [Twitter/X](https://twitter.com/O_SEAN_official), [Instagram](https://www.instagram.com/o_sean_official/)  \n**External Project Link:** [O-SEAN](https://o-sean.io/)  \n**Category:** NFT  \n\n---\n\n**OKLink**  \n**Description:** OKLink is a multi-chain aggregated blockchain explorer covering 30+ mainstream chains.  \n**Socials:** [Twitter/X](https://twitter.com/OKLink), [Telegram](https://t.co/6HrlVDKM9x), [Discord](https://discord.com/invite/QcywHPgk4S)  \n**External Project Link:** [OKLink](https://www.oklink.com/klaytn)  \n**Category:** Tools-Infrastructure  \n\n---\n\n**OKX**  \n**Description:** Buy BTC, ETH, and more on OKX, a leading crypto exchange – explore Web3, invest in DeFi and NFTs. Register now and experience the future of finance.  \n**Socials:** [Twitter/X](https://twitter.com/okx), [Telegram](https://t.me/OKXOfficial_English), [Discord](https://discord.com/invite/e6EyvM5QwM), [Instagram](https://www.instagram.com/okx_official/)  \n**External Project Link:** [OKX](https://www.okx.com/)  \n**Category:** CEXes-Payments  \n\n---\n\n**OKX Explorer**  \n**Description:** OKX is the world's leading multi-chain blockchain explorer which provides data information of Kaia, Bitcoin, Ethereum, Litecoin as well as BTC block, BTC Halving.  \n**External Project Link:** [OKX Explorer](https://www.okx.com/web3/explorer/kaia)  \n**Category:** Explorers  \n\n---\n\n**Octet**  \n**Description:** Octet offers you a monthly subscription approach for pricing for blockchain infrastructure service.  \n**External Project Link:** [Octet](https://octet.im/)  \n**Category:** Tools-Infrastructure  \n\n---\n\n**OneKey**  \n**Description:** OneKey: The Apple of Hardware Wallets. Secure, Simple, Stunning. Leading hardware wallet maker. Founded in 2019, based in Hong Kong. Secured $20M in Series A from Dragonfly, Ribbit, etc. The only hardware wallet maker invested by Coinbase Ventures. Truly 100% open-source solutions. Has 2 mil+ on-chain users including DeFi whales. Largest volume of Bitcoin deposit among hardware wallet makers, slightly lower than OKX wallet.\n**Socials:** [Twitter/X](https://x.com/OneKeyHQ), [Github](https://github.com/OneKeyHQ)  \n**External Project Link:** [OneKey](https://onekey.so/)  \n**Category:** Wallets  \n\n---\n\n**Onero**  \n**Description:** Onero is a cutting-edge decentralized launchpad built on the Kaia Blockchain, empowering creators, developers, and innovators to seamlessly launch their tokens and NFTs.  \n**Socials:** [Twitter/X](https://x.com/AppOnero), [Telegram](https://t.me/apponero)  \n**External Project Link:** [Onero](https://www.onero.app)  \n**Category:** Dapps  \n\n---\n\n**OpenSea**  \n**Description:** OpenSea is the world’s first and largest web3 marketplace for NFTs and crypto collectibles.  \n**Socials:** [Twitter/X](https://x.com/opensea), [Discord](https://discord.com/invite/opensea)  \n**External Project Link:** [OpenSea](https://opensea.io/)  \n**Category:** Marketplaces, NFT  \n\n---\n\n**Orakl Network**  \n**Description:** Orakl Network is a complete EVM-compatible oracle. As a Kaia native Oracle, Orakl Network provides Data Feed, VRF, and Request-Response solutions.  \n**Socials:** [Twitter/X](https://twitter.com/oraklnetwork), [Medium](https://oraklnetwork.medium.com/), [Github](https://github.com/Bisonai/orakl)  \n**External Project Link:** [Orakl Network](https://www.orakl.network/)  \n**Category:** Oracles-Bridges, Oracles  \n\n---\n\n**Orbit Bridge**  \n**Description:** Orbit Chain is a solution to the limited resources and lack of connectivity of existing public chains. It is a cross-chain project that challenges the limits of scalability.  \n**Socials:** [Twitter/X](https://twitter.com/Orbit_Chain), [Telegram](https://t.me/Orbit_Chain)  \n**External Project Link:** [Orbit Bridge](https://bridge.orbitchain.io/)  \n**Category:** Oracles-Bridges  \n\n---\n\n**Ozys**  \n**Description:** Ozys is leading the change of various industries and businesses under the motto of Blockchain Technology that Changes the World. Ozys launched South Korea's first Ethereum sidechain-based decentralized exchange and has introduced world-class smart contract-based protocols such as KLAYswap, KLAYstation, Orbit Bridge, and Klaytnscope.  \n**Socials:** [Twitter/X](https://twitter.com/Orbit_Chain), [Telegram](https://t.me/Orbit_Chain)  \n**External Project Link:** [Ozys](https://ozys.io/)  \n**Category:** GC  \n\n---\n\n**P2PB2B**  \n**Description:** P2B is one of the biggest international cryptocurrency exchanges in the TOP-10 platforms by weekly visits. It is the most trusted platform for crypto projects entering the market to gain initial investor attention.  \n**Socials:** [Twitter/X](https://twitter.com/P2B_Exchange), [Telegram](https://t.me/p2pb2b_io), [LinkedIn](https://www.linkedin.com/company/p2pb2b/?viewAsMember=true), [Instagram](https://www.instagram.com/p2b_exchange/)  \n**External Project Link:** [P2PB2B](https://p2pb2b.com/)  \n**Category:** CEXes-Payments  \n\n---\n\n**PLAYMETA**  \n**Description:** PLAYMETA is the platform providing DeFi services with various tools such as games, social media, and NFT marketplaces.  \n**Socials:** [Twitter/X](https://twitter.com/pibbleio), [Telegram](https://t.me/pibble_official)  \n**External Project Link:** [PLAYMETA](https://playmeta.global/)  \n**Category:** Dapps  \n\n---\n\n**Pangea Swap**  \n**Description:** Pangea Swap is the first-ever AMM DEX to provide concentrated liquidity on the Klaytn ecosystem.  \n**Socials:** [Twitter/X](https://twitter.com/Pangea_Swap)  \n**External Project Link:** [Pangea Swap](https://www.pangeaswap.com/)  \n**Category:** Dexes-DeFi  \n\n---\n\n**Phemex**  \n**Description:** Phemex is a Top 10 derivatives global crypto exchange. Users can now verify our Proof-of-Reserves anytime.  \n**Socials:** [Twitter/X](https://twitter.com/Phemex_official), [Telegram](https://t.me/Phemex_EN), [Discord](https://discord.com/invite/hQJAR8J7T9), [LinkedIn](https://www.linkedin.com/company/phemex/)  \n**External Project Link:** [Phemex](https://phemex.com/)  \n**Category:** CEXes-Payments  \n\n---\n\n**Pocket Network**  \n**Description:** Pocket Network is an open protocol that empowers developers with reliable, performant, and cost-effective RPC access to the open internet.  \n**Socials:** [Twitter/X](https://twitter.com/POKTnetwork), [Discord](https://discord.com/invite/pokt)  \n**External Project Link:** [Pocket Network](https://www.pokt.network/)  \n**Category:** Tools-Infrastructure, RPCs  \n\n---\n\n**Post Voyager**  \n**Description:** POST VOYAGER provides a quick and inexpensive blockchain, easy UI/UX, and various services to support numerous people exploring a new metaverse.  \n**Socials:** [LinkedIn](https://www.linkedin.com/company/postvoyager/?trk=affiliated-pages)  \n**External Project Link:** [Post Voyager](https://postvoyager.com/)  \n**Category:** Tools-Infrastructure  \n\n---  \n\n**Presto Labs**  \n**Description:** Presto Labs is a Singapore-based quantitative trading firm founded in 2014. The team consists of competition-winning researchers, engineers, and finance professionals who enjoy solving challenging real-world problems in finance. Trading in billions of US dollars a day, Presto Labs is a global top-tier liquidity provider and investor in both crypto and traditional financial markets.  \n**Socials:** [Twitter/X](https://twitter.com/presto_labs), [LinkedIn](https://sg.linkedin.com/company/prestolabs), [Medium](https://medium.com/@prestolabs)  \n**External Project Link:** [Presto Labs](https://www.prestolabs.io/)  \n**Category:** GC  \n\n---  \n\n**PrimeXBT**  \n**Description:** PrimeXBT is an award-winning cryptocurrency trading platform that allows users to trade global markets, including Crypto, Commodities, Indices, and Forex.  \n**Socials:** [Twitter/X](https://twitter.com/primexbt), [Telegram](https://t.me/PrimeXBT_English), [Discord](https://discord.com/invite/yEr8p72pxu)  \n**External Project Link:** [PrimeXBT](https://primexbt.com/)  \n**Category:** CEXes-Payments  \n\n---  \n\n**Privy**  \n**Description:** Privy is the easiest way to onboard users to web3, providing simple authentication flows and powerful embedded wallets.  \n**Socials:** [Twitter/X](https://twitter.com/privy_io), [Github](https://github.com/privy-io)  \n**External Project Link:** [Privy](https://www.privy.io/)  \n**Category:** SDKs-Libraries  \n\n---  \n\n**Probit**  \n**Description:** ProBit Global is a centralized cryptocurrency exchange established in 2017 with 427 coins and 560 trading pairs available.  \n**Socials:** [Twitter/X](https://twitter.com/ProBit_Exchange/), [Telegram](https://t.me/ProBitGlobalOfficial), [Discord](https://discord.com/invite/uK7hayUHxu)  \n**External Project Link:** [Probit](https://www.probit.kr/ko-kr/)  \n**Category:** CEXes-Payments  \n\n---  \n\n**ProjectWITH**  \n**Description:** WITH platform supports career development for athletes across various sports events, providing career information and self-PR opportunities.  \n**Socials:** [Twitter/X](https://twitter.com/project_with_?lang=en), [LinkedIn](https://www.linkedin.com/company/project-with/)  \n**External Project Link:** [ProjectWITH](https://www.projectwith.io/)  \n**Category:** Dapps  \n\n---  \n\n**Provers**  \n**Description:** PROVERS is a Web3 service that makes daily life more valuable, supporting successful change with TKLE tokens on the blockchain.  \n**Socials:** [Twitter/X](https://twitter.com/proversofficial), [Discord](https://discord.com/invite/mq4Ud2UDJW)  \n**External Project Link:** [Provers](https://provers.io/)  \n**Category:** Dapps  \n\n---  \n\n**Punkland**  \n**Description:** Punkland is a platform that allows users to develop online games without complex coding knowledge and play those games on mobile.  \n**Socials:** [Twitter/X](https://twitter.com/punkland_global)  \n**External Project Link:** [Punkland](https://nekoland.net/about)  \n**Category:** Gaming  \n\n---  \n\n**Pyth**  \n**Description:** Pyth delivers real-time market data for crypto, equities, FX, and commodities to 50+ blockchains, contributed by 95+ major market participants.  \n**Socials:** [Twitter/X](https://x.com/PythNetwork), [Telegram](https://t.me/Pyth_Network), [Medium](https://google.com), [Discord](https://discord.com/invite/PythNetwork), [Github](https://github.com/pyth-network), [YouTube](https://www.youtube.com/channel/UCjCkvPN9ohl0UDvldfn1neg), [LinkedIn](https://www.linkedin.com/company/pyth-network/)  \n**External Project Link:** [Pyth](https://pyth.network/)  \n**Category:** Dexes-DeFi, Oracles, Oracles-Bridges  \n\n---  \n\n**QuantFi**  \n**Description:** QuantFi is a DeFi investment platform that provides technology for fund management, liquidity assets, stable token swaps, and low slippage trading.  \n**Socials:** [Twitter/X](https://twitter.com/quant_fi?lang=en)  \n**External Project Link:** [QuantFi](https://www.quantfi.com/)  \n**Category:** Dexes-DeFi  \n\n---  \n\n**Quantstamp**  \n**Description:** Quantstamp is a global leader in blockchain security, performing over 500 audits and securing $200B+ in digital assets.  \n**Socials:** [Twitter/X](https://twitter.com/Quantstamp), [LinkedIn](https://www.linkedin.com/company/quantstamp/)  \n**External Project Link:** [Quantstamp](https://quantstamp.com/)  \n\n---  \n\n**QuestN**  \n**External Project Link:** [QuestN](https://questn.com/)  \n**Category:** Others  \n\n---  \n\n**QuickNode**  \n**Description:** QuickNode offers blockchain infrastructure with secure, decentralized innovation and high-performance RPC & API services.  \n**Socials:** [Twitter/X](https://x.com/quicknode), [Discord](https://discord.com/invite/quicknode), [YouTube](https://www.youtube.com/channel/UC3lhedwc0EISreYiYtQ-Gjg), [LinkedIn](https://www.linkedin.com/company/quicknode/)  \n**External Project Link:** [QuickNode](https://www.quicknode.com/)  \n**Category:** Tools-Infrastructure  \n\n---  \n\n**REDi**  \n**Description:** REDi is a blockchain-based data marketplace for renewable energy.  \n**Socials:** [Twitter/X](https://twitter.com/REDi_infranet), [Telegram](https://t.me/redi_announcement), [Discord](https://discord.com/invite/SSyE65qxwv)  \n**External Project Link:** [REDi](https://redi.io/)  \n**Category:** Dapps  \n\n---\n\n**Rabby Wallet**  \n**Description:** The game-changing wallet for Ethereum and all EVM chains.  \n**Socials:** [Twitter/X](https://twitter.com/Rabby_io)  \n**External Project Link:** [Rabby Wallet](https://rabby.io/)  \n**Category:** Wallets  \n\n---  \n\n**Reign Alter World**  \n**Description:** REIGN ALTER WORLD is a next-generation Cross Platform Survival MMORPG Game with revolutionary \"inGame DeFi,\" focusing on sustainable political and economic systems, allowing players to have in-game financial solutions.  \n**Socials:** [Twitter/X](https://x.com/ReignAlterWorld), [Telegram](https://t.me/reignalterworld), [Medium](https://medium.com/@reignalterworld), [Facebook](https://www.facebook.com/reignalterworldgames/), [YouTube](https://www.youtube.com/@reignalterworld), [Instagram](https://www.instagram.com/reignalterworld/)  \n**External Project Link:** [Reign Alter World](https://reignalter.world/)  \n**Category:** Gaming  \n\n---  \n\n**Rewardy Wallet**  \n**Description:** Rewardy Wallet is a blockchain-based WEB3 entertainment wallet that accumulates points through community activities. Users can manage their assets easily and safely without gas fees and earn points by participating in over 20 global communities.  \n**Socials:** [Twitter/X](https://x.com/RewardyWallet), [Medium](https://medium.com/@RewardyWallet), [YouTube](https://www.youtube.com/@rewardywallet)  \n**External Project Link:** [Rewardy Wallet](https://www.c2eprotocol.com/)  \n**Category:** Wallets  \n\n---  \n\n**Rillaz**  \n**Description:** Rillaz P2E is a project that offers engaging hyper-casual games with Rillaz NFT management, allowing players to receive token rewards.  \n**Socials:** [Twitter/X](https://twitter.com/Rillaz_official), [Discord](https://discord.gg/btzX4shUBQ)  \n**External Project Link:** [Rillaz](https://meta-brickz.gitbook.io/p2e/)  \n**Category:** Gaming  \n\n---  \n\n**S2W LAB**  \n**Description:** S2W is a data intelligence company specializing in cyber threat intelligence, brand/digital abuse, and blockchain.  \n**Socials:** [LinkedIn](https://www.linkedin.com/company/s2winc/?originalSubdomain=kr)  \n**External Project Link:** [S2W LAB](https://s2w.inc/)  \n**Category:** Others  \n\n---  \n\n**SCRL**  \n**Description:** Founded in 2020, SCRL delivers Web3 cybersecurity solutions focusing on smart contract auditing, KYC, and blockchain investigation.  \n**Socials:** [Twitter/X](https://x.com/scrl_io)  \n**External Project Link:** [SCRL](https://scrl.io/)  \n**Category:** Tools-Infrastructure  \n\n---  \n\n**SCVsoft**  \n**Description:** SCVsoft provides high-quality software development services for IoT, cleantech, medical, and other selected industries.  \n**Socials:** [Twitter/X](https://twitter.com/scvsoft?lang=en), [LinkedIn](https://www.linkedin.com/company/scvsoft/)  \n**External Project Link:** [SCVsoft](https://scvsoft.net/)  \n**Category:** Tools-Infrastructure  \n\n---  \n\n**SafePal**  \n**Description:** SafePal is a non-custodial crypto wallet suite, offering hardware wallet, mobile app, and browser extension solutions, empowering users to explore decentralized finance securely.  \n**Socials:** [Twitter/X](https://twitter.com/iSafePal), [Telegram](https://t.me/SafePal_official), [Discord](https://discord.com/invite/BuKynZqRNj)  \n**External Project Link:** [SafePal](https://www.safepal.com/)  \n**Category:** Wallets  \n\n---  \n\n**SiX Bridge**  \n**Description:** A decentralized multi-chain fund management protocol for every investor to participate in a crypto fund management system.  \n**Socials:** [Twitter/X](https://twitter.com/DefinixOfficial), [Telegram](https://t.me/SIXNetwork)  \n**External Project Link:** [SiX Bridge](https://bridge.six.network/)  \n**Category:** Oracles-Bridges  \n\n---  \n\n**SNKRZ**  \n**Description:** SNKRZ is a game token earned while exercising, with rewards varying based on the abilities of a user's SNKRZ NFT.  \n**Socials:** [Twitter/X](https://twitter.com/theSNKRZ), [Discord](https://discord.com/invite/thesnkrz)  \n**External Project Link:** [SNKRZ](https://www.thesnkrz.com/)  \n**Category:** Dapps  \n\n---  \n\n**SheepFarm**  \n**Description:** SheepFarm is a P2E blockchain game on the Klaytn Network, allowing users to purchase pastures, run farms, and collect sheep NFTs.  \n**Socials:** [Twitter/X](https://twitter.com/SheepFarmMeta)  \n**External Project Link:** [SheepFarm](https://sheepfarm.io/)  \n**Category:** Gaming  \n\n---  \n\n**SOOHO.IO**  \n**External Project Link:** [SOOHO.IO](https://sooho.io/ko/)  \n**Category:** Others  \n\n---  \n\n**SORAMITSU**  \n**External Project Link:** [SORAMITSU](https://soramitsu.co.jp/)  \n**Category:** Others  \n\n---  \n\n**SOTATEK**  \n**External Project Link:** [SOTATEK](https://www.sotatek.com/)  \n**Category:** Others  \n\n---  \n\n**Salim Group**  \n**Description:** Salim Group is a diversified conglomerate involved in property development, leisure, hotel & resort development, and commercial real estate, including Indofood, the world's largest instant noodle producer.  \n**Socials:** [LinkedIn](https://www.linkedin.com/company/salimgroup/?originalSubdomain=id)  \n**External Project Link:** [Salim Group](https://www.linkedin.com/company/salimgroup)  \n**Category:** Enterprise  \n\n---  \n\n**Seoul National University**  \n**Description:** Seoul National University is a prestigious research university in South Korea and one of the top three \"SKY\" universities in the country.  \n**Socials:** [Instagram](https://www.instagram.com/snu.official/?igshid=1ja3dei440cnw)  \n**External Project Link:** [Seoul National University](https://en.snu.ac.kr/)  \n**Category:** Others  \n\n\n---\n**SheepFarm**  \n**Description:** SheepFarm is a P2E blockchain game on the Klaytn Network, allowing users to purchase pastures, run farms, and collect sheep NFTs.  \n**Socials:** [Twitter/X](https://twitter.com/SheepFarmMeta)  \n**External Project Link:** [SheepFarm](https://sheepfarm.io/)  \n**Category:** Gaming  \n\n---  \n\n**SiX Bridge**  \n**Description:** A decentralized multi-chain fund management protocol for every investor to participate in a crypto fund management system.  \n**Socials:** [Twitter/X](https://twitter.com/DefinixOfficial), [Telegram](https://t.me/SIXNetwork)  \n**External Project Link:** [SiX Bridge](https://bridge.six.network/)  \n**Category:** Oracles-Bridges  \n\n---  \n\n**Sid Eternal**  \n**Description:** Sid Eternal is a blockchain-based card collecting game with compelling stories and visuals.  \n**Socials:** [Twitter/X](https://twitter.com/play2earncrypto), [Discord](https://discord.com/invite/RYvHDXR)  \n**External Project Link:** [Sid Eternal](https://www.gemhub.net/games/sideternal.html)  \n**Category:** Gaming  \n\n---  \n\n**Sigma Protocol**  \n**Description:** Sigma Finance is the yield master key for the Klaytn DeFi ecosystem, aiming to introduce supercharged yields and governance.  \n**Socials:** [Twitter/X](https://twitter.com/sigmaklaytn)  \n**External Project Link:** [Sigma Protocol](https://www.sigmaprotocol.app/)  \n**Category:** Dexes-DeFi  \n\n---  \n\n**Simplex**  \n**Description:** Simplex, a Nuvei company, provides fiat/crypto infrastructure globally, ensuring seamless and secure transactions.  \n**Socials:** [Twitter/X](https://twitter.com/SimplexCC), [LinkedIn](https://www.linkedin.com/company/simplexcc/)  \n**External Project Link:** [Simplex](https://www.simplex.com/)  \n**Category:** CEXes-Payments  \n\n---  \n\n**Snapshot**  \n**Description:** Snapshot is a gasless voting platform for DAOs, DeFi protocols, and NFT communities, allowing easy customization of governance processes.  \n**Socials:** [Twitter/X](https://twitter.com/SnapshotLabs), [Discord](https://discord.com/invite/MKDaqUBgjF)  \n**External Project Link:** [Snapshot](https://snapshot.org/#/)  \n**Category:** Tools-Infrastructure  \n\n---  \n\n**SoftBank Corp.**  \n**Description:** SoftBank Corp. operates telecommunications and IT businesses guided by the philosophy “Information Revolution – Happiness for Everyone.”  \n**External Project Link:** [SoftBank Corp.](https://www.softbank.jp/en/corp/aboutus/)  \n**Category:** GC  \n\n---  \n\n**SomeSing**  \n**Description:** SOMESING is a blockchain-based global social singing content platform, enabling users to create, share, and earn rewards for their music.  \n**Socials:** [Twitter/X](https://twitter.com/somesinglovers), [Telegram](https://t.me/somesinglovers_EN)  \n**External Project Link:** [SomeSing](https://somesing.io/service)  \n**Category:** Dapps  \n\n---  \n\n**Stable Lab**  \n**Description:** StableLab is a research and development firm specializing in governance operations and analytics.  \n**Socials:** [Twitter/X](https://x.com/StableLab)  \n**External Project Link:** [Stable Lab](https://stablelab.xyz/)  \n**Category:** GC, Tools-Infrastructure  \n\n---  \n\n**Stakely**  \n**Description:** Stakely is a liquid staking service in the Klaytn ecosystem, providing staking rewards and DeFi integrations.  \n**Socials:** [Twitter/X](https://twitter.com/Stakely_io)  \n**External Project Link:** [Stakely](https://stake.ly/en)  \n**Category:** Dexes-DeFi  \n\n---  \n\n**Stargate**  \n**Description:** Stargate enables cross-chain asset transfers with unified liquidity pools and instant guaranteed finality.  \n**Socials:** [Twitter/X](https://twitter.com/StargateFinance), [Telegram](https://t.me/joinchat/LEM0ELklmO1kODdh), [Discord](https://stargate.finance/discord), [GitHub](https://github.com/stargate-protocol)  \n**External Project Link:** [Stargate](https://stargate.finance/)  \n**Category:** Dexes-DeFi, Bridges  \n\n---  \n\n**Stellar Gate**  \n**Description:** Stellar Gate is an immersive fusion of FPS and RTS gameplay, powered by blockchain technology for a play-for-fun experience.  \n**Socials:** [Twitter/X](https://twitter.com/stellargate_io), [Telegram](https://t.me/stellargateio)  \n**External Project Link:** [Stellar Gate](https://stellargate.io)  \n**Category:** Gaming\n\n---\n\n## SubQuery  \n**Description:** The SubQuery Network is full of globally distributed Indexers and RPC providers. Load balanced so customers benefit from a single endpoint, but multiple redundant providers.  \n**Socials:** [Twitter/X](https://twitter.com/subquerynetwork) | [Telegram](https://t.me/subquerynetwork) | [Medium](https://subquery.medium.com/) | [Discord](https://discord.com/invite/subquery) | [GitHub](https://github.com/subquery) | [YouTube](https://www.youtube.com/c/SubQueryNetwork) | [LinkedIn](https://www.linkedin.com/company/subquery/)  \n**External Project Link:** [SubQuery](https://subquery.network/)  \n**Category:** Tools-Infrastructure, Indexers  \n\n---\n\n## Sunmiya Club  \n**Description:** Sunmiya Club is a PFP NFT project based on the universe where 10K MIYAs’ journey begins. The project performs as a bridge to connect offline and metaverse, leading to the representative Web 3.0 IP.  \n**Socials:** [Twitter/X](https://twitter.com/SunmiyaClub) | [Telegram](https://t.me/sunmiya_club) | [Discord](https://discord.com/invite/miyaofficial)  \n**External Project Link:** [Sunmiya Club](https://sunmiya.club/)  \n**Category:** NFT  \n\n---\n\n## SuperWalk  \n**Description:** SuperWalk is a blockchain reward-based Move-To-Earn service that provides tokens just by walking.  \n**Socials:** [Twitter/X](https://twitter.com/SuperWalk_) | [Discord](https://discord.com/invite/superwalk)  \n**External Project Link:** [SuperWalk](https://superwalk.io/en)  \n**Category:** Dapps  \n\n---\n\n## Supra Oracles  \n**Description:** Supra is a middleware network pioneering cross-chain solutions across L1 and L2 ecosystems to power Web3 applications. Supra as an “IntraLayer” is a powerful framework that brings our solutions together - oracles, VRFs, and a native cross-chain protocol through singular shared-security infrastructure.  \n**Socials:** [Twitter/X](https://twitter.com/SupraOracles) | [Telegram](https://t.me/SupraOracles) | [Discord](https://discord.com/invite/supraoracles)  \n**External Project Link:** [Supra Oracles](https://supra.com)  \n**Category:** Oracles-Bridges, Oracles  \n\n---\n\n## SurvivalismG  \n**Description:** P2E version of Survivalism which has more than 10k+ downloads. Team has developers from LINE Games, KakaoEntertainment, Krafton, PUBG LABS, NC SOFT, Ozys.  \n**Socials:** [Telegram](https://t.me/SurvivalismG)  \n**External Project Link:** [SurvivalismG](https://survivalism.io/)  \n**Category:** Gaming  \n\n---\n\n## Swapscanner  \n**Description:** Swapscanner aims to be a one-stop platform for the Klaytn ecosystem. Starting as a next-generation DEX aggregator, we are providing services such as Pro chart and Wallet sequentially.  \n**Socials:** [Twitter/X](https://twitter.com/Swapscanner)  \n**External Project Link:** [Swapscanner](https://swapscanner.io)  \n**Category:** Dexes-DeFi, Swap, GC  \n\n---\n\n## Sygnum  \n**Description:** Sygnum is the world's first digital asset bank, and a digital asset specialist with global reach. With Sygnum Bank AG's Swiss banking licence, as well as Sygnum Pte's capital markets services (CMS) licence in Singapore, Sygnum empowers professional and institutional clients to invest in the digital asset economy with complete trust.  \n**Socials:** [Twitter/X](https://twitter.com/sygnumofficial) | [LinkedIn](https://www.linkedin.com/company/sygnumofficial/)  \n**External Project Link:** [Sygnum](https://www.sygnum.com/)  \n**Category:** GC  \n\n---\n\n## Synapse Protocol  \n**Description:** Synapse is the most widely used, extensible, secure cross-chain communications network. Build truly cross-chain applications using the Synapse Protocol.  \n**Socials:** [Twitter/X](https://twitter.com/SynapseProtocol) | [Discord](https://discord.com/invite/4rMzuEnKqe)  \n**External Project Link:** [Synapse Protocol](https://synapseprotocol.com/landing)  \n**Category:** Oracles-Bridges, Bridges  \n\n---\n\n## TEAM DAO  \n**Description:** T.E.A.M DAO is a next-generation tech-enabled Guild 3.0. TEAM (Tokenized Esports Asset Management) is a platform for aspiring players, metaverse believers, and asset managers to deeply engage in the new Web3 economy.  \n**Socials:** [Twitter/X](https://twitter.com/TEAMDAOcom)  \n**External Project Link:** [TEAM DAO](https://www.teamdao.com/)  \n**Category:** Gaming  \n\n---\n\n## TEMCO  \n**Description:** TEMCO (TEMCO) is a cryptocurrency and operates on the Klaytn platform. TEMCO combines innovative technologies - smart contracts, blockchain, and big data.  \n**Socials:** [Twitter/X](https://twitter.com/TEMCOLABS) | [Facebook](https://www.facebook.com/TEMCOLABS/)  \n**External Project Link:** [TEMCO](https://temco.io/#/)  \n**Category:** Dapps  \n\n---\n\n## TESSA  \n**Description:** TESSA is an alternative investment platform for the purchase, sale, and trade of fractionalized ownership interests.  \n**Socials:** [YouTube](https://www.youtube.com/channel/UCpi_o1K_ujWoFBI-SiA33wQ?view_as=subscriber) | [Instagram](https://www.instagram.com/tessa.seoul/)  \n**External Project Link:** [TESSA](https://www.tessa.art/ko#/)  \n**Category:** Dapps  \n\n---\n\n## Tank Royale  \n**Description:** Tank Royale is a strategy game developed by BSS company that can be played on Mac, Windows, and PC (Steam). In April 2023, Tank Royale was ranked on popular streaming platform Twitch based on 0 thousand hours watched. The game was published by BSS company on 01-12-2019.  \n**Socials:** [Twitter/X](https://twitter.com/intent/follow?screen_name=SteamDB)  \n**External Project Link:** [Tank Royale](https://www.pangeaswap.com/)  \n**Category:** Gaming  \n\n---\n\n## Tari World  \n**Description:** TARI WORLD is a platform that attracts influencers and individual users and allows them to build their own metaverse-powered towns.  \n**Socials:** [Twitter/X](https://twitter.com/TARI_WORLD) | [Telegram](https://t.me/tariworld_chats) | [Discord](https://discord.com/invite/RjNzbPweCt)  \n**External Project Link:** [Tari World](https://tari.world/page/index)  \n**Category:** Gaming  \n\n---\n\n## Blockfinex\n**Description:**  \nBlockfinex - A Global Cryptocurrency Exchange that allows you trade various cryptocurrencies across the world. Blockfinex is a cryptocurrency exchange owned by Dan Holdings.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/blockfinexcom)  \n- [Telegram](https://t.me/blockfinexchange)  \n- [Instagram](https://www.instagram.com/blockfinex/)  \n**External Link:** [Website](https://www.blockfinex.com/)  \n**Categories:** cexes-payments  \n\n---\n\n## Bluewhale Protocol\n**Description:**  \nBluewale offers a variety of services that make investment activities easier and more efficient for cryptocurrency owners.  \nCurrently, Bluewale provides DeFi-related services such as assets held and DeFi investment status dashboards and smart swaps at Klaytn Blockchain.  \n**Socials:**  \n- [Telegram](https://t.me/bluewhale_chatting)  \n**External Link:** [Website](https://bwpm.io/#/)  \n**Categories:** dexes-defi  \n\n---\n\n## Brave Nine\n**Description:**  \nBrave Nine (also known as Browndust in Korea) is NEOWIZ’s flagship strategy RPG that has a global gamer base of over 5 million. On May 13, the game was updated with blockchain technology, adding new mechanics that allows players to earn Brave Tokens ($BVT) minted on Klaytn, as well as expanded gameplay through mythic mercenary NFTs.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/bravenineglobal)  \n**External Link:** [Website](https://www.bravenine.com/)  \n**Categories:** gaming  \n\n---\n\n## Breakfirstfund\n**External Link:** [Website](https://breakfirstfund.com/)  \n**Categories:** dexes-defi  \n\n---\n\n## Bughole\n**Description:**  \nTrusted community-driven blockchain infrastructure provider. Accelerates ecosystem growth with validator ops, GameFi, governance DApps, and DeFi protocols.  \n**Socials:**  \n- [Twitter/X](https://x.com/bughole_io)  \n- [Medium](https://medium.com/@Bughole)  \n- [Discord](https://discord.com/invite/bugcity)  \n**External Links:**  \n- [Lair](https://lair.fi/)  \n- [Website](https://bughole.io/)  \n**Categories:** gc  \n\n---\n\n## Bwarelabs\n**Description:**  \nBware Labs aims to tackle Web3 challenges and boost global adoption by offering the industry's highest-performance and most reliable infrastructure services and development tools.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/BwareLabs)  \n- [Telegram](https://t.me/bwareLabs)  \n- [Discord](https://discord.com/invite/VPkWESgtvV)  \n**External Link:** [Website](https://bwarelabs.com/)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Bybit\n**Description:**  \nBybit Multilingual Support. Highly Secure, Stable. Trade With 101x Leverage.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/Bybit_Official)  \n- [Telegram](https://t.me/BybitEnglish)  \n**External Link:** [Website](https://www.bybit.com/en-US/)  \n**Categories:** cexes-payments  \n\n---\n\n## CREDER-ITCEN\n**Description:**  \nItcen Group, which has Korea's largest gold exchange as a subsidiary, and BPMG, which possesses core blockchain technology, cooperate to build a comprehensive financial platform centered on gold-based digital assets and add the value of decentralization to gold.  \n**Socials:**  \n- [Twitter/X](https://x.com/The_MiningClub)  \n- [Telegram](https://t.me/+uiNj7Nj9o_43MTQ1)  \n**External Link:** [Website](https://www.creder.biz/)  \n**Categories:** rwa; gc  \n\n---\n\n## Cactus Custody\n**Description:**  \nCACTUS CUSTODY is your trusted qualified custodian for digital assets. We provide an enterprise-level financial management system for digital assets, risk management modules, customized business lines, role-based accounts, customized approval process, batch receival and batch transfer, asset report and audit trail, as well as safe custody of digital assets.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/CactusCustody)  \n- [Telegram](https://t.me/cactuscustody)  \n**External Link:** [Website](https://www.mycactus.com/en)  \n**Categories:** tools-infrastructure  \n\n---\n\n## Cases by Kate\n**Description:**  \nCases by Kate is a 10,000 piece NFT collection stored on the Ethereum blockchain. The current floor price for a Cases by Kate NFT is 0.00105 ETH - $1.78. The total sales volume for Cases by Kate is 87.1 ETH - $147,296.32 with 1220 owners.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/CasesByKateNFT)  \n- [Discord](https://discord.com/login)  \n**External Link:** [Website](https://www.casesbykate.xyz/)  \n**Categories:** nft  \n\n---\n\n## Cat Town Punks\n**Description:**  \nThere are new punks in the town. There are 20,000 unique generated NFTs. And they are ready to take over the world.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/CatTownPunks)  \n- [Discord](https://discord.com/invite/3SdZ7uR76j)  \n**External Link:** [Website](https://cattownpunks.com/)  \n**Categories:** nft  \n\n---\n\n## Celer cBridge\n**Description:**  \nCeler is a blockchain interoperability protocol enabling a one-click user experience accessing tokens, DeFi, GameFi, NFTs, governance, and more across multiple chains. Developers can build inter-chain-native dApps using the Celer Inter-chain Message SDK to gain access to efficient liquidity utilization, coherent application logic, and shared states. Users of Celer-enabled dApps will enjoy the benefits of a diverse multi-blockchain ecosystem with the simplicity of a single-transaction UX, all from a single chain.  \n**Socials:**  \n- [Twitter/X](https://twitter.com/CelerNetwork)  \n- [Telegram](https://t.me/celernetwork)  \n**External Link:** [Website](https://cbridge.celer.network/)  \n**Categories:** oracles-bridges  \n\n---\n\n## CertiK\n**Description:**  \nCertiK is a leading blockchain security firm, offering end-to-end security solutions for the blockchain and Web3 space to safeguard projects and enhance trust.  \n**Socials:**  \n- [Twitter/X](https://x.com/CertiK)  \n**External Links:**  \n- [Skynet](https://skynet.certik.com/)  \n- [Website](https://www.certik.com/)  \n**Categories:** gc  \n\n---\n\n## Chain Light\n**External Link:** [Website](https://chainlight.io)  \n**Categories:** others\n\n---\n\n## Tatum  \n**Description:** The fastest way to build, test, and run blockchain apps! Tatum makes blockchain app development accessible, supporting over 40+ blockchains.  \n**Socials:** [Twitter/X](https://twitter.com/tatum_io), [Discord](https://discord.com/invite/tatum)  \n**External Link:** [tatum.io](https://tatum.io/)  \n**Categories:** Tools-Infrastructure, SDKs-Libraries  \n\n---\n\n## The Choices  \n**Description:** A decentralized learning platform leveraging AI, blockchain, and gamification to revolutionize skill acquisition.  \n**Socials:** [Twitter/X](https://x.com/thechoicesio)  \n**External Link:** [thechoices.io](https://www.thechoices.io)  \n**Categories:** Others, Gaming  \n\n---\n\n## The Combination of Jade RWA and Jade NFT  \n**Description:** Digitizing jadeite assets using blockchain to create a secure and transparent investment platform.  \n**External Link:** [ynhoc.com](https://www.ynhoc.com)  \n**Categories:** RWA  \n\n---\n\n## Thrust  \n**Description:** A Web3 gaming incubator focused on building the Klaytn gaming ecosystem through Klaytn Games and a gaming DAO.  \n**Socials:** [Twitter/X](https://twitter.com/officialPlayOne), [Telegram](https://t.me/playonegames_EN)  \n**External Link:** [playone.games](https://www.playone.games/)  \n**Categories:** Gaming  \n\n---\n\n## TokenPocket  \n**Description:** A multi-chain self-custodial wallet supporting both EVM and non-EVM networks, providing decentralized trading and Web3 connectivity.  \n**Socials:** [Twitter/X](https://twitter.com/TokenPocket_TP), [Telegram](https://t.me/tokenPocket_en), [Discord](https://discord.com/invite/NKPM8TXFQk)  \n**External Link:** [tokenpocket.pro](https://www.tokenpocket.pro/en)  \n**Categories:** Wallets  \n\n---\n\n## Tokeny  \n**Description:** A compliance-focused platform for issuing, managing, and distributing blockchain-based assets.  \n**Socials:** [Twitter/X](https://twitter.com/TokenySolutions), [Facebook](https://www.facebook.com/TokenySolutions/), [LinkedIn](https://www.linkedin.com/company/tokeny)  \n**External Link:** [tokeny.com](https://tokeny.com/)  \n**Categories:** RWA  \n\n---\n\n## Tokocrypto  \n**Description:** Indonesia’s leading crypto exchange, partnered with Binance for enhanced security and liquidity.  \n**Socials:** [Twitter/X](https://twitter.com/TokoCrypto), [Telegram](https://t.me/TokocryptoOfficial), [Facebook](https://www.facebook.com/TCDXOfficial/), [LinkedIn](https://www.linkedin.com/company/tokocrypto/), [Instagram](https://www.instagram.com/tokocrypto/?hl=en)  \n**External Link:** [tokocrypto.com](https://www.tokocrypto.com/)  \n**Categories:** CEXes-Payments  \n\n---\n\n## TopGoal  \n**Description:** A football metaverse with licensed digital collectibles, GameFi, and SocialFi.  \n**Socials:** [Twitter/X](https://twitter.com/TopGoal_NFT), [Telegram](https://t.me/topgoalnft), [Discord](https://discord.com/invite/W7SbKEmXJ9), [Instagram](https://www.instagram.com/topgoalnft/)  \n**External Link:** [topgoal.io](https://topgoal.io/)  \n**Categories:** NFT  \n\n---\n\n## Transit Swap  \n**Description:** A DEX aggregator that integrates multiple public chain DEXs to offer better trading depth and efficiency.  \n**Socials:** [Twitter/X](https://twitter.com/TransitFinance)  \n**External Link:** [transit.finance](https://www.transit.finance/en/)  \n**Categories:** DEXes-DeFi  \n\n---\n\n## Treasures Club  \n**Description:** Lowering NFT market barriers through blockchain-based solutions and platforms.  \n**Socials:** [Twitter/X](https://twitter.com/_TreasuresClub)  \n**External Link:** [treasurelabs.io](https://treasurelabs.io/)  \n**Categories:** NFT  \n\n---\n\n## Trustkeys  \n**Description:** A Web3 app combining encrypted messaging, social networking, and a cryptocurrency wallet and exchange.  \n**Socials:** [Twitter/X](https://twitter.com/TrustKeysGlobal), [Telegram](https://t.me/trustkeys/)  \n**External Link:** [trustkeys.network](https://trustkeys.network/)  \n**Categories:** Wallets  \n\n---\n\n## UFOswap  \n**Description:** A yield farming platform on Klaytn that integrates NFTs to boost returns and enhance ecosystem participation.  \n**Socials:** [Twitter/X](https://twitter.com/ufoswap)  \n**External Link:** [ufoswap.fi](https://ufoswap.fi/#/)  \n**Categories:** DEXes-DeFi  \n\n---\n\n## Unmarshal  \n**Description:** Revolutionizing blockchain data indexing with AI-driven solutions to enhance Web3 innovation.  \n**External Link:** [unmarshal.io](https://unmarshal.io/)  \n\n---\n\n## Upbit Global  \n**Description:** South Korea’s largest licensed digital asset exchange, ensuring investor security with global standards compliance.  \n**Socials:** [Twitter/X](https://twitter.com/upbitglobal?lang=en), [LinkedIn](https://www.linkedin.com/company/upbit-official/), [Instagram](https://www.instagram.com/upbit.exchange/)  \n**External Link:** [sg.upbit.com](https://sg.upbit.com/home)  \n**Categories:** CEXes-Payments  \n\n---\n\n## Uppsala Security  \n**Description:** A crowdsourced blockchain threat platform offering compliance and cybersecurity solutions.  \n**Socials:** [Twitter/X](https://twitter.com/account/access)  \n**External Link:** [uppsalasecurity.com](https://uppsalasecurity.com/ko/)  \n**Categories:** Tools-Infrastructure  \n\n---\n\n## VTVL  \n**Description:** A Web3 token management platform designed to empower founders and investors.  \n**Socials:** [Twitter/X](https://twitter.com/vtvlco), [Telegram](https://t.me/+Ai3bVKuWY7U5YzFh)  \n**External Link:** [vtvl.io](https://vtvl.io/)  \n**Categories:** Tools-Infrastructure  \n\n---\n\n## Verichains/VNG  \n**Description:** A blockchain security firm trusted by high-profile clients, specializing in cryptography and Web3 security.  \n**Socials:** [Twitter/X](https://twitter.com/Verichains), [LinkedIn](https://www.linkedin.com/company/verichains/)  \n**External Link:** [verichains.io](https://www.verichains.io/)  \n**Categories:** GC, Others  \n\n---\n\n## Vircle  \n**Description:** A fintech solution creating controlled cashless commerce communities with a focus on health and well-being.  \n**Socials:** [LinkedIn](https://www.linkedin.com/company/vircle/), [Instagram](https://www.instagram.com/vircle_my/)  \n**External Link:** [partners.vircle.co.kr](https://partners.vircle.co.kr/)  \n**Categories:** NFT  \n\n---\n\n## WAME  \n**Description:** Combining AI and personal development to empower individuals through unique digital experiences.  \n**External Link:** [wame.xyz](https://www.wame.xyz/)  \n**Categories:** Others  \n\n---\n\n## WELLDONE Wallet  \n**Description:** A multi-chain wallet providing seamless asset management across different blockchain networks.  \n**Socials:** [Twitter/X](https://twitter.com/WelldoneStudio_)  \n**External Link:** [welldonestudio.io](https://welldonestudio.io/)  \n**Categories:** Wallets  \n\n---\n\n## WEMIX  \n**Description:** A blockchain gaming ecosystem by Wemade, integrating NFTs, DAOs, and DeFi for inter-game economies.  \n**Socials:** [Twitter/X](https://twitter.com/WemixNetwork), [Telegram](https://t.me/WEMIX_ANNouncement)  \n**External Link:** [wemade.com](https://www.wemade.com/)  \n**Categories:** Gaming, GC  \n\n---\n\n## Wallacy Wallet\nWallacy is a Web3 wallet offering gamified experiences, cross-chain solutions, and serving as a marketing hub for Web3 products.  \n**Socials:** [Twitter](https://twitter.com/WallacyWallet), [Telegram](https://t.me/wallacywalletglobal)  \n**Category:** Wallets  \n**External Link:** [Wallacy](https://wallacy.io/)  \n\n---\n\n## WalletConnect\nWalletConnect gives developers the tools to build user experiences that make digital ownership effortless, intuitive, and secure.  \n**Socials:** [Twitter](https://twitter.com/walletconnect/), [Telegram](https://t.me/walletconnect), [Discord](https://discord.com/invite/kdTQHQ6AFQ), [GitHub](https://github.com/WalletConnect), [YouTube](https://www.youtube.com/@walletconnectofficial), [LinkedIn](https://www.linkedin.com/company/walletconnect-inc/)  \n**Category:** SDKs & Libraries  \n**External Link:** [WalletConnect](https://walletconnect.com/)  \n\n---\n\n## WazirX\nWazirX is India's most trusted Bitcoin & cryptocurrency exchange, built by hardcore traders and blockchain believers. It aims to involve every Indian in the Blockchain revolution.  \n**Socials:** [Twitter](https://twitter.com/WazirXIndia), [Telegram](https://t.me/wazirx), [LinkedIn](https://www.linkedin.com/company/wazirx/)  \n**Category:** CEXs & Payments  \n**External Link:** [WazirX](https://wazirx.com/)  \n\n---\n\n## Web3Auth\nSimplifying user onboarding with scalable, secure, non-custodial wallet management.  \n**Socials:** [Twitter](https://twitter.com/web3auth), [Discord](https://discord.com/invite/web3auth), [GitHub](https://github.com/web3auth/web3auth-web), [YouTube](https://www.youtube.com/c/web3auth), [LinkedIn](https://www.linkedin.com/company/web3auth)  \n**Category:** SDKs & Libraries  \n**External Link:** [Web3Auth](https://web3auth.io/)  \n\n---\n\n## Whitebit\nFounded in 2018, WhiteBIT is a secure trading platform providing an institutional-grade experience for both professional and novice traders.  \n**Socials:** [Twitter](https://twitter.com/WhiteBit), [Telegram](https://t.me/White_Bit), [Discord](https://discord.com/invite/3PmCtQfSqe)  \n**Category:** CEXs & Payments  \n**External Link:** [Whitebit](https://whitebit.com/)  \n\n---\n\n## Witnet\nWitnet brings real power to smart contracts as a next-generation decentralized oracle leveraging cryptoeconomic techniques.  \n**Socials:** [Twitter](https://twitter.com/witnet_io), [Telegram](https://t.me/witnetio)  \n**Category:** Oracles & Bridges  \n**External Link:** [Witnet](https://witnet.io/)  \n\n---\n\n## Capybara\nThe 1st Launchpad & Decentralized Exchange on Kaia Chain, offering hyper-capital-efficient, transparent, and community-first trading.  \n**Socials:** [Twitter](https://twitter.com/CapybaraDEX), [Telegram](https://t.me/CapybaraDEX)  \n**Category:** DEXs & DeFi  \n**External Link:** [Capybara Exchange](https://www.capybara.exchange/)  \n\n---\n\n## WordBooX\nWordBooX is a Telegram mini-app that makes language learning accessible and engaging using blockchain technology. Players earn tokens by completing tasks and inviting friends.  \n**Socials:** [Twitter](https://x.com/WordBooX)  \n**Category:** Gaming  \n**External Link:** [WordBooX](https://t.me/WordBooX)  \n\n---\n\n## Wormhole\nWormhole allows developers to build decentralized applications spanning multiple blockchains.  \n**Socials:** [Twitter](https://twitter.com/wormholecrypto), [Telegram](https://t.me/wormholecrypto)  \n**Category:** Oracles & Bridges  \n**External Link:** [Wormhole](https://wormhole.com/)  \n\n---\n\n## X2E All\nThe X2E All platform offers comprehensive information on NFT gaming, blockchain gaming, and DeFi.  \n**Socials:** [Twitter](https://x.com/x2eall), [Telegram](https://t.me/p2eallnews), [Discord](https://discord.com/invite/rffB9pjcqR), [YouTube](https://www.youtube.com/channel/UC5jq-gpBjVk3_WmjCtVHvwA)  \n**Category:** Gaming  \n**External Link:** [X2E All](https://x2eall.com/ranking/game/list)  \n\n---\n\n## X2Y2\nUnlock the full potential of your NFTs with X2Y2: trade, buy, loan, and more.  \n**Socials:** [Twitter](https://twitter.com/the_x2y2), [Discord](https://discord.com/invite/x2y2-io)  \n**Category:** Marketplaces  \n**External Link:** [X2Y2](https://x2y2.io/)  \n\n---\n\n## X2Y2 Pro\nUnlock the full potential of your NFTs with X2Y2 Pro: trade, buy, loan, and more.  \n**Socials:** [Twitter](https://twitter.com/the_x2y2), [Discord](https://discord.com/invite/x2y2-io)  \n**Category:** NFT  \n**External Link:** [X2Y2 Pro](https://pro.x2y2.io/)  \n\n---\n\n## XDAO\nXDAO is a multichain DAO builder for jointly managing crypto assets and DeFi projects.  \n**Socials:** [Twitter](https://twitter.com/xdaoapp), [Telegram](https://t.me/xdaoapp), [Discord](https://discord.com/invite/xdaoapp)  \n**Category:** DApps  \n**External Link:** [XDAO](https://www.xdao.app/)  \n\n---\n\n## XT.com\nXT.COM is a global blockchain ecosystem and cryptocurrency exchange driving Web3 technology innovation.  \n**Socials:** [Telegram](https://t.me/XTsupport_EN), [Discord](https://discord.com/invite/tcx84qXNW3), [LinkedIn](https://www.linkedin.com/company/xt-com-exchange/), [Instagram](https://www.instagram.com/xt.com_exchange/)  \n**Category:** CEXs & Payments  \n**External Link:** [XT.com](https://www.xt.com/en)  \n\n---\n\n## XY Finance\nXY Finance incorporates Web3, DeFi, and GameFi products, offering efficient liquidity solutions.  \n**Socials:** [Twitter](https://twitter.com/xyfinance)  \n**Category:** DEXs & DeFi  \n**External Link:** [XY Finance](https://xy.finance/)  \n\n---\n\n## Xangle\nXangle provides crypto data, research, and solutions for Web3 stakeholders.  \n**Socials:** [Twitter](https://twitter.com/Xangle_official), [Telegram](https://t.me/xangle_disclosure)  \n**Category:** Tools & Infrastructure  \n**External Link:** [Xangle](https://xangle.io/en/)  \n\n---\n\n## Xclusive\nXclusive is a multi-chain NFT marketplace.  \n**Socials:** [Twitter](https://twitter.com/Xclusive_market), [Discord](https://discord.com/invite/zpdwQEXJa2)  \n**Category:** NFT  \n**External Link:** [Xclusive](https://xclusive.market/)  \n\n---\n\n## Xellar\nXellar is an embedded social login and MPC-AA provider simplifying Web3 onboarding.  \n**Socials:** [Twitter](https://x.com/xellarworld)  \n**Category:** Wallets  \n**External Link:** [Xellar](https://Xellar.co)  \n\n---\n\n## dRPC\ndRPC is a decentralized RPC network enhancing security, reliability, and cost-efficiency for Web3 companies.  \n**Socials:** [Twitter](https://twitter.com/drpcorg)  \n**Category:** Tools & Infrastructure, RPCs  \n**External Link:** [dRPC](https://drpc.org/)  \n\n---\n\n## iZUMi  \n\n**Description:**  \nKaiaSwap is a leading CLAMM DEX and Omni-IDO platform, powered by Klaytn Foundation and iZUMi Finance.  \n\n**Socials:**  \n- [Twitter/X](https://x.com/KaiaSwap)  \n- [Discord](https://discord.com/invite/8CcKCAaD9n)  \n\n**External Link:**  \n[KaiaSwap Website](https://kaiaswap.org/home)  \n\n**Categories:**  \ndexes-defi\n\n---\n\n\n",
    "Current Website Url is https://www.kaia.io/contact-us. # Contact Us\n\n## Let's get something started\n\n### Partnership enquiries\nBusiness development and partnership inquiries can be reached at partnership@kaia.io\n\n### Marketing enquiries\nJoint marketing initiatives and event enquiries can be reached at marketing@kaia.io\n\n### Media enquiries\nMedia and press enquiries can be reached at media@kaia.io\n\n## Need some help?\n\n### General Information\nFor any other general information you can drop an email to contact@kaia.io\n\n### Developer support\nJoin our developer forum to get help from fellow Kaia developers.  \n[Developer Forum](https://devforum.kaia.io)\n\n### Community support\nOur mods and community will be more than happy to answer your questions on Discord.  \n[Discord](https://discord.gg/kaiachain)\n\n## Explore our regional and service accounts\n\n- **Twitter**\n  - [KAia en](https://x.com/kaiachain)\n  - [KAia Intern](https://x.com/kaiachainintern)\n  - [KAIA KR](https://x.com/kaiachain_kr)\n  - [KAIA Devintern](https://x.com/kaia_dev_intern)\n  - [KAIA JP](https://x.com/kaiachain_jp)\n  - [playonkaia](https://x.com/playonkaia)\n  - [KAIA vn](https://x.com/kaiachain_vn)\n  - [buildonkaia](https://x.com/buildonkaia)\n\n- **Facebook**\n  - [KAia en](https://www.facebook.com)\n  - [KAia VN](https://www.facebook.com)\n  - [KAIA Developers](https://www.facebook.com)\n\n- **Telegram**\n  - [KAia en](https://t.me/kaiachain_en)\n  - [KAia JP](https://t.me/kaiachain_jp)\n\n- **Discord**  \n  [LinkedIn](https://discord.gg/kaiachain)\n\n- **LinkedIn**  \n  [LinkedIn](https://linkedin.com/company/kaiachain)\n\n- **Reddit**  \n  [Reddit](https://reddit.com/r/kaiachain)\n\n- **Medium**  \n  [Medium](https://medium.com/kaiachain)\n\n- **Link Tree**\n  [Link Tree](https://linktr.ee/kaiachain)",
   

    "KAIA DOCS",
    "Current Website Url is https://docs.kaia.io/build. # Welcome\n\nWelcome to the \"Build\" section of Kaia. This section is for developers interested in using the Kaia system for decentralized applications. Here, you can find several tutorials for deploying different types of smart contracts, links for all the available tools and resources.\n",
    "Current Website Url is https://docs.kaia.io/build/get-started/account. # Account Basics\n\n**`WARNING`**: Remember your password. If you lose the password of your account, you will not be able to access that account. **There is no** _**forgot my password**_ **option here. Never forget it.**\n\nKaia provides two handy command-line tools, `ken` and `JavaScript console`, for developers to manage accounts. Note that exporting your private key in an unencrypted format is NOT supported.\n\n## ken <a id=\"ken\"></a>\n\nThe Kaia Endpoint Node binary `ken` provides account management via the `account` command. The command `account` lets you create new accounts, lists all existing accounts, imports a private key into a new account, migrates to the newest key format, and changes your password.\n\n### Usage <a id=\"usage\"></a>\n\n```bash\n$ ken account <command> [options...] [arguments...]\n```\n\n**Commands**\n\n```bash\n$ ken account -help\n...\nCOMMANDS:\n     list    Print summary of existing accounts\n     new     Create a new account\n     update  Update an existing account\n     import  Import a private key into a new account\n...\n```\n\nYou can get info about subcommands by `ken account <command> --help`.\n\n```text\n$ ken account list --help\nlist [command options] [arguments...]\n\nPrint a short summary of all accounts\n\nKAIA OPTIONS:\n  --dbtype value                        Blockchain storage database type (\"leveldb\", \"badger\") (default: \"leveldb\")\n  --datadir \"/Users/ethan/Library/KEN\"  Data directory for the databases and keystore\n  --keystore                            Directory for the keystore (default = inside the datadir)\n\nDATABASE OPTIONS:\n  --db.no-partitioning  Disable partitioned databases for persistent storage\n```\n\n### Data Directory <a id=\"data-directory\"></a>\n\nKeystore files are stored under `<DATADIR>/keystore`. You can specify the data directory as below. It is highly recommended to execute `ken account` command with `--datadir` option. Make the data directory point to the `DATA_DIR` set in the `kend.conf` to seamlessly share the accounts with your Endpoint Node.\n\n```bash\n$ ken account new --datadir <DATADIR>\n$ ken account new --datadir \"~/kend_home\"\n```\n\nIf you do not specify the data directory, the default location is as follows.\n\n* Mac: `~/Library/KEN`\n* Linux: `~/.ken`\n\n## JavaScript Console <a id=\"javascript-console\"></a>\n\nTo connect to the JavaScript console, an EN must be in running status. For more information, see [Launching an EN](../../../nodes/endpoint-node/install-endpoint-nodes#startup-the-en). Start an EN and attach to the console as follows.\n\n### Usage <a id=\"usage\"></a>\n\n```bash\n$ kend start\nStarting kend: OK\n\n$ ken attach --datadir ~/kend_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kend_home\n modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n\n>\n```\n\n**Commands**\n\nType `personal` or `kaia` to get the list of available functions. In this tutorial, we are going to visit the following functions.\n\n```bash\n> personal.newAccount()\n> personal.importRawKey()\n> personal.unlockAccount()\n> kaia.accounts\n> kaia.getBalance()\n```\n\n### Data Directory <a id=\"data-directory\"></a>\n\nWhen you create an account, the keystore file is stored under `<DATADIR>/keystore`. The `<DATADIR>` is the `DATA_DIR` set in the `kend.conf`. If you follow the quick start guide with the given example, it must be `~/kend_home`.",
    "Current Website Url is https://docs.kaia.io/build/get-started/account/creating-accounts. # Create Accounts\n\n## Creating a New Account <a id=\"creating-a-new-account\"></a>\n\nThis will create a new account and print the address on the screen. A keystore file is created under the data directory.\n\n**Kaia Keystore File**\n\nWhen you create an account, a keystore file is created. The keystore file is an encrypted version of your unique Kaia private key that you will use to sign your transactions. The keystore file name has the following format:\n\n* `UTC--<created_at UTC ISO8601>-<address hex>`\n\nIt is safe to transfer the entire directory or the individual keystore file therein between Kaia nodes. Note that in case you are adding keys to your node from a different node, the order of accounts may change. So make sure you do not rely on the index in your scripts or code snippets.\n\n### ken <a id=\"ken\"></a>\n\n```bash\n$ ken account new --datadir <DATADIR>\n$ ken account new --password <passwordfile> --datadir <DATADIR>\n$ ken account new --password <(echo $mypassword) --datadir <DATADIR>\n```\n\n**`WARNING`**: Note that using a password file is meant for testing only; it is a bad idea to save your password in a file or expose it in any other way. If you use the password flag with a password file, best to make sure the file is not readable or even listable for anyone but you. You achieve this with:\n\n```bash\n$ touch /path/to/password\n$ chmod 700 /path/to/password\n$ cat > /path/to/password\nI type my pass here\n^D\n```\n\n### JavaScript Console <a id=\"javascript-console\"></a>\n\nOn the console, you can call the following function to create an account:\n\n```javascript\n> personal.newAccount(\"passphrase\")\n```\n\nThe account is saved in an encrypted format. You **must** remember this passphrase to unlock your account in the future.\n\n## Importing an Account <a id=\"importing-an-account\"></a>\n\nYou can import an account using a keyfile. The keyfile is assumed to contain an unencrypted private key as canonical EC raw bytes encoded into hex. In simpler terms, it is a private key in plain text without the leading `0x`.\n\nThis imports an unencrypted private key from the given keyfile, creates a new account, generates a keystore file under the data directory, and prints the address in the console. You must remember the passphrase to unlock your account in the future.\n\n**NOTE**: If you can directly copy your keystore files to another Kaia instance, this import/export mechanism is not needed.\n\n### ken <a id=\"ken-1\"></a>\n\n```bash\n$ ken account import --datadir <datadir> <keyfile>\n$ ken account import --password <passwordfile> --datadir <datadir> <keyfile>\n```\n\n### JavaScript Console <a id=\"javascript-console-1\"></a>\n\n```bash\n> personal.importRawKey('{private key}', 'mypassword')\n\"0xfa415bb3e6231f488ff39eb2897db0ef3636dd32\"​\n\n// Using a Kaia wallet key\n> personal.importRawKey('{private key}0x000x{address}', 'mypassword')\n\"0xfa415bb3e6231f488ff39eb2897db0ef3636dd32\"\n```",
    "Current Website Url is https://docs.kaia.io/build/get-started/account/managing-accounts. # Manage Accounts\n\n## List Your Accounts <a id=\"list-your-accounts\"></a>\n\nThis will return the list of all accounts created under the data directory.\n\n### ken <a id=\"ken\"></a>\n\nFrom the command line, call the CLI with:\n\n```bash\n$ ken account list --datadir <DATADIR>\n$ ken account list --datadir ~/kend_home\nAccount #0: {bfc22a57999459b0c2ce6337deb9287e7a970e02} keystore:///Users/username/kend_home/keystore/UTC--2019-03-26T07-02-58.524962000Z--bfc22a57999459b0c2ce6337deb9287e7a970e02\nAccount #1: {47bd2e9565cbe1789454718d6cf1778d7ea557aa} keystore:///Users/username/kend_home/keystore/UTC--2019-03-26T07-04-44.840061000Z--47bd2e9565cbe1789454718d6cf1778d7ea557aa\n```\n\n**NOTE**: This order of returned account list can change if you copy keystore files from other nodes or remove the files. Therefore, make sure you either do not rely on the index or make sure if you copy or remove keystore files you check and update your account indexes in your scripts.\n\n### JavaScript Console <a id=\"javascript-console\"></a>\n\nWhen using the console:\n\n```javascript\n> kaia.accounts\n[\"bfc22a57999459b0c2ce6337deb9287e7a970e02\", \"47bd2e9565cbe1789454718d6cf1778d7ea557aa\"]\n```\n\n## Unlock Accounts <a id=\"unlock-accounts\"></a>\n\nIf you want to use an account non-interactively, you need to unlock it.\n\n### ken <a id=\"ken\"></a>\n\nYou can unlock accounts and start the EN on the command line with the `--unlock \"{address},{address}\"` option which takes a comma-separated list of accounts \\(in hex or index\\) as an argument so you can unlock the accounts programmatically for one session. This is useful if you want to use your account from dApps via RPC. `--unlock` will unlock the first account in the list. This is useful when you created your account programmatically, you do not need to know the actual account to unlock it.\n\nCreate an account and start a node with the account unlocked:\n\n```bash\n$ ken account new --password <(echo this is not secret) --datadir <DATADIR>\n$ ken --password <(echo \"this is not secret\") --unlock primary --datadir <DATADIR> --rpccorsdomain localhost --verbosity 6 2>> log.log\n```\n\nIf you want to start a node with a specific account unlocked, you can use an address or an index which refers to the address position in the account list \\(and corresponds to the order of creation\\).\n\n```bash\n$ ken --unlock \"0\" --datadir <DATADIR>\n$ ken --unlock \"2\" --datadir <DATADIR>\n$ ken --unlock \"bfc22a57999459b0c2ce6337deb9287e7a970e02\" --datadir <DATADIR>\n```\n\nThe command line allows you to unlock multiple accounts. In this case, the argument to unlock is a comma-separated list of account addresses or indexes.\n\n```bash\n$ ken --unlock \"0x407d73d8a49eeb85d32cf465507dd71d507100c1,0,5,e470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32\" --datadir <DATADIR>\n```\n\nIf this construction is used non-interactively, your password file will need to contain the respective passwords for the accounts in question, one per line.\n\n### JavaScript Console <a id=\"javascript-console\"></a>\n\nOn the console you can also unlock accounts \\(one at a time\\) for a duration \\(in seconds\\).\n\n```javascript\n> personal.unlockAccount(address, \"password\", 300)\n```\n\nNote that we do NOT recommend using the password argument here, since the console history is logged, so you may compromise your account. You have been warned.\n\n## Check Account Balance <a id=\"check-account-balance\"></a>\n\n### ken <a id=\"ken\"></a>\n\nn/a\n\n### JavaScript Console <a id=\"javascript-console\"></a>\n\nTo check your account balance:\n\n```javascript\n> kaia.fromPeb(kaia.getBalance(\"{account}\"), \"KAIA\")\n6.5\n```\n\nPrint all balances with a JavaScript function:\n\n```javascript\nfunction checkAllBalances() {\n    var totalBal = 0;\n    for (var acctNum in kaia.accounts) {\n        var acct = kaia.accounts[acctNum];\n\n        var acctBal = kaia.fromPeb(kaia.getBalance(acct), \"KAIA\");\n        totalBal += parseFloat(acctBal);\n\n        console.log(\"kaia.accounts[\" + acctNum + \"]: \\t\" + acct + \" \\tbalance: \" + acctBal + \"KAIA\");\n\n    }\n\n    console.log(\"Total balance: \" + totalBal + \" KAIA\");\n};\n```\n\nThat can then be executed with:\n\n```javascript\n> checkAllBalances();\nkaia.accounts[0]: 0xd1ade25ccd3d550a7eb532ac759cac7be09c2719  balance: 63.11848 KAIA\nkaia.accounts[1]: 0xda65665fc30803cb1fb7e6d86691e20b1826dee0  balance: 0 KAIA\nkaia.accounts[2]: 0xe470b1a7d2c9c5c6f03bbaa8fa20db6d404a0c32  balance: 1 KAIA\nkaia.accounts[3]: 0xf4dd5c3794f1fd0cdc0327a83aa472609c806e99  balance: 6 KAIA\n```\n\nSince this function will disappear after restarting `ken`, it can be helpful to store commonly used functions to be called later.\n\nFirst, save the `checkAllBalances()` function definition to a file on your computer. For example, `/Users/username/klayload.js`. Then load the file from the interactive console:\n\n```javascript\n> loadScript(\"/Users/username/klayload.js\")\ntrue\n```\n\nThe file will modify your JavaScript environment as if you have typed the commands manually. Feel free to experiment!\n\n",
    "Current Website Url is https://docs.kaia.io/build/get-started/before-you-start. # Before You Start\n\n**Kaia Networks**\n\n* Kairos testnet\n* Mainnet\n\n**Endpoint Node**\n\n* Your [Endpoint Node](../../nodes/endpoint-node/endpoint-node) is needed to connect to the Kaia network and to issue an API call or send a transaction.\n* `ken` is a Kaia Endpoint Node binary. `ken` exposes two interfaces, a [command-line interface](../../nodes/endpoint-node/ken-cli-commands) and the [JSON-RPC APIs](../../../references/json-rpc/klay/account-created). `ken` runs on Linux and MacOS.\n* `ken` CLI comes with several utility and node management functions.\n\n**Smart Contract Development**\n\n* [Kaia Plugin for Remix](https://ide.kaia.io) - Kaia Plugin for Remix, a browser-based compiler and IDE.\n* [Truffle](https://github.com/trufflesuite/truffle) - An open-source tool for developing smart contracts in Solidity.\n* [Hardhat](https://hardhat.org/hardhat-runner/docs/getting-started) - A development environment for smart contracts and dApps.\n* [Foundry](https://book.getfoundry.sh/) - Foundry is a smart contract development toolchain.\n* [Thirdweb](https://portal.thirdweb.com/) - Thirdweb is a complete web3 development framework that provides services to build, manage, and analyze web3 applications.\n\n**Kaia SDKs**\n\n* [caver-js](../../references/sdk/caver-js/caver-js) : A JavaScript library that implements the Kaia JSON-RPC APIs.\n* [caver-java](../../references/sdk/caver-java/caver-java) : A Java library that implements the Kaia JSON-RPC APIs.\n\n**Kaia Toolkits**\n\n* [Kaiascope](https://kaiascope.com/) - A block and transaction explorer.\n* [Kaia Wallet](https://www.kaiawallet.io/) - A browser extension wallet for the Kaia Network.\n* [Kaia Contracts Wizard](https://wizard.klaytn.foundation/) - An interactive generator to bootstrap your smart contract and learn about Kaia Contracts.\n",
    "Current Website Url is https://docs.kaia.io/build/get-started. # Get Started\n\nTry and get familiar with Kaia. This chapter is the starting point of your journey to Kaia dApps.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/get-started/getting-kaia. # Get KAIA\n\n## Kairos Testnet and Faucet <a id=\"kairos-testnet-and-faucet\"></a>\n\nThe **testnet KAIA** faucet runs on the Kairos network. The faucet can be accessed from the [Kairos Kaia Faucet](https://faucet.kaia.io). To receive testnet KAIA, you should have a valid Kaia account.\n\n* Load your account into the wallet using your private key or keystore file. Testnet KAIA will be sent to the loaded account. \n* Clicking `Run Faucet` button will send you 50 testnet KAIA and update your balance. Note that you can run the faucet for each account once every 24 hours.\n\n## KAIA Exchange List <a id=\"kaia-exchange-list\"></a>\n\nKAIA is listed on various exchanges.  Please find the list of KAIA exchanges through the following links.\n\n- [KAIA exchanges listed at CoinGecko](https://www.coingecko.com/en/coins/klay#markets)\n- [KAIA exchanges listed at CoinMarketCap](https://coinmarketcap.com/currencies/klaytn/markets/)\n\n",
    "Current Website Url is https://docs.kaia.io/build/get-started/hardhat. # Deploy your first smart contract using Hardhat\n\n![](/img/banners/kaia-hardhat.png)\n\n## Introduction\n\nThis section will guide you through deploying a Soulbound Token to the Kaia Kairos Network using [Hardhat](https://hardhat.org/). \n\nHardhat is a smart-contract development environment that will help you:\n* Develop and compile smart contracts.\n* Debug, test, and deploy smart contracts and dApps.\n\nSoul-bound tokens(SBTs) are non-transferable NFTs. Meaning once acquired, they cannot be sold or transferred to another user. To learn more about SBTs, how it works and their use case, you can check out this [reference article](https://vitalik.eth.limo/general/2022/01/26/soulbound.html) published by Vitalik Buterin.\n\nBy the end of this guide you will be able to: \n* Set up a Hardhat project on Kaia.\n* Create a simple soul-bound token.\n* Compile your smart contract using Hardhat.\n* Test, deploy, and interact with your smart contract using Hardhat.\n* Explore Hardhat forking feature.\n\n\n## Pre-requisites\n\nTo follow this tutorial, the following are the prerequisites:\n\n* Code editor: a source-code editor such [VS Code](https://code.visualstudio.com/download).\n* [Metamask](../tutorials/connecting-metamaskx#install-metamask): used to deploy the contracts, sign transactions and interact with the contracts.\n* RPC Endpoint: you can get this from one of the supported [Endpoint Providers](../../references/public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n* [NodeJS and NPM](https://nodejs.org/en/)\n\n## Setting Up Your Development Environment\n\nTo make use of hardhat, we need to set up our development environment and get hardhat installed. Let's do this in the following steps:\n\n**Step 1**: Create a project directory\n\n```bash\nmkdir soulbound-tokens\ncd soulbound-tokens\n```\n\n**Step 2**: Initialize an npm project\n\nPaste this command in your terminal to create a package.json file\n\n```bash\nnpm init -y\n```\n\n**Step 3**: Install hardhat and other dependencies:\n\n* Paste the code below in your terminal to install hardhat\n\n```bash\nnpm install --save-dev hardhat\n```\n\n* Paste the code below to install other dependencies\n\n```bash\nnpm install dotenv @kaiachain/contracts\n```\n\n> Note: This installs other dependencies needed for this project ranging from `hardhat`, `klaytn/contract`, `dotenv` et al. \n\n\n**Step 4**: Initialise a hardhat project:\n\nRun the command below to initiate an hardhat project\n\n```bash\nnpx hardhat\n```\nFor this guide, you'll be selecting a typescript project as seen below:\n\n![](/img/build/get-started/hardhat-init.png) \n\n![](/img/build/get-started/hardhat-init-ii.png)\n\n> Note: While initializing the project, you will get a prompt to install `hardhat-toolbox` plugin. The plugin bundles all the commonly used packages and Hardhat plugins recommended to start developing with Hardhat.\n\nAfter initializing a hardhat project, your current directory should include:\n\n**contracts/** – this folder contains smart contract code.\n\n**ignition/modules/** – this folder contains code that deploys your contracts on the blockchain network.\n\n**test/** – this folder contains all unit tests that test your smart contract.\n\n**hardhat.config.js** – this file contains configurations important for the work of Hardhat and the deployment of the soul-bound token.\n\n**Step 5**: Create a .env file\n\nNow create your .env file in the project folder. This file helps us load environment variables from an .env file into process.env. \n\n* Paste this command in your terminal to create a .env file\n\n```bash\ntouch .env\n```\n\n* After creating our file, let's configure our .env file to look like this:\n\n```js\n KAIROS_TESTNET_URL= \"Your Kairos RPC link\"\n PRIVATE_KEY= \"your private key copied from MetaMask wallet\"\n```\n\n> Note: You can also choose to use the [configuration variable](https://hardhat.org/hardhat-runner/docs/guides/configuration-variables) functionality provided by hardhat to configure variables that shouldn't be included in the code repository.\n\n**Step 6**: Setup Hardhat Configs\n\nModify your `hardhat.config.js` with the following configurations:\n\n```js\nrequire(\"@nomicfoundation/hardhat-toolbox\");\nrequire('dotenv').config()\n\n\nmodule.exports = {\n  solidity: \"0.8.17\",\n  networks: {\n    kairos: {\n      url: process.env.KAIROS_TESTNET_URL || \"\",\n      gasPrice: 250000000000,\n      accounts:\n        process.env.PRIVATE_KEY !== undefined ? [process.env.PRIVATE_KEY] : [],\n    }\n  }\n};\n\n```\n\nNow that we have our development environment all set, let's get into writing our soul-bound token  smart contract.\n\n## Creating SBT Smart Contract\n\nIn this section, you will use the [Kaia Contracts](https://github.com/kaiachain/kaia-contracts): a library for secure smart contract development built on a solid foundation of community-vetted code. It is a fork of open zeppelin contracts. \n\n> Note: You already installed this library in **step 3** of the `Setting Development Environment` section.\n\n**Step 1**: Select the contracts folder in the Explorer pane, click the New File button and create a new file named `SBT.sol`\n\n**Step 2**: Open the file and paste the following code:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@kaiachain/contracts/KIP/token/KIP17/KIP17.sol\";\nimport \"@kaiachain/contracts/utils/Counters.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\n\ncontract SoulBoundToken is KIP17, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    constructor() KIP17(\"SoulBoundToken\", \"SBT\") {}\n\n    function safeMint(address to) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n\n\n    function _beforeTokenTransfer(address from, address to, uint256) pure override internal {\n        require(from == address(0) || to == address(0), \"This a Soulbound token. It cannot be transferred.\");\n    }\n\n    function _burn(uint256 tokenId) internal override(KIP17) {\n        super._burn(tokenId);\n    }\n}\n```\n\n**Code Walkthrough**\n\nThis is your smart contract. **line 1** shows that Hardhat uses the Solidity version 0.8.7 or greater. Other than that, it imports KIP17.sol and other supporting contracts. From **lines 6-12**, a smart contract that inherits KIP17 is been created. Also, the token name and symbol was passed in the constructor.\n\nAs you can see in the code above, the token name and symbol have been set to **SoulBoundToken** and **SBT** respectively. You can change the token name and symbol to anything you desire.\n\nOne major thing in this contract is that it prohibits token transfer, which makes the issued tokens soulbond.\n\n## Testing SBT Smart Contract\n\nIn this section, we would be testing some of our contract functionalities.\n\n**Step 1**: In the Explorer pane, select the test folder and click the New File button to create a new file named `sbtTest.js`\n\n**Step 2**: Copy the code below in the `sbtTest.js` file.\n\n```js\n// This is an example test file. Hardhat will run every *.js file in `test/`,\n// so feel free to add new ones.\n\n// Hardhat tests are normally written with Mocha and Chai.\n\n// We import Chai to use its asserting functions here.\nconst { expect } = require(\"chai\");\n\n// We use `loadFixture` to share common setups (or fixtures) between tests.\n// Using this simplifies your tests and makes them run faster, by taking\n// advantage of Hardhat Network's snapshot functionality.\nconst { loadFixture } = require(\"@nomicfoundation/hardhat-network-helpers\");\n\n// `describe` is a Mocha function that allows you to organize your tests.\n// Having your tests organized makes debugging them easier. All Mocha\n// functions are available in the global scope.\n//\n// `describe` receives the name of a section of your test suite, and a\n// callback. The callback must define the tests of that section. This callback\n// can't be an async function.\ndescribe(\"Token contract\", function () {\n  // We define a fixture to reuse the same setup in every test. We use\n  // loadFixture to run this setup once, snapshot that state, and reset Hardhat\n  // Network to that snapshot in every test.\n  async function deployTokenFixture() {\n    // Get the ContractFactory and Signers here.\n    const [owner, addr1, addr2] = await ethers.getSigners();\n\n    // To deploy our contract, we just have to call ethers.deployContract() and call the \n    // waitForDeployment() method, which happens onces its transaction has been\n    // mined.\n\n    const sbtContract = await ethers.deployContract(\"SoulBoundToken\");\n\n    await sbtContract.waitForDeployment();\n\n    // Fixtures can return anything you consider useful for your tests\n    return { sbtContract, owner, addr1, addr2 };\n  }\n\n  // You can nest describe calls to create subsections.\n  describe(\"Deployment\", function () {\n    // `it` is another Mocha function. This is the one you use to define each\n    // of your tests. It receives the test name, and a callback function.\n    //\n    // If the callback function is async, Mocha will `await` it.\n    it(\"Should mint SBT to owner\", async function () {\n      const { sbtContract, owner } = await loadFixture(deployTokenFixture);\n      const safemint = await sbtContract.safeMint(owner.address);\n      expect(await sbtContract.ownerOf(0)).to.equal(owner.address);\n    });\n  });\n\n  describe(\"Transactions\", function () {\n    it(\"Should prohibit token transfer using transferFrom\", async function () {\n      const { sbtContract, owner, addr1 } = await loadFixture(\n        deployTokenFixture\n      );\n\n      const safemintTx = await sbtContract.safeMint(owner.address);\n\n      // prohibit token transfer of token id (0) from owner to addr1\n      await expect(\n        sbtContract.transferFrom(owner.address, addr1.address, 0)\n      ).to.be.reverted;\n    });\n\n    it(\"Should prohibit token transfer using safeTransferFrom\", async function () {\n      const { sbtContract, owner, addr1 } = await loadFixture(\n        deployTokenFixture\n      );\n\n      const safemintTx = await sbtContract.safeMint(owner.address);\n\n      // prohibit token transfer of token id (0) from owner to addr1\n      await expect(sbtContract['safeTransferFrom(address,address,uint256)'](\n        owner.address,\n        addr1.address,\n        0 \n      )).to.be.reverted;\n    });\n  });\n})\n```\n\nIn the code you just copied, line 7 & 12 shows you imported expect from [Chai](https://www.chaijs.com/api/bdd/) and [loadFixture](https://hardhat.org/tutorial/testing-contracts#reusing-common-test-setups-with-fixtures) from hardhat-network-helpers.\n\nThe tests above check the following:\n\n* Is the owner of a particular token id the same as who it was minted to?\n* Did it prohibit transfer of tokens between accounts?\n\n**Step 3**: To run your test, run the command below:\n\n```bash\nnpx hardhat test test/sbtTest.js \n```\n\n![](/img/build/get-started/sbtTest.png)\n\nFor more in-depth guide on testing, please check [Hardhat testing](https://hardhat.org/hardhat-runner/docs/guides/test-contracts). \n\n## Deploying the smart contract\n\nScripts are JavaScript/Typescript files that help you deploy contracts to the blockchain network. In this section, you will create a script for the smart contract.\n\n**Step 1**: In the Explorer pane, select the \"scripts\" folder and click the New File button to create a new file named `sbtDeploy.js`.\n\n**Step 2**: Copy and paste the following code inside the file.\n\n> Note: input your MetaMask wallet address in the `deployerAddr` variable.\n\n```js\nconst { ethers } = require(\"hardhat\");\n\nasync function main() {\n\n  const deployerAddr = \"Your Metamask wallet address\";\n  const deployer = await ethers.getSigner(deployerAddr);\n\n  console.log(`Deploying contracts with the account: ${deployer.address}`);\n  console.log(`Account balance: ${(await deployer.provider.getBalance(deployerAddr)).toString()}`);\n\n\n  const sbtContract = await ethers.deployContract(\"SoulBoundToken\");\n  await sbtContract.waitForDeployment();\n\nconsole.log(`Congratulations! You have just successfully deployed your soul bound tokens.`);\nconsole.log(`SBT contract address is ${sbtContract.target}. You can verify on https://kairos.kaiascope.com/account/${sbtContract.target}`);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\n\n**Step 3**: In the terminal, run the following command which tells Hardhat to deploy your SBT token on the Kaia Test Network (Kairos) \n\n```bash\nnpx hardhat run ignition/modules/sbtDeploy.js --network kairos\n```\n\n![](/img/build/get-started/sbtDeploy.png)\n\n**Step 4**: Open [Kaiascope](https://kairos.kaiascope.com/) to check if the SBT token has been deployed successfully.\n\n**Step 5**: Copy and paste the deployed contract address in the search field and press Enter. You should see the recently deployed contract.\n\n![](/img/build/get-started/sbtKS.png)\n\n## Hardhat Forking\n\nHardhat provides developers the functionality of simulating the mainnet (at any given block) to a local development network. One of the major benefit of this feature is that it enables developers to interact with deployed contract and also write test for complex cases.  \n \nFor this feature to work effectively, you need to connect to an archive node. You can read more about this feature [here](https://hardhat.org/hardhat-network/docs/guides/forking-other-networks#forking-other-networks) \n\n### Forking Mainnet\n\nNow that we have our Hardhat project set up let’s fork the Kaia Mainnet using Hardhat.  Open your terminal and run this command\n\n```bash\nnpx hardhat node --fork <YOUR ARCHIVE NODE URL>\n\nnpx hardhat node --fork https://archive-en.node.kaia.io\n```\n\nYou can also configure `hardhat.config.js` - Hardhat Network to always do this:\n\n```\nnetworks: {\n  hardhat: {\n    forking: {\n      url: \"<YOUR ARCHIVE NODE URL>\",\n    }\n  }\n}\n```\n\n**Output**\n\n![](/img/build/get-started/hardhat-fork.png)\n\nAfter successfully running this command, your terminal looks like the above image.  You'll have 20 development accounts that are pre-funded with 10,000 test tokens.\n\n\nThe forked chain's RPC server is listening at `http://127.0.0.1:8545/`.  You can verify the forked network by querying the latest block number. Let's try to make a cURL to the RPC to get the block number.  Open a new terminal window and use the following command: \n\n```bash\ncurl --data '{\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1,\"jsonrpc\":\"2.0\"}' -H \"Content-Type: application/json\" -X POST localhost:8545 \n```\n\n**Output**\n\n![](/img/build/get-started/hardhat-fork-bn.png)\n\nThe output is an hexadecimal as seen above. To get the block number from the hex, convert the hex to a decimal using this [tool](https://www.rapidtables.com/convert/number/hex-to-decimal.html). You should get the latest block number from the time you forked the network. You can confirm the block number on [kaiascope](https://kaiascope.com/).\n\n### Forking at a Block\n\nWith hardhat, you can fork the mainnet at a particular block.  In that case, let’s fork the chain at block number `105701850`.\n\n```bash\nnpx hardhat node --fork <YOUR ARCHIVE NODE URL> --fork-block-number 105701850\n\nnpx hardhat node --fork https://archive-en.node.kaia.io --fork-block-number 105701850\n```\n\nTo confirm the forked chain at the stated block, open a new terminal window and use the following command: \n\n```bash\ncurl --data '{\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1,\"jsonrpc\":\"2.0\"}' -H \"Content-Type: application/json\" -X POST localhost:8545 \n```\n\n![](/img/build/get-started/hardhat-fork-bnII.png)\n\nThe output returns hexadecimal which when converted using this [tool](https://www.rapidtables.com/convert/number/hex-to-decimal.html) should be equal to `105701850`.\n\n\nFor more in-depth guide on Hardhat, please refer to [Hardhat Docs](https://hardhat.org/hardhat-runner/docs/getting-started). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/hardhat/soulbound-tokens)\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/deploy. # Deploy Smart Contracts\n\nThere are various ways of deploying a smart contract on Kaia. This document provides a step-by-step guide to deploy a sample contract using various tools. We assume that you have a Kaia account with enough KAIA to pay the transaction fee. To create an account, you can use [Kaia Online Toolkit](https://toolkit.kaia.io/account/accountKeyLegacy).\"\n\n## Remix Online IDE <a id=\"remix-ide\"></a>\n\nOpen your internet browser and go to [Kaia Plugin for Remix](https://ide.kaia.io).\n\n1. Add a new file.\n\n![](/img/build/smart-contracts/01_deployment_ide.png)\n\n2. Copy and paste the following sample code (or any code you want to deploy) in the new file. The code consists of two contracts called Mortal and KaiaGreeter, and it allows you to run a simple \"Hello World!\".\n\n```\npragma solidity 0.5.12;\n\ncontract Mortal {\n    /* Define variable owner of the type address */\n    address payable owner;\n    /* This function is executed at initialization and sets the owner of the contract */\n    constructor () public { owner = msg.sender; }\n    /* Function to recover the funds on the contract */\n    function kill() public payable { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract KaiaGreeter is Mortal {\n    /* Define variable greeting of the type string */\n    string greeting;\n    /* This runs when the contract is executed */\n    constructor (string memory _greeting) public {\n        greeting = _greeting;\n    }\n    /* Main function */\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n}\n```\n\n3. Select Compiler in the icon panel. Choose the desired EVM environment. For the Kaia networks, you can choose between Kairos (testnet) and Mainnet. Click `Compile` when the sample code is ready to be complied before actual deployment.\n\n![](/img/build/smart-contracts/02_deployment_compile.png)\n\n4. Now we can deploy the contract. Click on the Kaia logo in the icon panel. Import an account by clicking the plus button next to `Account`. Make sure that the account has sufficient KAIA to pay for the transaction of deploying the smart contracts required.\n\n![](/img/build/smart-contracts/05_deployment_account.png)\n\n5. Set Gas limit and Value to send. \n\n  - You may need to set higher Gas limit if you are deploying a more complicated contract. In this example, you can leave it as it is.\n  - Set `Value` to 0 unless you want to send `KAIA` to the contract at the time of deployment.\n\n6. Enter \"Hello World!\" as an argument for constructor function and click on `Deploy` button.\n\n![](/img/build/smart-contracts/03_deployment_hello.png)\n\n7. If the contract is successfully deployed, you will see the corresponding transaction receipt and detailed result in the terminal. \n\n8. You can interact with the contract by clicking on the function buttons. The functions are represented in different colors. `constant` or `pure` functions in Solidity have blue bottons (`greet` in the example) and do not create a new transaction, so they don't cost any gas. Red buttons (`kill` in the example) represent `payable` functions that change the state on the blockchain, consume gas and can accept value. Orange buttons are for `non-payable` functions that change the contract state but do NOT accept a value.\n\n![](/img/build/smart-contracts/06_deployment_functions.png)\n\nFor more details, please refer to this [link](../ide-and-tools/ide-and-tools).\n\n## VVISP <a id=\"vvisp\"></a>\nvvisp is an easy-to-use CLI tool/framework for developing smart contracts, provided by HEACHI LABS. You can easily set environment, deploy and execute Kaia smart contracts with a single command. Refer to the following link for more details.\n\n- https://henesis.gitbook.io/vvisp/deploying-smart-contracts\n\n## solc & caver-js <a id=\"solc-caver-js\"></a>\n\nAnother way to deploy contracts is manually compiling contracts with solc and deploying them with caver-js.\n\n1. Create `KaiaGreeter.sol` and write the following code.  \n\n```\npragma solidity 0.5.6;\n\ncontract Mortal {\n    /* Define variable owner of the type address */\n    address payable owner;\n    /* This function is executed at initialization and sets the owner of the contract */\n    constructor () public { owner = msg.sender; }\n    /* Function to recover the funds on the contract */\n    function kill() public payable { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract KaiaGreeter is Mortal {\n    /* Define variable greeting of the type string */\n    string greeting;\n    /* This runs when the contract is executed */\n    constructor (string memory _greeting) public {\n        greeting = _greeting;\n    }\n    /* Main function */\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n}\n```\n\n2. Install solc 0.5.6.  \n\n```\n$ sudo npm install -g solc@0.5.6\n```\n\n3. Compile the contract.  \n\n```\n$ solcjs KaiaGreeter.sol --bin\n```\n\n4. Install caver-js.  \n\n```\n$ npm install caver-js.\n```\n\n5. Create `deploy.js` in the same directory with the following code.  \n\n```\nconst Caver = require(\"caver-js\");\nconst caver = new Caver(\"https://public-en-kairos.node.kaia.io\")\n\nconst walletInstance = caver.kaia.accounts.privateKeyToAccount(\n  '0x3de0c9...' // enter your private key to deploy contract with\n);\ncaver.kaia.accounts.wallet.add(walletInstance);\n\nconst fs = require('fs')\nconst bytecode = fs.readFileSync('./KaiaGreeter_sol_KaiaGreeter.bin') // compiled output\n\nconst constructorType = ['string']  // enter appropriate constructor type\nconst constructorValue = ['Hello, Kaia!']\n\nconst params = caver.kaia.abi.encodeParameters(constructorType, constructorValue);\n\ncaver.kaia.sendTransaction({\n  from: caver.kaia.accounts.wallet[0].address,\n  gas: \"50000000\",\n  data: bytecode.toString() + params.substring(2, params.length)\n})\n.once(\"receipt\", receipt => {\n  console.log(receipt)\n})\n.once(\"error\", error => {\n  console.log(error);\n})\n```\n\n*NOTE*: This example is not recommended for production use. Be very careful when dealing with private keys.  \n\n6. Deploy the contract using node environment.  \n\n```\n$ node deploy.js\n```",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/deploy/foundry. # Deploy smart contract using Foundry\n\n![](/img/banners/kaia-foundry.png)\n\n## Introduction\n\nFoundry is a smart contract development framework written in Rust that enables developers to manage and compile contracts, run tests, deploy contracts, and interact with the network from the command line via solidity scripts.\n\nFoundry consists of four main CLI tools that allow for fast and modular smart contract development, namely:\n\n* [Forge](https://github.com/foundry-rs/foundry/tree/master/forge):  You can deploy, test, and compile smart contracts using Forge.\n* [Cast](https://github.com/foundry-rs/foundry/tree/master/cast): Cast has made it simple to interact with EVM smart contracts. This includes obtaining chain data, sending transactions, and other things.\n* [Anvil](https://github.com/foundry-rs/foundry/tree/master/anvil): Do you need to spin up a local node? Anvil is a local node environment offered by Foundry.\n* [Chisel](https://github.com/foundry-rs/foundry/blob/master/chisel): Fast, useful, and verbose solidity REPL.\n\nIn this guide, you will:\n\n* Create a simple foundry project.\n* Compile and test a sample smart contract using Foundry.\n* Deploy smart contracts using Foundry to the Kaia Kairos Network.\n* Explore forking mainnet with cast and anvil.\n\n## Pre-requisites\n\nTo follow this tutorial, the following are the prerequisites:\n\n* Code editor: a source-code editor such [VS Code](https://code.visualstudio.com/download).\n* [MetaMask](../../tutorials/connecting-metamaskx#install-metamask): used to deploy the contracts, sign transactions and interact with the contracts.\n* RPC Endpoint: you can get this from one of the supported [endpoint providers](../../../references/public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n* Install [Rust](https://www.rust-lang.org/tools/install) and [Foundry](https://github.com/foundry-rs/foundry#installation).\n\n## Setting Up Your Development Environment \n\nTo check if your foundry installation was successful, run the command below:\n\n```bash\nforge -V\n```\n**Output**\n\n![](/img/build/get-started/forge-version.png)\n\nAfter successfully installing foundry, you now have access to the CLI tools (forge, cast, anvil, chisel) available in foundry. Let's set up a foundry project in the following steps:\n\n**Step 1**: To start a new project, run the command below:\n\n```bash\nforge init foundry_example \n```\n\n**Step 2**: Navigate into your project folder.\n\n```bash \ncd foundry_example\nls\t \n```\n\nAfter initializing a foundry project, your current directory should include:\n\n* **src**: the default directory for your smart contracts.\n* **tests**: the default directory for tests.\n* **foundry.toml**: the default project configuration file.\n* **lib**:  the default directory for project dependencies.\n* **script**: the default directory for solidity scripting files.\n\n## Sample smart contract\n\nIn this section, we will be using the sample counter contract in the initialized foundry project. The `counter.sol` file in the `src/` folder should look like this:\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\ncontract Counter {\n    uint256 public number;\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n    }\n    function increment() public {\n        number++;\n    }\n}\n```\n\n**Code Walkthrough**\n\nThis is your smart contract. **Line 1** shows it uses the Solidity version 0.8.13 or greater. From **lines 4-12**, a smart contract `Counter` is created. This contract simply stores a new number using the **setNumber** function and increments it by calling the **increment** function. \n\n## Testing smart contract \n\nFoundry allows us to write tests in solidity as opposed to writing tests in javascript in other smart contract development frameworks. In our initialized foundry project, the `test/Counter.t.sol` is an example of a test written in solidity. The code looks like this:\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport \"forge-std/Test.sol\";\nimport \"../src/Counter.sol\";\ncontract CounterTest is Test {\n    Counter public counter;\n    function setUp() public {\n        counter = new Counter();\n        counter.setNumber(0);\n    }\n    function testIncrement() public {\n        counter.increment();\n        assertEq(counter.number(), 1);\n    }\n    function testSetNumber(uint256 x) public {\n        counter.setNumber(x);\n        assertEq(counter.number(), x);\n    }\n}\n```\n\nThe code above shows you imported forge standard library and Counter.sol.\n\nThe tests above check the following:\n\n* Is the number increasing?\n* Is the number equal to the set number?\n\nTo check if your test works fine, run the following command:\n\n```bash\nforge test\n```\n\n**Output** \n\n![](/img/build/get-started/forge-test.png)\n\nTo learn more about writing tests, advanced testing, and other features, refer to [Foundry's documentation](https://book.getfoundry.sh/forge/tests).\n\n## Compiling your contracts\n\nCompile your contract with this command:\n\n```bash\nforge build \n```\n\n## Deploying your contracts\n\nTo deploy a contract using foundry, you must provide an RPC URL and a private key of the account that will deploy the contract. Take a look at the list of [rpc-providers](../../../references/public-en) on Kaia to find your rpc-url, and create an account using [MetaMask](../../tutorials/connecting-metamaskx#install-metamask).\n\n**Step 1**: To deploy your contract to the Kaia Kairos network, run the command below: \n\n```bash\n$ forge create --rpc-url <your_rpc_url> --private-key <your_private_key> src/Counter.sol:Counter\n```\n\n**Example**\n\n```bash\nforge create --rpc-url https://public-en-kairos.node.kaia.io --private-key hhdhdhdhprivatekeyhdhdhdhud src/Counter.sol:Counter\n```\n\n**WARNING: Replace the private key argument with your private key from MetaMask. Be very careful not to expose your private key.**\n\n**Output**\n\n![](/img/build/get-started/foundry-create.png)\n\n**Step 2**: Open [Kaiascope](https://kairos.kaiascope.com/tx/0x83c8b55f3fd90110f9b83cd20df2b2bed76cfeb42447725af2d60b2885f479d3?tabId=internalTx) to check if the counter contract deployed successfully.\n\n**Step 3**: Copy and paste the transaction hash in the search field and press Enter. You should see the recently deployed contract.\n\n![](/img/build/get-started/forge-scope.png)\n\n## Interacting with the contract \n\nAfter successfully deploying your smart contract, you will want to call and execute functions right. Let's get to interact with the deployed contracts on Kaia Kairos Network using [Cast](https://book.getfoundry.sh/reference/cast/cast-send.html).  In this section, you will learn how to use the [cast call](https://book.getfoundry.sh/reference/cast/cast-call) to execute the `read-only` function and [cast send](https://book.getfoundry.sh/reference/cast/cast-send) to execute `write` functions.\n\n**A. cast call**: To get the number stored in the contract, you will be calling the `number` function. Run the command below to see this in action.\n\n```bash\ncast call YOUR_CONTRACT_ADDRESS \"number()\" --rpc-url RPC-API-ENDPOINT-HERE\n```\n**Example**\n\n```bash\ncast call 0x7E80F70EeA1aF481b80e2F128490cC9F7322e164 \"number()\" --rpc-url https://public-en-kairos.node.kaia.io\n```\n\n**Output**\n\n![](/img/build/get-started/cast-call-number.png)\n\nYou should get this data in hexadecimal format:\n\n```bash\n0x0000000000000000000000000000000000000000000000000000000000000000\n```\nHowever to get your desired result, use cast to convert the above result. In this case, the data is a number, so you can convert it into base 10 to get the result 0:\n\n```bash\ncast --to-base 0x0000000000000000000000000000000000000000000000000000000000000000 10\n```\n**Output**\n\n![](/img/build/get-started/cast-call-0.png)\n\n**B. cast send**: To sign and publish a transaction such as executing a `setNumber` function in the counter contract, run the command below:\n\n```bash\ncast send --rpc-url=<RPC-URL> <CONTRACT-ADDRESS> “setNumber(uint256)” arg --private-key=<PRIVATE-KEY>\n```\n\n**Example**\n\n```bash\ncast send --rpc-url=https://public-en-kairos.node.kaia.io 0x7E80F70EeA1aF481b80e2F128490cC9F7322e164 \"setNumber(uint256)\"  10 --private-key=<private key>\n```\n\n**Output**\n\n![](/img/build/get-started/cast-send-setNum.png)\n\n**Crosscheck Number**\n\n```bash\ncast call 0x7E80F70EeA1aF481b80e2F128490cC9F7322e164 \"number()\" --rpc-url https://public-en-kairos.node.kaia.io\n```\n\n**Output**\n\n![](/img/build/get-started/cast-call-10.png)\n\nYou should get this data in hexadecimal format:\n\n```bash\n0x000000000000000000000000000000000000000000000000000000000000000a\n```\n\nHowever to get your desired result, use cast to convert the above result. In this case, the data is a number, so you can convert it into base 10 to get the result 10:\n\n```bash\ncast --to-base 0x000000000000000000000000000000000000000000000000000000000000000a 10\n```\n\n**Output**\n\n![](/img/build/get-started/cast-call-result-10.png)\n\n## Forking Mainnet with Cast and Anvil\n\nFoundry allows us to fork the mainnet to a local development network ([Anvil](https://book.getfoundry.sh/reference/anvil/)). Also, you can interact and test with contracts on a real network using [Cast](https://book.getfoundry.sh/reference/cast/).\n\n### Getting Started\n\nNow that you have your Foundry project up and running, you can fork the mainnet by running the command below:\n\n```bash\nanvil --fork-url rpc-url\n```\n\n**Example**\n\n```bash\nanvil --fork-url https://archive-en.node.kaia.io\n```\n\n**Output** \n\n![](/img/build/get-started/anvil-localnode.png)\n\nAfter successfully running this command, your terminal looks like the above image. You'll have 10 accounts created with their public and private keys as well 10,000 prefunded tokens. The forked chain's RPC server is listening at `127.0.0.1:8545`.\n\nTo verify you have forked the network, you can query the latest block number:\n\n```bash\ncurl --data '{\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1,\"jsonrpc\":\"2.0\"}' -H \"Content-Type: application/json\" -X POST localhost:8545 \n```\n\nYou can convert the result from the task above using [hex to decimal](https://www.rapidtables.com/convert/number/hex-to-decimal.html). You should get the latest block number from the time you forked the network. To verify this, cross-reference the block number on [Kaiascope](https://kaiascope.com/block/118704896?tabId=txList).\n\n### Illustration\nIn this section, you will learn how to transfer oUSDC tokens from someone who holds oUSDC to an account created by Anvil (0x70997970C51812dc3A010C7d01b50e0d17dc79C8 - Bob)\n\n**Transferring oUSDC**\n\nGo to Kaiascope and search for holders of oUSDC tokens (here). Let's pick a random account. In this example, we will be using `0x8e61241e0525bd45cfc43dd7ba0229b422545bca`. \n\nLet's export our contracts and accounts as environment variables:\n\n```bash\nexport BOB=0x70997970C51812dc3A010C7d01b50e0d17dc79C8\nexport oUSDC=0x754288077d0ff82af7a5317c7cb8c444d421d103\nexport oUSDCHolder=0x8e61241e0525bd45cfc43dd7ba0229b422545bca\n```\n\nWe can check Bob’s balance using cast call:\n\n```bash\ncast call $oUSDC \\\n  \"balanceOf(address)(uint256)\" \\\n  $BOB\n```\n\n**Output**\n\n![](/img/build/get-started/oUsdcBob4.png)\n\nSimilarly, we can also check our oUSDC holder’s balance using cast call:\n\n```bash\ncast call $oUSDC \\\n  \"balanceOf(address)(uint256)\" \\\n  $oUSDCHolder\n```\n\n**Output** \n\n![](/img/build/get-started/oUsdcHolder4.png)\n\nLet's transfer some tokens from the lucky user to Alice using cast send:\n\n```bash\ncast rpc anvil_impersonateAccount $oUSDCHolder    \ncast send $oUSDC \\\n--unlocked \\\n--from $oUSDCHolder\\\n \"transfer(address,uint256)(bool)\" \\\n $BOB \\\n 1000000\n```0000\n```\n\n**Output**\n\n![](/img/build/get-started/cast-send.png)\n\nLet's check that the transfer worked:\n\n```bash\ncast call $oUSDC \\\n  \"balanceOf(address)(uint256)\" \\\n  $BOB\n```\n\n**Output**\n\n![](/img/build/get-started/oUsdcBobAfter.png)\n\n```bash\ncast call $oUSDC \\\n  \"balanceOf(address)(uint256)\" \\\n  $oUSDCHolder\n```\n\n**Output**\n\n![](/img/build/get-started/oUsdcHolderAfter.png)\n\nFor more in-depth guide on foundry, please refer to [Foundry Docs](https://book.getfoundry.sh/). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/tools/foundry).",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/deploy/private-network. # Deploying smart contract using Private Network\n\n<!-- ![](/img/banners/kaia-ken.png) -->\n\n## Introduction <a id=\"introduction\"></a>\n\nIn this guide, we will walk you through the process of deploying a Greeter contract on a private Kaia network using [Kaia Hardhat Utils](https://github.com/ayo-klaytn/hardhat-utils). By following this guide, you'll learn how to:\n\n- Set up a Hardhat project.\n- Launch a private network simulating the Kairos Testnet.\n- Utilize Hardhat utils to deploy smart contracts on this private network.\n\n## Prerequisite <a id=\"prerequisites\"></a>\n\nTo follow this tutorial, the following are the prerequisites:\n\n- Code editor: a source-code editor such as [VS Code](https://code.visualstudio.com/download).\n- Docker: if you don’t have docker installed, kindly install using this [link](https://docs.docker.com/desktop/)\n- [Node.js and npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm): Node version 18 and above. \n\n## Setting Up your Development Environment <a id=\"setting-up-dev-environment\"></a>\n\nIn this section, we will install hardhat, Kaia hardhat utils and other necessary dependencies needed for bootstrapping our project. \n\n**Step 1: Create a project directory**\n\n```js \nmkdir $HOME/kaia-greeter\ncd kaia-greeter \n```\n\n**Step 2: Initialize an npm project**\n\n```js\nnpm init -y\n```\n\n**Step 3: Install hardhat, hardhat-utils and other dependencies** \n\n* Copy and paste the code below in your terminal to install hardhat and hardhat-utils\n\n```js\nnpm i hardhat @klaytn/hardhat-utils\n```\n\n* Copy and paste the code below to install other dependencies\n\n```js\nnpm install @nomiclabs/hardhat-ethers hardhat-deploy dotenv\n```\n\n:::note\n\nThe hardhat-utils plugin depends on  [hardhat-ethers](https://www.npmjs.com/package/@nomiclabs/hardhat-ethers) and [hardhat-deploy](https://www.npmjs.com/package/hardhat-deploy) plugin.  Make sure to require or import them in your `hardhat.config.js` or `hardhat.config.ts`.\n\n:::\n\n:::info\n\n(Recommended) Install hardhat shorthand. But you can still use the tasks with npx hardhat.\n\n```js\nnpm install hardhat-shorthand --save\n```\n:::\n\n**Step 4: Initialize a hardhat project**\n\nRun the command below to initiate an hardhat project:\n\n```js\nnpx hardhat init \n```\n\nFor this guide, you'll be selecting \"create an empty hardhat.config.js\" project as seen below:\n\n```js\n888    888                      888 888               888\n888    888                      888 888               888\n8888888888  8888b.  888d888 .d88888 88888b.   8888b.  888888\n888    888     \"88b 888P\"  d88\" 888 888 \"88b     \"88b 888\n888    888 .d888888 888    888  888 888  888 .d888888 888\n888    888 888  888 888    Y88b 888 888  888 888  888 Y88b.\n888    888 \"Y888888 888     \"Y88888 888  888 \"Y888888  \"Y888\n👷 Welcome to Hardhat v2.22.9 👷‍\n? What do you want to do? … \n  Create a JavaScript project\n  Create a TypeScript project\n  Create a TypeScript project (with Viem)\n❯ Create an empty hardhat.config.js\n  Quit\n```\n\n**Step 5: Create a .env file**\n\nNow create your `.env` file in the project folder. This file helps us load environment variables from an `.env` file into process.env.\n\nCopy and paste this command in your terminal to create a `.env` file\n\n```js\ntouch .env\n```\n\nConfigure your .env file to look like this:\n\n```\nPRIVATE_KEY=\"COPY & PASTE ANY OF THE PRIVATE KEY PROVIDED BY LOCAL PRIVATE NETWORK\"\n```\n\n:::note\n\nWhen you launch the private network in the next section, you will be able to access the private key provided by the local network.\n\n:::\n\n**Step 6: Setup Hardhat Configs**\n\nModify your `hardhat.config.js` with the following configurations:\n\n```js\nrequire(\"@nomiclabs/hardhat-ethers\");\nrequire(\"hardhat-deploy\");\nrequire(\"@klaytn/hardhat-utils\");\nrequire('dotenv').config()\n\nconst accounts = [\n  process.env.PRIVATE_KEY\n];\n\n/** @type import('hardhat/config').HardhatUserConfig */\nmodule.exports = {\n  solidity: \"0.8.24\",\n  networks: {\n    localhost: {\n      url: process.env.RPC_URL || \"http://localhost:8545\",\n      accounts: accounts,\n    },\n    kairos: {\n      url: process.env.RPC_URL || \"https://public-en-kairos.node.kaia.io\",\n      accounts: accounts,\n    },\n    kaia: {\n      url: process.env.RPC_URL || \"https://public-en.node.kaia.io\",\n      accounts: accounts,\n    }\n  },\n  namedAccounts: {\n    deployer: {\n      default: 0, // here this will by default take the first account as deployer\n    },\n  },\n};\n```\n\n## Launching the Private Network <a id=\"launching-private-network\"></a>\n\nTo launch a  private network, the hardhat utils plugin provides us a task to easily launch one viz:\n\n```js\nhh klaytn-node\n```\n\n![](/img/build/smart-contracts/pn-run-node.png)\n\n## Attaching Console <a id=\"attaching-console\"></a>\n\nThe private network comes with a JavaScript console. From the console command line, you can initiate part of Kaia API calls to your network. To attach to the JavaScript console, execute the following command: \n\n```js\nhh klaytn-node --attach\n```\n\n```jsx title=\"Result Result \"\nWelcome to the Kaia JavaScript console!\n instance: Klaytn/v0.9.2/linux-amd64/go1.22.1\n  datadir: /klaytn\n  modules: admin:1.0 debug:1.0 eth:1.0 governance:1.0 istanbul:1.0 kaia:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n```\n\n:::note\n\nType **kaia** or **personal** to get the list of available functions.\n\n:::\n\n## Checking the Balance in your account <a id=\"checking-balance-in-account\"></a>\n\nWhen we launched the private network, it provided us with a list of accounts, private key and  pre-funded values for each account.  \n\nTo see the balance of the account, execute the following command.\n\n```js\nkaia.getBalance(\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\")\n```\n\n![](/img/build/smart-contracts/pn-check-balance.png)\n\n## Configuring hardhat network environment <a id=\"configuring-hardhat-network-environment\"></a>\n\nNow that we are running a stand alone local network, which external clients (wallets, dApp) can connect to, we need to configure hardhat to use this network by running this command:\n\n```js\nexport HARDHAT_NETWORK=localhost\nhh accounts\n```\n\n```js\nhh --network localhost accounts\n```\n\n![](/img/build/smart-contracts/pn-lh-accounts.png)\n\n## Creating KaiaGreeter Smart Contract <a id=\"creating-kaiagreeter-smart-contract\"></a>\n\nIn this section, you will create a KaiaGreeter smart contract.\n\n**Step 1:** Create a new folder named  **contracts** folder in the Explorer pane, click the New File button and create a new file named `KaiaGreeter.sol`\n\n**Step 2:** Open the file and paste the following code:\n\n```js\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\nimport \"hardhat/console.sol\";\ncontract KaiaGreeter {\n    uint256 totalGreetings;\n    constructor() {\n        console.log(\"Yo yo, Welcome to Kaia\");\n    }\n    function greet() public {\n        totalGreetings += 1;\n        console.log(msg.sender, \"says hello kaia!\");\n    }\n    function getTotalGreetings() public view returns (uint256) {\n        console.log(\"We have %d total waves!\", totalGreetings);\n        return totalGreetings;\n    }\n}\n```\n\n## Deploying KaiaGreeter <a id=\"deploying-kaiagreeter\"></a>\n\nIn this section we will use the hardhat-deploy plugin to deploy our contracts. \n\n**Step 1:** In the Explorer pane, Create a new folder called **deploy** and click the New File button to create a new file named `deploy.js`. \n\n**Step 2:** Copy and paste the following code inside the file.\n\n```js\nmodule.exports = async ({getNamedAccounts, deployments}) => {\n  const {deploy} = deployments;\n  const {deployer} = await getNamedAccounts();\n  await deploy('KaiaGreeter', {\n    from: deployer,\n    args: [],\n    log: true,\n  });\n};\nmodule.exports.tags = ['KaiaGreeter'];\n```\n\n**Step 3:** In the terminal, run the following command which tells Hardhat to deploy your KaiaGreeter contract on the private network.\n\n```js\nhh deploy \n```\n\n![](/img/build/smart-contracts/pn-deployed-tx.png)\n\n## Verifying transaction using Block Explorer <a id=\"verifying-transaction-using-block-explorer\"></a>\n\n**Step 1:** To verify our transactions using a local blockscout explorer, run the command below in a new terminal: \n\n```js\nhh explorer --network localhost\n```\n\n```js\n[+] Using env: {\n  DOCKER_RPC_HTTP_URL: 'http://host.docker.internal:8545/',\n  DOCKER_LISTEN: '0.0.0.0:4000',\n  DOCKER_DISABLE_TRACER: 'false',\n  DOCKER_DEBUG: '0'\n}\n[+] Open in the browser: http://localhost:4000\n Network blockscout_default  Creating\n Network blockscout_default  Created\n Container blockscout-db-1  Creating\n Container blockscout-frontend-1  Creating\n Container blockscout-smart-contract-verifier-1  Creating\n Container blockscout-redis_db-1  Creating\n Container blockscout-smart-contract-verifier-1  Created\n Container blockscout-db-1  Created\n Container blockscout-frontend-1  Created\n Container blockscout-redis_db-1  Created\n Container blockscout-backend-1  Creating\n Container blockscout-backend-1  Created\n Container blockscout-frontend-1  Starting\n Container blockscout-redis_db-1  Starting\n Container blockscout-smart-contract-verifier-1  Starting\n Container blockscout-db-1  Starting\n Container blockscout-db-1  Started\n Container blockscout-redis_db-1  Started\n Container blockscout-smart-contract-verifier-1  Started\n Container blockscout-backend-1  Starting\n Container blockscout-frontend-1  Started\n Container blockscout-backend-1  Started\n```\n\n**Step 2:** To access this block explorer, open up [http://localhost:4000](http://localhost:4000) in your browser. \n\n\nStep 3: Copy and paste the deployed contract address in the search field and press Enter. You should see the recently deployed contract.\n\n![](/img/build/smart-contracts/pn-verify-tx-block-explorer.png)\n\n## Interacting with deployed contract <a id=\"interacting-with-deployed-contract\"></a>\n\n### using hardhat utils contract task\n\n1. To call a read-only function of the deployed contract, run the command below:\n\n```js\nhh call KaiaGreeter getTotalGreetings\n```\n\n![](/img/build/smart-contracts/pn-read-function.png)\n\n\n2. To send a function invoking transaction to the deployed contract, run the command below:\n\n```js\nhh send KaiaGreeter greet\n```\n\n```jsx title=\"Result Result \"\nsent KaiaGreeter#greet (tx: 0xc0bd25ffb594c13d5ae1f77f7eb02f2978013c69f9f6e22694b76fa26c329e85)...ok (block 2837, gas used: 47457)\n```\n\n### using Kaia SDK\n\n**Step 1:** To interact with the deployed contract using [Kaia SDK](https://github.com/kaiachain/kaia-sdk), you need to install Kaia SDK by running this command:\n\n```js\nnpm install --save @kaiachain/ethers-ext\n```\n\n**Step 2:** In the Explorer pane, Create a new folder called \"utils\" and click the New File button to create a new file named `kaia-sdk.js` in the utils folder.\n\nStep 3:  Copy and paste the following code inside the file.\n\n```js\nconst { JsonRpcProvider, Wallet } = require(\"@kaiachain/ethers-ext\");\nconst { ethers } = require(\"ethers\");\nrequire('dotenv').config()\n\nconst provider = new JsonRpcProvider(\"http://127.0.0.1:8545/\")\n\nconst privKey = process.env.PRIVATE_KEY;\nconst signer = new ethers.Wallet(privKey, provider);\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\" // PASTE DEPLOYED CONTRACT ADDRESS;\n\nconst KaiaGreeterABI = require(\"../artifacts/contracts/KaiaGreeter.sol/KaiaGreeter.json\").abi;\n\nasync function getCode(ca) {\n    const tx = await provider.getCode(ca);\n    console.log(tx);\n}\n\nasync function greet(ca) {\n    const klaytnGreeter = new ethers.Contract(ca, KaiaGreeterABI, signer);\n    const tx = await klaytnGreeter.greet();\n    console.log( tx);\n}\n\nasync function getTotalGreetings(ca) {\n    const klaytnGreeter = new ethers.Contract(ca, KaiaGreeterABI, provider);\n    const value = await klaytnGreeter.getTotalGreetings();\n    console.log(value.toString());\n}\n\n// getCode(contractAddress);\ngetTotalGreetings(contractAddress);\n// greet(contractAddress);\n```\n**Step 4:** To execute any of the functions declared in this file, make sure to uncomment them as we did for the getTotalGreetings() function, then run the following command in your terminal. \n\n```js\nnode utils/kaia-sdk.js \n```\n\n![](/img/build/smart-contracts/pn-run-kaia-sdk.png)\n\nFor a more in-depth guide on hardhat-utils, please refer to [hardhat-utils github](https://github.com/ayo-klaytn/hardhat-utils). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/ayo-klaytn/kaia-hardhat-utils-example)",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/deploy/thirdweb. # Deploying smart contract using Thirdweb\n\n![](/img/banners/kaia-thirdweb.png)\n\n## Introduction <a id=\"introduction\"></a>\n\nThis section will guide you through deploying a Marketplace contract and a corresponding NFT collection contract to Kaia Network using [ThirdWeb](https://portal.thirdweb.com/). Thirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks.\n\nMarketplace contract allows users to list NFTs for direct sale or auction, thus enhancing the buying and selling of NFTs, just like it’s done on OpenSea.\n\nBy the end of this guide, you will be able to:\n\n* create and customize contracts using thirdweb.\n* compile, deploy, and interact with your smart contract using thirdweb.\n\n## Getting Started <a id=\"getting-started\"></a>\n\nIn this article, we will explore the different means to create, customize, and deploy contracts using thirdweb, viz.\n* Using the thirdweb dashboard\n* Using the thirdweb CLI\n\nFor this guide, we will be demonstrating how to deploy a MarketPlace contract using the thirdweb dashboard and also deploying a corresponding nft collection to be listed on the marketplace using the thirdweb CLI.\n\n> Note: We will not be explaining the mechanics of the marketplace contract as our focus is to explore thirdweb dashboard and CLI for creating, deploying, and interacting with smart contracts.  \n\n## Creating and deploying marketplace contract using thirdweb dashboard <a id=\"creating-and-deploying-thirdweb-dashboard\"></a>\n\nIn this section, we will create and deploy a marketplace contract using thirdweb dashboard. To do this, follow the steps below:\n\n1. Head over to [thirdweb dashboard](https://thirdweb.com/dashboard?ref=blog.thirdweb.com) and select the **MarketPlace** contract from the list of contracts.\n\n![](/img/build/get-started/marketplace-explore.png)\n\n2. Click **Deploy Now** in the contract overview dashboard.\n\n![](/img/build/get-started/marketplace-deploy.png)\n\n3. Configure the marketplace contract to include the following parameters: the **name** of the marketplace, its **description**, and **image**.\n\n![](/img/build/get-started/marketplace-contract-details.png)\n\n4. Click **Deploy Now** as seen in the image above and wait for the transaction to complete.\n\n![](/img/build/get-started/marketplace-deployed.png)\n\nOnce the transaction has been successfully executed, you can verify your deployment by pasting the contract address in the search bar of [Kaiascope](https://kaiascope.com/).\n\n## Creating and deploying an NFT collection contract using thirdweb CLI <a id=\"creating-deploying-using-thirdweb-cli\"></a>\n\nIn this section, we will create and deploy the NFT collection to be listed in our Marketplace using [thirdweb CLI](https://portal.thirdweb.com/cli?ref=blog.thirdweb.com). To do this, follow the steps below:\n\n### Creating the contract <a id=\"creating-the-contract\"></a>\n\n1. Run this command in your terminal to create your contract:\n\n```bash\nnpx thirdweb create --contract\n```\n\n2. Enter your preferred values for the command-line prompts:\n\n    i. Give your project a name.\n\n    ii. Choose your preferred framework: **Hardhat** or **Foundry**.\n\n    iii. Name your smart contract.\n\n    iv. Choose the type of base contract: **Empty**, **ERC20**, **ERC721**, or **ERC1155**. Add any desired **extensions**. For this tutorial, we will select ERC721 and setting the extension to none. \n\n![](/img/build/get-started/thirdweb-cli-info.png)\n\n3. Once created, navigate to your project’s root directory and open your project in your preferred code editor.\n\n4. If you open the contracts folder, your contract should look like this:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@thirdweb-dev/contracts/base/ERC721Base.sol\";\ncontract nftcollection is ERC721Base {\n      constructor(\n        address _defaultAdmin,\n        string memory _name,\n        string memory _symbol,\n        address _royaltyRecipient,\n        uint128 _royaltyBps\n    )\n        ERC721Base(\n            _defaultAdmin,\n            _name,\n            _symbol,\n            _royaltyRecipient,\n            _royaltyBps\n        )\n    {}\n}\n```\n\nThe contract above demonstrates basic [ERC721Base](https://github.com/thirdweb-dev/contracts/blob/main/contracts/base/ERC721Base.sol) functionality. It imports and inherits the **ERC721Base** contract, and it also implements the required methods, including the constructor and its dependent parameters.\n\nYou can modify the contract to your desired custom logic, and once done, your contract is ready for deployment.\n\n### Deploying the contract <a id=\"deploying-the-contracts\"></a>\n\n1. Navigate to your project root folder and run the command in your terminal:\n\n```bash\nnpx thirdweb deploy\n```\n\nExecuting this command will trigger the following actions:\n  * detects the framework (hardhat, foundry)\n  * compiles all the contracts in the current directory.\n  * allows you to select which contract(s) you wish to deploy.\n  * upload your compiled smart contract code (in the form of an Application Binary Interface, or ABI) to IPFS.\n\n2. When deployment is complete, a dashboard interface will open to fill out the remaining parameters.\n    * **_name**: contract name\n    * **_symbol**: symbol or \"ticker\"\n    * **_royaltyRecipient**: wallet address to receive royalties from secondary sales\n    * **_royaltyBps**: basis points (bps) that will be given to the royalty recipient for each secondary sale, e.g., 500 = 5%\n\n3. Select `Kaia Mainnet` as the network to deploy the contract to.\n\n![](/img/build/get-started/nft-collection-deploy.png)\n\n4. Once your smart contract is deployed, you can manage additional settings and functionalities through its dashboard. For example, you can upload NFTs, configure permissions and access control, and add new features.\n\nYou can learn more about thirdweb deploy command in this [deploy guide](https://portal.thirdweb.com/deploy/getting-started).\n\n## Interacting with deployed contracts <a id=\"interacting-with-deployed-contracts\"></a>\n\nIn this section, we will mint an NFT and also transferring it to another account using the **mint** and **transferfrom** function respectively. Let's go over it in the following steps:\n\n### Minting the NFT <a id=\"minting-nft\"></a>\n\n1. Navigate to the newly deployed contract (**puppyKlan-NC**) dashboard.\n2. Click on the **mint** function in the **NFTs** tab under the contract dashboard.\n\n![](/img/build/get-started/puppy-mint-btn.png)\n\n3. Fill in the parameters needed for minting the NFT: **name**, **media**, **description**, and **properties**.\n\n![](/img/build/get-started/puppy-mint-details.png)\n\n4. Verify your input and click the **Mint NFT** button.\n5. Confirm the transaction and wait for it to complete. Once done, you should see your NFT added to the dashboard, like below:\n\n![](/img/build/get-started/puppy-minted.png)\n\n### Transferring the NFT to a new owner <a id=\"transferring-nft-to-new-owner\"></a>\n\n1. Head to the Explorer tab in the contract (**puppyKlan-NC**) dashboard.\n2. Select the **transferFrom** function under the Write tab, as shown below.\n3. Fill in the necessary function arguments: from (address), to (address), and id (uint256).\n\n![](/img/build/get-started/puppy-transferfrom.png)\n\n4. Confirm the transaction and wait for it to complete.\n\n## Conclusion <a id=\"conclusion\"></a>\n\nCongratulations! if you made it to the end of this guide. If you have any questions, visit the [Kaia Forum](https://devforum.kaia.io/) or reach out to the [official thirdweb support](https://support.thirdweb.com/). However, below is a list of useful resources you might need while further building with Thirdweb on Kaia.\n\n* [Thirdweb Docs](https://portal.thirdweb.com/)\n* [How to build a dApp using Thirdweb](https://blog.thirdweb.com/guides/how-to-build-a-dapp/)\n* [Create your own NFT marketplace with NextJS and TypeScript](https://blog.thirdweb.com/guides/nft-marketplace-with-typescript-next/)\n\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/ide-and-tools/ide-and-tools. # IDE and Tools\n\nThis page contains the list of development tools that is available to help smart contract development on Kaia.\n\n#### [Remix Online IDE](https://remix.ethereum.org/) <a href=\"#remix-ide\" id=\"remix-ide\"></a>\n\nRemix Online IDE is a powerful toolset for developing, deploying, debugging, and testing EVM-compatible smart contracts. You can write, compile, deploy and execute smart contracts on Kaia from Remix IDE, using Kaia Plugin.\n\n#### [Kaia Contracts Wizard](https://wizard.klaytn.foundation/) <a href=\"#kaia-contract-wizard\" id=\"kaia-contract-wizard\"></a>\n\nKaia Contracts Wizard is an interactive generator to bootstrap your smart contract and learn about Kaia Contracts. This is based on OpenZeppelin Wizard.\n\n#### [Thirdweb](../deploy/thirdweb) <a href=\"#thirdweb\" id=\"thirdweb\"></a>\n\nThirdweb is a complete web3 development framework that provides everything you need to connect your apps and games to decentralized networks.\n\n#### [Kaia Wallet](../../tools/wallets/kaia-wallet) <a href=\"#kaia-wallet\" id=\"kaia-wallet\"></a>\n\nKaia Wallet is a browser extension wallet for the Kaia Network. Kaia Wallet empowers you to store and interact with KAIA and your Kaia-based tokens. Kaia Wallet also enables you to sign transactions from web-based Kaia dApps in realtime.\n\n#### [Kaiascope](../../tools/block-explorers/kaiascope) <a href=\"#kaiascope\" id=\"kaiascope\"></a>\n\nKaiascope is the block explorer for the Kaia Network. You can browse and inspect your transactions on the browser.",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/porting-ethereum-contract. # Import Ethereum Contracts\n\nIn most cases, you can use Ethereum contracts on Kaia without any modification.\nHowever, be aware of the following two issues.  \n\n## Solidity Support <a id=\"solidity-support\"></a>\n\n* Kairos network is currently compatible with **London** Ethereum Virtual Machine (EVM).\n* Mainnet is currently compatible with **London** Ethereum Virtual Machine (EVM).\n\n:::note\n\nv1.7.0 Protocol Upgrade - incompatible changes including **Istanbul** hard fork items and Kaia's own items.\nIt has been enabled from block number `#75,373,312` in case of Kairos network and `#86,816,005` for the Mainnet.\n\nv1.7.3 Protocol Upgrade - incompatible changes including Base Fee from the **London** hard fork.\nIt has been enabled from block number `#80,295,291` in case of Kairos network and `#86,816,005` for the Mainnet.\n\nv1.8.0 Protocol Upgrade - incompatible changes including Base Fee from the **London** hard fork.\nIt has been enabled from block number `#86,513,895` in case of Kairos network and `#86,816,005` for the Mainnet.\n\n:::\n\nBackward compatibility is not guaranteed with other EVM versions on Kaia.\nThus, it is highly recommended compiling Solidity code with the correct target option according to the protocol upgrade status.\n\n* Kairos: --evm-version london\n* Mainnet: --evm-version london\n* Others(private/service chain): determined according to the protocol upgrade status\n\nPlease refer to [how to set the EVM version of solc](https://solidity.readthedocs.io/en/latest/using-the-compiler.html#setting-the-evm-version-to-target).\n\n\nAn example command is shown below:\n\n```\n$ solc --evm-version london contract.sol\n```\n\n## Decoupled Key Pairs <a id=\"decoupled-key-pairs\"></a>\n\nKaia [decouples key pairs from addresses](../../learn/accounts#decoupling-key-pairs-from-addresses). If user [updates account](../transactions/basic#txtypeaccountupdate), the private key for a specific account is replaced with another one. Most cases this will not affect your business logic. However if your business logic includes ecrecover, you should consider using validateSender. For more details, refer to [here](../../learn/smart-contracts/precompiled-contracts).\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/samples/erc-20. # ERC-20\n\n## Introduction <a id=\"introduction\"></a>\n\nThis tutorial helps you to create an example ERC-20 compatible token that conforms to the [Kaia Token Standards](../token-standard), especially [Fungible Token Standard \\(ERC-20\\)](../token-standard#fungible-token-standard-kip-7).\n\n[ERC-20 Token Standard](https://eips.ethereum.org/EIPS/eip-20) defines two events and 9 methods \\(including 3 optional methods\\) as below. ERC-20-compatible tokens are token contracts that implements the following interface.\n\n```text\nfunction name() public view returns (string) //optional\nfunction symbol() public view returns (string) //optional\nfunction decimals() public view returns (uint8) //optional\nfunction totalSupply() public view returns (uint256)\nfunction balanceOf(address _owner) public view returns (uint256 balance)\nfunction transfer(address _to, uint256 _value) public returns (bool success)\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\nfunction approve(address _spender, uint256 _value) public returns (bool success)\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining)\n\nevent Transfer(address indexed _from, address indexed _to, uint256 _value)\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value)\n```\n\nBased on above interface, developers may customize tokens by adding new features and logics, and deploy on Kaia network. For more information, refer to official [ERC-20 documentation](https://eips.ethereum.org/EIPS/eip-20).\n\nIn this tutorial, you are going to implement `MyERC20.sol`, an ERC-20 compatible token. This token will issue a predefined amount of tokens and sends all of the tokens to the contract owner on its deploy.\n\n`MyERC20.sol` is based on OpenZeppelin's ERC20 implementation. A major part of the code in this tutorial is forked from [OpenZeppelin 2.3 ](https://github.com/OpenZeppelin/openzeppelin-solidity/releases/tag/v2.3.0) and following Solidity files are used to implement `MyERC20.sol`.\n\n* [https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/IERC20.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/IERC20.sol)\n* [https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20.sol)\n* [https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20Detailed.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20Detailed.sol)\n* [https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/math/SafeMath.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/math/SafeMath.sol)\n\n## 1. Writing ERC-20 Smart Contract <a id=\"1-writing-erc-20-smart-contract\"></a>\n\n### 1.1 Overall structure of MyERC20 <a id=\"1-1-overall-structure-of-myerc20\"></a>\n\nThe complete source code of `MyERC20.sol` is given below. In this implementation, `constructor` invokes `_mint` to mint a predefined amount of token on contract deploy.\n\n```text\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract MyERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    // NOTE Start of https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20Detailed.sol\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n\n        _mint(msg.sender, 100000 * 10 ** uint256(decimals)); // CAUTION!\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * > Note that this information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * `IERC20.balanceOf` and `IERC20.transfer`.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    // NOTE End of https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20Detailed.sol\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n\t_balances[account] = _balances[account].sub(value);\n        _totalSupply = _totalSupply.sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n```\n\n`MyERC20.sol` consists of one interface `IERC20`, one library `SafeMath` and one contract `MyERC20` which implements `IERC20` interface.\n\n* `IERC20` interface defines mandatory interface described at [ERC-20 specification](https://eips.ethereum.org/EIPS/eip-20).\n* `SafeMath` library defines wrappers over Solidity's arithmetic operations with added overflow checks for safe calculation of `uint256` type of Solidity.\n* `MyERC20` implements `IERC20` interfaces and also defines three optional methods described at [ERC-20 specification](https://eips.ethereum.org/EIPS/eip-20).\n  * In addition to ERC20, `constructor` is defined and this constructor is used to define a new ERC20 token name and symbol, and to mint a predefined amount of token. `constructor` is called once on its first deploy.\n\n### 1.2 Take a look at important methods <a id=\"1-2-take-a-look-at-important-methods\"></a>\n\nLet's take a look at some important methods in detail.\n\n#### \\(1\\) `function balanceOf(address account) external view returns (uint256);` <a id=\"1-function-balanceof-address-account-external-view-returns-uint256\"></a>\n\n`balanceOf` is a mandatory method of ERC-20. `balanceOf` returns the balance of the given address.\n\n```text\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n```\n\n`balanceOf` just returns of value of key `account` stored in `_balances` which is `mapping (address => uint256)` type as below.\n\n```text\n    mapping (address => uint256) private _balances;\n```\n\nIf there is no key `account` available in `_balances`, then it just returns `0`.\n\n#### \\(2\\) `function transfer(address recipient, uint256 amount) external returns (bool);` <a id=\"2-function-transfer-address-recipient-uint256-amount-external-returns-bool\"></a>\n\n`transfer` is a mandatory method of ERC-20. `transfer` transfers `amount` of tokens to `recipient`, and MUST fire the `Transfer` event. The function SHOULD throw if the message caller’s account balance does not have enough tokens to spend.\n\n`transfer` just invokes internal method `_transfer` which implements actual transfer and event as below.\n\n```text\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n```\n\n`_transfer` implements actual behavior of `transfer` method of ERC-20.\n\nIn addition, it prevents sending token from or to zero address using `require` as below.\n\n```text\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n```\n\n#### \\(3\\) `function approve(address spender, uint256 amount) external returns (bool);` <a id=\"3-function-approve-address-spender-uint256-amount-external-returns-bool\"></a>\n\n`approve` is a mandatory method of ERC-20. `approve` allows `spender` to withdraw from your account multiple times, up to the `amount`. If this function is called multiple times, it simply resets the allowance to `amount`.\n\n`approve` just invokes internal method `_approve` which implements actual behavior of `approve`. `msg.sender` is passed as the account `owner`.\n\n```text\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n```\n\n`_approve` updates `_allowances` which is a 2-dimensional dictionary maintaining allowed `value` for `spender` from specific `address`.\n\n```text\n    mapping (address => mapping (address => uint256)) private _allowances;\n```\n\n#### \\(4\\) `function _mint(address account, uint256 amount) internal` <a id=\"4-function-_mint-address-account-uint256-amount-internal\"></a>\n\n`_mint` is not part of ERC-20. However we need a way to create new ERC-20 tokens and introduced `_mint` to create new tokens in this implementation as below.\n\n```text\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n```\n\n`_mint` is an internal method and can be invoked inside of this contract.\n\nIn `MyERC20.sol`, `_mint` is invoked only once from `constructor` when deploying the smart contract to mint a predefined amount of token.\n\nIf you want to issue additional tokens after deploying the smart contract, you have to introduce a new public method such as `mint`. The method should be implemented with CAUTION because only authorized users should be able to mint tokens.\n\nPlease take a look at OpenZeppelin example [ERC20Mintable.sol](https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC20/ERC20Mintable.sol) for more detail.\n\n## 2. Deploying Smart Contract\n\nIn this section, you'll deploy your MyERC20 smart contract using Remix Online IDE. The complete source code for MYERC20.sol was given at [Writing ERC-20 Smart Contract](https://docs.kaia.io/build/smart-contracts/samples/erc-20/#1-writing-erc-20-smart-contract).\n\n### 2.1 Prerequisites <a href=\"#2-1-prerequisites\" id=\"2-1-prerequisites\"></a>\n- [Kaia Wallet](../../tools/wallets/kaia-wallet): used to deploy contracts, sign transactions and interact with contracts.\n- Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n\nYou can use Remix Online IDE or use Truffle to deploy `MyERC20` smart contract.\n\n### 2.2 Deploying smart contract using Remix Online IDE <a href=\"#2-2-deploying-smart-contract-using-kaia-ide\" id=\"2-2-deploying-smart-contract-using-kaia-ide\"></a>\n\nRemix IDE\n* Navigate to [Kaia Plugin for Remix](https://ide.kaia.io/)\n* Create a `MyERC20.sol` file in the contracts folder\n* In Remix, click **compile** contract.\n* Click the Kaia (prev Klaytn) tab on your left having installed the plugin\n* Select **Environment** > **Injected Provider** - **Kaia Wallet**.\n* In Contract field, select your contract. For example, MyERC20.\n* Assign the following arguments at deployment **KAIROSTOKEN**, **KAIROS** and **8**\n* Click **Deploy**.\n\n![ERC20-1-deploy](/img/build/smart-contracts/remix-layout-erc20-example.png)\n\nAfter deploying, you can invoke `balanceOf` with your account, which was used to deploy the contract. You will find there are `10000000000000` tokens available in your account as below. Because you set `decimal` as `8` when deploying the contract above, it minted a fixed number of `100000` tokens in the constructor, with one token having a decimal value of `10^8`. `totalSupply` method will return the total supply of tokens minted which should be also `10000000000000`.\n\n![ERC20-2-owner-token](/img/build/smart-contracts/bal-ts-erc20-example.png)\n\n`MyERC20` is now live !\n\n## 3. Interacting with ERC-20 token from Kaia Wallet <a id=\"3-interacting-with-erc-20-token-from-kaia-wallet\"></a>\n\nYou can use Kaia Wallet to check your balance and transfer the ERC-20-compatible KAIROSTOKEN you just deployed. To view your token balance in Kaia Wallet, follow the steps below:\n \nKaia Wallet\n* Open up Kaia Wallet\n* Click on the Token List Icon, and then click Add Token button \n\n![](/img/build/smart-contracts/kaia-add-token-kw.png)\n\n\n* Paste the address of myERC20.sol contract in the Token Contract Address field under Custom Token tab.\n* Follow the prompts afterwards to add your token. Your Token List modal should like like this: \n\n![](/img/build/smart-contracts/kaia-add-token-kw-ii.png)\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/samples/erc-721. # ERC-721\n\n## Introduction <a id=\"introduction\"></a>\n\nThis tutorial helps you to create an example ERC-721 compatible token that conforms to [Kaia Token Standards](../token-standard), especially [Non-fungible Token Standard (ERC-721)](../token-standard#non-fungible-token-standard-kip-17).\n\n[ERC-721 Non-Fungible Token Standard](https://eips.ethereum.org/EIPS/eip-721) defines three events and 10 methods as below. `supportsInterface` of ERC-721 is derived from [ERC-165 Standard Interface Detection](https://eips.ethereum.org/EIPS/eip-165) and ERC-165 is a part of ERC-721.\nERC-721 compatible tokens are the token contracts that implement ERC-721 and ERC-165 interfaces as below.\n\n```solidity\nevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\nevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\nevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\nfunction balanceOf(address _owner) external view returns (uint256);\nfunction ownerOf(uint256 _tokenId) external view returns (address);\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external payable;\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction approve(address _approved, uint256 _tokenId) external payable;\nfunction setApprovalForAll(address _operator, bool _approved) external;\nfunction getApproved(uint256 _tokenId) external view returns (address);\nfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\nfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\n```\n\nBased on above interface, developers may customize tokens by adding new features and logics, and deploy on Kaia network.\nFor more information, refer to official [ERC-721 specification](https://eips.ethereum.org/EIPS/eip-721).\n\nIn this tutorial, you are going to implement `MyERC721Card.sol` which implements a card-type non-fungible token, i.e. `MyERC721Card`,  which is an ERC-721 token.\nEach `MyERC721Card` has name and level, e.g. \"King\" with level 1, \"Queen\" with level 1.\n\n`MyERC721Card.sol` is based on OpenZeppelin's ERC721 implementation. A major part of the code in this tutorial is forked from [OpenZeppelin 2.3\n](https://github.com/OpenZeppelin/openzeppelin-solidity/releases/tag/v2.3.0).\n\n## 1. Writing ERC-721 Smart Contract <a id=\"1-writing-erc-721-smart-contract\"></a>\n\n### 1.1 Overall structure of MyERC721Card <a id=\"1-1-overall-structure-of-myerc721card\"></a>\n\nThe complete source code of `MyERC721Card.sol` is given below.\n\n```text\npragma solidity ^0.5.0;\n\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/utils/Address.sol\n/**\n * @dev Collection of functions related to the address type,\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * > It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/math/SafeMath.sol\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/drafts/Counters.sol\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n * directly accessed.\n */\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others (`ERC165Checker`).\n *\n * For an implementation, see `ERC165`.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n/**\n * @dev Implementation of the `IERC165` interface.\n *\n * Contracts may inherit from this and call `_registerInterface` to declare\n * their support of an interface.\n */\ncontract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See `IERC165.supportsInterface`.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See `IERC165.supportsInterface`.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ncontract IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in `owner`'s account.\n     */\n    function balanceOf(address owner) public view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) public view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * \n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either `approve` or `setApproveForAll`.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either `approve` or `setApproveForAll`.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public;\n    function approve(address to, uint256 tokenId) public;\n    function getApproved(uint256 tokenId) public view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) public;\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n} \n\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC721/IERC721Receiver.sol\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ncontract IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a `safeTransfer`. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\n    public returns (bytes4);\n}\n\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/v2.3.0/contracts/token/ERC721/ERC721.sol\ncontract ERC721 is ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from token ID to owner\n    mapping (uint256 => address) private _tokenOwner;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public view returns (address) {\n        address owner = _tokenOwner[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n\n        return owner;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _tokenApprovals[tokenId] = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId) public view returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param to operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address to, bool approved) public {\n        require(to != msg.sender, \"ERC721: approve to caller\");\n\n        _operatorApprovals[msg.sender][to] = approved;\n        emit ApprovalForAll(msg.sender, to, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator) public view returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n     * Requires the msg.sender to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the msg.sender to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        address owner = _tokenOwner[tokenId];\n        return owner != address(0);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the msg.sender is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * Deprecated, use _burn(uint256) instead.\n     * @param owner owner of the token to burn\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(address owner, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == owner, \"ERC721: burn of token that is not own\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[owner].decrement();\n        _tokenOwner[tokenId] = address(0);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal {\n        _burn(ownerOf(tokenId), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke `onERC721Received` on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * This function is deprecated.\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Private function to clear current approval of a given token ID.\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _clearApproval(uint256 tokenId) private {\n        if (_tokenApprovals[tokenId] != address(0)) {\n            _tokenApprovals[tokenId] = address(0);\n        }\n    }\n}\n\ncontract MyERC721Card is ERC721{\n\n    struct Card {\n        string  name;  // Name of the Card\n        uint256 level; // Level of the Card\n    }\n\n    Card[] public cards; // First Item has Index 0\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender; // owner of MyERC721Card contract who can create a new card\n    }\n\n    function mintCard(string memory name, address account) public {\n        require(owner == msg.sender); // Only the Owner can create Items\n        uint256 cardId = cards.length; // Unique card ID\n        cards.push(Card(name, 1));\n        _mint(account, cardId); // Mint a new card\n    }\n\n}\n```\n\n`MyERC721Card.sol` consists of one interface\\(`IERC165`\\), three libraries\\(`Address`, `SafeMath` and `Counters`\\) and four contracts\\(`ERC165`, `IERC721`, `IERC721Receiver` and `MyERC721Card`\\).\n\n* `IERC165` interface defines interface described at [ERC-165 specification](https://eips.ethereum.org/EIPS/eip-165).\n* `Address` library defines `isContract` method to test whether an `account` is a contract or not.\n* `SafeMath` library defines wrappers over Solidity's arithmetic operations with added overflow checks for safe calculation of `uint256` type of Solidity.\n* `Counters` library defines counters that can only be incremented or decremented by one. This is used to track the number of elements in issuing ERC721 ids.\n* `ERC165` implements `IERC165` interface.\n* `IERC721` defines interface described at [ERC-721 specification](https://eips.ethereum.org/EIPS/eip-721) which also includes ERC-165.\n* `IERC721Receiver` defines `onERC721Received` used from `MyERC721Card` contract.\n* `ERC721` implements `IERC721` and `ERC165`.\n* `MyERC721Card` implements a card type non-fungible token with name and level using `ERC721` and only the owner of `MyERC721Card` contract can mint new cards.\n\n### 1.2 Take a look at important methods <a id=\"1-2-take-a-look-at-important-methods\"></a>\n\nLet's take a look at some important methods in detail.\n\n#### \\(1\\) `constructor` of ERC721 and `_INTERFACE_ID_ERC721` <a id=\"1-constructor-of-erc721-and-_interface_id_erc721\"></a>\n\n`constructor` registers `_INTERFACE_ID_ERC721` which is a 4 bytes hash derived from ERC-721 interfaces as below.\n\n```text\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    constructor () public {\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n    }\n```\n\nAfter registering, `supportsInterface` interface of ERC-721 and ERC-165 returns `true` when invoked for `_INTERFACE_ID_ERC721` and tells this contract is implementing ERC-721 interfaces.\n\n#### \\(2\\) `function balanceOf(address owner) public view returns (uint256 balance);` <a id=\"2-function-balanceof-address-owner-public-view-returns-uint256-balance\"></a>\n\n`balanceOf` is a mandatory method of ERC-721. `balanceOf` returns the number of NFTs in `owner`'s account.\n\n```text\n    function balanceOf(address owner) public view returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n\n        return _ownedTokensCount[owner].current();\n    }\n```\n\n`balanceOf` just returns a current count from the `Counter` object that the `owner` maintains in `_ownedTokensCount`.\n\n```text\n    // Mapping from owner to number of owned token\n    mapping (address => Counters.Counter) private _ownedTokensCount;\n```\n\n#### \\(3\\) `safeTransferFrom` and `transferFrom` <a id=\"3-safetransferfrom-and-transferfrom\"></a>\n\nThese functions transfer the ownership of a given token ID to another address. There are two `safeTransferFrom` methods required by ERC-721, one with `data` and one without `data`. Both methods work identically to each other except that the one without `data` just set `data` to `\"\"`. `safeTransferFrom` invokes `transferFrom` with more checks as below and `safeTransferFrom` is preferred over `transferFrom` which is also a mandatory method of ERC-721.\n\n```text\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {\n        transferFrom(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(msg.sender, tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transferFrom(from, to, tokenId);\n    }\n```\n\n`safeTransferFrom` checks whether the `to` address is able to receive the token. `_checkOnERC721Received` has the verification logic. If `to` address is a contract, then the contract should implement `onERC721Received` interface of ERC-721 and return correct 4 bytes hash to receive ERC-721 token as below.\n\n```text\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        internal returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\n        return (retval == _ERC721_RECEIVED);\n    }\n```\n\n`_transferFrom` actually transfers ownership of a given `tokenId` as below.\n\n```text\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _clearApproval(tokenId);\n\n        _ownedTokensCount[from].decrement();\n        _ownedTokensCount[to].increment();\n\n        _tokenOwner[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n```\n\n#### \\(4\\) `function _mint(address to, uint256 tokenId) internal` <a id=\"4-function-_mint-address-to-uint256-tokenid-internal\"></a>\n\n`_mint` is not part of ERC-721. However we need a way to create new ERC-721 tokens and introduced `_mint` to create new tokens in this implementation as below.\n\n```text\n    function _mint(address to, uint256 tokenId) internal {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _tokenOwner[tokenId] = to;\n        _ownedTokensCount[to].increment();\n\n        emit Transfer(address(0), to, tokenId);\n    }\n```\n\n`_mint` is an internal method and can be invoked inside of this contract. In `MyERC721Card.sol`, `_mint` is invoked only from the `mintCard` method in the `MyERC721Card` contract. Only the owner of the smart contract can invoke `mintCard`.\n\n```text\n    function mintCard(string name, address account) public {\n        require(owner == msg.sender); // Only the Owner can create Items\n        uint256 cardId = cards.length; // Unique card ID\n        cards.push(Card(name, 1));\n        _mint(account, cardId); // Mint a new card\n    }\n```\n\n## 2. Deploying Smart Contract\n\nYou can use Remix Online IDE or use truffle to deploy above `MyERC721Card` smart contract.\n\n### 2.1 Deploying smart contract using Remix Online IDE <a id=\"2-1-deploying-smart-contract-using-kaia-ide\"></a>\n\n* Please visit [Kaia Plugin for Remix](https://ide.kaia.io) and create a `MyERC721Card` contract. The complete source code is given at [Writing ERC-721 Smart Contract](#1-writing-erc-721-smart-contract).\n* Create an account to deploy the contract with.\n  * If you do not have an account yet, create one at [https://toolkit.kaia.io/account/accountKeyLegacy](https://toolkit.kaia.io/account/accountKeyLegacy).\n  * Get some test KAIA from the faucet - [https://faucet.kaia.io](https://faucet.kaia.io)\n* Let's deploy `MyERC721Card.sol` as below.\n\n![ERC721-1-deploy](/img/build/smart-contracts/erc721-1-deploy.png)\n\nNow `MyERC721Card` is live! You can mint and transfer cards which are ERC-721 compatible non-fungible tokens.\n\nLet's mint two cards, i.e. `King` and `Queen` cards, for account `0x2645BA5Be42FfEe907ca8e9d88f6Ee6dAd8c1410` as below.\n\n![ERC721-2-mint-king](/img/build/smart-contracts/erc721-2-mint-king.png) ![ERC721-3-mint-queen](/img/build/smart-contracts/erc721-3-mint-queen.png)\n\nNow we have minted two cards and let's check the status of these `MyERC721Card` non-fungible token.\n\n![ERC721-4-cards-status](/img/build/smart-contracts/erc721-4-cards-status.png)\n\n* `balanceOf` shows that account `0x2645BA5Be42FfEe907ca8e9d88f6Ee6dAd8c1410` has two cards.\n* `cards` with parameter `1` shows that `MyERC721Card` with token ID `1` is a `Queen` of level 1.\n* `ownerOf` with parameter `0` shows that owner of `MyERC721Card` with token ID `0` is `0x2645BA5Be42FfEe907ca8e9d88f6Ee6dAd8c1410`.",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/samples/kaiagreeter. # KaiaGreeter\n\n`KaiaGreeter` is a simple contract that returns a greeting message. Greeting message is set when the contract is deployed.\n\n## Writing KaiaGreeter <a href=\"#writing-kaiagreeter\" id=\"writing-kaiagreeter\"></a>\n\n```\npragma solidity 0.5.6;\ncontract Mortal {\n    /* Define variable owner of the type address */\n    address payable owner;\n    /* This function is executed at initialization and sets the owner of the contract */\n    constructor () public { owner = msg.sender; }\n    /* Function to recover the funds on the contract */\n    function kill() public { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract KaiaGreeter is Mortal {\n    /* Define variable greeting of the type string */\n    string greeting;\n    /* This runs once when the contract is created */\n    constructor (string memory _greeting) public {\n        greeting = _greeting;\n    }\n    /* Main function */\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n}\n```\n\n## Deploying KaiaGreeter using Remix Online IDE <a href=\"#deploying-kaiagreeter-using-kaia-ide\" id=\"deploying-kaiagreeter-using-kaia-ide\"></a>\n\n* Please visit [Kaia Plugin for Remix](https://ide.kaia.io) and create a `KaiaGreeter` contract. The complete source code was given in the above.\n* Prepare your account which will be used to deploy the contract.\n  * If you do not have an account yet, create one at [https://toolkit.kaia.io/account/accountKeyLegacy](https://toolkit.kaia.io/account/accountKeyLegacy).\n  * Get some test KAIA from the faucet - [https://kairos.wallet.kaia.io/faucet](https://kairos.wallet.kaia.io/faucet)\n* Deploy the contract with initial parameter, a greeting message.\n* After deploying, you can invoke `greet` from the IDE.\n\n## References <a href=\"#references\" id=\"references\"></a>\n\nFor the details of contract deployment and the Remix Online IDE usage guideline, please refer to the following documents.\n\n* [Remix Online IDE](../../smart-contracts/ide-and-tools/ide-and-tools#kaia-ide)\n* [Deploy Guide](../deploy/deploy)",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/samples. # Sample Contracts\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/smart-contracts. # Smart Contracts\n\nThis section covers the development resources for the Smart Contract development.\n\nTo write smart contracts, Kaia currently supports [Solidity](https://github.com/ethereum/solidity) as the primary programming language. Solidity is adopted in Kaia because it is a _de facto_ standard contract programming language for Ethereum and has a large user base and an active community. The Kaia team decided to provide the users with familiar development experience so that the Ethereum DApp developers could easily experiment with or migrate their existing smart contracts to Kaia.\n\nIn the future, Kaia also plans to support writing smart contracts using other programming languages. The Kaia team is investigating various favorable programming languages that developers might embrace.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/solidity-smart-contract-language. # Solidity - Smart Contract Language\n\nThis chapter describes only the high-level concepts, development processes, and examples written in Solidity because Solidity is already well documented on its official websites. For language specifications or implementations, please refer to the [References](#references) below. The content of this chapter is based on various websites listed in the [References](#references).\n\n## Solidity and Kaia <a id=\"solidity-and-kaia\"></a>\n\n[Solidity](https://github.com/ethereum/solidity) is a high-level, statically typed, contract-oriented language for implementing smart contracts on the Ethereum platform. Although Solidity was originally designed for Ethereum, it is general enough to write smart contracts; therefore, it can also be used for other blockchain platforms, such as Kaia.\n\nKaia is officially compatible with **London** Ethereum Virtual Machine (EVM) version. Backward compatibility is not guaranteed with other EVM versions on Kaia. Thus, it is highly recommended to compile Solidity code with the Istanbul target option. Please refer to [how to set the EVM version of solc](https://solidity.readthedocs.io/en/latest/using-the-compiler.html#setting-the-evm-version-to-target).  \n\n:::note\n\nv1.7.0 Protocol Upgrade - incompatible changes including **Istanbul** hard fork items and Kaia's own items.\nIt has been enabled from block number `#75,373,312` in case of Kairos network and `#86,816,005` for the Mainnet.\n\nv1.7.3 Protocol Upgrade - incompatible changes including Base Fee from the **London** hard fork.\nIt has been enabled from block number `#80,295,291` in case of Kairos network and `#86,816,005` for the Mainnet.\n\nv1.8.0 Protocol Upgrade - incompatible changes including Base Fee from the **London** hard fork.\nIt has been enabled from block number `#86,513,895` in case of Kairos network and `#86,816,005` for the Mainnet.\n\n:::  \n\nDevelopment tools such as [Remix](https://remix.ethereum.org/) \\(a browser-based IDE\\) and [Truffle](https://github.com/trufflesuite/truffle) \\(a development framework\\) can be utilized when developing smart contracts for Kaia. The Kaia team will attempt to maintain compatibility between Ethereum's development tools and Kaia's but may elect to provide the Kaia smart contract developers with enhanced or updated versions of those tools when necessary.\n\nIt is convenient to utilize Remix or Truffle to develop smart contracts, but the Solidity compiler can be used locally, by building or installing it by following the instructions described in the web page below:\n\n* [Installing the Solidity Compiler](https://docs.soliditylang.org/en/latest/installing-solidity.html)\n\nNote that there are two command-line Solidity compilers:\n\n* _solc_: the full-featured compiler\n  * Covered in the Solidity documentation\n* _solcjs_: Javascript binding for _solc_\n  * Maintained as a separate project [solc-js](https://github.com/ethereum/solc-js)\n  * _solcjs_'s command-line options are not compatible with those of _solc_.\n\nOther materials that are useful for getting started with Solidity include the following:\n\n* [Top Solidity tutorials](https://medium.com/coinmonks/top-solidity-tutorials-4e7adcacced8)\n\n## How to Write a Smart Contract <a id=\"how-to-write-a-smart-contract\"></a>\n\nThis section presents an example of Solidity source code to provide readers with an idea of how smart contracts look and how to write a contract. Note that the code included here is provided solely for explanatory purposes; it is not intended for production purposes. In the code, `(require)` means that the line is required for any Solidity source file while `(optional)` indicates that the line is not always needed. The symbol `Ln:` is not part of the Solidity code and is included here only to show the line numbers. Please do not include these symbols in source code intended for real use.\n\n```text\nL01: pragma solidity 0.5.12;   // (required) version pragma\nL02:\nL03: import \"filename\";        // (optional) importing other source files\nL04:\nL05: // (optional) smart contract definition\nL06: contract UserStorage {\nL07:    mapping(address => uint) userData;  // state variable\nL08:\nL09:    function set(uint x) public {\nL10:       userData[msg.sender] = x;\nL11:    }\nL12:\nL13:    function get() public view returns (uint) {\nL14:       return userData[msg.sender];\nL15:    }\nL16:\nL17:    function getUserData(address user) public view returns (uint) {\nL18:       return userData[user];\nL19:    }\nL20: }\n```\n\nThe above code should be self-explanatory; thus people familiar with any other programming language can skip the following explanation in this section and jump to the next section. However, for those who do not gain a clear understanding of what the code does or those for whom Solidity is a first programming language, we include a short description of the source code below:\n\n* The portions of the code starting with a double forward slash \\(`//`\\) are comments rather than code; they are used to annotate and explain the code.  The compiler ignores comments.\n* The `pragma` statement in `L01` indicates the minimum compiler version.  \n* The `import` statement in `L03` imports all global symbols from \"`filename`\". The `filename` should be an actual file name.\n* `L05` - `L20` define a smart contract called `UserStorage`.  The keyword `contract` is located before the contract name and declares that the code represents a smart contract.  Contracts in Solidity are similar to classes in object-oriented languages.  Each contract can contain declarations for state variables, functions, function modifiers, events, struct types and enum types.  Furthermore, contracts can inherit from other contracts.  The example code contains one contract definition, but a single Solidity file may contain more than one contract definition.\n* In `L07`, `userData` is a state variable for the mapping type.  State variables are permanently stored in contract storage.  The state variable `userData` maintains a mapping between `address` and a `uint` value.  The `address` type holds a 20-byte address \\(Kaia uses a 20-byte address similar to Ethereum\\).\n* `L09` defines a public function `set` that saves the value `x` in `userData` for the message's sender.  The variable `msg.sender` is a special variable defined in Solidity that represents the address of the message \\(_i.e._, current call\\) sender.  The keyword `public` means that the function is part of the contract interface and can be called externally or internally.\n* The functions `get` in `L13` and `getUserData` in `L17` are declared with `view`, which means that the functions promise not to modify any state variable.  Their declarations include `returns (uint)`, which implies that they return a `uint` value.\n\nFor more information concerning the syntax and semantics of the Solidity language, please refer to the [Solidity documentation](https://docs.soliditylang.org/).\n\n## How to Compile, Deploy, and Execute <a id=\"how-to-compile-deploy-and-execute\"></a>\n\nOne way to compile Solidity code is to use the command-line compiler _solc_. This compiler can produce various outputs, ranging from simple binaries and assembly to an abstract syntax tree \\(parse tree\\). Assuming that the code above is saved in `UserStorage.sol` \\(`L03` is excluded in the source file shown above\\), some examples of compiling the file `UserStorage.sol` are as follows.\n\n```bash\n$ solc --bin UserStorage.sol\n```\n\n* This command will print the compilation output as a binary, _i.e._, bytecode.\n\n```bash\nsolc -o output --bin --ast --asm UserStorage.sol\n```\n\n* The compiler generates a binary \\(by `--bin`\\), an abstract syntax tree \\(by `--ast`\\), and assembly code \\(by `--asm`\\) as separate files in the `output` directory.\n\n```bash\nsolc --optimize --bin UserStorage.sol\n```\n\n* For better performance, the optimizer can be activated during compilation using the `--optimize` flag.\n\nSome resources for compiling, deploying, and executing smart contracts are listed below.\n\n* [Using the Solidity command-line compiler](https://docs.soliditylang.org/en/latest/using-the-compiler.html)\n* [Compiling contracts using Remix](https://remix-ide.readthedocs.io/en/stable/compile.html)\n* [Running transactions with Remix](https://remix-ide.readthedocs.io/en/stable/run.html)\n* [Remix Learneth Tutorials](https://remix-ide.readthedocs.io/en/latest/remix_tutorials_learneth.html)\n* [Compiling contracts with Truffle](https://trufflesuite.com/docs/truffle/getting-started/compiling-contracts)\n* [Deploying contracts with Truffle](https://trufflesuite.com/docs/truffle/getting-started/running-migrations)\n\nNOTE: This section will be updated in the future.\n\n## Debugging Smart Contracts <a id=\"debugging-smart-contracts\"></a>\n\nIt is more difficult to debug Solidity code than to debug code written in other programming languages due to the lack of mature debugging tools. Below, we list some resources for Solidity debugging.\n\n* [Debugging a transaction with Remix](https://remix-ide.readthedocs.io/en/latest/debugger.html)\n* [Tutorial on debugging transactions with Remix](https://remix-ide.readthedocs.io/en/latest/tutorial_debug.html)\n* [Debugging contracts with Truffle](https://trufflesuite.com/docs/truffle/getting-started/using-the-truffle-debugger/)\n\nNOTE: This section will be updated in the future.\n\n## Smart Contract Best Practices <a id=\"smart-contract-best-practices\"></a>\n\nTo eliminate security concerns and code quality issues from your smart contract, it is important to study and follow best practices in Solidity programming. Here, we show a reference for Solidity best practices.\n\n* [Smart Contract Security Best Practices](https://github.com/ConsenSys/smart-contract-best-practices)\n\nNOTE: This section will be updated in the future.\n\n## References <a id=\"references\"></a>\n\n* [Solidity GitHub page](https://github.com/ethereum/solidity)\n* [Solidity documentation](https://solidity.readthedocs.io/en/latest/index.html)\n* [Remix documentation](https://remix-ide.readthedocs.io/en/latest/)\n* [Truffle documentation](https://trufflesuite.com/docs/truffle/)\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/testing-guide. # Test Smart Contracts\n\nIn this section, we'll introduce how to test smart contracts. Because any transaction on the blockchain is not reversible, testing your smart contract is crucial before you deploy the contract.\n\n## Testing with Truffle <a href=\"#testing-with-truffle\" id=\"testing-with-truffle\"></a>\n\nTruffle provides an automated testing framework. This framework lets you write simple and manageable tests in two different ways:\n\n* In `Javascript` and `TypeScript`, for exercising your contracts from the outside world, just like application.\n* In `Solidity`, for exercising your contracts in advances, bare-to-the-metal scenarios.\n\n### 1) Getting started <a href=\"#1-getting-started\" id=\"1-getting-started\"></a>\n\nWe will follow the [Deployment Guide using Truffle](./deploy/deploy#truffle) to create a contract and deploy it. But, before we deploy it, we will add a setter function `setGreet` to the contract for testing purpose. The source code is given below.\n\n**NOTE:** We have made some modifications to the contract for testing.\n\nBelow is KaiaGreeting contract source code.\n\n```\npragma solidity 0.5.6;\n\ncontract Mortal {\n    /* Define variable owner of the type address */\n    address payable owner;\n    /* This function is executed at initialization and sets the owner of the contract */\n    constructor () public { owner = msg.sender; }\n    /* Function to recover the funds on the contract */\n    function kill() public payable { if (msg.sender == owner) selfdestruct(owner); }\n}\n\ncontract KaiaGreeter is Mortal {\n    /* Define variable greeting of the type string */\n    string greeting;\n\n    /* This runs when the contract is executed */\n    constructor (string memory _greeting) public {\n        greeting = _greeting;\n    }\n\n    /* Main function */\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    /* Newly added function for testing. */\n    function setGreet(string memory _greeting) public {\n        // only owner can change greeting message\n        require(msg.sender == owner, \"Only owner is allowed.\");\n        greeting = _greeting;\n    }\n}\n```\n\nWe will test 1) `greet()` function whether it returns \"Hello, Kaia\" message properly, 2) `setGreet()` function whether it set new greeting message properly and reverts when non-owner account attempts to update the greeting.\n\nFirst, we will install the Chai assertions library (or any different assertions library you use) for generic assertions, and the truffle-assertions library for the smart contract assertions.\n\n```\nnpm install --save-dev chai truffle-assertions\n```\n\n### 2) Writing test in Solidity <a href=\"#2-writing-test-in-solidity\" id=\"2-writing-test-in-solidity\"></a>\n\nTesting with Solidity can be a little bit more intuitive than JavaScript tests. Solidity test contracts live alongside JavaScript tests as .sol files.\n\nCreate a file called `TestKaiaGreeting.sol` in the `test` folder. The Truffle suite provides us with helper libraries for testing, so we need to import those. Let's take a look at the example Solidity test:\n\n```\npragma solidity ^0.5.6;\n\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/HashMarket.sol\";\n```\n\n* Assert : It gives us access to various testing functions, like `Assert.equals()`, `Assert.greaterThan()`, etc.\n* DeployedAddresses : Every time you change your contract, you must redeploy it to a new address. You can get the deployed contract addresses through this library.\n\nNow, Let's write a test code.\n\n```\npragma solidity ^0.5.6;\n\nimport \"truffle/Assert.sol\";\nimport \"truffle/DeployedAddresses.sol\";\nimport \"../contracts/KaiaGreeter.sol\";\n\ncontract TestKaiaGreeter {\n\n    function testGreetingMessage() public {\n        // DeployedAddresses.KaiaGreeter() handles contract address.\n        KaiaGreeter greeter = KaiaGreeter(DeployedAddresses.KaiaGreeter());\n\n        string memory expectedGreet = \"Hello Kaia\";\n\n        string memory greet = greeter.greet();\n\n        Assert.equal(greet, expectedGreet, \"greeting message should match\");\n    }\n}\n```\n\nRun your Solidity test code.\n\n```\n$ truffle test\n# Output\nUsing network 'development'.\n\n\nCompiling your contracts...\n===========================\n> Compiling ./test/TestKaiaGreeter.sol\n\n\n\n  TestKaiaGreeter\n    1) testGreetingMessage\n\n    Events emitted during test:\n    ---------------------------\n\n\n    ---------------------------\n\n\n  0 passing (5s)\n  1 failing\n\n  1) TestKaiaGreeter\n       testGreetingMessage:\n     Error: greeting message should match (Tested: Hello, Kaia, Against: Hello Kaia)\n      at result.logs.forEach.log (/Users/jieunkim/.nvm/versions/node/v10.16.0/lib/node_modules/truffle/build/webpack:/packages/core/lib/testing/soliditytest.js:71:1)\n      at Array.forEach (<anonymous>)\n      at processResult (/Users/jieunkim/.nvm/versions/node/v10.16.0/lib/node_modules/truffle/build/webpack:/packages/core/lib/testing/soliditytest.js:69:1)\n      at process._tickCallback (internal/process/next_tick.js:68:7)\n```\n\nOops, we failed. Let's check the error message,`Error: greeting message should match (Tested: Hello, Kaia, Against: Hello Kaia)`. I can notice the missed `',(comma)'` at _string memory expectedGreet = \"Hello Kaia\"_.\\\nFix the code and run the test again.\n\n```\n$ truffle test\n# Output\nUsing network 'development'.\n\n\nCompiling your contracts...\n===========================\n> Compiling ./test/TestKaiaGreeter.sol\n\n\n\n  TestKaiaGreeter\n    ✓ testGreetingMessage (58ms)\n\n\n  1 passing (5s)\n```\n\nCongratulations! Your test has passed.\n\n### 3) Writing test in JavaScript <a href=\"#3-writing-test-in-javascript\" id=\"3-writing-test-in-javascript\"></a>\n\nTruffle uses the [Mocha](https://mochajs.org/) testing framework and [Chai](https://www.chaijs.com/) assertion library to provide a solid framework for JavaScript test. JavaScript test gives you more flexibility and enables you to write more complex tests.\n\nLet's create a file and name it `0_KaiaGreeting.js` under `test` directory.\\\n\nThe test code is:\n\n```javascript\n// Interacting directly with KaiaGreeter contract\nconst KaiaGreeter = artifacts.require(\"./KaiaGreeter.sol\");\nconst truffleAssert = require('truffle-assertions');\n\ncontract(\"KaiaGreeter\", async(accounts) => {\n    // store the contract instance at a higher level \n    // to enable access from all functions.\n    var klaytnGreeterInstance;\n    var owner = accounts[0];\n    var greetMsg = \"Hello, Kaia\";\n\n    // This will run before each test proceed.\n    before(async function() {\n        // set contract instance into a variable\n        klaytnGreeterInstance = await KaiaGreeter.new(greetMsg, {from:owner});\n    })\n\n    it(\"#1 check Greeting message\", async function() {\n        // set the expected greeting message\n        var expectedGreeting = greetMsg;\n        var greet= await klaytnGreeterInstance.greet();\n        assert.equal(expectedGreeting, greet, \"greeting message should match\");\n        \n    })\n\n    it(\"#2 update greeting message.\", async function() {\n        var newGreeting = \"Hi, Kaia\";\n        \n        await klaytnGreeterInstance.setGreet(newGreeting, { from:owner });\n        var greet = await klaytnGreeterInstance.greet();\n        assert.equal(newGreeting, greet, \"greeting message should match\");\n    });\n\n    it(\"#3 [Failure test] Only owner can change greeting.\", async function() {\n        var fakeOwner = accounts[1];        \n        await truffleAssert.fails(klaytnGreeterInstance.setGreet(greetMsg, { from:fakeOwner }));\n    });\n});\n```\n\nIf you are unfamiliar with `Mocha` unit test, please check the [Mocha document](https://mochajs.org/#getting-started).\n\n* Use `contract()` instead of `describe()`\n\n  Structurally, the Truffle test code shouldn't be much different from the usual test code of Mocha. Your test should contain the code that Mocha will recognize it as an automated test. The difference between Mocha and Truffle test is the contract() function.\n\n  **NOTE** the use of the `contract()` function, and the `accounts` array for specifying available Kaia accounts.\n* Contract abstractions within your tests\n\n  Since Truffle has no way of detecting which contract you'll need to interact with during test, you should specify the contract explicitly. One way to do this is by using the `artifacts.require()` method.\n* `it` syntax\n\n  This represents each test case with description. The description will print on the console on test-run.\n* `truffle-assertion` library\n\n  This library allows you to easily test reverts or other failures by offering the `truffleAssert.reverts()` and `truffleAssert.fails()` functions.\n\nThe output should like the following:\n\n```\nUsing network 'development'.\n\n\nCompiling your contracts...\n===========================\n> Everything is up to date, there is nothing to compile.\n\n\n\n  Contract: KaiaGreeter\n    ✓ #1 check Greeting message\n    ✓ #2 update greeting message. (46ms)\n    ✓ #3 [Failure test] Only owner can change greeting.\n\n\n  3 passing (158ms)\n```\n\nCongratulations! Your test has passed.\n\n### 4) Specifying test <a href=\"#4-specifying-test\" id=\"4-specifying-test\"></a>\n\nYou can choose the test file to be executed.\n\n```\ntruffle test ./test/0_KaiaGreeting.js\n```\n\nFor more details, please check [Truffle testing](https://www.trufflesuite.com/docs/truffle/testing/testing-your-contracts) and [Truffle commands](https://www.trufflesuite.com/docs/truffle/reference/truffle-commands#test) for details.\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/token-standard. # Kaia Compatible Tokens (KCTs)\n\nKaia Compatible Token (KCT) is a special type of smart contract that implements certain technical specifications. Everyone who wants to issue tokens on top of Kaia must follow the specification.  \n\nToken standards are defined in Kaia such as [KIP-7](https://kips.kaia.io/KIPs/kip-7) and [KIP-17](https://kips.kaia.io/KIPs/kip-17).\n\nOther KCTs can be defined to meet certain technical specifications. If anyone needs other token standards, please visit [Kaia Improvement Proposal](https://github.com/kaiachain/KIPs) and propose a new token standard.\n\n## Fungible Token Standard \\(KIP-7\\) <a id=\"fungible-token-standard-kip-7\"></a>\n\nFungible tokens are tokens that have properties of uniformity and divisibility. Every fungible token is interchangeable as each unit of token possesses the same value. Just like every dollar bill has the same value of one dollar. Since fungibility is essential feature to crypto currency in most cases, large proportion of blockchain tokens are fungible tokens.\n\nTo implement these properties with smart contracts, KIP-7 token standard can be used. KIP-7-compatible tokens implement the following interface. Please note that [KIP-13](https://kips.kaia.io/KIPs/kip-13) must be implemented together. For wallet applications, [wallet interface](https://kips.kaia.io/KIPs/kip-7#wallet-interface) can be implemented.\n\n```solidity\n// IKIP7\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n\nfunction totalSupply() external view returns (uint256);\nfunction balanceOf(address account) external view returns (uint256);\nfunction transfer(address recipient, uint256 amount) external returns (bool);\nfunction allowance(address owner, address spender) external view returns (uint256);\nfunction approve(address spender, uint256 amount) external returns (bool);\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\nfunction safeTransfer(address recipient, uint256 amount, bytes data) external;\nfunction safeTransfer(address recipient, uint256 amount) external;\nfunction safeTransferFrom(address sender, address recipient, uint256 amount, bytes data) external;\nfunction safeTransferFrom(address sender, address recipient, uint256 amount) external;\n\n// IKIP7Metadata (optional)\nfunction name() external view returns (string memory);\nfunction symbol() external view returns (string memory);\nfunction decimals() external view returns (uint8);\n\n// IKIP7Mintable (optional)\nfunction mint(address _to, uint256 _amount) external returns (bool);\nfunction isMinter(address _account) external view returns (bool);\nfunction addMinter(address _account) external;\nfunction renounceMinter() external;\n\n// IKIP7Burnable (optional)\nfunction burn(uint256 _amount) external;\nfunction burnFrom(address _account, uint256 _amount) external;\n\n// IKIP7Pausable (optional)\nevent Paused(address _account);\nevent Unpaused(address _account);\n\nfunction paused() external view returns (bool);\nfunction pause() external;\nfunction unpause() external;\nfunction isPauser(address _account) external view returns (bool);\nfunction addPauser(address _account) external;\nfunction renouncePauser() external;\n```\n\nBased on the interface above, developers may customize tokens by adding new features and logics, and deploy them on Kaia network.\n\nFor more information, refer to the official [KIP-7 documentation](https://kips.kaia.io/KIPs/kip-7).\n\n* An example implementation is available at [https://github.com/kaiachain/kaia-contracts/blob/main/contracts/KIP/token/KIP7/KIP7.sol](https://github.com/kaiachain/kaia-contracts/blob/main/contracts/KIP/token/KIP7/KIP7.sol).\n\n## Non-fungible Token Standard \\(KIP-17\\) <a id=\"non-fungible-token-standard-kip-17\"></a>\n\nNon-fungible token \\(NFT\\) is a special type of token that represents a unique asset. As the name non-fungible implies, every single token is unique and non-divisible. This uniqueness of non-fungible token opens up new horizons of asset digitization. For example, it can be used to represent digital art, game items, or any kind of unique assets and allow people to trade them.\n\nFor example, a blockchain collection game [Cryptokitties](https://www.cryptokitties.co/) implements non-fungible token to represent different kitties that have different genetic information. Every kitty is unique and non-interchangeable, resulting in different values for different kitty tokens.\n\nTo implement non-fungible token, [KIP-17](https://kips.kaia.io/KIPs/kip-17) can be used. KIP-17 token contracts implement the following interface. Please note that [KIP-13](https://kips.kaia.io/KIPs/kip-13) must be implemented together. For wallet applications, [wallet interface](https://kips.kaia.io/KIPs/kip-17#wallet-interface) can be implemented.\n\n```solidity\n// IKIP17\nevent Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\nevent Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\nevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\nfunction balanceOf(address _owner) external view returns (uint256);\nfunction ownerOf(uint256 _tokenId) external view returns (address);\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external payable;\nfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction transferFrom(address _from, address _to, uint256 _tokenId) external payable;\nfunction approve(address _approved, uint256 _tokenId) external payable;\nfunction setApprovalForAll(address _operator, bool _approved) external;\nfunction getApproved(uint256 _tokenId) external view returns (address);\nfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\n\n// IKIP17Metadata (optional)\nfunction name() external view returns (string _name);\nfunction symbol() external view returns (string _symbol);\nfunction tokenURI(uint256 _tokenId) external view returns (string);\n\n// IKIP17Enumerable (optional)\nfunction totalSupply() external view returns (uint256);\nfunction tokenByIndex(uint256 _index) external view returns (uint256);\nfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n\n// IKIP17Mintable (optional)\nfunction mint(address _to, uint256 _tokenId) public returns (bool);\nfunction isMinter(address _account) public view returns (bool);\nfunction addMinter(address _account) public;\nfunction renounceMinter() public;\n\n// IKIP17MetadataMintable (optional)\nfunction mintWithTokenURI(address _to, uint256 _tokenId, string memory _tokenURI) public returns (bool);\nfunction isMinter(address _account) public view returns (bool);\nfunction addMinter(address _account) public;\nfunction renounceMinter() public;\n\n// IKIP17Burnable (optional)\nfunction burn(uint256 _tokenId) public;\n\n// IKIP17Pausable (optional)\nevent Paused(address _account);\nevent Unpaused(address _account);\nfunction paused() public view returns (bool);\nfunction pause() public;\nfunction unpause() public;\nfunction isPauser(address _account) public view returns (bool);\nfunction addPauser(address _account) public;\nfunction renouncePauser() public;\n```\n\nBased on the interface above, developers may customize tokens by adding new features and logics, and deploy them on Kaia network.\n\nFor more information, refer to the official [KIP-17 documentation](https://kips.kaia.io/KIPs/kip-17).\n\n* An example implementation is available at [https://github.com/kaiachain/kaia-contracts/blob/main/contracts/KIP/token/KIP17/KIP17.sol](https://github.com/kaiachain/kaia-contracts/blob/main/contracts/KIP/token/KIP17/KIP17.sol).\n\n## Token Standards for Kaia Service Chain <a id=\"token-standards-for-kaia-service-chain\"></a>\n\nService chain refers to Kaia's side chain that anchors to Kaia's main blockchain network. When implementing a service chain, special type of contracts are used to support value transfer between the main chain and the service chain. These contracts are currently under development, and when they are ready, the token specifications for Kaia service chain will be provided on KaiaDocs.\n\n## Notes on ERC-20 and ERC-721 <a id=\"notes-on-erc-20-and-erc-721\"></a>\nSince Kaia published KIP-7 and KIP-17 as its token standards, it is recommended to implement fungible and non-fungible token contracts according to KIP-7 and KIP-17, respectively, rather than following ERC-20 and ERC-721.\nKIP-7 and KIP-17 are based on ERC-20 and ERC-721, but they are tailored for Kaia and thus more suitable on Kaia ecosystem. Yet ERC-20 and ERC-721 are still supported on Kaia network, they may not be compatible with various tools in Kaia ecosystem. \nFor more information about the differences on token standards, please visit [KIP-7](https://kips.kaia.io/KIPs/kip-7#differences-with-erc-20) and [KIP-17](https://kips.kaia.io/KIPs/kip-17#differences-from-erc-721).\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/verify/block-explorers. ---\nsidebar_label: Using Block Explorers\n---\n\n# How to verify Smart Contracts Using Block Explorers\n\n## Introduction\n\nUsually, the deployer of a smart contract is the only party with access to the code that was actually deployed, and the public cannot read the source code of a contract until the deployer has verified it. However, this is where contract verification comes in as an important step in the smart-contract development cycle, as it helps improve the transparency (for users), convenience (for developers), and security of deployed contracts.\n\nHaving said that, once a smart contract is validated, block explorers like Kaiascope and Kaiascan also make it possible for the public to interact with the contract's public methods using the block explorer's user interface. This is in addition to the public having direct access to the verified contract source code.\n \nIn this guide, we'll take a look at how to use block explorers to verify deployed smart contracts on the Kaia Network.\n\n## Prerequisites\n\n* [Remix IDE](https://ide.kaia.io/) and [Kaia Wallet](https://docs.kaiawallet.io/getting_started/quick_start#install-kaia-wallet)\n* Enough test KAIA from [faucet](https://faucet.kaia.io)\n\n## Getting Started\n\nIn this guide, we will be going over verifying both single contracts and multi-part contracts on the block explorers that exist in the Kaia ecosystem, viz.:\n\n* [Kaiascope](https://kaiascope.com/) \n* [Kaiascan](https://www.kaiascan.io/)\n\nWithout further ado, let's get started!\n\n## Deploying a single Contract\n\nTo verify a smart contract, you need to deploy the contract first on the target network. Hence, for the sake of this guide, we will be deploying the contract to Kaia Kairos Testnet. Also, in this tutorial, we will be deploying a simple counter contract named `Counter.sol` on Remix IDE. The code is shown below: \n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ncontract Counter {\n    uint256 public count;\n    constructor(uint256 _initialCount) {\n        count = _initialCount;\n    }\n    function incrementCounter() public {\n        count++;\n    }\n    function decrementCounter() public {\n        count--;\n    }\n    function resetCounter() public {\n        count = 0;\n    }\n}\n``` \n\n:::note\n\nYou can check this page for a tutorial on deploying smart contracts using [libraries](../../../references/sdk/sdk) on Kaia Kairos Testnet. You may also use a developer tool such as [Hardhat](../../get-started/hardhat), [Foundry](../deploy/foundry), [Remix](../deploy/deploy#remix-ide)  or another tool if preferred, to deploy the smart contract to Kaia Kairos Testnet.\n\n:::\n\n## Parameters for single contract verification\n\nVerifying a contract on the block explorers requires some parameters, and these must be considered while deploying the smart contract. The following are some details related to the contract's compiler and deployment in order to verify a contract successfully: \n\nRemix IDE :\n\n* On Remix IDE, navigate to the **Solidity compiler tab**.\n    * Observe the **compiler version** used to compile and deploy the contract.\n    * Observe the **Open Source License Type** used in the contract. This means the SPDX license identifier used at the beginning of the Solidity source file. In the `Counter.sol` file we used `// SPDX-License-Identifier: MIT`\n    * Observe the **EVM version** used for deploying contracts.\n    * (Optional) If **optimization** is enabled during compilation, take note of the value of the optimization runs parameter\n\n    ![](/img/build/tutorials/counter-veri-parameters.png)\n   \n* On Remix IDE, navigate to **Kaia tab**.\n    * (Optional) If the contract constructor method accepts arguments, take note of the [ABI-encoded form](https://docs.soliditylang.org/en/develop/abi-spec.html) of the constructor arguments\n    * Take note of the contract address of the smart contract on the **Deployed Contracts** tab after successful deployment. \n\n    ![](/img/build/tutorials/counter-veri-parametersII.png)\n\n## Deploying a multi-part contract\n\nIt is important to note that deploying a multi-part contract involves the same steps as deploying a single contract. For the sake of this guide, we will be deploying a simple KIP7 airdrop contract named `airdropToken.sol`. The code is shown below:\n \n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP7/KIP7.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\n// the creator of the project mints certian amount of fungible tokens directly to a certain selection of wallets.\ncontract TokenAirdrop is KIP7, Ownable {\n    constructor() KIP7(\"Token Aidrop Demo\", \"TAD\") {\n    }\n    // Airdrop Token\n    function airdropTokens(address[] calldata wAddresses, uint[] calldata tAmount) public onlyOwner {\n        require(wAddresses.length == tAmount.length, \"Must be same lenght\");\n        for (uint256 i = 0; i < wAddresses.length; i++) {\n            _mintSingleTokens(wAddresses[i], tAmount[i]);\n        }\n    }\n    function _mintSingleTokens(address wAddress, uint amount) private {\n        _mint(wAddress, amount);\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId);\n    }\n}\n```\n\n## Parameters for multi-part contract verification\n\nThe parameters for verifying a multi-part contract are the same as those for a single contract. However, because they are made up of multiple dependent contracts, we need to pre-process all dependencies of the contract into a single solidity file. This preprocessing is usually referred to as smart contract flattening. \n\nFor this reason, we will have to flatten the contract so it can be verified using the new flattened Solidity file on the block explorer.\n\nRemix IDE:\n\n* On Remix IDE, navigate to the **File explorer tab**.\n    * Select the newly created contract under the **contracts** folder\n    * Click or tap with two fingers to see all commands available on the contract. \n    * Select **flatten**\n\n    ![](/img/build/tutorials/airdropToken-flattened.png)\n\n    * Once the code is flattened, you will see a new contract named `airdropTokens_flattened.sol`. \n\n    ![](/img/build/tutorials/airdropToken-flattened-file.png)\n\n:::note\n\nThere are different tools for flattening a multi-part smart contract into a single Solidity file, such as [Hardhat Flattener](https://hardhat.org/hardhat-runner/docs/advanced/flattening). Kindly refer to the respective smart contract flattening tool's documentation for more detailed instructions on its usage.\n\n:::\n\n## Verifying the Contract\n\nHaving obtained all of our verification parameters, we will go over the steps for verifying a single smart contract (Counter.sol) and a multi-part smart contract (airdropTokens.sol) on the block explorer in this section. \n\n### 1. Kaiascope\n\nTo verify a single contract and multi-part contracts on Kaiascope, follow the steps below:\n\n#### 1.1 Verifying a single contract\n\n1. Goto the search bar of [Kaiascope](https://kairos.kaiascope.com) and paste the deployed contract address.\n2. Navigate to the **contract tab** on that page.\n3. Click on the **Match Contract Source Code** link to submit the contract code for verification.\n\n![](/img/build/tutorials/counter-contract-tab.png)\n\n4. On the contract verification page, make sure your account is connected to either Kaia Wallet or Metamask. For this guide, we will be using Kaia Wallet. \n5. Fill in the contract address in the **contract address field**. Note: This field is usually filled with the contract address automatically.\n6. Select the **compiler version** used for the `Counter.sol` example.\n7. Select the **Open Source License Type** used for the `Counter.sol` example. For `Counter.sol` example, select the option, **MIT License (MIT)**. If there was none used, select **No License (None)**.\n8. In the **Source Code field**, select **Source Text** and paste the source code for `Counter.sol` in the text field.\n9. Select **True** for **Optimization** if it was enabled during compilation, and fill in the number of runs under **Optimization Runs** to be **200**.\n10. Select the **EVM version** for the contract. For `Counter.sol` example, select the option **Istanbul**.\n11. Click on the CAPTCHA at the bottom and the **Sign and Submit** button to confirm and begin verification.\n\n![](/img/build/tutorials/counter-verification-page.png)\n\n12. After signing the verification request, you will get a verification status notification\n\n![](/img/build/tutorials/counter-success-popup.png)\n\n13. Once verification is done, the result of the verification will be displayed in the browser, and a success result page with the contract address. Click on the contract address to view the **Contract Source Code**, **Contract ABI**, and **Bytecode**.\n\n![](/img/build/tutorials/counter-success-popup-I.png)\n\n![](/img/build/tutorials/counter-full-verification.png)\n\n#### 1.2 Verifying multi-part contract\n\nVerifying a multi-part contract on Kaiascope is as straightforward as verifying a single contract, except that it requires some additional steps. In this section, we will be verifying the `airdropToken.sol` contract with the following additional steps: \n\n* You can either Select **Source Text** under **Source Code** (step 3 of the Counter.sol example) or **Solidity File(s)** under the **Source Code** field.  In the case of **Source Text**, copy the code in the `airdropToken_flattened.sol` and paste it in the text field. If **Solidity File(s)**, you can download the `airdropToken_flattened.sol` file on Remix IDE and upload it to the field.\n\na. Source Text\n\n![](/img/build/tutorials/airdrop-veri-field-I.png)\n\nb. Solidity File(s)\n\n![](/img/build/tutorials/airdrop-veri-field-II.png)\n\nAfter this, every other step remains the same as verifying a single contract. Having filled in the verification parameter, click on the **Sign and Submit** button to confirm and begin verification. \n\nOnce verification is done, the result of the verification will be displayed in the browser, and a success result page with the contract address. Click on the contract address to view the **Contract Source Code**, **Contract ABI**, and **Bytecode**.\n\n![](/img/build/tutorials/airdrop-success-popup.png)\n\n![](/img/build/tutorials/airdrop-success-popup-I.png)\n\n![](/img/build/tutorials/airdrop-full-verification.png)\n\n### 2. Kaiascan\n\nTo verify a single contract and multi-part contracts on Kaiascan, navigate to the [contract submission request page](https://kairos.kaiascan.io/contract). \n\n:::note\n\nVerification of contracts on Kaiascan is currently in beta.\n\n:::\n\n![](/img/build/tutorials/kaiascan-con-sub-page.png)\n\n#### 2.1 Verifying single contract\n\n1. Fill in the **contract address** for the deployed contract (Counter.sol)\n2. Select the **compiler version** used for the `Counter.sol` example\n3. Select the **Open Source License Type** used for the `Counter.sol` example. For `Counter.sol` example, select the option, **MIT License (MIT)**. If there was none used, select **No License (None)**\n4. Make sure to download `Counter.sol` from Remix IDE and upload it in the **Source Code (Solidity File)** field\n5. Select the **EVM version** for the contract. For `Counter.sol` example, select the option **Istanbul**.\n6. Select **True** for **Optimization** if it was enabled during compilation, and fill in the number of runs under **Optimization Runs** to be **200**.\n7. (optional) To get the ABI-encoded constructor arguments for this field, navigate to [abi.hashex.org](http://abi.hashex.org) to get the encoded data following the image below:\n\n![](/img/build/tutorials/abi-hashex.png)\n\n8. Click on the **Verify and Publish** button to begin verification. \n\n![](/img/build/tutorials/counter-k-verification-page.png)\n\n9. Once verification is done, you will get a **Submission Successful** message. Now you can paste the contract address in the explorer search bar  to view the **Contract Source Code**, **Contract ABI**, **Creation Code** and **ABI-encoded Value**.\n\n> ![](/img/build/tutorials/counter-k-full-verification.png)\n\n### 2.2 Verifying multiple-part contract\n\nVerifying a multi-part contract on Kaiascan follows the same step as verifying a single contract. However, it is important to note we will be copying and pasting the `airdropToken_flattened.sol` file in the **Enter the Solidity Contract Code below** field because Kaiascan does not currently support file upload for verification.\n\n![](/img/build/tutorials/airdrop-k-verification-page.png) \n\nAfter filling in the verification parameters, click on the **Verify and Publish** button to begin verification. Once verification is done, the verification page will refresh. Now you can paste the contract address in the explorer search bar to view the **Contract Source Code**, **Contract ABI**, and **Creation Code**.\n\n![](/img/build/tutorials/airdrop-k-full-verification.png)\n\n## Conclusion\n\nCongratulations on following this guide! In this tutorial, you learnt how to verify contracts (both single and multi-part) using Kaiascope and Kaiascan solely to enhance the transparency (for users), convenience (for developers), and security of deployed contracts. Visit [Kaia Docs](https://docs.kaia.io/) for more information and [Kaia Forum](https://devforum.kaia.io/) if you have any questions.",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/verify/hardhat. ---\nid: hardhat\ntitle: Using Hardhat\n---\n\nimport Tabs from '@theme/Tabs'\nimport TabItem from '@theme/TabItem'\n\n# How to Verify Smart Contracts Using Hardhat\n\nThis guide allows you to automatically verify your smart contracts' source code on Kaiascope straight from your CLI using the Hardhat Verify Plugin.\n\nTo verify your contract on Kaia, you need to add the following configuration to your `hardhat.config.js`:\n\n## Kaiascan\n\n<Tabs>\n    <TabItem value=\"kaia-mainnet\" label=\"Mainnet\">\n        ```js\n        module.exports = {\n          etherscan: {\n              apiKey: {\n                kaia: \"unnecessary\",\n              },\n              customChains: [\n                {\n                  network: \"kaia\",\n                  chainId: 8217,\n                  urls: {\n                    apiURL: \"https://mainnet-api.kaiascan.io/hardhat-verify\",\n                    browserURL: \"https://kaiascan.io\",\n                  }\n                },\n              ]\n            }\n        }\n        ```\n  </TabItem>\n\n  <TabItem value=\"kairos-testnet\" label=\"Kairos\">\n      ```js\n      module.exports = {\n        etherscan: {\n            apiKey: {\n              kairos: \"unnecessary\",\n            },\n            customChains: [\n              {\n                network: \"kairos\",\n                chainId: 1001,\n                urls: {\n                  apiURL: \"https://kairos-api.kaiascan.io/hardhat-verify\",\n                  browserURL: \"https://kairos.kaiascan.io\",\n                }\n              },\n            ]\n          }\n}\n      ```\n  </TabItem>\n</Tabs>\n\n## Kaiascope\n\n<Tabs>\n    <TabItem value=\"kaia-mainnet\" label=\"Mainnet\">\n        ```js\n        module.exports = {\n          networks: {\n            kaia: {\n              chainId: 8217,\n              url: \"RPC_URL\",\n            },\n          },\n          etherscan: {\n            apiKey: {\n              kaia: \"unnecessary\",\n            },\n            customChains: [\n              {\n                network: \"kaia\",\n                chainId: 8217,\n                urls: {\n                  apiURL: \"https://api-cypress.klaytnscope.com/api\",\n                  browserURL: \"https://kaiascope.com/\",\n                },\n              },\n            ]\n          }\n        }\n        ```\n  </TabItem>\n\n  <TabItem value=\"kairos-testnet\" label=\"Kairos\">\n      ```js\n      module.exports = {\n        networks: {\n          kairos: {\n            chainId: 1001,\n            url: \"RPC_URL\",\n          },\n        },\n        etherscan: {\n          apiKey: {\n            kairos: \"unnecessary\",\n          },\n          customChains: [\n            {\n              network: \"kairos\",\n              chainId: 1001,\n              urls: {\n                apiURL: \"https://api-baobab.klaytnscope.com/api\",\n                browserURL: \"https://kairos.kaiascope.com\",\n              },\n            },\n          ]\n        }\n      }\n      ```\n  </TabItem>\n</Tabs>\n\nTo verify the contract, you will run the verify command and pass in the address of the deployed contract, network and parameters if any.\n\n```bash\nnpx hardhat verify –network <network> <deployed_address> <parameters>\n\n// example\n\nnpx hardhat verify --network kairos 0x3e360fC99c4383e3adaAE9742c0fC983fDAa0535\n```\n\nIn your terminal you should see the source code for your contract was successfully submitted for verification. \n\nIf the verification was successful, you should see Successfully verified contract and there will be a link to the contract code on [Kaiascan](https://kairos.kaiascan.io/address/0x3e360fC99c4383e3adaAE9742c0fC983fDAa0535?tabId=contract&page=1) and [Kaiascope](https://baobab.klaytnscope.com/account/0x3e360fC99c4383e3adaAE9742c0fC983fDAa0535?tabId=contractCode) respectively.\n\n**Kaiascan**\n\n![](/img/build/smart-contracts/verify/kaiascan-terminal.png)\n![](/img/build/smart-contracts/verify/kaiascan-verify.png)\n\n**Kaiascope**\n\n![](/img/build/smart-contracts/verify/kaiascope-terminal.png)\n![](/img/build/smart-contracts/verify/kaiascope-verify.png)\n\n## Useful links\n\n- [Configuration for Hardhat Verify Plugin on Kaiascan](https://docs.kaiascan.io/hardhat-verify)\n- [Configuration for Hardhat Verify Plugin on Kaiascope](https://docs.klaytnscope.com/contract/configuration-for-hardhat-verify-plugin)\n- [Verifying contracts using Hardhat on Kaiascan](https://klaytn.foundation/verifying-contracts-using-hardhat-on-klaytnscope)\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/smart-contracts/verify/sourcify. ---\nsidebar_label: Using Sourcify\n---\n\n\n# How to Verify Smart Contracts Using Sourcify\n\n[Sourcify](sourcify.dev) is a Solidity (smart contracts) source code verification service for Ethereum and EVM-compatible chains like Kaia. One of its unique features is that it leverages the [Solidity metadata](https://docs.sourcify.dev/docs/metadata/) file to [\"fully verify\"](https://docs.sourcify.dev/docs/full-vs-partial-match/) the contracts. \n\nIn this guide, we'll take a look at how to verify a smart contract on Foundry using Sourcify. \n\n\n## Getting started\n\nThis guide expects that you have an idea of developing smart contracts with Foundry. See [Deploy smart contract using Foundry](../deploy/foundry) to get started. Foundry provides native support for Sourcify verification—all you need to do is add a few flags to your forge command. To verify contracts with Sourcify using Foundry, see the steps below:\n\n## Deploy and verify a contract:\n\n```bash \n/* deploy */\n\nforge create --rpc-url $KAIROS_RPC_URL --private-key $PRIVATE_KEY src/Counter.sol:Counter --broadcast \n```\n\n![](/img/build/smart-contracts/verify/sourcify-deploy.png)\n\n```bash\n//* verify an already deployed contract as seen above *//\n\nforge verify-contract 0x2a31C3f597d8FD0Fbc5Ff02439ce6c6aEFb680a2 src/Counter.sol:Counter --chain-id 1001 --verifier sourcify  --verifier-url https://sourcify.dev/server/ \n```\n\n![](/img/build/smart-contracts/verify/sourcify-verify.png)\n\nYou can look up the verified contract [here](https://sourcify.dev/#/lookup/0x2a31C3f597d8FD0Fbc5Ff02439ce6c6aEFb680a2)\n\n![](/img/build/smart-contracts/verify/sourcify-lookup-verify.png)\n\n## Check if a contract is verified\n\n```bash\nforge verify-check 0x2a31C3f597d8FD0Fbc5Ff02439ce6c6aEFb680a2 --chain-id 1001 --verifier sourcify\n```\n\n![](/img/build/smart-contracts/verify/sourcify-verify.png)\n\n## Useful links\n\n* [Sourcify Verifier](https://sourcify.dev/#/verifier)\n* [Using Sourcify UI Verification](https://docs.sourcify.dev/docs/how-to-verify/#using-the-ui-legacy)\n* [Verifying on Hardhat with Sourcify](https://docs.sourcify.dev/docs/how-to-verify/#hardhat)\n* [Verifying on Remix using Sourcify](https://docs.sourcify.dev/docs/how-to-verify/#remix-plugin)\n* [Sourcify Playground](https://playground.sourcify.dev/)\n\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/tools/block-explorers/block-explorers. # Block Explorers\n\nThis blockchain tool enables users and enthusiasts to search for real-time and historical information about the blockchain. Block explorers on Kaia contain information about Kaia, and as such, users can search for blocks, transactions, balances, addresses, and contracts on Kaia.\n\nThe list of explorers supported by Kaia is provided below:\n\n* [Kaiascope](https://kaiascope.com/)\n* [Kaiascan](https://www.kaiascan.io/)\n* [OKX Kaia Explorer](https://www.okx.com/web3/explorer/kaia)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/block-explorers/kaiascope. # Kaiascope\n\nKaiascope is the block explorer for the Kaia Network. Kaiascope gives you an insight about the Kaia network by monitoring the network health and providing various statistics of Kaia network. You can also explore the block and transaction data and the list of smart contracts on the Kaia network.\n\n* For the Kairos network, visit [https://kairos.kaiascope.com](https://kairos.kaiascope.com)\n* For the Mainnet, visit [https://kaiascope.com/](https://kaiascope.com/)\n\n![](/img/build/tools/scope_01_main.png)\n\n## Major Features <a id=\"major-features\"></a>\n\nPlease note that some of the features are under development.\n\n* Overview of the network\n* Block search\n* Transaction search\n* Account search \n* Event logs search\n* Block proposer information\n\nIn the subsequent sections, we will visit the major functions and screenshots of Kaiascope. Functions are grouped by four categories - dashboard, list view, detail view, and search.\n\n## Dashboard <a id=\"dashboard\"></a>\n\nNetwork information is presented in the dashboard. The information includes average block generation time, average number of transactions in a block, number of consensus nodes, and the latest trends in transactions.\n\n![](/img/build/tools/scope_02_main_indicator.png)\n\n* Block Height: The latest block height. It shows that how many blocks have been generated since the genesis. \n* Network Performance: It shows Kaia's network performance with four indicators.\n  * Consensus Nodes: Above picture shows that 15 nodes are participated in the consensus process. \n  * Avg Block Time \\(1 hour\\): It shows the average block generation time over the last hour.\n  * Avg Block Time \\(24 hours\\): It shows the average block generation time over the last 24 hours.\n  * Avg TX Per Block \\(24 hours\\): The average number of transactions included in one block over the last 24 hours.\n* Transaction History \\(14 days\\): The graphs show the number of daily transactions over the last 14 days. You can see the trend in the transaction volume over the last two weeks.\n\n### Recent Blocks & Transactions <a id=\"recent-blocks-transactions\"></a>\n\nThese lists show recently created blocks and transactions respectively. You can get the latest information by clicking the refresh button on the upper-right corner in the pane. In the bottom of the list, clicking the ‘view all’ button will take you to the [list view](#list-view).\n\n![](/img/build/tools/scope_03_main_list.png)\n\n### Network Status & Network Selector <a id=\"network-status-network-selector\"></a>\n\n![](/img/build/tools/network_status.gif)\n\nOn the upper-right corner of the site, there are network status indicator and the network selector drop down.\n\n* Network Status Indicator\n  * Network is healthy: Kaiascope is healthy and fully operational. The network status is normal.\n  * Data latency: Kaiascope is undergoing system maintenance. Data is in a delayed state.\n  * Data accuracy: Kaiascope is synchronizing data, please wait.\n* Network Selector Drop Down\n  * You can choose Kaia mainnet and Kairos testnet from the menu.\n\n## List View <a id=\"list-view\"></a>\n\nIf you want to get a closer look at the status of the Kaia network, you can check the list of recently generated blocks and transactions. To access the list page, click the button on the navigation bar which located on the left of the screen.\n\n### Blocks <a id=\"blocks\"></a>\n\n![](/img/build/tools/scope_04_block_list.png)\n\nA list of recently generated blocks. To update the information, please click the refresh.\n\n* Block: The unique number of the block. Starting from zero \\(the genesis block\\), it is given sequentially each time a block is generated.\n* Time: Duration of time since the block was generated. You can check the exact date and time by hovering this.\n* Total TXs: The total number of transactions included in the block.\n* Block Proposer: Randomly but deterministically selected Consensus Node that proposed the block. By clicking the address, you can easily go to the details page.\n* Reward: Aggregation of newly minted KAIA \\(9.6 KAIA\\) and transaction fees used in the block. The list displays only the sum of Kaia Governance Council Reward, Proof of Contribution, and Kaia Ecosystem Fund. Hover the block reward section on the block detail page to see detailed information. More details about the block reward distribution system can be found in the [Kaia Token Economy](../../../learn/token-economics/token-economics).\n* Size: The size of blocks measured in Byte. The more transactions are included, the larger the block size.\n\n### Transactions <a id=\"transactions\"></a>\n\n![](/img/build/tools/scope_05_tx_list.png)\n\nA list of recently executed transactions. To update the information, please click the refresh.\n\n* TX Hash: The unique identifier of the transaction. For more information, click the hash to go to the detail page. If the transaction fails, a red exclamation mark appears next to it.\n* Block \\#: Number of the block which contains this transaction. Clicking on the number takes you to the details page of the block.\n* Time: Duration of time since the transaction was executed. You can check the exact date and time by hovering this.\n* From -&gt; To: The addresses of sender and receiver. By clicking the address, you can easily go to the details page. If the file icon displays next to an address, it means that the address is a contract.\n* TX Type: Type of the transaction. You can apply a filter to get the transactions of a specific type. For more information, please visit [Transactions](../../transactions/transactions).\n* Amount: The amount of value transferred through the transaction.\n* TX Fee: The actual cost used to process transaction.\n\n## Detail View <a id=\"detail-view\"></a>\n\nDetailed information about single Block, Transaction, Account, and Contract can be found on this page. To go to the details view, you can search for the entity from the search bar or click the item from the list view.\n\n### Block <a id=\"block\"></a>\n\n![](/img/build/tools/scope_08_block_detail.png)\n\n#### Overview <a id=\"overview\"></a>\n\nOverall information about the block.\n\n* Time: Elapsed time since the block generation. Exact datetime is also displayed next to it.\n* Hash: The unique identifier of the block. By pressing the copy button, you can easily copy the hash.\n* Parent Hash: The unique identifier of the previous block. Clicking on the hash takes you to the detail view of the parent hash.\n* Total TXs: The total number of transactions included in the block.\n* Block Reward: Aggregation of the newly minted KAIA \\(9.6 KAIA\\) and the transaction fees collected in the block. If you hover, you will find detailed information on Kaia Governance Council Reward, Proof of Contribution and Kaia Ecosystem Fund. More details about block reward distribution system can be found in the [Kaia Token Economy].\n* Block Size: The size of block measured in Byte. The more transactions are included, the larger the block size.\n\n#### Committee <a id=\"committee\"></a>\n\nList of consensus nodes that proposed and validated the block.\n\n* Block Proposer: Randomly but deterministically selected consensus node that proposed the block. By clicking the address, you can easily go to the detail view of the node.\n* Validators: Consensus nodes that validated the block. By clicking the address, you can easily go to the detail view of the node.\n\n#### Transactions <a id=\"transactions\"></a>\n\nList of transactions included in the block.\n\n### Transaction <a id=\"transaction\"></a>\n\n![](/img/build/tools/scope_09_tx_detail.png)\n\n#### Overview <a id=\"overview\"></a>\n\nOverall information about the transaction.\n\n* Status indicator: On the upper-right corner. The indicator whether the transaction succeeded or not.\n* TX Type: Type of the transaction. For more information, please see [Transactions].\n* Block \\#: Number of the block which contains this transaction. Clicking on the number takes you to the detail view of the block.\n* From -&gt; To: The addresses of sender and receiver. By clicking the address, you can go to the detail view of the account. If a file icon displays next to the address, it means that address is contract.\n* Fee Payer: Displayed when TX type is either Fee Delegated or Fee Delegated with Ratio. When you click the address of fee payer you can go to the detailed view of the account.\n* Time: Elapsed time since the transaction was executed.\n* Nonce: Number of the transaction sent from the sender's address. Starting from zero, it increases sequentially each time a transaction is sent.\n* Amount: The amount of value transferred in this transaction.\n* Gas Price: Cost per gas measured in KAIA. In Kaia network, Gas Price is fixed.\n* Gas Used: Exact gas that was used to execute the transaction.\n* Gas Limit: Maximum gas that the sender was willing to pay for this transaction.\n* TX Fee: The actual cost used to process transaction. Calculated by multiplying Gas Price by Gas Used.\n* TX Fee by Sender: Displayed when TX type is Fee Delegated with Ratio. The portion of TX fee paid by the sender.\n* TX Fee by Fee Payer: Displayed when TX type is Fee Delegated with Ratio. The portion of TX fee paid by the fee payer.\n\n#### Input Data <a id=\"input-data\"></a>\n\nExtra data provided by the sender or contract.\n\n### Account <a id=\"account\"></a>\n\n![](/img/build/tools/scope_10_account_detail.png)\n\n#### Overview <a id=\"overview\"></a>\n\nOverall information about the account.\n\n* Address \\(Hex\\): The unique address of the account.\n* Balance: The total amount of KAIA that this account has.\n* Total TXs: The total number of transactions that this account sent or received.\n\n#### Transactions <a id=\"transactions\"></a>\n\nThe list of transactions related to this account. The color of the arrow indicates if the account is a sender or receiver.\n\n### Contract <a id=\"contract\"></a>\n\n![](/img/build/tools/scope_11_contract_detail.png)\n\n#### Overview <a id=\"overview\"></a>\n\nOverall information about the contract.\n\n* Account \\(Hex\\): The unique address of the contract.\n* Balance: The total amount of KAIA that this contract has.\n* Contract Creator: The account that deployed this contract. By clicking the address, you can go to the detail view of the account.\n* Total TXs: The total number of transactions that this contract received.\n* Contract Created TX: The transaction that deployed this contract. Clicking on the hash takes you to the detail view of the transaction.\n\n#### Transactions <a id=\"transactions\"></a>\n\nThe list of transactions related to this contract.\n\n## Search <a id=\"search\"></a>\n\nThrough Kaiascope, you can search for the information about account, contract, transactions and blocks. The search bar is placed on every page, making it easy to access. Entering a valid keyword will take you to the detail view of the entity.\n\n![](/img/build/tools/scope_06_search.png)\n\n### Search Keyword <a id=\"search-keyword\"></a>\n\nIn the mainnet version, searchable keywords are as follows:\n\n* Block \\#\n* TX Hash\n* Address \\(Account, Contract\\)\n\n### Keyword Format <a id=\"keyword-format\"></a>\n\nThe unique characteristics that distinguish each keyword are as follows:\n\n#### Block <a id=\"block\"></a>\n\n* Decimal numbers only \\[0~9\\]\n\n#### TX Hash <a id=\"tx-hash\"></a>\n\n* 66 characters long\n* Starts with a prefix `0x`\n* Hexadecimal number only \\[0~9, a~f\\]\n\n#### Address <a id=\"address\"></a>\n\n* 42 characters long\n* Start with a prefix `0x`\n* Hexadecimal number only \\[0~9, a~f\\]\n\n### Search Errors <a id=\"search-errors\"></a>\n\n![](/img/build/tools/scope_07_noresult.png)\n\nIf you search for a keyword that doesn't fit in the specified format or information hasn't yet been generated, no data will appear.\n\n#### Wrong Format \\(TX Hash / Address\\) <a id=\"wrong-format-tx-hash-address\"></a>\n\n* Wrong number of characters\n* Doesn't start with a prefix `0x`\n* Contains special characters or non-hexadecimal characters \\[g~z\\]\n\n#### Doesn't Exist <a id=\"doesn-t-exist\"></a>\n\n* Blocks not yet generated \\(if the block number entered was higher than recently generated block number\\)\n* Non-existent TX Hash",
    "Current Website Url is https://docs.kaia.io/build/tools/cross-chain. \n# Cross-Chain Interoperability\n\nCross-chain interoperability protocols are designed to connect blockchain networks that were originally isolated and independent. These protocols enable different chains to interact, allowing for the movement of liquidity and state between them. By establishing rules and processes for transferring assets and data across different blockchain networks, cross-chain interoperability protocols facilitate seamless collaboration and exchange of information between otherwise separate systems.\n\n## Broad Scope of Cross-Chain Solutions <a id=\"broad-scope-of-cross-chain-solution\"></a>\n\nCross-chain interoperability is a comprehensive concept encompassing various technologies:\n\n1. **Cross-Chain Messaging Protocols**: These enable broad interoperability, supporting diverse operations such as data exchange and cross-chain smart contract execution.\n\n2. **Cross-Chain Bridges**: A specific subset of cross-chain solutions, bridges focus primarily on asset transfer between chains. They play a crucial role in connecting assets across the different blockchain ecosystems but have a more specialized function compared to general messaging protocols.\n\n## Kaia's Compatibility <a id=\"kaia-compatibility\"></a>\n\nKaia network is currently compatibile with leading cross-chain solutions, enhancing its connectivity within the broader blockchain landscape. The following are currently supported on Kaia:\n\n### Cross-Chain Messaging Protocols:\n- [LayerZero](https://layerzero.network/)\n- [Wormhole](https://wormhole.com/)\n\n### Cross-Chain Bridges:\n- [Stargate](https://stargate.finance/)",
    "Current Website Url is https://docs.kaia.io/build/tools/cross-chain/layerzero. # Layerzero \n\n## Introduction <a id=\"introduction\"></a>\n\n[LayerZero](https://docs.layerzero.network/v2) as an omnichain interoperability protocol in Web3 enables applications to move data across blockchains, uniquely supporting censorship-resistant messages and permissionless development through immutable smart contracts. Layerzero provides a rich suite of tools for developing omnichain  applications, hence developers can easily [send arbitrary data](https://docs.layerzero.network/v2/home/protocol/contract-standards#oapp), [external function calls](https://docs.layerzero.network/v2/developers/evm/oapp/message-design-patterns), and [tokens](https://docs.layerzero.network/v2/home/protocol/contract-standards#oft) while preserving full autonomy and control over their application.\n\n## Usage <a id=\"usage\"></a>\n\nLayerzero supports both [Kaia Mainnet](https://docs.layerzero.network/v2/developers/evm/technical-reference/deployed-contracts#klaytn) and [Kairos Testnet](https://docs.layerzero.network/v2/developers/evm/technical-reference/deployed-contracts#klaytn-baobab). To get started using LayerZero on Kaia, refer to the following guides:\n* [LayerZero V2 OApp Quickstart](https://docs.layerzero.network/v2/developers/evm/oapp/overview)\n* [LayerZero V2 OFT Quickstart](https://docs.layerzero.network/v2/developers/evm/oft/quickstart)\n* [LayerZero V2 ONFT Quickstart](https://docs.layerzero.network/v2/developers/evm/onft/quickstart)",
    "Current Website Url is https://docs.kaia.io/build/tools/cross-chain/stargate. # Stargate\n\n## Introduction <a id=\"introduction\"></a>\n\n[Stargate](https://stargateprotocol.gitbook.io/stargate/v2-developer-docs) is the first fully composable native asset bridge, and the first dApp built on LayerZero. The core of Stargate is to make cross-chain liquidity transfer a seamless, single transaction process. With Stargate, users can swap native assets cross-chain within a single transaction. Meaning that you can swap ETH for KAIA in a single transaction. \n\n\n## Usage <a id=\"usage\"></a>\n\nStargate provides a way for developers to perform swaps programmatically in their apps. You can perform swaps programmatically both on [Kaia Mainnet](https://stargateprotocol.gitbook.io/stargate/v2-developer-docs/technical-reference/mainnet-contracts#klaytn) and [Kairos Testnet](https://stargateprotocol.gitbook.io/stargate/v2-developer-docs/technical-reference/testnet-contracts#klaytn-baobab-testnet). To get started, refer to the following guides:\n* [How to swap](https://stargateprotocol.gitbook.io/stargate/v2-developer-docs/integrate-with-stargate/how-to-swap)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/cross-chain/wormhole. # Wormhole\n\n## Introduction <a id=\"introduction\"></a>\n\n[Wormhole](https://wormhole.com/docs/) is an interoperability platform powering multi chain apps and bridges. It currently has support for 30+ chains including Kaia. By integrating wormhole, a Kaia application can make any token natively multichain, pull any on-chain data on-demand and build custom multi chain protocols. \n\n## Usage <a id=\"usage\"></a>\n\nWormhole supports both  [Kaia Mainnet](https://wormhole.com/docs/build/start-building/supported-networks/evm/#__tabbed_34_1) and [Kairos Testnet](https://wormhole.com/docs/build/start-building/supported-networks/evm/#__tabbed_35_1). To get started using Wormhole on Kaia, refer to the following guides:\n* [Create Cross-Chain Messaging Contract](https://wormhole.com/docs/tutorials/messaging/cross-chain-contracts/)\n* [Create Cross-Chain Token Transfers](https://wormhole.com/docs/tutorials/messaging/cross-chain-token-contracts/)\n* [Github Examples](https://github.com/wormhole-foundation/wormhole-examples)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/indexers. # Indexers\n\nBlockchain indexers are tools used in the context of blockchain technology to improve the efficiency and speed of searching, querying, and accessing data stored on a blockchain. They create and maintain organized databases of the blockchain's data, allowing users to quickly retrieve information without needing to process the entire blockchain from scratch.\n\nThe following providers have integrated with Kaia to deliver blockchain indexing services:\n\n* [The Graph](https://thegraph.com/)\n* [SubQuery Network](https://academy.subquery.network/)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/indexers/subquery. ---\nsidebar_label: SubQuery\n---\n\n# SubQuery Multi-Chain Indexer\n\nSubQuery is a leading blockchain data indexer that provides developers with fast, flexible, universal, open source and decentralized APIs for web3 projects. The SubQuery SDK allows developers to get rich indexed data and build intuitive and immersive decentralized applications in a faster and more efficient way. SubQuery supports 100+ ecosystems including Kaia's EVM, Cosmos, Ethereum, Polygon, Polkadot, Algorand, NEAR, and Avalanche.\n\nAnother one of SubQuery's competitive advantages is the ability to aggregate data not only within a chain but across multiple blockchains all within a single project. This allows the creation of feature-rich dashboard analytics or multi-chain block scanners.\n\nOther advantages include superior performance with multiple RPC endpoint configurations, multi-worker capabilities and a configurable caching architecture. To find out more, visit our [documentation](https://academy.subquery.network/).\n\n## Getting started\n\nTake a look at this [SubQuery Starter Project](https://github.com/subquery/ethereum-subql-starter/tree/main/Kaia/klaytn-starter) that introduces SubQuery's Kaia support by indexing all transfers and approval events from the Orbit ETH on Kaia Network .\n\nYou can also follow along this [step by step guide](https://academy.subquery.network/quickstart/quickstart.html) to get familiar with SubQuery or check out the [Kaia x SubQuery workshop](https://www.youtube.com/watch?v=40R5O1kL3v4) to see an actual demo.\n\n## Running and Hosting your Kaia SubQuery APIs\n\nSubQuery is open-source, meaning you have the freedom to run it in the following three ways:\n\n* Locally on your own computer, or a cloud provider of your choosing. View the instructions on how to run SubQuery locally [here](https://academy.subquery.network/run_publish/run.html).\n\nYou can publish it to SubQuery's enterprise-level [Managed Service](https://managedservice.subquery.network/login), where we'll host your SubQuery project in production ready services for mission critical data with zero-downtime blue/green deployments. There even is a generous free tier. [Find out how](https://academy.subquery.network/run_publish/publish.html).\n\nYou can publish it to the decentralized SubQuery Network, the most open, performant, reliable, and scalable data service for dApp developers. The SubQuery Network indexes and services data to the global community in an incentivised and verifiable way and supports Kaia from launch.\n\n## Resources\n\nHere are some additional resources to help you get started with SubQuery:\n\n* [SubQuery Website](https://subquery.network/?utm_source=klaytn&utm_medium=partner-docs)\n* [Documentation](https://academy.subquery.network/?utm_source=klaytn&utm_medium=partner-docs)\n* [SubQuery Kaia Support Announcement](https://subquery.medium.com/subquerys-data-indexing-supports-builders-on-klaytn-e5a3aec4bc14?utm_source=klaytn&utm_medium=partner-docs)\n* [Kaia Quick Start](https://academy.subquery.network/quickstart/quickstart_chains/klaytn.html/?utm_source=klaytn&utm_medium=partner-docs)\n* [Kaia Starter Project](https://github.com/subquery/ethereum-subql-starter/tree/main/Kaia/klaytn-starter)\n* [Discord Support](https://discord.com/invite/subquery/?utm_source=klaytn&utm_medium=partner-docs)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/indexers/thegraph. ---\nsidebar_label: The Graph\n---\n\n# The Graph \n\nGetting historical data on a smart contract can be frustrating when building a dapp. [The Graph](https://thegraph.com/) provides an easy way to query smart contract data through APIs known as subgraphs. The Graph’s infrastructure relies on a decentralized network of indexers, enabling your dapp to become truly decentralized.\n\nBoth Kaia Mainnet & Testnet are supported by The Graph. \n\n## Quick Start\n\nThese subgraphs only take a few minutes to set up. To get started, follow these three steps:\n\n1. Initialize your subgraph project\n2. Deploy & Publish\n3. Query from your dapp\n\nPricing:\n - The rate-limited test endpoints in Studio are free.\n - API calls for the decentralized network are pay-per-use at $4 per 100K queries. The first 100K queries are free!\n\nHere’s a step by step walk through:\n\n## 1. Initialize your subgraph project\n\n### Create a subgraph on Subgraph Studio⁠\n\nGo to the [Subgraph Studio](https://thegraph.com/studio/) and connect your wallet. Once your wallet is connected, you can begin by clicking “Create a Subgraph”. When choosing a name, it is recommended to use Title Case: “Subgraph Name Chain Name.”\n\n![Create a Subgraph](/img/build/tools/graph/01-create-subgraph.png)\n\n\nYou will then land on your subgraph’s page. All the CLI commands you need will be visible on the right side of the page:\n\n![CLI commands](/img/build/tools/graph/02-cli-commands.webp)\n\n\n### Install the Graph CLI⁠\n\nOn your local machine run the following:\n```\nnpm install -g @graphprotocol/graph-cli\n```\n\n### Initialize your Subgraph⁠\n\nYou can copy this directly from your subgraph page to include your specific subgraph slug:\n```\ngraph init --studio <SUBGRAPH_SLUG>\n```\nYou’ll be prompted to provide some info on your subgraph like this:\n\n![CLI sample](/img/build/tools/graph/03-cli-sample.webp)\n\n\nAfter entering the contract info, the graph-cli will attempt to fetch ABI, StartBLock & Contract name from the blockexplorer API. \n\nHowever, KaiaScan's API is not ready yet, so when asked to retry, just say \"no\". Here's how to obtain these manually:\n\n1. ABI: You need to prepare a json file containing the ABI in the same directory where you're running `graph init`. From the [contract's page on Kaiascan](https://kaiascan.io/address/0x5096db80b21ef45230c9e423c373f1fc9c0198dd), go to the `Contract` tab, click `View Code` and you'll be able to copy the ABI. Save it as a json file in the same folder where you're running  `graph init`. In this screenshot above, it was saved as `abi.json`. \n![Finding ABI](/img/build/tools/graph/04-kaiascan-abi.webp)\n\n2. Start Block: Click into the transaction hash where the contract was created. There you'll find the block where the contract was created. \n![contract creation](/img/build/tools/graph/05-contract-creation.webp)\n\n3. Contract Name: Just type in the name of the contract. If this is the only contract you're indexing in this subgraph, it's OK to just go with the default `Contract`. \n\n## 2. Deploy & Publish\n\n### Deploy to Subgraph Studio⁠\n\nFirst run these commands:\n\n```bash\n$ graph codegen\n$ graph build\n```\n\nThen run these to authenticate and deploy your subgraph. You can copy these commands directly from your subgraph’s page in Studio to include your specific deploy key and subgraph slug:\n\n```bash\n$ graph auth --studio <DEPLOY_KEY>\n$ graph deploy --studio <SUBGRAPH_SLUG>\n```\n\nYou will be asked for a version label. You can enter something like v0.0.1, but you’re free to choose the format.\n\n### Test your subgraph⁠\n\nYou can test your subgraph by making a sample query in the playground section. The Details tab will show you an API endpoint. You can use that endpoint to test from your dapp.\n\n![Playground](/img/build/tools/graph/06-playground.png)\n\n\n### Publish Your Subgraph to The Graph’s Decentralized Network\n\nOnce your subgraph is ready to be put into production, you can publish it to the decentralized network. On your subgraph’s page in Subgraph Studio, click on the Publish button:\n\n![publish button](/img/build/tools/graph/07-studio-publish-subgraph.webp)\n\n> **Note:** \n> - Kaia shows as \"partially supported\" for now because a final on-chain voting process to unlock rewards for indexers has not been completed yet. For now, Edge & Node's Indexer (Upgrade Indexer) will be the only indexer supporting all Kaia subgraphs. \n> - The Graph's smart contracts are all on Arbitrum One, even though your subgraph is indexing data from Kaia, Ethereum or any other [supported chain](https://thegraph.com/docs/en/developing/supported-networks/). \n\n## 3. Query your Subgraph\n\nCongratulations! You can now query your subgraph on the decentralized network!\n\nFor any subgraph on the decentralized network, you can start querying it by passing a GraphQL query into the subgraph’s query URL which can be found at the top of its Explorer page.\n\nHere’s an example from the [CryptoPunks Ethereum subgraph](https://thegraph.com/explorer/subgraphs/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK) by Messari:\n\n![Query URL](/img/build/tools/graph/08-query-url.png)\n\n\nThe query URL for this subgraph is:\n\n`https://gateway-arbitrum.network.thegraph.com/api/`**[api-key]**`/subgraphs/id/HdVdERFUe8h61vm2fDyycgxjsde5PbB832NHgJfZNqK`\n\nNow, you simply need to  fill in your own API Key to start sending GraphQL queries to this endpoint.\n\n### Getting your own API Key\n\n![API keys](/img/build/tools/graph/09-apikeys.png)\n\n\nIn Subgraph Studio, you’ll see the “API Keys” menu at the top of the page. Here you can create API Keys.\n\n## Appendix\n\n### Sample Query\n\nThis query shows the most expensive CryptoPunks sold.\n\n```graphql\n{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}\n\n```\n\nPassing this into the query URL returns this result:\n\n```\n{\n  \"data\": {\n    \"trades\": [\n      {\n        \"priceETH\": \"124457.067524886018255505\",\n        \"tokenId\": \"9998\"\n      },\n      {\n        \"priceETH\": \"8000\",\n        \"tokenId\": \"5822\"\n      },\n//      ...\n```\n\n<aside>\n💡 Trivia: Looking at the top sales on [CryptoPunks website](https://cryptopunks.app/cryptopunks/topsales) it looks like the top sale is Punk #5822, not #9998. Why? Because they censor the flash-loan sale that happened.\n\n</aside>\n\n### Sample code\n\n```jsx\nconst axios = require('axios');\n\nconst graphqlQuery = `{\n  trades(orderBy: priceETH, orderDirection: desc) {\n    priceETH\n    tokenId\n  }\n}`;\nconst queryUrl = 'https://gateway-arbitrum.network.thegraph.com/api/[api-key]/subgraphs/id/HdVdERFUe8h61vm2fDyycHgxjsde5PbB832NHgJfZNqK'\n\nconst graphQLRequest = {\n  method: 'post',\n  url: queryUrl,\n  data: {\n    query: graphqlQuery,\n  },\n};\n\n// Send the GraphQL query\naxios(graphQLRequest)\n  .then((response) => {\n    // Handle the response here\n    const data = response.data.data\n    console.log(data)\n\n  })\n  .catch((error) => {\n    // Handle any errors\n    console.error(error);\n  });\n```\n\n### Additional resources:\n\n- To explore all the ways you can optimize & customize your subgraph for a better performance, read more about [creating a subgraph here](https://thegraph.com/docs/en/developing/creating-a-subgraph/).\n- For more information about querying data from your subgraph, read more [here](https://thegraph.com/docs/en/querying/querying-the-graph/).",
    "Current Website Url is https://docs.kaia.io/build/tools/kaia-contracts-wizard. # Kaia Contracts Wizard\n\n![](/img/banners/kaia-kcw.png)\n\n## Introduction\n\nKaia prioritizes providing a seamless developer experience, which is the driving force behind the creation of the Kaia Contracts Wizard (KCW). KCW serves as an interactive tool for effortlessly bootstrapping your smart contracts and utilizing the secure, tested components available in [Kaia Contracts](https://github.com/kaiachain/kaia-contracts). In essence, it simplifies the process of developing smart contracts by leveraging the components of Kaia contracts. It's worth noting that the Kaia contracts wizard is built on the foundation of the OpenZeppelin Wizard, further bolstering the security of smart contract development.\n\nIn this guide you will:\n* Understand the basic functionality of Kaia Contracts Wizard.\n* Generate and customize smart contract code using Kaia Contracts Wizard.\n* Deploy Kaia contracts to the Kaia Network (Kairos) using Foundry Scripting System.\n\n## Exploring Kaia Contracts Wizard\n\nKaia Contracts Wizard posits itself as the fastest and easiest way to write your smart contract using Kaia Contracts. In this section, we will dive into the various components and segments of the Kaia Contract Wizard.\n\nAs it is, the Kaia contracts wizard supports the following token standards:\n\n* [KIP-7](https://kips.kaia.io/KIPs/kip-7) — This is a fungible token standard for Kaia. Fungible means that all tokens are divisible and interchangeable, that is, have the same value. One typical example of fungible tokens is fiat currencies, where each equal-denomination bill has the same value.\n* [KIP-17](https://kips.kaia.io/KIPs/kip-17) — This is a non-fungible token standard for Kaia. Non-fungible means that each token is indivisible, and therefore, unique. A KIP17 token can represent ownership of a unique item, whether physical property or virtual collectibles — like a picture, item in a game, real estate, and so on.\n* [KIP-37](https://kips.kaia.io/KIPs/kip-37) — This is known as the multi-token standard for Kaia, because it can represent both fungible and non-fungible tokens in a single smart contract.\n\nIn line with our [Ethereum Equivalence](https://medium.com/klaytn/toward-ethereum-equivalence-1-introducing-klaytn-v1-8-0-971911be7ff9) support, Kaia contracts wizard also supports [ERC20](https://ethereum.org/en/developers/docs/standards/tokens/erc-20/), [ERC721](https://ethereum.org/en/developers/docs/standards/tokens/erc-721/), [ERC1155](https://ethereum.org/en/developers/docs/standards/tokens/erc-1155/). \n\nKaia Contracts Wizard is comprised of the following sections:\n\n* **Token standard section**: This tab comprises all the different token standards supported by the Kaia contracts wizard. \n\n* **Settings section**: This section provides the preliminary settings for each token standard, such as token name, symbol, pre-mint (token supply when the contract is deployed), and URI (for non-fungible tokens).\n\n* **Features section**: comprises all features available for each token standard. You can find more information about the different extensions available for each tokens in the following links:\n\n    * [KIP7](https://github.com/kaiachain/kaia-contracts/tree/master/contracts/KIP/token/KIP7/extensions)\n    * [KIP17](https://github.com/kaiachain/kaia-contracts/tree/master/contracts/KIP/token/KIP17/extensions)\n    * [KIP37](https://github.com/kaiachain/kaia-contracts/tree/master/contracts/KIP/token/KIP37/extensions)\n\n* **Access Control section**: comprises all the available access control mechanisms for each token standard.\n\n* **Interactive code display section**: this displays the smart contract code generated with the configuration as set by the user. \n\n![](/img/build/tools/kcw-image.png)\n\nHaving explored the different parts of the Kaia contracts wizard, you can now select the kind of contract that you want (current support for **KIP7**, **KIP17**, **KIP37**, **ERC20**, **ERC721**, **ERC1155**, **Governor**, and custom contracts), set your parameters and desired features (token name, symbol, pre-mint amount, access control, etc.), and Contracts Wizard will generate all of the code necessary. The generated code is thus ready to be compiled and deployed, or it can serve as a starting point and customized further with application specific logic.\n\n## Customizing and Deploying Kaia Contracts on Kaia Network\n\nIn this section, you will deploy the generated code from kaia contracts wizard to the Kaia Testnet Kairos using Foundry. The generated code will serve as a starting point and customized further to fit an airdrop contract for KIP7 and KIP17 tokens.  While on the other end the generated code for KIP37 will be used as it is. \n\nLet’s get started! \n\n### Prerequisites\n\nTo follow along in this tutorial, the prerequisites are highlighted below:\n* Make sure to have [foundry](https://book.getfoundry.sh/getting-started/installation) installed. \n* Clone the [klaytn-foundry-starterkit](https://github.com/ayo-klaytn/klaytn-foundry-starterkit) code.\n* [MetaMask](../tutorials/connecting-metamaskx#install-metamask): used to deploy the contracts, sign transactions and interact with the contracts.\n* RPC Endpoint: you can get this from one of the supported [endpoint providers](../../references/public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n\n### Getting Started\nThis guide walks you through a simple implementation of an airdrop contract for KIP7 and KIP17 token standard. In the airdrop contract, the creator of the project mints each respective tokens directly to a certain selection of wallets. In the next sections, we will be looking at how to customize and deploy each token airdrop contract respectively. \n\n### Customizing Token contracts \n\n**Customizing KIP7 contract to KIP7 Airdrop contract.**\n\nYou need to customize your KIP7 contract before modifying it to an airdrop contract. To do that, follow the steps below: \n\n1. Navigate to [wizard.klaytn.foundation](https://wizard.klaytn.foundation/).\n2. On the **Contracts** tab select **KIP7**\n3. Next is to fill the name (KIP7 Token Airdrop) and symbol (KTA) in the **SETTINGS** tab. The pre-mint field is left empty\n4. Subsequently on the **FEATURES** tab, tick the **Mintable** feature box, it then automatically selects the Ownable feature in **ACCESS CONTROL** tab. \n\nThis is how Kaia contracts wizard would look like after making these configurations:\n\n![](/img/build/tools/kip7-kcw.png)\n\nHere is the generated code: \n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP7/KIP7.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\ncontract KIP7TokenAirdrop is KIP7, Ownable {\n    constructor() KIP7(\"KIP7 Token Airdrop\", \"KTA\") {}\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId);\n    }\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n```\nThe next thing is to modify the code above to suit our airdrop implementation which looks like this:\n\n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP7/KIP7.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\ncontract KIP7TokenAirdrop is KIP7, Ownable {\n    constructor() KIP7(\"KIP7 Token Airdrop\", \"KTA\") {\n    }\n    // airdrop fungible token\n    function airdropTokens(address[] calldata wAddresses, uint[] calldata tAmount) public onlyOwner {\n        require(wAddresses.length == tAmount.length, \"Must be same lenght\");\n        for (uint256 i = 0; i < wAddresses.length; i++) {\n            _mintSingleTokens(wAddresses[i], tAmount[i]);\n        }\n    }\n    function _mintSingleTokens(address wAddress, uint amount) private {\n        _mint(wAddress, amount);\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId);\n    }\n}\n```\n\nFrom the code modified above, you can see that we added a new function called `airdropTokens()`. This function mints tokens to certain selected addresses and can only be called by the creator of the contract - `onlyOwner`. \n\nSubsequently, we modified the *public* **mint()** *onlyOwner* function to **_mintSingleTokens()** private. \n\nNow that we have our KIP7 airdrop contract code ready, the next step is to create a new file named airdropKIP7.sol in the src folder of your project directory and paste the modified code in the file.\n\n**Customizing KIP17 contract to KIP17 Airdrop contract.**\n\nYou need to customize your KIP17 contract before modifying it to an airdrop contract. To do that, follow the steps below: \n\n1. Navigate to [wizard.klaytn.foundation](https://wizard.klaytn.foundation/). \n2. On the **Contracts** tab select **KIP17**\n3. Next is to fill the name (KIP7 NFT Airdrop) and symbol (KNA) in the **SETTINGS** tab.  The Base URI field is to be left empty. \n4. Subsequently on the **FEATURES** tab, tick the **Mintable**, **Auto-increment Ids**, and **Enumerable** feature box. You will notice that the Ownable feature in **ACCESS CONTROL** tab has been automatically selected. \n \nThis is how Kaia contracts wizard would look like after making these configurations:\n\n![](/img/build/tools/kip17-kcw.png)\n\nHere is the generated code: \n\n```solidity \n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP17/KIP17.sol\";\nimport \"@kaiachain/contracts/KIP/token/KIP17/extensions/KIP17Enumerable.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\nimport \"@kaiachain/contracts/utils/Counters.sol\";\ncontract KIP17NFTAirdrop is KIP17, KIP17Enumerable, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n    constructor() KIP17(\"KIP17 NFT Airdrop\", \"KNA\") {}\n    function safeMint(address to) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n    // The following functions are overrides required by Solidity.\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        override(KIP17, KIP17Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(KIP17, KIP17Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n```\n\nThe next thing is to modify the code above to suit our airdrop implementation which looks like this:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP17/KIP17.sol\";\nimport \"@kaiachain/contracts/KIP/token/KIP17/extensions/KIP17Enumerable.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\nimport \"@kaiachain/contracts/utils/Counters.sol\";\ncontract KIP17NftAirdrop is KIP17, KIP17Enumerable, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n    constructor() KIP17(\"KIP17 NFT Airdrop\", \"KNA\") {}\n    // Airdrop NFTs\n    function airdropNfts(address[] calldata wAddresses) public onlyOwner {\n        require(wAddresses.length != 0, \"Must no be equal to zero\");\n        for (uint256 i = 0; i < wAddresses.length; i++) {\n            _mintSingleNFT(wAddresses[i]);\n        }\n    }\n    function _mintSingleNFT(address to) private {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n    // The following functions are overrides required by Solidity.\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId)\n        internal\n        override(KIP17, KIP17Enumerable)\n    {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(KIP17, KIP17Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n```\n\nFrom the code modified above, you can see that we added a new function called **airdropNfts()**. This function mints tokens to certain selected addresses and can only be called by the creator of the contract - onlyOwner. \n\nSubsequently, we modified the **safeMint()** *public onlyOwner* function to **_mintSingleTokens()** **private**.\n \nNow that we have our KIP17 airdrop contract code ready, the next step is to create a new file named airdropKIP17.sol in the src folder of your project directory and paste the modified code in the file.\n\n**Customizing KIP37 contract.**\n\nBecause KIP37 supports batch minting, we will only customize the contract and use it as it is. To customize our KIP37Contract, follow the steps below: \n\n1. Navigate to [wizard.klaytn.foundation.](https://wizard.klaytn.foundation/) \n2. On the **Contracts** tab select **KIP37**\n3. Next is to fill the name (KIP7 NFT Airdrop) and symbol (KNA) in the **SETTINGS** tab.  The Base URI field is to be left empty. \n4. Subsequently on the **FEATURES** tab, tick the **Mintable**, **Auto-increment Ids**, and **Enumerable** feature box. You will notice that the Ownable feature in **ACCESS CONTROL** tab has been automatically selected. \n \nThis is how Kaia contracts wizard would look like after making these configurations:\n\n![](/img/build/tools/kip37-kcw.png)\n\nHere is the generated code: \n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP37/KIP37.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\ncontract KIP37MultiToken is KIP37, Ownable {\n    constructor() KIP37(\"\") {}\n    function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }\n    function mint(address account, uint256 id, uint256 amount, bytes memory data)\n        public\n        onlyOwner\n    {\n        _mint(account, id, amount, data);\n    }\n    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)\n        public\n        onlyOwner\n    {\n        _mintBatch(to, ids, amounts, data);\n    }\n}\n```\nNow that we have our KIP37 contract code ready, the next step is to create a new file named KIP37MultiToken.sol in the src folder of your project directory and paste the generated code in it.\n\nHaving generated the contract code for all our Kaia contracts, the next step is to deploy to the Kaia Testnet Kairos using Foundry solidity scripts.\n\n## Deploying generated smart contracts code using Foundry Scripts\n\nIn this section we will go through deploying our generated smart contract code using Foundry; specifically the foundry script to deploy on-chain. \n\n### Getting Started\n\nWhile getting started with foundry, you must have been exposed to the preliminary way of delaying contracts using [forge create](https://book.getfoundry.sh/reference/forge/forge-create.html). Recently, the Foundry team came up with a more user friendly way of declaratively deploying contracts using Solidity called [Solidity Scripting](https://book.getfoundry.sh/tutorials/solidity-scripting#solidity-scripting) i.e writing deployment scripts in solidity instead of JavaScript.  \n\nIn this section, we will deploy our contract using solidity scripting in Foundry. \n\n### Environment Configuration\n\nWe’re going to deploy our generated smart contract to the Kaia Kairos Testnet, but to do this we’ll need to configure Foundry a bit, by setting things like a Kairos RPC URL, the private key of an account that’s funded with test KAIA. \n\nOnce you have all that, create a .env file and add the variables. Foundry automatically loads in a .env file present in your project directory.\n\nThe .env file should follow this format:\n\n```code\nKAIROS_RPC_URL=\n// if you want to deploy to mainnet\nMAINNET_RPC_URL=\nPRIVATE_KEY=\n```\nWe now need to edit the `foundry.toml` file. There should already be one in the root of the project. Paste the following lines to the end of the file\n\n```code\n[rpc_endpoints]\nkairos = \"${KAIROS_RPC_URL}\"\n// if you want to deploy to mainnet\nmainnet = \"${MAINNET_RPC_URL}\"\n```\n### Writing the Script\n\nNext, we have to create a folder and name it script  if it doesn’t already exist. We then need to create a script file for our contracts namely:\nairdropKIP7.s.sol\nairdropKIP17.s.sol\nKIP37MultiToken.s.sol\nThis is where we will write the deployment script itself.  The contents of each file should look like this:\n\n1. airdropKIP7.s.sol\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport \"forge-std/Script.sol\";\nimport \"../src/airdropKIP7.sol\";\n\ncontract KIP7AirdropDeployScript is Script {\n\n    function setUp() public {}\n\n    function run() public {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n\n        vm.startBroadcast(deployerPrivateKey);\n\n        KIP7TokenAirdrop kip7TokenAirdrop = new KIP7TokenAirdrop();\n\n        vm.stopBroadcast();\n    }\n}\n```\n\n2. airdropKIP17.s.sol\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport \"forge-std/Script.sol\";\nimport \"../src/airdropKIP17.sol\";\n\ncontract KIP17AirdropDeployScript is Script {\n\n    function setUp() public {}\n\n    function run() public {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n\n        vm.startBroadcast(deployerPrivateKey);\n\n        KIP17NftAirdrop kip17NftTokenAirdrop = new KIP17NftAirdrop();\n\n        vm.stopBroadcast();\n    }\n}\n```\n\n3. KIP37MultiToken.s.sol\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\nimport \"forge-std/Script.sol\";\nimport \"../src/KIP37MultiToken.sol\";\n\ncontract KIP37MultiTokenDeployScript is Script {\n\n    function setUp() public {}\n\n    function run() public {\n\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n\n        vm.startBroadcast(deployerPrivateKey);\n\n        KIP37MultiToken kip37MultiToken = new KIP37MultiToken();\n\n        vm.stopBroadcast();\n    }\n}\n```\n\nLet’s go through what each line of code does. \n\nFirst we declared the SPDX-license and pragma version for each script file. Note that because each script file is a solidity program, we still need to declare the SPDX-license and pragma version, making it work like a smart contract, but is never deployed. \n\nNext we imported [Forge Std/Script.sol](https://github.com/foundry-rs/forge-std/blob/master/src/Script.sol) which provides some scripting utilities to use for deploying our contracts. Subsequently, we imported the contract to be deployed. In this case **airdropKIP7**, **airdropKIP17**, **KIP37MultiToken** for each script.\n\nWe then created a contract called **KIP7AirdropDeployScript**, **KIP17AirdropDeployScript**, **KIP37MultiTokenDeployScript** for each script file which inherits Script from Forge Std library. \n\nNext we declared the **run()** function. The function run() is the entry point for scripts to be executed. We \nthen declared a **deployerPrivateKey** variable that loads in the private key from our .env file. \n\nSubsequently, we called the **vm.startBroadcast(deployerPrivateKey)** special cheat code that records calls and contract creations made by our main script contract, having passed the deployerPrivateKey for signing the transactions.\n\nWe then created the respective contract. This contract creation will be recorded by forge because we previously called the vm.startBroadcast() cheat code. \n\nNow that we have gotten an overview of what each line entails, you can move on to deploy the contracts.  Click this [link](https://book.getfoundry.sh/tutorials/solidity-scripting#writing-the-script), to learn more about writing scripts and other details.\n\nAt the root of the project run\n\n```bash\n// To load the variables in the .env file\nsource .env\n```\nTo deploy the each contract run the command below:\n\n1. airdropKIP7\n\n```bash\nforge script script/airdropKIP7.s.sol:KIP7AirdropDeployScript --rpc-url $KAIROS_RPC_URL --broadcast --skip-simulation -vvvv\n```\n2. airdropKIP17\n\n```bash\nforge script script/airdropKIP17.s.sol:KIP17AirdropDeployScript --rpc-url $KAIROS_RPC_URL --broadcast --skip-simulation -vvvv\n```\n3. KIP37MultiToken\n\n```bash\nforge script script/KIP37MultiToken.s.sol:KIP37MultiTokenDeployScript --rpc-url $KAIROS_RPC_URL --broadcast --skip-simulation -vvvv\n```\n\nIf the command was successful for each command, your terminal should look like this:\n\n![](/img/build/tools/deploy-kcw-contracts.png)\n\nRefer to this [guide](https://book.getfoundry.sh/reference/forge/forge-script), to learn more about the script command. \n\n## Conclusion \n\nIn this tutorial, you learned about the Kaia contracts wizard, its functionality and how to customize contracts using KCW. This guide also demonstrated how to generate smart contract code and also how the generated smart contract code can serve as a starting point and customized further with application specific logic. \n\nFurther, we deployed the generated contracts to Kaia Kairos Testnet using Foundry solidity scripting. You can make use of Remix IDE or any smart contract development environment to deploy smart contract derived or customized using from Kaia Contracts Wizard. You can find corresponding tutorials in the following links:\n\n* [Connecting to Remix](../tutorials/connecting-remix#connecting-kaia-remix-using-metamask) \n* [Deploying smart contract using Hardhat](../get-started/hardhat)\n* [Deploying smart contract using Truffle](../smart-contracts/samples/erc-20#2-2-deploying-smart-contract-using-truffle)",
    "Current Website Url is https://docs.kaia.io/build/tools/kaia-online-toolkit. # Kaia Online Toolkit\n\n## What is the Kaia Online Toolkit? <a id=\"what-is-the-kaia-online-toolkit\"></a>\n\n* `Kaia Online Toolkit` provides code examples to help you to utilize the `Kaia SDK(caver-js)` easily. Also it provides a [demo page](https://toolkit.klaytn.foundation) for developers to use simple online tools.\n* `Kaia SDK(caver-js)` is a JavaScript API library that allows developers to interact with a Kaia node using an HTTP or Websocket connection.\n* You can just try out Kaia's features without having to code.\n\n> To help more people use the `Kaia Online Toolkit`, We have prepared the [\"Using Kaia Online Toolkit\"](https://medium.com/klaytn/using-klaytn-online-toolkit-1-multisig-60399a0b0278) series.\n\n## Links <a id=\"links\"></a>\nHere are the links for `Kaia Online Toolkit`. Feel free to use it :)\n* [Github Repository](https://github.com/kaiachain/kaia-online-toolkit)\n* [Toolkit Page](https://toolkit.kaia.io)\n* [Kaia SDK(caver-js)](../../references/sdk/caver-js/caver-js)\n\n![Kaia Online Toolkit](/img/build/tools/klaytn-online-toolkit.png)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/oracles/oracles. # Oracles\n\nBlockchain oracles serve as a link between the blockchain and other external data sources. In actuality, the blockchain is a closed system; as such, it is unable to pull data into or out of any external systems (off-chain data) and only has access to data that is already present within the original blockchain context. This creates a blockchain-oracle issue where the blockchain is unable to obtain data from actual occurrences. Smart contracts must, however, connect to a wide range of external data sources in order to fulfill a number of useful functions. As an illustration, a [hybrid smart contract](https://chain.link/education-hub/hybrid-smart-contracts) that uses oracles to give asset prices for finance, weather data for insurance, randomness for gaming, IoT sensors for supply chain management, etc.\n\nThe need for blockchains to access and connect to external data sources, legacy systems, and advanced computation brought about oracles. The benefits of oracles in the blockchain industry cannot be underestimated, and it is therefore crucial to do your research before choosing your oracles when creating hybrid smart contracts. Avoiding centralized oracles is therefore encouraged since leveraging decentralized oracles is important for developing your decentralized apps. On one hand, centralized oracles are controlled by a single entity and, as such, have a single point of failure, making smart contracts vulnerable to attacks. On the other hand, decentralized oracles are designed to fly above the limitations of centralized oracles by eliminating the single point of failure. A decentralized oracle comprises multiple participants in a peer-to-peer network that form consensus on off-chain data before sending it to a smart contract.\n\nThe following providers have integrated with Kaia to deliver decentralized oracle services:\n\n* [Pyth Network](https://docs.pyth.network/home)\n* [Orakl Network](https://docs.orakl.network)\n* [Witnet](https://docs.witnet.io/)\n* [SupraOracles](https://supraoracles.com/docs/overview)\n* [KlayOracle](https://klayoracle.gitbook.io/v1.0.0/)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/oracles/orakl-network. # Orakl Network\n\n![](/img/banners/kaia-orakl.png)\n\n## Introduction\n\n[Orakl Network](https://docs.orakl.network) is a decentralized oracle network that allows smart contracts to securely access off-chain data and other resources. It prides itself in being a native token oracle that provides [Data Feed](https://docs.orakl.network/developers-guide/data-feed), [VRF](https://docs.orakl.network/developers-guide/vrf), [Request-Response](https://docs.orakl.network/developers-guide/request-response) and [Proof of Reserve](https://docs.orakl.network/developers-guide/proof-of-reserve) solutions.\n\nWith Orakl Network, users can  source for randomness that is unpredictable and unbiased in their smart contracts. Orakl Network [Verifiable Random Function (VRF)](https://docs.orakl.network/developers-guide/vrf#what-is-verifiable-random-function) allows smart contracts to generate verifiably random values, which can be used in various dApps that require randomness. Orakl Network provides developers access to the VRF services through two different account types, namely: [Permanent Account](https://docs.orakl.network/developers-guide/readme#permanent-account) or [Temporary Account](https://docs.orakl.network/developers-guide/readme#temporary-account).\n\nIn this tutorial, you will utilize the VRF functionality from Orakl Network to request for random words from inside of your smart contract.\n\n\n## Prerequisites\n\n* [Kaia Wallet](https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi)\n* [Remix IDE](https://remix.ethereum.org/)\n* [Kaia Plugin on Remix](https://klaytn.foundation/using-klaytn-plugin-on-remix/)\n* Test KAIA from [Faucet](https://faucet.kaia.io)\n\n## Getting Started\n\nIn the following steps, you will request for a random word in your smart contract using Orakl Network. Let's get started!\n\n### Step 1: Initialize Contract State Variables\n\nIn this step, we will define the cosumer contract and initialize the state variables needed for our contract functionality. Our consumer contract is dependent on `VRFConsumerBase` contract from which we inherit, and `IVRFCoordinator` interface that is used for calls to `VRFCoordinator` contract. Next, we define `sRandomWord` variable which we use to store the random word result and the `sOwner` variable which is used inside of `onlyOwner` modifier.\n\n```solidity\npragma solidity ^0.8.16;\n\nimport { VRFConsumerBase } from \"@bisonai/orakl-contracts/src/v0.1/VRFConsumerBase.sol\";\nimport { IVRFCoordinator } from \"@bisonai/orakl-contracts/src/v0.1/interfaces/IVRFCoordinator.sol\";\n\ncontract VRFConsumer is VRFConsumerBase {\n  uint256 public sRandomWord;\n  address private sOwner;\n\n  error OnlyOwner(address notOwner);\n  modifier onlyOwner() {\n      if (msg.sender != sOwner) {\n          revert OnlyOwner(msg.sender);\n      }\n      _;\n  }\n```\n\n### Step 2: Initialize VRF Coordinator\n\nTo request for random words in your smart contract, you need to initialize the [`VRFCoordinator`](https://github.com/Bisonai/orakl/blob/master/contracts-v0.1/src/v0.1/VRFCoordinator.sol) smart contract. It is recommended to bond `VRFCoordinator` interface with `VRFCoordinator` address supplied through a constructor parameter, and use it for random word requests (`requestRandomWords`). The `VRFCoordinator` contract is deployed both on Kaia Kairos [0xDA8c0A00A372503aa6EC80f9b29Cc97C454bE499](https://kairos.kaiascan.io/account/0xDA8c0A00A372503aa6EC80f9b29Cc97C454bE499) and Kaia Mainnet [0x3F247f70DC083A2907B8E76635986fd09AA80EFb](https://www.kaiascan.io/account/0x3F247f70DC083A2907B8E76635986fd09AA80EFb).\n\n```solidity\n  IVRFCoordinator COORDINATOR;\n\n  constructor(address coordinator) VRFConsumerBase(coordinator) {\n      COORDINATOR = IVRFCoordinator(coordinator);\n      sOwner = msg.sender;\n  }\n```\n\n### Step 3: Request Random Words with Temporary Account\n\nTo request random words with a temporary account, users need to send $KAIA together with a call using value property.\n\n```solidity\n  function requestRandomWordsDirect(\n      bytes32 keyHash,\n      uint32 callbackGasLimit,\n      uint32 numWords,\n      address refundRecipient\n  )\n      public\n      payable\n      onlyOwner\n      returns (uint256 requestId)\n  {\n    requestId = COORDINATOR.requestRandomWords{value: msg.value}(\n      keyHash,\n      callbackGasLimit,\n      numWords,\n      refundRecipient\n    );\n  }\n```\n\nThis function calls the `requestRandomWords()` function defined in `COORDINATOR` contract, and passes `keyHash`, `callbackGasLimit`, `numWords` and `refundRecipient` as arguments. The payment for service is sent through `msg.value` to the `requestRandomWords()` in `COORDINATOR` contract. If the payment is larger than expected payment, exceeding payment is returned to the `refundRecipient` address. Eventually, it generates a request for random words. To accurately specify `msg.value` for the `requestRandomWords` function, please refer to the explanation on [how to estimate the service fee](https://docs.orakl.network/developers-guide/vrf#get-estimated-service-fee).\n\n### Step 4: Fulfill Random Words\n\nThe `fulfillRandomWords` function is called by `VRFCoordinator` contract when fulfilling the random words request.\n\n```solidity\nfunction fulfillRandomWords(\n    uint256 /* requestId */,\n    uint256[] memory randomWords\n)\n    internal\n    override\n{\n    // requestId should be checked if it matches the expected request\n    // Generate random value between 1 and 50.\n    sRandomWord = (randomWords[0] % 50) + 1;\n}\n```\n\nNow that we have the Orakl VRF solution code, let’s get to see it in action.\n\n## Practical Implementation\n\nIn the example below, the contract allows us to request for random words and receive its fulfillment.\n\n### Create and Deploy Sample Code\n\n**Remix IDE**\n\n* Navigate to [Remix IDE](https://remix.ethereum.org/).\n* Click on the **File Explorer** tab, create a new file named `consumer-vrf.sol` in the contracts folder.\n* Paste the code below in your newly created file.\n* In Remix, click **Compile contract**.\n* Click the Kaia tab on your left having installed the plugin.\n* Select **Environment** > **Injected Provider** - **Kaia Wallet**.\n* In **Contract**, select your contract. For example, `VRFConsumer`.\n* Pass in the coordinator contract address `0xDA8c0A00A372503aa6EC80f9b29Cc97C454bE499` (Kairos), `0x3F247f70DC083A2907B8E76635986fd09AA80EFb` (Mainnet).\n* Click **Deploy**.\n\n**Sample Code**\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport {VRFConsumerBase} from \"@bisonai/orakl-contracts/src/v0.1/VRFConsumerBase.sol\";\nimport {IVRFCoordinator} from \"@bisonai/orakl-contracts/src/v0.1/interfaces/IVRFCoordinator.sol\";\n\ncontract VRFConsumer is VRFConsumerBase {\n    uint256 public sRandomWord;\n    address private sOwner;\n\n    IVRFCoordinator COORDINATOR;\n\n    error OnlyOwner(address notOwner);\n\n    modifier onlyOwner() {\n        if (msg.sender != sOwner) {\n            revert OnlyOwner(msg.sender);\n        }\n        _;\n    }\n\n    constructor(address coordinator) VRFConsumerBase(coordinator) {\n        sOwner = msg.sender;\n        COORDINATOR = IVRFCoordinator(coordinator);\n    }\n\n    function requestRandomWordsDirect(\n        bytes32 keyHash,\n        uint32 callbackGasLimit,\n        uint32 numWords,\n        address refundRecipient\n    ) public payable onlyOwner returns (uint256 requestId) {\n        requestId = COORDINATOR.requestRandomWords{value: msg.value}(\n            keyHash,\n            callbackGasLimit,\n            numWords,\n            refundRecipient\n        );\n    }\n\n    function fulfillRandomWords(\n        uint256 /* requestId */,\n        uint256[] memory randomWords\n    ) internal override {\n        // requestId should be checked if it matches the expected request\n        // Generate random value between 1 and 50.\n        sRandomWord = (randomWords[0] % 50) + 1;\n    }\n}\n```\n\n![](/img/build/tools/orakl-vrf-deploy.png)\n\n### Interact with Smart Contract\n\nTo request for random words in your smart contract, you have to first execute the `requestRandomWordsDirect()` function. For this function to successfully execute, the user has to send KAIA (minimum of 1 KAIA) as stated previously, and supply `keyHash`, `callbackGasLimit`, `numWords`, and `refundRecipient` parameters. `keyHash` parameter uniquely defines who can fulfill the request. Orakl Network VRF provides one key hash for each Kaia chain:\n* Kairos: `0xd9af33106d664a53cb9946df5cd81a30695f5b72224ee64e798b278af812779c`\n* Mainnet: `0x6cff5233743b3c0321a19ae11ab38ae0ddc7ddfe1e91b162fa8bb657488fb157`\n\nFor the rest of the parameters, you can set them as follows:\n* `callbackGasLimit` as `500000`,\n* `numWords` as `1`, and\n* set `refundRecipient` to your EOA address.\n\nAfterwards, once the request has been fulfilled, the `sRandomWord()` function can be executed. This `sRandomWord()` function returns the random word.\n\n* **requestRandomWordsDirect()**: Will be sending 1 KAIA to execute this function. The image below illustrate this:\n\n![](/img/build/tools/orakl-vrf-request.png)\n\n* **sRandomWord()**: After the `VRFCoordinator` has fulfilled the random word request, the response is stored in the `sRandomWord` variable. To get the response, call the `sRandomWord()` function.\n\n\n![](/img/build/tools/orakl-vrf-response.png)\n\n\nTada 🎉! You just requested for a random word and received one in your smart contract.\n\n## Conclusion\n\nIn this tutorial, you learnt how to generate a random word in your smart contract using the Orakl Network VRF solution. The Orakl Network provides more oracle services such as Data Feed, Request-Response, Proof of Reserve. For more in-depth guides on Orakl Network and how it works, please refer to the [Orakl Network documentation](https://docs.orakl.network).\n",
    "Current Website Url is https://docs.kaia.io/build/tools/oracles/pyth-network. # Pyth Network\r\n\r\n![](/img/banners/kaia-pyth.png)\r\n\r\n## Overview\r\n\r\nThe [Pyth Network](https://pyth.network/) is one of the largest first-party Oracle network, delivering real-time data across [a vast number of chains](https://docs.pyth.network/price-feeds/contract-addresses).\r\n\r\nThe network comprises some of the world’s [largest exchanges, market makers, and financial services providers](https://pyth.network/publishers). These publish proprietary data on-chain for aggregation and distribution to smart contract applications. \r\n\r\n## Using Pyth Network\r\n\r\nThe Pyth introduces an innovative low-latency [pull oracle design](https://docs.pyth.network/documentation/pythnet-price-feeds/on-demand), where users can pull price updates onchain when needed, enabling everyone in the onchain environment to access that data point most efficiently. Pyth network updates the prices every **400ms**, making Pyth one of the fastest on-chain oracles.\r\n\r\nDevelopers on Kaia have permissionless access to any of [Pyth’s price feeds](https://pyth.network/developers/price-feed-ids) for equities, ETFs, commodities, foreign exchange pairs, and cryptocurrencies.\r\n\r\nHere is a working example of a contract that fetches the latest price of ETH/USD on the Kaia network.\r\nYou have to pass [Pyth's contract address](https://docs.pyth.network/price-feeds/contract-addresses/evm) for Kaia mainnet/testnet and the desired [price feed id](https://pyth.network/developers/price-feed-ids) to fetch the latest price.\r\n\r\n```solidity\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.13;\r\n\r\nimport \"@pythnetwork/pyth-sdk-solidity/IPyth.sol\";\r\nimport \"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\";\r\n\r\ncontract MyFirstPythContract {\r\n    IPyth pyth;\r\n\r\n    constructor(address _pyth) {\r\n        pyth = IPyth(_pyth);\r\n    }\r\n\r\n    function fetchPrice(\r\n        bytes[] calldata updateData,\r\n        bytes32 priceFeed\r\n    ) public payable returns (int64) {\r\n\t\t    // Fetch the priceUpdate from hermes.\r\n        uint updateFee = pyth.getUpdateFee(updateData);\r\n        pyth.updatePriceFeeds{value: updateFee}(updateData);\r\n\r\n        // Fetch the latest price\r\n        PythStructs.Price memory price = pyth.getPrice(priceFeed);\r\n        return price.price;\r\n    }\r\n}\r\n```\r\n\r\nHere you can fetch the `updateData` from our [`Hermes`](https://hermes.pyth.network/docs/), which listens to Pythnet and Wormhole for price updates; or you can use the [`pyth-evm-js`](https://github.com/pyth-network/pyth-crosschain/blob/main/target_chains/ethereum/sdk/js/src/EvmPriceServiceConnection.ts#L15) SDK. Check [How to Fetch Price Updates](https://docs.pyth.network/price-feeds/fetch-price-updates) to pull the latest data. \r\n\r\nThis [package](https://github.com/pyth-network/pyth-crosschain/tree/main/target_chains/ethereum/sdk/solidity) provides utilities for consuming prices from the Pyth network oracle using Solidity. Also, it contains the [Pyth Interface ABI](https://github.com/pyth-network/pyth-crosschain/blob/main/target_chains/ethereum/sdk/solidity/abis/IPyth.json) that you can use in your libraries to communicate with the Pyth contract.\r\n\r\nWe recommend following the [consumer best practices](https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices) when consuming Pyth data.\r\n\r\nFor more information, check out the official [Pyth documentation](https://docs.pyth.network/price-feeds). There are details on the various functions available for interacting with the Pyth smart contract in the [API Reference section](https://api-reference.pyth.network/price-feeds/evm/getPrice).\r\n\r\n## Pyth on Kaia\r\n\r\nThe Pyth Network smart contract is available at the following address:\r\n\r\n- Mainnet: [0x2880ab155794e7179c9ee2e38200202908c17b43](https://kaiascan.io/account/0x2880aB155794e7179c9eE2e38200202908C17B43)\r\n- Kairos Testnet: [0x2880ab155794e7179c9ee2e38200202908c17b43](https://kairos.kaiascan.io/account/0x2880aB155794e7179c9eE2e38200202908C17B43)\r\n\r\nAdditionally, click to access the [Pyth price-feed IDs](https://pyth.network/developers/price-feed-ids).\r\n\r\n## Using Pyth as a PUSH Oracle\r\n\r\nPyth Oracle can be used as a Push oracle by running a scheduler which can update the prices in the backend. It will make sure that the your dapp will be updated with latest prices as per your configuration. Checkout the open source [price pusher](https://github.com/pyth-network/pyth-crosschain/tree/main/apps/price_pusher) app to get started with the scheduler.\r\n\r\n## Developers and community\r\n\r\nThe Pyth network provides additional tools to developers, such as [TradingView Integration](https://docs.pyth.network/guides/how-to-create-tradingview-charts), or the [Gelato web3 functions](https://docs.pyth.network/guides/how-to-schedule-price-updates-with-gelato).\r\n\r\nCheck out the following links to get started with Pyth.\r\n\r\n- [Pyth EVM Integration Guide](https://docs.pyth.network/price-feeds/use-real-time-data/evm)\r\n- [Pyth Docs](https://docs.pyth.network/home)\r\n- [Pyth API Reference](https://api-reference.pyth.network/price-feeds/evm/getPrice)\r\n- [Pyth Examples](https://github.com/pyth-network/pyth-examples)\r\n- [Pyth Price Feed Ids](https://pyth.network/developers/price-feed-ids)\r\n- [Website](https://pyth.network/)\r\n- [Twitter](https://x.com/PythNetwork)",
    "Current Website Url is https://docs.kaia.io/build/tools/oracles/supraoracles. # SupraOracles\n\n![](/img/banners/kaia-supra.png)\n\n## Introduction\n\n[SupraOracles](https://supraoracles.com/) is a novel, high-throughput Oracle & IntraLayer: a vertically integrated toolkit of cross-chain solutions (data oracles, asset bridges, automation network, and more) that interlink all blockchains, public (L1s and L2s) or private (enterprises). It provides smart contracts with a next-generation cross chain oracle solution that has superior data accuracy, speed, scalability and security.\n\nWith SupraOracles, your smart contract can get access to price data feeds to build your various decentralized finance(DeFi) use cases. In this tutorial, you will use SupraOracles  to get price feeds easily on Kaia blockchain using Remix IDE. \n\n## Prerequisites\n\n* [Kaia Wallet](https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi)\n* [Remix IDE](https://remix.ethereum.org/)\n* [Kaia Plugin on Remix](https://klaytn.foundation/using-klaytn-plugin-on-remix/)\n* Test KAIA from [Faucet](https://faucet.kaia.io)\n\n## Getting Started\n\nIn the following steps, you will request an ETH/USD price feed in your smart contract using SupraOracles. Let's get started!\n\n### Step 1: Create The S-Value Interface\n\nThis creates the interface that will be used to fetch prices from SupraOracles. Add the following code to the solidity smart contract that you wish to retrieve an S-Value.\n\n```solidity\ninterface ISupraSValueFeed {\nfunction checkPrice(string memory marketPair) external view returns (int256 price, uint256 timestamp);\n}\n```\n\n### Step 2: Configure The S-Value Feed Address\n\nTo fetch the S-Value from a SupraOracles smart contract, first find the S-Value Feed Address for the chain of your choice. When you have the right address, create an instance of the S-Value Feed using the interface we previously defined as such:\n\n```solidity\ncontract ISupraSValueFeedExample {\n    ISupraSValueFeed internal sValueFeed;\n    constructor() {\n        sValueFeed = ISupraSValueFeed(0x7f003178060af3904b8b70fEa066AEE28e85043E);\n    }\n}\n```\nIn this example, we are implementing the S-Value Feed on the Kaia Kairos TestNet. You can verify the Kaia Kairos S-Value Feed Address [here](https://supraoracles.com/docs/get-started/networks/).\n\n### Step 3: Get The S-Value Crypto Price\n\nNow you can simply access the S-Value Crypto Price of our supported market pairs. In this step, you'll get the price of ETH/USDT (eth_usdt) by applying the following code to your Smart Contract.\n\n```solidity\nfunction getEthUsdtPrice() external view returns (int) {\n(\nint price,\n/* uint timestamp */\n) = sValueFeed.checkPrice(\"eth_usdt\");\nreturn price;\n}\n```\n\n## Practical implementation \n\nIn the example below, we will be deploying the S-Value Price Feed Contract and also executing the getEthUsdtPrice() function to get the price ETH/USDT pairs. \n\n### Create and Deploy Sample Code \n\n**Remix IDE**\n\n* Navigate to [Remix IDE](https://remix.ethereum.org/)\n* Click on File Explorer tab, create a new file named `demoSupraPriceFeed.sol` in the contracts folder\n* Paste the code below in your newly created file\n* In Remix, click **Compile contract**.\n* Click the Kaia tab on your left having installed the plugin\n* Select **Environment** > **Injected Provider** - **Kaia Wallet**.\n* In **Contract**, select your contract. For example, ISupraSValueFeedExample.\n* Click **Deploy**.\n\n**Sample Code**\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\ninterface ISupraSValueFeed {\n    function checkPrice(string memory marketPair) external view returns (int256 price, uint256 timestamp);\n}\ncontract ISupraSValueFeedExample {\n    ISupraSValueFeed internal sValueFeed;\n    constructor() {\n        sValueFeed = ISupraSValueFeed(0x7f003178060af3904b8b70fEa066AEE28e85043E);\n    }\n    function getEthUsdtPrice() external view returns (int) {\n        (\n            int price,\n            /* uint timestamp */\n        ) = sValueFeed.checkPrice(\"eth_usdt\");\n        return price;\n    }\n}\n```\n\n### Interact with Smart Contract\n\nTo get the price feed for the selected currency pair, you have to execute the `getEthUsdtPrice()` function.\n\n![](/img/build/tools/sPriceFeed.png)\n\nTada 🎉! You just requested for a currency price feed (ETH/USDT)  in your smart contract. \n\nAs of the time of writing, getEthUsdtPrice() returned \"185795966200\", an 8-point precision figure. To get the actual ETH/USD value, you need to divide the figure by 10^8 which equals $1857.95966200. \n\n## More Ways To Use SupraOracles Crypto Price Feeds\n\n### S-Value Feeds With Web3.js\n\n```javascript\n// example assumes that the web3 library has been imported and is accessible within your scope\nconst getEthUsdtPrice = async () => {\nconst abi = [{ \"inputs\": [ { \"internalType\": \"string\", \"name\": \"marketPair\", \"type\": \"string\" } ], \"name\": \"checkPrice\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]\nconst address = '0x7f003178060af3904b8b70fEa066AEE28e85043E'\nconst web3 = new Web3('https://public-en-kairos.node.kaia.io')\nconst sValueFeed = new web3.eth.Contract(abi, address)\nconst price = (await sValueFeed.methods.checkPrice('eth_usdt').call()).price\nconsole.log(`The price is: ${price}`)\n}\ngetEthUsdtPrice()\n```\n\n\n### S-Value Feeds With ethers.js\n\n```javascript\n// example assumes that the ethers library has been imported and is accessible within your scope\nconst getEthUsdtPrice = async () => {\n////for ethers version 6.0\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\")\n////for ethers version <= 5.7.2\n//const provider = new ethers.providers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst abi = [{ \"inputs\": [ { \"internalType\": \"string\", \"name\": \"marketPair\", \"type\": \"string\" } ], \"name\": \"checkPrice\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ]\nconst address = '0x7f003178060af3904b8b70fEa066AEE28e85043E'\nconst sValueFeed = new ethers.Contract(address, abi, provider)\nconst price = (await sValueFeed.checkPrice('eth_usdt')).price\nconsole.log(`The price is: ${price.toString()}`)\n}\ngetEthUsdtPrice()\n```\n\n## Conclusion\n\nIn this tutorial, you learned how to request an ETH/USD price using the SupraOracle price feed solution. With SupraOracle, you can also generate random numbers in your smart contract. Curious about this process, visit this [guide](https://metaverse-knowledge-kit.klaytn.foundation/docs/decentralized-oracle/oracle-providers/supraOracles-tutorial) on integrating SupraVRF on Kaia. For more in-depth guides on SupraOracles, please refer to the [SupraOracles Docs](https://supraoracles.com/docs/development-guides).",
    "Current Website Url is https://docs.kaia.io/build/tools/oracles/witnet. # Witnet\n\n![](/img/banners/kaia-witnet.png)\n\n## Introduction\n\nThe [Witnet](https://docs.witnet.io/) multichain decentralized oracle enables smart contracts to actualize their potential by providing them access to all sorts of valuable external data sets. These valuable data sets include sports results, stock prices, weather forecasts, randomness, et al.\nTo offer decentralized oracle services, Witnet relies on a distributed network of peer nodes— colloquially called witnesses—who earn Wit tokens as a reward for retrieving web data and reporting it directly to the smart contracts. The witnesses are responsible for sourcing, retrieving, and verifying the data sets. To ensure transparency, each anonymous peer is incentivized to report the retrieved data honestly and is punished or slashed for any wrongdoing.\n\n## Usage\n\nThis oracle network is currently running on the Kaia Mainnet and Kaia Kairos Testnet. To get started with connecting to the data feeds and randomness on Kaia, refer to the following guides:\n\n* [Witnet Price-Feed Tutorial](https://metaverse-knowledge-kit.klaytn.foundation/docs/decentralized-oracle/oracle-providers/witnet-tutorial)\n* [Random Number Generation on Kaia with Witnet](https://medium.com/klaytn/random-number-generation-on-klaytn-with-witnet-ae136dad0562)\n",
    "Current Website Url is https://docs.kaia.io/build/tools. # Tools\n\nThis page contains the list of development tools to help you build Decentralized Applications on Kaia.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/hardware-wallets/dcent. # D'cent Biometric Wallet\n\n## Introduction <a id=\"introduction\"></a>\n\nD'Cent Wallet is a non-custodial biometric wallet designed to offer both Bluetooth-enabled hardware and software options to manage your crypto with ease.\n\nGet a D'CENT device in their [offical website](https://store.dcentwallet.com/pages/dcent-biometric-crypto-wallet)\n\n## Guide\n* [Setup](https://userguide.dcentwallet.com/biometric-wallet/setting-up)\n* [How to send and receive Kaia](https://userguide.dcentwallet.com/coin-send-receive/coins/klaytn-klay#how-to-create-an-klay-account)\n* [Connect with Kaia Wallet](https://userguide.dcentwallet.com/external-service/kaikas)\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/hardware-wallets/safepal-s1. # SafePal S1\n\n![](/img/banners/kaia-safepal.png)\n\n## Introduction <a id=\"introduction\"></a>\n\nHardware wallets reinvented the wheel by keeping private keys (needed for signing transactions) in an offline environment separate from internet connections, avoiding the numerous hacks or threats that arise from software wallets reliant on internet connectivity. This way, users' crypto assets are more secured and shielded from internet dangers brought on by software wallets.\n\nOne of such hardware wallets that has integrated with Kaia is **SafePal S1 Hardware Wallet**. SafePal S1 is a cryptocurrency hardware wallet that aims to provide a secure, simple, and enjoyable crypto management solution for the populace. SafePal is an hardware wallet to secure and manage cryptocurrencies and NFTs, such as Bitcoin, KAIA, Kaia Compatible Tokens(KCT), Ether and ERC20 tokens e.t.c.\n\nIn this guide, you will:\n\n* Add, Receive and Send Klay, and any Kaia Compatible Tokens(KCT)  with SafePal S1 Hardware Wallet\n\n## Prerequisites <a id=\"prerequisites\"></a>\n\n* [SafePal Hardware Wallet Set-Up](https://safepalsupport.zendesk.com/hc/en-us/articles/360046051752)\n\n## Getting Started <a id=\"getting-started\"></a>\n\nAfter you must have successfully set up your wallet, next is to see the wallet in action. In this tutorial we will be adding, receiving and sending KAIA native coin, and any Kaia Compatible Tokens(KCT) using the SafePal S1 Hardware Wallet.\n\n### Adding KAIA native coin <a id=\"adding-kaia-native-coin\"></a>\n\nTo add the KAIA native coin to your hardware wallet, kindly follow the steps below:\n\n**Step 1**: Open the SafePal App and in your Wallet tab, click the ellipsis icon and then click the Manage Coins button as shown in the picture below:\n\n![](/img/build/tools/step1-add-klay.png)\n\n**Step 2**: Select the coins you want to add (in our case KAIA), and click **Add Coin** at the bottom\n\n![](/img/build/tools/step2-add-klay.png)\n\n**Step 3**:  Scan back and forth between the App and the S1 hardware wallet so that the data is correctly synchronized between the App and the device.\n\n**Step 4**: After the coin has been added successfully, you can now view them in the **Asset Management** tab on the S1 device. \n\n![](/img/build/tools/step4-add-klay.png)\n\nKindly note that the steps above are applicable for adding any Kaia Compatible Tokens. \n\n### Receiving KAIA native coin  <a id=\"receiving-kaia-native-coin\"></a> \n\nOnce the coins (KAIA, KCTs) are successfully added, you can view them in the **Asset Management** tab on the S1 device. You can receive KAIA native coin using the following approach: \n\n#### Using the SafePal App\n\n1. Select KAIA which gives you the option of swap, receive and send, click on receive \n2. You can either copy your KAIA address for the wallet, save the QR code, or have the other party scan the QR code from your phone.\n\n#### Using the SafePal S1 Hardware Wallet\n\n**Step 1** Start your SafePal S1 device and navigate to the 'Asset Management' \n \n**Step 2** Select KAIA as the coin you would like to receive from others.\n \n**Step 3** Click on the ‘Receive’ button\n \n**Step 4** Enter the PIN code of your S1 device.\n \n**Step 5** Then you can see the QR code of your coin address, and show it to others so that they can scan and send the coin to you.\n\n![](/img/build/tools/sphw-rec-banner.png)\n\nKindly note that the steps above are applicable for receiving any Kaia Compatible Tokens.\n\n\n### Sending KAIA native coin  <a id=\"sending-kaia-native-coin\"></a>\n\nTo send KAIA native coin from your hardware wallet, kindly follow the steps below:\n\n**Step 1** On the SafePal App, choose the coin you want to send(in our case KAIA)and click **Send**.\n\n![](/img/build/tools/step1-send-klay.png)\n\n**Step 2** Enter the destination address, amount, and click 'Next' to confirm the details again. Ensure to verify your transfer details in this step.\n\n![](/img/build/tools/step2-send-klay.png)\n\n**Step 3** Initiate the signing process of the S1 device.\n\nIn this step, a QR code (as shown below) containing the transfer details will be displayed on the SafePal App. Start your S1 hardware wallet, and enter the **Scan** tab. Next is to scan the QR code on the SafePal App. Doing this ensures that the S1 device receives the transfer details in an offline environment. \n\n![](/img/build/tools/step3-send-klay.png)\n\n**Step 4** Sign the transfer on S1 Device\n\nAfter successfully scanning the transfer details, you will then see the transfer details(amount, fee, gas limit, etc) on your S1 device. Next is to verify the details and enter the PIN code. \n\n![](/img/build/tools/step4-send-klay.png)\n\n**Step 5** Synchronize the signature back to the SafePal App\n\nAfter successfully signing the transfer on the S1 device, you will see a set of dynamic QR codes shown on the S1 device. On the SafePal App, click 'Next' to open the cellphone camera. Use the SafePal App to scan the dynamic QR codes shown on the S1 device. \n\nDoing this ensures the App receives the signature contained in the QR codes and is ready to broadcast the transfer to the blockchain (Kaia).\n\n**Step 6** Click **Broadcast** on the App and wait for the transfer to go through\n\n![](/img/build/tools/step6-send-klay.png)\n\nKindly note that the steps above are applicable for sending any Kaia Compatible Tokens. \n\n\n## Further References  <a id=\"further-references\"></a>\n\n* [SafePal S1 Upgrade Instructions](https://www.safepal.com/en/upgrade/s1)\n* [SafePal S1 User Manual](https://docs.safepal.io/safepal-hardware-wallet/user-manual)",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/contract-interaction. # Interact with Contracts\n\nIn this section, you will be interacting with and sending a transaction to a simple contract deployed on Kairos using our newly created multisig wallet. \n\n**Pre-requisites**\n\n* [Metamask](https://metamask.io/download/) & [Kaia Metamask Config](../../../tutorials/connecting-metamaskx#send-klay)\n* [Remix](https://remix.ethereum.org/) & [Kaia Remix Plugin](https://klaytn.foundation/using-klaytn-plugin-on-remix/)\n* Obtain test KAIA from the [Faucet](https://faucet.kaia.io)\n\n**Step 1:** Navigate to [Remix](https://remix.ethereum.org/)\n\n**Step 2:** Compile and deploy the sample **storage contract**.\n\nThe contract must first be deployed before you may interact with it in your multisig wallet. This sample contract contains a simple uint \"number\" variable that can be updated by calling the **store** method and retrieved by calling the **retrieve** method.\n\n![](/img/build/tools/kaia-safe/ks-ic-deploy.gif)\n\n**Step 3:** Initiate a new transaction. \n\nTo interact with a smart contract in your safe wallet, click **\"New Transaction\"**. To complete this step, you will need your already deployed contract address and ABI, as illustrated in the previous step.\n\n![](/img/build/tools/kaia-safe/kaia-safe-ci-init.gif)\n\n**Step 4:** Review and submit the transaction. You will need to sign the transaction with your signer wallet, and it will be executed once the confirmation threshold is reached.\n\n![](/img/build/tools/kaia-safe/kaia-safe-ci-review-send.gif)",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/csv-airdrop. # Use CSV Airdrop\n\nThis is a custom app in Kaia Safe that can be used to batch multiple transfers of ERC20, ERC721, ERC1155 and native tokens into a single transaction. It's as simple as uploading / copy & pasting a single CSV transfer file and hitting the submit button.\n\nThis single method saves gas ⛽ and a substantial amount of time ⌚ by requiring less signatures and transactions.\n\nLet’s get started with an example using CSV Airdrop!\n\n## Step 1: Login into your [KaiaSafe](https://safe.kaia.io/)  <a id=\"login-kaiasafe\"></a>\n\nIf you haven't created a Safe account yet, please refer to our [Create a Safe Guide](./use-kaia-safe#create-a-safe) and [Add Asset Guide](./use-kaia-safe#add-assets) to set up your account and add assets (KAIA, FT, NFT).\n\n## Step 2: Click apps, search CSV and select CSV Airdrop  <a id=\"search-CSV-airdrop\"></a>\n\n![](/img/build/tools/kaia-safe/search-csv-app.png)\n\n## Step 3: Prepare a Transfer CSV file <a id=\"prepare-CSV-airdrop\"></a>\n\nTransfer files are expected to be in CSV format with the following required columns:\n\n* *token_type*: The type of token that is being transferred. One of erc20,nft or native. NFT Tokens can be either ERC721 or ERC1155.\n* *token_address*: Ethereum address of ERC20 token to be transferred. This has to be left blank for native (ETH) transfers.\n* *receiver*: Ethereum address of transfer receiver.\n* *amount*: the amount of token to be transferred. This can be left blank for erc721 transfers.\n* *id*: The id of the collectible token (erc721 or erc1155) to transfer. This can be left blank for native and erc20 transfers.\n\n:::important\nThe CSV file has to use \",\" as a separator and the header row always has to be provided as the first row and include the described column names.\n[Sample Transfer File](https://ipfs.io/ipfs/bafybeiesr6b3cm76ofcm2joukgdtuyva3niftmbpbb4sgxsa3qwsenv3lu/sample.csv)\n:::\n\n\n### Native Token Transfers <a id=\"native-token-trnasfers\"></a>\n\nSince native tokens do not have a token address, you must leave the *token_address* column blank for native transfers.\n\n![](/img/build/tools/kaia-safe/native-csv-app.png)\n\n:::note\nMake sure you have enough native tokens in the kaia safe wallet address.\n:::\n\n### ERC-20 Transfers <a id=\"erc20-trnasfers\"></a>\n\nProvide erc20 as *token_type* for erc20 transfers and other respective fields accordingly.\n\n![](/img/build/tools/kaia-safe/erc20-csv-app.png)\n\n:::note\nMake sure you have enough erc20 tokens in the kaia safe wallet address.\n:::\n\n### ERC-721 Transfers <a id=\"erc721-transfers\"></a>\n\nProvide erc721 as *token_type* for erc721 transfers and other respective fields accordingly.\n\n![](/img/build/tools/kaia-safe/erc721-csv-app.png)\n\n:::note\nMake sure you have enough erc721 tokens in the kaia safe wallet address.\n:::\n\n### Illustration <a id=\"illustration\"></a>\n\nFor this illustration, we have 2 native transfers, 2 ERC20 transfers and 1 ERC721 transfers\n\n![](/img/build/tools/kaia-safe/rs-csv-app.png)\n\n## Step 4: Review and submit transaction <a id=\"review-submit-transaction\"></a>\n\nYou'll be able to review and confirm the transaction. Once ready, click Submit to execute the transaction just like any other Safe transaction.\n\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/faqs. # Frequently Asked Questions\n\n## Can I add new owners after creating a safe? <a id=\"Can i add new owners after creating a safe\"></a>\n\nYes! After creating your safe account, Kaia Safe gives you access to manage safe owners, i.e., add, remove, and replace owners, or rename existing owners. \n\nNote: To execute this change, you need to be connected with one of the current owners.\n\n\nThe steps below explain how to add new owners or signers to your Safe account after its creation.\n\n**Step 1:** Go to **Settings** in the sidebar menu, you ll see the **Manage Safe Account signers** card under the **Setup** section. \n\n\n**Step 2:** Click the **Add new signer** button at the bottom of the card. Clicking this button would open a new window. \n\n![](/img/build/tools/kaia-safe/ks-add-signers.png)\n\n\n**Step 3:** Enter the **name** of the new owner and paste the **owner's address**. Then click the next button at the bottom-right of the page.\n\n**Step 4:** Set a new signature policy. In this case, you can either change or retain the existing signature policy. The image below shows that 2 out of the 4 owners are required to confirm and execute any transaction.\n\n![](/img/build/tools/kaia-safe/ks-add-signer-details.png)\n\n**Step 5:** Review and submit the transaction. \n\nConfirm that all changes are correct before submitting. You can therefore submit the change by clicking on the **submit** button.\n\nAfter clicking on **Submit**, your connected wallet will ask you to confirm the change. Depending on your existing signature policy, other owners will have to confirm the change just like a regular transaction.\n\n![](/img/build/tools/kaia-safe/kaia-safe-change-owner-setup-review.gif)\n\n\n## Can I change the number of required signer confirmation? <a id=\"Can i change the number of required signer confirmation\"></a>\n\nYes! You can change the number of signer confirmations required by following the steps to be shown below. This is important because you might want to change the owners or signers required to confirm transactions associated with your safe account.\n\n**Step 1:** Go to **Settings** in the sidebar menu, you ll see the **Required Confirmation** card under the **Setup** section. \n\nThis shows your current signature policy, and from the image below, 2 out of 4 owners are required to confirm any transaction.\n\n![](/img/build/tools/kaia-safe/ks-conf-policy.png)\n\n**Step 2:** Click on the **change** button. \n\nThis pops up a new window to select your new signature threshold.\n\n![](/img/build/tools/kaia-safe/ks-conf-policy-btn.png)\n\n**Step 3:** Click on the **Submit** button. \n\nNote that depending on your existing signature policy, other owners will have to confirm the change just like a regular transaction.\n\n\n## How do I add an existing safe? <a id=\"How do i add an existing safe\"></a>\n\nUsing your exported Safe data, which contains your added Safe accounts, address book, and settings, you can easily add your Safe account.\n\n> Note: You must have downloaded your Safe data as shown in the image below:\n\n![](/img/build/tools/kaia-safe/ks-export-btn.png)\n\n\nThe need to add or load an existing safe into the interface varies. These may include:\n\n* You want to access your Safe from a different browser.\n* You want to interact with Safe where another party made you an owner.\n* You want to add any existing safe in read-only mode.\n\nLet's go through the process of adding your existing safe in the following steps. Note: Please ensure that your signer's wallet is connected.\n\n**Step 1:** Navigate to **Settings** tab.\n\n**Step 2:** Scroll to the **Data Import** card under the **Data** section. \n\n![](/img/build/tools/kaia-safe/ks-data-import-i.png)\n\nHere you can either Drag and Drop a JSON file or choose your file as seen in the image above. \n \n**Step 3:** Click on **Import** button.\n\n![](/img/build/tools/kaia-safe/ks-data-import-btn.png)\n\n![](/img/build/tools/kaia-safe/kaia-safe-data-import.gif)\n\nAfter this, you should now have access to your Safe account.\n\n## Common safe Set-up\n\nThis tends to provide some pointers regarding decisions to take when setting up a Safe. These may include:\n\n* How many owners?\n* What threshold?\n* What wallets are compatible?\n\n \nThere is no one best response to these three questions, therefore there is no one optimum Safe configuration. Really, it all depends on the particular use case. Nevertheless, we make an effort to offer some suggestions for things to take into account:\n\n**How many owners?**\n\nTypically, having many owner accounts is a smart option. It is good practice for several people to have access to the safe account when groups are managing funds. It is advised for individuals who manage money to have multiple accounts so they can use more than one authentication factor.\n\n**What threshold?**\n\nA Safe's threshold is the minimum number of owner accounts that must approve a transaction before it can be successfully executed. It is advisable to use a threshold greater than 1, ensuring that at least one additional account is always needed to validate and carry out Safe transactions, rather than allowing a single account to carry out transactions. As a result, money cannot be moved even if an attacker gains access to one account.\n \nAdditionally, it is recommended to choose a threshold of 51% of the total owners, e.g., 2 out of 3, 3 out of 5, etc.  Because of this, even if one owner loses access to their account, users are not immediately locked out of all of their money in the Safe; instead, the other owners can still perform transactions and, for example, replace that lost owner account. One can contend that this serves as a recovery mechanism.\n \n**What wallets are compatible?**\nAt the moment, Kaia Safe is compatible with [Kaia Wallet](https://docs.kaiawallet.io/), [MetaMask](../../../tutorials/connecting-metamaskx).",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/kaia-safe-api-kit. ---\nid: kaia-safe-api-kit\ntitle: Kaia Safe API-Kit\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Kaia Safe API Kit\n\nAPI-Kit is your go-to kit for securely interacting with the [Safe Transaction API](https://github.com/safe-global/safe-transaction-service). The core of this kit is to allow valid signers to propose and share transactions with the other signers of a Safe, send the signatures to the service to collect them, and get information about a Safe (like reading the transaction history, pending transactions, enabled Modules and Guards, etc.), among other features.\n\n## Quickstart <a id=\"Quickstart\"></a>\n\nBy the end of this guide, you will be able to propose transactions to the service and obtain the owners' signatures for execution.\n\n## Prerequisites <a id=\"Prerequisites\"></a>\n\n1. [Node.js and npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)\n2. A Safe with several signers\n\n## Set up environment <a id=\"Setup-environment\"></a>\n\n### Step 1: Create a project directory.\n\nCopy and paste this command in your terminal to create the project folder.\n\n```js\nmkdir kaiasafe-api-kit\ncd kaiasafe-api-kit\n```\n\n### Step 2: Initialize an npm project. \n\nCopy and paste this command in your terminal to create a `package.json` file.\n\n```js\nnpm init -y\n```\n\n### Step 3: Install dependencies. \n\nUsing API-Kit is as simple as running the installation command below: \n\n\n<Tabs>\n  <TabItem value=\"npm\" label=\"npm\">\n    ```\n    npm install @safe-global/api-kit @safe-global/protocol-3 @safe-global/safe-core-sdk-types  \n    ```\n  </TabItem>\n\n <TabItem value=\"yarn\" label=\"yarn\">\n    ```\n    yarn add @safe-global/api-kit @safe-global/protocol-kit @safe-global/safe-core-sdk-types\n    ```\n </TabItem>\n</Tabs>\n\n### Step 4: Import dependencies.\n\nCreate a file named  `app.js`. This is where all our code snippets for this interaction would live. \n\nCopy and paste these necessary imports at the top of the `app.js` file. \n\n```js\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport { \n  OperationType\n} from '@safe-global/safe-core-sdk-types'\n```\n\n### Step 5: Configure Setup\n\nTo efficiently illustrate how API-Kit works, we will use a Safe account setup with two or more signers, and threshold two, so we have multiple signatures that need to be collected when executing a transaction.\n\nCopy and paste the following under the import statements in your `app.js` file: \n\n```js\n// https://chainlist.org/?search=kaia&testnets=true\nconst RPC_URL = 'https://public-en-kairos.node.kaia.io'\nconst SAFE_ADDRESS = \"<REPLACE WITH SAFE PUBLIC ADDRESS HERE>\";  // 2 Owner Safe Address Ex: 0x123.... SAFE SHOULD \nconst OWNER_1_ADDRESS = \"<REPLACE WITH OWNER 1 PUBLIC KEY HERE>\"; // ONLY OWNER 1 and SAFE ADDRESS Need to have some test KAIA balance\nconst OWNER_1_PRIVATE_KEY = \"<REPLACE WITH OWNER 1 PRIVATE KEY HERE>\";\nconst OWNER_2_PRIVATE_KEY = \"<REPLACE WITH OWNER 2 PRIVATE KEY HERE>\"; // OWNER 2 need not have any test KAIA\nconst TO_ADDRESS = OWNER_1_ADDRESS; // Receiver address of sample transaction who receives 1 wei\n```\n\n## Use API Kit <a id=\"use-api-kit\"></a>\n\n### Step 1: Initialize API Kit\n\nTo initialize API Kit, we need to create an instance of the API Kit. \n\n> In chains where the [Safe Transaction Service](https://docs.safe.global/core-api/transaction-service-overview) is supported, it's enough to specify the chainId property.\n\n```js \nconst apiKit = new SafeApiKit.default({\n  chainId: 1001n,\n  txServiceUrl: 'https://docs-safe.kaia.io/txs-baobab/api'\n})\n\n```\n\nAs you can see above, we included custom service using the optional **txServiceUrl** property.\n\n### Step 2: Initialize Protocol Kit\n\nTo handle transactions and signatures, we need to create an instance of the Protocol Kit (a kit that enables developers to interact with  [Safe Smart Accounts](https://github.com/safe-global/safe-smart-account) using a TypeScript interface) with the provider, signer and safeAddress.\n\n```js\nconst protocolKitOwner1 = await Safe.default.init({\n  provider: RPC_URL,\n  signer: OWNER_1_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\n```\n\n### Step 3: Propose a transaction to the service\n\nOne of the core features of API Kit is to enable valid signers to share transactions with other signers. But before this is done,  any of the Safe signers needs to initiate the process by creating a proposal of a transaction. This transaction is then sent  to the service to make it accessible by the other owners so they can give their approval and sign the transaction as well.\n\n```js\nconst safeTransactionData = {\n  to: TO_ADDRESS,\n  value: '1', // 1 wei\n  data: '0x',\n  operation: OperationType.Call\n}\nconst safeTransaction = await protocolKitOwner1.createTransaction({\n  transactions: [safeTransactionData]\n})\nconst safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction)\nconst signature = await protocolKitOwner1.signHash(safeTxHash)\n// 2. Propose transaction to the service\ntry {\n  await apiKit.proposeTransaction({\n    safeAddress: SAFE_ADDRESS,\n    safeTransactionData: safeTransaction.data,\n    safeTxHash,\n    senderAddress: OWNER_1_ADDRESS,\n    senderSignature: signature.data\n  })\n} catch(err) {\n  console.log(err)\n}\n```\n\n### Step 4: Retrieve pending transaction\n\nAPI Kit provides us  different methods to retrieve pending transactions depending on the situation. For this guide, we will retrieve a transaction given the Safe transaction hash and other available methods commented out below:\n\n```js\nconst transaction = await apiKit.getTransaction(safeTxHash)\n// const transactions = await service.getPendingTransactions()\n// const transactions = await service.getIncomingTransactions()\n// const transactions = await service.getMultisigTransactions()\n// const transactions = await service.getModuleTransactions()\n// const transactions = await service.getAllTransactions()\n```\n\n## Step 5: Confirm the transaction\n\nThe next thing to do is to sign the transaction with the Protocol Kit and submit the signature to the Safe Transaction Service using the [confirmTransaction](https://docs.safe.global/sdk/api-kit/reference#confirmtransaction) method.\n\n```js\nconst protocolKitOwner2 = await Safe.default.init({\n  provider: RPC_URL,\n  signer: OWNER_2_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\nconst signature2 = await protocolKitOwner2.signHash(safeTxHash)\n// Confirm the Safe transaction\nconst signatureResponse = await apiKit.confirmTransaction(\n  safeTxHash,\n  signature2.data\n)\n```\n\n### Step 6: Execute the transaction\n\nThe Safe transaction is now ready to be executed. This can be done using the [Safe Wallet Web](https://app.safe.global/) interface, the [Protocol Kit](https://docs.safe.global/sdk/protocol-kit#execute-the-transaction), the Safe CLI or any other tool that's available.\n\nFor this last step, we executed the safe transaction using Protocol Kit.\n\n```js\nconst safeTxn = await apiKit.getTransaction(safeTxHash);\nconst executeTxReponse = await protocolKitOwner1.executeTransaction(safeTxn)\nconst receipt = await executeTxReponse.transactionResponse?.wait();\nconsole.log('Transaction executed:');\nconsole.log(`https://kairos.kaiascan.io/tx/${hash}`)\n```\nAt the end, the full code in `app.js` should look like this:\n\n```js\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport { \n  OperationType\n} from '@safe-global/safe-core-sdk-types'\n// https://chainlist.org/?search=kaia&testnets=true\nconst RPC_URL = 'https://public-en-kairos.node.kaia.io'\nconst SAFE_ADDRESS = \"<REPLACE WITH SAFE PUBLIC ADDRESS HERE>\";  // 2 Owner Safe Address Ex: 0x123.... SAFE SHOULD \nconst OWNER_1_ADDRESS = \"<REPLACE WITH OWNER 1 PUBLIC KEY HERE>\"; // ONLY OWNER 1 and SAFE ADDRESS Need to have some test KAIA balance\nconst OWNER_1_PRIVATE_KEY = \"<REPLACE WITH OWNER 1 PRIVATE KEY HERE>\";\nconst OWNER_2_PRIVATE_KEY = \"<REPLACE WITH OWNER 2 PRIVATE KEY HERE>\"; // OWNER 2 need not have any test KAIA\nconst TO_ADDRESS = OWNER_1_ADDRESS; // Receiver address of sample transaction who receives 1 wei\nconst apiKit = new SafeApiKit.default({\n  chainId: 1001n,\n  txServiceUrl: 'https://docs-safe.kaia.io/txs-baobab/api'\n})\nconst protocolKitOwner1 = await Safe.default.init({\n  provider: RPC_URL,\n  signer: OWNER_1_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\n// 1. Create transaction\nconst safeTransactionData = {\n  to: TO_ADDRESS,\n  value: '1', // 1 wei\n  data: '0x',\n  operation: OperationType.Call\n}\nconst safeTransaction = await protocolKitOwner1.createTransaction({\n  transactions: [safeTransactionData]\n})\nconst safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction)\nconst signature = await protocolKitOwner1.signHash(safeTxHash)\n// 2. Propose transaction to the service\ntry {\n  await apiKit.proposeTransaction({\n    safeAddress: SAFE_ADDRESS,\n    safeTransactionData: safeTransaction.data,\n    safeTxHash,\n    senderAddress: OWNER_1_ADDRESS,\n    senderSignature: signature.data\n  })\n} catch(err) {\n  console.log(err)\n}\nconsole.log(\"Transaction hash is \"+safeTxHash)\nconst transaction = await apiKit.getTransaction(safeTxHash)\n// const transactions = await service.getPendingTransactions()\n// const transactions = await service.getIncomingTransactions()\n// const transactions = await service.getMultisigTransactions()\n// const transactions = await service.getModuleTransactions()\n// const transactions = await service.getAllTransactions()\n// 3. Confirmation from Owner 2\nconst protocolKitOwner2 = await Safe.default.init({\n  provider: RPC_URL,\n  signer: OWNER_2_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\nconst signature2 = await protocolKitOwner2.signHash(safeTxHash)\n// Confirm the Safe transaction\nconst signatureResponse = await apiKit.confirmTransaction(\n  safeTxHash,\n  signature2.data\n)\nconsole.log(signatureResponse)\n// 4. Execute transaction\nconst safeTxn = await apiKit.getTransaction(safeTxHash);\nconst executeTxReponse = await protocolKitOwner1.executeTransaction(safeTxn)\nconst receipt = await executeTxReponse.transactionResponse?.wait();\nconsole.log('Transaction executed:');\nconsole.log(`https://kairos.kaiascan.io/tx/${hash}`)\n```\n\n\nVisit the [API Kit Reference](https://docs.safe.global/sdk/api-kit/reference) for more information, and navigate to [Github](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/snippets) to access the full source code for this guide.",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe. # Kaia Safe\n\nIn a typical blockchain platform like Kaia, most users are familiar with single key wallet systems such as Kaia Wallet and MetaMask, which are also known as externally owned accounts (EOA). These accounts make use of traditional key pairs, i.e., public keys and private keys, which isn’t ideal as the private key creates a single point of failure. \n\nThis makes EOAs unsuitable for organisational use, as a compromised private key could lead to the organisation losing all of its crypto funds—such was the case in the [Wintermute hack](https://www.certik.com/resources/blog/uGiY0j3hwOzQOMcDPGoz9-wintermute-hack-) where $162.5 million was lost. \n\nThis is where multisig wallets like Kaia Safe come in. Unlike single key wallets, a multi-sig wallet needs multiple parties' private keys to sign and execute a transaction, removing the single point of failure and providing greater security for organisational use cases.\n\n## What are MultiSig Wallets? <a id=\"What are Multisig Wallets\"></a>\n\nAs the name implies, a multi-signature wallet is a digital wallet that requires two, three, or more private keys from different sources to confirm and execute a crypto transaction.\n\nFor example, you can imagine a multi-signature wallet as a safe that has three locks. The three keys required to open the safe are with three different individuals, thus requiring their joint consent to open.\n\nHere are the main benefits of multisig wallets:\n\n* **Store assets/funds securely:** Companies and protocols can store their funds safely without worrying about a private key leak or one bad actor moving funds without authorization.\n\n* **Enable decentralised decision making:** Companies and business executives can make on-chain decisions on which transactions to execute.\n\n* **Two-factor authentication:** With the help of multisig wallets, businesses and individuals can make sure that only those with access to the necessary keys can execute transactions.\n\nNext, we will dive into Kaia Safe, a multisig wallet for Klatyn, and how to use it to manage your funds and transactions.\n\n## What is Kaia Safe? <a id=\"What is Kaia Safe\"></a>\n\nKaia Safe is a multisig wallet for the Kaia ecosystem. It is a fork of the well-known multisig wallet [Gnosis Safe](https://gnosis-safe.io/). \n\n## Benefits <a id=\"Benefits of Kaia Safe\"></a>\n\n* **Store and transfer KAIA and KCTs (KIP7, KIP17)**: Users can deposit and transfer cryptocurrencies (KAIA) and tokens (fungible or non-fungible).\n \n* **Flexibility and security:** The confirmation threshold gives users more flexibility and control over which transactions should be executed, and removes the single point of failure.\n\n* **Safe apps:** Kaia Safe's functionality is expanded by the addition of custom apps that enable batch transactions and interaction with other dApps. One example of this safe app is the **Transaction Builder** which combines and executes multiple transactions as a batch transaction.\n\n* **Account recovery:** In the event of lost keys, Kaia Safe accounts can be recovered as long as the confirmation threshold can still be met by the remaining keys.",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/overview. # Kaia Safe Design\n\nCurrently, Kaia Safe is a collection of tools to create and manage multi-signature wallets, viz:\n\n* **Safe React:** This is a react web app to create and interact with a multi-sig wallet.\n\n* **Safe Transaction Service:** This keeps track of transactions sent via safe contracts and listens to events from recent blocks in Mainnet and Kairos. Transactions can also be sent to the service to allow off-chain collecting of signatures or to inform the owners about a transaction that is pending to be sent to the blockchain.\n\n* **Safe Config Service:** This provides configuration information of the Kaia Safe clients environment, e.g configs of all chain details and APIs.\n\n* **Safe Client Gateway:** This is a gateway between the Kaia Safe client and the backend services (transaction service and Kaia Nodes)\n\n* **Safe Infrastructure:** This is a  cluster setup to deploy the backend services (Safe-Transaction, Safe-Config, Safe-Client gateway). \n\nPlease refer to this [link](https://github.com/kaiachain/kaia-safe-infrastructure) to get more information.",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/tx-builder. # Use Transaction Builder\n\nThis is a custom app in Kaia Safe that is responsible for batching transactions. This means that we you can bundle several transactions together, instead of having to confirm one transaction after the other. You just have to confirm and execute once.\n\nWith transaction builder, you can compose transactions from token transfers to complex contract interactions and batch them into a single transaction.\n\n\n## KAIA Token Transfer <a id=\"token-transfer\"></a>\nYou can perform token transfer using transaction builder by following the steps below:\n\n**Step 1:** Navigate to Safe Apps and open Transaction Builder Safe App \n\n![](/img/build/tools/kaia-safe/ks-tx-builder.png)\n\n**Step 2:** Enter the recipient wallet address. For this guide, kindly skip the ABI field as we are trying to execute KAIA transfer transaction.\n\n![](/img/build/tools/kaia-safe/tx-builder-token-recipient-addr.png)\n\n\n**Step 3:** Enter the KAIA value you want to send. \n\n> Note: In this guide, we are sending 1 KAIA, so we entered 1 in the **KAIA value** input field. You can input any amount here, depending on your Safe's KAIA balance.\n\n![](/img/build/tools/kaia-safe/tx-builder-token-trf-value.png)\n\n**Step 4:** Click Add transaction. \n\n**Step 5:** Repeat steps 2, 3, and 4 for every recipient address.\n\n**Step 6:** Once you added all operations to the batch click Create Batch. \n\n![](/img/build/tools/kaia-safe/token-trf-tx-builder.gif)\n\n\n**Step 7:** Review and submit transaction\n\nYou'll be able to review the whole batch. Once ready, click Send Batch to submit and execute the transaction just like any other Safe transaction.\n\n\n## Contract Interactions <a id=\"contract-interactions\"></a>\n\nLet's say you want to airdrop tokens to a long list of addresses, say 10 CCT tokens to 5 addresses. Instead of having to create 5 transactions, which the owners of your safe have to confirm and execute one after the other, the transaction builder puts all these transfers into a single transaction.\n\nIn this guide, we have minted CCT tokens to the Safe address for illustrative purpose.\n\nLet’s get started with this example using Transaction Builder!\n\n**Step 1:** Open Safe Apps.\n\n![](/img/build/tools/kaia-safe/ks-tx-builder.png)\n\n**Step 2:** Open the Transaction Builder Safe app\n\n![](/img/build/tools/kaia-safe/ks-use-tx-builder.png)\n\n**Step 3:** Enter your **token contract address** and **ABI**. \n\nIn this example, CCT contract address and ABI will be used. You can copy and paste your ABI into the **Enter ABI** field.\n\n![](/img/build/tools/kaia-safe/kaia-safe-tx-builder-init.gif)\n\n**Step 4:** Select a method and fill the transaction information\n\nFrom the drop-down you can select a method. In this case, we select the **transfer** method. For this step to be completed, you have to fill out the transaction information, such as **to(address)** and **amount(uint256)**.\n\n\nNote: The value is an unsigned integer without any decimals. In this example, the CCT token has 18 decimals. So if you want to send 10 CCT, you have to enter 10000000000000000000. \n\n![](/img/build/tools/kaia-safe/kaia-safe-tx-builder-details.gif)\n\n**Step 5:** Click **Add transaction**\n \n**Step 6:** Repeat steps **4**, **5**, and **6** for every recipient address.\n \n**Step 7:** Once you added all operations to the batch click **Create Batch**\n\n![](/img/build/tools/kaia-safe/kaia-safe-tx-builder-batch.gif)\n\n**Step 8:** Review and submit transaction\n\nYou'll be able to review the whole batch. Once ready, click **Send Batch** to submit and execute the transaction just like any other Safe transaction.\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-safe/use-kaia-safe. # Use Kaia Safe\n\n## Create a Safe\n\nHere you will see how to create a Safe and evaluate its benefits on the Kaia Network.\n\n**Step 1:** Navigate to [Kaia Safe App](https://safe.kaia.io/). By navigating to the application on your web browser, you can explore the functionality of Kaia Safe.\n\n**Step 2:** Connect your [wallet](https://docs.ethhub.io/using-ethereum/wallets/intro-to-ethereum-wallets/). At the moment, Kaia Safe support various wallets like [Kaia Wallet](https://docs.kaiawallet.io/), [MetaMask](../../../tutorials/connecting-metamaskx) wallet, etc. \n\nFor the sake of this guide, we will be using MetaMask. Make sure you have Kaia networks([Mainnet](../../../tutorials/connecting-metamaskx#connect-to-kaia-network) or [Kairos Testnet](../../../tutorials/connecting-metamaskx#connect-to-kaia-network)) added to your MetaMask wallet to connect successfully.\n\n![](/img/build/tools/kaia-safe/kaia-safe-connect-wallet.png)\n\n**Step 3:**  Once your wallet is connected, click **Create Account** and give your new Safe a **name**. This name is linked to your safe account, which is a multi-signature wallet that holds and stores all of your funds.\n\n**Step 4:** Add owners/signers by inputting the addresses that have permission to submit and approve transactions. You can add as many signers as you want and remove or replace any of them at any time.\n\n**Step 5:** Choose how many signer confirmations a transaction in your Safe account needs to be approved. It is important to note that by default our app allows one signer confirmation. But it is advisable to use a threshold higher than 1 to ensure a secured safe account. Good practice is to use a threshold of 51% of the total owners e.g, 2 out of 3, 3 out of 5 etc as shown below:\n\n![](/img/build/tools/kaia-safe/kaia-safe-create-acct.gif)\n\n**Step 6:** Review and deploy Safe\n\nOnce you are completely satisfied with all of your Safe parameters, you can submit the creation of your Safe account and proceed with the on-screen instructions to complete the account creation.\n\n![](/img/build/tools/kaia-safe/kaia-safe-create-review.gif)\n\nCongratulations on successfully creating your Kaia Safe account!\n\n## Add assets\n\nIn this section, you will see how to add assets (KAIA, FT, NFT)  to your safe account and keep your funds safe.\n\n### KAIA Deposits\n\nBelow are the steps to add **KAIA** to your safe account\n\n**Step 1:** Copy your Safe address from your account dashboard.\n\n![](/img/build/tools/kaia-safe/ks-deposit-copy-addr.png)\n\n**Step 2:** Open your Metamask wallet and click **send** to send asset to your safe account. \n\nNote that there are different ways to send assets to your Safe account. You can send from your [hardware wallet](https://www.ledger.com/academy/crypto-hardware-wallet), [web wallet](https://medium.com/arcana-network-blog/why-web-wallets-e77c776e4d5e), or even a smart contract. In this case, we're making use of a web wallet called MetaMask.\n\n\n![](/img/build/tools/kaia-safe/ks-token-send-btn.png)\n\n**Step 3:** Paste your safe address in the search field as seen below.\n\n**Step 4:** Input **amount** and click **next**.\n\n![](/img/build/tools/kaia-safe/ks-token-send-details.png)\n\n\n**Step 5:** Confirm the transaction and check your asset dashboard. You can see the amount being transferred from your metamask account to your Kaia Safe account. \n\n![](/img/build/tools/kaia-safe/kaia-safe-klay-bal.png)\n\n### KIP-7 Deposits\n\nNow we will see how to deposit KIP7 (fungible tokens) to our safe by following the below steps.\n\n**Step 1:** Copy your Safe address from your account dashboard.\n\n![](/img/build/tools/kaia-safe/ks-deposit-ft-copy.png)\n\n**Step 2:** Open your Metamask Wallet and navigate to **assets** tab.\n\n**Step 3:** Select the token you will love to send and click **send**.\n\n![](/img/build/tools/kaia-safe/ks-ft-send-btn.png)\n\n**Step 4:** Repeat step **3**, **4**, **5** of **KAIA** Deposits above.\n\n![](/img/build/tools/kaia-safe/ks-ft-send-details.png)\n\n\n**Step 5:** View your assets dashboard, you can see the KIP7 tokens being transferred to your safe account. Similarly you can transfer any Fungible token to your safe account.\n\n![](/img/build/tools/kaia-safe/ks-ft-balance.png)\n\n### KIP-17 (NFTs) Deposits\n\nNow we  will see how to deposit KIP17 (Non Fungible tokens) to our safe by following the steps below.\n\nYou can transfer your NFT’s to your safe account in many different ways. Here is an example on how to transfer NFT to the safe account using  [OpenSea](https://opensea.io/about).\n\n1. Navigate to your [OpenSea account](https://testnets.opensea.io/account) profile page\n2. Navigate to an NFT you ll love to transfer. Make sure to select a NFT on the Kaia Network(Mainnet or Kairos)\n3. On the next page, click on the transfer button. \n4. Paste the safe address in the text box and transfer to safe \n5. Under Assets section in Kaia Safe you can find NFT’s from OpenSea. \n\n![](/img/build/tools/kaia-safe/kaia-safe-trf-nft.gif)\n\nPlease refer to this [guide](https://support.opensea.io/en/articles/8866959-how-can-i-transfer-an-nft-using-opensea) from OpenSea for more details on transferring NFTs.\n\n## Send assets\n\nIn this section, you'll learn how to send KAIA and KIP-7 tokens from your Kaia Safe account.\n\n### Send KAIA & KIP7 Tokens <a id=\"Send KAIA from Safe\"></a>\n\n**Step 1:** Click the **New Transaction** button in the side menu and select **Send tokens** to begin a new asset transfer.\n\n![](/img/build/tools/kaia-safe/kaia-safe-init-send-token.gif)\n\n**Step 2:** Choose assets to transfer. \n\n* **KAIA**\n  \n> Note: Add the **recipient address** and the **amount** of KAIA to send the transfer KAIA.\n\n![](/img/build/tools/kaia-safe/kaia-safe-send-token-details.gif)\n  \n* **KIP-7 Tokens**\n\nSelect the tokens you want to send in the asset drop-down as seen in the image above.\n\n> Note: Add the recipient address and the number of tokens to transfer KIP7 tokens.\n  \n\n**Step 3:** Review and submit the transaction. You will need to sign the transaction with your signer wallet, and it will be executed once the confirmation threshold is reached.\n\n![](/img/build/tools/kaia-safe/kaia-safe-review-send-tokens.gif)\n\n### Send NFTs <a id=\"Send NFTs from Safe\"></a>\n\nIn this section, you'll learn how to send your non-fungible tokens from your Kaia Safe account. \n\n**Step 1:** Click the **New Transaction** button in the side menu and select **Send NFTs** to begin a new asset transfer.\n\n![](/img/build/tools/kaia-safe/kaia-safe-init-send-nft.gif)\n\n**Step 2:** Choose assets to transfer.\n\n![](/img/build/tools/kaia-safe/kaia-safe-send-nft-details.gif)\n\n**Step 3:** Review and submit the transaction. You will need to sign the transaction with your signer wallet, and it will be executed once the confirmation threshold is reached.\n\n![](/img/build/tools/kaia-safe/kaia-safe-review-send-nft.gif)\n\n## Further Notes <a id=\"Points to Note\"></a>\n\nThe following are things you will want to keep in mind while using Kaia Safe:\n\n### Transaction Fees <a id=\"Transaction Fees\"></a>\n\nKaia Safe transactions, whether asset transfers or contract interactions, incur a fee that will be paid by the signer that executes the transaction (usually the last signer to reach the required threshold of signatures).\n\n### Safe Nonce <a id=\"Safe Nonce\"></a>\n\nFor security reasons, transactions made with Safe need to be executed in order. To achieve this, a number called **nonce** is assigned to a transaction to ensure that each transaction can be executed once. \n\n![](/img/build/tools/kaia-safe/ks-nounce.png)\n\nAt any given time, only transactions with a nonce _last executed transaction +1_ can be executed. Transactions with a higher nonce are queued for execution. So, whenever a transaction is completed, the next transaction in the queue is made available for execution, provided it has accumulated enough signatures.\n\n![](/img/build/tools/kaia-safe/ks-pending-tx.png)\n\n### Chain-specific addresses <a id=\"Chain-specific addresses\"></a>\n\nYou can choose to copy address with chain prefix\n\n* Copy addresses with chain prefix:\n\n![](/img/build/tools/kaia-safe/ks-chain-spec-addr.png)\n\n\nWhen copying your safe address from your dashboard to paste in your wallet as seen above, you can either choose to add the chain name or not by clicking the checkbox. It is suggested that you leave it unchecked to avoid the error below.\n\n![](/img/build/tools/kaia-safe/ks-chain-addr-err.png)",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/kaia-wallet. # Kaia Wallet\n\n![](/img/banners/kaia-kaiawallet.png)\n\nKaia Wallet is a browser extension wallet for the Kaia Network. Available in Google Chrome, Kaia Wallet provides a secure and usable means to interact with the Kaia network via web browser. With Kaia Wallet, you are able to store and transact with your KAIA and Kaia-based tokens. You are also able to sign requests from web-based dApps (Decentralized Applications) in\nrealtime.\n\n* Download from Chrome Web Store: [link](https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi)\n\nFor developers, please visit [https://docs.kaiawallet.io](https://docs.kaiawallet.io) to learn how you can develop dApps using Kaia Wallet.\n\n## PC web browser based decentralized HD wallet\n\nKaia Wallet is a web browser extension available in Chrome. Kaia Wallet is optimized for the desktop environment.\n\nKaia Wallet offers manageability of user accounts and keys. All transactions are transparently recorded on the Kaia blockchain, so anybody can access the transaction history by using [Kaiascope].\n\nKaia Wallet is a Hierarchical Deterministic (HD) wallet, meaning that it generates a hierarchical tree-like structure of private/public keys indefinitely from a single seed phrase. The seed phrase consists of mnemonic code words, which makes it easier to remember than phrases made of random alphanumerics. Users' private keys are encrypted and stored in their browsers.\n\nWith the features described above, Kaia Wallet has improved the security, transparency, and user-friendliness of the current blockchain experience. However, it is vital for users to be responsible for managing their personal accounts. For example, if a user couldn't remember his/her seed phrase, there would be no other way to restore his/her accounts.\n\n## Supporting various Kaia networks and tokens\n\nKaia Wallet allows you to store and transact with all Kaia-based tokens including KAIA. Tokens that are not loaded by default can be inserted by pasting in their contract address. You can even store and transact your own Kaia-based custom tokens on Kaia Wallet!\n\nKaia Wallet supports Kaia's Kairos testnet as well as the Mainnet. Moreover, Kaia Wallet supports the private chains for Kaia-based dApp developers who may wish to circulate custom tokens in their private network.\n\n## Signing web-based dApp transactions\n\nKaia Wallet simply bridges the gap between you and dApps, empowering you to sign transactions/data flowing to you from dApps with Kaia Wallet account.\nKaia Wallet is also an aidful utility for developers to handle [fee-delegated transactions](../../transactions/transactions#fee-delegation). Using Kaia Wallet, both transaction senders and fee payers can swiftly sign the fee-delegated transactions.\n\n\n[Kaiascope]: ../block-explorers/kaiascope\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries/particle. ---\nsidebar_label: Particle Network\n---\n\n# Integrate Particle Network into a dApp \n\n![](/img/banners/kaia-particle.png)\n\n## Introduction\n\n[Particle Network](https://particle.network) provides Wallet Abstraction services to simplify user onboarding.\n\nThe [Particle Connect SDK](https://developers.particle.network/api-reference/connect/desktop/web) supports EVM-compatible chains, including Kaia and its testnet. It allows for 2-click onboarding with [social and Web3 login options](https://developers.particle.network/api-reference/connect/desktop/web#wallet-connectors), all within a single modal.\n\nWith Particle Network, developers on Kaia can embed social logins for the Kaia Mainnet and testnet, allowing users to generate and use a wallet within your application using only their Google, email, X, etc.\n\nThis page offers an overview and tutorial for implementing Particle Connect within a Kaia-based application, to help you start the integration process.\n\n## Prerequisites\n\n* A [Next.js project](https://nextjs.org/docs/getting-started/installation) set up with TypeScript and Tailwind CSS  \n  * You can create this by running: `npx create-next-app@latest`\n* A **Project ID**, **Client Key**, and **App ID** from the [Particle Dashboard](https://dashboard.particle.network).\n\n## Installation\n\nTo leverage Particle Network, specifically Particle Connect, within your dApp, you'll need to first install the required libraries. The Particle Connect SDK streamlines wallet creation, user login, and blockchain interactions with one interface. It supports both social and Web3 logins for easy access.\n\nTo install the SDK, along with Viem (backend for Connect) and ethers (demonstrating EIP-1193 providers), run:\n\n```shell\nyarn add @particle-network/connectkit viem@^2 ethers\n```\n\n## Initializing Particle Connect\n\nTo begin with, we’ll set up Particle Connect, Particle's flagship authentication SDK. Create a new file called `ConnectKit.tsx` in the root directory of your project. This file will house the `ParticleConnectKit` component, a wrapper for the configured `ConnectKitProvider` instance that serves as the primary interface for the configuration of Particle Connect (we'll go over what this looks like programmatically in a moment).\n\nNext, head over to the [Particle dashboard](https://dashboard.particle.network) to create a new web application project and obtain the following essential API keys:\n\n- **`projectId`** – a unique identifier for your project.\n- **`clientKey`** – a key specific to your client.\n- **`appId`** – the ID for your application.\n\nStore these API keys in a `.env` file as follows:\n\n```plaintext\nNEXT_PUBLIC_PROJECT_ID='PROJECT_ID'\nNEXT_PUBLIC_CLIENT_KEY='CLIENT_KEY'\nNEXT_PUBLIC_APP_ID='APP_ID'\n```\n\nNow, add the following code to your `ConnectKit.tsx` file:\n\n```js\n\"use client\";\n\nimport React from \"react\";\nimport { ConnectKitProvider, createConfig } from \"@particle-network/connectkit\";\nimport { authWalletConnectors } from \"@particle-network/connectkit/auth\";\nimport { defineChain } from \"@particle-network/connectkit/chains\";\nimport { wallet, EntryPosition } from \"@particle-network/connectkit/wallet\";\n\nconst kaiaMainnet = defineChain({\n  id: 8217,\n  name: \"Kaia\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"KAIA\",\n    symbol: \"KAIA\",\n  },\n  rpcUrls: {\n    default: {\n      http: [\"https://public-en.node.kaia.io\"],\n    },\n  },\n  blockExplorers: {\n    default: { name: \"Explorer\", url: \"https://kaiascope.com/\" },\n  },\n  testnet: false,\n});\n\nconst kaiaTestnet = defineChain({\n  id: 1001,\n  name: \"Kaia Testnet\",\n  nativeCurrency: {\n    decimals: 18,\n    name: \"KAIA\",\n    symbol: \"KAIA\",\n  },\n  rpcUrls: {\n    default: {\n      http: [\"https://public-en-kairos.node.kaia.io\"],\n    },\n  },\n  blockExplorers: {\n    default: { name: \"Explorer\", url: \"https://kairos.kaiascope.com/\" },\n  },\n  testnet: true,\n});\n\nconst config = createConfig({\n  projectId: process.env.NEXT_PUBLIC_PROJECT_ID!,\n  clientKey: process.env.NEXT_PUBLIC_CLIENT_KEY!,\n  appId: process.env.NEXT_PUBLIC_APP_ID!,\n\n  walletConnectors: [authWalletConnectors({})],\n\n  plugins: [\n    wallet({\n      entryPosition: EntryPosition.BR, // Positions the modal button at the bottom right on login\n      visible: true, // Determines if the wallet modal is displayed\n    }),\n  ],\n  chains: [kaiaMainnet, kaiaTestnet],\n});\n\nexport const ParticleConnectkit = ({ children }: React.PropsWithChildren) => {\n  return <ConnectKitProvider config={config}>{children}</ConnectKitProvider>;\n};\n```\n\nVirtually every property of this component can be configured, from the different login types you support to the visual appearance of the modal; to explore these various options, head over to [Particle's documentation](https://developers.particle.network/api-reference/connect/desktop/web#configuration).\n\n## Integrate Particle Connect into Your App\n\nNow that the configuration is complete, wrap your application with the `ParticleConnectKit` component to enable global access to the Particle Connect SDK. To achieve this, modify your `layout.tsx` file in the `src` directory as follows:\n\n```typescript\nimport { ParticleConnectkit } from '@/connectkit';\nimport type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Particle Connectkit App',\n  description: 'Generated by create next app',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <ParticleConnectkit>{children}</ParticleConnectkit>\n      </body>\n    </html>\n  );\n}\n```\n\n### Connecting Wallet\n\nWith your `layout.tsx` file setup, you can move on to connecting your users through a central **Connect Wallet** button. You can import `ConnectButton` from `@particle-network/connectkit` to do this. The `ConnectButton` turns into an embedded widget once the user logs in.\n\n```js\nimport { ConnectButton, useAccount } from '@particle-network/connectkit';\n\nexport const App = () => {\n    const { address, isConnected, chainId } = useAccount();\n\n    // Standard ConnectButton utilization\n    return (\n        <div>\n            <ConnectButton />\n            {isConnected && (\n                <>\n                    <h2>Address: {address}</h2>\n                    <h2>Chain ID: {chainId}</h2>\n                </>\n            )}\n        </div>\n    );\n};\n```\n\n\n### Getting Account and Balance\n\nWith a wallet (or social login) now successfully connected through the `ConnectButton` component, you can retrieve the user's associated Kaia address. Additionally, you can retrieve its current balance (in KAIA) through the `publicClient`, which leverages the Viem provider already set up by Particle Connect.\n\n```js\n\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport {\n  ConnectButton,\n  useAccount,\n  usePublicClient,\n} from \"@particle-network/connectkit\";\nimport { formatEther } from \"viem\";\n\nexport default function Home() {\n  // Account-related states\n  const { isConnected, address, chain } = useAccount();\n  const publicClient = usePublicClient();\n\n  // State variable for balance\n  const [balance, setBalance] = useState<string>(\"\");\n\n  // Fetch and display user balance when connected\n  useEffect(() => {\n    const fetchBalance = async () => {\n      if (address) {\n        try {\n          const balanceResponse = await publicClient.getBalance({ address });\n          const balanceInEther = formatEther(balanceResponse);\n          setBalance(balanceInEther);\n        } catch (error) {\n          console.error(\"Error fetching balance:\", error);\n        }\n      }\n    };\n\n    if (isConnected) {\n      fetchBalance();\n    }\n  }, [isConnected, address, publicClient]);\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-8 bg-black text-white\">\n      <ConnectButton label=\"Connect Wallet\" />\n      {isConnected && (\n        <div className=\"w-full max-w-md mt-6\">\n          <h2 className=\"text-xl font-bold text-white mb-4\">Account Details</h2>\n          <p className=\"text-lg text-white\">\n            Address: {address || \"Loading...\"}\n          </p>\n          <p className=\"text-lg text-white\">\n            Balance: {balance || \"Loading...\"} {chain?.nativeCurrency.symbol}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n### Disconnecting Wallet\n\nOnce a user has logged in, you can programmatically force a logout through `disconnect` derived from `useDisconnect`. This will disconnect the current active session from your dApp, returning the user to their initial state.\n\n```js\nimport { useDisconnect } from \"@particle-network/connectkit\";\n\nconst { disconnect } = useDisconnect();\n\n// Inside your component's JSX\n<button\n  className=\"mt-4 w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n  onClick={disconnect}\n>\n  Disconnect\n</button>\n\n```\n\n### Getting User Info\n\nWhen a user connects via social accounts, you can use the `useParticleAuth()` hook to access `userinfo`, which includes details about their connection method, account creation date, name, emails, and other [relevant information from Particle Auth](https://developers.particle.network/api-reference/connect/desktop/web#fetch-user-information-with-particle-auth).\n\n```js\nimport { useAccount, useParticleAuth, useWallets } from '@particle-network/connectkit';\nimport { useState, useEffect } from 'react';\n\nexport const App = () => {\n    const { getUserInfo } = useParticleAuth();\n    const { isConnected } = useAccount();\n\n    // Retrieve the primary wallet from the Particle Wallets\n    const [primaryWallet] = useWallets();\n\n    // Store userInfo in a useState to use it in your app\n    const [userInfo, setUserInfo] = useState<any>(null);\n\n    useEffect(() => {\n        const fetchUserInfo = async () => {\n            // Use walletConnectorType as a condition to avoid account not initialized errors\n            if (primaryWallet?.connector?.walletConnectorType === 'particleAuth') {\n                const userInfo = await getUserInfo();\n                setUserInfo(userInfo);\n            }\n        };\n\n        fetchUserInfo();\n    }, [isConnected, getUserInfo]);\n\n    return <h2 className=\"text-style\">Name: {userInfo.name || 'N/A'}</h2>;\n};\n```\n\n### Sending Native Transaction\n\nParticle Connect allows you to leverage an already existing EIP-1193 provider, in this example we create a provider instance with `ethers` to send a transfer transaction.\n\n```js\nimport { useWallets } from \"@particle-network/connectkit\";\nimport { ethers, type Eip1193Provider } from \"ethers\";\n\nconst [primaryWallet] = useWallets();\n\nconst executeTransaction = async () => {\n    // Get the provider from the primary wallet's connector\n    const EOAprovider = await primaryWallet.connector.getProvider();\n\n    // Initialize a custom provider using ethers.js with the obtained EIP-1193 provider\n    const customProvider = new ethers.BrowserProvider(EOAprovider as Eip1193Provider, \"any\");\n\n    // Get the signer (an abstraction of the account that can sign transactions)\n    const signer = await customProvider.getSigner();\n\n    // Send a transaction with specified recipient address, amount (0.01 ETH), and empty data\n    await signer.sendTransaction({\n      to: recipientAddress,             \n      value: parseEther(\"0.01\"),        \n      data: \"0x\",                       \n    });\n};\n\n\n```\n\n## Next Steps\n\nYou can find a complete list of hooks available on the [Particle Connect docs](https://developers.particle.network/api-reference/connect/desktop/web#key-react-hooks-for-particle-connect).\n\nFor additional guides regarding Particle Network (Particle Connect, Particle Auth, and other SDKs), please refer to the [Particle Network docs](https://developers.particle.network) and the [Particle Network GitHub account](https://github.com/Particle-Network). Additionally, you may want to visit the [Particle Network blog](https://blog.particle.network) for additional information on Particle Network's services, upcoming releases, and tech stack.\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries/privy. ---\nsidebar_label: Privy\n---\n\n# Integrate Privy into a dApp\n\n![](/img/banners/kaia-privy.png)\n\n## Introduction\n\n[Privy](https://docs.privy.io/) is a simple wallet toolkit for progressive authentication in web3. With Privy, developers can onboard users using traditional and web3 authentication methods, enabling progressive onboarding to boost user conversion. \n\nIn this guide, you will use Privy wallet toolkit to integrate external wallets such as Metamask, Coinbase Wallet, and social logins such as Google, Twitter, Email  into your dApp built on the Kaia Network.\n\n\n## Prerequisite\n\n* A working Next.js project. You can clone this [create-next-app](https://github.com/privy-io/create-next-app) template provided by Privy to follow along in this tutorial. \n* An [appID](https://docs.privy.io/guide/console/api-keys#app-id) from the [Privy developer console](https://console.privy.io/)\n\n## Getting Started\n\nThe cloned template is a simple Next.js Privy Auth Starter template with three main core files: \n\n* **index.tsx**: this file handles the login authentication of users.\n* **app.tsx**: this file handles the initialization of Privy SDK and wraps our components with a PrivyProvider.\n*  **dashboard.tsx**: this is the page users are redirected to after logging in. It handles everything around testing each login method (Google, Twitter, Email, Wallets). More importantly for this guide, we will perform certain functionalities when connected using external wallets like MetaMask. These functionalities include:  getting user balance, sending KAIA to another account, deploying a contract, interacting with a smart contract.\n\n## Installation\n\nTo make use of Privy in your dApp, you must install the required libraries and SDK first. Hence, you'll need to set up ethers.js, and the [Privy React Auth SDK](https://www.npmjs.com/package/@privy-io/react-auth). You can use Privy together with either [ethers.js](https://docs.ethers.org/v6/), [web3.js](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html), [viem](https://viem.sh/) libraries to communicate with the Kaia blockchain. For the sake of this guide, we will use the ethers.js library. \n\nOpen up your project folder and run the command below to install the required libraries and SDK:\n\n```bash\nnpm install —save @privy-io/react-auth\nnpm install --save ethers\n```\n\n## Initializing Privy and Privy Provider\n\nAfter successfully installing the needed libraries, next is to wrap your components with a [PrivyProvider](https://docs.privy.io/reference/react-auth/modules#privyprovider). \n\nThe PrivyProvider should wrap any component that will use the Privy SDK. To do so, open up the _app.tsx file and paste the code below: \n\n```tsx\nimport '../styles/globals.css';\nimport type {AppProps} from 'next/app';\nimport Head from 'next/head';\nimport {PrivyProvider} from '@privy-io/react-auth';\nimport {useRouter} from 'next/router';\nfunction MyApp({Component, pageProps}: AppProps) {\n  const router = useRouter();\n  return (\n    <>\n      <Head>\n        <title>Privy Auth Starter</title>\n        <meta name=\"description\" content=\"Privy Auth Starter\" />\n      </Head>\n      <PrivyProvider\n        appId={process.env.NEXT_PUBLIC_PRIVY_APP_ID || ''}\n        onSuccess={() => router.push('/dashboard')}\n      >\n        <Component {...pageProps} />\n      </PrivyProvider>\n    </>\n  );\n}\nexport default MyApp;\n```\nIt’s important to note that the Privy provider takes the following properties:\n\n* Your `appID`, which needs to be updated in your .env file. You can get started with the following `test App ID: clpispdty00ycl80fpueukbhl` as provided by Privy for test purposes.\n* An optional `onSuccess` callback which will execute once a user successfully logs in.\n* An optional `createPrivyWalletOnLogin` boolean to configure whether you'd like your users to create embedded wallets when logging in.\n* An optional config property to customize your onboarding experience.\n\n\n## Connecting Wallet\n\nInside your LoginPage function in your `index.tsx` file, call the [login](https://docs.privy.io/reference/react-auth/interfaces/PrivyInterface#login) method which opens the Privy login modal and prompts the user to login.\n\n```ts\n import {usePrivy} from '@privy-io/react-auth';\n\n\n const {login} = usePrivy();\n  return (\n     <div>\n        <button onClick={login}>\n          Log in\n        </button>\n    </div>\n  );\n```\n\n![](/img/build/tools/privy-connect-banner.png)\n\n## Getting Account and Balance\n\nFrom the previous step above, you'll realize we logged in by connecting our wallet. In this step, we will retrieve the user’s associated Kaia address. Additionally, you can retrieve its current balance (in KAIA) using ethers.js. \n\nIn your dashboard.tsx file, paste the code below:\n\n```tsx\nimport {useRouter} from 'next/router';\nimport React, {useEffect, useState} from 'react';\nimport {usePrivy, useWallets} from '@privy-io/react-auth';\nconst {ready, authenticated} = usePrivy();\nconst {wallets} = useWallets();\n\nuseEffect(() => {\n    if (ready && !authenticated) {\n      router.push('/');\n    }\n  }, [ready, authenticated, router]);\n\nconst [balance, setBalance] = useState(\"\");\nasync function getBalance() {\n  if (!authenticated) {\n    console.log(\"user not authenticated yet\");\n    return;\n  }\n  const provider = await wallets[0].getEthersProvider();\n  const signer = provider.getSigner();  \n  // Get user's Ethereum public address\n  const address =   await signer.getAddress();\n  console.log(address);\n  \n  // Get user's balance in ether\n  const balance = ethers.formatEther(\n    (await provider.getBalance(address)).toString() // balance is in wei\n  );\n  console.log(balance);\n  setBalance(balance);\n}\n\nreturn (\n {ready && authenticated ? (\n      <div className=“App”>\n        <button onClick={getBalance}>Get Balance</button>\n        <p>{balance ? ` User with ${wallets[0].address} has ${balance} KAIA` : \"None\"}</p>\n      </div>\n) : null }\n);\n```\n\n## Disconnecting Wallet\n\nDisconnecting Wallet\nOnce a user has logged in, you can programmatically log the user out through the `logout` method derived from usePrivy. This will disconnect the current active session from your dApp, returning the user to their initial state.\n\n```tsx\nconst { logout } = usePrivy();\n  \n\nreturn (\n {ready && authenticated ? (\n    <div className=\"App\">\n        <button onClick={logout}>Logout</button>\n    </div>\n) : null }\n  );\n```\n\n## Getting User Info\nPrivy offers users the comfort of connecting to a dApp using both web3 wallets and social logins. In the case where a user connects to a dApp using their social account such as twitter, discord, google account etc, you ll have the ability to call `user` from `usePrivy`, which will return an object containing key details such as their id, email, wallet addresses, etc.\n\n```tsx\nconst  { user }  =  usePrivy();\n\nreturn (\n {ready && authenticated ? (\n    <div className=\"App\"> \n        <div>\n            <p>User object</p>\n            <textarea value={JSON.stringify(user, null, 2)} rows={20} disabled/>\n\t    </div>\n    </div>\n) : null }\n);\n```\n\n## Sending Native Transaction\n\nYou can perform native transactions, like sending KAIA from one user to another.\n\n```tsx\nconst [klayTransferTx, setKlayTransferTx] = useState(\"\");\nasync function sendTx() {\n  if (!authenticated) {\n    console.log(\"User not authenticated yet\");\n    return;\n  }\n  const provider = await wallets[0].getEthersProvider();\n  const signer = provider?.getSigner()\n  console.log(await signer.getAddress());\n  const destination = \"PASTE DESTINATION WALLET ADDRESS\"\n  \n  const tx = await signer.sendTransaction({\n    to: destination,\n    value: ethers.parseEther(\"0.1\"),\n    maxPriorityFeePerGas: \"5000000000\", // Max priority fee per gas\n    maxFeePerGas: \"6000000000000\", // Max fee per gas\n  })\nconst receipt = await tx.wait();\nconsole.log(receipt);\nsetKlayTransferTx(receipt.transactionHash)\n}\n\nreturn (\n {ready && authenticated ? (\n         <div className=\"mt-12 flex flex-col gap-5\">\n            <button onClick={sendTx}>Send Transaction</button>\n            <p>{klayTransferTx ? `KAIA Successfully Transferred with: ${klayTransferTx} hash` : \"No Tx yet\"}</p>\n        </div>\n) : null }\n);\n```\n\n\n## Working with a Smart Contract\n\n### 1. Deploying a Contract\n\nYou can deploy a smart contract given its Application Binary Interface(ABI) and its contract byte code.\n\n```tsx\n// add to the existing useState hook.\nconst [contractAddress, setContractAddress] = useState(\"\");\n\nconst deployContract = async () => {\n  if (!authenticated) {\n    console.log(\"privy not initialized yet\");\n    return;\n  }\n  const provider = await wallets[0].getEthersProvider();\n  const signer = provider.getSigner();\n  console.log(await signer.getAddress());\n  \n// paste your contractABI\nconst contractABI = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_initNum\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"retrieve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"num\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"store\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ]\n  // Paste your contract byte code\n  const contractBytecode = '608060405234801561001057600080fd5b506040516102063803806102068339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610150806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610059575b600080fd5b610043610075565b60405161005091906100a1565b60405180910390f35b610073600480360381019061006e91906100ed565b61007e565b005b60008054905090565b8060008190555050565b6000819050919050565b61009b81610088565b82525050565b60006020820190506100b66000830184610092565b92915050565b600080fd5b6100ca81610088565b81146100d557600080fd5b50565b6000813590506100e7816100c1565b92915050565b600060208284031215610103576101026100bc565b5b6000610111848285016100d8565b9150509291505056fea26469706673582212200370e757ac1c15a024febfa9bf6999504ac6616672ad66bd654e87765f74813e64736f6c63430008120033'\n  const contractFactory = new ethers.ContractFactory(contractABI, contractBytecode, signer);\n  const contract = await contractFactory.deploy(1000);\n  \n  // get contract address\n  setContractAddress(await contract.getAddress())\n}\n\nreturn (\n {ready && authenticated ? (\n    <div className=\"App\">\n        <button onClick={deployContract}>Deploy Contract</button>\n        <p >{contractAddress ? `Contract was Successfully deployed at: ${contractAddress}` : \"No contracts deployed yet\"}</p>\n    </div>\n) : null }\n);\n```\n\n\n### 2. Writing to a Contract\n\n```tsx\nconst [contractWriteTx, setContractTx] = useState(\"\");\nconst writeToContract = async (e) => {\n  e.preventDefault();\n  if (!authenticated) {\n    console.log(\"privy not initialized yet\");\n    return;\n  }\n  const provider = await wallets[0].getEthersProvider();\n  const signer = provider.getSigner();\n  \n const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n    // Paste your contract address\n    const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\"; \n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n  \n    const value = e.target.store_value.value;\n  \n    // Send a transaction to smart contract to update the value\n    const tx = await contract.store(value);\n    console.log(tx.hash);\n    \n  \n    setContractTx(tx.hash);\n}\n\nreturn (\n {ready && authenticated ? (\n    <div className=\"App\">\n        <form onSubmit={writeToContract}>\n           \t<input name=\"store_value\" placeholder=\"Set contract value\" required/>\n            <input type=\"submit\" value=\"Store\"/>\n        </form> \n        <div>Write-to-contract Tx Hash: ${contractWriteTx}</div>\n    </div>\n) : null }\n);\n```\n\n### 3. Reading from a Contract\n```tsx\nconst [readContractMessage, setContractMessage] = useState();\nconst readFromContract = async (e) => {\n  e.preventDefault();\n  if (!authenticated) {\n    console.log(\"privy not initialized yet\");\n    return;\n  }\n  const provider = await wallets[0].getEthersProvider();\n  const signer = provider.getSigner();\n  \n const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n  \n     // Paste your contract address\n     const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\"; \n     const contract = new ethers.Contract(contractAddress, contractABI, provider)\n  \n     // Reading a message from the smart contract\n     const contractMessage = await contract.retrieve();\n     setContractMessage(contractMessage.toString())\n}\n\nreturn (\n {ready && authenticated ? (\n    <div className=\"App\">\n\t    <button onClick={readFromContract}> Read Contract Message</button>\n        <p>{readContractMessage ? `Message stored in contract is: ${readContractMessage}` : \"No message from contract yet\"}</p>\n    </div>\n) : null }\n);\n```\n## Next Steps \n\nFor more in-depth guides on Privy, please refer to the [Privy Docs](https://docs.privy.io/) and [Privy Github repository](https://github.com/privy-io). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/tools/wallet-libraries/privy-auth-sample).",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries. # Wallet Libraries\n\nLet's see how to integrate well-known wallet libraries into dApp.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries/web3Auth. ---\nsidebar_label: Web3Auth\n---\n\n# Integrate Web3Auth into a dApp\n\n![](/img/banners/kaia-web3Auth.png)\n\n## Introduction\n\n[Web3Auth](https://web3auth.io/docs/) is a wallet infrastructure that is plugged into dApps or wallets. It serves as a pluggable authentication infrastructure for web3 wallets and applications. With Web3Auth's excellent user experience, both mainstream and crypto natives may be onboarded in a matter of minutes.\n\nAs a wallet infrastructure, it provides out-of-the-box support for all social logins, web and mobile native platforms, wallets, and other key management methods. By the end of this guide, you will have integrated Web3Auth into your decentralized web application built on the Kaia Network. To integrate Web3Auth into other platforms (Android, iOS, React Native, Flutter, & Unity), kindly refer to this [guide](https://web3auth.io/docs/quick-start).\n\nFor a quick start, the complete code for this tutorial is available on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/blob/main/examples/3rd-integration-examples/web3Auth). You can clone or download the repository to follow along.\n\n\n## Prerequisite\n\n- A working react project (by executing `npm create vite@latest project-name -- --template react-ts`)\n- Install the necessary wallets ([Coinbase Wallet](https://www.coinbase.com/wallet/downloads), [Metamask](https://metamask.io/download/)).\n- RPC Endpoint: you can get this from one of the supported [endpoint providers](../../../../references/public-en).\n- Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n- Get your Client ID from [Web3Auth Dashboard](https://dashboard.web3auth.io/).\n\n## Installation\n\nTo make use of Web3Auth in your dApp, you must install the required libraries and SDK first. Hence, you'll need to set up ethers.js, and the Web3Auth Web SDK. You can use Web3Auth together with either [ethers.js](https://docs.ethers.org/v6/), [web3.js](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html) or [kaia sdk](https://docs.kaia.io/references/sdk/ethers-ext/getting-started/) libraries to communicate with the Kaia blockchain. We'll be using ethers.js for this guide.\n\n```bash\nnpm install --save @web3auth/modal @web3auth/base @web3auth/ethereum-provider @web3auth/default-evm-adapter\nnpm install --save ethers\n```\n\n## Initializing Web3Auth and Provider Instance\n\nAfter successfully installing the needed libraries, next is to initialize the Web3Auth instance, set the Web3Auth **provider** instance in a `useState()` hook and also the `init()` function in a `useEffect()` hook.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js App.tsx\nimport {\n  CHAIN_NAMESPACES,\n  IProvider,\n  IAdapter,\n  WEB3AUTH_NETWORK,\n} from '@web3auth/base'\nimport { EthereumPrivateKeyProvider } from '@web3auth/ethereum-provider'\nimport { Web3Auth, Web3AuthOptions } from '@web3auth/modal'\nimport { getDefaultExternalAdapters } from '@web3auth/default-evm-adapter'\n\nimport './App.css'\n\nimport { useEffect, useState } from 'react'\nimport RPC from './etherRPC'\n\nconst clientId =\n  'BPi5PB_UiIZ-cPz1GtV5i1I2iOSOHuimiXBI0e-Oe_u6X3oVAbCiAZOTEBtTXw4tsluTITPqA8zMsfxIKMjiqNQ'\n\nconst chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: '0x3e9', // Kairos Testnet\n  rpcTarget: 'https://public-en-kairos.node.kaia.io',\n  displayName: 'Kairos Testnet',\n  blockExplorerUrl: 'https://kairos.kaiascan.io',\n  ticker: 'KLAY',\n  tickerName: 'KLAY',\n}\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig },\n})\n\nconst web3AuthOptions: Web3AuthOptions = {\n  clientId,\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET,\n  privateKeyProvider,\n}\n\nconst web3auth = new Web3Auth(web3AuthOptions)\n\nconst adapters = await getDefaultExternalAdapters({ options: web3AuthOptions })\nadapters.forEach((adapter: IAdapter<unknown>) => {\n  web3auth.configureAdapter(adapter)\n})\n\ninterface UserInfo {\n  email: string;\n  name: string;\n  profileImage: string;\n  [key: string]: unknown;\n}\n\nfunction App() {\n\n  const [provider, setProvider] = useState<IProvider | null>(null);\n  const [loggedIn, setLoggedIn] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [address, setAddress] = useState<string>(\"\");\n  const [balance, setBalance] = useState<string>(\"\");\n  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        await web3auth.initModal()\n        setProvider(web3auth.provider)\n\n        if (web3auth.connected) {\n          setLoggedIn(true)\n          await updateUserInfo()\n        }\n      } catch (error) {\n        console.error(error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    init()\n  }, [])\n\n  const updateUserInfo = async () => {\n    if (web3auth.provider) {\n      const user = await web3auth.getUserInfo()\n      // @ts-ignore\n      setUserInfo(user)\n      const accounts = await RPC.getAccounts(web3auth.provider)\n      setAddress(accounts)\n      const balance = await RPC.getBalance(web3auth.provider)\n      setBalance(balance)\n    }\n  }\n}\n```\n\n```js etherRPC.ts\n/*\n * etherRPC.ts\n * \n * This file contains utility functions for lower-level blockchain interactions\n * using the provider object from ethers.js. It abstracts Ethereum RPC calls\n * for common operations like getting account info, sending transactions,\n * and interacting with smart contracts.\n */\n\nimport type { IProvider } from \"@web3auth/base\";\nimport { ethers } from \"ethers\";\n\nimport { contractAddress, contractABI } from \"./constants\";\nimport { AddressLike } from \"ethers\";\n\nconst getChainId = async (provider: IProvider): Promise<string> => {\n  try {\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const networkDetails = await ethersProvider.getNetwork();\n    return networkDetails.chainId.toString();\n  } catch (error) {\n    return error as string;\n  }\n};\n\nconst getAccounts = async (provider: IProvider): Promise<string> => {\n  try {\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const signer = await ethersProvider.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  } catch (error) {\n    return error as string;\n  }\n};\n\nconst getBalance = async (provider: IProvider): Promise<string> => {\n  try {\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const signer = await ethersProvider.getSigner();\n    const address = await signer.getAddress();\n    const balance = ethers.formatEther(await ethersProvider.getBalance(address));\n    return balance;\n  } catch (error) {\n    return error as string;\n  }\n};\n\nconst sendKaiaTx = async (provider: IProvider, destination : AddressLike, amount : any): Promise<any> => {\n  try {\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const signer = await ethersProvider.getSigner();\n\n    const amountToSend = ethers.parseEther(amount);\n        \n    const tx = await signer.sendTransaction({\n      to: destination,\n      value: amountToSend,\n    });\n    const receipt = await tx.wait();\n    return receipt;\n  } catch (error) {\n    return error as string;\n  }\n};\n\nconst signMessage = async (provider: IProvider, originalMessage : string): Promise<string> => {\n  try {\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const signer = await ethersProvider.getSigner();\n\n    const signedMessage = await signer.signMessage(originalMessage);\n    return signedMessage;\n  } catch (error) {\n    return error as string;\n  }\n};\n\nconst getContractValue = async (provider: IProvider): Promise<string> => {\n  try {\n\n    const ethersProvider = new ethers.BrowserProvider(provider);\n\n    const contract = new ethers.Contract(contractAddress, contractABI, ethersProvider)\n  \n    // Read message from smart contract\n\n    const contractMessage = await contract.retrieve();\n    console.log(contractMessage.toString());\n    return contractMessage.toString();\n  } catch (error) {\n    return error as string;\n  }\n\n} \n\nconst setContractValue = async (provider: IProvider, value : string): Promise<any> => {\n  try {\n\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    const signer = await ethersProvider.getSigner();\n\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n  \n    // Read message from smart contract\n\n    const contractTx = await contract.store(value);\n    console.log(contractTx);\n    return contractTx;\n  } catch (error) {\n    return error as string;\n  }\n\n} \n\nexport default { getChainId, getAccounts, getBalance, sendKaiaTx, signMessage, getContractValue, setContractValue };\n\n```\n\n```js package.json\n{\n  \"name\": \"kaia-web3Auth-react-vite\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"lint\": \"eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@web3auth/base\": \"^9.0.2\",\n    \"@web3auth/default-evm-adapter\": \"^9.0.2\",\n    \"@web3auth/ethereum-provider\": \"^9.0.2\",\n    \"@web3auth/modal\": \"^9.0.2\",\n    \"ethers\": \"^6.13.2\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"^18.2.15\",\n    \"@types/react-dom\": \"^18.2.7\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.0.0\",\n    \"@typescript-eslint/parser\": \"^6.0.0\",\n    \"@vitejs/plugin-react\": \"^4.0.3\",\n    \"autoprefixer\": \"^10.4.14\",\n    \"eslint\": \"^8.45.0\",\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.3\",\n    \"postcss\": \"^8.4.27\",\n    \"tailwindcss\": \"^3.3.3\",\n    \"typescript\": \"^5.0.2\",\n    \"vite\": \"^4.4.5\",\n    \"vite-plugin-node-polyfills\": \"^0.9.0\"\n  }\n}\n\n```\n\n```js vite.config.ts\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { nodePolyfills } from 'vite-plugin-node-polyfills'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    nodePolyfills({\n      globals: {\n        Buffer: true,\n        global: true,\n        process: true,\n      },\n      protocolImports: true,\n    }),\n  ],\n  define: {\n    'process.env': {},\n    global: 'globalThis',\n  },\n})\n\n```\n\n</CH.Code>\n\n---\n\nImport Web3Auth and other dependent packages.\n\n```js App.tsx focus=1:10\n\n```\n\n---\n\nImport React hooks (useState and useEffect) and utility functions:\n\n- `useState` and `useEffect`: React hooks for state management and side effects.\n- `RPC`: Custom utility functions from `etherRPC.ts` for Ethereum-compatible blockchain interactions using ethers.js.\n\n```js App.tsx focus=13:15\n\n```\n\n---\n\nPaste your **Client ID** from the Web3Auth Dashboard.\n\n```js App.tsx focus=16:17\n\n```\n\n---\n\nSetup **Chain Config**: To use Web3Auth, you need to set up a chain config for the selected chain - Kaia.\n\n```js App.tsx focus=18:27\n\n```\n\n---\n\nInitialize Web3Auth by using the constructor, where you can pass all the configurations of Web3Auth you want.\n\n```js App.tsx focus=27:44\n\n```\n\n---\n\nSet the Web3Auth **provider** instance, **userInfo** in a `useState()` hook and the `init()` function in a `useEffect()` hook.\n\n```js App.tsx focus=53:95 \n\n```\n\n---\n\n</CH.Spotlight>\n\n## Connecting Wallet\n\nInside your App function in your `App.tsx` file, call the [connect()](https://web3auth.io/docs/sdk/pnp/web/modal/usage?product=PNP&sdk=PNP_MODAL&framework=REACT&stepIndex=0&stepIndex=6#logging-in-the-user) method on the web3Auth instance to initiate the connection of your wallet.\n\n```js\nfunction App() {\n  const [provider, setProvider] = (useState < IProvider) | (null > null)\n  const [loggedIn, setLoggedIn] = useState < boolean > false\n\n  const login = async () => {\n    if (!web3auth) {\n      console.log('web3auth not initialized yet')\n      return\n    }\n    const web3authProvider = await web3auth.connect()\n    setProvider(web3authProvider)\n    if (web3auth.connected) {\n      setLoggedIn(true)\n      await updateUserInfo()\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={login}>Login</button>\n    </div>\n  )\n}\n```\n\n![](/img/build/tools/web3Auth-login.png)\n\n## Setting up Utils function\n\nIn this guide, we will be making use of utils function: `truncateAddress()`. The truncateAddress() function takes in a valid address and returns a more readable format of the address passed in. The following steps below show how to set up and use the utils function in your project.\n\n**Step 1**: Create a `utils.ts` file in the `src` root folder.\n\nPaste the following code in the newly created utils.ts file:\n\n```js\nexport const truncateAddress = (address) => {\n  if (!address) return 'No Account'\n  const match = address.match(\n    /^(0x[a-zA-Z0-9]{2})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/\n  )\n  if (!match) return address\n  return `${match[1]}…${match[2]}`\n}\n```\n\n**Step 2**: Import the function in your `App.tsx` file.\n\n```js\nimport { truncateAddress } from './utils'\n```\n\n## Getting Account and balance\n\nHaving connected your wallet successfully by calling the `connect()` method on the Web3Auth instance, you can get the user account and its balance by using the provider and signer object.\n\n```js\nfunction App() {\n  const [provider, setProvider] = useState<IProvider | null>(null);\n  const [address, setAddress] = useState<string>(\"\");\n  const [balance, setBalance] = useState<string>(\"\");\n\n  const getAccounts = async () => {\n    if (!provider) {\n      console.log('provider not initialized yet')\n      return\n    }\n    const address = await RPC.getAccounts(provider)\n    setAddress(address)\n    console.log('Address:', address)\n  }\n\n  const getBalance = async () => {\n    if (!provider) {\n      console.log('provider not initialized yet')\n      return\n    }\n    const balance = await RPC.getBalance(provider)\n    setBalance(balance)\n    console.log('Balance:', balance)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button onClick={getAccounts}>Get Account</button>\n        <h2>\n          {' '}\n          Address: <span>\n            {' '}\n            {`${truncateAddress(address)}` || 'Not available'}\n          </span>\n        </h2>\n      </div>\n\n      <div>\n        <button onClick={getBalance}>Get Balance</button>\n        <h2>\n          Balance: <span> {balance || 'Not available'}</span>\n        </h2>\n      </div>\n    </div>\n  )\n}\n```\n\n## Disconnecting Wallet\n\nDisconnecting from the wallet is achieved by using the [logout()](https://web3auth.io/docs/sdk/web/no-modal/usage#logging-out-the-user) method on the Web3Auth instance. Also, one good practice is to refresh the state to clear any previously stored connection data.\n\n```js\nfunction App() {\n\n  const logout = async () => {\n    if (!web3auth) {\n      console.log('web3auth not initialized yet')\n      return\n    }\n    await web3auth.logout()\n    setProvider(null)\n    setLoggedIn(false)\n    setAddress('')\n    setBalance('')\n    setUserInfo(null)\n    console.log('Logged out')\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={logout}>Logout</button>\n    </div>\n  )\n}\n```\n\n## Getting User Info\n\nA unique feature of Web3Auth is social logins. Once a user login using their social platforms, Web3Auth instance returns some information about the logged in user. Getting the logged in user information is as simple as calling the `getUserInfo()` method on the Web3Auth instance.\n\n```js\nconst [userInfo, setUserInfo] = useState<UserInfo | null>(null);\n\nconst getUserInfo = async () => {\n  if (!web3auth) {\n    console.log('web3auth not initialized yet')\n    return\n  }\n  const user = await web3auth.getUserInfo()\n  // @ts-ignore\n  setUserInfo(user)\n  console.log('User Info:', user)\n}\n\nreturn (\n  <div className=\"App\">\n    <button onClick={getUserInfo}>Get User Info</button>\n    <div>\n      <h2>User Info:</h2>\n      <pre>\n        {userInfo ? JSON.stringify(userInfo, null, 2) : 'Not available'}\n      </pre>\n    </div>\n  </div>\n)\n```\n\n## Signing Messages\n\nHaving initialised the provider and signer object, users can sign an arbitrary string.\n\n```js\n// add to the existing useState hook.\nconst [signedMessage, setSignedMessage] = useState<string>(\"\");\n\nconst signMessage = async () => {\n  if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n  }\n    \n  const originalMessage = \"YOUR_MESSAGE\";\n\n  const signedMessage = await RPC.signMessage(provider, originalMessage);\n  setSignedMessage(signedMessage);\n  console.log(\"Signed Message:\", signedMessage);\n};\n\nreturn (\n  <div className=\"App\">\n    <button onClick={signMessage}>Sign Message</button>\n\n    {signedMessage && (\n      <div>\n        <h2 className=\"text-wrap text-center text-sm font-semibold\">\n          Signed Message: <span className=\"font-normal\">{signedMessage}</span>\n        </h2>\n      </div>\n    )}\n  </div>\n)\n```\n\n## Sending Native Transaction\n\nYou can perform native transactions, like sending KAIA from one user to another.\n\n```js\n// add to the existing useState hook.\nconst [txHash, setTxHash] = useState<string>(\"\");\n\nconst sendKaiaTx = async () => {\n  if (!provider) {\n    console.log(\"provider not initialized yet\");\n    return;\n  }\n  console.log(\"Sending Transaction...\");\n\n  const destination = \"0x75Bc50a5664657c869Edc0E058d192EeEfD570eb\";\n  const amount = \"0.1\";    \n    \n  const receipt = await RPC.sendKaiaTx(provider, destination, amount);\n  setTxHash(receipt.hash);\n  console.log(\"Transaction Receipt:\", receipt);\n};\n\nreturn (\n  <div className=\"App\">\n    <button onClick={sendKaiaTx}>Send Kaia</button>\n\n    {txHash && (\n      <div>\n        <h2>\n          Transaction Hash:{' '}\n          <a\n            href={`${chainConfig.blockExplorerUrl}/tx/${txHash}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {txHash}\n          </a>\n        </h2>\n      </div>\n    )}\n  </div>\n)\n```\n\n## Working with a Smart Contract\n\nYou can interact with a deployed smart contract given its Application Binary Interface(ABI) and contract address. The following steps below show how to set up and use the contract address and ABI in  your project.\n\n**Step 1**: Create a `constants.ts` file in the `src` root folder.\n\nPaste the following code in the newly created constants.ts file:\n\n```js\nexport const contractABI = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"_initNum\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"constructor\"\n    },\n    {\n      \"inputs\": [],\n      \"name\": \"retrieve\",\n      \"outputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"stateMutability\": \"view\",\n      \"type\": \"function\"\n    },\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"num\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"store\",\n      \"outputs\": [],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ] as const;\n  \n  export const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\";\n```\n\n**Step 2**: Import the **contractABI** and **contractAddress** in your `etherRPC.ts` file.\n\n```js\nimport { contractAddress, contractABI } from \"./constants\";\n```\n\n### 1. Writing to a Contract\n\n```js\n// add to existing useState hook\nconst [contractTxHash, setContractTxHash] = useState<string>(\"\");\n\nconst setContractValue = async () => {\n  if (!provider) {\n    console.log(\"provider not initialized yet\");\n    return;\n  }\n  console.log(\"setting contract value...\");\n\n  const value = \"100\";\n\n  const tx = await RPC.setContractValue(provider, value);\n  setContractTxHash(tx.hash);\n\n  console.log(\"Transaction Receipt:\", tx);\n}\n\nreturn (\n  <div className=\"App\">\n    <button onClick={setContractValue}>Write to Contract</button>\n    {contractTxHash && (\n      <div>\n        <h2>\n          Contract Tx Hash: <span>{contractTxHash}</span>\n        </h2>\n      </div>\n    )}\n  </div>\n)\n```\n\n### 2. Reading from a Contract\n\n```js\n// add to existing useState hook\n  const [contractMessage, setContractMessage] = useState<string>(\"\");\n\n  const getContractValue = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n    console.log(\"getting value from contract...\");\n\n    const message = await RPC.getContractValue(provider);\n    setContractMessage(message);\n    console.log(\"contract message:\", message);\n  }\n\n\n  return (\n    <button onClick={getContractValue}>Read From Contract</button>\n    {contractMessage && (\n          <div>\n            <h2 className=\"text-wrap text-center text-sm font-semibold\">Read Message: <span className=\"font-normal\">{contractMessage}</span></h2>\n          </div>\n    )}  \n)\n```\n\n## TroubleShooting\n\nYou can visit the [troubleshooting page](https://web3auth.io/docs/troubleshooting) to explore solutions to common challenges and issues from different bundlers.\n\n## Next Step\n\nFor more in-depth guides on Web3Auth, please refer to the [Web3Auth Docs](https://web3auth.io/docs/connect-blockchain/klaytn) and [Web3Auth Github repository](https://github.com/web3auth). \n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries/web3Modal. ---\nsidebar_label: Web3Modal\n---\n\n# Integrate Web3Modal into a dApp\n\n![](/img/banners/kaia-web3Modal(wc).png)\n\n## Introduction\n\n[Web3Modal](https://docs.walletconnect.com/2.0/web3modal/about) is a simple-to-use library that helps developers add support for multiple providers in their dApps with a simple, customizable configuration. It makes connecting wallets, performing transactions, and managing accounts easy. \n\nIn this guide, you will use the web3Modal library to integrate multiple wallets such as Kaia Wallet, Klip, Metamask, Coinbase Wallet, etc. into your dApp built on the Kaia Network.\n\n## Prerequisite\n\n* A working react project (by executing `npx create-react-app project-name`)\n* Install the necessary wallets ([Kaia Wallet](https://www.kaiawallet.io/en_US/), [Coinbase Wallet](https://www.coinbase.com/wallet/downloads), and [Metamask](https://metamask.io/download/)). \n* RPC Endpoint: you can get this from one of the supported [endpoint providers](../../../../references/public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n\n## Setting up Web3Modal and Wallet Provider Options\n\n**Step 1**: Installing Web3Modal and an Ethereum library\n\nInstall web3Modal and your preferred library for interacting with the blockchain. In this tutorial, we will be installing [@klaytn/web3modal](https://github.com/klaytn/klaytn-web3modal) which was derived from [Web3Modal](https://github.com/WalletConnect/web3modal) and modified to add Kaia Wallet and Klip wallet. Also, this tutorial will use ethers.js to interact with the Kaia blockchain.\n\n```bash\nnpm install @klaytn/web3modal\nnpm install --save ethers\n```\n\n**Step 2**: Instantiating Web3Modal with wallet provider options\n\nInstall the wallet providers of your choice. Here we install Kaia Wallet, Klip and Coinbase wallet providers.\n\n```bash\nnpm install --save @coinbase/wallet-sdk\nnpm install --save @klaytn/kaikas-web3-provider\nnpm install --save @klaytn/klip-web3-provider\n```\nIn your `App.js` file, import CoinbaseWalletSDK, KaikasWeb3Provider, and KlipWeb3Provider, and instantiate the various provider options to integrate with your dapp.\n\n```js\nimport CoinbaseWalletSDK from '@coinbase/wallet-sdk';\nimport { KaikasWeb3Provider } from \"@klaytn/kaikas-web3-provider\";\nimport { KlipWeb3Provider } from \"@klaytn/klip-web3-provider\";\n\nexport const providerOptions = {\n coinbasewallet: {\n   package: CoinbaseWalletSDK, \n   options: {\n     appName: \"Web 3 Modal Demo\",\n     infuraId: process.env.INFURA_KEY \n   }\n },\n walletconnect: {\n   package: WalletConnect, \n   options: {\n     infuraId: process.env.INFURA_KEY \n   }\n }\n};\nconst providerOptions = {\n  coinbasewallet: {\n    package: CoinbaseWalletSDK, // required\n    options: {\n      appName: \"Web3Modal Kaia dApp\", // required\n      infuraId: \"NFURA_KEY\", // required\n      rpc: \"https://public-en.node.kaia.io\", // Optional if `infuraId` is provided; otherwise it's required\n      chainId: 1001, // Optional. It defaults to 1 if not provided\n      darkMode: false // Optional. Use dark theme, defaults to false\n    }\n  },\n  klip: {\n    package: KlipWeb3Provider, //required\n    options: {\n        bappName: \"Web3Modal Kaia dApp\", //required\n        rpcUrl: \"https://public-en.node.kaia.io\" //required\n    }\n},\n  kaikas: {\n    package: KaikasWeb3Provider // required\n  }\n};\n```\n\n**Step 3**: Instantiate web3modal\n\nThen, instantiate Web3Modal by passing in the provider options.\n\n```js\nimport Web3Modal from \"@klaytn/web3modal\";\nconst  web3Modal = new Web3Modal( {\n    cacheProvider: true,\n    providerOptions,\n  } )\n```\n\n## Establishing Wallet Connection\n\nTo establish a connection to the user’s wallet, call the `connect()` method on the Web3Modal instance. We recommend you to wrap this operation around an async function and store the retrieved provider in your state to reuse throughout the app.\n\n```js\nimport { ethers } from 'ethers';\nimport { useState } from 'react';\n\nfunction App() {\n  const [provider, setProvider] = useState();\n\n  const connectWallet = async () => {\n    try {\n\n    const web3ModalProvider = await web3Modal.connect();\n\t\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(web3ModalProvider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(web3ModalProvider);\n      setProvider(web3ModalProvider);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n return (\n   <div className=\"App\">\n       <button onClick={connectWallet}>Connect Wallet</button>  \n   </div>\n );\n}\n```\n\n![](/img/build/tools/web3Modal.png)\n\n## Setting up Utils function\n\nIn this guide, we will be making use of the utils functions such as `truncateAddress()` and `toHex()`. The `truncateAddress()` function takes in a valid address and returns a more readable format of the address passed in. While the `toHex()` function converts numbers to hexadecimal.  The following steps below show how to set up and use the utils function in your project.\n\n**Step 1**: Create a `utils.js` file in the `src` root folder.\n\nPaste the following code in the newly created utils.js file.\n\n```js\nexport const truncateAddress = (address) => {\n    if (!address) return \"No Account\";\n    const match = address.match(\n      /^(0x[a-zA-Z0-9]{2})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/\n    );\n    if (!match) return address;\n    return `${match[1]}…${match[2]}`;\n  };\n\n  export const toHex = (num) => {\n    const val = Number(num);\n    return \"0x\" + val.toString(16);\n  };\n```\n\n**Step 2**: Import the functions in your `App.js` file.\n\n```js\nimport { truncateAddress, toHex } from \"./utils\";\n```\n\n## Accessing connection, account, network information\n\nAs it is, Web3Modal does not provide built-in support for Ethereum interactions, such as retrieving connected accounts and network data. Note that to read the user’s address or connected network ID, you must directly request the information from your Ethereum library. In this guide, we’ll be getting that information using ethers.js. One way is to fetch and store this data is when connecting your user to your dapp.\n\n```js\nconst [provider, setProvider] = useState();\nconst [account, setAccount] = useState();\nconst [chainId, setChainId] = useState();\n\nconst connectWallet = async () => {\n  try {\n    const web3ModalProvider = await web3Modal.connect();\n\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(web3ModalProvider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(web3ModalProvider);\n\n    const accounts = await ethersProvider.listAccounts();\n    const network = await ethersProvider.getNetwork();\n\n    setProvider(provider);\n    if (accounts) setAccount(accounts[0]);\n    setChainId(network.chainId.toString());\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nreturn (\n  <div className=\"App\">\n       <button onClick={connectWallet}>Connect Wallet</button>\n       <div>Connected To Chain ID: ${chainId}</div>\n       <div>Wallet Address: ${truncateAddress(account)}</div>\n  </div>\n);\n```\n\n## Disconnecting Wallet\n\nDisconnecting from the wallet is achieved by using the `clearCachedProvider()` method on the web3Modal instance. Also, one good practice is to refresh the state to clear any previously stored connection data.\n\n```js\nfunction App() {\n    \nconst disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n      refreshState();\n  };\n\n// refresh state\nconst refreshState = () => {\n  setAccount();\n  setChainId();\n// make sure to add every other state variable declared here.\n}\n  \n  return (\n    <div className=\"App\">\n          <button onClick={disconnect}>Disconnect</button>\n    </div>\n  );\n}\n```\n\nIt's important to keep in mind that the dApp state changes as users interact with it, and it's best practice to subscribe to the events that are released in response. Create useEffect hooks with subscriptions to these events so they can respond appropriately to changes.\n\n```js\n  useEffect(() => {\n    if (provider?.on) {\n      const handleAccountsChanged = (accounts) => {\n        setAccount(accounts);\n      };\n  \n      const handleChainChanged = (chainId) => {\n        setChainId(chainId);\n      };\n  \n      const handleDisconnect = () => {\n        disconnect();\n      };\n  \n      provider.on(\"accountsChanged\", handleAccountsChanged);\n      provider.on(\"chainChanged\", handleChainChanged);\n      provider.on(\"disconnect\", handleDisconnect);\n  \n      return () => {\n        if (provider.removeListener) {\n          provider.removeListener(\"accountsChanged\", handleAccountsChanged);\n          provider.removeListener(\"chainChanged\", handleChainChanged);\n          provider.removeListener(\"disconnect\", handleDisconnect);\n        }\n      };\n    }\n  }, [provider]);\n```\n\n## Switch Networks or Add Custom Networks\n\nAs established previously, Web3Modal does not have built-in support for Ethereum interactions. In order to add or switch networks, you must directly make a request (via EIP-3085 or EIP-3326) to your Ethereum library. Here is an example of requesting to switch networks and adding the network as a fallback if it is not already present on the user’s wallet:\n\n```js\n  const switchNetwork = async () => {\n    if (!provider) return;\n    try {\n      await provider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: toHex(8217) }],\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        try {\n          await provider.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: toHex(1001),\n                chainName: \"Kairos Testnet\",\n                rpcUrls: [\"https://public-en-kairos.node.kaia.io\"],\n                blockExplorerUrls: [\"https://kairos.kaiascan.io/\"],\n              },\n            ],\n          });\n        } catch (addError) {\n          throw addError;\n        }\n      }\n    }\n  };\n\nreturn (\t\n    <div className=\"App\">\n        <button onClick={switchNetwork}>Switch Network</button>  \n    </div>\n) \n```\n\n## Signing Messages\n\nHaving initialised the provider and signer object, users can sign an arbitrary string. \n\n```js\n // add to the existing useState hook.\nconst [signedMessage, setSignedMessage] = useState(\"\");\n\nconst signMessage = async(e) => {\n e.preventDefault()\n    if (!provider) return;\n      try {\n      const signature = await provider.request({\n        method: \"personal_sign\",\n        params: [message, account]\n      });\n\n    setSignedMessage(signature);\n \n    } catch (error) {\n      console.log(error);\n    }\n}\n  return (\n    <div className=\"App\">\n        <form onSubmit={signMessage}>\n             <input type=\"text\" name=\"message\" placeholder=\"Set message\" required/>\n             <input type=\"submit\" value=\"Sign Message\"/>\n         </form> \n         <div>SignedMessage: ${signedMessage}</div>\n    </div>\n  );\n```\n\n## Sending Native Transaction\n\nYou can perform native transactions, like sending KAIA from one user to another.\n\n```js\n    // add to the existing useState hook.\n    const [txHash, setTxHash] = useState();\n    const sendKaia = async () => {\n    if (!provider) return;\n      const destination = “paste recipient address”;\n\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(provider);\n\n    const signer = await ethersProvider.getSigner();\n      \n    // Submit transaction to the blockchain and wait for it to be mined\n    const tx = await signer.sendTransaction({\n        to: destination,\n        value: ethers.parseEther(\"0.1\"),\n        maxPriorityFeePerGas: \"5000000000\", // Max priority fee per gas\n        maxFeePerGas: \"6000000000000\", // Max fee per gas\n    })\n  \n      \n    const receipt = await tx.wait();\n    setTxHash(receipt.hash)\n}\n\nreturn (\n    <div className=\"App\">\n        <button onClick={sendKlay}>Send Klay</button>\n        <div>Send-Kaia Tx Hash :  {txHash ? <a href={`https://kairos.kaiascope.com/tx/${txHash}`} target=\"_blank\">Kaiascope</a> :  ' ' } </div>\n    </div>\n);\n```\n\n## Working with a smart contract\n\nWith the Web3Modal provider and signer object, you can make contract interactions such as writing to and reading from a smart contract deployed to the blockchain.\n\n### 1. Writing to a Contract\n\n```js\n// add to existing useState hook\n  const [contractTx, setContractTx] = useState();\n\n  const writeToContract = async (e) => {\n    e.preventDefault();\n    if (!provider) return;\n\n     // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(provider);\n\n    const signer = await ethersProvider.getSigner();\n  \n    // Paste your contractABI\n    const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n  \n     // Paste your contract address\n    const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\";\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n  \n    const value = e.target.store_value.value;\n  \n    // Send transaction to smart contract to update message\n    const tx = await contract.store(value);\n  \n    // Wait for transaction to finish\n    const receipt = await tx.wait();\n    const result = receipt.hash;\n  \n    setContractTx(result)\n  }\n\nreturn (\n    <div className=\"App\">\n         <form onSubmit={writeToContract}>\n            <input  name=\"store_value\" placeholder=\"Set contract value\" required/>\n            <input  type=\"submit\" value=\"Store\"/>\n        </form> \n         <div>Write-to-contract Tx Hash: ${contractTx}</div>\n    </div>\n)\n```\n\n### 2. Reading from a contract\n\n```js\n// add to existing useState hook\n const [contractMessage, setContractMessage] = useState();\n  const readFromContract = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n  \t\n\t\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(provider);\n  \n    // paste your contract ABI\n    const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n  \n     // paste your contract address\n    const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\"; \n  \n    const contract = new ethers.Contract(contractAddress, contractABI, ethersProvider)\n  \n    // Reading a message from the smart contract\n    const contractMessage = await contract.retrieve();\n    setContractMessage(contractMessage.toString())\n  }\n\n  return (\n    <div className=\"App\">\n        <button onClick={readFromContract}>Read From Contract</button> \n        <div>Read-from-contract Message: ${contractMessage}</div>\n    </div>\n\n  )\n```\n\n## TroubleShooting\n\n**Node fs error, add browser \\{fs: false\\} to package.json**\n\n```bash\nNode fs error, add browser {fs: false} to package.json\n```\n\nThis occurs when you install Klip-web3-provider.  To fix this issue,  follow these steps:\n\n**Step 1**: Open up and navigate to your node_modules folder. Look for the @Kaia/klip-web3-provider folder and navigate to it's package.json file as shown below:\n\n> **@klaytn/klip-web3-provider/node_modules/caver-js/packages/caver.ipfs/package.json** \n \n**Step 2**: Paste the code below in @klaytn/klip-web3-provider/node_modules/caver-js/packages/caver.ipfs/package.json file.\n\n```js\n\"browser\": {\n        \"fs\": false\n     },\n```\n\n**Polyfill node core module error**\n\n```js\nBREAKING CHANGES: webpack<5 used to include polyfills for node.js core modules by default.\n```\n\nThis error occurs when you use webpack version 5. In this version, NodeJS polyfills is no longer supported by default. To solve this issue, refer to this [guide](https://web3auth.io/docs/troubleshooting/webpack-issues).\n\n## Next Step\n\nFor more in-depth guides on Web3Modal, please refer to [Web3Modal Docs](https://docs.walletconnect.com/2.0/web3modal/about) and [Web3Modal Github repository](https://github.com/klaytn/klaytn-web3modal). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/tools/wallet-libraries/web3Modal-sample).\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets/wallet-libraries/web3Onboard. ---\nsidebar_label: Web3-Onboard\n---\n\n# Integrate Web3-Onboard into a dApp\n\n![](/img/banners/kaia-web3Onboard.png)\n\n## Introduction\n\nLeveraging a tool like [Web3-Onboard](https://onboard.blocknative.com/docs/overview/introduction), projects and developers may quickly integrate multiple wallets into their decentralized applications (dApps). With the help of Web3-Onboard, user onboarding has been simplified. Web3-Onboard does have different features, ranging from support for several wallets to the ability for users to connect their accounts to different chains or networks and receive real-time transaction notifications, et cetera.\n\nIn this guide, you will use Web3-Onboard library to integrate multiple wallets (such as Coinbase Wallet, Metamask, WalletConnect, etc.) into your dApp built on the Kaia Network.\n\n## Prerequisite\n\n* A working react project (by executing `npx create-react-app project-name`)\n* Install the necessary wallets ([Coinbase Wallet](https://www.coinbase.com/wallet/downloads), [Metamask](https://metamask.io/download/)). \n* RPC Endpoint: you can get this from one of the supported [endpoint providers](../../../../references/public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n\n## Getting Started\n\nWeb3-Onboard as a chain-agnostic wallet library, supports all EVM-compatible networks and also provides the flexibility of adding new networks to the library. In this guide, we'll use Web3-Onboard to add the Kaia Mainnet and Kaia Testnet Kairos to our dApp. With that said, let’s get started integrating multi-wallet compatibility using Web3-Onboard into your dApp built on Kaia Network.\n\n## Setting up Onboard and Wallet Modules\n\n**Step 1**: Install @web3-onboard/core\n\n```bash\nnpm i @web3-onboard/core \n```\n\n**Step 2**: Import and Instantiate Wallet Modules\n\nIn this step, you can add as many wallets to be supported in your dApp using the wallet modules. But for this guide, you will add Coinbase Wallet, WalletConnect, Injected Wallets to your web3-Onboard implementation. Refer to this [docs](https://onboard.blocknative.com/docs/overview/introduction#wallet-modules) for a list of wallet modules that can be added to your dApp using Web3-Onboard.\n\n```bash\nnpm install @web3-onboard/coinbase // Coinbase Wallet\nnpm install @web3-onboard/walletconnect // WalletConnect\nnpm install @web3-onboard/injected-wallets  // Used to connect to Metamask\n```\n\nIn your `App.js` file, instantiate the wallet modules to integrate with your dApp. Note that each module has its own unique options parameters to pass in, such as a fallback JSON RPC URL or default chain ID.\n\n```js\nimport coinbaseWalletModule from \"@web3-onboard/coinbase\";\nimport walletConnectModule from \"@web3-onboard/walletconnect\";\nimport injectedModule from \"@web3-onboard/injected-wallets\";\n\nconst coinbaseWalletSdk = coinbaseWalletModule();\nconst walletConnect = walletConnectModule();\nconst injected = injectedModule();\n\nconst modules = [coinbaseWalletSdk, walletConnect, injected];\n```\n\n**Step 3**: Install and import ethers\n\nThe Web3-Onboard provider can be used with libraries like [ethers.js](https://docs.ethers.org/v6/) and [web3.js](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html). In this guide, we will use ethers.js to make Kaia blockchain calls like getting the user's account, fetch balance, sign transaction, send transaction, read from and write to the smart contract.\n\n```bash\nnpm install --save ethers\n```\n\nIn your `App.js` file, import the ethers package like this:\n\n```js\nimport { ethers } from \"ethers\";\n```\n\n**Step 4**: Import and Setup Web3ReactProvider\n\nIn this step, you will instantiate Onboard with the created modules and a list of chains to be compatible with the library. Open up your `App.js` file and paste the code below:\n\n```js\nimport Onboard from \"@web3-onboard/core\";\nconst ETH_MAINNET_RPC_URL = `Paste ETH RPC URL`;\nconst KAIA_MAINNET_URL = `Paste KAIA MAINNET URL`\nconst KAIROS_TESTNET_URL = `Paste KAIROS TESTNET URL`\n\nconst onboard = Onboard({\n  wallets: modules, // created in previous step\n  chains: [\n    {\n      id: \"0x1\", // chain ID must be in hexadecimal\n      token: \"ETH\",\n      namespace: \"evm\",\n      label: \"Ethereum Mainnet\",\n      rpcUrl: ETH_MAINNET_RPC_URL\n    },\n    {\n      id: \"0x2019\", // chain ID must be in hexadecimal\n      token: \"KAIA\",\n      namespace: \"evm\",\n      label: \"Kaia Mainnet\",\n      rpcUrl: KAIA_MAINNET_URL\n    },\n    {\n      id: \"0x3e9\", // chain ID must be in hexadecimel\n      token: \"KAIA\",\n      namespace: \"evm\",\n      label: \"Kairos Testnet\",\n      rpcUrl: KAIROS_TESTNET_URL\n    },\n   // you can add as much supported chains as possible\n  ],\n  appMetadata: {\n    name: \"Kaia-web3-onboard-App\", // change to your dApp name\n    icon: \"https://pbs.twimg.com/profile_images/1620693002149851137/GbBC5ZjI_400x400.jpg\", // paste your icon \n    logo: \"https://pbs.twimg.com/profile_images/1620693002149851137/GbBC5ZjI_400x400.jpg\", // paste your logo\n    description: \"Web3Onboard-Kaia\",\n    recommendedInjectedWallets: [\n      { name: \"Coinbase\", url: \"https://wallet.coinbase.com/\" },\n      { name: \"MetaMask\", url: \"https://metamask.io\" }\n    ]\n  }\n});\n```\n\n## Setting up Utils function\n\nIn this guide, we will be making use of the utils functions such as `truncateAddress()` and `toHex()`. The `truncateAddress()` function takes in a valid address and returns a more readable format of the address passed in. While the `toHex()` function converts numbers to hexadecimal.  The following steps below show how to set up and use the utils function in your project.\n\n**Step 1**: Create a `utils.js` file in the `src` root folder.\n\nPaste the following code in the newly created utils.js file.\n\n```js\nexport const truncateAddress = (address) => {\n    if (!address) return \"No Account\";\n    const match = address.match(\n      /^(0x[a-zA-Z0-9]{2})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/\n    );\n    if (!match) return address;\n    return `${match[1]}…${match[2]}`;\n  };\n\n  export const toHex = (num) => {\n    const val = Number(num);\n    return \"0x\" + val.toString(16);\n  };\n```\n**Step 2**: Import the functions in your `App.js` file.\n\n```js\nimport { truncateAddress, toHex } from \"./utils\";\n```\n\n## Connecting Wallet\n\nInside your App function in your `App.js` file, call the `connectWallet()` method on the onboard instance to initiate the onboard popup modal.\n\n```js\nfunction App() {\n    const connectWallet = async () => {\n    try {\n      const wallets = await onboard.connectWallet();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  return (\n    <div className=\"App\">\n      <button onClick={connectWallet}>Connect Wallet</button>  \n    </div>\n  );\n}\n```\n\nOnce you click your Connect Wallet button, you should see a modal that allows you to seamlessly connect to Coinbase Wallet and other instantiated wallets from your dApp.\n\n![](/img/build/tools/web3-Onboard.png)\n\n## Disconnecting Wallet\nDisconnecting a connected wallet can be achieved by calling the `disconnectWallet()` method on the onboard instance along with the label of the user's primary wallet. Also, one good practice is to refresh the state to clear any previously stored connection data.\n\n```js\nfunction App() {\n    const connectWallet = async () => {\n    try {\n      const wallets = await onboard.connectWallet();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n    \n  const disconnect = async () => {\n    const [primaryWallet] = await onboard.state.get().wallets;\n    if (primaryWallet) await onboard.disconnectWallet({ label: primaryWallet.label });\n    refreshState();\n  };\n\n  // refresh state\n  const refreshState = () => {\n    setAccount(\"\");\n    setChainId(\"\");\n    setProvider();\n    // make sure to add every other state declared here.\n  };\n  \n  return (\n    <div className=\"App\">\n           <button onClick={connectWallet}>Connect Wallet</button>  \n          <button onClick={disconnect}>Disconnect</button>\n    </div>\n  );\n}\n```\n\n## Accessing connection, account, network information\n\nAfter successfully connecting your wallet, you can use the [onboard.state.get()](https://onboard.blocknative.com/docs/modules/core#get-current-state) method to fetch the state of your connection stored through the onboard instance. You can also fetch the state during the initial connection. Now you can modify the  connectWallet() method to return a list of wallet states that you can store in your state and use throughout the application.\n\n**Step 1**:  import React's useState\n\n```js\nimport { useState } from 'react';\n```\n\n**Step 2**: Modify code within your App function \n\n```js\nfunction App() {\n  const [provider, setProvider] = useState();\n  const [account, setAccount] = useState();\n  const [chainId, setChainId] = useState();\n  const connectWallet = async () => {\n    try {\n      const wallets = await onboard.connectWallet();\n      const { accounts, chains, provider } = wallets[0];\n      \n      setProvider(provider);\n      setAccount(accounts[0].address);\n      setChainId(chains[0].id);\n     \n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  ...\n  \n  return (\n    <div className=\"App\">\n        <div>\n            { !account ? ( <button  onClick={connectWallet}> Connect Wallet</button> ) : (\n                <button onClick={disconnect}>Disconnect</button>\n            )}\n        </div>\n     \t\t\n        <div>Wallet Address: ${truncateAddress(account)}</div>\n        <div>Network Chain ID: ${chainId}</div>\n    </div>\n  );\n}\n```\n\n## Switching Networks\n\nIn order to prompt the user to switch networks in your dApps, Web3-Onboard provides a `setChain` method on an initialized instance of Onboard. Note that the target network must have been initialized with the onboard instance at the start of your application.\n\n```js\nconst switchNetwork = async () => {\nawait onboard.setChain({ chainId: toHex(1001) });\n};\n\nreturn (\n    <div className=\"App\">\n        <button onClick={switchNetwork}>Switch Network</button>\n    </div>\n)\n```\n\n## Sending Native Transaction\n\nAfter successfully connecting to a wallet, you can store the provider object returned from the wallet connection in a state variable as done in connectWallet() function. You can therefore use this provider and signer object to send transactions to the blockchain. \n\n```js\n // add to the existing useState hook.\n  const [txHash, setTxHash] = useState();\n\n  const sendKaia = async () => {\n    \n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\t\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(provider);\n\n    const signer = await ethersProvider.getSigner();\n\n    // Submit transaction to the blockchain and wait for it to be mined\n    const tx = await signer.sendTransaction({\n          to: \"0x75Bc50a5664657c869Edc0E058d192EeEfD570eb\",\n          value: ethers.parseEther(\"0.1\"),\n          maxPriorityFeePerGas: \"5000000000\", // Max priority fee per gas\n          maxFeePerGas: \"6000000000000\", // Max fee per gas\n        })\n    \n        \n    const receipt = await tx.wait();\n    setTxHash(receipt.hash)\n  }\n\n\nreturn (\n    <div className=\"App\">\n        <button onClick={sendKlay}>Send Klay</button>\n        <div>Send-Kaia Tx Hash :  {txHash ? <a href={`https://kairos.kaiascope.com/tx/${txHash}`} target=\"_blank\">Kaiascope</a> :  ' ' } </div>\n    </div>\n);\n\n```\n\n## Interacting with Smart Contracts\n\nWith the Web3-Onboard provider and signer object, you can make contract interactions such as writing to and reading from a smart contract deployed on the blockchain.\n\n```js\n// add to existing useState hook\n  const [contractTx, setContractTx] = useState();\n  const [contractMessage, setContractMessage] = useState();\n\n  const writeToContract = async (e) => {\n    e.preventDefault();\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n  \n     // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n   // const provider = new ethers.providers.Web3Provider(provider);\n    const signer = await ethersProvider.getSigner();\n  \n    // Paste your contractABI\n    const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n  \n     // Paste your contract address\n    const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\";\n  \n    // const contract = new Contract(contractAddress, contractABI, provider);\n    const contract = new ethers.Contract(contractAddress, contractABI, signer);\n  \n    const value = e.target.store_value.value;\n  \n    // Send transaction to smart contract to update message\n    const tx = await contract.store(value);\n  \n    // Wait for transaction to finish\n    const receipt = await tx.wait();\n    const result = receipt.hash;\n  \n    setContractTx(result)\n  }\n\n  const readFromContract = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n  \t\n\t\n    // this guide uses ethers version 6.3.0.\n    const ethersProvider = new ethers.BrowserProvider(provider);\n    // for ethers version below 6.3.0.\n    // const provider = new ethers.providers.Web3Provider(provider);\n  \n    // paste your contract ABI\n    const contractABI = [\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"_initNum\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"constructor\"\n      },\n      {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n      },\n      {\n        \"inputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"num\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      }\n    ]\n  \n     // paste your contract address\n    const contractAddress = \"0x3b01E4025B428fFad9481a500BAc36396719092C\"; \n  \n    // const contract = new Contract(contractAddress, contractABI, provider);\n    const contract = new ethers.Contract(contractAddress, contractABI, ethersProvider)\n  \n    // Read message from smart contract\n    const contractMessage = await contract.retrieve();\n    setContractMessage(contractMessage.toString())\n  }\n\n\n  return (\n\n    <div className=\"App\">\n         <form onSubmit={writeToContract}>\n                  <input  name=\"store_value\" placeholder=\"Set contract value\" required/>\n                  <input  type=\"submit\" value=\"Store\"/>\n        </form> \n        <button onClick={readFromContract}>Read From Contract</button> \n        <div>Write-to-contract Tx Hash: ${contractTx}</div>\n        <div>Read-from-contract Message: ${contractMessage}</div>\n    </div>\n\n  )\n```\n\n## Troubleshooting\n\n**Polyfill node core module error**\n\n```js\nBREAKING CHANGES: webpack<5 used to include polyfills for node.js core modules by default.\n```\n\nThis error occurs when you use webpack version 5. In this version, NodeJS polyfills is no longer supported by default. To solve this issue, refer to this [guide](https://web3auth.io/docs/troubleshooting/webpack-issues).\n\n## Next Step\n\nFor more in-depth guides on Web3-Onboard, please refer to [Blocknative Docs](https://docs.blocknative.com/onboard) and [Blocknative Github repository](https://github.com/blocknative/onboard). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/tools/wallet-libraries/web3Onboard-sample).",
    "Current Website Url is https://docs.kaia.io/build/tools/wallets. # Wallets \n\nWallets on Kaia allows for access to accounts controlled by private keys, thus facilitating private key management, signing crypto transactions and also provides an interface to access(i.e send and receive) digital assets. This section provides a list of Kaia supported wallets. Lets get started!\n\n> **Note**: The wallets provided below are third party wallets that have integrated with Kaia and as such it’s much advised for users to do their due diligence before using them. \n\n\n| Wallet      | Custody |     Account Type        |  Platforms            |    Multi-sig         |        Browser Extension     |      NFT       |   Bridge Support          |\n| ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- | ----------- |\n| [1inch](https://1inch.io/wallet/)      | Non-custodial       |  EOA           | Mobile            |      No       |      Yes       |  Support           |      No       |\n| [ABC Wallet](https://myabcwallet.io/en/)      | Non-custodial       |  EOA           | Mobile, Browser           |      No       |      No       |  Support           |      Yes       |\n| [Alpha Wallet](https://alphawallet.com/)   | Non-custodial        |  EOA           |   Broswer, Mobile, API-SDK          |    No         |       No     |   Support          |     Yes        |\n| [Bit2Me](https://bit2me.com/suite/wallet-klaytn)   | Non-custodial        |  EOA           |  Mobile, Web App           |      No       |      No       |    No         |    No         |\n| [BitKeep](https://bitkeep.com/)   | Non-custodial        |   EOA          |      Browser, Mobile, Desktop       |    No         |    Yes         |   Support          |    Yes         |\n| [Biport](https://biport.io/#/)   | Non-custodial        | EOA            |     Mobile         |    No         |   No          |    Support         |   No          |\n| [Burrito Wallet](https://www.burritowallet.com/en)   | Non-custodial        | EOA            |    Browser, Mobile         |    No         |   Yes          |    Support         |   Yes          |\n| [Coin98](https://coin98.com/)   | Non-custodial        |   EOA          |   Browser, Mobile, Web App          |   No          |    Yes         |    Support         |       Yes      |\n| [D'cent](https://dcentwallet.com/)   | Hybrid        |    EOA         |   Mobile          |  No           |     No        |      Support       |   Yes          |\n| [DeFi Wallet](https://crypto.com/defi-wallet)   |Non-custodial        |     EOA        |    Mobile, Desktop         |   No        |  No           |  Support           |   Yes          |\n| [DeKeys](https://www.atomrigs.io/)   | Non-custodial        |   EOA          |    Browser         |      No       |      Yes       |   Support          |   No          |\n| [Favorlet](https://favorlet.io/)   | Non-custodial        |  EOA           |  Mobile           |  No           |   No          |  Support           | No            |\n| [Huobi Wallet](https://www.itoken.com/en)   | Non-custodial        |   EOA          |      Mobile       |      No       |    No         |    Support         |  No           |\n| [Kaia Wallet](https://www.kaiawallet.io/en_US/)   | Non-custodial        |   EOA          |  Mobile, Browser           |  No           |    Yes         |    Support         |   No          |\n| [Kaia Safe](https://safe.kaia.io/)   | Non-custodial        |  Smart Contract           |  Web App           |  Yes           | No            |   Support         |    No         |\n| [Klip Wallet](https://klipwallet.com/)   | Non-custodial        |    EOA         |  Mobile           |  No           |      No       |   Support          |  No           |\n| [Krystal DeFi](https://krystal.app/)   | Non-custodial        |  EOA           |   Mobile, Web App          |   No          |  No           |  Support            |  Yes           |\n| [Math Wallet](https://mathwallet.org/en-us/)   | Custodial        |  EOA           |   Mobile, Web App, Browser          |    No         |   Yes          |  Support           |    Yes         |\n| [MetaMask](https://metamask.io/)   | Non-custodial        | EOA            |    Mobile, Browser         |  No           |  Yes           |  Support           |  No           |\n| [Midas Protocol](https://midasprotocol.io/)   | Non-custodial        |   EOA          |   Mobile          |   No          |    No         |    Support         |  Yes           |\n| [NOW Wallet](https://walletnow.app/)   | Non-custodial        |  EOA           | Mobile, Desktop            |  No           |    No         |   Support          |   No          |\n| [OKX Wallet](https://www.okx.com/web3)   | Non-custodial        | EOA            |  Mobile, Browser           | No            |  Yes           |  Support           | Yes            |\n| [Rabby Wallet](https://rabby.io/)   | Non-custodial        |  EOA           |   Browser, Desktop          |   No          |    Yes         |   Support          |   No          |\n| [Token Pocket](https://www.tokenpocket.pro/en)   | Non-custodial        |  EOA           |  Mobile, Browser, API-SDK           |   No          |  Yes           | Support            |  Yes           |\n| [TrustKeys](https://trustkeys.network/)   | Non-custodial        | EOA             |  Mobile           |  No           |  No           |  Support           |  No           |\n| [Welldone Wallet](https://welldonestudio.io/)   | Non-custodial        |   EOA          |   Browser          |   No          |  Yes           |   No          | Yes            |\n",
    "Current Website Url is https://docs.kaia.io/build/transactions/basic. # Basic\n\n## TxTypeLegacyTransaction <a id=\"txtypelegacytransaction\"></a>\n\nTxTypeLegacyTransaction represents a type of transactions existed previously in Kaia. Since this transaction type exists to support compatibility, it only works with EOAs associated with [AccountKeyLegacy](../../learn/accounts#accountkeylegacy). EOAs associated with other account key types should use other transaction types such as TxTypeValueTransfer, TxTypeSmartContractExecution, and so on. This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned. This transaction type will initiate the following changes.\n\n1. The sender's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. If `to` does not exist on Kaia, an EOA associated with [AccountKeyLegacy](../../learn/accounts#accountkeylegacy) is created.\n4. `value` KAIA is transferred from the sender to the recipient.\n5. If `to` is nil, it is regarded as a smart contract deployment transaction. The smart contract code must be passed as `input`.\n6. If `to` is a smart contract, the smart contract function specified in `input` is executed.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| v, r, s | \\*big.Int \\(Go\\) | The cryptographic signature generated by the sender to let the receiver obtain the sender's address. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| gasPrice | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature of this transaction type, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([nonce, gasPrice, gas, to, value, input, chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\nSenderTxHashRLP = encode([nonce, gasPrice, gas, to, value, input, v, r, s])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\nTxHashRLP = encode([nonce, gasPrice, gas, to, value, input, v, r, s])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xe68204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a8431323334018080\nSigHash 0x40e73366650cddb7affcf5af39efa864b2c68c42b5329044fc86a12b26c4edc7\nSignature f845f84325a0b2a5a15550ec298dc7dddde3774429ed75f864c82caeb5ee24399649ad731be9a029da1014d16f2011b3307f7bbe1035b6e699a4204fc416c763def6cefd976567\nTxHashRLP 0xf8668204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a843132333425a0b2a5a15550ec298dc7dddde3774429ed75f864c82caeb5ee24399649ad731be9a029da1014d16f2011b3307f7bbe1035b6e699a4204fc416c763def6cefd976567\nTxHash e434257753bf31a130c839fec0bd34fc6ea4aa256b825288ee82db31c2ed7524\nSenderTxHashRLP 0xf8668204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a843132333425a0b2a5a15550ec298dc7dddde3774429ed75f864c82caeb5ee24399649ad731be9a029da1014d16f2011b3307f7bbe1035b6e699a4204fc416c763def6cefd976567\nSenderTxHash e434257753bf31a130c839fec0bd34fc6ea4aa256b825288ee82db31c2ed7524\n\n    TX(e434257753bf31a130c839fec0bd34fc6ea4aa256b825288ee82db31c2ed7524)\n    Contract: false\n    From:     a94f5374fce5edbc8e2a8697c15331677e6ebf0b\n    To:       7b65b75d204abed71587c9e519a89277766ee1d0\n    Nonce:    1234\n    GasPrice: 0x19\n    GasLimit  0xf4240\n    Value:    0xa\n    Data:     0x31323334\n    V:        0x25\n    R:        0xb2a5a15550ec298dc7dddde3774429ed75f864c82caeb5ee24399649ad731be9\n    S:        0x29da1014d16f2011b3307f7bbe1035b6e699a4204fc416c763def6cefd976567\n    Hex:      f8668204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a843132333425a0b2a5a15550ec298dc7dddde3774429ed75f864c82caeb5ee24399649ad731be9a029da1014d16f2011b3307f7bbe1035b6e699a4204fc416c763def6cefd976567\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0xeff95d8c57d668aa274a0eaeff942ecc2cfca4c71f71ae9fdaba92735cd79b9e\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"from\": \"0x33c97827c33d8c5e07eb263ed6ec5c229e8b4752\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x5208\",\n  \"input\": \"0x\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x0\",\n  \"senderTxHash\": \"0xff0e9a45aa8741d528baf84069cd3b52c43a51bf7cf69d896672c3c909507888\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xed8aa552324101a99792860d479cd488b7f67af0b9205968748bddcda52da6de\",\n      \"S\": \"0x524dbf481ea1d77c20f4d4354cc208c3149ddfa06f7ab53a03ad82d2d7fed3\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0xd03227635c90c7986f0e3a4e551cefbca8c55316\",\n  \"transactionHash\": \"0xff0e9a45aa8741d528baf84069cd3b52c43a51bf7cf69d896672c3c909507888\",\n  \"transactionIndex\": \"0x0\",\n  \"type\": \"TxTypeLegacyTransaction\",\n  \"typeInt\": 0,\n  \"value\": \"0x174876e800\"\n}\n```\n\n## TxTypeValueTransfer <a id=\"txtypevaluetransfer\"></a>\n\nTxTypeValueTransfer is used when a user wants to send KAIA. As Kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account. Therefore, TxTypeValueTransfer is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeSmartContractExecution](#txtypesmartcontractexecution) instead. The following changes will be made by this transaction type.\n\n1. The sender's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeValueTransfer. This must be 0x08. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a transaction signature, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization with the given parameters and the information of the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf839b5f4088204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b018080\nSigHash 0xaa7665566c9508140bb91e36a948fc8f61c4518400a69562432d17e064f3ce43\nSignature f845f84325a0f3d0cd43661cabf53425535817c5058c27781f478cb5459874feaa462ed3a29aa06748abe186269ff10b8100a4b7d7fea274b53ea2905acbf498dc8b5ab1bf4fbc\nTxHashRLP 0x08f87a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0f3d0cd43661cabf53425535817c5058c27781f478cb5459874feaa462ed3a29aa06748abe186269ff10b8100a4b7d7fea274b53ea2905acbf498dc8b5ab1bf4fbc\nTxHash 762f130342569e9669a4d8547f1248bd2554fbbf3062d63a97ce28bfa97aa9d7\nSenderTxHashRLP 0x08f87a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0f3d0cd43661cabf53425535817c5058c27781f478cb5459874feaa462ed3a29aa06748abe186269ff10b8100a4b7d7fea274b53ea2905acbf498dc8b5ab1bf4fbc\nSenderTxHash 762f130342569e9669a4d8547f1248bd2554fbbf3062d63a97ce28bfa97aa9d7\n\n    TX(762f130342569e9669a4d8547f1248bd2554fbbf3062d63a97ce28bfa97aa9d7)\n    Type:          TxTypeValueTransfer\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xf3d0cd43661cabf53425535817c5058c27781f478cb5459874feaa462ed3a29a\",\"S\":\"0x6748abe186269ff10b8100a4b7d7fea274b53ea2905acbf498dc8b5ab1bf4fbc\"}]\n    Hex:           08f87a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0f3d0cd43661cabf53425535817c5058c27781f478cb5459874feaa462ed3a29aa06748abe186269ff10b8100a4b7d7fea274b53ea2905acbf498dc8b5ab1bf4fbc\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0xeff95d8c57d668aa274a0eaeff942ecc2cfca4c71f71ae9fdaba92735cd79b9e\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"from\": \"0x33c97827c33d8c5e07eb263ed6ec5c229e8b4752\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x5208\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x1\",\n  \"senderTxHash\": \"0x8c18c9a609d2b22c921ce0b282e64924bf073e84f7c3850d99ec71da4054f79d\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x94e059980bce9f3ba5f09e5021ad4f32d7d9cfda938c2d38c989cd4a406e7ba\",\n      \"S\": \"0x3ca52ee9d23954a278e6a30f3ec40951b26fb8b3f784c236c5bb1d5c9a8b2c82\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0x8c18c9a609d2b22c921ce0b282e64924bf073e84f7c3850d99ec71da4054f79d\",\n  \"transactionIndex\": \"0x1\",\n  \"type\": \"TxTypeValueTransfer\",\n  \"typeInt\": 8,\n  \"value\": \"0x21e19e0c9bab2400000\"\n}\n```\n\n## TxTypeValueTransferMemo <a id=\"txtypevaluetransfermemo\"></a>\n\nTxTypeValueTransferMemo is used when a user wants to send KAIA with a specific message. TxTypeValueTransferMemo is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeSmartContractExecution](#txtypesmartcontractexecution) instead. The following changes will be made by this transaction type.\n\n1. The sender's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeValueTransferMemo. This must be 0x10. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction. The message should be passed to this attribute. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a transaction signature, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf841b83cf83a108204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f018080\nSigHash 0x23dd6ca2c023a152cad636ac8ed0a1a7962d3eb4cb7f3c50e34c0cc42e37d48a\nSignature f845f84325a07d2b0c89ee8afa502b3186413983bfe9a31c5776f4f820210cffe44a7d568d1ca02b1cbd587c73b0f54969f6b76ef2fd95cea0c1bb79256a75df9da696278509f3\nTxHashRLP 0x10f8808204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84325a07d2b0c89ee8afa502b3186413983bfe9a31c5776f4f820210cffe44a7d568d1ca02b1cbd587c73b0f54969f6b76ef2fd95cea0c1bb79256a75df9da696278509f3\nTxHash 6c7ee543c24e5b928b638a9f4502c1eca69103f5467ed4b6a2ed0ea5aede2e6b\nSenderTxHashRLP 0x10f8808204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84325a07d2b0c89ee8afa502b3186413983bfe9a31c5776f4f820210cffe44a7d568d1ca02b1cbd587c73b0f54969f6b76ef2fd95cea0c1bb79256a75df9da696278509f3\nSenderTxHash 6c7ee543c24e5b928b638a9f4502c1eca69103f5467ed4b6a2ed0ea5aede2e6b\n\n    TX(6c7ee543c24e5b928b638a9f4502c1eca69103f5467ed4b6a2ed0ea5aede2e6b)\n    Type:          TxTypeValueTransferMemo\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0x7d2b0c89ee8afa502b3186413983bfe9a31c5776f4f820210cffe44a7d568d1c\",\"S\":\"0x2b1cbd587c73b0f54969f6b76ef2fd95cea0c1bb79256a75df9da696278509f3\"}]\n    Data:          36383635366336633666\n    Hex:           10f8808204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84325a07d2b0c89ee8afa502b3186413983bfe9a31c5776f4f820210cffe44a7d568d1ca02b1cbd587c73b0f54969f6b76ef2fd95cea0c1bb79256a75df9da696278509f3\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x7ad6ed1f9955be00db8fb5452125f0e9a3c0856abb5b4cc4aed91ffc134321da\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x53fc\",\n  \"input\": \"0x68656c6c6f\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x4\",\n  \"senderTxHash\": \"0x7311ef305064f2a6997c16cc8b5fc3fdf301549e7b7d0baa3a995a8e79479e5e\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xd63673e1be7919e7ca42de64931c853fc568557b151e9b335df94b22de3a600f\",\n      \"S\": \"0x57bc916a50856b4d197f6856f16370f72f3bb0ac411b1da793fdb5bb7066966f\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0x7311ef305064f2a6997c16cc8b5fc3fdf301549e7b7d0baa3a995a8e79479e5e\",\n  \"transactionIndex\": \"0x4\",\n  \"type\": \"TxTypeValueTransferMemo\",\n  \"typeInt\": 16,\n  \"value\": \"0x989680\"\n}\n```\n\n## TxTypeSmartContractDeploy <a id=\"txtypesmartcontractdeploy\"></a>\n\nTxTypeSmartContractDeploy deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n1. The sender's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. A smart contract is deployed with the code in `input`. The deployed address will be returned via `contractAddress` in the receipt.\n4. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeSmartContractDeploy. This must be 0x28. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. Currently, this value must be nil. Specifying the address will be supported in the future. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| humanReadable | bool \\(Go\\) | This must be false since human-readable address is not supported yet. If true, the transaction will be rejected. |\n| codeFormat | uint8 \\(Go\\) | The code format of smart contract code. The supported value for now is EVM\\(0x00\\) only. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature of this transaction type, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf90240b9023af90237288204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180018080\nSigHash 0xa921fa892d5dec0837bd32c1fb77fc3b2df57ec0b0c4eea79192c79883ed543c\nSignature f845f84325a0fcd107738fb47750ba727610aefd6d5f51ac8163d62ce500e7ab7e15defe7088a0383d68220d0266490ea4173c1d7847f22fcbe22f8c8125e1c0589189845c902a\nTxHashRLP 0x28f9027d8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a0fcd107738fb47750ba727610aefd6d5f51ac8163d62ce500e7ab7e15defe7088a0383d68220d0266490ea4173c1d7847f22fcbe22f8c8125e1c0589189845c902a\nTxHash e983f38b814891990f3ca57028c2230dc7e907eb313c827e7c99fadcc9b4c58b\nSenderTxHashRLP 0x28f9027d8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a0fcd107738fb47750ba727610aefd6d5f51ac8163d62ce500e7ab7e15defe7088a0383d68220d0266490ea4173c1d7847f22fcbe22f8c8125e1c0589189845c902a\nSenderTxHash e983f38b814891990f3ca57028c2230dc7e907eb313c827e7c99fadcc9b4c58b\n\n    TX(e983f38b814891990f3ca57028c2230dc7e907eb313c827e7c99fadcc9b4c58b)\n    Type:          TxTypeSmartContractDeploy\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xfcd107738fb47750ba727610aefd6d5f51ac8163d62ce500e7ab7e15defe7088\",\"S\":\"0x383d68220d0266490ea4173c1d7847f22fcbe22f8c8125e1c0589189845c902a\"}]\n    Datan    HumanReadable: true\n    CodeFormat:    CodeFormatEVM\n    Hex:           28f9027d8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a0fcd107738fb47750ba727610aefd6d5f51ac8163d62ce500e7ab7e15defe7088a0383d68220d0266490ea4173c1d7847f22fcbe22f8c8125e1c0589189845c902a\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"codeFormat\": \"0x0\",\n  \"contractAddress\": \"0x636f6e74726163742e6b6c6179746e0000000000\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0xee6e343d\",\n  \"humanReadable\": true,\n  \"input\": \"0x608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xa\",\n  \"senderTxHash\": \"0x78a5633ee5b453ed2f00937e65945a3b76e96623634e1555e2f15d44930168af\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x369d892dc24786111fd8f0308e8a6518708727257e95b3281865508faa0a768b\",\n      \"S\": \"0x12fc22c390a89484d1cb70e1f19c4fa8a203b1406044ee9c263264876f0dd724\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e74726163742e6b6c6179746e0000000000\",\n  \"transactionHash\": \"0x78a5633ee5b453ed2f00937e65945a3b76e96623634e1555e2f15d44930168af\",\n  \"transactionIndex\": \"0x3\",\n  \"type\": \"TxTypeSmartContractDeploy\",\n  \"typeInt\": 40,\n  \"value\": \"0x0\"\n}\n```\n\n## TxTypeSmartContractExecution <a id=\"txtypesmartcontractexecution\"></a>\n\nTxTypeSmartContractExecution executes a smart contract with the given data in `input`. TxTypeSmartContractExecution is accepted only if `to` is a smart contract account. To transfer KAIA to an externally owned account, use [TxTypeValueTransfer](#txtypevaluetransfer) instead. The following changes will be made by this transaction type.\n\n1. If `to` is a smart contract account, the code is executed based on `input`. Otherwise, this transaction will be rejected.\n2. The sender's balance decreases by the amount of the transaction fee.\n3. The sender's nonce increases by one.\n4. If `value` was provided, `value` KAIA is transferred from the sender to the `to` smart contract. The contract should have a payable fallback function to receive KAIA.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeSmartContractExecution. This must be 0x30. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The address of the smart contract account to be executed. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature of this transaction type, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf860b85bf859308204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2018080\nSigHash 0x197ea7d262f74489934d6cbcf8baa3bec169c16ad672fef4a9f8148864c9cdce\nSignature f845f84326a0e4276df1a779274fbb04bc18a0184809eec1ce9770527cebb3d64f926dc1810ba04103b828a0671a48d64fe1a3879eae229699f05a684d9c5fd939015dcdd9709b\nTxHashRLP 0x30f89f8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84326a0e4276df1a779274fbb04bc18a0184809eec1ce9770527cebb3d64f926dc1810ba04103b828a0671a48d64fe1a3879eae229699f05a684d9c5fd939015dcdd9709b\nTxHash 23bb192bd58d56527843eb63225c5213f3aded95e4c9776f1ff0bdd8ee0b6826\nSenderTxHashRLP 0x30f89f8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84326a0e4276df1a779274fbb04bc18a0184809eec1ce9770527cebb3d64f926dc1810ba04103b828a0671a48d64fe1a3879eae229699f05a684d9c5fd939015dcdd9709b\nSenderTxHash 23bb192bd58d56527843eb63225c5213f3aded95e4c9776f1ff0bdd8ee0b6826\n\n    TX(23bb192bd58d56527843eb63225c5213f3aded95e4c9776f1ff0bdd8ee0b6826)\n    Type:          TxTypeSmartContractExecution\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0xe4276df1a779274fbb04bc18a0184809eec1ce9770527cebb3d64f926dc1810b\",\"S\":\"0x4103b828a0671a48d64fe1a3879eae229699f05a684d9c5fd939015dcdd9709b\"}]\n    Data:          363335333538366230303030303030303030303030303030303030303030303062633539353166303535613835663431613362363266643666363861623764653736643239396232\n    Hex:           30f89f8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84326a0e4276df1a779274fbb04bc18a0184809eec1ce9770527cebb3d64f926dc1810ba04103b828a0671a48d64fe1a3879eae229699f05a684d9c5fd939015dcdd9709b\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0xfedc\",\n  \"input\": \"0x6353586b0000000000000000000000000fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xd\",\n  \"senderTxHash\": \"0xe216873dedd72d8d67a9f5e51eb5a7ed2b5f34bca334adff7a3601d6d3e2e132\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x68fe3dfd1ff3ea14427f157b5837cb6eb0b00fd0497e1c80897de1935200f0\",\n      \"S\": \"0x6b84fbedcb4ff785120890596fad3f797c178cda8908f3b02ee0a4442fbf4189\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e74726163742e6b6c6179746e0000000000\",\n  \"transactionHash\": \"0xe216873dedd72d8d67a9f5e51eb5a7ed2b5f34bca334adff7a3601d6d3e2e132\",\n  \"transactionIndex\": \"0x6\",\n  \"type\": \"TxTypeSmartContractExecution\",\n  \"typeInt\": 48,\n  \"value\": \"0xa\"\n}\n```\n\n## TxTypeAccountUpdate <a id=\"txtypeaccountupdate\"></a>\n\nTxTypeAccountUpdate updates the key of the given account. The following changes will apply by this transaction type.\n\n1. The sender's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. The account's key is updated with `key`.\n4. Once this type of transaction is executed, transactions sent from the account afterward will be validated with the new `key`.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeAccountUpdate. This must be 0x20. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| key | AccountKey \\(Go\\) | [AccountKey](../../learn/accounts#account-key) to be updated to the account. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature of this transaction type, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf849b844f842208204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d018080\nSigHash 0xa0d3f1d2b4f061c3a5d9c22c7bb621aa821162b42b4db6cf1888defc2473e0ab\nSignature f845f84325a0f7d479628f05f51320f0842193e3f7ae55a5b49d3645bf55c35bee1e8fd2593aa04de8eab5338fdc86e96f8c49ed516550f793fc2c4007614ce3d2a6b33cf9e451\nTxHashRLP 0x20f8888204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84325a0f7d479628f05f51320f0842193e3f7ae55a5b49d3645bf55c35bee1e8fd2593aa04de8eab5338fdc86e96f8c49ed516550f793fc2c4007614ce3d2a6b33cf9e451\nTxHash 8c70627d6b637c7d033ead083fc5e43e5cad10c704a86dd9bda7ac104a0e5ad0\nSenderTxHashRLP 0x20f8888204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84325a0f7d479628f05f51320f0842193e3f7ae55a5b49d3645bf55c35bee1e8fd2593aa04de8eab5338fdc86e96f8c49ed516550f793fc2c4007614ce3d2a6b33cf9e451\nSenderTxHash 8c70627d6b637c7d033ead083fc5e43e5cad10c704a86dd9bda7ac104a0e5ad0\n\n    TX(8c70627d6b637c7d033ead083fc5e43e5cad10c704a86dd9bda7ac104a0e5ad0)\n    Type:          TxTypeAccountUpdate\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Key:           AccountKeyPublic: S256Pubkey:{\"x\":\"0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\",\"y\":\"0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\"}\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xf7d479628f05f51320f0842193e3f7ae55a5b49d3645bf55c35bee1e8fd2593a\",\"S\":\"0x4de8eab5338fdc86e96f8c49ed516550f793fc2c4007614ce3d2a6b33cf9e451\"}]\n    Hex:           20f8888204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84325a0f7d479628f05f51320f0842193e3f7ae55a5b49d3645bf55c35bee1e8fd2593aa04de8eab5338fdc86e96f8c49ed516550f793fc2c4007614ce3d2a6b33cf9e451\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"from\": \"0x636f6c696e2e6b6c6179746e0000000000000000\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0xa028\",\n  \"key\": \"0x02a1034ef27ba4b7d1ae09b166744c5b7ee4a7a0cc5c76b2e5d74523a0a4fb56db3191\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x0\",\n  \"senderTxHash\": \"0x3f154903f92a179007b45b807af2d971ada9a23657e80bf5c18a75ac6516fd0b\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x757827ec43eafdc150ecb35423699ceaea41b13dd07f8620e2231a7b0e278149\",\n      \"S\": \"0x59d43ed3e0ed0f9d69d0c08ccca29913a8b138c000029f878f61337220a1ca1b\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0x3f154903f92a179007b45b807af2d971ada9a23657e80bf5c18a75ac6516fd0b\",\n  \"transactionIndex\": \"0x0\",\n  \"type\": \"TxTypeAccountUpdate\",\n  \"typeInt\": 32\n}\n```\n\n## TxTypeCancel <a id=\"txtypecancel\"></a>\n\nTxTypeCancel cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time. There are several cases that a transaction seems unprocessed: 1. The transaction was lost somewhere and did not reach any of the consensus nodes. 2. The transaction has not been processed yet in any of the consensus nodes. 3. The transaction was processed, but the block containing the transaction has not been received.\n\nFrom the client side, it is very hard to figure out the exact reason because to figure out the reason, it is required to look inside all the consensus nodes. However, connecting to any of the consensus nodes from the public is prohibited. Under this situation, in typical blockchain platforms, the user often submits another transaction with a higher gas price to replace the old transaction. However, because the gas price is fixed in Kaia, replacing the old transaction with a higher gas price is not applicable.\n\nIf the transaction remains unprocessed, the other transactions with higher nonce cannot be processed because the nonce determines the execution order of transactions.\n\nTo solve this problem, Kaia provides a transaction type TxTypeCancel. If a user encountered such a situation, a transaction of TxTypeCancel can be submitted.\n\nEach of the above situations is handled as follows: 1. If the old transaction was lost, this TxTypeCancel transaction is executed and included in a block. 2. If the old transaction has not been processed yet, this TxTypeCancel replaces the old transaction. Then, it is executed and included in a block. 3. if the old transaction was already executed, the nonce has been increased, therefore this TxTypeCancel transaction is discarded due to the lower nonce.\n\nNote that the TxTypeCancel transaction is the only transaction that is capable of replacing a transaction with the same nonce. Other transaction types cannot replace the transactions with the same nonce.\n\nThe following changes can occur by this transaction type. 1. The sender's balance decreases by the amount of the transaction fee. 2. The sender's nonce increases by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeCancel. This must be 0x38. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed.  For the `TxTypeCancel` transaction, this value must match the nonce that the target transaction to be canceled was using. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\nOutcome:\n\n1. If there is a transaction with the same nonce, it is replaced with this cancel transaction.\n2. If no same nonce, this transaction is just inserted as a normal transaction.  \n3. The cancel transaction is not replaced with other transaction types.\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a transaction signature, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xe39fde388204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b018080\nSigHash 0xaaac6d71ad921e8a12e92c47d0b0654a20d8d9a4ff70d83f78661ccdf062ce9a\nSignature f845f84325a0fb2c3d53d2f6b7bb1deb5a09f80366a5a45429cc1e3956687b075a9dcad20434a05c6187822ee23b1001e9613d29a5d6002f990498d2902904f7f259ab3358216e\nTxHashRLP 0x38f8648204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0fb2c3d53d2f6b7bb1deb5a09f80366a5a45429cc1e3956687b075a9dcad20434a05c6187822ee23b1001e9613d29a5d6002f990498d2902904f7f259ab3358216e\nTxHash 10d135d590cb587cc45c1f94f4a0e3b8c24d24a6e4243f09ca395fb4e2450413\nSenderTxHashRLP 0x38f8648204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0fb2c3d53d2f6b7bb1deb5a09f80366a5a45429cc1e3956687b075a9dcad20434a05c6187822ee23b1001e9613d29a5d6002f990498d2902904f7f259ab3358216e\nSenderTxHash 10d135d590cb587cc45c1f94f4a0e3b8c24d24a6e4243f09ca395fb4e2450413\n\n    TX(10d135d590cb587cc45c1f94f4a0e3b8c24d24a6e4243f09ca395fb4e2450413)\n    Type:          TxTypeCancel\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xfb2c3d53d2f6b7bb1deb5a09f80366a5a45429cc1e3956687b075a9dcad20434\",\"S\":\"0x5c6187822ee23b1001e9613d29a5d6002f990498d2902904f7f259ab3358216e\"}]\n    Hex:           38f8648204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a0fb2c3d53d2f6b7bb1deb5a09f80366a5a45429cc1e3956687b075a9dcad20434a05c6187822ee23b1001e9613d29a5d6002f990498d2902904f7f259ab3358216e\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x5208\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x10\",\n  \"senderTxHash\": \"0x0370adf89b2463d3d1fd894d6328929c931ef0cc3a8f1481affedd2e9c88d9d6\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xad73f30acfb80090cba8d3f4be4696e65f8eb7c36b85aac06a9bea350d10578f\",\n      \"S\": \"0x7ec2d6f052d8f916d12db2e0310381201888cb12d3a3696da80cab5195833706\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0x0370adf89b2463d3d1fd894d6328929c931ef0cc3a8f1481affedd2e9c88d9d6\",\n  \"transactionIndex\": \"0x9\",\n  \"type\": \"TxTypeCancel\",\n  \"typeInt\": 56\n}\n```\n\n## TxTypeChainDataAnchoring <a id=\"txtypechaindataanchoring\"></a>\n\nTxTypeChainDataAnchoringTransaction is a transaction that anchors service chain data to the Kaia mainchain. Service chains periodically send this type of transaction to the Kaia mainchain to ensure its security and credibility of data. For more details about the data anchoring, see [Anchoring](../../nodes/service-chain/configure/anchoring). Be mindful that it is not allowed to send this transaction via RPC. Currently, this transaction is executed through private p2p channels for security reasons. This transaction does not change the state of the Kaia blockchain except the sender's nonce being increased by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeChainDataAnchoringTransaction. This must be 0x48. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data of the service chain. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature of this transaction type, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, anchoredData]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, txSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf8cfb8caf8c8488204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8a8f8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405018080\nSigHash 0x07e07c69a12e384c16d94157c99d0a6fbae1d99f5d54501bfdc5937bbee7c792\nSignature f845f84325a0e58b9abf9f33a066b998fccaca711553fb4df425c9234bbb3577f9d9775bb124a02c409a6c5d92277c0a812dd0cc553d7fe1d652a807274c3786df3292cd473e09\nTxHashRLP 0x48f9010e8204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8a8f8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405f845f84325a0e58b9abf9f33a066b998fccaca711553fb4df425c9234bbb3577f9d9775bb124a02c409a6c5d92277c0a812dd0cc553d7fe1d652a807274c3786df3292cd473e09\nTxHash 4aad85735e777795d24aa3eab51be959d8ebdf9683083d85b66f70b7170f2ea3\nSenderTxHashRLP 0x48f9010e8204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8a8f8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405f845f84325a0e58b9abf9f33a066b998fccaca711553fb4df425c9234bbb3577f9d9775bb124a02c409a6c5d92277c0a812dd0cc553d7fe1d652a807274c3786df3292cd473e09\nSenderTxHash 4aad85735e777795d24aa3eab51be959d8ebdf9683083d85b66f70b7170f2ea3\n\n    TX(4aad85735e777795d24aa3eab51be959d8ebdf9683083d85b66f70b7170f2ea3)\n    Type:          TxTypeChainDataAnchoring\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xe58b9abf9f33a066b998fccaca711553fb4df425c9234bbb3577f9d9775bb124\",\"S\":\"0x2c409a6c5d92277c0a812dd0cc553d7fe1d652a807274c3786df3292cd473e09\"}]\n    Hex:           48f9010e8204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8a8f8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405f845f84325a0e58b9abf9f33a066b998fccaca711553fb4df425c9234bbb3577f9d9775bb124a02c409a6c5d92277c0a812dd0cc553d7fe1d652a807274c3786df3292cd473e09\n    AnchoredData:  f8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x93a8\",\n  \"input\": \"0xf8a6a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x13\",\n  \"senderTxHash\": \"0x28b56268d18b116b08b1673caad80212f271d6e36ceef225b44c6d2a1f0413db\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x7049656869a9442d26ed0c2cbf15812dc486580d03f1cc6373104410225e1e7b\",\n      \"S\": \"0x3c58fd9ae9390e6484e965572821846445983d9b5eb7866aa4113c56a5bf253e\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0x28b56268d18b116b08b1673caad80212f271d6e36ceef225b44c6d2a1f0413db\",\n  \"transactionIndex\": \"0xc\",\n  \"type\": \"TxTypeChainDataAnchoring\",\n  \"typeInt\": 72\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/build/transactions/ethereum. # Ethereum Compatibility\n\nKaia provides wrapped transaction types to support Ethereum compatibility. Ethereum transaction types in Kaia have the same attributes and RLP encoding schemes with Ethereum's design except for the single-byte type delimiter called `EthereumTxTypeEnvelope`. Therefore, users can successfully deploy transactions generated by Ethereum development tools on Kaia. The type delimiter is also omitted when users use `eth` namespace APIs, so they can use Kaia just as if they were using Ethereum. Using `kaia` namespace APIs, users can deploy and retrieve Ethereum formatted transactions as a type of Kaia transactions without getting confused with the existing Kaia transaction types.  \n\n## EthereumTxTypeEnvelope <a id=\"ethereumtxtypeenvelope\"></a>\n\nEthereumTxTypeEnvelope is a single-byte prefix for raw transactions that denotes Ethereum transaction types. Ethereum has adopted an extendable transaction type scheme from [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) and it uses a type numbering system that conflicts with Kaia's. To resolve the conflict between two different transaction type schemes, Kaia has introduced `EthereumTxTypeEnvelope` which allows for separation and expansion for future Ethereum transaction types. \n\n`EthereumTxTypeEnvelope` is an additional type delimiter and used only for raw transactions and type numbering. It is not used for transaction hash or signature hash. For that purpose, `EthereumTransactionType` as defined in EIPs is used. \n- EthereumTxTypeEnvelope: `0x78`\n- TxHashRLP : EthereumTransactionType || TransactionPayload\n- RawTransaction : EthereumTxTypeEnvelope || EthereumTransactionType || TransactionPayload\n\n## TxTypeEthereumAccessList <a id=\"txtypeethereumaccesslist\"></a>\n\n`TxTypeEthereumAccessList` represents a type of Ethereum transaction specified in [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930). This transactions type contains an access list, a list of addresses and storage keys that the transaction is supposed to access. Since this transaction type exists to support compatibility, it only works with EOAs associated with [AccountKeyLegacy]. EOAs associated with other account key types should use other transaction types such as `TxTypeValueTransfer`, `TxTypeSmartContractExecution`, and so on. This transaction type can create accounts, transfer tokens, deploy/execute smart contracts or a mix of the aforementioned. \n\n:::note\n \nKaia networks can process this transaction type after the `EthTxTypeCompatibleBlock`\n\n:::\n\n:::note\n \nNOTE: This transaction type only supports the format of the Ethereum transaction type. Unlike [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930), there are no benefits in terms of transaction fee from using access list.\n\n:::\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of `TxTypeEthereumAccessList` that is a concatenation of `EthereumTxTypeEnvelope` and `EthereumTransactionType`. This must be 0x7801. |  \n| chainId | \\*big.Int \\(Go\\) | The destination chain ID. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| data | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| accessList | type.AccessList \\(Go\\) | A list of addresses and storage keys consisting of \\[\\](common.Address, []common.Hash). |\n| v, r, s | \\*big.Int \\(Go\\) | The cryptographic signature generated by the sender to let the receiver obtain the sender's address. |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature for this transaction type, the RLP serialization proceeds as follows:\n\n:::note\n \nThis type of transaction should be signed with London Signer\n\n:::\n\n```javascript\nSigRLP = EthereumTransactionType || encode([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo obtain `SenderTxHash` for this transaction type, the RLP serialization proceeds as follows:\n\n```javascript\nSenderTxHashRLP = EthereumTransactionType || encode([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s])\nSenderTxHash = keccak256(SenderTxHashRLP)\nSignature = sign(SenderTxHash, <private key>)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, the RLP serialization proceeds as follows:\n\n```javascript\nTxHashRLP = EthereumTransactionType || encode([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s])\nTxHash = keccak256(TxHashRLP)\n```\n\n### Raw Transaction <a id=\"raw-transaction\"></a>\n```javascript\nRawTx = EthereumTxTypeEnvelope || EthereumTransactionType || encode([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s])\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of the RLP serialization and the transaction object:\n\n```javascript\n    TX(3a3ab67168de40b1f8a2141a70a4e2f551f90d7814b2fbcb3ac99ad8d8d0b641)\n    Contract: false\n    Chaind:   0x2\n    From:     a94f5374fce5edbc8e2a8697c15331677e6ebf0b\n    To:       7b65b75d204abed71587c9e519a89277766ee1d0\n    Nonce:    1234\n    GasPrice: 0x19\n    GasLimit  0xf4240\n    Value:    0xa\n    Data:     0x31323334\n    AccessList: [{0000000000000000000000000000000000000001 [0000000000000000000000000000000000000000000000000000000000000000]}]\n    V:        0x1\n    R:        0xbfc80a874c43b71b67c68fa5927d1443407f31aef4ec6369bbecdb76fc39b0c0\n    S:        0x193e62c1dd63905aee7073958675dcb45d78c716a9a286b54a496e82cb762f26\n    Hex:      7801f8a1028204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a8431323334f838f7940000000000000000000000000000000000000001e1a0000000000000000000000000000000000000000000000000000000000000000001a0bfc80a874c43b71b67c68fa5927d1443407f31aef4ec6369bbecdb76fc39b0c0a0193e62c1dd63905aee7073958675dcb45d78c716a9a286b54a496e82cb762f26\n        \n\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\nThe return of `eth_getTransactionByHash`\n```javascript\n{\n  \"blockHash\": \"0x7bd7e8a92ecaa5781a15a8b6fff589f8ac8a79325b517a1ba5d5f2f3d7af1b00\",\n  \"blockNumber\": \"0x1c8f4b\",\n  \"from\": \"0x5618e15ec2916bbe6cf2cce20ce31e61d6062cac\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"hash\": \"0x3f67e48c2090f560234f555cd4edf7853b6327aa9a6a795be1efe3f360dac118\",\n  \"input\": \"0x1122\",\n  \"nonce\": \"0x11\",\n  \"to\": \"0x5dce87b5bfcde54023811b168dc97a9f10913957\",\n  \"transactionIndex\": \"0x0\",\n  \"value\": \"0x186a0\",\n  \"type\": \"0x1\",\n  \"accessList\": [\n      {\n          \"address\": \"0x0000000000000000000000000000000000000001\",\n          \"storageKeys\": [\n              \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n          ]\n      }\n  ],\n  \"chainId\": \"0x2710\",\n  \"v\": \"0x1\",\n  \"r\": \"0xebb2d2144293c257e27aaa1d22156f322b0d2d7385257f186c117899d791f174\",\n  \"s\": \"0x5cea970287c9f0f9754050a552c458c066d8f3b3e4639f561b22ce4cb7553ac0\"\n}\n```\n\nThe return of `kaia_getTransactionByHash`\n```javascript\n{\n  \"accessList\": [\n      {\n          \"address\": \"0x0000000000000000000000000000000000000001\",\n          \"storageKeys\": [\n              \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n          ]\n      }\n  ],\n  \"blockHash\": \"0x7bd7e8a92ecaa5781a15a8b6fff589f8ac8a79325b517a1ba5d5f2f3d7af1b00\",\n  \"blockNumber\": \"0x1c8f4b\",\n  \"chainID\": \"0x2710\",\n  \"from\": \"0x5618e15ec2916bbe6cf2cce20ce31e61d6062cac\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"hash\": \"0x3f67e48c2090f560234f555cd4edf7853b6327aa9a6a795be1efe3f360dac118\",\n  \"input\": \"0x1122\",\n  \"nonce\": \"0x11\",\n  \"senderTxHash\": \"0x3f67e48c2090f560234f555cd4edf7853b6327aa9a6a795be1efe3f360dac118\",\n  \"signatures\": [\n      {\n          \"V\": \"0x1\",\n          \"R\": \"0xebb2d2144293c257e27aaa1d22156f322b0d2d7385257f186c117899d791f174\",\n          \"S\": \"0x5cea970287c9f0f9754050a552c458c066d8f3b3e4639f561b22ce4cb7553ac0\"\n      }\n  ],\n  \"to\": \"0x5dce87b5bfcde54023811b168dc97a9f10913957\",\n  \"transactionIndex\": \"0x0\",\n  \"type\": \"TxTypeEthereumAccessList\",\n  \"typeInt\": 30721,\n  \"value\": \"0x186a0\"\n}\n```\n\n\n## TxTypeEthereumDynamicFee <a id=\"txtypeethereumdynamicfee\"></a>\n\n`TxTypeEthereumDynamicFee` represents a type of Ethereum transaction specified in [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559). This transaction type contains `gasTipCap` and `gasFeeCap` instead of `gasPrice`. Since this transaction type exists to support compatibility, it only works with EOAs associated with [AccountKeyLegacy]. EOAs associated with other account key types should use other transaction types such as `TxTypeValueTransfer`, `TxTypeSmartContractExecution`, and so on. This type of transaction can create accouns, transfer tokens, deploy/execute smart contracts, or a mix of the aforementioned. \n\n:::note\n \nNOTE: Kaia networks can process this transaction type after the `EthTxTypeCompatibleBlock`\n\n:::\n\n:::note\n \nCurrently, this type of transaction only supports the format of the Ethereum transaction type. Unlike [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930), there are no benefits in terms of transaction fees from using access list.\n\n:::\n\n:::note\n \nNOTE: Since Kaia has a fixed gas price, `gasTipCap` and `gasFeeCap` should take the gas price for the respective network, which is 250 Gkei at the time of writing.\n\n:::\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of `TxTypeEthereumDynamicFee` that is a concatenation of `EthereumTxTypeEnvelope` and `EthereumTransactionType`. It must be `0x7802`. |  \n| chainId | \\*big.Int \\(Go\\) | The destination chain ID. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasTipCap | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in addition to `baseFee`. Since Kaia has a fixed gas price, `gasTipCap` and `gasFeeCap` should take the gas price for the respective network, which is 250 Gkei at the time of writing. |\n| gasFeeCap | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasFeeCap`. Since Kaia has a fixed gas price, `gasTipCap` and `gasFeeCap` should take the gas price for the respective network, which is 250 Gkei at the time of writing. |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| data | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| accessList | type.AccessList \\(Go\\) | A list of addresses and storage keys consisting of \\[\\](common.Address, []common.Hash). |\n| v, r, s | \\*big.Int \\(Go\\) | The cryptographic signature generated by the sender to let the receiver obtain the sender's address. |\n\n### RLP Encoding for Signature <a id=\"rlp-encoding-for-signature\"></a>\n\nTo make a signature for this transaction type, the RLP serialization proceeds as follows:\n\n:::note\n \nThis type of transaction should be signed with London Signer\n\n:::\n\n```javascript\nSigRLP = EthereumTransactionType || encode([chainId, nonce, gasTipCap, gasFeeCap, gasLimit, to, value, data, accessList])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo obtain `SenderTxHash` for this transaction type, the RLP serialization proceeds as follows:\n\n```javascript\nSenderTxHashRLP = EthereumTransactionType || encode([chainId, nonce, gasTipCap, gasFeeCap, gasLimit, to, value, data, accessList, v, r, s])\nSenderTxHash = keccak256(SenderTxHashRLP)\nSignature = sign(SenderTxHash, <private key>)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo obtain a transaction hash, the RLP serialization proceeds as follows:\n\n```javascript\nTxHashRLP = EthereumTransactionType || encode([chainId, nonce, gasTipCap, gasFeeCap, gasLimit, to, value, data, accessList, v, r, s])\nTxHash = keccak256(TxHashRLP)\n```\n\n### Raw Transaction <a id=\"raw-transaction\"></a>\n```javascript\nRawTx = EthereumTxTypeEnvelope || EthereumTransactionType || encode([chainId, nonce, gasTipCap, gasFeeCap, gasLimit, to, value, data, accessList, v, r, s])\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of the RLP serialization and the transaction object:\n\n```javascript\n    TX(be74e122acf00c2f257e8698ecf01140b58b2880de3f24d0875730425eccb45a)\n    Contract: false\n    Chaind:   0x2\n    From:     a94f5374fce5edbc8e2a8697c15331677e6ebf0b\n    To:       7b65b75d204abed71587c9e519a89277766ee1d0\n    Nonce:    1234\n    GasTipCap: 0x19\n    GasFeeCap: 0x19\n    GasLimit  0xf4240\n    Value:    0xa\n    Data:     0x31323334\n    AccessList: [{0000000000000000000000000000000000000001 [0000000000000000000000000000000000000000000000000000000000000000]}]\n    V:        0x0\n    R:        0xca14aa0bada2da7ca1b143c16e2dd4a69f2a1e77ce54c7f6d440fe828a777f4f\n    S:        0x117f0f78aed398b2995b5ee7c67ace25d52be3c72c1384c2aaa9683b351556\n    Hex:      7802f8a1028204d21919830f4240947b65b75d204abed71587c9e519a89277766ee1d00a8431323334f838f7940000000000000000000000000000000000000001e1a0000000000000000000000000000000000000000000000000000000000000000080a0ca14aa0bada2da7ca1b143c16e2dd4a69f2a1e77ce54c7f6d440fe828a777f4f9f117f0f78aed398b2995b5ee7c67ace25d52be3c72c1384c2aaa9683b351556\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\nThe return of `eth_getTransactionByHash`\n```javascript\n{\n  \"blockHash\": \"0x55792fe186e3d1515fe35a68c2c8d7977b2d7db184d80526f906c53222b77833\",\n  \"blockNumber\": \"0x1c944d\",\n  \"from\": \"0x5618e15ec2916bbe6cf2cce20ce31e61d6062cac\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"maxFeePerGas\": \"0x5d21dba00\",\n  \"maxPriorityFeePerGas\": \"0x5d21dba00\",\n  \"hash\": \"0x5db239963029ad9ef6c3331b10ae455638316e330b0efdae2cc1f8e86884e66e\",\n  \"input\": \"0x1122\",\n  \"nonce\": \"0x13\",\n  \"to\": \"0xa0f1633f4c666d7fe5ba912bd5caf03d3655ac31\",\n  \"transactionIndex\": \"0x0\",\n  \"value\": \"0x186a0\",\n  \"type\": \"0x2\",\n  \"accessList\": [\n      {\n          \"address\": \"0x0000000000000000000000000000000000000001\",\n          \"storageKeys\": [\n              \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n          ]\n      }\n  ],\n  \"chainId\": \"0x2710\",\n  \"v\": \"0x1\",\n  \"r\": \"0x27e007cbe79fd8cc9b89dd798bdd5aa62d038273bf006c7c3b40e13a938ab807\",\n  \"s\": \"0x6209bb328855f02fa2671fecb41efd9f191b03ecab5e580227fa2a0674879384\"\n}\n```\n\nThe return of `kaia_getTransactionByHash`\n```javascript\n{\n  \"accessList\": [\n      {\n          \"address\": \"0x0000000000000000000000000000000000000001\",\n          \"storageKeys\": [\n              \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n          ]\n      }\n  ],\n  \"blockHash\": \"0x55792fe186e3d1515fe35a68c2c8d7977b2d7db184d80526f906c53222b77833\",\n  \"blockNumber\": \"0x1c944d\",\n  \"chainId\": \"0x2710\",\n  \"from\": \"0x5618e15ec2916bbe6cf2cce20ce31e61d6062cac\",\n  \"gas\": \"0x174876e800\",\n  \"hash\": \"0x5db239963029ad9ef6c3331b10ae455638316e330b0efdae2cc1f8e86884e66e\",\n  \"input\": \"0x1122\",\n  \"maxFeePerGas\": \"0x5d21dba00\",\n  \"maxPriorityFeePerGas\": \"0x5d21dba00\",\n  \"nonce\": \"0x13\",\n  \"senderTxHash\": \"0x5db239963029ad9ef6c3331b10ae455638316e330b0efdae2cc1f8e86884e66e\",\n  \"signatures\": [\n      {\n          \"V\": \"0x1\",\n          \"R\": \"0x27e007cbe79fd8cc9b89dd798bdd5aa62d038273bf006c7c3b40e13a938ab807\",\n          \"S\": \"0x6209bb328855f02fa2671fecb41efd9f191b03ecab5e580227fa2a0674879384\"\n      }\n  ],\n  \"to\": \"0xa0f1633f4c666d7fe5ba912bd5caf03d3655ac31\",\n  \"transactionIndex\": \"0x0\",\n  \"type\": \"TxTypeEthereumDynamicFee\",\n  \"typeInt\": 30722,\n  \"value\": \"0x186a0\"\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/build/transactions/fee-delegation. # Fee Delegation\n\n## TxTypeFeeDelegatedValueTransfer <a id=\"txtypefeedelegatedvaluetransfer\"></a>\n\nTxTypeFeeDelegatedValueTransfer is used when a user wants to send KAIA. As Kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeFeeDelegatedValueTransfer is limited to send KAIA to an externally owned account. Therefore, TxTypeFeeDelegatedValueTransfer is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeFeeDelegatedSmartContractExecution](#txtypefeedelegatedsmartcontractexecution) instead. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedValueTransfer. This must be 0x09. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([ encode([type, nonce, gasPrice, gas, to, value, from]), feePayer, chainid, 0, 0 ])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, txSignatures, feePayer, feePayerSignatures])`\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf839b5f4098204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b018080\nSigHash 0xb86e4cc0955f7c2cda1b36038c9d43a2724fc956c11e09c37625379b7eb2bd21\nSignature f845f84325a09f8e49e2ad84b0732984398749956e807e4b526c786af3c5f7416b293e638956a06bf88342092f6ff9fabe31739b2ebfa1409707ce54a54693e91a6b9bb77df0e7\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf84eb5f4098204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x3e7c5f40e826d1d22493be59bf62928dc397de5c972bd9bfa3fe5206c24a5f82\nSignatureFeePayer f845f84326a0f45cf8d7f88c08e6b6ec0b3b562f34ca94283e4689021987abb6b0772ddfd80aa0298fe2c5aeabb6a518f4cbb5ff39631a5d88be505d3923374f65fdcf63c2955b\nTxHashRLP 0x09f8d68204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a09f8e49e2ad84b0732984398749956e807e4b526c786af3c5f7416b293e638956a06bf88342092f6ff9fabe31739b2ebfa1409707ce54a54693e91a6b9bb77df0e7945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0f45cf8d7f88c08e6b6ec0b3b562f34ca94283e4689021987abb6b0772ddfd80aa0298fe2c5aeabb6a518f4cbb5ff39631a5d88be505d3923374f65fdcf63c2955b\nTxHash e1e07f9971153499fc8c7bafcdaf7abc20b37aa4c18fb1e53a9bfcc259e3644c\nSenderTxHashRLP 0x09f87a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a09f8e49e2ad84b0732984398749956e807e4b526c786af3c5f7416b293e638956a06bf88342092f6ff9fabe31739b2ebfa1409707ce54a54693e91a6b9bb77df0e7\nSenderTxHash 40f8c94e01e07eb5353f6cd4cd3eabd5893215dd53a50ba4b8ff9a447ac51731\n\n    TX(e1e07f9971153499fc8c7bafcdaf7abc20b37aa4c18fb1e53a9bfcc259e3644c)\n    Type:          TxTypeFeeDelegatedValueTransfer\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0x9f8e49e2ad84b0732984398749956e807e4b526c786af3c5f7416b293e638956\",\"S\":\"0x6bf88342092f6ff9fabe31739b2ebfa1409707ce54a54693e91a6b9bb77df0e7\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0xf45cf8d7f88c08e6b6ec0b3b562f34ca94283e4689021987abb6b0772ddfd80a\",\"S\":\"0x298fe2c5aeabb6a518f4cbb5ff39631a5d88be505d3923374f65fdcf63c2955b\"}]\n    Hex:           09f8d68204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84325a09f8e49e2ad84b0732984398749956e807e4b526c786af3c5f7416b293e638956a06bf88342092f6ff9fabe31739b2ebfa1409707ce54a54693e91a6b9bb77df0e7945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0f45cf8d7f88c08e6b6ec0b3b562f34ca94283e4689021987abb6b0772ddfd80aa0298fe2c5aeabb6a518f4cbb5ff39631a5d88be505d3923374f65fdcf63c2955b\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x7ad6ed1f9955be00db8fb5452125f0e9a3c0856abb5b4cc4aed91ffc134321da\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x984e9d43c496ef39ef2d496c8e1aee695f871e4f6cfae7f205ddda1589ca5c9e\",\n      \"S\": \"0x46647d1ce8755cd664f5fb4eba3082dd1a13817488029f3869662986b7b1a5ae\"\n    }\n  ],\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x7918\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x2\",\n  \"senderTxHash\": \"0x6a8cf9a2f6d16561303445309d4f210c8be862f0d0c0e6f4998775fef9b4f957\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x368b3324b37831b51711a2eba2a7608438a2bd5956ccecbcdb07d9163ff8bc87\",\n      \"S\": \"0x7ee2e86ad6f01c867b2ced9d69e614ba22e539726451400fccdd56acbbc7a6f7\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0xea4341b5c95fd5a0c3a8a15a4177ab6394725c24f722a9e31f53474a6dcf086a\",\n  \"transactionIndex\": \"0x2\",\n  \"type\": \"TxTypeFeeDelegatedValueTransfer\",\n  \"typeInt\": 9,\n  \"value\": \"0x21e19e0c9bab2400000\"\n}\n```\n\n## TxTypeFeeDelegatedValueTransferMemo <a id=\"txtypefeedelegatedvaluetransfermemo\"></a>\n\nTxTypeFeeDelegatedValueTransferMemo is used when a user wants to send KAIA with a specific message. TxTypeFeeDelegatedValueTransferMemo is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeFeeDelegatedSmartContractExecution](#txtypefeedelegatedsmartcontractexecution) instead. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Description | Type | An example value |\n| :--- | :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedValueTransferMemo. This must be 0x11. |  |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |  |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |  |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |  |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |  |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |  |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |  |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction. The message should be passed to this attribute. |  |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |  |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |  |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |  |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf841b83cf83a118204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f018080\nSigHash 0x3333b9336d431ffa53b795fedcf03cc2217cea3f26825ea5cbf7d69f0b99fde9\nSignature f845f84326a064e213aef0167fbd853f8f9989ef5d8b912a77457395ccf13d7f37009edd5c5ba05d0c2e55e4d8734fe2516ed56ac628b74c0eb02aa3b6eda51e1e25a1396093e1\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf856b83cf83a118204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xed015096fb27764f576415e23576228cbf7c4fdad464ea7ffc3a1856dfe391c9\nSignatureFeePayer f845f84326a087390ac14d3c34440b6ddb7b190d3ebde1a07d9a556e5a82ce7e501f24a060f9a037badbcb12cda1ed67b12b1831683a08a3adadee2ea760a07a46bdbb856fea44\nTxHashRLP 0x11f8dc8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84326a064e213aef0167fbd853f8f9989ef5d8b912a77457395ccf13d7f37009edd5c5ba05d0c2e55e4d8734fe2516ed56ac628b74c0eb02aa3b6eda51e1e25a1396093e1945a0043070275d9f6054307ee7348bd660849d90ff845f84326a087390ac14d3c34440b6ddb7b190d3ebde1a07d9a556e5a82ce7e501f24a060f9a037badbcb12cda1ed67b12b1831683a08a3adadee2ea760a07a46bdbb856fea44\nTxHash 8f68882f6192a53ba470aeca1e83ed9b9e519906a91256724b284dee778b21c9\nSenderTxHashRLP 0x11f8808204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84326a064e213aef0167fbd853f8f9989ef5d8b912a77457395ccf13d7f37009edd5c5ba05d0c2e55e4d8734fe2516ed56ac628b74c0eb02aa3b6eda51e1e25a1396093e1\nSenderTxHash fffaa2b38d4e684ea70a89c78fc7b2659000d130c76ad721d68175cbfc77c550\n\n    TX(8f68882f6192a53ba470aeca1e83ed9b9e519906a91256724b284dee778b21c9)\n    Type:          TxTypeFeeDelegatedValueTransferMemo\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0x64e213aef0167fbd853f8f9989ef5d8b912a77457395ccf13d7f37009edd5c5b\",\"S\":\"0x5d0c2e55e4d8734fe2516ed56ac628b74c0eb02aa3b6eda51e1e25a1396093e1\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0x87390ac14d3c34440b6ddb7b190d3ebde1a07d9a556e5a82ce7e501f24a060f9\",\"S\":\"0x37badbcb12cda1ed67b12b1831683a08a3adadee2ea760a07a46bdbb856fea44\"}]\n    Data:          36383635366336633666\n    Hex:           11f8dc8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6ff845f84326a064e213aef0167fbd853f8f9989ef5d8b912a77457395ccf13d7f37009edd5c5ba05d0c2e55e4d8734fe2516ed56ac628b74c0eb02aa3b6eda51e1e25a1396093e1945a0043070275d9f6054307ee7348bd660849d90ff845f84326a087390ac14d3c34440b6ddb7b190d3ebde1a07d9a556e5a82ce7e501f24a060f9a037badbcb12cda1ed67b12b1831683a08a3adadee2ea760a07a46bdbb856fea44\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x7ad6ed1f9955be00db8fb5452125f0e9a3c0856abb5b4cc4aed91ffc134321da\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xb5d80dc924c51f58eb674a142ebfd8ca1c0bc722bc85b001a5a6905ba8226b1\",\n      \"S\": \"0x79852418faacd4407aee4a461a08602fcf6a3a3cb63b9ba69d70ffe2f5fe3cd\"\n    }\n  ],\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x7b0c\",\n  \"input\": \"0x68656c6c6f\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x5\",\n  \"senderTxHash\": \"0x5a4e42bac0b2bc8dda4ee82bfafc83e7f156f74d81d367a3db430abd40b2cd47\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xe8f5484b057b542c80f16c5bb8707e040619c3dc9ac5628d2797aa3d8a2fc0d0\",\n      \"S\": \"0x5d598f2f10283ded6f6e6a216f4278b27fdf4d431272fa090064ac0fd3fc8102\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0x66fe4d1abdf15a250f9391646e0242c8e4c3310250ca316d8fd00856aac16172\",\n  \"transactionIndex\": \"0x5\",\n  \"type\": \"TxTypeFeeDelegatedValueTransferMemo\",\n  \"typeInt\": 17,\n  \"value\": \"0x989680\"\n}\n```\n\n## TxTypeFeeDelegatedSmartContractDeploy <a id=\"txtypefeedelegatedsmartcontractdeploy\"></a>\n\nTxTypeFeeDelegatedSmartContractDeploy deploys a smart contract with fee delegation. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. A smart contract is deployed with the code in `input`. The deployed address will be returned via `contractAddress` in the receipt.\n4. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedSmartContractDeploy. This must be 0x29. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. Currently, this value must be nil. Specifying the address will be supported in the future. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| humanReadable | bool \\(Go\\) | This must be false since human-readable address is not supported yet. If true, the transaction will be rejected. |\n| codeFormat | uint8 \\(Go\\) | The code format of smart contract code. The supported value for now is EVM\\(0x00\\) only. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input,humanReadable, codeFormat, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf90240b9023af90237298204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180018080\nSigHash 0xfd5e0726c763d117d07e5e688889ab7e4d0d1164d1bbca26a9d4ee629cbd875b\nSignature f845f84325a04ea37b8ecfed93795a9f99b1e4d554df6fb05a361965a7655abd4e4c4422a9e5a00b05e3fffe5a3c0892eaff31466f6c47b7edad80703d395d65bbfc1a2c6a2570\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf90255b9023af90237298204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xb7ea4d9d8c4d20ac6fd6cfffcaf89ae7d217d7450820b3b40d9ea29a0f01a1b2\nSignatureFeePayer f845f84326a0c6738376304dfb32c77649bddd4ade925b947876cfe6b1fd2c06a2e4394504cca023817ba66a6b7c92fcf23f2d5506ea2a673aae5f1a1e4d742367971ae58a1576\nTxHashRLP 0x29f902d98204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a04ea37b8ecfed93795a9f99b1e4d554df6fb05a361965a7655abd4e4c4422a9e5a00b05e3fffe5a3c0892eaff31466f6c47b7edad80703d395d65bbfc1a2c6a2570945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0c6738376304dfb32c77649bddd4ade925b947876cfe6b1fd2c06a2e4394504cca023817ba66a6b7c92fcf23f2d5506ea2a673aae5f1a1e4d742367971ae58a1576\nTxHash a457cc54b5cfd35eb61baa5ad61398fdcecab4c83693815addf00ca7166cb87e\nSenderTxHashRLP 0x29f9027d8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a04ea37b8ecfed93795a9f99b1e4d554df6fb05a361965a7655abd4e4c4422a9e5a00b05e3fffe5a3c0892eaff31466f6c47b7edad80703d395d65bbfc1a2c6a2570\nSenderTxHash f3bca26fc8b50bfbcc1e94bc792ee6489cff14056e7e9aa2b074abb385f2139f\n\n    TX(a457cc54b5cfd35eb61baa5ad61398fdcecab4c83693815addf00ca7166cb87e)\n    Type:          TxTypeFeeDelegatedSmartContractDeploy\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Datan    HumanReadable: true\n    CodeFormat:    CodeFormatEVM\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0x4ea37b8ecfed93795a9f99b1e4d554df6fb05a361965a7655abd4e4c4422a9e5\",\"S\":\"0xb05e3fffe5a3c0892eaff31466f6c47b7edad80703d395d65bbfc1a2c6a2570\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0xc6738376304dfb32c77649bddd4ade925b947876cfe6b1fd2c06a2e4394504cc\",\"S\":\"0x23817ba66a6b7c92fcf23f2d5506ea2a673aae5f1a1e4d742367971ae58a1576\"}]\n    Hex:           29f902d98204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f00290180f845f84325a04ea37b8ecfed93795a9f99b1e4d554df6fb05a361965a7655abd4e4c4422a9e5a00b05e3fffe5a3c0892eaff31466f6c47b7edad80703d395d65bbfc1a2c6a2570945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0c6738376304dfb32c77649bddd4ade925b947876cfe6b1fd2c06a2e4394504cca023817ba66a6b7c92fcf23f2d5506ea2a673aae5f1a1e4d742367971ae58a1576\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"codeFormat\": \"0x0\",\n  \"contractAddress\": \"0x636f6e7472616374322e6b6c6179746e00000000\",\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x614fd887f4702627156132c9d56584207d1eaff529ee2967431eeaba924678f9\",\n      \"S\": \"0x6b883a4467ca95a0ee75567062cb6d35629e9a22faeb8a711896488ce2cc4ed9\"\n    }\n  ],\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0xee6e5b4d\",\n  \"humanReadable\": true,\n  \"input\": \"0x608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xb\",\n  \"senderTxHash\": \"0xf8f83c7a4a334430f403b20d84db492fac43ebabbd9676d731e11460d01a2160\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xf3c521fea307b39bfa914b4835112bad18f89a627d639ddabe70c20af99d29a5\",\n      \"S\": \"0x5179048cf993049b380f8cf7017c6e83b23da7883d2728208fe6161808594f44\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e7472616374322e6b6c6179746e00000000\",\n  \"transactionHash\": \"0x39b8a31f0c02a951615e3497d68a6534b8c8cc565e514ceafec53ee7ff50b8d9\",\n  \"transactionIndex\": \"0x4\",\n  \"type\": \"TxTypeFeeDelegatedSmartContractDeploy\",\n  \"typeInt\": 41,\n  \"value\": \"0x0\"\n}\n```\n\n## TxTypeFeeDelegatedSmartContractExecution <a id=\"txtypefeedelegatedsmartcontractexecution\"></a>\n\nTxTypeFeeDelegatedSmartContractExecution executes a smart contract with the given data in `input`. Fee will be paid by the given fee payer. TxTypeFeeDelegatedSmartContractExecution is accepted only if `to` is a smart contract account. To transfer KAIA to an externally owned account, use [TxTypeFeeDelegatedValueTransfer](#txtypefeedelegatedvaluetransfer) instead. The following changes will be made by this transaction type.\n\n1. If `to` is a smart contract account, the code is executed based on `input`. Otherwise, this transaction will be rejected.\n2. The fee payer's balance decreases by the amount of the transaction fee.\n3. The sender's nonce increases by one.\n4. If `value` was provided, `value` KAIA is transferred from the sender to the `to` smart contract. The contract should have a payable fallback function to receive KAIA.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedSmartContractExecution. This must be 0x31. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The address of the smart contract account to be executed. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf860b85bf859318204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2018080\nSigHash 0xa5dd93af9f96fa316f0ddd84f10acb2e6eb41baaec3b42f9068c38aa1618f7e1\nSignature f845f84325a0253aea7d2c37160da45e84afbb45f6b3341cf1e8fc2df4ecc78f14adb512dc4fa022465b74015c2a8f8501186bb5e200e6ce44be52e9374615a7e7e21c41bc27b5\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf875b85bf859318204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xf547d9d0041912e0daa2db2b65170a9e833877cd8482f405a11b03429fcbd554\nSignatureFeePayer f845f84326a0e7c51db7b922c6fa2a941c9687884c593b1b13076bdf0c473538d826bf7b9d1aa05b0de2aabb84b66db8bf52d62f3d3b71b592e3748455630f1504c20073624d80\nTxHashRLP 0x31f8fb8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84325a0253aea7d2c37160da45e84afbb45f6b3341cf1e8fc2df4ecc78f14adb512dc4fa022465b74015c2a8f8501186bb5e200e6ce44be52e9374615a7e7e21c41bc27b5945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0e7c51db7b922c6fa2a941c9687884c593b1b13076bdf0c473538d826bf7b9d1aa05b0de2aabb84b66db8bf52d62f3d3b71b592e3748455630f1504c20073624d80\nTxHash ef46f28c54b3d90a183e26f406ca1d5cc2b6e9fbb6cfa7c85a10330ffadf54b0\nSenderTxHashRLP 0x31f89f8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84325a0253aea7d2c37160da45e84afbb45f6b3341cf1e8fc2df4ecc78f14adb512dc4fa022465b74015c2a8f8501186bb5e200e6ce44be52e9374615a7e7e21c41bc27b5\nSenderTxHash 3cd3380f4206943422d5d5b218dd66d03d60d19a109f9929ea12b52a230257cb\n\n    TX(ef46f28c54b3d90a183e26f406ca1d5cc2b6e9fbb6cfa7c85a10330ffadf54b0)\n    Type:          TxTypeFeeDelegatedSmartContractExecution\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Data:          363335333538366230303030303030303030303030303030303030303030303062633539353166303535613835663431613362363266643666363861623764653736643239396232\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0x253aea7d2c37160da45e84afbb45f6b3341cf1e8fc2df4ecc78f14adb512dc4f\",\"S\":\"0x22465b74015c2a8f8501186bb5e200e6ce44be52e9374615a7e7e21c41bc27b5\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0xe7c51db7b922c6fa2a941c9687884c593b1b13076bdf0c473538d826bf7b9d1a\",\"S\":\"0x5b0de2aabb84b66db8bf52d62f3d3b71b592e3748455630f1504c20073624d80\"}]\n    Hex:           31f8fb8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b2f845f84325a0253aea7d2c37160da45e84afbb45f6b3341cf1e8fc2df4ecc78f14adb512dc4fa022465b74015c2a8f8501186bb5e200e6ce44be52e9374615a7e7e21c41bc27b5945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0e7c51db7b922c6fa2a941c9687884c593b1b13076bdf0c473538d826bf7b9d1aa05b0de2aabb84b66db8bf52d62f3d3b71b592e3748455630f1504c20073624d80\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x1c7de2c83542b623ba47722f310c0e5893486eef4eed70b634d456262fb430a7\",\n      \"S\": \"0x177929c52669c4b9433565a76e53723b702bae8142debe1981062f59f25062ab\"\n    }\n  ],\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0xb0bc\",\n  \"input\": \"0x6353586b0000000000000000000000000fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xe\",\n  \"senderTxHash\": \"0xffd354e4e271ff94a7459c2f1bc0df20dc112a83f5625ff7e31d196444f72710\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xefc6fec3dae47a08941712f637c95dbc46ef2afd3d16e68da602a878c0bba047\",\n      \"S\": \"0x938a5374edcea0503df8e7af906a7642f7e935eab7c489b7ca8b976a8e5ab7e\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e74726163742e6b6c6179746e0000000000\",\n  \"transactionHash\": \"0x658a118112ffb0c06adecd59b0f11b58cf7d8afd7ec5e5d323cfca021c3dcb37\",\n  \"transactionIndex\": \"0x7\",\n  \"type\": \"TxTypeFeeDelegatedSmartContractExecution\",\n  \"typeInt\": 49,\n  \"value\": \"0xa\"\n}\n```\n\n## TxTypeFeeDelegatedAccountUpdate <a id=\"txtypefeedelegatedaccountupdate\"></a>\n\nTxTypeFeeDelegatedAccountUpdate updates the key of the given account. The transaction fee is paid by the fee payer. The following changes will take place by this transaction type.\n\n1. The fee payer's balance decreases by the amount of the transaction fee.\n2. The sender's nonce increases by one.\n3. The account's key is updated with `key`.\n4. Once this type of transaction is executed, transactions sent from the account afterward will be validated with the new `key`.\n5. The transaction fee is paid by the fee payer.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeAccountUpdate. This must be 0x21. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| key | AccountKey \\(Go\\) | [AccountKey](../../learn/accounts#account-key) to be updated to the account. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), chainid, 0, 0])`\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf849b844f842218204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d018080\nSigHash 0x78437953e6beb985ea3ccbee8d6a648a09d11249389477a32c7094fc7b8765ef\nSignature f845f84326a0ab69d9adca15d9763c4ce6f98b35256717c6e932007658f19c5a255de9e70ddaa026aa676a3a1a6e96aff4a3df2335788d614d54fb4db1c3c48551ce1fa7ac5e52\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf85eb844f842218204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x1026d3ac74f56b52453d656b084d06798479b8bcfda1868d8beaa23e36f3aeb3\nSignatureFeePayer f845f84326a0f295cd69b4144d9dbc906ba144933d2cc535d9d559f7a92b4672cc5485bf3a60a0784b8060234ffd64739b5fc2f2503939340ab4248feaa6efcf62cb874345fe40\nTxHashRLP 0x21f8e48204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84326a0ab69d9adca15d9763c4ce6f98b35256717c6e932007658f19c5a255de9e70ddaa026aa676a3a1a6e96aff4a3df2335788d614d54fb4db1c3c48551ce1fa7ac5e52945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0f295cd69b4144d9dbc906ba144933d2cc535d9d559f7a92b4672cc5485bf3a60a0784b8060234ffd64739b5fc2f2503939340ab4248feaa6efcf62cb874345fe40\nTxHash 756ff5d3912a4089659614d42a218eee59e602a5992bddca383c2d295c6637bb\nSenderTxHashRLP 0x21f8888204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84326a0ab69d9adca15d9763c4ce6f98b35256717c6e932007658f19c5a255de9e70ddaa026aa676a3a1a6e96aff4a3df2335788d614d54fb4db1c3c48551ce1fa7ac5e52\nSenderTxHash f56937017bd3b75c637ba5b4ce90df20c166006a2a529b42e808bc806159b98f\n\n    TX(756ff5d3912a4089659614d42a218eee59e602a5992bddca383c2d295c6637bb)\n    Type:          TxTypeFeeDelegatedAccountUpdate\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Key:           AccountKeyPublic: S256Pubkey:{\"x\":\"0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\",\"y\":\"0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\"}\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0xab69d9adca15d9763c4ce6f98b35256717c6e932007658f19c5a255de9e70dda\",\"S\":\"0x26aa676a3a1a6e96aff4a3df2335788d614d54fb4db1c3c48551ce1fa7ac5e52\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0xf295cd69b4144d9dbc906ba144933d2cc535d9d559f7a92b4672cc5485bf3a60\",\"S\":\"0x784b8060234ffd64739b5fc2f2503939340ab4248feaa6efcf62cb874345fe40\"}]\n    Hex:           21f8e48204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33df845f84326a0ab69d9adca15d9763c4ce6f98b35256717c6e932007658f19c5a255de9e70ddaa026aa676a3a1a6e96aff4a3df2335788d614d54fb4db1c3c48551ce1fa7ac5e52945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0f295cd69b4144d9dbc906ba144933d2cc535d9d559f7a92b4672cc5485bf3a60a0784b8060234ffd64739b5fc2f2503939340ab4248feaa6efcf62cb874345fe40\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x3b019642e5ae37f3ecbf85e6fc1ee77e51d1618299367bcedd816d0da6afb1e0\",\n      \"S\": \"0x5c12c87811a74183f8b56b707fa90a916b1c641652c93e52300f5cee36141d73\"\n    }\n  ],\n  \"from\": \"0x636f6c696e322e6b6c6179746e00000000000000\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0xc738\",\n  \"key\": \"0x02a1034ef27ba4b7d1ae09b166744c5b7ee4a7a0cc5c76b2e5d74523a0a4fb56db3191\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x0\",\n  \"senderTxHash\": \"0xf4e7ef082451d4a3c8ad7c4348fc99c965a9c130bfc98d7971f3103e3dcfda3c\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xd4cb16abcdf92969dc45efacaa5827ad55738fbda08a3dbaf0f0553643084a6\",\n      \"S\": \"0x23f8055933b416cf15568a017e0a11e0a5c0a8f65477f6ec71de0bf837f4a681\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0xeb0c14d903db38deee116ac8a0d620e6ca6aa79e4f91393abbddfa30810b9d43\",\n  \"transactionIndex\": \"0x2\",\n  \"type\": \"TxTypeFeeDelegatedAccountUpdate\",\n  \"typeInt\": 33\n},\n```\n\n## TxTypeFeeDelegatedCancel <a id=\"txtypefeedelegatedcancel\"></a>\n\nTxTypeFeeDelegatedCancel cancels the execution of the transaction with the same nonce in the transaction pool. For more details, see [TxTypeCancel](./basic#txtypecancel).\n\nThe following changes will apply by this transaction type. 1. The fee payer's balance decreases by the amount of the transaction fee. 2. The sender's nonce increases by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeCancel. This must be 0x39. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xe39fde398204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b018080\nSigHash 0xd36c4277f4aa1d483a5fc4d656aeea50416c28adddb27a234d320290bd2a343c\nSignature f845f84326a08409f5441d4725f90905ad87f03793857d124de7a43169bc67320cd2f020efa9a060af63e87bdc565d7f7de906916b2334336ee7b24d9a71c9521a67df02e7ec92\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf8389fde398204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x15859ecc06acbd2dd5820c5968a85590826d1f6affb938e89559558ac4f86a24\nSignatureFeePayer f845f84326a0044d5b25e8c649a1fdaa409dc3817be390ad90a17c25bc17c89b6d5d248495e0a073938e690d27b5267c73108352cf12d01de7fd0077b388e94721aa1fa32f85ec\nTxHashRLP 0x39f8c08204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84326a08409f5441d4725f90905ad87f03793857d124de7a43169bc67320cd2f020efa9a060af63e87bdc565d7f7de906916b2334336ee7b24d9a71c9521a67df02e7ec92945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0044d5b25e8c649a1fdaa409dc3817be390ad90a17c25bc17c89b6d5d248495e0a073938e690d27b5267c73108352cf12d01de7fd0077b388e94721aa1fa32f85ec\nTxHash 96b39d3ab849127d31a5f7b5c882ca9ba408cd9d875052640d51a64f8c4acbb2\nSenderTxHashRLP 0x39f8648204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84326a08409f5441d4725f90905ad87f03793857d124de7a43169bc67320cd2f020efa9a060af63e87bdc565d7f7de906916b2334336ee7b24d9a71c9521a67df02e7ec92\nSenderTxHash cc6c2673398903b3d906a3023b41636fc08bd1bddd5aa1602116091638f48447\n\n    TX(96b39d3ab849127d31a5f7b5c882ca9ba408cd9d875052640d51a64f8c4acbb2)\n    Type:          TxTypeFeeDelegatedCancel\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0x8409f5441d4725f90905ad87f03793857d124de7a43169bc67320cd2f020efa9\",\"S\":\"0x60af63e87bdc565d7f7de906916b2334336ee7b24d9a71c9521a67df02e7ec92\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0x44d5b25e8c649a1fdaa409dc3817be390ad90a17c25bc17c89b6d5d248495e0\",\"S\":\"0x73938e690d27b5267c73108352cf12d01de7fd0077b388e94721aa1fa32f85ec\"}]\n    Hex:           39f8c08204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0bf845f84326a08409f5441d4725f90905ad87f03793857d124de7a43169bc67320cd2f020efa9a060af63e87bdc565d7f7de906916b2334336ee7b24d9a71c9521a67df02e7ec92945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0044d5b25e8c649a1fdaa409dc3817be390ad90a17c25bc17c89b6d5d248495e0a073938e690d27b5267c73108352cf12d01de7fd0077b388e94721aa1fa32f85ec\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x26a7c88e1fc77400f2a4c7911966a5e51b0873e3f26daf9d6519b93e3f3db6a3\",\n      \"S\": \"0x560e5fa8d53ebf899eb48353bf14794c76784240a6a212f5ddbe7f1684088f3f\"\n    }\n  ],\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x7918\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x11\",\n  \"senderTxHash\": \"0x2fea0ff37b8b936d4c06f29b98c4bd200827423fb445f931eb64725aefcda053\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xcfdb5b3ff6c87a8f18ae606b371d1e569c56d35a737831b89052c5a8ef19d049\",\n      \"S\": \"0x1ee63bd5a01c45d0c6f1b36a29e1c01b56baa719f008c556bc9054ac5a64bd8d\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0xf475e714b30aef0b79d46c9482289f3fbe51f1e44bcbc99a90ac8e25672bc969\",\n  \"transactionIndex\": \"0xa\",\n  \"type\": \"TxTypeFeeDelegatedCancel\",\n  \"typeInt\": 57\n}\n```\n\n## TxTypeFeeDelegatedChainDataAnchoring <a id=\"txtypefeedelegatedchaindataanchoring\"></a>\n\nTxTypeFeeDelegatedChainDataAnchoring is a fee-delegated transaction that anchors service chain data to the Kaia mainchain. Service chains periodically send this type of transaction to the Kaia mainchain to ensure its security and credibility of data. For more details about the data anchoring, see [Anchoring](../../nodes/service-chain/configure/anchoring). As it is a fee-delegated transaction as well, its transaction fee is charged to the fee payer. Be mindful that it is not allowed to send this transaction via RPC. Currently, this transaction is executed through private p2p channels for security reasons. This transaction does not change the state of the Kaia blockchain except the sender's nonce being increased by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedChainDataAnchoring. This must be 0x49. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data of the service chain. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, anchoredData]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, anchoredData]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x01\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf8dbb8d6f8d449118505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006018080\nSigHash 0x92e385b4a162170ee87b2b2e598f686b1d16f385d98ad626147305624abec0b3\nSignature 0xf845f84326a0afe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142a0317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb3\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf8f0b8d6f8d449118505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000040580069433f524631e573329a550296f595c820d6c65213f018080\nSigHashFeePayer 0x4d58fdf276fde1e221b6bab8c6621ae1639b00a7a70d2bd0a114001692a3a7d1\nSignatureFeePayer 0xf845f84325a0309e46db21a1bf7bfdae24d9192aca69516d6a341ecce8971fc69cff481cee76a04b939bf7384c4f919880307323a5e36d4d6e029bae1887a43332710cdd48f174\nTxHashRLP 0x49f90176118505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006f845f84326a0afe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142a0317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb39433f524631e573329a550296f595c820d6c65213ff845f84325a0309e46db21a1bf7bfdae24d9192aca69516d6a341ecce8971fc69cff481cee76a04b939bf7384c4f919880307323a5e36d4d6e029bae1887a43332710cdd48f174\nTxHash 0xecf1ec12937065617f9b3cd07570452bfdb75dc36404c4f37f78995c6dc462af\nSenderTxHashRLP 0x49f9011a118505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006f845f84326a0afe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142a0317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb3\nSenderTxHash 0x4f5c00ea8f6346baa7d4400dfefd72efa5ec219561ebcebed7be8a2b79d52bcd\n\n  TX(ecf1ec12937065617f9b3cd07570452bfdb75dc36404c4f37f78995c6dc462af)\n  Type:          TxTypeFeeDelegatedChainDataAnchoring\n  From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n  Nonce:         17\n  GasPrice:      0x5d21dba00\n  GasLimit:      0x174876e800\n  AnchoredData:  f8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006\n  Signature:     [{\"V\":\"0x26\",\"R\":\"0xafe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142\",\"S\":\"0x317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb3\"}]\n  FeePayer:      0x33f524631e573329a550296F595c820D6c65213f\n  FeePayerSig:   [{\"V\":\"0x25\",\"R\":\"0x309e46db21a1bf7bfdae24d9192aca69516d6a341ecce8971fc69cff481cee76\",\"S\":\"0x4b939bf7384c4f919880307323a5e36d4d6e029bae1887a43332710cdd48f174\"}]\n  Hex:           49f90176118505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006f845f84326a0afe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142a0317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb39433f524631e573329a550296f595c820d6c65213ff845f84325a0309e46db21a1bf7bfdae24d9192aca69516d6a341ecce8971fc69cff481cee76a04b939bf7384c4f919880307323a5e36d4d6e029bae1887a43332710cdd48f174\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n    \"blockHash\": \"0x170a32e16b6fdced144d5104f5aecf753878bd9f1a7d87ddccc2e6d2ba27354c\",\n    \"blockNumber\": \"0x2\",\n    \"contractAddress\": null,\n    \"feePayer\": \"0x33f524631e573329a550296f595c820d6c65213f\",\n    \"feePayerSignatures\": [\n        {\n            \"V\": \"0x25\",\n            \"R\": \"0x309e46db21a1bf7bfdae24d9192aca69516d6a341ecce8971fc69cff481cee76\",\n            \"S\": \"0x4b939bf7384c4f919880307323a5e36d4d6e029bae1887a43332710cdd48f174\"\n        }\n    ],\n    \"from\": \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n    \"gas\": \"0x174876e800\",\n    \"gasPrice\": \"0x5d21dba00\",\n    \"gasUsed\": \"0xbd74\",\n    \"input\": \"0xf8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006\",\n    \"logs\": [],\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"nonce\": \"0x11\",\n    \"senderTxHash\": \"0x4f5c00ea8f6346baa7d4400dfefd72efa5ec219561ebcebed7be8a2b79d52bcd\",\n    \"signatures\": [\n        {\n            \"V\": \"0x26\",\n            \"R\": \"0xafe41edc9cce1185ab9065ca7dbfb89ab5c7bde3602a659aa258324124644142\",\n            \"S\": \"0x317848698248ba7cc057b8f0dd19a27b52ef904d29cb72823100f1ed18ba2bb3\"\n        }\n    ],\n    \"status\": \"0x1\",\n    \"transactionHash\": \"0xecf1ec12937065617f9b3cd07570452bfdb75dc36404c4f37f78995c6dc462af\",\n    \"transactionIndex\": \"0xa\",\n    \"type\": \"TxTypeFeeDelegatedChainDataAnchoring\",\n    \"typeInt\": 73\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/build/transactions/partial-fee-delegation. # Partial Fee Delegation\n\n## TxTypeFeeDelegatedValueTransferWithRatio <a id=\"txtypefeedelegatedvaluetransferwithratio\"></a>\n\nTxTypeFeeDelegatedValueTransferWithRatio is used when a user wants to send KAIA. As Kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeFeeDelegatedValueTransferWithRatio is limited to send KAIA to an externally owned account. Therefore, TxTypeFeeDelegatedValueTransferWithRatio is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeFeeDelegatedSmartContractExecutionWithRatio](#txtypefeedelegatedsmartcontractexecutionwithratio) instead. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the given ratio of the transaction fee.\n2. The sender's balance decreases by the remaining transaction fee. e.g., If the `feeRatio` is 30, 30% of the fee will be paid by the fee payer, and the remaining 70% of the fee will be paid by the sender.\n3. The sender's nonce increases by one.\n4. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedValueTransferWithRatio. This must be 0x0a. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf83ab6f50a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1e018080\nSigHash 0x0f7d520cd00034299b36004c21b571263dbb9a77edbd5920c4136f7f74050d9d\nSignature f845f84325a0dde32b8241f039a82b124fe94d3e556eb08f0d6f26d07dcc0f3fca621f1090caa01c8c336b358ab6d3a2bbf25de2adab4d01b754e2fb3b9b710069177d54c1e956\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf84fb6f50a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1e945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x38123c30a5f83db853e9ae4e8dd8d4f6aa6840415acffb8dbf18b2050463dec4\nSignatureFeePayer f845f84326a0091ecf53f91bb97bb694f2f2443f3563ac2b646d651497774524394aae396360a044228b88f275aa1ec1bab43681d21dc7e3a676786ed1906f6841d0a1a188f88a\nTxHashRLP 0x0af8d78204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84325a0dde32b8241f039a82b124fe94d3e556eb08f0d6f26d07dcc0f3fca621f1090caa01c8c336b358ab6d3a2bbf25de2adab4d01b754e2fb3b9b710069177d54c1e956945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0091ecf53f91bb97bb694f2f2443f3563ac2b646d651497774524394aae396360a044228b88f275aa1ec1bab43681d21dc7e3a676786ed1906f6841d0a1a188f88a\nTxHash 83a89f4debd8e9d6374b987e25132b3a4030c9cf9ace2fc6e7d1086fcea2ce40\nSenderTxHashRLP 0x0af87b8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84325a0dde32b8241f039a82b124fe94d3e556eb08f0d6f26d07dcc0f3fca621f1090caa01c8c336b358ab6d3a2bbf25de2adab4d01b754e2fb3b9b710069177d54c1e956\nSenderTxHash 4711ed4023e821425968342c1d50063b6bc3176b1792b7075cfeee3656d450f6\n\n    TX(83a89f4debd8e9d6374b987e25132b3a4030c9cf9ace2fc6e7d1086fcea2ce40)\n    Type:          TxTypeFeeDelegatedValueTransferWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x25\",\"R\":\"0xdde32b8241f039a82b124fe94d3e556eb08f0d6f26d07dcc0f3fca621f1090ca\",\"S\":\"0x1c8c336b358ab6d3a2bbf25de2adab4d01b754e2fb3b9b710069177d54c1e956\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0x91ecf53f91bb97bb694f2f2443f3563ac2b646d651497774524394aae396360\",\"S\":\"0x44228b88f275aa1ec1bab43681d21dc7e3a676786ed1906f6841d0a1a188f88a\"}]\n    Hex:           0af8d78204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84325a0dde32b8241f039a82b124fe94d3e556eb08f0d6f26d07dcc0f3fca621f1090caa01c8c336b358ab6d3a2bbf25de2adab4d01b754e2fb3b9b710069177d54c1e956945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0091ecf53f91bb97bb694f2f2443f3563ac2b646d651497774524394aae396360a044228b88f275aa1ec1bab43681d21dc7e3a676786ed1906f6841d0a1a188f88a\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x7ad6ed1f9955be00db8fb5452125f0e9a3c0856abb5b4cc4aed91ffc134321da\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xb8583f638efefb297922aa8b8a30cf451a30e266126d52da03ba9ead0fbb1ccd\",\n      \"S\": \"0x4bc5ca3756f88d857d115b128b00babe5b3c0b089f087a0b30a9ced269e00603\"\n    }\n  ],\n  \"feeRatio\": \"0x14\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x8ca0\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x3\",\n  \"senderTxHash\": \"0xac372c68d2937383d4344a2d187e70b207c76160eb407b68e08c944b919328de\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x1a8d5bf583843ceba87943569a34a8a6caa18a9ab5e4cf6914d8048e607787bc\",\n      \"S\": \"0x27458275c84adcb8144b4596946111f1a539643941de74f587fa69a7df98ed1b\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0x670ff613022278cc2551a7e4669d8911f1658ffaa4dcc3695b14f39194a8a38c\",\n  \"transactionIndex\": \"0x3\",\n  \"type\": \"TxTypeFeeDelegatedValueTransferWithRatio\",\n  \"typeInt\": 10,\n  \"value\": \"0x989680\"\n}\n```\n\n## TxTypeFeeDelegatedValueTransferMemoWithRatio <a id=\"txtypefeedelegatedvaluetransfermemowithratio\"></a>\n\nTxTypeFeeDelegatedValueTransferMemoWithRatio is used when a user wants to send KAIA with a specific message. TxTypeFeeDelegatedValueTransferMemoWithRatio is accepted only if `to` is an externally owned account. To transfer KAIA to a smart contract account, use [TxTypeFeeDelegatedSmartContractExecutionWithRatio](#txtypefeedelegatedsmartcontractexecutionwithratio) instead. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the fee ratio of the amount of the transaction fee.\n2. The sender's balance decreases by the remaining transaction fee. e.g., If the `feeRatio` is 30, 30% of the fee will be paid by the fee payer, and the remaining 70% of the fee will be paid by the sender.k\n3. The sender's nonce increases by one.\n4. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Description | Type |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedValueTransferMemoWithRatio. This must be 0x12. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The account address that will receive the transferred value. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction. The message should be passed to this attribute. |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf842b83df83b128204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f1e018080\nSigHash 0x50eef45abe0743dce17e40db185d1d85607245a545f7517a52b90f3673aff689\nSignature f845f84326a0769f0afdc310289f9b24decb5bb765c8d7a87a6a4ae28edffb8b7085bbd9bc78a06a7b970eea026e60ac29bb52aee10661a4222e6bdcdfb3839a80586e584586b4\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf857b83df83b128204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f1e945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x09583a871c38a4860e336bfa5f16003feec75e710cfd9186c37892cee7d9775b\nSignatureFeePayer f845f84325a0c1c54bdc72ce7c08821329bf50542535fac74f4bba5de5b7881118a461d52834a03a3a64878d784f9af91c2e3ab9c90f17144c47cfd9951e3588c75063c0649ecd\nTxHashRLP 0x12f8dd8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f1ef845f84326a0769f0afdc310289f9b24decb5bb765c8d7a87a6a4ae28edffb8b7085bbd9bc78a06a7b970eea026e60ac29bb52aee10661a4222e6bdcdfb3839a80586e584586b4945a0043070275d9f6054307ee7348bd660849d90ff845f84325a0c1c54bdc72ce7c08821329bf50542535fac74f4bba5de5b7881118a461d52834a03a3a64878d784f9af91c2e3ab9c90f17144c47cfd9951e3588c75063c0649ecd\nTxHash abcb0fd8ebb8f62ac899e5211b9ba47fe948a8efd815229cc4ed9cd781464f15\nSenderTxHashRLP 0x12f87b8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84326a0769f0afdc310289f9b24decb5bb765c8d7a87a6a4ae28edffb8b7085bbd9bc78a06a7b970eea026e60ac29bb52aee10661a4222e6bdcdfb3839a80586e584586b4\nSenderTxHash 2c4e8cd3c68a4aacae51c695e857cfc1a019037ca71d8cd1e8ca56ec4eaf55b1\n\n    TX(abcb0fd8ebb8f62ac899e5211b9ba47fe948a8efd815229cc4ed9cd781464f15)\n    Type:          TxTypeFeeDelegatedValueTransferMemoWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0x769f0afdc310289f9b24decb5bb765c8d7a87a6a4ae28edffb8b7085bbd9bc78\",\"S\":\"0x6a7b970eea026e60ac29bb52aee10661a4222e6bdcdfb3839a80586e584586b4\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    FeePayerSig:   [{\"V\":\"0x25\",\"R\":\"0xc1c54bdc72ce7c08821329bf50542535fac74f4bba5de5b7881118a461d52834\",\"S\":\"0x3a3a64878d784f9af91c2e3ab9c90f17144c47cfd9951e3588c75063c0649ecd\"}]\n    Data:          36383635366336633666\n    Hex:           12f8dd8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0b8568656c6c6f1ef845f84326a0769f0afdc310289f9b24decb5bb765c8d7a87a6a4ae28edffb8b7085bbd9bc78a06a7b970eea026e60ac29bb52aee10661a4222e6bdcdfb3839a80586e584586b4945a0043070275d9f6054307ee7348bd660849d90ff845f84325a0c1c54bdc72ce7c08821329bf50542535fac74f4bba5de5b7881118a461d52834a03a3a64878d784f9af91c2e3ab9c90f17144c47cfd9951e3588c75063c0649ecd\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x7ad6ed1f9955be00db8fb5452125f0e9a3c0856abb5b4cc4aed91ffc134321da\",\n  \"blockNumber\": \"0x1\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x1f71cc0dee26dce62a987d189650ee62a6751fcde1c7f7915abaf6c0137930da\",\n      \"S\": \"0x585115c7eecb3a88e3805a90be8cb6458f245029274a781afd2b867579ff73fa\"\n    }\n  ],\n  \"feeRatio\": \"0x1e\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0x8e94\",\n  \"input\": \"0x68656c6c6f\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x6\",\n  \"senderTxHash\": \"0xe68e9194c5448d17137f00aae392ade4d8a143c1ae4f3c5a2340a332bce009e4\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x60e5da74cc0f7d73b57dc4b2a5bb7dd05d40757b47febc079e3a43769878abc3\",\n      \"S\": \"0x68e16f2a7bce21e16cebbe22a3624aa5edd814dd74a70ab8aaf850cd7a4b757f\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x75c3098be5e4b63fbac05838daaee378dd48098d\",\n  \"transactionHash\": \"0xda18ebcf420af8a0a7acf6636711540f71b8bb65bc86e960e6a6bbb665a062f3\",\n  \"transactionIndex\": \"0x6\",\n  \"type\": \"TxTypeFeeDelegatedValueTransferMemoWithRatio\",\n  \"typeInt\": 18,\n  \"value\": \"0x989680\"\n}\n```\n\n## TxTypeFeeDelegatedSmartContractDeployWithRatio <a id=\"txtypefeedelegatedsmartcontractdeploywithratio\"></a>\n\nTxTypeFeeDelegatedSmartContractDeployWithRatio deploys a smart contract. The given ratio of the transaction fee is paid by the fee payer. The following changes will be made by this transaction type.\n\n1. The fee payer's balance decreases by the fee ratio of the amount of the transaction fee.\n2. The sender's balance decreases by the remaining transaction fee. e.g., If the `feeRatio` is 30, 30% of the fee will be paid by the fee payer, and the remaining 70% of the fee will be paid by the sender.\n3. The sender's nonce increases by one.\n4. A smart contract is deployed with the code in `input`. The deployed address will be returned via `contractAddress` in the receipt.\n5. `value` KAIA is transferred from the sender to the recipient.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedSmartContractDeployWithRatio. This must be 0x2a. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | \\*common.Address \\(Go\\) | The account address that will receive the transferred value. Currently, this value must be nil. Specifying the address will be supported in the future. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| humanReadable | bool \\(Go\\) | This must be false since human-readable address is not supported yet. If true, the transaction will be rejected. |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| codeFormat | uint8 \\(Go\\) | The code format of smart contract code. The supported value for now is EVM\\(0x00\\) only. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, humanReadable, feeRatio, codeFormat, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf90241b9023bf902382a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029011e80018080\nSigHash 0x000db9e2246975d7242e2fb45279ff42bc0269e544e3b1589ea78e760775cc2c\nSignature f845f84326a0cfe8dc29d31916b3f661a4774cb8d44d39ae700a9fb6ca04327f84bbe4de1486a01616e09ced403420cac1363d14e705b7a323518b1ce5124b16f06871c00ac424\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf90256b9023bf902382a8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029011e80945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xedd4031ccfb27867cbd856192cec0a538ab25f6bc632f3075bf7be8368983cea\nSignatureFeePayer f845f84325a0e29dae81defc027f059cd6a55ff74156b9c5bdb811460f09fc8d167c01aaaea1a04eba34d4d5ebbce60e4998f03b7a4658263bb21063ddf68ad3b088d670de47c8\nTxHashRLP 0x2af902da8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029011e80f845f84326a0cfe8dc29d31916b3f661a4774cb8d44d39ae700a9fb6ca04327f84bbe4de1486a01616e09ced403420cac1363d14e705b7a323518b1ce5124b16f06871c00ac424945a0043070275d9f6054307ee7348bd660849d90ff845f84325a0e29dae81defc027f059cd6a55ff74156b9c5bdb811460f09fc8d167c01aaaea1a04eba34d4d5ebbce60e4998f03b7a4658263bb21063ddf68ad3b088d670de47c8\nTxHash 54b6f267c2dd508ffdd9d41fd6d04847ad975cede8fcd4d5af58ca959c534946\nSenderTxHashRLP 0x2af9027e8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029011e80f845f84326a0cfe8dc29d31916b3f661a4774cb8d44d39ae700a9fb6ca04327f84bbe4de1486a01616e09ced403420cac1363d14e705b7a323518b1ce5124b16f06871c00ac424\nSenderTxHash 57dfef9c923cba182cca00fa65d45aaf619613d843d585d3c4026a3bd0797366\n\n    TX(54b6f267c2dd508ffdd9d41fd6d04847ad975cede8fcd4d5af58ca959c534946)\n    Type:          TxTypeFeeDelegatedSmartContractDeployWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Datan    HumanReadable: true\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0xcfe8dc29d31916b3f661a4774cb8d44d39ae700a9fb6ca04327f84bbe4de1486\",\"S\":\"0x1616e09ced403420cac1363d14e705b7a323518b1ce5124b16f06871c00ac424\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    CodeFormat:    CodeFormatEVM\n    FeePayerSig:   [{\"V\":\"0x25\",\"R\":\"0xe29dae81defc027f059cd6a55ff74156b9c5bdb811460f09fc8d167c01aaaea1\",\"S\":\"0x4eba34d4d5ebbce60e4998f03b7a4658263bb21063ddf68ad3b088d670de47c8\"}]\n    Hex:           2af902da8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0bb901fe608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029011e80f845f84326a0cfe8dc29d31916b3f661a4774cb8d44d39ae700a9fb6ca04327f84bbe4de1486a01616e09ced403420cac1363d14e705b7a323518b1ce5124b16f06871c00ac424945a0043070275d9f6054307ee7348bd660849d90ff845f84325a0e29dae81defc027f059cd6a55ff74156b9c5bdb811460f09fc8d167c01aaaea1a04eba34d4d5ebbce60e4998f03b7a4658263bb21063ddf68ad3b088d670de47c8\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"codeFormat\": \"0x0\",\n  \"contractAddress\": \"0x636f6e7472616374332e6b6c6179746e00000000\",\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x9dbd19852ce8d1bc36389c73aa45733ccd2af0186d78952ca2b7bf3828227c02\",\n      \"S\": \"0x184f60af32203d5abd0e1ac8820887cc96189d4efc1ccddb5fb966e29a07c9cf\"\n    }\n  ],\n  \"feeRatio\": \"0x21\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0xee6e6ed5\",\n  \"humanReadable\": true,\n  \"input\": \"0x608060405234801561001057600080fd5b506101de806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631a39d8ef81146100805780636353586b146100a757806370a08231146100ca578063fd6b7ef8146100f8575b3360009081526001602052604081208054349081019091558154019055005b34801561008c57600080fd5b5061009561010d565b60408051918252519081900360200190f35b6100c873ffffffffffffffffffffffffffffffffffffffff60043516610113565b005b3480156100d657600080fd5b5061009573ffffffffffffffffffffffffffffffffffffffff60043516610147565b34801561010457600080fd5b506100c8610159565b60005481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604081208054349081019091558154019055565b60016020526000908152604090205481565b336000908152600160205260408120805490829055908111156101af57604051339082156108fc029083906000818181858888f193505050501561019c576101af565b3360009081526001602052604090208190555b505600a165627a7a72305820627ca46bb09478a015762806cc00c431230501118c7c26c30ac58c4e09e51c4f0029\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xc\",\n  \"senderTxHash\": \"0xe24e58467268601dc5131fb9719ebbb4bed16244af05c37d916a92c98a6a62a5\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xb9497df1dd5c37786570f26745112fb828fb7b6de851bc11562eab77a76462b1\",\n      \"S\": \"0x6231f2945f01004e68388ad1103cb00fd4f3f8b782667030d99779ecd47d7462\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e7472616374332e6b6c6179746e00000000\",\n  \"transactionHash\": \"0x32944e85f2255b7ebc1101b136938a758295d57dca1203b997e7ee7873dd9eec\",\n  \"transactionIndex\": \"0x5\",\n  \"type\": \"TxTypeFeeDelegatedSmartContractDeployWithRatio\",\n  \"typeInt\": 42,\n  \"value\": \"0x0\"\n}\n```\n\n## TxTypeFeeDelegatedSmartContractExecutionWithRatio <a id=\"txtypefeedelegatedsmartcontractexecutionwithratio\"></a>\n\nTxTypeFeeDelegatedSmartContractExecution executes a smart contract with the given data in `input`. TxTypeFeeDelegatedSmartContractExecutionWithRatio is accepted only if `to` is a smart contract account. To transfer KAIA to an externally owned account, use [TxTypeFeeDelegatedValueTransferWithRatio](#txtypefeedelegatedvaluetransferwithratio) instead. The following changes will be made by this transaction type.\n\n1. If `to` is a smart contract account, the code is executed based on `input`. Otherwise, this transaction will be rejected.\n2. The fee payer's balance decreases by the fee ratio of the amount of the transaction fee.\n3. The sender's balance decreases by the remaining transaction fee. e.g., If the `feeRatio` is 30, 30% of the fee will be paid by the fee payer, and the remaining 70% of the fee will be paid by the sender.\n4. The sender's nonce increases by one.\n5. If `value` was provided, `value` KAIA is transferred from the sender to the `to` smart contract. The contract should have a payable fallback function to receive KAIA.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedSmartContractExecutionWithRatio. This must be 0x32. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of gas the transaction is allowed to use. |\n| to | common.Address \\(Go\\) | The address of the smart contract account to be executed. |\n| value | \\*big.Int \\(Go\\) | The amount of KAIA in `kei` to be transferred. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| input | \\[\\]byte \\(Go\\) | Data attached to the transaction, used for transaction execution. |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, to, value, from, input, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\nTxHashRLP = type + encode([nonce, gasPrice, gas, to, value, from, input, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf861b85cf85a328204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b21e018080\nSigHash 0x1eeea77acecdd102a070ead80a00f388e039c11d813e6d4a63ec90bd0186b210\nSignature f845f84326a074ccfee18dc28932396b85617c53784ee366303bce39a2401d8eb602cf73766fa04c937a5ab9401d2cacb3f39ba8c29dbcd44588cc5c7d0b6b4113cfa7b7d9427b\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf876b85cf85a328204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b21e945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0x8a13f42530219cddb490108e38c48e7b58bc02a82f4d797d8f4d85eb16f6d6a5\nSignatureFeePayer f845f84325a04a4997524694d535976d7343c1e3a260f99ba53fcb5477e2b96216ec96ebb565a00f8cb31a35399d2b0fbbfa39f259c819a15370706c0449952c7cfc682d200d7c\nTxHashRLP 0x32f8fc8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b21ef845f84326a074ccfee18dc28932396b85617c53784ee366303bce39a2401d8eb602cf73766fa04c937a5ab9401d2cacb3f39ba8c29dbcd44588cc5c7d0b6b4113cfa7b7d9427b945a0043070275d9f6054307ee7348bd660849d90ff845f84325a04a4997524694d535976d7343c1e3a260f99ba53fcb5477e2b96216ec96ebb565a00f8cb31a35399d2b0fbbfa39f259c819a15370706c0449952c7cfc682d200d7c\nTxHash b204e530f2a7f010d65b6f0f7639d1e9fc8add73e3a0ff1551b11585c36d3bdb\nSenderTxHashRLP 0x32f8a08204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b21ef845f84326a074ccfee18dc28932396b85617c53784ee366303bce39a2401d8eb602cf73766fa04c937a5ab9401d2cacb3f39ba8c29dbcd44588cc5c7d0b6b4113cfa7b7d9427b\nSenderTxHash d5e22319cbf020d422d8ba3a07da9d99b9300826637af85b4e061805dcb2c1b0\n\n    TX(b204e530f2a7f010d65b6f0f7639d1e9fc8add73e3a0ff1551b11585c36d3bdb)\n    Type:          TxTypeFeeDelegatedSmartContractExecutionWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    To:            0x7b65B75d204aBed71587c9E519a89277766EE1d0\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Value:         0xa\n    Data:          363335333538366230303030303030303030303030303030303030303030303062633539353166303535613835663431613362363266643666363861623764653736643239396232\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0x74ccfee18dc28932396b85617c53784ee366303bce39a2401d8eb602cf73766f\",\"S\":\"0x4c937a5ab9401d2cacb3f39ba8c29dbcd44588cc5c7d0b6b4113cfa7b7d9427b\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    FeePayerSig:   [{\"V\":\"0x25\",\"R\":\"0x4a4997524694d535976d7343c1e3a260f99ba53fcb5477e2b96216ec96ebb565\",\"S\":\"0xf8cb31a35399d2b0fbbfa39f259c819a15370706c0449952c7cfc682d200d7c\"}]\n    Hex:           32f8fc8204d219830f4240947b65b75d204abed71587c9e519a89277766ee1d00a94a94f5374fce5edbc8e2a8697c15331677e6ebf0ba46353586b000000000000000000000000bc5951f055a85f41a3b62fd6f68ab7de76d299b21ef845f84326a074ccfee18dc28932396b85617c53784ee366303bce39a2401d8eb602cf73766fa04c937a5ab9401d2cacb3f39ba8c29dbcd44588cc5c7d0b6b4113cfa7b7d9427b945a0043070275d9f6054307ee7348bd660849d90ff845f84325a04a4997524694d535976d7343c1e3a260f99ba53fcb5477e2b96216ec96ebb565a00f8cb31a35399d2b0fbbfa39f259c819a15370706c0449952c7cfc682d200d7c\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xfd7cbb13af34814ae5072b7078e9d98ca1806859f452c7369c88fed70150ddee\",\n      \"S\": \"0x6edee3341b62a2ef1488636a9395bc236ebcdfebc76ee3c933d48a65ea89440e\"\n    }\n  ],\n  \"feeRatio\": \"0x42\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0xc444\",\n  \"input\": \"0x6353586b0000000000000000000000000fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xf\",\n  \"senderTxHash\": \"0x5545f40855ac02770f8738629d2e81bd3d04df3d90bb2b6e676a10e747c0d946\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0xaf1fdf0874424ed6d86b1408d24e2dff36046669cf9d99282bec4a50713adfa6\",\n      \"S\": \"0x20f25bf30b0d906cee734396914a5497076a7f50ce83954b09c9f46415af8f1\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"to\": \"0x636f6e74726163742e6b6c6179746e0000000000\",\n  \"transactionHash\": \"0xc4af8d6b3353ad3ad240a747d185a094c6e751373c3c08c669eb37c50f01b7b1\",\n  \"transactionIndex\": \"0x8\",\n  \"type\": \"TxTypeFeeDelegatedSmartContractExecutionWithRatio\",\n  \"typeInt\": 50,\n  \"value\": \"0xa\"\n}\n```\n\n## TxTypeFeeDelegatedAccountUpdateWithRatio <a id=\"txtypefeedelegatedaccountupdatewithratio\"></a>\n\nTxTypeFeeDelegatedAccountUpdateWithRatio updates the key of the given account. The given ratio of the transaction fee is paid by the fee payer. The following changes will take place by this transaction type.\n\n1. The fee payer's balance decreases by the fee ratio of the amount of the transaction fee.\n2. The sender's balance decreases by the remaining transaction fee. e.g., If the `feeRatio` is 30, 30% of the fee will be paid by the fee payer, and the remaining 70% of the fee will be paid by the sender.\n3. The sender's nonce increases by one.\n4. The account's key is updated with `key`.\n5. Transactions sent from the account afterward will be validated with this `key`, once this transaction is executed.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedAccountUpdateWithRatio. This must be 0x22. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| key | AccountKey \\(Go\\) | [AccountKey](../../learn/accounts#account-key) to be updated to the account. |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, rlpEncodedKey, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf84ab845f843228204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d1e018080\nSigHash 0x706ba7cd01e44008077a2abeafc3aacd64cbf210f49c64983f295a2e4cc03216\nSignature f845f84326a00e5929f96dec2b41343a9e6f0150eef08741fe7dcece88cc5936c49ed19051dca05a07b07017190e0baba32bdf6352f5a358a2798ed3c56e704a63819b87cf8e3f\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf85fb845f843228204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d1e945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xd2a51cefec667747890e6bd11fd068e8796b5446f77e152367eaa3cf98c96b30\nSignatureFeePayer f845f84326a0cf8d102de7c6b0a41d3f02aefb7e419522341734c98af233408298d0c424c04ba00286f89cab4668f728d7c269997116a49b80cec8776fc64e60588a9268571e35\nTxHashRLP 0x22f8e58204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d1ef845f84326a00e5929f96dec2b41343a9e6f0150eef08741fe7dcece88cc5936c49ed19051dca05a07b07017190e0baba32bdf6352f5a358a2798ed3c56e704a63819b87cf8e3f945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0cf8d102de7c6b0a41d3f02aefb7e419522341734c98af233408298d0c424c04ba00286f89cab4668f728d7c269997116a49b80cec8776fc64e60588a9268571e35\nTxHash 276f02c25ca4ced081dcfbb836755ced574993b047e648a583ed8d4144b3813f\nSenderTxHashRLP 0x22f8898204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d1ef845f84326a00e5929f96dec2b41343a9e6f0150eef08741fe7dcece88cc5936c49ed19051dca05a07b07017190e0baba32bdf6352f5a358a2798ed3c56e704a63819b87cf8e3f\nSenderTxHash e1d87538509549f4a1eb418f986bc53dc77b7eec3b2150f75cd787951d3e4b7f\n\n    TX(276f02c25ca4ced081dcfbb836755ced574993b047e648a583ed8d4144b3813f)\n    Type:          TxTypeFeeDelegatedAccountUpdateWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Key:           AccountKeyPublic: S256Pubkey:{\"x\":\"0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\",\"y\":\"0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\"}\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0xe5929f96dec2b41343a9e6f0150eef08741fe7dcece88cc5936c49ed19051dc\",\"S\":\"0x5a07b07017190e0baba32bdf6352f5a358a2798ed3c56e704a63819b87cf8e3f\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0xcf8d102de7c6b0a41d3f02aefb7e419522341734c98af233408298d0c424c04b\",\"S\":\"0x286f89cab4668f728d7c269997116a49b80cec8776fc64e60588a9268571e35\"}]\n    Hex:           22f8e58204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0ba302a1033a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d1ef845f84326a00e5929f96dec2b41343a9e6f0150eef08741fe7dcece88cc5936c49ed19051dca05a07b07017190e0baba32bdf6352f5a358a2798ed3c56e704a63819b87cf8e3f945a0043070275d9f6054307ee7348bd660849d90ff845f84326a0cf8d102de7c6b0a41d3f02aefb7e419522341734c98af233408298d0c424c04ba00286f89cab4668f728d7c269997116a49b80cec8776fc64e60588a9268571e35\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xfa3690925bae82ba662abe6d3af8993b7a7994d9f922cb1ae83c59c4a26a3b70\",\n      \"S\": \"0x2bd481ddf40cb813dde5f67db0e3a6ad9ea46758ef97580a709b301c21530246\"\n    }\n  ],\n  \"feeRatio\": \"0xb\",\n  \"from\": \"0x636f6c696e332e6b6c6179746e00000000000000\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x5d21dba00\",\n  \"gasUsed\": \"0xdac0\",\n  \"key\": \"0x02a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x0\",\n  \"senderTxHash\": \"0x74be8f01f10a497dbe9ed10659ac8c4579b37f8b5022b9f7eec6362262d44845\",\n  \"signatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0xd17d2ae2290b35c560289797c955fa5dc1cc25606cfd198584665917da6795ff\",\n      \"S\": \"0x7bc0450ff7319ccdbf50d38095501b895717cac775c6897d2381e7182aa25742\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0x90ccbf85ffd1f7e74620840fd9d270e030c6719e3c7b70bb8796c1cedf02fe88\",\n  \"transactionIndex\": \"0x1\",\n  \"type\": \"TxTypeFeeDelegatedAccountUpdateWithRatio\",\n  \"typeInt\": 34\n}\n```\n\n## TxTypeFeeDelegatedCancelWithRatio <a id=\"txtypefeedelegatedcancelwithratio\"></a>\n\nTxTypeFeeDelegatedCancelWithRatio cancels the execution of the transaction with the same nonce in the transaction pool. For more details, see [TxTypeCancel](./basic#txtypecancel).\n\nThe following changes will apply by this transaction type. 1. The fee payer's balance decreases by the given fee ratio of the amount of the transaction fee. 2. The sender's balance decreases by the remaining transaction fee. 3. The sender's nonce increases by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Description | Type |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedCancelWithRatio. This must be 0x3a. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <the sender's private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPricke, gas, from, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x1\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xe4a0df3a8204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b1e018080\nSigHash 0xeccd1585e8e105bc034a72190c3e9312b5407736686aa0d34b1ad75320871014\nSignature f845f84326a072efa47960bef40b536c72d7e03ceaf6ca5f6061eb8a3eda3545b1a78fe52ef5a062006ddaf874da205f08b3789e2d014ae37794890fc2e575bf75201563a24ba9\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf839a0df3a8204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b1e945a0043070275d9f6054307ee7348bd660849d90f018080\nSigHashFeePayer 0xf71b0b22d72ef59a063a865ee844e1ba0a103d707f06fb7013b3372ed169c705\nSignatureFeePayer f845f84326a06ba5ef20c3049323fc94defe14ca162e28b86aa64f7cf497ac8a5520e9615614a04a0a0fc61c10b416759af0ce4ce5c09ca1060141d56d958af77050c9564df6bf\nTxHashRLP 0x3af8c18204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84326a072efa47960bef40b536c72d7e03ceaf6ca5f6061eb8a3eda3545b1a78fe52ef5a062006ddaf874da205f08b3789e2d014ae37794890fc2e575bf75201563a24ba9945a0043070275d9f6054307ee7348bd660849d90ff845f84326a06ba5ef20c3049323fc94defe14ca162e28b86aa64f7cf497ac8a5520e9615614a04a0a0fc61c10b416759af0ce4ce5c09ca1060141d56d958af77050c9564df6bf\nTxHash 63604ebf68bfee51b2e3f54ddb2f19f9ea72d32b3fc70877324531ecda25817a\nSenderTxHashRLP 0x3af8658204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84326a072efa47960bef40b536c72d7e03ceaf6ca5f6061eb8a3eda3545b1a78fe52ef5a062006ddaf874da205f08b3789e2d014ae37794890fc2e575bf75201563a24ba9\nSenderTxHash c0818be4cffbacfe29be1134e0267e10fd1afb6571f4ccc95dcc67a788bab5e7\n\n    TX(63604ebf68bfee51b2e3f54ddb2f19f9ea72d32b3fc70877324531ecda25817a)\n    Type:          TxTypeFeeDelegatedCancelWithRatio\n    From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n    Nonce:         1234\n    GasPrice:      0x19\n    GasLimit:      0xf4240\n    Signature:     [{\"V\":\"0x26\",\"R\":\"0x72efa47960bef40b536c72d7e03ceaf6ca5f6061eb8a3eda3545b1a78fe52ef5\",\"S\":\"0x62006ddaf874da205f08b3789e2d014ae37794890fc2e575bf75201563a24ba9\"}]\n    FeePayer:      0x5A0043070275d9f6054307Ee7348bD660849D90f\n    FeeRatio:      30\n    FeePayerSig:   [{\"V\":\"0x26\",\"R\":\"0x6ba5ef20c3049323fc94defe14ca162e28b86aa64f7cf497ac8a5520e9615614\",\"S\":\"0x4a0a0fc61c10b416759af0ce4ce5c09ca1060141d56d958af77050c9564df6bf\"}]\n    Hex:           3af8c18204d219830f424094a94f5374fce5edbc8e2a8697c15331677e6ebf0b1ef845f84326a072efa47960bef40b536c72d7e03ceaf6ca5f6061eb8a3eda3545b1a78fe52ef5a062006ddaf874da205f08b3789e2d014ae37794890fc2e575bf75201563a24ba9945a0043070275d9f6054307ee7348bd660849d90ff845f84326a06ba5ef20c3049323fc94defe14ca162e28b86aa64f7cf497ac8a5520e9615614a04a0a0fc61c10b416759af0ce4ce5c09ca1060141d56d958af77050c9564df6bf\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n  \"blockHash\": \"0x82983fe294d286e76486760e6904369285554e1744af16786c2393a956fb4ec4\",\n  \"blockNumber\": \"0x2\",\n  \"contractAddress\": null,\n  \"feePayer\": \"0x029fdce0457db02f05c4be9f67b7115cb8ea15ca\",\n  \"feePayerSignatures\": [\n    {\n      \"V\": \"0x25\",\n      \"R\": \"0x26c8b5038e9f7ff580f3323b8a06b6eb1b6ab13cac11c30de6c9b64230bdb992\",\n      \"S\": \"0x6c4be67ace8551237e675da2b7b32ec2d7d7e07abf2eb299ebec6cc444460e13\"\n    }\n  ],\n  \"feeRatio\": \"0x58\",\n  \"from\": \"0x0fcda0f2efbe1b4e61b487701ce4f2f8abc3723d\",\n  \"gas\": \"0x174876e800\",\n  \"gasPrice\": \"0x0\",\n  \"gasUsed\": \"0x8ca0\",\n  \"logs\": [],\n  \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0x12\",\n  \"senderTxHash\": \"0xc9d2f558f6883bfea5113ce900499354fcb0004ff901dec51db7a5d80c3a7868\",\n  \"signatures\": [\n    {\n      \"V\": \"0x26\",\n      \"R\": \"0x88a484d1cc59824e05b933348df6ebe7b82ac68766a85e2aa5636c136ee2834c\",\n      \"S\": \"0x104fee953e1a015f26b35da57acf15aa01eb5c6c0e79965200c3fe813003a4fe\"\n    }\n  ],\n  \"status\": \"0x1\",\n  \"transactionHash\": \"0x50c6840fee3297a8ff745025cb4fd27a7e662395620ad615458ea22034f37f6c\",\n  \"transactionIndex\": \"0xb\",\n  \"type\": \"TxTypeFeeDelegatedCancelWithRatio\",\n  \"typeInt\": 58\n}\n```\n\n## TxTypeFeeDelegatedChainDataAnchoringWithRatio <a id=\"txtypefeedelegatedchaindataanchoringwithratio\"></a>\n\nTxTypeFeeDelegatedChainDataAnchoringWithRatio is a fee-delegated transaction, with the ratio, that anchors service chain data to the Kaia mainchain.\nService chains periodically send this type of transaction to the Kaia mainchain to ensure its security and credibility of data.\nFor more details about the data anchoring, see [Anchoring](../../nodes/service-chain/configure/anchoring).\nAs it is a fee-delegated transaction with the given ratio as well, the fee payer bears only the given portion of the transaction fee based on the given ratio and the sender pays the rest.\nBe mindful that it is not allowed to send this transaction via RPC.\nCurrently, this transaction is executed through private p2p channels for security reasons.\nThis transaction does not change the state of the Kaia blockchain except the sender's nonce being increased by one.\n\n### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of TxTypeFeeDelegatedChainDataAnchoringWithRatio. This must be 0x4a. |\n| nonce | uint64 \\(Go\\) | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| gasPrice | \\*big.Int \\(Go\\) | A unit price of gas in `kei` the sender will pay for a transaction fee. The amount of transaction fee is calculated as `gas` \\* `gasPrice`. For example, if the transaction consumes 10 units of gas and gasPrice is 10^18, the transaction fee will be 10 KAIA. See [Unit of KAIA](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n| gas | uint64 \\(Go\\) | The maximum amount of transaction fee the transaction is allowed to use. |\n| from | common.Address \\(Go\\) | The address of the sender. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feeRatio | uint8 \\(Go\\) | Fee ratio of the fee payer. The valid range is between 1 and 99. Zero\\(0\\) is not allowed. 100 and above are not allowed as well. |\n| input | \\[\\]byte \\(Go\\) | Data of the service chain. |\n| txSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The sender's signatures. For more details, see [Signature Validation](./transactions#signature-validation). |\n| feePayer | common.Address \\(Go\\) | The address of the fee payer. |\n| feePayerSignatures | \\[\\]\\{\\*big.Int, \\*big.Int, \\*big.Int\\} \\(Go\\) | The fee payer's signatures. |\n\n### RLP Encoding for Signature of the Sender <a id=\"rlp-encoding-for-signature-of-the-sender\"></a>\n\nTo make a signature of the sender, RLP serialization should be done like the following:\n\n```javascript\nSigRLP = encode([encode([type, nonce, gasPrice, gas, from, anchoredData, feeRatio]), chainid, 0, 0])\nSigHash = keccak256(SigRLP)\nSignature = sign(SigHash, <private key>)\n```\n\n### RLP Encoding for Signature of the Fee Payer <a id=\"rlp-encoding-for-signature-of-the-fee-payer\"></a>\n\nTo make a signature of the fee payer, RLP serialization should be done like the following:\n\n```javascript\nSigFeePayerRLP = encode([encode([type, nonce, gasPrice, gas, from, anchoredData, feeRatio]), feePayer, chainid, 0, 0])\nSigFeePayerHash = keccak256(SigFeePayerRLP)\nSignatureFeePayer = sign(SigFeePayerHash, <the fee payer's private key>)\n```\n\n### RLP Encoding for SenderTxHash <a id=\"rlp-encoding-for-sendertxhash\"></a>\n\nTo make a SenderTxHash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nSenderTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, feeRatio, txSignatures])\nSenderTxHash = keccak256(SenderTxHashRLP)\n```\n\n### RLP Encoding for Transaction Hash <a id=\"rlp-encoding-for-transaction-hash\"></a>\n\nTo make a transaction hash, RLP serialization should be done like the following:\n\n```javascript\ntxSignatures (a single signature) = [[v, r, s]]\ntxSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nfeePayerSignatures (a single signature) = [[v, r, s]]\nfeePayerSignatures (two signatures) = [[v1, r1, s1], [v2, r2, s2]]\nTxHashRLP = type + encode([nonce, gasPrice, gas, from, anchoredData, feeRatio, txSignatures, feePayer, feePayerSignatures])\nTxHash = keccak256(TxHashRLP)\n```\n\n### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\nThe following shows the result of RLP serialization and the transaction object:\n\n```javascript\nChainID 0x01\nPrivateKey 0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8\nPublicKey.X 0x3a514176466fa815ed481ffad09110a2d344f6c9b78c1d14afc351c3a51be33d\nPublicKey.Y 0x8072e77939dc03ba44790779b7a1025baf3003f6732430e20cd9b76d953391b3\nSigRLP 0xf8dcb8d7f8d54a128505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405800658018080\nSigHash 0xd79dbb964bee2d3807e214a247141a1fcb066a67de99e90750aac4a2a0b776de\nSignature 0xf845f84326a0c612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797da00c734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf\nFeePayerPrivateKey 0xb9d5558443585bca6f225b935950e3f6e69f9da8a5809a83f51c3365dff53936\nFeePayerPublicKey.X 0x327434d4cfc66ef8857d431419e9deebdc53a3e415edcc55382e2d417b8dd102\nFeePayerPublicKey.Y 0x65fc97045707faf7b8f81ac65089d4cc71f69ad0bf1bc8559bc24f13fc284ced\nSigRLPFeePayer 0xf8f1b8d7f8d54a128505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006589433f524631e573329a550296f595c820d6c65213f018080\nSigHashFeePayer 0xa824ff743912239d0665d2fd43a66d57138c92834e9d338b66bcca4a0bee8fbd\nSignatureFeePayer 0xf845f84325a0a3e40598b67e2bcbaa48fdd258b9d1dcfcc9cc134972560ba042430078a769a5a06707ea362e588e4e5869cffcd5a058749d823aeff13eb95dc1146faff561df32\nTxHashRLP 0x4af90177128505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405800658f845f84326a0c612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797da00c734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf9433f524631e573329a550296f595c820d6c65213ff845f84325a0a3e40598b67e2bcbaa48fdd258b9d1dcfcc9cc134972560ba042430078a769a5a06707ea362e588e4e5869cffcd5a058749d823aeff13eb95dc1146faff561df32\nTxHash 0xc01a7c3ece18c115b58d7747669ec7c31ec5ab031a88cb49ad85a31f6dbbf915\nSenderTxHashRLP 0x4af9011b128505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405800658f845f84326a0c612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797da00c734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf\nSenderTxHash 0xa0670c01fe39feb2d2442adf7df1957ade3c5abcde778fb5edf99c80c06aa53c\n\n  TX(c01a7c3ece18c115b58d7747669ec7c31ec5ab031a88cb49ad85a31f6dbbf915)\n  Type:          TxTypeFeeDelegatedChainDataAnchoringWithRatio\n  From:          0xa94f5374Fce5edBC8E2a8697C15331677e6EbF0B\n  Nonce:         18\n  GasPrice:      0x5d21dba00\n  GasLimit:      0x174876e800\n  AnchoredData:  f8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006\n  Signature:     [{\"V\":\"0x26\",\"R\":\"0xc612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797d\",\"S\":\"0xc734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf\"}]\n  FeePayer:      0x33f524631e573329a550296F595c820D6c65213f\n  FeeRatio:      88\n  FeePayerSig:   [{\"V\":\"0x25\",\"R\":\"0xa3e40598b67e2bcbaa48fdd258b9d1dcfcc9cc134972560ba042430078a769a5\",\"S\":\"0x6707ea362e588e4e5869cffcd5a058749d823aeff13eb95dc1146faff561df32\"}]\n  Hex:           4af90177128505d21dba0085174876e80094a94f5374fce5edbc8e2a8697c15331677e6ebf0bb8aff8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000000405800658f845f84326a0c612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797da00c734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf9433f524631e573329a550296f595c820d6c65213ff845f84325a0a3e40598b67e2bcbaa48fdd258b9d1dcfcc9cc134972560ba042430078a769a5a06707ea362e588e4e5869cffcd5a058749d823aeff13eb95dc1146faff561df32\n```\n\n### RPC Output \\(Example\\) <a id=\"rpc-output-example\"></a>\n\nThe following shows a transaction object returned via JSON RPC.\n\n```javascript\n{\n    \"blockHash\": \"0xee6c72b7d99019a941b47d77507abe015c3f00d3ff9122a2eec33d846107b842\",\n    \"blockNumber\": \"0x2\",\n    \"contractAddress\": null,\n    \"feePayer\": \"0x33f524631e573329a550296f595c820d6c65213f\",\n    \"feePayerSignatures\": [\n        {\n            \"V\": \"0x25\",\n            \"R\": \"0xa3e40598b67e2bcbaa48fdd258b9d1dcfcc9cc134972560ba042430078a769a5\",\n            \"S\": \"0x6707ea362e588e4e5869cffcd5a058749d823aeff13eb95dc1146faff561df32\"\n        }\n    ],\n    \"feeRatio\": \"0x58\",\n    \"from\": \"0xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\",\n    \"gas\": \"0x174876e800\",\n    \"gasPrice\": \"0x5d21dba00\",\n    \"gasUsed\": \"0xd0fc\",\n    \"input\": \"0xf8ad80b8aaf8a8a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004058006\",\n    \"logs\": [],\n    \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"nonce\": \"0x12\",\n    \"senderTxHash\": \"0xa0670c01fe39feb2d2442adf7df1957ade3c5abcde778fb5edf99c80c06aa53c\",\n    \"signatures\": [\n        {\n            \"V\": \"0x26\",\n            \"R\": \"0xc612a243bcb3b98958e9cce1a0bc0e170291b33a7f0dbfae4b36dafb5806797d\",\n            \"S\": \"0xc734423492ecc21cc53238147c359676fcec43fcc2a0e021d87bb1da49f0abf\"\n        }\n    ],\n    \"status\": \"0x1\",\n    \"transactionHash\": \"0xc01a7c3ece18c115b58d7747669ec7c31ec5ab031a88cb49ad85a31f6dbbf915\",\n    \"transactionIndex\": \"0xb\",\n    \"type\": \"TxTypeFeeDelegatedChainDataAnchoringWithRatio\",\n    \"typeInt\": 74\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/build/transactions. # Implementing Transactions\n\nThis guide provides a comprehensive overview of implementing transactions on the Kaia network, covering various transaction types, encoding, signing, and network interaction.\n\n## Kaia Transaction Components\n\nKaia transactions generally include the following components:\n\n| Components | Description |\n| :--- | :--- |\n| `from` | The sender's address.  Required for most Kaia transaction types due to the decoupling of key pairs and addresses. |\n| `to` | The account address that will receive the transferred value. |\n| `value` | The amount of KAIA in `kei` to be transferred. |\n| `input` | Data attached to the transaction, used for transaction execution. |\n| `v`, `r`, `s` | The cryptographic signature generated by the sender to let the receiver obtain the sender's address. |\n| `nonce` | A value used to uniquely identify a sender’s transaction. If two transactions with the same nonce are generated by a sender, only one is executed. |\n| `gas` | The maximum amount of transaction fee the transaction is allowed to use. |\n| `gasPrice` | A multiplier to get how much the sender will pay in tokens. The amount of tokens the sender will pay is calculated via `gas` \\* `gasPrice`. For example, the sender will pay 10 KAIA for a transaction fee if gas is 10 and gasPrice is 10^18. Unit of KAIA is described [here](../../learn/token-economics/kaia-native-token#units-of-kaia). |\n\n## Signature Validation\n\nBecause Kaia decouples key pairs from addresses, signature validation differs from typical blockchains.  The `from` field is crucial, as it identifies the sender.  The [AccountKey](../../learn/accounts#account-key) associated with the `from` address is used to validate the signature.\n\n## Fee Delegation and SenderTxHash\n\nKaia's fee delegation feature allows a third party to pay transaction fees.  This requires two signatures – one from the sender and one from the fee payer. The `SenderTxHash` is crucial for tracking fee-delegated transactions. It's a hash of the transaction *without* the fee payer's information, allowing the sender to track the transaction before the fee payer signs it.  The sender can use the `SenderTxHash` to retrieve the complete transaction via the [kaia_getTransactionBySenderTxHash](../../references/json-rpc/kaia/get-transaction-by-sender-tx-hash) RPC method.\n\n## Transaction Types\n\nWhile typical Blockchain platforms provide a single transaction type, Kaia provides multiple transaction types that empower transactions with new capabilities and optimizations for memory footprint and performance. The following table provides an overview of the transaction types available on Kaia:\n\n|  | Basic | Fee Delegation | Partial Fee Delegation |\n| :--- | :--- | :--- | :--- |\n| Legacy | [TxTypeLegacyTransaction](./basic#txtypelegacytransaction) | N/A | N/A |\n| ValueTransfer | [TxTypeValueTransfer](./basic#txtypevaluetransfer) | [TxTypeFeeDelegatedValueTransfer](./fee-delegation#txtypefeedelegatedvaluetransfer) | [TxTypeFeeDelegatedValueTransferWithRatio](./partial-fee-delegation#txtypefeedelegatedvaluetransferwithratio) |\n| ValueTransferMemo | [TxTypeValueTransferMemo](./basic#txtypevaluetransfermemo) | [TxTypeFeeDelegatedValueTransferMemo](./fee-delegation#txtypefeedelegatedvaluetransfermemo) | [TxTypeFeeDelegatedValueTransferMemoWithRatio](./partial-fee-delegation#txtypefeedelegatedvaluetransfermemowithratio) |\n| SmartContractDeploy | [TxTypeSmartContractDeploy](./basic#txtypesmartcontractdeploy) | [TxTypeFeeDelegatedSmartContractDeploy](./fee-delegation#txtypefeedelegatedsmartcontractdeploy) | [TxTypeFeeDelegatedSmartContractDeployWithRatio](./partial-fee-delegation#txtypefeedelegatedsmartcontractdeploywithratio) |\n| SmartContractExecution | [TxTypeSmartContractExecution](./basic#txtypesmartcontractexecution) | [TxTypeFeeDelegatedSmartContractExecution](./fee-delegation#txtypefeedelegatedsmartcontractexecution) | [TxTypeFeeDelegatedSmartContractExecutionWithRatio](./partial-fee-delegation#txtypefeedelegatedsmartcontractexecutionwithratio) |\n| AccountUpdate | [TxTypeAccountUpdate](./basic#txtypeaccountupdate) | [TxTypeFeeDelegatedAccountUpdate](./fee-delegation#txtypefeedelegatedaccountupdate) | [TxTypeFeeDelegatedAccountUpdateWithRatio](./partial-fee-delegation#txtypefeedelegatedaccountupdatewithratio) |\n| Cancel | [TxTypeCancel](./basic#txtypecancel) | [TxTypeFeeDelegatedCancel](./fee-delegation#txtypefeedelegatedcancel) | [TxTypeFeeDelegatedCancelWithRatio](./partial-fee-delegation#txtypefeedelegatedcancelwithratio) |\n| ChainDataAnchoring | [TxTypeChainDataAnchoring](./basic#txtypechaindataanchoring) | [TxTypeFeeDelegatedChainDataAnchoring](./fee-delegation#txtypefeedelegatedchaindataanchoring) | [TxTypeFeeDelegatedChainDataAnchoringWithRatio](./partial-fee-delegation#txtypefeedelegatedchaindataanchoringwithratio)|\n\n## Implementation Details\n\n* **RLP Encoding:** Transactions are serialized using Recursive Length Prefix (RLP) encoding before submission.\n* **Signatures:**  Transactions are signed using [Specify signature algorithm, e.g., ECDSA] to ensure authenticity.\n* **Examples and RPC Outputs:**  This section will provide practical examples and expected RPC outputs for each transaction type.  (Note:  `TxTypeValueTransfer` sends KAIA without any additional data, while `TxTypeValueTransferMemo` allows for including a short memo field along with the transfer.)\n\nBy understanding these components and implementation details, developers can effectively build applications on the Kaia network.",
    "Current Website Url is https://docs.kaia.io/build/tutorials/buy-me-a-coffee. # Build a Buy-Me-A-Coffee DApp\n\n## Table of Contents <a href=\"#table-of-contents\" id=\"table-of-contents\"></a>\n\n* [1. Project Setup](#1-project-setup)\n* [2. Creating a Buy Me A Coffee Smart Contract](#2-creating-a-buy-me-a-coffee-smart-contract)\n* [3. Testing the contract’s functionalities using scripts](#3-testing-the-contracts-functionalities-using-scripts)\n* [4. Deploying BMC Smart contract to Kaia Testnet ](#4-deploying-bmc-smart-contract)\n* [5. Building the BMC Frontend with React and Web3Onboard](#5-building-the-bmc-frontend-with-react-and-web3onboard)\n* [6. Deploying Frontend code on IPFS using Fleek](#6-deploying-frontend-code-on-ipfs-using-fleek)\n* [7. Conclusion](#7-conclusion)\n\n## Introduction <a href=\"#1-introduction\" id=\"1-introduction\"></a>\nBuy Me a Coffee (BMC) is a platform where creators get monetary support and donations from their fans or audience. These creators could be writers, artists, musicians, video creators, et al. With the help of this platform, fans may play a significant role in the success stories of creators, audiences can express their appreciation for the job that creators accomplish, and creators can monetize their work.\n\nOn a high level, Buy-me-a-Coffee simplifies the process of accepting payments for creators and enhances interactions between creators and audiences. These and more are some of the exciting features on the BMC platform. On the bright side, imagine this platform on the blockchain. Creators will now get access to more benefits, such as:\n\n- Complete payment, as opposed to traditional BMC, which charges 5% on any support received by the creator.\n- Transparency because all transactions are recorded on the blockchain.\n- Directly receive support fees from fans without any intermediary.\n- Decentralization, i.e., there is no central authority controlling the platform.\n\nIn this tutorial. you will build a decentralized version of the Buy Me a Coffee (BMC) platform (frontend + smart contract). This platform will be a minimalistic implementation of the traditional BMC platform where supporters can tip you, and you will be able to withdraw any tips that are delivered to the BMC smart contract as the contract's owner. Supporters will be able to send test KAIA and lovely messages together in a coffee transaction using this site. \n\nBy the end of this guide, you will have used the following to create this dApp: \n- Solidity: to write the BMC smart contract\n- NextJs and Tailwind: for building a frontend website for our BMC dApp\n- Web3Onboard: to enable multiple wallet connections to Kaia Testnet Kairos.\n- Fleek: with Fleek we can host our BMC dApp on IPFS.\n\n## Prerequisites <a href=\"#2-prerequisites\" id=\"2-prerequisites\"></a>\nTo complete this tutorial, you will need:\n- [Node.js](https://nodejs.org/en/download/package-manager) \n- Familiarity with Javascript and React basics such as hooks etc\n- Installation of  the necessary wallets, such as [Coinbase Wallet](https://www.coinbase.com/wallet/downloads), and [Metamask Wallet](https://metamask.io/download/)\n- Test KAIA from [Faucet](https://faucet.kaia.io).\n- RPC Endpoint: you can obtain this from one of the supported [endpoint providers](../../references/public-en).\n- Creation of an account on [Fleek](https://app.fleek.co/).\n\n## 1. Project Setup <a id=\"1-project-setup\"></a>\n\nIn this section, we will initialize our project folder. This folder will contain two separate folders:\n\n1. frontend folder - which contains the code for the frontend implementation of our dApp\n2. smart-contract folder - which contains the smart contract code for our BMC dApp.\n\nTo create our project folder, paste this code in your terminal\n\n```bash\nmkdir BuyMeACoffee\ncd BuyMeACoffee\n```\n\n### 1.1. Frontend folder\n\nThis folder contains the tools to build our project frontend website. For the sake of this guide, we will be using Next's [create-next-app](https://nextjs.org/docs/api-reference/create-next-app) utility to bootstrap our Next.js and Tailwind CSS project. Follow the steps below to install the necessary dependencies and get our frontend folder created:\n\n#### Step 1 - Creating a frontend folder\n\nPaste the code below in your BuyMeACoffee folder to create a frontend folder using create-next-app utility:\n\n```bash\nnpx create-next-app frontend\ncd frontend\n```\n\n#### Step 2 - Downloading the Tailwind dependencies and setting up its config\n\n```bash\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n#### Step 3 - Modifying `tailwind.config.js`\n\nNavigate to the `tailwind.config.js` file and replace with the code below:\n\n```js\nmodule.exports = {\n  content: [\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\n#### Step 4 - Replacing the code in styles/global.css\n\nNavigate to the styles/global.css file and replace with the code below:\n\n```css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nWe have successfully set up our frontend project folder. More will be discussed later on. The next step is to set up the smart contract folder.\n\n### 1.2. Smart Contract Folder\n\nThis folder contains the smart contract for our BuyMeACoffee functionality. Follow the steps below to install the necessary dependencies and get our smart contract folder created:\n\n#### Step 1 - Creating the smart contract folder\nTo create this folder, navigate to the project directory: BuyMeACoffee and create a smart-contract folder by running the command below:\n\n```bash\ncd ..\nmkdir smart-contract\ncd smart-contract\n``` \n\n#### Step 2 - Generating a hardhat project template \n\nThis template is suitable for writing, testing and deploying smart contracts. Firstly, start a new npm project  by running the code below in your terminal:\n\n```bash\nnpm init -y\n```\nThis should create a package.json file for you that looks like this:\n\n```json\n{\n  \"name\": \"buymeacoffee\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\nThen, install hardhat and other dependencies such as hardhat-toolbox and dotenv. To do so, replace your package.json file with the code below: \n\n```json\n{\n  \"name\": \"buymeacoffee\",\n  \"devDependencies\": {\n    \"@nomicfoundation/hardhat-toolbox\": \"^2.0.2\",\n    \"hardhat\": \"^2.14.0\"\n  },\n  \"dependencies\": {\n    \"dotenv\": \"^16.0.3\"\n  }\n}\n```\nFinally, run `npm install` in your terminal. \n\nAfter successfully installing all the dependencies(hardhat, hardhat-toolbox, dotenv), you can confirm hardhat installation by:\n\na. Checking the current version:\n\n```bash\n npx hardhat --version \n```\nYour console should print out the current version installed which in our case is **2.14.0.** \n\nb. Viewing your project directory. Your current directory should include:\n\n- **contracts/** – this is the folder containing the smart contract.\n- **scripts/** – this folder contains code that deploys your contracts on the blockchain network\n- **test/** – this folder contains all unit tests that test your smart contract\n- **hardhat.config.ts** – this file contains configurations important for the work of Hardhat and\nthe deployment of smart contracts.\n\n## 2. Creating a Buy Me A Coffee Smart Contract <a id=\"creating-a-buy-me-a-coffee-contract\"></a>\n\nIn this section we will be creating the smart contract that houses the BMC functionality. To get started, navigate to your **contracts** folder, create a new file named `BuyMeACoffee.sol` and paste this code below: \n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\ncontract BuyMeACoffee {\n    // event to emit when a message is sent with tip\n    event NewCoffee(address indexed _sender, string name, string _message, uint256 _timestamp);\n\n    // address of contract deployer\n    address payable owner;\n    constructor() {\n        // stores deployer as owner\n        owner = payable(msg.sender);\n    }\n\n    // struct of BuyMeACoffe Tx\n    struct BuyCoffee {\n        address sender;\n        string name;\n        uint timestamp;\n        string message;\n    }\n\n    // maps id to BuyCoffee struct\n    mapping (uint => BuyCoffee) idToBuyCoffee;\n\n    // id \n    uint public coffeeId;\n\n    // buy coffee function\n    function buyCoffee(string memory name, string memory message) public payable {\n\t  // Must accept more than 0 KAIA for a coffee.\n        require(msg.value > 0, \"Tip must be greater than zero\");\n        coffeeId++;\n\t\n\t// Add the coffee tx to storage\n        BuyCoffee storage coffee = idToBuyCoffee[coffeeId];\n        coffee.message = message;\n        coffee.name = name;\n        coffee.sender = msg.sender;\n        coffee.timestamp = block.timestamp;\n         // Emit a NewCoffee event with details about the coffee tx.\n        emit NewCoffee(msg.sender, name, message, block.timestamp);\n    }\n\n    // withdraw coffee tips to the contract owner\n    function withdrawCoffeTips() public {\n        require(owner == msg.sender, \"Not owner\");\n        require(owner.send(address(this).balance) );\n    }\n\n     // get all coffee\n    function getAllCoffee(uint _id) public view returns(BuyCoffee[] memory c){\n        require(_id <= coffeeId, \"Non-existent id\");\n        c = new BuyCoffee[](_id);\n        for(uint i = 0; i < _id; i++) {\n            c[i] = idToBuyCoffee[i + 1];\n        }\n    }\n}\n```\nLet's quickly go over what each line of code does:\n\nThe **NewCoffee** event is emitted when a buyCoffee function is executed. It logs out the address of the sender, the name of the sender, the message sent, and the timestamp. \n\nNext is the **owner** variable, which represents the contract deployer. We then set the **msg.sender** to be the owner of the contract in our constructor. \n\nThe **coffeeId** was created to keep track of the coffee transaction created. \n\nSubsequently we declared a **buyMeACoffee struct**, which stores all the data related to a coffee transaction; address sender, string name, uint timestamp, string message. We then mapped this struct to an id using the **idToBuyCoffee** variable. \n\nThe buyCoffee function is the core implementation of BMC smart contract. It is a payable function which takes in two parameters, the name and address of the sender. It checks if the KAIA amount sent in is greater than zero. Next it increments the coffeeId, then  it adds the coffee tx or info to the blockchain. Finally it emits a NewCoffee event, which entails the details of the coffee tx. \n\nWe created a **withdraw()** function to withdraw the total balance of the contract (`address(this).balance`) to the owner. \n\nFinally, a **getAllCoffee()** function was created. It returns all the coffee transactions created overtime.\n \nNow that we have completed writing our BMC smart contract, the next step is to test the functionalities of our smart contract, deploy and interact with the smart contract on **Kaia Testnet Kairos**.\n\n## 3. Testing the contract’s functionalities using scripts <a id=\"testing-bmc-contract-using-scripts\"></a>\n\nIn this section, we will be writing scripts to test the functionality of our smart contract . To get started, navigate to your scripts folder, create a new file named `bmc-sample.js` and paste the following code in it:\n\n```js\nconst hre = require(\"hardhat\");\n// Logs the KAIA balances of a specific address.\nasync function getBalance(address) {\n    const balanceBigInt = await hre.ethers.provider.getBalance(address);\n    return hre.ethers.utils.formatEther(balanceBigInt)\n}\n\n// Logs the KAIA balances for a list of addresses.\nasync function getBalances(addresses) {\n  let idx = 0;\n  for (const address of addresses) {\n      console.log(`address ${idx} balances`, await getBalance(address));\n      idx++;\n  }\n}\n\n// Logs all the coffee info stored on-chain from coffee tx.\nasync function getAllCoffee(memos) {\n  for (const memo of memos) {\n      const timestamp = memo.timestamp;\n      const sender = memo.sender;\n      const name = memo.name;\n      const message = memo.message\n      console.log(`At ${timestamp}, ${name}, with ${sender}, said: \"${message}\"`);\n  }\n}\n\nasync function main() {\n  const [owner, tipper1, tipper2, tipper3 ] = await hre.ethers.getSigners();\n  const BuyMeACoffee = await hre.ethers.getContractFactory(\"BuyMeACoffee\");\n  const buyMeACoffe = await BuyMeACoffee.deploy();\n  await buyMeACoffe.deployed();\n  console.log(`BuyMeACoffee Contract Address`, buyMeACoffe.address);\n  // (========Check Balance==========)\n  const addressses = [owner.address, tipper1.address, buyMeACoffe.address];\n  console.log(\"======GET BALANCE=======\");\n  await getBalances(addressses);\n  // Buy Coffee for owner\n  const tip = {value: hre.ethers.utils.parseEther(\"1\")}\n  await buyMeACoffe.connect(tipper1).buyCoffee(\"Alice\", \"Hi Jude\", tip);\n  await buyMeACoffe.connect(tipper2).buyCoffee(\"Bob\", \"Hi Alice\", tip);\n  await buyMeACoffe.connect(tipper3).buyCoffee(\"Japhet\", \"Hi Ox\", tip);\n  // check balance after tipping \n  console.log(\"======GET BALANCE AFTER TIPPING=======\");\n  await getBalances(addressses);\n  // withdraw coffee tips\n  await buyMeACoffe.connect(owner).withdrawCoffeTips();\n  // check balance after withdrawing tip \n  console.log(\"======GET BALANCE AFTER WITHDRAWING TIP=======\");\n  await getBalances(addressses);\n  // get the current coffee tx id.\n  const coffeeId = await buyMeACoffe.coffeeId()\n  const id = coffeeId.toString();\n  console.log(coffeeId.toString());\n  // get all existing coffee tx\n  const allCoffee = await buyMeACoffe.getAllCoffee(id);\n  \n  await getAllCoffee(allCoffee);\n}\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\n\nAs always, lets go over what each line of code does: \n\nYou will notice that at the top of the code, there exist some helper functions for getting the balances of both a single address and multiple addresses. Also in the code exists the main function which houses the functionality of testing our smart contract. \n\nLet's do a walk through of the code in the **main()** function. \n\nFirst we set the list of accounts (owner, tipper1, tipper2, tipper3) for test purposes by calling `await hre.ethers.getSigners()`\n\nNext we created a contract instance and deployed it. In this case the BuyMeACoffee.sol contract. \n\nThen, we set a list of addressees, checked their balances using the **getBalances()** function. We then called the **buyCoffee** function on three different instances. Next we checked each addresses balance after the coffee transaction. \n\nThat said, we then called the **withdraw** function to withdraw all funds to the owner address. Next we checked the addresses balance after withdrawal.\n\nFinally, we got all the coffee transactions in the smart contract by calling the **getAllCoffee()** function. To see the script in action, run the command below:\n\n```bash\nnpx hardhat run scripts/bmc-coffee.js\n```\nYou should have an output in your terminal that looks like this:\n\n```bash\nAyomitans-MacBook-Pro:smart-contract oxpampam$ npx hardhat run scripts/bmc-sample.js\nBuyMeACoffee Contract Address 0x5FbDB2315678afecb367f032d93F642f64180aa3\n======GET BALANCE=======\naddress 0 balances 9999.998295071875\naddress 1 balances 10000.0\naddress 2 balances 0.0\n======GET BALANCE AFTER TIPPING=======\naddress 0 balances 9999.998295071875\naddress 1 balances 9998.999752128832448226\naddress 2 balances 3.0\n======GET BALANCE AFTER WITHDRAWING TIP=======\naddress 0 balances 10002.998249102355276178\naddress 1 balances 9998.999752128832448226\naddress 2 balances 0.0\n3\nAt 1686307885, Alice, with 0x70997970C51812dc3A010C7d01b50e0d17dc79C8, said: \"Hi Jude\"\nAt 1686307886, Bob, with 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC, said: \"Hi Alice\"\nAt 1686307887, Japhet, with 0x90F79bf6EB2c4f870365E785982E1f101E93b906, said: \"Hi Ox\"\n```\n\n## 4. Deploying BMC Smart contract\n\n### 4.1 Deploying BMC Smart contract to Kaia Testnet  <a id=\"deploying-bmc-contract\"></a>\n\nAfter successfully testing the functionalities of our BMC smart contract, let’s proceed to deploy to the Kaia Testnet Kairos in the following steps:\n\n#### Step 1 - Creating a .env file\n\nNow create your .env file in the project folder. This file helps us load environment variables from a .env file into process.env.\n\nPaste this command in your terminal to create a .env file\n\n```bash\ntouch .env\n```\nAfter creating your file, lets configure our .env file to look like this:\n\n```bash\nKAIROS_TESTNET_URL= \"Your RPC URL\"\nPRIVATE_KEY= \"your private key copied from metamask wallet\"\n```\n#### Step 2 - Setting up Hardhat Configs\n\nPaste this configurations in your hardhat.config.js file\n\n```\nrequire(\"@nomicfoundation/hardhat-toolbox\");\nrequire(\"dotenv\").config();\nconst KAIROS_TESTNET_URL = process.env.KAIROS_TESTNET_URL;\nconst PRIVATE_KEY = process.env.PRIVATE_KEY;\n/** @type import('hardhat/config').HardhatUserConfig */\nmodule.exports = {\n  solidity: \"0.8.18\",\n  defaultNetwork: \"hardhat\",\n  networks: {\n    kairos: {\n      url: KAIROS_TESTNET_URL,\n      accounts: [PRIVATE_KEY],\n    }\n  }\n};\n```\n#### Step 3 - Creating deployment scripts\n\nTo create a new deployment script that deploys this smart contract to a specified network, create a new file scripts/deploy.js and paste in the code below:\n\n```js\nconst hre = require(\"hardhat\");\nasync function main() {\n  const BuyMeACoffee = await hre.ethers.getContractFactory(\"BuyMeACoffee\");\n  const buyMeACoffe = await BuyMeACoffee.deploy();\n  await buyMeACoffe.deployed();\n  console.log(`BuyMeACoffee Contract Address`, buyMeACoffe.address);\n}\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\nNow that we have our configurations all set, let’s deploy to Kaia Testnet Kairos by running the command below:\n\n```bash\nnpx hardhat run scripts/deploy.js --network kairos\n```\nOnce the contract deploys successfully, your terminal should look like this:\n\n```bash\nBuyMeACoffee Contract Address 0x0bEd1ed7B205d8c18e38A20b5BaB6e265A96d1AC\n```\nCongratulations on deploying your BMC smart contract on Kaia Kairos Network! You can verify this transaction on Kaiascope  by pasting your address in the search field.\n\n### 4.2 Interacting with BMC Smart Contract  <a id=\"interacting-with-bmc-contract\"></a>\n\nIn this section, you will learn how to use hardhat scripts to withdraw the coffee tips sent into the smart contract. To get started, create a new file `withdraw.js` in your scripts folder and paste the code below: \n\n```js\nconst hre = require(\"hardhat\");\n\n// contract address of BMC Contract\nconst buyMeACoffeAddress = \"Paste BMC contract address\";\n\n// address of the contract deployer\n// useful when calling the withdrawCoffeTips() function\n// ensure that this address is the SAME address as the original contract deployer\nconst deployerAddress = \"Paste deployer address\";\n// get the balance of a specified address\nasync function getBalance(address) {\n    const balanceBigInt = await hre.ethers.provider.getBalance(address);\n    return hre.ethers.utils.formatEther(balanceBigInt)\n}\n\nasync function main() {\n  \n  // initialize the deployerAddress to a signer object\n  // this will be useful when calling the withdrawCoffeTips() to the owner address\n  const signer = await hre.ethers.getSigner(deployerAddress);\n\n  // instantiate the BMC contract\n  const BuyMeACoffee = await hre.ethers.getContractAt(\"BuyMeACoffee\", buyMeACoffeAddress, signer);\n\n  const balanceBefore = await getBalance(signer.address);\n  const contractBalance = await getBalance(BuyMeACoffee.address);\n  console.log(`Owner balance before withdrawing tips: ${balanceBefore} KAIA`);\n  console.log(`Contract balance before withdrawing tips:  ${contractBalance} KAIA`);\n\n    // Withdraw funds if there are funds to withdraw.\n    if (contractBalance !== \"0.0\") {\n        console.log(\"withdrawing funds..\")\n        const withdrawCoffeTxn = await BuyMeACoffee.withdrawCoffeTips();\n        await withdrawCoffeTxn.wait();\n        // check owner's balance after withdrawing coffee tips\n        const balanceAfter = await getBalance(signer.address);\n        console.log(`Owner balance after withdrawing tips ${balanceAfter} KAIA`);\n      } else {\n        console.log(\"no funds to withdraw!\");\n      }\n}\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n```\nAs you can see from the code above, having instantiated the BMC contract, the scripts will execute the withdrawCoffeTips function only when the contract balance is greater than zero.  Makes sense right?  \n\nYes! In the event where the contract has no funds, it prints \"No funds to withdraw\" hence saving us some gas from contract invocation. \n\nTo see this in action, lets run the script below: \n\n```bash\nnpx hardhat run scripts/withdraw.js --network kairos\n```\nOn successful execution of the scripts, your terminal should look like this: \n\n```bash\nAyomitans-MacBook-Pro:smart-contract oxpampam$ npx hardhat run scripts/withdraw.js --network kairos\nOwner balance before withdrawing tips: 155.8337532 KAIA\nContract balance before withdrawing tips:  2.0 KAIA\nwithdrawing funds..\nOwner balance after withdrawing tips 157.83298835 KAIA\n```\nYou can see from the output that the owner balance increased by 2 KAIA after withdrawing the coffee tips. \n\nNow that we have our contract deployed and all functionalities tested, it is time to build out the frontend. \n\nThe frontend will bring the BMC functionality to live i.e we can now visualize how we interact with the BMC smart contract.\n\n## 5. Building the BMC Frontend with React and Web3Onboard <a id=\"builidng-bmc-frontend-with-react-and-web3onboard\"></a>\n\nIn this section, we will be building our dApp frontend website with Next.js and Web3Onbaord. To get started, you have to navigate to the frontend folder previously created. \n\n```bash\ncd ..\ncd frontend \n```\nThe next step is to install the necessary dependencies to get our BMC frontend website up and running.  The following are the packages to be installed: \n\n1. Web3Onboard packages: Web3-Onboard is a chain-agnostic wallet library that supports multi-wallet compatibility in your dApp built on EVM-compatible networks like Kaia Blockchain.\n2. ethers.js: Web3-Onboard provider can be used with libraries like [ethers.js](https://docs.ethers.org/v6/) and[web3.js](https://web3js.readthedocs.io/en/v1.2.8/getting-started.html). In this guide, we will use ethers.js to make Kaia blockchain calls like getting the user's account, fetch balance, sign transaction, send transaction, read from and write to the smart contract.\n\nImportant Note: We need to edit 2 files in the  frontend/pages folder\n- **_app.js**\n- **index.js**\n\n### 5.1 Setting up Web3Onboard Provider and Wallet Modules <a id=\"setting-up-web3onboard-provider-and-wallet-modules\"></a>\n\n#### Step 1 - Installing @web3-onboard/react\n\n```bash\nnpm install @web3-onboard/react\n```\nIn your `_app.js` file, import the web3OnboardProvider and init function. More to be discussed later. \n\n```js\nimport { Web3OnboardProvider, init } from '@web3-onboard/react'\n```\n\n#### Step 2 - Installing and Instantiating Wallet Modules\nIn this step, you can add as many wallets to be supported in your dApp using the wallet modules. But for this guide, you will add Coinbase Wallet, WalletConnect, Injected Wallets to your web3-Onboard implementation. \n\n```bash\nnpm install @web3-onboard/coinbase // Coinbase Wallet\nnpm install @web3-onboard/walletconnect // WalletConnect\nnpm install @web3-onboard/injected-wallets  // Used to connect to Metamask\n```\t\nIn your `_app.js` file, import and instantiate the wallet modules to integrate with your dApp. Note that each module has its own unique options parameters to pass in, such as a fallback JSON RPC URL or default chain ID.\n\n```js\nimport coinbaseWalletModule from \"@web3-onboard/coinbase\";\nimport walletConnectModule from \"@web3-onboard/walletconnect\";\nimport injectedModule from \"@web3-onboard/injected-wallets\";\nconst coinbaseWalletSdk = coinbaseWalletModule();\nconst walletConnect = walletConnectModule();\nconst injected = injectedModule();\nconst modules = [coinbaseWalletSdk, walletConnect, injected];\n```\n#### Step 3 - Installing ethers\n\n```bash\nnpm install --save ethers\n```\n#### Step 4 - Instantiating Web3Onboard using the Web3OnboardProvider\n\nWeb3OnboardProvider provides a better way to manage global state. It simplifies wrapping the provider object around your App and the initialized Web3Onboard instance will be available in all children components. \n\nInit function initializes web3-Onboard and makes it available for all hooks to use.\n\nTo see this in action, paste the code below the previous code in your `_app.js `file:\n\n```js\nconst ETH_MAINNET_RPC_URL = `https://eth-mainnet.g.alchemy.com/v2/demo`;\nconst KAIA_MAINNET_URL = `https://public-en.node.kaia.io`;\nconst KAIROS_TESTNET_URL = `https://public-en-kairos.node.kaia.io`;\n  const web3Onboard =  init({\n    wallets: modules,\n    chains: [\n      {\n        id: \"0x1\", // chain ID must be in hexadecimal\n        token: \"ETH\",\n        namespace: \"evm\",\n        label: \"Ethereum Mainnet\",\n        rpcUrl: ETH_MAINNET_RPC_URL\n      },\n      {\n        id: \"0x2019\", // chain ID must be in hexadecimal\n        token: \"KAIA\",\n        namespace: \"evm\",\n        label: \"Kaia Mainnet\",\n        rpcUrl: KAIA_MAINNET_URL\n      },\n      {\n        id: \"0x3e9\", // chain ID must be in hexadecimel\n        token: \"KAIA\",\n        namespace: \"evm\",\n        label: \"Kairos Testnet\",\n        rpcUrl: KAIROS_TESTNET_URL\n      },\n     // you can add as much supported chains as possible\n    ],\n    appMetadata: {\n      name: \"Kaia-web3-onboard-App\", // change to your dApp name\n      icon: \"paste your icon url\"\n      logo: \"paste your logo url\"\n      description: \"Web3Onboard-Kaia\",\n      recommendedInjectedWallets: [\n        { name: \"Coinbase\", url: \"https://wallet.coinbase.com/\" },\n        { name: \"MetaMask\", url: \"https://metamask.io\" }\n      ]\n    }\n  })\nexport default function App({ Component, pageProps }) {\n  return (\n    <Web3OnboardProvider web3Onboard={web3Onboard}>\n      <Component {...pageProps} />\n    </Web3OnboardProvider>\n )\n}\n```\n\nHaving set up our _app.js file which grants our  App a provider object  and  web3Onboard instance available in all children components, next is to build out front-end logic in our `index.js` file\n\n- Index.js \n\nThis page handles wallet connection and sending of coffee to the BMC smart contract which is to be withdrawn by the contract deployer.\n\n```js\nimport React, { useEffect, useState } from 'react';\nimport { useConnectWallet } from '@web3-onboard/react'\nimport abi from \"../utils/BuyMeACoffee.json\"\nimport { ethers } from \"ethers\";\n\nexport default function Home() {\n  const [name, setName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [coffee, setGetCoffee] = useState([]);\n  const [coffeeContract, setCoffeeContract] = useState();\n  const [{ wallet, connecting }, connect, disconnect] = useConnectWallet();\n  const contractAddress = \"Paste BMC contract address\";\n  const contractABI = abi.abi;\n  const getCoffee = async () => {\n    try {\n       console.log(\"getting coffee Id\")\n       const coffeeId = await coffeeContract.coffeeId();\n       console.log(coffeeId.toString());\n       const getCoffee = await coffeeContract.getAllCoffee(coffeeId.toString());\n       setGetCoffee(getCoffee);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    let ethersProvider\n    if (wallet) {\n       ethersProvider = new ethers.BrowserProvider(wallet.provider, 'any')\n    }\n  \n    \n    if (ethersProvider) {\n      try {\n        const getCoffeContract = async () => {\n          const signer =  await ethersProvider.getSigner();\n    \n          const buyMeACoffee = new ethers.Contract(contractAddress, contractABI, signer);\n    \n          setCoffeeContract(buyMeACoffee)\n        }\n        getCoffeContract();\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [wallet])\n  useEffect(() => {\n    const onNewCoffee = (from, timestamp, name, message) => {\n      console.log(\"Coffee received: \", from, timestamp, name, message);\n      setGetCoffee((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message,\n          name\n        }\n      ]);\n    };\n      if (wallet && coffeeContract) {\n        getCoffee()\n        coffeeContract.on(\"NewCoffee\", onNewCoffee);    \n      } else {\n        console.log(\"provider not initialized yet\");\n      }\n  }, [wallet, coffeeContract])\n  const onNameChange = (event) => {\n    setName(event.target.value);\n  }\n  const onMessageChange = (event) => {\n    setMessage(event.target.value);\n  }\n  const buyCoffee = async (e) => {\n    e.preventDefault();\n    try {\n      if (!wallet && !coffeeContract) {\n        console.log(\"provider not initialized yet\");\n        return;\n      }\n        console.log(\"buying coffee..\")\n        const coffeeTxn = await coffeeContract.buyCoffee(name, message, {value: ethers.parseEther(\"1.0\")});\n        const coffeTx =  await coffeeTxn.wait();\n        console.log(\"mined \", coffeTx.hash);\n        console.log(\"coffee sent!\");\n        // clear target value fields\n        e.target.inputName.value = \"\";\n        e.target.inputAmount.value = \"\";\n        // Clear the form fields.\n        setName(\"\");\n        setMessage(\"\");\n        // set all coffees\n        await getCoffee();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n     <main className='coffeeMain max-w-8xl min-h-[100vh] p-10 bg-black mt-0 shadow-2xl m-auto flex flex-col justify-center items-center bg-[url(\"https://static.vecteezy.com/system/resources/previews/001/330/185/original/coffee-cup-on-hand-drawn-doodle-background-free-vector.jpg\")]'>\n        <div className='coffeContent'>\n          <div className='compOne flex flex-col justify-center items-center'>\n            <h1 className='text-white text-center text-2xl'>Buy me a coffee</h1>\n            { wallet ?\n            ( <div>\n                <form onSubmit={buyCoffee} className=\"flex flex-col justify-center items-center mt-4\">\n                  <input type=\"text\" name='inputName' placeholder=\"Enter your name\" className=\"p-5 rounded-md bg-black text-white border-solid border-2 border-white outline-0\" onChange={onNameChange} />\n                  <input type=\"text\" name='inputAmount' placeholder=\"Send your message\" className=\"p-5 rounded-md bg-black text-white border-solid border-2 border-white mt-3 outline-0\" onChange={onMessageChange}/>\n                  <input type=\"submit\" value=\"Send Coffee\" className=\"p-3 mt-4 rounded-2xl bg-white text-black cursor-pointer\"/>\n                </form>\n            </div> ) : (    <button className='text-black bg-white p-3 rounded-lg mt-3 cursor-pointer' disabled={connecting} onClick={() => (wallet ? disconnect(wallet) : connect())}>\n        {connecting ? 'Connecting' : wallet ? 'Disconnect' : 'Connect'}\n      </button>)\n        \n            }\n          </div>\n          <div className=\"comp2 flex flex-col justify-normal items-center py-3 px-10\">\n            {wallet && ( \n              <div className=\"flex mt-5 mb-3\">\n                  <h1 className=\"text-white text-2xl\">Coffee Transaction</h1>\n              </div>\n              ) }\n              <div className=\"coffeeTransaction w-[1300px] flex flex-row gap-5 overflow-x-scroll\">\n              {/* grid gap-4 grid-cols-2 */}\n                {wallet && (coffee.map((coff, id) => {\n                      return (\n                        <div key={id} className=\" border-solid border-2 border-white p-5 w-auto rounded-2xl mb-3\">\n                          <p className=\" text-white font-bold\">\"{coff.message}\"</p>\n                          <p className=\" text-white\">From: {coff.name} at {`${new Date(coff.timestamp.toString() * 1000)}`}</p>\n                        </div>\n                      )\n                }))}\n              </div>\n            </div>\n        </div>\n    </main>\n  )\n}\n```\n\n### Important notes from the code above\n1. Get your contract ABI:  The contract ABI specifies to the frontend code what functions are available to call on the smart contract. To get your contract abi, navigate to your smart-contract folder and copy the text  in this file following this path **artifacts/contracts/BuyMeACoffee.sol/BuyMeACoffee.json**.  Next we created a utils folder in the **frontend/src** folder. Then pasted it in a newly created file named BuyMeACoffee.json file. \n\n2. Change BMC Contract address to the address of your BMC deployed contract. \n\nNow if the app isn't already running, you can go to the shell and use `npm run dev` to start a local server to test out your changes. The website should load in a few seconds and UI should look like this:\n\nConnect Wallet Page:\n\n![](/img/build/tutorials/bmc-cw.png)\n\n![](/img/build/tutorials/bmc-connect.png)\n\n\nFrontend website to send coffee:\n\n![](/img/build/tutorials/bmc-frontend.png)\n\nNow let's explore through our website and the code. \n\nYou can already see from the above screenshot that when you first visit the dApp, it will ask you to connect a wallet.  Next it pops up the list of available wallets initialized in the Web3Onboard instance.\n\nThen you select the wallet of your choice; from the image above, we selected MetaMask. Once you have connected your wallet, you get to see a UI component on the upper right of your website which contains the details of the connected wallet. Also on the page, you will  see the coffee transaction form which contains the name and message of the sender, as well as the previous coffee paid into the smart contract by other visitors. \n\n## 6. Deploying Frontend code on IPFS using Fleek <a id=\"deploying-bmc-frontend-to-ipfs-using-fleek\"></a>\n\nFleek is an infrastructure that enables us to build modern sites and apps on IPFS. With fleek your sites or app becomes permissionless, trustless, censorship resistant, and free of centralized gatekeepers. In this tutorial we will be deploying our Next js app to Fleek other than the traditional platforms like Vercel. \nYeah you got it! We are deploying a decentralized application to a decentralized hosting platform! \n\nThe following are the steps to deploy your BMC dApp to Fleek:\n\n1. Make sure to confirm these configurations in your frontend code: \n\n    a. Open package.json and add in the following scripts:\n\n    ```js\n\t\t\"scripts\": {\n   \t\t \"dev\": \"next\",\n   \t\t \"build\": \"next build\",\n\t\t  \"start\": \"next start\",\n    \t\t  \"export\": \"next export\"  \n\t\t}\n\t```\n\tb. Paste the code below in your next.config.js file in the root directory:\n\n\t```js\n\t\tmodule.exports = {\n  \t\t\texportTrailingSlash: true,\n\t\t};\n\t```\nFor more information, visit this [guide](https://blog.fleek.co/posts/fleek-nextJS)\n\n2. Navigate to your dashboard on Fleek and click on **Add new Site**\n\n![](/img/build/tutorials/fleek-addsite.png)\n\n3. Connect your GitHub account to access your repositories.\n\n![](/img/build/tutorials/fleek-cg.png)\n\n4. Select the repository you intend to deploy.\n\n5. On the next page,select the **Next Js** framework  in the **Basic build setting** tab, and Fleek will automatically populate the other fields. \n6. Click deploy site \n7. In the event of an **npm WARN EBADENGINE Unsupported engine** as shown in the image below:\n\n![](/img/build/tutorials/fleek-err.png)\n\n\nHead over to **Deploy setting** in the **Deploy** tab and change the **Docker image Name** to **node:latest** as shown in the image below:\n\n![](/img/build/tutorials/fleek-err-fix.png)\n\n8. Now your site should build and deploy to IPFS easily.\n9. Click the link generated to view your website. \n\n![](/img/build/tutorials/fleek-site-url.png)\n\nVoila! We have our BMC dApp deployed and hosted on IPFS.\n\n## 7. Conclusion <a id=\"conclusion\"></a>\n\nIf you’ve made it this far, congratulations! In this tutorial, you have learned how to create a full stack Buy Me A Coffee dApp using Solidity, NextJs, Web3Onboard and Fleek. This is the first step in creating a decentralized application hosted on a decentralized platform. \n\nFrom here, you could  also explore some other options in your frontend like adding a new input field for the amount of coffee to be sent other than sending 1 KAIA statically. You can have access to the full codebase here on [github](https://github.com/ayo-klaytn/buy-me-a-coffee) and also test the website using this [link](https://spring-fog-0605.on.fleek.co/).\n\nIf you want more information, visit [Kaia Docs](https://docs.klaytn.foundation/), [Web3Onboard Docs](https://onboard.blocknative.com/docs/modules/react), and [Fleek Docs](https://docs.fleek.co/tutorials/hosting/). If you have any questions, visit [Kaia Forum](https://devforum.kaia.io/).\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/connecting-metamask. ---\nid: connecting-metamask\ntitle: Connecting MetaMask to Kaia\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Connect MetaMask to Kaia\n\n![](/img/banners/kaia-metamask.png)\n\n> **Note**: MetaMask is mostly used as a wallet for Ethereum, but it is also compatible with Kaia due to the identical address structures. Kaia also has a browser extension wallet called [Kaia Wallet](../tools/wallets/kaia-wallet), so it basically provides the same features as MetaMask, except for Remix.\n\n## Step 1. Install MetaMask <a href=\"#install-metamask\" id=\"install-metamask\"></a>\n\n* We will be using Chrome browser in this example. ([**Install Chrome**](https://www.google.com/intl/en_us/chrome/))\n*   Add [**MetaMask Extension**](https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en) to Chrome.\n\n    > **Note:** You may need additional installations if you are using another browser.\n* You can start MetaMask by clicking on the icon in the upper right-hand corner of your chrome browser.\n\n## Step 2. Generate a MetaMask Wallet <a href=\"#generate-a-metamask\" id=\"generate-a-metamask\"></a>\n\n![Create a Wallet](/img/build/tutorials/new-to-metamask.png)\n\n* Click on \\[Create a Wallet].\n* Set a password.\n*   You will be given a 12 word seed phrase; back it up somewhere secure.\n\n    > **Note:** You can only restore your wallet with the seed phrase. Sharing your seed phrase with others may result in losing all of your funds. Therefore, it is recommended that you either write it down manually or store it in an offline device.\n\n![Seed phrase and Wallet](/img/build/tutorials/metamask-secret-backup.png)\n\n## Step 3. Connect to Kaia Network <a href=\"#connect-to-kaia-network\" id=\"connect-to-kaia-network\"></a>\n\n### A. Quick Configuration\n\n<Tabs>\n  <TabItem value=\"kaia-mainnet\" label=\"Kaia Mainnet\">Use <a href=\"https://chainlist.org/chain/8217\">ChainList</a> for a one-click configuration and follow the instructions.</TabItem>\n\n <TabItem value=\"kairos-testnet\" label=\"Kaia Kairos Testnet\">Use <a href=\"https://chainlist.org/chain/1001\">ChainList</a> for a one-click configuration and follow the instructions.</TabItem>\n</Tabs>\n\n\n### B. Manual Configuration\n\n1. Click on the upper Networks tab, which is on Ethereum Mainnet as default, and select \\[Add network].\n\n![Add Network](/img/build/tutorials/mm-network-btn.png)\n\n\n2. Enter the following Kaia network details in the **Add a network manually** page and click **Save**\n\n<Tabs>\n  <TabItem value=\"kaia-mainnet\" label=\"Kaia Mainnet\">\n\n```jsx title=\"Network Name \"\nKaia Mainnet\n```\n\n```jsx title=\"New RPC URL \"\nhttps://public-en.node.kaia.io\n```\n\n```jsx title=\"Chain ID \"\n8217\n```\n\n```jsx title=\"Network Symbol \"\nKAIA\n```\n\n```jsx title=\"Block Explorer URL\"\nhttps://kaiascan.io\n```\n\n  </TabItem>\n  <TabItem value=\"kairos-testnet\" label=\"Kaia Kairos Testnet\">\n\n```jsx title=\"Network Name \"\nKaia Kairos Testnet\n```\n\n```jsx title=\"New RPC URL \"\nhttps://public-en-kairos.node.kaia.io\n```\n\n```jsx title=\"Chain ID \"\n1001\n```\n\n```jsx title=\"Network Symbol \"\nKAIA\n```\n\n```jsx title=\"Block Explorer URL\"\nhttps://kairos.kaiascan.io\n```\n\n  </TabItem>\n</Tabs>\n\n## Step 4. Send KAIA <a href=\"#send-klay\" id=\"send-klay\"></a>\n\n**Note:** The following steps require KAIA. For this guide, we will be using Kairos Testnet. You can obtain Test KAIA in [**Kaia Faucet**](https://faucet.kaia.io).\n\n\n* Click \\[Send] on the main page and enter the recipient address and the amount of KAIA.\n\n![Send KAIA 1](/img/build/tutorials/kairos-metamask-send.png)\n\n**NOTE:** Sending KAIA is a payment transaction, for which you need KAIA.\n\n* Since Kaia v1.9.0, a [dynamic gas fee mechanism](https://medium.com/klaytn/dynamic-gas-fee-pricing-mechanism-1dac83d2689) has replaced the existing fixed price policy.\n* So you don't have to set the fixed gas fee manually.\n* Check the amount to send and the transaction fee and click \\[Confirm] to complete the KAIA transfer, after which you will be redirected to the main page.\n* Click \\[Activity] on the main page to confirm the transaction history.\n\n![Send KAIA 2](/img/build/tutorials/kairos-metamask-send-ii.png)\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/connecting-remix. # Connect Remix to Kaia\n\n![](/img/banners/kaia-remix.png)\n\n## Overview <a href=\"#overview\" id=\"overview\"></a>\n\nRemix is a browser-based IDE (Integrated Development Environment) for developing Solidity contracts. In this guide, you will learn how to: \n* Create and Upload a pre-built smart contract on Remix IDE.\n* Compile the smart contract.\n* Connect to Kaia Plugin for Remix IDE\n* Set up deployment environment \n* Import account\n* Connect Kaia to Remix using Kaia Wallet\n* Connect Kaia to Remix using MetaMask\n* Deploy the smart contract.\n* Verify the smart contract.\n\nThis will cover connecting Remix with Kaia. If you want to know more about how to use Remix, please refer to [Remix docs](https://remix-ide.readthedocs.io/en/latest/) or [Remix IDE](https://remix.ethereum.org/).\n\n\n## Creating a file on Remix <a href=\"#creating-a-file-on-remix\" id=\"creating-a-file-on-remix\"></a>\n\nTo start building a smart contract, click on **New File** icon in the **contracts** folder in the **File explorer** tab and name it `KaiaGreeter.sol`\n\nNext is to copy and paste the smart contract code provided below into the newly created KaiaGreeter.sol file.\n\n```sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\nimport \"hardhat/console.sol\";\ncontract KaiaGreeter {\n    uint256 totalGreetings;\n    constructor() {\n        console.log(\"Yo yo, Welcome to Kaia\");\n    }\n    function greet() public {\n        totalGreetings += 1;\n        console.log(msg.sender, \"says hello kaia!\");\n    }\n    function getTotalGreetings() public view returns (uint256) {\n        console.log(\"We have %d total waves!\", totalGreetings);\n        return totalGreetings;\n    }\n}\n```\n\n![](/img/build/smart-contracts/remix-create-new-file.png)\n\n\n## Compile smart contract <a href=\"#compile-smart-contract\" id=\"compile-smart-contract\"></a>\n\nTo compile your contract, do the following:\n\n* Go to the **Solidity Compiler** tab\n* Select compiler version to 0.8.27\n* Turn on the 'Auto compile' option.\n* Cliick on the Compile KaiaGreeter.sol  button to compile `KaiaGreeter.sol` contract.\n* After successful compilation, it will show a green tick mark on the Compiler tab button\n\n![](/img/build/smart-contracts/remix-compile-contract.png)\n\n## Connect to Kaia Plugin on Remix IDE <a href=\"#connect-to-kaia-plugin\" id=\"connect-to-kaia-plugin\"></a>\n\nTo connect to Kaia plugin on Remix IDE, you can either use this [Kaia Plugin for Remix](https://ide.kaia.io/) or follow this step:\n\n* Navigate to the **Plugin manager** tab\n* Insert Klaytn in the search field \n* Activate the Klaytn plugin. If Klaytn tab appears, you are ready to interact with Kaia.\n\n![](/img/build/smart-contracts/remix-plugin-addon.png)\n\n## Setting up deployment environment  <a href=\"#setting-up-deployment-env\" id=\"setting-up-deployment-env\"></a>\n\n* Click on the Klaytn plugin.\n* Select the appropriate [Environment].\n* You can select Kairos, Mainnet, Injected Provider - Kaia Wallet, Injected Provider - MetaMask \n    * [Kairos]: Connects to the Kairos network\n    * [Mainnet]: Connects to the Mainnet\n    * [Injected Provider - Kaia Wallet]: Connects to Kaia Wallet\n    * [Injected Provider - MetaMask ]: Connects to Metamask\n\n![](/img/build/smart-contracts/remix-deploy-env.png)\n\n## Import account <a href=\"#import-account\" id=\"import-account\"></a>\n\nYou can export private key or Keystore from any compatible wallet to use here.\n\n* Click plus button next to the ACCOUNT.\n* Then put private key or keystore.\n* You can also import keys for the feePayer. It only supports private key.\n\n![](/img/build/smart-contracts/remix-import-acc.png)\n\n## Connecting Kaia to Remix using Kaia Wallet <a href=\"#connect-to-kaia-using-kaia-wallet\" id=\"connect-to-kaia-using-kaia-wallet\"></a> \n\n* Select [Injected Provider - Kaia Wallet] on the Remix Environment menu.\n\n![](/img/build/smart-contracts/remix-kw-connect.png)\n\n\n* When you see the Kaia Wallet pop-up, click [Connect].\n* Once you are successfully connected to the Network, you will see the Chain ID and Account of the connected network.\n\n\n## Connecting Kaia - Remix using MetaMask <a href=\"#connect-to-kaia-using-metamask\" id=\"connect-to-kaia-using-metamask\"></a> \n\n* Connect Kaia with MetaMask by referring to the [Connecting to MetaMask](./connecting-metamaskx).\n* Select [Injected Provider - MetaMask] on the Remix Environment menu.\n\n![](/img/build/smart-contracts/remix-mm-connect.png)\n\n* When you see the MetaMask pop-up, select the account by clicking it.\n* Once you are successfully connected to the Network, you will see the Chain ID and Account of the connected network.\n\n## Deploying the smart contract <a href=\"#deploying-contract\" id=\"deploying-contract\"></a>\n\nIn this section, we will deploy the KaiaGreeter.sol contract using Kaia Wallet. Having compiled the contract in the Compile Section, follow the deployment process below:\n* Set your deployment ENVIRONMENT to Injected Provider -  Kaikas Wallet. Make sure to confirm all the connection prompts to Remix. \n* Select the contract you want to deploy in the CONTRACT field.\n* Click on the Deploy button. This would generate a Kaia Wallet popup that requires transaction confirmation. Simply confirm the transaction!\n\n![](/img/build/smart-contracts/remix-deploy-contract.png)\n\n* You can view the deployed contract on [Kaiascan](https://kairos.kaiascan.io/), and also test or debug it on Remix IDE.\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/fee-delegation-example. # Build Fee Delegation Example\n\n## Table of Contents <a href=\"#table-of-contents\" id=\"table-of-contents\"></a>\n\n* [1. Introduction](#1-introduction)\n* [2. How fee delegation works](#2-how-fee-delegation-works)\n  * 2.1 Transaction signing by the sender\n  * 2.2 Transaction signing by the fee payer\n* [3. Simple server and client for fee delegation](#3-simple-server-and-client-for-fee-delegation)\n  * 3.1 Environment setup\n  * 3.2 Sender's client\n  * 3.2 Fee payer's server\n* [4. Run example](#4-run-example)\n  * 4.1 Run `feepayer_server.js`\n  * 4.2 Run `sender_client.js`\n  * 4.3 Check `feepayer_server.js`\n  * 4.4 View on Kaiascan\n\n## 1. Introduction <a href=\"#1-introduction\" id=\"1-introduction\"></a>\n\nThis tutorial guides you through creating a simple server-client example using the Kaia SDK (ethers-ext) to demonstrate how fee-delegated value transfer transactions work on Kaia. The tutorial and example code are tested on the Kairos testnet. \n\n## 2. How fee delegation works <a href=\"#2-how-fee-delegation-works\" id=\"2-how-fee-delegation-works\"></a>\n\nLet's skim through how fee delegation works.\n\n### 2.1 Transaction signing by the sender <a href=\"#2-1-transaction-signing-by-the-sender\" id=\"2-1-transaction-signing-by-the-sender\"></a>\n\n`Sender` always should sign the transaction before sending a transaction.\n\nTo sign a transaction, use [signTransaction](../../references/sdk/ethers-ext/v6/account-management/send-transaction/legacy-recover-txx) which signs a transaction with given private key.\n\n```\nconst senderAddress = \"SENDER_ADDRESS\";\nconst senderPrivateKey =\"SENDER_PRIVATE_KEY\";\nconst recieverAddr = \"RECEIVER_ADDRESS\";\n\n// Create a new transaction\nlet tx = {\n  type: TxType.FeeDelegatedValueTransfer,\n  to: recieverAddr,\n  value: parseKaia(\"0.01\"),\n  from: senderAddress,\n};\n  \n// Sign the transaction\n\ntx = await senderWallet.populateTransaction(tx);\nconsole.log(tx);\n\nconst senderTxHashRLP = await senderWallet.signTransaction(tx);\nconsole.log(\"senderTxHashRLP\", senderTxHashRLP);\n```\n\nIf there are no errors, then `senderTxHashRLP` will have a signed transaction which is signed by the `senderPrivateKey`.\n\nNow, you need to send the `senderTxHashRLP` to the fee payer. There are various ways to implement this. In this tutorial, we will provide you a simple server-client code as an example of sending a `senderTxHashRLP` to the fee payer.\n\n### 2.2 Transaction signing by the fee payer <a href=\"#2-2-transaction-signing-by-the-fee-payer\" id=\"2-2-transaction-signing-by-the-fee-payer\"></a>\n\nWhen `fee payer` receives the `senderTxHashRLP`, `fee payer` signs the `senderTxHashRLP` again with their private key and sends the transaction to Kaia. The below code snippet illustrates the process.\n\n[ sendTransactionAsFeePayer](https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/value-transfer/) method signs the transaction with the given fee payer private key before sending the transaction. Before running the code, kindly replace \"FEEPAYER_ADDRESS\" and \"PRIVATE_KEY\" with the actual values.\n\n\nNote that when the fee payer submits the transaction to Kaia on behalf of the sender, the `senderTxHashRLP` type must be a `FeeDelegatedValueTransfer` type of transaction.\n\n```\nconst feePayerAddress = \"FEEPAYER_ADDRESS\";\nconst feePayerPrivateKey = \"FEEPAYER_PRIVATE_KEY\"\n\nconst sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\nconsole.log(\"sentTx\", sentTx);\n\nconst rc = await sentTx.wait();\nconsole.log(\"receipt\", rc);\n\n.on('transactionHash', function(hash){\n    ...\n})\n.on('receipt', function(receipt){\n    ...\n})\n.on('error', console.error); // If an out-of-gas error, the second parameter is the receipt.\n\n```\n\n## 3. Simple server and client for fee delegation <a href=\"#3-simple-server-and-client-for-fee-delegation\" id=\"3-simple-server-and-client-for-fee-delegation\"></a>\n\nLet's write a simple server and client using above fee delegation code.\n\n### 3.1 Environment setup <a href=\"#3-1-environment-setup\" id=\"3-1-environment-setup\"></a>\n\nWe will use `npm init -y` to setup our Node.js project, and install [ethers-ext](../../references/sdk/ethers-ext/getting-started)\n\n```\nmkdir feedelegation_server\ncd feedelegation_server\nnpm init -y\nnpm install - -save @kaiachain/ethers-ext@^1.2.0 ethers@6\n```\n\n:::note\n@kaiachain/ethers-ext@^1.2.0 recommends node 22 or later\n:::\n\n### 3.2 Sender's client <a href=\"#3-1-sender-s-client\" id=\"3-1-sender-s-client\"></a>\n\nFirst, we are going to write a `sender_client.js` as below.\n\nIn the example, kindly replace `\"SENDER_ADDRESS\"`, `\"SENDER_PRIVATEKEY\"` and `\"RECEIVER_ADDRESS\"` with the actual values.\n\n```javascript\nconst { Socket } = require(\"net\");\nconst client = new Socket();\n\nconst { Wallet, TxType, parseKaia } = require(\"@kaiachain/ethers-ext\").v6;\nconst ethers = require(\"ethers\");\n\nconst senderAddress = \"SENDER_ADDRESS\";\nconst senderPrivateKey = \"SENDER_PRIVATE_KEY\";\nconst recieverAddr = \"RECEIVER_ADDRESS\";\n\nconst sendFeeDelegateTx = async () => {\n    try {\n      const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n      const senderWallet = new Wallet(senderPrivateKey, provider);\n  \n     // Create a new transaction\n    let tx = {\n        type: TxType.FeeDelegatedValueTransfer,\n        to: recieverAddr,\n        value: parseKaia(\"0.01\"),\n        from: senderAddress,\n      };\n  \n      // Sign the transaction\n      tx = await senderWallet.populateTransaction(tx);\n      console.log(tx);\n    \n      const senderTxHashRLP = await senderWallet.signTransaction(tx);\n      console.log(\"senderTxHashRLP\", senderTxHashRLP);\n    \n  \n      if (!senderTxHashRLP) {\n        throw new Error(\"Failed to generate raw transaction\");\n      }\n  \n      // Send signed raw transaction to fee payer's server\n      client.connect(1337, \"127.0.0.1\", () => {\n        console.log(\"Connected to fee delegated service\");\n        client.write(senderTxHashRLP);\n      });\n  \n      client.on(\"data\", (data) => {\n        console.log(\"Received data from server:\", data.toString());\n      });\n  \n      client.on(\"error\", (error) => {\n        console.error(\"Connection error:\", error);\n        s;\n      });\n  \n      client.on(\"close\", () => {\n        console.log(\"Connection closed\");\n      });\n    } catch (error) {\n      console.error(\"Transaction error:\", error);\n      client.end();\n      process.exit(1);\n    }\n  };\n\n  sendFeeDelegateTx();\n```\n\nThe above code signs a fee delegated value transfer transaction with `senderPrivateKey` and sends the signed `senderTxHashRLP` to the fee payer's server which is running on port `1337` on `127.0.0.1`, i.e. localhost.\n\n### 3.3 Fee payer's server <a href=\"#3-2-fee-payer-s-server\" id=\"3-2-fee-payer-s-server\"></a>\n\nNow let's write the fee payer's server, `feepayer_server.js`, which signs the received `senderTxHashRLP` with `feePayerPrivateKey` and sends it to Kairos testnet.\n\nIn the below example, kindly replace `\"FEEPAYER_ADDRESS\"` and `\"FEEPAYER_PRIVATEKEY\"` with actual values.\n\n```javascript\nconst { createServer } = require(\"net\");\nconst { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\").v6;\n\nconst feePayerAddress = \"FEEPAYER_ADDRESS\";\nconst feePayerPrivateKey = \"FEEPAYER_PRIVATE_KEY\";\n\nconst provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst feePayerWallet = new Wallet(feePayerPrivateKey, provider);\n\nconst feePayerSign = async (senderTxHashRLP, socket) => {\n  try {\n    \n    // Send the transaction\n    const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n    console.log(\"sentTx\", sentTx);\n  \n    const rc = await sentTx.wait();\n    console.log(\"receipt\", rc);\n\n    if (rc.transactionHash) {\n      socket.write(`Tx hash: ${rc.transactionHash}\\n`);\n      socket.write(`Sender Tx hash: ${rc.senderTxHash || \"\"}\\n`);\n    }\n  } catch (error) {\n    console.error(\"Error in feePayerSign:\", error);\n    socket.write(`Error: ${error.message}\\n`);\n  }\n};\n\nconst server = createServer(function (socket) {\n  console.log(\"Client is connected ...\");\n  socket.write(\"This is fee delegating service\");\n  socket.write(\"Fee payer is \" + feePayerAddress);\n  \n  socket.on(\"data\", function (data) {\n    console.log(\"Received data from client:\", data.toString());\n    feePayerSign(data.toString(), socket);\n  });\n  \n  socket.on(\"error\", (error) => {\n    console.error(\"Socket error:\", error);\n  });\n\n  socket.on(\"end\", () => {\n    console.log(\"Client disconnected\");\n  });\n});\n\nserver.listen(1337, \"127.0.0.1\");\nconsole.log(\"Fee delegate service started ...\");\n\n```\n\nThe server listens on port `1337`.\n\nWhen there is incoming `data`, it signs the `data` with `feePayerPrivateKey` and sends it to the Kaia blockchain. It assumes that the `data` is `senderTxHashRLP` from the `sender_client.js`.\n\n## 4. Run example <a href=\"#4-run-example\" id=\"4-run-example\"></a>\n\nPrepare two terminals, one for `sender_client.js` and another for `feepayer_server.js`.\n\n### 4.1 Run `feepayer_server.js` <a href=\"#4-1-run-feepayer_server-js\" id=\"4-1-run-feepayer_server-js\"></a>\n\nRun the command below to start the fee payer's server:\n\n```\nnode feepayer_server.js\n\n// output\nFee delegate service started ...\n```\n\nThe server starts and is now listening on port 1337.\n\n### 4.2 Run `sender_client.js` <a href=\"#4-2-run-sender_client-js\" id=\"4-2-run-sender_client-js\"></a>\n\nLet's run `sender_client.js` to send a fee delegated transaction.\n\n```\n$ node sender_client.js\n\n// output\n{\n  type: 9,\n  to: '0x3a388d3fD71A0d9722c525E17007DdCcc41e1C47',\n  value: 10000000000000000n,\n  from: '0x7D3C7202582299470F2aD3DDCB8EF2F45407F871',\n  nonce: 202,\n  gasLimit: 52500,\n  gasPrice: '27500000000',\n  chainId: '1001'\n}\nsenderTxHashRLP 0x09f88681ca85066720b30082cd14943a388d3fd71a0d9722c525e17007ddccc41e1c47872386f26fc10000947d3c7202582299470f2ad3ddcb8ef2f45407f871f847f8458207f6a0820d11029771f2fa368ce11da01f1c9e7f4de6d48915074d149e132692f9d63ea0131c62470a6799dfc5d7e3a7ac8d0a4f3b8fb8b59110ca5dabb26a9ee409f274\nConnected to fee delegated service\nReceived data from server: This is fee delegating, serviceFee payer is 0x88311cD55B656D2502b50f62E83F8279c1641e70\n```\n\nIt will sign a transaction with the `sender` private key and send the signed transaction to the fee delegated service (i.e., fee payer's server). Then it will receive the response from the fee delegate service including the `Fee payer` address, `Tx hash`. `Tx hash` is hash of a transaction submitted to the Kaia network.\n\n### 4.3 Check `feepayer_server.js` <a href=\"#4-3-check-feepayer_server-js\" id=\"4-3-check-feepayer_server-js\"></a>\n\nOn the server's console, you will see below outputs. It prints the transaction receipt from the Kaia.\n\n```\n$ node feepayer_server.js\n\nFee delegate service started ...\nClient is connected ...\nReceived data from client: 0x09f88681ca85066720b30082cd14943a388d3fd71a0d9722c525e17007ddccc41e1c47872386f26fc10000947d3c7202582299470f2ad3ddcb8ef2f45407f871f847f8458207f6a0820d11029771f2fa368ce11da01f1c9e7f4de6d48915074d149e132692f9d63ea0131c62470a6799dfc5d7e3a7ac8d0a4f3b8fb8b59110ca5dabb26a9ee409f274\nsentTx TransactionResponse {\n…\n  to: '0x3a388d3fD71A0d9722c525E17007DdCcc41e1C47',\n  from: '0x7D3C7202582299470F2aD3DDCB8EF2F45407F871',\n  contractAddress: null,\n  hash: '0x7cb1e8d20b4db7d9db1abc094781e1af83a9391153aab8cc935510639a548222',\n  index: 0,\n  blockHash: '0x50d3d7e143579e17dbc17b761c8e04331c6d4d950fe7563ac9a79d42a649de0a',\n  blockNumber: 177078710,\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  gasUsed: 31000n,\n  blobGasUsed: null,\n  cumulativeGasUsed: 31000n,\n  gasPrice: 27500000000n,\n  blobGasPrice: null,\n  type: 0,\n  status: 1,\n  root: undefined\n}\n\n```\n\n### 4.4 View on Kaiascan <a href=\"#4-4-kaiascan\" id=\"4-4-kaiascan\"></a>\n\nYou can also find the above transaction on [Kaiascan](https://kairos.kaiascan.io/tx/0x7cb1e8d20b4db7d9db1abc094781e1af83a9391153aab8cc935510639a548222?tabId=overview&page=1).\n\nIt shows that the transaction is `TxTypeFeeDelegatedValueTransfer` and `Fee payer` is `0x88311cd55b656d2502b50f62e83f8279c1641e70` or `feepayerAddress` that you entered, while `From` is a different address which should be the `senderAddress` in above example.\n\n![Fee delegated Tx](/img/build/tutorials/fd-kaiascan-example.png)\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/kaia-wallet-dapp-integration. # Kaia Wallet DApp Integration\n\n## Table of Contents\n\n1. [UI Libraries](#1-ui-libraries)\n2. [Utility Libraries](#2-utility-libraries)\n3. [Providers](#3-providers)\n\n## Introduction\n[Kaia Wallet](https://docs.kaiawallet.io) is a non-custodial wallet, similar to [Metamask](https://metamask.io), with additional support for Kaia-specific [Transactions](https://docs.kaia.io/learn/transactions) & [Accounts](https://docs.kaia.io/learn/accounts). This article will guide you through integrating [Kaia Wallet](https://docs.kaiawallet.io) with a decentralized application (dApp), from High-level (abstract) to Low-level (fine-grained) implementations.\n\nFor the sake of this guide, we will be dividing Kaia Wallet dApp integration into three main categories:\n\n* UI Libraries\n* Utility libraries\n* Providers\n\n:::note\n\nThe aforementioned libraries use `Providers` under the hood.\n\n:::  \n\n## 1. UI Libraries\n\nMany dApps utilize frontend frameworks for state management & delivering reactive services. The recommended way to integrate Kaia Wallet with such dApps is to use a UI Library built on the same framework.\n\nUI Libraries provide components for user interactions, like `ConnectWallet` component. They also save you the hassle of managing low-level states, like Multiple Accounts & Multiple Networks. You can look at the underlying [Utility Library](#2-utility-libraries) or [Provider](#3-providers) for complex or low-level interactions.\n\nWhile most UI libraries have built-in support for Metamask, integrating Kaia Wallet is also easy since its [API](https://docs.kaia.io/references/json-rpc/kaia/account-created/) is built on [Metamask's](https://docs.metamask.io/wallet/reference/json-rpc-api). Even if a library doesn't natively support Kaia Wallet, extending it for Kaia Wallet integration is straightforward. For example, these are 2 popular libraries for [React](https://react.dev) or [Next.js](https://nextjs.org):\n\n* [Appkit](#1.1-appkit-example)\n* [Web3-Onboard](#1.2-web3-onboard-example)\n\n### 1.1. Appkit example\n\n![Appkit Hero Banner](https://docs.reown.com/assets/images/appkit-18fbf6d4ddb8756740540b7adad92494.png)\n\nBy [Reown](https://reown.com/), [Appkit](https://docs.reown.com/appkit/overview) offers the following **Features:**\n\n* Buttons + Modals for Connect Wallet, Account information, & Network information\n* Support for [Email Wallets](https://docs.reown.com/appkit/authentication/socials), [Coinbase](https://www.coinbase.com) accounts, & [EIP-4361](https://docs.reown.com/appkit/authentication/one-click-auth)\n\n**Considerations:**\n\n* Using [@reown/appkit](https://www.npmjs.com/package/@reown/appkit), you have an option to commit to either the frontend stack of [Wagmi](https://wagmi.sh) & [Tanstack Query](https://tanstack.com/query) or simply [Ethers](https://docs.ethers.org/v6/)\n* Requires a `projectId` [signup w/ Reown](https://cloud.walletconnect.com/sign-in)\n\n:::note\n\nExample Code: [kaikas-web3modal](https://github.com/kaiachain/kaia-dapp-mono/blob/main/examples/3rd-integration-examples/kaikas)\n\n:::  \n\n### 1.2. Web3-Onboard example\n\n![Web3-Onboard Graphic](https://onboard.blocknative.com/_app/immutable/assets/connect-modal.b7439c5e.svg)\n\nBy [Blocknative](https://www.blocknative.com), [Web3-Onboard](https://onboard.blocknative.com) offers the following **Features:**\n\n* Configurable Onboard text\n* Modals for Connect Wallet, Switch Account, & Switch Network\n* [Notification Components](https://onboard.blocknative.com/docs/modules/core#customnotification)\n* (Optional) Register API Key(s) to fetch & render real-time data\n\n**Considerations:**\n\n* You'll have to write your Buttons\n\n:::note\n\nExample Code: [kaikas-web3onboard-react](https://github.com/kaiachain/kaia-dapp-mono/blob/main/examples/3rd-integration-examples/web3Onboard)\n\n:::\n\n## 2. Utility Libraries\n\nLibraries like [kaia-sdk](#21-kaia-sdk) & [ethers.js](#22-ethersjs-example) abstract just enough to streamline blockchain interactions while still being able to call [Provider](#3-providers) APIs directly.\n\nUsing Utility Libraries to connect an account or send native tokens (e.g., KAIA/ETH) will be no different, *in terms of syntax & lines of code*, from calling Providers directly. Where libraries mainly improve are in the following areas:\n\n* Smart Contract interactions\n  * These involve ABIs, encoding inputs, & decoding outputs. Without a library, the code for these can be verbose & error-prone.\n* Error-handling\n  * string error codes/messages are mapped to error Classes with custom properties & methods.\n* Documentation & Type-safety\n\n### 2.1. kaia-sdk\n\n[kaia-sdk](https://github.com/kaiachain/kaia-sdk) is a set of drop-in extensions for other Utility Libraries, like [ethers.js](https://docs.ethers.io/v6) & [web3.js](https://web3js.org). It allows you to use your preferred library while exposing first-party support for [Kaia-specific methods](https://docs.kaia.io/references/json-rpc/kaia/account-created/):\n\n* Transaction, Account, & Account Key types\n* Fee Delegation\n\n:::note\n\nExample Code: [kaikas-web3klaytn](https://github.com/kaiachain/kaia-dapp-mono/blob/main/examples/3rd-integration-examples/kaikas)\n\n:::\n\n### 2.2. ethers.js example\n\n[ethers.js](https://docs.ethers.io/v6) is the [most popular](https://npmtrends.com/web3klaytn-vs-ethers-vs-viem-vs-web3) JavaScript Utility Library for interacting with the blockchain. It aims to be:\n\n* Extensive: support for multiple wallet formats, languages, & functions\n* Robust: comprehensive tests, documentation, & typing\n\n:::note\n\nExample Code: [kaikas-ethersjs](https://github.com/kaiachain/kaia-dapp-mono/blob/main/examples/3rd-integration-examples/ethers-js)\n\n:::\n\n## 3. Providers\n\nAt the lowest level is the Provider, [`window.klaytn`](https://docs.kaiawallet.io/02_api_reference/01_klaytn_provider) (Kaia Wallet itself). You might prefer [Utility Libraries](#2-utility-libraries), but knowledge of Provider APIs helps debug & understand how dependent libraries work. Referring to [Kaia's JSON-RPC API][Kaia-API] is necessary for using Kaia-specific methods like [`kaia_getAccount`](https://docs.kaia.io/references/json-rpc/kaia/get-account/), [`kaia_sendTransactionAsFeePayer`](https://docs.kaia.io/references/json-rpc/kaia/send-transaction-as-fee-payer/), & more.\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/migrating-ethereum-app-to-kaia. ---\nid: migrating-ethereum-app-to-kaia\ntitle: Migrate Ethereum App to Kaia\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n\n## Table of Contents <a href=\"#table-of-contents\" id=\"table-of-contents\"></a>\n\n* [1. Introduction](#1-introduction)\n* [2. Prerequisites](#2-prerequisites)\n* [3. Kaia has Ethereum compatibility](#2-kaia-has-ethereum-compatibility)\n* [4. Migrate App](#4-migrate-app)\n\n## 1. Introduction <a href=\"#1-introduction\" id=\"1-introduction\"></a>\n\nThis tutorial is intended to give a guide on how to migrate an Ethereum App to Kaia. No previous Kaia experience is needed. We will focus only on the code modifications required to migrate an Ethereum App to Kaia. \n\n\n## 2. Prerequisites <a href=\"#2-prerequisites\" id=\"2-prerequisites\"></a>\n\n* Familiarity with developer tooling and standards that support EVM.\n* Basic knowledge building a dApp.\n\n## 3. Kaia has Ethereum compatibility <a href=\"#2-kaia-has-ethereum-compatibility\" id=\"2-kaia-has-ethereum-compatibility\"></a>\n\nKaia runtime environment is compatible with Ethereum Virtual Machine and executes smart contracts written in Solidity. Kaia's RPC APIs and other client libraries maintain almost identical API specifications with Ethereum's whenever available. Therefore, it is fairly straightforward to migrate Ethereum Apps to Kaia. This helps developers easily move to a new blockchain platform.\n\n## 4. Migrate App <a href=\"#2-migrate-app\" id=\"2-nigrate-app\"></a>\n\nMigrate your Ethereum App to Kaia following the steps below:\n\n1. Configure your contract tooling and SDKs to target Kaia Network - Kairos Testnet:\n    * RPC Endpoint: `https://public-en-kairos.node.kaia.io` \n    * WebSocket Endpoint (Optional): `wss://public-en-kairos.node.kaia.io/ws`\n    * Chain ID: 1001\n\n2. Create an account using the [Kaia Wallet](https://www.kaiawallet.io/) and get some test funds from the [Faucet](https://faucet.kaia.io).\n\n3. Deploy your contract(s)\n\n<Tabs>\n  <TabItem value=\"hardhat\" label=\"Hardhat\">\n\n```js \n// using Hardhat, it will be enough to add the following networks to the \"hardhat.config.js\" configuration file\nnetworks: {\n\tkaia: {\n\t  url: \"https://public-en.node.kaia.io\",\n\t\taccounts:[process.env.PRIVATE_KEY],\n  },\n\tkairos_testnet: {\n\t\turl: \"https://public-en-kairos.node.kaia.io\", \n\t\taccounts:[process.env.PRIVATE_KEY],\n\t}\n}\n\n// Then run the command to deploy :\n// npx hardhat run scripts/deploy.js --network kaia\n// npx hardhat run scripts/deploy.js --network kairos_testnet\n\n```\n\n  </TabItem>\n  <TabItem value=\"foundry\" label=\"Foundry\">\n\n```js\nforge create --rpc-url <rpc_url> --private-key <private_key> <path_to_contract> \n```\n\n  </TabItem>\n</Tabs>\n\n\n4. Interact with contract using [Kaia SDK](https://github.com/kaiachain/kaia-sdk). Feel free to use any other toolkit like [viem](../../references/sdk/viem/viem) or [web3.py](../../references/sdk/web3py-ext/getting-started).\n\n      **A. Read blockchain data**\n        \n        **BlockNumber**\n\n          By simply replacing the web3 library with Kaia’s RPC Endpoint, you can sync Kaia's BlockNumber in real-time instead of Ethereum's BlockNumber.\n\n          ```js\n            const { JsonRpcProvider } = require(\"@kaiachain/ethers-ext/v6\");\n\n            // const SEPOLIA_TESTNET_RPC_URL = 'https://ethereum-sepolia-rpc.publicnode.com'\n            const KAIROS_TESTNET_RPC_URL = 'https://public-en-kairos.node.kaia.io/'\n            const provider = new JsonRpcProvider(KAIROS_TESTNET_RPC_URL);\n\n            async function getKaiaBlockNumber() {\n              // Get the current block number\n              const blockNumber = await provider.getBlockNumber();\n              console.log(\"Current Kaia block number:\", blockNumber);\n\n            }\n\n          getKaiaBlockNumber()\n\n          ```\n\n          **Contract Data**\n\n        ```js \n          const ethers = require(\"ethers\");\n\n          const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n          /* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n          // SPDX-License-Identifier: UNLICENSED\n          pragma solidity ^0.8.13;\n\n          contract Counter {\n              uint256 public number;\n              event SetNumber(uint256 number);\n\n              constructor(uint256 initNumber) {\n                  number = initNumber;\n              }\n\n              function setNumber(uint256 newNumber) public {\n                  number = newNumber;\n                  emit SetNumber(number);\n              }\n\n              function increment() public {\n                  number++;\n                  emit SetNumber(number);\n              }\n          }\n          */\n          const abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n          const contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\n          async function main() {\n            const counter = new ethers.Contract(contractAddr, abi, provider);\n            const number = await counter.number();\n            console.log(\"number\", number.toString());\n          }\n\n          main();\n        ```\n\n      **B. Write to the blockchain**\n\n      ```js\n      const ethers = require(\"ethers\");\n      const { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\n      const senderAddr = \"REPLACE WITH SENDER ADDRESS\";\n      const senderPriv = process.env.PRIVATE_KEY;\n\n      const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n      const wallet = new Wallet(senderPriv, provider);\n\n      /* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n      // SPDX-License-Identifier: UNLICENSED\n      pragma solidity ^0.8.13;\n\n      contract Counter {\n          uint256 public number;\n          event SetNumber(uint256 number);\n\n          constructor(uint256 initNumber) {\n              number = initNumber;\n          }\n\n          function setNumber(uint256 newNumber) public {\n              number = newNumber;\n              emit SetNumber(number);\n          }\n\n          function increment() public {\n              number++;\n              emit SetNumber(number);\n          }\n      }\n      */\n      const abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n      const contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\n      async function main() {\n        const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n        console.log(\"number before\", (await counter.number()).toString());\n\n        const sentTx = await counter.increment();\n        const receipt = await sentTx.wait();\n        console.log(\"receipt\", receipt);\n\n        console.log(\"number after\", (await counter.number()).toString());\n      }\n\n      main();\n\n      ```\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials/scaffold-eth. # Build a dApp using Scaffold-ETH 2\n\n![](/img/banners/kaia-scaffold.png)\n\n## Introduction <a href=\"#introduction\" id=\"introduction\"></a>\n\nScaffold-ETH 2 is an open-source toolkit for building decentralized applications (dApps) on Ethereum and other EVM-compatible blockchains, like Kaia. Developers can easily deploy a Solidity smart contract and launch a dApp with a React frontend thanks to Scaffold-ETH 2.\n\nThe Scaffold-ETH 2 toolkit was built using Next.js, RainbowKit, Hardhat, Foundry, Wagmi, and TypeScript. Developers can easily create, test, and deploy smart contracts using Hardhat or Foundry, as well as build a React frontend using Next.js.\n\nIn this tutorial, you will learn how to deploy, run a contract and build a dApp on Kaia using Scaffold-ETH 2.\n\n## Prerequisites <a href=\"#prerequisites\" id=\"prerequisites\"></a>\n\nTo get started with in this guide, you will need:\n* [Node (>= v18.17)](https://nodejs.org/en/download/)\n* Yarn ([v1](https://classic.yarnpkg.com/en/docs/install/) or [v2+](https://yarnpkg.com/getting-started/install))\n* Familiarity with Javascript and React basics such as hooks\n* [Metamask Wallet](https://metamask.io/download/)\n* Test KAIA from [Faucet](https://faucet.kaia.io)\n* RPC Endpoint: you can obtain this from one of the supported [endpoint providers](https://docs.kaia.io/references/public-en/)\n\n## Setting up development environment <a href=\"#setting-up-dev-environment\" id=\"setting-up-dev-environment\"></a>\n\nTo install Scaffold-ETH 2, you have two options, either to install by cloning [Scaffold-ETH 2 repository](https://github.com/scaffold-eth/scaffold-eth-2) or by using `npx create-eth@latest`.\n\nFor the sake of this guide, we will use the npx method to bootstrap our Scaffold-ETH 2 project. \n\nBootstrap a Scaffold-ETH 2 project by running the command below: \n\n```bash\nnpx create-eth@latest\n```\n\nYou will be presented with a series of prompts:\n\n**Project Name**: Input your project name: Enter a name for your project, e.g., kaia-scaffold-example.\n\n**Solidity Framework**; What solidity framework do you want to use?: Choose your preferred solidity framework (Hardhat, Foundry). For this guide, we will use the Hardhat framework.\n\n**Install packages?**: Press Enter for yes (default option) or type n and press Enter for no\nOnce the setup is complete, navigate to the project directory.\n\n```bash\ncd project-name\n// e.g  cd kaia_scaffold\n```\n\n![Scaffold-ETH setup](/img/build/tutorials/scaffold-1.png)\n\n\n\n## Highlight of the development process with Scaffold-ETH 2 <a href=\"#highlight-of-dev-environment\" id=\"highlight-of-dev-environment\"></a>\n\nThe process for developing a project with Scaffold-ETH 2 can be outlined as follows:\n\n1. Update the network configurations in Hardhat for Kaia\n2. Add your smart contracts to the **packages/hardhat/contracts**\n3. Edit your deployment scripts in the **packages/hardhat/deploy**\n4. Deploy your smart contracts to Kaia\n5. Verify your smart contracts with hardhat verify plugin\n6. Configure your frontend to target Kaia in the **packages/nextjs/scaffold.config.ts** file\n7. Edit your frontend as needed in the **packages/nextjs/pages** directory\n\nFor the sake of this guide, we’ll use the default sample contract and frontend available after Scaffold-ETH 2 installation. All that is required is to modify these components for Kaia. In that case, we’ll split the configurations into **Hardhat** and **Next.js** configurations.\n\n## Hardhat Configuration \nIn this section, you'll modify the network configurations in the Hardhat configuration file to target Kaia under the **packages/hardhat** folder.\n\n### Configure Hardhat for Kaia\nTo configure hardhat for Kaia, you need to create a .env file and also modify hardhat.config.ts to support Kaia. \n\n**Step 1: Create .env**\n\nTo create .env file, copy and paste the code below in your terminal\n\n```bash\ntouch packages/hardhat/.env\n```\n\nYou can refer to the **.env.example** file for the variables that are already used in the hardhat.config.js file. For Kaia, you'll only need to create one variable: **DEPLOYED_PRIVATE_KEY**.\n\n**Step 2: Edit your .env file to include this variable:**\n\n```bash\nDEPLOYER_PRIVATE_KEY=INSERT_PRIVATE_KEY\n```\n\nThe private key stated in your **.env** file corresponds to the account that will deploy and interact with the smart contracts in your Hardhat project.\n\n**Step 3: Modify hardhat.config.ts**\n\nThe next thing we want to do is to configure **hardhat.config.ts** to support Kaia.\n\nSet the constant **defaultNetwork** to the network you are deploying the smart contract to. \n\n```js\n    kairos: {\n      chainId: 1001,\n      url: \"https://responsive-green-emerald.kaia-kairos.quiknode.pro/\",\n      accounts: [deployerPrivateKey],\n    },\n```\n\nAdd the network configurations for Kaia under the networks configuration object\n\n```js\nnetwork: \"kairos\",\n\n```\n\nFor more information on using Hardhat with Kaia, please check [Hardhat guide](https://docs.kaia.io/build/get-started/hardhat/) for more details.\n\n### Deploy Contract to Kaia\nAfter configuring Hardhat to support the Kaia network, the next step is to compile and deploy the sample contract. \n\nFirst, you can compile your contract by running:\n\n```bash\nyarn compile\n```\n![Compile](/img/build/tutorials/scaffold-2.png)\n\nThen, you can run the following command from the root directory of your project:\n\n\n```\nyarn deploy\n```\n![Deploy](/img/build/tutorials/scaffold-6.png)\n\nNote: \n\n> If you did not set the defaultNetwork config in the hardhat.config.ts file, you can append --network INSERT_NETWORK to the command. For example, the following command would deploy a contract to Kaia.\n\n> yarn deploy --network kaia\n\n### Verify Your Deployed Contract <a href=\"#verify-deployed-contract\" id=\"verify-deployed-contract\"></a>\n\n To verify our already deployed contract, we'll use the hardhat verify plugin. All that is required is to add the following configuration to your **hardhat.config.ts** under the etherscan configuration object for Kairos Testnet. \n\n```js\n  etherscan: {\n    apiKey: {\n      kairos: \"unnecessary\",\n    },\n    customChains: [\n      {\n        network: \"kairos\",\n        chainId: 1001,\n        urls: {\n          apiURL: \"https://api-baobab.klaytnscope.com/api\",\n          browserURL: \"https://kairos.kaiascope.com\",\n        },\n      },\n    ],\n  },\n```\n\nNext is to copy and paste the following command in your terminal to verify the smart contract:\n\nExample\n\n```js\nyarn hardhat-verify --network network_name contract_address \"Constructor arg 1\"\n```\nActual\n```js\nyarn hardhat-verify --network kairos 0x7fc9656fc8c8ab433867e58b7c6afc19ec4275da\n \"0x7fc9656fc8c8ab433867e58b7c6afc19ec4275da\"\n```\nAs you can see above, to verify your contracts, you have to pass in the network name, contract address and constructor arguments (if any). After a short wait, the console will display the verification result and, if successful, the URL to the verified contract on Kaiascope will be provided.\n\n![Verify](/img/build/tutorials/scaffold-verify.png)\n \n![Verify on Kaiascope](/img/build/tutorials/scaffold-3.png)\n\n\nFor more information about verifying smart contracts on Kaia using the Hardhat Verify plugin, please refer to the H[ardhat-Verify-Plugins guide](https://docs.kaia.io/build/smart-contracts/verify/hardhat/).\n\n## Next.js Configuration <a href=\"#nextjs-configuration\" id=\"nextjs-configuration\"></a>\n\nIn this section, you'll modify the Next.js configuration to target Kairos Testnet (where the smart contract was deployed to) under the **packages/nextjs** folder. In this folder, we intend to modify the **targetNetwork** array in the scaffoldConfig object in **scaffold.config.ts** file. \n\n### Modify the targetNetwork array <a href=\"#modify-targetnetwork-array\" id=\"modify-targetnetwork-array\"></a>\n\n```js\ntargetNetworks: [chains.klaytnBaobab],\n```\n\nThat's all required to configure Next.js! Next, is to launch the dApp in your localhost. \n\n### Launch the dApp in your Localhost <a href=\"#launch-dapp-in-localhost\" id=\"launch-dapp-in-localhost\"></a>\n\nAfter making all the necessary configurations, you can now launch the example dApp on your localhost.\n\nTo do so, run:\n\n```bash\nyarn start\n```\n\n![Run dApp](/img/build/tutorials/scaffold-4.png)\n\n\n\nYou should now be able to access a React-based dApp frontend at http://localhost:3001/. Feel free to  interact with the dApp by connecting your wallet or checking out the contract debugger page.\n\n![Scaffold dApp](/img/build/tutorials/scaffold-5.png)\n\n\n## Conclusion\n\nCongratulations! You have successfully used Scaffold-ETH 2 to deploy a contract and run a dApp on Kaia. Now that you understand the workings of Scaffold-ETH 2, feel free to create and deploy your own smart contracts and modify the frontend to fit your dApp's needs!\n\nVisit [Scaffold-ETH 2 Docs](https://docs.scaffoldeth.io/) for more information and [Kaia Forum](https://devforum.kaia.io/) if you have any questions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/build/tutorials. # Tutorials\n\nThis chapter contains practical dApp examples with complete source code and explanations.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/build/tutorials/verifying-contracts. ---\nsidebar_label: Verify Contracts\n---\n\n# How to verify Smart Contracts Using Block Explorers\n\n## Introduction\n\nUsually, the deployer of a smart contract is the only party with access to the code that was actually deployed, and the public cannot read the source code of a contract until the deployer has verified it. However, this is where contract verification comes in as an important step in the smart-contract development cycle, as it helps improve the transparency (for users), convenience (for developers), and security of deployed contracts.\n\nHaving said that, once a smart contract is validated, block explorers like Kaiascope and Kaiascan also make it possible for the public to interact with the contract's public methods using the block explorer's user interface. This is in addition to the public having direct access to the verified contract source code.\n \nIn this guide, we'll take a look at how to use block explorers to verify deployed smart contracts on the Kaia Network.\n\n## Prerequisites\n\n* [Remix IDE](https://ide.kaia.io/) and [Kaia Wallet](https://docs.kaiawallet.io/getting_started/quick_start#install-kaia-wallet)\n* Enough test KAIA from [faucet](https://faucet.kaia.io)\n\n## Getting Started\n\nIn this guide, we will be going over verifying both single contracts and multi-part contracts on the block explorers that exist in the Kaia ecosystem, viz.:\n\n* [Kaiascope](https://kaiascope.com/) \n* [Kaiascan](https://www.kaiascan.io/)\n\nWithout further ado, let's get started!\n\n## Deploying a single Contract\n\nTo verify a smart contract, you need to deploy the contract first on the target network. Hence, for the sake of this guide, we will be deploying the contract to Kaia Kairos Testnet. Also, in this tutorial, we will be deploying a simple counter contract named `Counter.sol` on Remix IDE. The code is shown below: \n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ncontract Counter {\n    uint256 public count;\n    constructor(uint256 _initialCount) {\n        count = _initialCount;\n    }\n    function incrementCounter() public {\n        count++;\n    }\n    function decrementCounter() public {\n        count--;\n    }\n    function resetCounter() public {\n        count = 0;\n    }\n}\n``` \n\n:::note\n\nYou can check this page for a tutorial on deploying smart contracts using [libraries](../../references/sdk/sdk) on Kaia Kairos Testnet. You may also use a developer tool such as [Hardhat](../get-started/hardhat), [Foundry](../smart-contracts/deploy/foundry), [Remix](../smart-contracts/deploy/deploy#remix-ide)  or another tool if preferred, to deploy the smart contract to Kaia Kairos Testnet.\n\n:::\n\n## Parameters for single contract verification\n\nVerifying a contract on the block explorers requires some parameters, and these must be considered while deploying the smart contract. The following are some details related to the contract's compiler and deployment in order to verify a contract successfully: \n\nRemix IDE :\n\n* On Remix IDE, navigate to the **Solidity compiler tab**.\n    * Observe the **compiler version** used to compile and deploy the contract.\n    * Observe the **Open Source License Type** used in the contract. This means the SPDX license identifier used at the beginning of the Solidity source file. In the `Counter.sol` file we used `// SPDX-License-Identifier: MIT`\n    * Observe the **EVM version** used for deploying contracts.\n    * (Optional) If **optimization** is enabled during compilation, take note of the value of the optimization runs parameter\n\n    ![](/img/build/tutorials/counter-veri-parameters.png)\n   \n* On Remix IDE, navigate to **Kaia tab**.\n    * (Optional) If the contract constructor method accepts arguments, take note of the [ABI-encoded form](https://docs.soliditylang.org/en/develop/abi-spec.html) of the constructor arguments\n    * Take note of the contract address of the smart contract on the **Deployed Contracts** tab after successful deployment. \n\n    ![](/img/build/tutorials/counter-veri-parametersII.png)\n\n## Deploying a multi-part contract\n\nIt is important to note that deploying a multi-part contract involves the same steps as deploying a single contract. For the sake of this guide, we will be deploying a simple KIP7 airdrop contract named `airdropToken.sol`. The code is shown below:\n \n```solidity\n//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP7/KIP7.sol\";\nimport \"@kaiachain/contracts/access/Ownable.sol\";\n// the creator of the project mints certian amount of fungible tokens directly to a certain selection of wallets.\ncontract TokenAirdrop is KIP7, Ownable {\n    constructor() KIP7(\"Token Aidrop Demo\", \"TAD\") {\n    }\n    // Airdrop Token\n    function airdropTokens(address[] calldata wAddresses, uint[] calldata tAmount) public onlyOwner {\n        require(wAddresses.length == tAmount.length, \"Must be same lenght\");\n        for (uint256 i = 0; i < wAddresses.length; i++) {\n            _mintSingleTokens(wAddresses[i], tAmount[i]);\n        }\n    }\n    function _mintSingleTokens(address wAddress, uint amount) private {\n        _mint(wAddress, amount);\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId);\n    }\n}\n```\n\n## Parameters for multi-part contract verification\n\nThe parameters for verifying a multi-part contract are the same as those for a single contract. However, because they are made up of multiple dependent contracts, we need to pre-process all dependencies of the contract into a single solidity file. This preprocessing is usually referred to as smart contract flattening. \n\nFor this reason, we will have to flatten the contract so it can be verified using the new flattened Solidity file on the block explorer.\n\nRemix IDE:\n\n* On Remix IDE, navigate to the **File explorer tab**.\n    * Select the newly created contract under the **contracts** folder\n    * Click or tap with two fingers to see all commands available on the contract. \n    * Select **flatten**\n\n    ![](/img/build/tutorials/airdropToken-flattened.png)\n\n    * Once code is flattened, you will see a new contract named `airdropTokens_flattened.sol`. \n\n    ![](/img/build/tutorials/airdropToken-flattened-file.png)\n\n:::note\n\nThere are different tools for flattening a multi-part smart contract into a single Solidity file, such as [Hardhat Flattener](https://hardhat.org/hardhat-runner/docs/advanced/flattening). Kindly refer to the respective smart contract flattening tool's documentation for more detailed instructions on its usage.\n\n:::\n\n## Verifying the Contract\n\nHaving obtained all of our verification parameters, we will go over the steps for verifying a single smart contract (Counter.sol) and a multi-part smart contract (airdropTokens.sol) on the block explorer in this section. \n\n### 1. Kaiascope\n\nTo verify a single contract and multi-part contracts on Kaiascope, follow the steps below:\n\n#### 1.1 Verifying a single contract\n\n1. Goto the search bar of [Kaiascope](https://kairos.kaiascope.com) and paste the deployed contract address.\n2. Navigate to the **contract tab** on that page.\n3. Click on the **Match Contract Source Code** link to submit contract code for verification.\n\n![](/img/build/tutorials/counter-contract-tab.png)\n\n4. On the contract verification page, make sure your account is connected to either Kaia Wallet or Metamask. For this guide, we will be using Kaia Wallet. \n5. Fill in the contract address in the **contract address field**. Note: This field is usually filled with the contract address automatically.\n6. Select the **compiler version** used for the `Counter.sol` example.\n7. Select the **Open Source License Type** used for the `Counter.sol` example. For `Counter.sol` example, select the option, **MIT License (MIT)**. If there was none used, select **No License (None)**.\n8. In the **Source Code field**, select **Source Text** and paste the source code for `Counter.sol` in the text-field.\n9. Select **True** for **Optimization** if it was enabled during compilation, and fill in the number of runs under **Optimization Runs** to be **200**.\n10. Select the **EVM version** for the contract. For `Counter.sol` example, select the option **Istanbul**.\n11. Click on the CAPTCHA at the bottom and the **Sign and Submit** button to confirm and begin verification.\n\n![](/img/build/tutorials/counter-verification-page.png)\n\n12. After signing the verification request, you will get a verification status notification\n\n![](/img/build/tutorials/counter-success-popup.png)\n\n13. Once verification is done, the result of the verification will be displayed in the browser, and a success result page with the contract address. Click on the contract address to view the **Contract Source Code**, **Contract ABI**, and **Bytecode**.\n\n![](/img/build/tutorials/counter-success-popup-I.png)\n\n![](/img/build/tutorials/counter-full-verification.png)\n\n#### 1.2 Verifying multi-part contract\n\nVerifying a multi-part contract on Kaiascope is as straightforward as verifying a single contract, except that it requires some additional steps. In this section, we will be verifying the `airdropToken.sol` contract with the following additional steps: \n\n* You can either Select **Source Text** under **Source Code** (step 3 of the Counter.sol example) or **Solidity File(s)** under the **Source Code** field.  In the case of **Source Text**, copy the code in the `airdropToken_flattened.sol` and paste in the text field. If **Solidity File(s)**, you can download the `airdropToken_flattened.sol` file on Remix IDE and upload to the field.\n\na. Source Text\n\n![](/img/build/tutorials/airdrop-veri-field-I.png)\n\nb. Solidity File(s)\n\n![](/img/build/tutorials/airdrop-veri-field-II.png)\n\nAfter this, every other step remains the same as verifying a single contract. Having filled the verification parameter, click on the **Sign and Submit** button to confirm and begin verification. \n\nOnce verification is done, the result of the verification will be displayed in the browser, and a success result page with the contract address. Click on the contract address to view the **Contract Source Code**, **Contract ABI**, and **Bytecode**.\n\n![](/img/build/tutorials/airdrop-success-popup.png)\n\n![](/img/build/tutorials/airdrop-success-popup-I.png)\n\n![](/img/build/tutorials/airdrop-full-verification.png)\n\n### 2. Kaiascan\n\nTo verify a single contract and multi-part contracts on Kaiascan, navigate to the [contract submission request page](https://kairos.kaiascan.io/contracts). However, make sure your account is connected to either Kaia Wallet or MetaMask and follow the steps below:\n\n![](/img/build/tutorials/klaytnfinder-con-sub-page.png)\n\n#### 2.1 Verifying single contract\n\n1. Observe the **Is this contract for a token** field? This field is needed when trying to verify a token contract with its official website URL, official email address, and token logo image. For the sake of this guide, select **No** as we are not verifying a commercial token contract.\n2. Fill in the **contract address** for the deployed contract (Counter.sol)\n3. Make sure to download `Counter.sol` from Remix IDE and upload in the **Source Code (Solidity File)** field\n4. Select the **compiler version** used for the `Counter.sol` example\n5. Select the **Open Source License Type** used for the `Counter.sol` example. For `Counter.sol` example, select the option, **MIT License (MIT)**. If there was none used, select **No License (None)**\n6. Select the **EVM version** for the contract. For `Counter.sol` example, select the option **Istanbul**.\n7. Select **True** for **Optimization** if it was enabled during compilation, and fill in the number of runs under **Optimization Runs** to be **200**.\n8. (optional) To get the ABI-encoded constructor arguments for this field, navigate to [abi.hashex.org](http://abi.hashex.org) to get the encoded data following the image below:\n\n![](/img/build/tutorials/abi-hashex.png)\n\n9. Click on the **Sign and Submit** button to confirm and begin verification. \n\n![](/img/build/tutorials/counter-k-verification-page.png)\n\n10. Once verification is done, you will get a **Submission Successful** message. Now you can paste the contract address in the explorer search bar  to view the **Contract Source Code**, **Contract ABI**, **Creation Code** and **ABI-encoded Value**.\n\n> ![](/img/build/tutorials/counter-k-full-verification.png)\n\n### 2.2 Verifying multiple-part contract\n\nVerifying a multi-part contract on Kaiascan follows the same step as verifying a single contract. However, it is important to note we will be uploading the `airdropToken_flattened.sol` file in the **Source Code(Solidity File)** field.\n\n![](/img/build/tutorials/airdrop-k-verification-page.png) \n\nAfter filling the verification parameters, click on the **Sign and Submit** button to confirm and begin verification. Once verification is done, you will get a **Submission Successful** message. Now you can paste the contract address in the explorer search bar to view the **Contract Source Code**, **Contract ABI**, and **Creation Code**.\n\n![](/img/build/tutorials/airdrop-k-full-verification.png)\n\n## Conclusion\n\nCongratulations on following this guide! In this tutorial, you learnt how to verify contracts (both single and multi-part) using Kaiascope and Kaiascan solely to enhance the transparency (for users), convenience (for developers), and security of deployed contracts. Visit [Kaia Docs](https://docs.klaytn.foundation/) for more information and [Kaia Forum](https://devforum.kaia.io/) if you have any questions.",
    "Current Website Url is https://docs.kaia.io/kaiatech/kaia-dlt-framework. # Kaia Chain DLT Framework\n\nOur Distributed Ledger Technology (DLT) framework is designed to provide an efficient and reliable digital ledger system. The framework consists of the following key features:\n\n## Layer Structure\n\n- Our DLT framework operates in three layers of nodes: consensus nodes (CN), proxy nodes (PN), and endpoint nodes (EN). CN is managed by a Validator and is responsible for block creation. These blocks are verified by all the nodes within the network.\n- A Core Cell (CC) is composed of a single Consensus Node (CN) and two Proxy Nodes (PNs). Consensus Nodes are participating in the block generation process, while Proxy Nodes provide the interface to the network. PNs transmit the transaction requests to the Consensus Nodes, and propagate the blocks down to the Endpoint Nodes.\n- Endpoint Nodes (ENs) serve as endpoints for Kaia network handling RP API requests and processing data sent to and from service chains.\n\n![](/img/misc/kaia-nodes.jpg)\n\n## Consensus algorithm\n\nBlockchains use a “distributed ledger,” which consists of a connected network between individuals with several network participants to record and manage the transaction information. Each blockchain adopts a consensus algorithm that is most suitable for it, with the aim of efficient and smooth consensus on transaction validation and block generation among network participants.\n\n- Kaia uses an optimized version of Istanbul BFT, which implements PBFT (Practical Byzantine Fault Tolerance) with modifications to suit the characteristics of blockchain networks.\n\nThe performance of Kaia is as follows:\n\n- Process 4,000 transactions/sec\n- Instant transaction finality\n- Creation time of 1 second/block\n\n## Smart Contract\n\n- Kaia supports a distributed virtual machine for executing smart contracts, which is designed to be fast and efficient, providing the best and swiftest development environment for dApp developers and projects.\n\n- The current version of Kaia Virtual Machine (KVM) is a derivative of the Ethereum Virtual Machine (EVM). It supports all Opcodes of the Ethereum Virtual Machine equally while providing additional precompiled contracts unique to the Kaia Virtual Machine.\n\n- Kaia supports Solidity and maintains interoperability with Ethereum development toolkits such as Remix, Hardhat, Truffle, and Foundry. A Smart Contract written with Solidity can be compiled using the existing Solidity compiler and can be run on Kaia without additional work.\n\n## Security measures\n\n- We introduced a VRF(Verifiable Random Function) with the selection of the committee leader for the block generation consensus algorithm. VRF is a technology that randomly selects proposer nodes that generate blocks on each round, making it impossible to predict which nodes will be selected.\n\n- Kaia chain has a clear separation between the validator keys and rewards keys to protect them from stealing. Validator signatures need to be verified by all the committee members verifying the block creation.\n\n## Interoperability\n\n- Kaia Blockchain is based on EVM so its compatible with Ethereum and all contracts developed in Solidity can run seamlessly with in Kaia Ecosystem.\n\n- Our DLT framework is designed based on EVM-SDK(Software Development Kit) technology, and is designed to interoperate with the same EVM-SDK based chains to deploy smart contracts without any code changes.\n\n- It facilitates cross-platform transactions and smart contracts by enabling mutual asset movement, message exchange, and contract execution via inter.\n\n## Tokenization\n\n- Kaia chain supports native coins as KAIA.\n\n- The framework provides the ability to issue and manage tokens, which can represent a variety of assets, including but not limited to cryptocurrencies, utility tokens, or asset-backed tokens, or NFTs.\n\n## Governance Protocol\n\n- The on-chain governance of Kaia is designed to be fair and to ensure diverse opinions are shared. Voting entities can vote on all agenda items. Voting rights are calculated in proportion to the amount of staking. However, there is a cap on voting rights to prevent minority opinions from being ignored. Voters can delegate their staking amount to other voters.\n\n- The submitted proposal is on-chain data that anyone can inquire about, and the description and information of the proposal, the result of the vote and the execution history of the proposal are recorded and transparently disclosed.\n\n## Validators\n\nThe consensus process consists of the following three stages:\n\n- Step 1 – Election: A committee consisting of one proposer and several nodes is selected. This is a similar task to the leader election in a generally distributed system. The proposer and the committee are randomly selected through VRF since knowing them in advance can make them vulnerable to targeted DoS (denial of service).\n\n- Step 2 - Block Generation: Elected proposers create a block and make a proposal to the committee. The block proposal made through the P2P network is sent to the committee.\n\n- Step 3 - Block Verification: The committee verifies and signs the block proposed by the proposer. A block is complete when more than a quorum of signatures is collected.\n\n## Token Economy\n\n- The framework is automatically issued by the native token, KAIA, at the creation of each block, and the amount of KAIA issuance in each block is determined by the inflation ratio to the total supply. Kaia Blockchain provides incentives through newly minted KAIA and transaction fees.\n\n- On the mainnet of Kaia Blockchain, a certain amount of KAIA is issued whenever a new block is created. Each time a new block is created, a certain amount of KAIA will be newly issued, and the target initial annual inflation rate (amount of KAIA newly issued per year / total KAIA token in the market) of Kaia Blockchain will be set at 5.2% .\n\n- Block Reward for each block will be distributed in prespecified percentages (that can be changed subject to on-chain governance voting).\n\n  1. CCO and Community: 50%\n      1. Of the 50%, 20% is Block Creator rewards\n      2. Of the 50%, 80% is Staking rewards\n  2. KEF (Kaia Ecosystem Fund): 25%\n  3. KIF (Kaia Infrastructure Fund): 25%\n\n## Auditability and transparency\n\n- All transactions provide an immutable and verifiable history of all state changes by recording the process from submission to execution in a block and transparently disclosing the entire past block history.\n\n- Kaia chain provides KaiaScope and Kaiascan to view all the transactions happening on the blockchain.\n\n- The data recorded in each block in the past can be viewed by anyone through the query function, thereby increasing transparency and confidence in the system.\n\n- Kaia Chain provides voting platform “Square” to disclose all the expenses incurred and quarterly known transactions.\n\n## Network Monitoring:\n\n- Kaia Blockchain adopts a multi-channel approach to deal with network congestion. By allocating separate propagation channels to transactions and blocks, the Kaia network can propagate newly created blocks in a timely manner even when the network faces severe congestion due to a large number of transactions. In turn, Kaia guarantees the dApps on the network to continue responding to end-user requests despite intermittent network traffic surges.\n\n- Kaia chain deploys the network monitoring for all the validators in the blockchain.\n",
    "Current Website Url is https://docs.kaia.io/kaiatech/kaia-white-paper. # Kaia Blockchain White Paper v1.2\n\n## Important Notice\n\nProject Kaia[^1] Digital Tokens (hereinafter referred to as “KAIA” with the ticker symbol KAIA) are not intended to constitute a regulated product such as securities, fiat tokens or e-money, accepted virtual assets or specified investments each as defined under the Financial Services and Markets Regulations 2015 of the Abu Dhabi Global Market (the “FSMR”), or its equivalent or any other regulated products in any jurisdiction.\n\nPlease note that you may not be able to recover any monies paid for KAIA in the event that the KAIA Token Economy fails to materialize or where the vision or objects of the Foundation fails.\n\nThis Whitepaper is meant to provide more information on the KAIA Token Economy and functions of KAIA, and does not constitute a prospectus or offer document of any sort.\n\nThis Whitepaper does not constitute or form part of any opinion or any advice to sell, or any recommendation or solicitation of any offer to purchase KAIA nor shall it or any part of it or the fact of its presentation form the basis of, or be relied upon in connection with, any contract or investment decision.\n\nNo person is bound to enter into any contract or binding legal commitment in relation to the sale and purchase of KAIA and no digital tokens or other form of payment is to be accepted on the basis of this Whitepaper.\n\nAny agreement between the Foundation and you as a recipient or purchaser, and in relation to any airdrop, sale or purchase of KAIA is to be governed by a separate document setting out the terms and conditions (the “T&Cs”) of such agreement. In the event of any inconsistencies between the T&Cs and this Whitepaper, the T&Cs shall prevail. Your eligibility to receive, purchase or sell KAIA on any digital token trading platform or exchange is subject to your compliance with their respective terms and conditions.\n\nNo regulatory authority has approved any of the information set out in this Whitepaper. No such action has been or will be taken under the laws, regulatory requirements or rules of any jurisdiction. The publication, distribution or dissemination of this Whitepaper does not imply that the applicable laws, regulatory requirements or rules have\nbeen complied with.\n\nThis Whitepaper, any part thereof and any copy thereof must not be taken or transmitted to any country where distribution or dissemination of this Whitepaper is prohibited or restricted.\n\nNo part of this Whitepaper is to be reproduced, distributed or disseminated without including this section and the section titled “IMPORTANT NOTES” at the back of this Whitepaper.\n\n**PLEASE READ THE SECTION TITLED “IMPORTANT NOTES” AT THE BACK OF THIS WHITEPAPER VERY CAREFULLY.**\n\n**IF YOU ARE IN ANY DOUBT AS TO THE ACTION YOU SHOULD TAKE, YOU SHOULD CONSULT YOUR LEGAL, FINANCIAL, TAX OR OTHER PROFESSIONAL ADVISOR(S).**\n\n[^1]: Kaia is a temporary name for the integrated blockchain project of Klaytn and Finschia, and may be changed in the future.\n\n## Introduction\n\n### Our Origin\n\nThe Finschia blockchain, based on the LINE Blockchain initiated by the global messaging company LINE in 2018, and the Klaytn blockchain, established in 2019 on the foundation of Kakao, South Korea's leading software company, have merged their blockchain and ecosystems under the shared goal of achieving mass adoption of blockchain technology to\ncreate the Kaia Blockchain.\n\nKaia Blockchain is a Layer 1 blockchain based on EVM (Ethereum Virtual Machine) and has been designed with scalability, convenience, and reliability as top priorities. Kaia Blockchain focuses on transformative changes that will empower not only technology and business but also individuals in the Web 3.0 era. Kaia Foundation[^2] and ecosystem participants aim for easier accessibility of blockchain technology and let more people participate in the Web 3.0 revolution. Kaia Blockchain will settle as a trusted stratum that connects people from different backgrounds all over the world.\n\nTo build the infrastructure for the collaborative Web 3.0 playground, Kaia Blockchain will combine powerful integrated community and infrastructure technologies to discover new opportunities and accelerate innovation.\n\n[^2]: It refers to the temporary foundation name of Project Kaia\n\n### Mission\n\nOur goal is to build a fairer and more open future by ensuring people greater economic opportunities and the right to participate through blockchain.\n\n### Vision\n\nThe core vision of Kaia Blockchain is to integrate a broad user base, vast on-chain assets, and technology to help builders promptly implement and expand their ideas with successful results. As a platform, Kaia Blockchain provides the tools and environment required by the builders, providing them with the opportunity to introduce creative solutions to a wider public. They plan to create new value by leveraging on-chain assets and pursuing innovation that goes beyond technological limitations. The continued growth and success of the builder community is one of the core goals of Kaia Blockchain. For builders to turn their aspirations into reality, we will be helping builders turn their visions into reality, from the ideation stage through to implementation, market entry, and growth.\n\n## Value Proposition\n\nKaia Blockchain aims to create Asia's \\#1 blockchain through the integration of the two mainnets and lead the adoption of Web3, which was the common goal of the two blockchains. This vision can be achieved by helping builders create ideas, grow, and successfully build projects through a wide user base, abundant on-chain assets, and\ntechnology leadership as below. Kaia Blockchain provides a robust infrastructure for Web3 projects of all sizes, creating an ideal environment for builders looking to bring innovative ideas to life.\n\n### Wide User Base\n\n1. **Web2 User Accessibility**: One of the biggest problems facing Web3 projects is attracting Web2 users. Kaia Blockchain provides easy access to existing Web2 users through a messenger-integrated wallet through collaboration with Kakao with 50 million Korean users and LINE with 200 million users in Japan, Taiwan, Indonesia, and Thailand.\n\n2. **Web3 User Accessibility**: In addition to Web2 users, it helps attract Web3 users quickly and easily to the project by providing more than 1.2 million wallet active addresses and an interface connecting the users and the project.\n\n3. **Community Building Support**: It helps users gather and build projects through joint marketing with Kaia Foundation and provides an environment with easy access and usage for users from various chains.\n\n### Abundant Liquidity Support\n\n1. **Real World Asset (RWA) Linkage**: Real world assets such as gold, ships, and real estate already exist on Kaia Blockchain. Beyond this, real world assets such as various fiat-backed stablecoins and bonds will be on-chained, allowing developers to utilize a wider range of assets.\n\n2. **Large-Scale Ecosystem Fund (Kaia Ecosystem Fund):** A large-scale ecosystem fund can be created based on KAIA and support various sectors requiring liquidity such as Defi and Gamefi.\n\n3. **Chain Native Yield**: Built-in MEV (Maximal Extractable Value) extraction allows KAIA Stakers to automatically earn MEV profits on the chain. This results in an increase in the chain liquidity and simultaneously provides a method for burning tokens.\n\n### Top-Level Core Technology and Development Convenience\n\n1. **Top-Level Transaction Finality**: Provides higher TPS and decentralization while maintaining the 1-second transaction finality.\n\n2. **Ethereum Compatibility:** EVM-based dApps can be onboarded without any modifications with the provision of 100% Ethereum compatibility.\n\n3. **Convenient Account Model:** The account model of Kaia Blockchain enables the assigning of various keys to accounts, which strengthens account security and improves user experience.\n\n4. **Permissionless and Decentralized Structure**: Kaia Blockchain is converting into a permissionless validator structure while also increasing the network’s decentralization.\n\n## Token Economy\n\n### Introduction\n\nPublic blockchain platforms are maintained through a token model, which greatly influences the growth direction of the platform. Since blockchains generally do not have a central governing body, it is crucial to motivate the individuals who maintain and develop the blockchain to ensure its continued existence. However, it is unrealistic to expect participants to engage in blockchain security solely for altruistic motivations without seeking any financial gain. Therefore, an incentive system is necessary to motivate blockchain ecosystem participants to maintain and develop the network.\n\nIn blockchains, governance structures drive change. Blockchain platforms must change to keep pace with external developments as available technologies continue to expand and market needs change. Unlike general products developed and maintained by a single company or a central governing body, a public blockchain is not suitable for a single entity to make and implement unilateral decisions. For example, even if the main developers decide on a software update, the miners may not apply it. Therefore, a governance process is needed to collect the opinions of all participants in the ecosystem and make decisions based on the collected opinions in order for the blockchain network to implement timely changes. A stable governance structure must exist for the blockchain to adjust appropriately in response to external changes.\n\nThis chapter explains the token model and governance system of Kaia Blockchain. Kaia Blockchain aims to help builders quickly implement, scale, and achieve successful results based on its large user base, vast on-chain assets, and technology. This document will go over the design principles used to create the current features of Kaia Blockchain and how these features may change. The information provided in this document will be verified through relevant data, and part of this content may be subject to change after sufficient verification and review.\n\n### Design Principles\n\nDesigning the token economy and governance structure of a blockchain platform is complex. First, token economy and governance structures are tested under controlled conditions that do not fully reflect reality. Therefore, it cannot be prepared for all variables. It is also worth noting that the blockchain industry is still in its infancy stage and we have yet to see a successful system that operates over the long term. Kaia Blockchain considered these environmental factors and defined internal principles that are not influenced by external influences rather than maintaining a single specific model. The detailed token economy and governance structure may flexibly evolve in line with the market conditions and regulations. However, the design principles will remain unchanged as a core value shared by all ecosystem participants.\n\nThe core design principles of the token design of Kaia Blockchain are:\n\n- **Rewarding Ecosystem Contributors:** For a blockchain platform to be sustainable and provide great value to users, simply maintaining the network is not enough; the growth of the platform ecosystem is also very important. Therefore, Kaia Blockchain will identify the entities contributing to this growth and provide rewards and support commensurate with the contribution of each participant. This will result in not only contributors to block creation and verification but also service providers who have contributed to the growth of the platform ecosystem receiving reasonable compensation in proportion to their contribution, acting as an attractive incentive for potential external contributors.\n\n- **Elastic Token Economy:** The token economy has numerous active participants with different interests and is greatly affected by various internal and external changes. Therefore, the token economy will be flexible to external variables based on consistent core principles rather than maintaining a single model. Based on these core principles, the token economy of Kaia Blockchain can respond quickly and flexibly to external changes. At the same time, it can support the ecosystem participants to operate stably and align the direction to promote overall growth.\n\n- **Sustainable Growth:** Blockchain platforms must maintain continuous growth. In other words, it must retain the existing and new participants within the ecosystem based on a reasonable incentive model and a system that can flexibly respond to the needs and impacts of rapidly changing markets within and outside the ecosystem. In return, Kaia Blockchain will be able to achieve balanced and stable growth based solely on the contributions of ecosystem participants without any artificial value expansion.\n\n- **Simplicity:** Kaia Blockchain will be explainable simply and clearly. This will allow for quick optimizations and fixes in the future. Its simplicity will allow everyone involved to easily understand the functionality.\n\n- **Experiment and Optimize with Data:** How high should inflation be? What types of rewards should be given for what actions? These questions are difficult to answer without testing and verification. Kaia Blockchain will transparently analyze data obtained and managed on the blockchain, optimize the platform by testing various hypotheses, and transparently share the results through technical reports.\n\n### Kaia Blockchain Tokenomics\n\n#### KAIA\n\nKAIA is the platform-native cryptocurrency of the Kaia Blockchain, used to enhance the security of the Kaia Blockchain through staking or to pay transaction fees. Transaction fees are incurred when deploying or executing smart contracts, or when transferring tokens.\n\nKAIA is an essential element and fuel for operating the Kaia Blockchain platform. The users’ KAIA is paid to the validators to execute tasks requested by clients of the platform. In other words, KAIA is an incentive that will ensure developers write high-quality application codes (wasteful codes cost more) and the network remains healthy (validators are compensated for the contributed resources).\n\n#### Kaia Blockchain’s Incentive Mechanism\n\nThe incentive mechanism of Kaia Blockchain seeks to achieve the following goals:\n\n- Ability to maintain sufficient economic security and network over the long term.\n\n- Support for entities promoting economic activity\n\nIn general, incentives in public blockchains are used to maintain the network and ensure economic security. Maintaining a blockchain requires someone to continuously store block data and process new transactions. Due to this, blockchains such as Bitcoin or Ethereum provide block rewards to miners processing block creation. Incentives are also closely related to economic security. Simply put, economic security is proportional to the cost required to carry out an attack on a blockchain. This cost typically becomes higher as the potential profit of the block creator increases during the block creation process.\n\nIncentives are necessary to ensure a high level of economic security and a well-maintained network. And for the system to operate stably, the value of cryptocurrency must be maintained or rise. If the value of cryptocurrency falls suddenly, the economic security and network stability may decline proportionally.\n\nThe stability or increase in value of KAIA largely depends on its utility. This utility comes from a large number of people using and burning KAIA, which occurs when high-quality service providers actively provide services on Kaia Blockchain.\n\n#### Economically Sourced Incentives\n\nKaia Blockchain provides incentives through the issuance of new KAIA and transaction fees. Additionally, to maintain the value of KAIA as a means of economic support, sustainable methods for distributing and burning KAIA exist.\n\n##### Minting\n\nOn the Kaia Blockchain mainnet, a certain amount of KAIA is issued whenever a new block is created. Each time a new block is created, a certain amount of KAIA will be newly issued, and the target initial annual inflation rate (amount of KAIA newly issued per year / total KAIA token in the market) of Kaia Blockchain will be set at 5.2%[^3]. The number of newly issued KAIA per block at this point is not permanently set; it can be changed through governance voting. By default, the inflation rate of KAIA reflects the economic growth rate of Kaia Blockchain. Although the goal is a lower value, the exact value will be determined through the governance. In the mid to long term, the inflation rate and new issuance quantity per block can be automatically calculated and applied based on the inflation algorithm inherent in the chain.\n\n[^3]: Specific figures are subject to change upon further review and governance approval.\n\n##### Transaction Fee\n\nKaia Blockchain has determined its transaction fee policy to maximize service orientation, user-centricity, and enterprise-friendliness while maintaining network stability. The transaction fee policy takes into account the following points pursued by Kaia Blockchain.\n\n- Improved User Experience\n  - We aim to minimize complicated or unnecessary procedures when users pay transaction fees. This will allow users not familiar with blockchain technology to easily use Kaia Blockchain. For example, tasks such as manually entering gas prices should be minimized. The volatility of the transaction fee should also be minimized so that users can use Kaia Blockchain comfortably.\n\n- Improved Operational Processes for Service Providers\n  - Service providers can pay for the transaction fees on behalf of users through the unique account model in Kaia Blockchain. Therefore, business convenience for dApp service providers is also a major consideration in fee policy.\n  - The basic elements to reduce the burden on service providers are low transaction fees and low volatility fee policies. The low fee is to assist in the expansion of services using the fee delegation feature in the Kaia account model, while the low volatility is to help predict business costs due to the payment fee.\n\n- Protection against Network Attacks\n  - Blockchain data storage and computation incur costs. Without transaction fees, attackers may DDoS or spam attack the blockchain by sending meaningless transactions. To prevent meaningless transactions, a reasonable fee will be imposed on transactions.\n\nKaia Blockchain applies a dynamic gas fee model to the network to achieve the above goals. In the dynamic gas fee model of Kaia Blockchain, a low fee is applied in general cases where there are not many transactions on the network. However, in special situations such as a rapid increase in transactions on the network or a DDoS or spam attack, the gas fee increases. This results in a reduction of meaningless transactions. The dynamic gas fee model could change the gas fee per block unit dynamically depending on the transaction congestion within the network, but the range of change is predictable to some extent. Transactions entered into a block have transaction fees calculated with an identical block gas fee (baseFee), and only transactions with a gas fee greater than or equal to the block gas fee can be entered into the block. Block gas fees automatically increase or decrease depending on the gas usage of the previous block with the current maximum fluctuation set to 5%. A portion of the transaction fee used in each block is set to be automatically burned. Various parameters of the dynamic gas fee model can be changed via the governance function.\n\nThe transaction fees for Kaia Blockchain are currently determined by applying a dynamic gas fee model. However, a new gas fee model or transaction fee policy may be required according to the environmental changes. If necessary, changes to the gas fee model or transaction fee policy of Kaia Blockchain will be made through the governance process.\n\n##### Block Reward Distribution\n\nThe block reward for each block is determined by the sum of the KAIA issued at the time of block creation and the transaction fee. This is distributed as follows. However, the specific ratio and category of the block reward distribution may be changed by governance.\n\n- Validators and Community: 50%\n  - Of the 50%, 20% is block proposer rewards\n  - Of the 50%, 80% is staking rewards\n- KEF (Kaia Ecosystem Fund): 25%\n- KIF (Kaia Infrastructure Fund): 25%\n\n##### Burning\n\nThe method for maintaining or enhancing the KAIA value is an essential element of any incentive structure based on KAIA. In Kaia Blockchain’s ecosystem growth stage, the additional issuance of the KAIA motivates the ecosystem members to participate. However, a method to control the circulation volume is necessary for it to operate as a long-term sustainable incentive. Kaia Blockchain 3-Layer Burn Model prevents excessive inflation. The 3-Layer Burn Model is an extensive concept that includes not only the inherent burning function of Kaia Blockchain but also the burning concept that can occur through relationships with ecosystem projects. This extensive burn model will effectively regulate circulation volume and provide stable value incentives to the network participants when the Kaia Blockchain ecosystem reaches maturity. The description of each Layer is as follows.\n\n1. Transaction-Based Burning\n\nThis is the default burning method provided by Kaia Blockchain. Users generate transactions to use the blockchain and a portion of the transaction fee is automatically burned. Since transaction-based burning can be interpreted as reduced profits of the node operators, the burning extent is adjusted through agreement and consensus among key network participants through on-chain governance.\n\n2. MEV(Maximal Extractable Value) Burning\n\nA validator may receive additional profits (e.g. maximal extractable value) by taking advantage of the fact that they can determine the transaction order during the block proposal process. This structure can escalate into issues of censorship or unfairness. As a result, Kaia Blockchain seeks to share the authority of the validator among all users through the implementation of technologies such as on-chain auctions. Part of the profit generated in this process will be burned due to it being generated through a special structural qualification called a validator.\n\n3. Business-Based Burning\n\nBusiness-based burning is not an inherent function of Kaia Blockchain. Rather it is implemented through the ecosystem services and business relationships. Ecosystem services can receive support from protocols such as Kaia Ecosystem Fund to initially accelerate growth. Additionally, the value of KAIA or the activation of Kaia Blockchain affects the activation of services considering services utilize blockchain functions. Kaia Blockchain encourages the ecosystem services to install the concept of burning KAIA within the service to ensure that the service and blockchain maintain the value of KAIA under the same goal.\n\n### Validator Incentives\n\nValidators are operators in Kaia Blockchain who are responsible for block creation and verification based on the consensus algorithm. Validators are required to stake at least 5 million KAIA on the nodes they operate. In addition, validators participate in the on-chain vote of Kaia Blockchain and have the qualifications of GC (Governance Council), which makes key decisions in the ecosystem. In the future, the concepts of validator participating in block creation and GC participating in decision-making will be separated, so that anyone meeting certain conditions could participate in block creation and verification even if they are not a GC. Research and development of building this permissionless network is in progress.\n\nTwo types of incentives are provided to encourage validators to operate nodes: block proposer rewards and staking rewards.\n\n- Block proposer rewards are for the act of participating in block creation and verification. At the time of block creation, an identical amount of KAIA will be distributed to all validators activated on the network. 10% (20% of the 50% Validator and Community Rewards) of the total annual inflation issued will be allocated as block proposer rewards. However, the size of the reward in a specific block may vary depending on the number of validators active at a specific time.\n\n- Staking rewards are for staking KAIAs and contributing to the network stability and economic stability of Kaia Blockchain. The size of the reward is determined in proportion to the amount staked by a specific validator to the total amount of KAIA staked by all validators. However, the 5 million KAIA staked by each validator as an obligation is not reflected in determining the staking reward size. 40% of the total inflation will be allocated as staking rewards. The size of the rewards in a specific block may vary depending on the number of the total KAIA staked by the validators active at a specific time.\n\n#### Kaia Blockchain Validator Reward Mechanism\n\nEvery block will have a committee made up of randomly selected validators. Each committee will have one member to act as a proposer, and all other committee members will act as verifiers. When a block is successfully created and added to Kaia Blockchain, the proposer of that block will be rewarded with 10% (20% of the 50% Validator and Community Rewards) of the total annual inflation issued and additional transaction fees. With regard to transaction fees, if the total amount of transaction fees incurred in one block is less than the block reward, the fees will be burned. If the transaction fee exceeds the block reward, half of the exceeded amount will be burned and the remaining half will be rewarded to the block proposer. Staking rewards equivalent to 40% (80% of the 50% Validator and Community Rewards) of the total annual inflation issued are shared among the validators in proportion to their staking amount. As long as the Kaia Blockchain validators meet the minimum 5 million KAIA staking requirement, they are free to stake or unstake their KAIA. Staking information changed within the staking update cycle will have a final update in the last block of each cycle. Another cycle is required for the updated information to be reflected in the block incentive. For example, staking information added at block 80,000 will be last updated at block 86,400 and reflected in incentives starting at block 172,800. A one-week delay is required to withdraw the staked KAIA to prevent any immediate withdrawals by malicious members.\n\n### Kaia Blockchain Fund\n\n#### Background\n\nThe financial resources of the Kaia Blockchain ecosystem are reorganized and operated into the Kaia Ecosystem Fund (KEF) and Kaia Infrastructure Fund (KIF). Both KEF and KIF will be used to establish stable integrated governance and an active ecosystem and will be transparently executed according to the agreed-upon ratio. The usage plan of the ecosystem resources will be shared with the community in advance. Especially for KEF, individual expenditures will be executed with GC approval. This will allow all ecosystem participants to be proactively aware of the impact of the ecosystem resource execution.\n\n#### Kaia Ecosystem Fund\n\n##### Definition\n\nKaia Ecosystem Fund (KEF) is a financial resource used to ensure the sustainability of Kaia Blockchain mainnet by strengthening the basic ecosystem infrastructure, supporting developers, and returning profits through indirect investments back to the ecosystem. For this purpose, 25% of the total KAIA issued when creating a block will be distributed to KEF. KEF can only execute funds for agreed purposes with prior approval from the governance with all execution details being transparently disclosed.\n\n##### Usage\n\nThe uses of KEF are categorized as follows:\n\n1. Service Contribution Reward (SCR): This reward is given to service developers or users operating on the integrated ecosystem, as compensation for directly or indirectly contributing to the enhancement of the ecosystem's value.\n\n2. Developer Community Development: This includes support for various hackathons, operation of development education programs, collaborative research with academia, and collaborations with various DAOs.\n\n3. Ecosystem Services and Infrastructure Development: This involves the development of services with clear utilities, support for marketing, and securing essential infrastructure for the ecosystem.\n\n4. KEF Indirect Investment: This involves medium to long-term investments carried out indirectly through delegation to professional crypto Venture Capitals. A portion of the profits generated from the recovery of investment amounts is either burned or returned to the Kaia Blockchain ecosystem.\n\n5. Governance Committee Budget: This budget is allocated for the operation of committees in specific sectors such as Gaming, DeFi, and Community. The committees aim to grow the Kaia Blockchain ecosystem in their respective sectors through expertise in investing, marketing, grants, and providing liquidity.\n\n6. Other ecosystem and community-building activities\n\n##### Execution Method\n\nKEF operates under a system where the Governance Council (GC) reviews and approves the use of its funds. The budget executed through the foundation is managed through the following process:\n\n1. Each quarter, necessary budgets by category of expenditure are reported to and approved by the GC.\n\n2. Within the approved budget limits, specific expenditures are also approved individually by the GC.\n\n3. Details of the expenditures are transparently disclosed after their use.\n\nEven if not through the foundation, new proposals for the use of KEF can be made via the GC, and these specific proposals will also require individual approval by the GC. Plans are in place to develop and enhance a structure that allows more ecosystem participants to efficiently propose and participate in the use of KEF. Additionally, for some categories requiring more specialized and rapid decision-making, separate governance committees may operate.\n\n#### Kaia Infrastructure Fund\n\n##### Definition\n\nKaia Infrastructure Fund (KIF) is a financial resource used for purposes such as R&D, ecosystem acceleration, and foundation operation. For this purpose, 25% of the total KAIA issued when creating a block will be distributed to KIF.\n\nKIF is executed by the foundation through an internal control system after a prior announcement of the budget plan for each detailed category with all execution details being transparently disclosed.\n\n##### Usage\n\nThe uses of KIF are categorized as follows:\n\n1. Mainnet and Essential Infrastructure R&D: Advance research on the latest technologies related to mainnet and infrastructure, foundation-led service development, infrastructure establishment, etc.\n\n2. Ecosystem Acceleration: Token swap, financial support for small-scale Kaia Blockchain ecosystem partners, attraction of new GC, provision of market liquidity, etc.\n\n3. Operation of Kaia Foundation: Operating costs (various service costs such as development, accounting, legal affairs, as well as IT infrastructure operation costs, marketing costs, labor costs, etc.), financial management, fundraising, etc.\n\n##### Execution Method\n\nThe foundation directly establishes a budget plan and executes the funds accordingly for KIF. To ensure transparent execution, the foundation discloses the budget plans and execution details in advance and afterward.\n\n1. Establishment of the budget and fund execution plan by the foundation\n\n2. Disclosure of the budget plans by detailed category\n\n3. Disclosure of the execution details after executing the funds through an internal control system by the foundation\n\n### KAIA Issuance/Distribution Plan\n\nAs the Klaytn and Finschia ecosystems merge, KLAY and FNSA, which were the base coins of each ecosystem, will also be consolidated into KAIA. Consequently, the issuance and circulation plan for KAIA will inherit the plans from KLAY and FNSA. This section will examine the historical issuance and circulation data of KLAY and FNSA and, based on this, will outline the plan for the issuance and circulation of KAIA.\n\n#### KLAY Issuance/Distribution Status\n\n##### KLAY Issuance and Burning Volume\n\nOn June 24, 2019, a total of 10 billion KLAY were issued on the genesis block at the launch of the mainnet of the Klaytn Blockchain. After the launch of the mainnet, a 3% annual inflation rate was applied based on the genesis issuance volume, newly issuing 9.6 KLAY in each block starting from block 1. Based on the decision of [[KGP-3]](https://govforum.klaytn.foundation/t/kgp-3-reduction-of-klaytn-block-reward/117) in October 2022, 6.4 KLAY have been issued for each block starting from November 13, 2022 (#106444801). As for the KLAY burn volume, a portion of the genesis reserve was burned based on [[KGP-6]](https://govforum.klaytn.foundation/t/kgp-6-proposal-to-establish-a-sustainable-and-verifiable-klay-token-economy/157) of April 16, 2023, and a portion of circulating supply was burned based on the transaction fee burning and buyback burning. As a result, the estimated total supply is 5,971M KLAY at the time of integration, as of June 27, 2024.\n\n##### KLAY Private Sale\n\nKLAY did not conduct an ICO after issuance and only conducted private sales for institutional investors.\n\nThe private sales were divided into ER (Early Round) and PR (Private Round) from 2018 to 2019. The quantity sold through the private sales was 1,624,251,988 KLAY. The funds were used as operating funds for the mainnet development and operation, and ecosystem expansion. Approximately 1.62 billion KLAY sold through private sales were all unlocked in March 2021 after a step-by-step vesting period, and are already included in the circulating supply.\n\n##### KLAY Circulating Supply\n\nThe circulating supply of a cryptocurrency is the total currently tradable supply of the total issued volume of a specific existing cryptocurrency. In other words, it is the amount that is actually traded and distributed in the market. As of June 27, 2024, the expected integration date, the estimated total supply of Klaytn Blockchain will be 5,971M KLAY, excluding the not yet distributed Klaytn Community Fund (KCF)[^4] of 153M KLAY, Klaytn Foundation Fund (KFF)[^5] of 29M KLAY, and KLAY Value Creation Fund (KVCF)[^6] of 2,000M KLAY. These numbers are current estimates and may vary slightly due to block generation status, inflation, and governance proposal approvals. Considering that KVCF requires separate approval from the GC, the circulating supply increases when the execution of KCF or KFF is decided and executed. On the other hand, the circulating supply decreases when it is burned due to transaction fees or buybacks. Accordingly, as of June 27, 2024, the total issued supply is 5,971M KLAY while the circulating supply is 3,789M KLAY. There are no plans to use the KVCF until the time of the merger. The KLAY circulating supply will be inherited by the initial circulating supply of KAIA after the chain and token merger.\n\n[^4]: A fund created to revitalize the Klaytn ecosystem and onboard developers, and expenditures are determined after governance approval.\n[^5]: A fund created to operate the existing Klaytn Foundation, and expenditures are also determined after governance approval.\n[^6]: A reserve created in preparation for the dramatic growth of the Klaytn blockchain.\n\n### FNSA Issuance/Distribution Status\n\n#### FNSA Issuance and Burning Volume\n\nFNSA of Finschia has been automatically issued in each block at an inflation rate of 15% per year on the current total supply according to the Issuance mechanism of the protocol. Initial total supply was 6,734,458 FNSA. The FNSA issued is distributed to the Network Contribution Reward, Service Contribution Reward, and Reserve at a corresponding ratio of 5:3:2 according to the distribution mechanism. No volume of FNSA was burned. As of June 24 2024, the expected integration date, the estimated total number of FNSA issued through inflation is 7.967M FNSA.\n\n##### FNSA Private Sale\n\nFNSA did not conduct private sales.\n\n##### FNSA Circulating Supply\n\nThe total supply and circulating supply of FNSA are equal. In other words, there is no separate uncirculated volume. Additionally, FNSA will set the inflation to 0% and stop new issuance after prior notice before the integration to ensure smooth integration with KLAY. As of June 24 2024, the expected integration date, the estimated total number of FNSA issued through inflation is 7.967M FNSA. The final confirmed total supply of FNSA will be included in the initial distribution of KAIA and inherited according to the agreed-upon exchange ratio.\n\n#### KAIA Issuance/Distribution Plan\n\nThe KAIA token is created by combining the existing KLAY tokens and FNSA tokens at the time of integration. There may be slight changes in the circulating supply of KLAY and FNSA tokens before the integration through the inflation and burning of block rewards. The circulating supply of the existing KLAY and FNSA at the time of integration will be included in the KAIA circulating supply according to the corresponding exchange rate. Details will be guided through a separate post-announcement by the foundation. The exchange rate for each token to KAIA is as follows:\n\n- KLAY: KAIA = 1:1\n\n- FNSA: KAIA = 148.079656:1\n\nThe estimated circulating supply at the time of integration and KAIA circulating supply can be explained separately as follows:\n\n##### Estimated Supply of KLAY and FNSA\n\n- Estimated Circulating Supply[^7]\n  - KLAY: 3,789M KLAY\n  - FNSA: 7.967M FNSA\n- Estimated Uncirculated Volume\n  - Klaytn Value Creation Fund (KVCF): 2,000M KLAY\n  - Klaytn Community Fund (KCF): 153M KLAY\n  - Klaytn Foundation Fund (KFF): 29M KLAY\n\n[^7]: The circulating supply of the Klaytn and Finschia chain may change due to block rewards, etc. until the chain merger.\n\n##### Estimated KAIA Issuance Volume\n\n- (+) Conversion of circulating supply (4,968M KAIA)\n  - Converted KLAY circulating supply: 3,789M \\* 1 = 3,789M KAIA\n  - Converted FNSA circulating supply: 7.967M \\* 148.079656 FNSA = 1,179M KAIA\n- (-) Burning of uncirculated volume\n  - KVCF + KCF + KFF = 2,182M KAIA = Burn 1,382M KAIA out of 2,182M KAIA\n- (+) Conversion[^8] of uncirculated volume remaining after burning into circulating supply\n  - LINE NEXT Delegation: 330M KAIA\n  - Kaia Ecosystem Fund: 270M KAIA\n  - Kaia Infrastructure Fund: 200M KAIA\n\nSince the entire uncirculated amount gets burned at the time of KAIA conversion, the total supply and the circulating supply match. The estimated circulating supply at this time of integration is about 5,768M KAIA.\n\nHowever, the mentioned numbers are based on the issuance and circulating supply estimation as of May 14, 2024, GST, and the final figures may change depending on the inflation of Klaytn and Finschia.\n\nThe circulating supply after the token merge may increase according to the measures mentioned in [Kaia Blockchain Fund](#kaia-blockchain-fund) or decrease due to burning. However, as specified in the relevant section, any additional supply must be announced in advance or approved by governance.\n\n[^8]: Future circulation will only change due to inflation and new burning models. Incorporation of the circulation amount of the fund does not necessarily mean liquidation, and it will be executed transparently only within the scope of governance approval.\n\n#### Treasury Rebalance Plan\n\nWith the launch of the Kaia Blockchain, the new tokenomics mentioned in the Tokenomics section will be applied. This involves a massive scale of tokens, including the conversion of existing FNSA and KLAY circulations to KAIA, new fund allocations, and burned tokens. A treasury rebalance event will occur only once at the launch, which is a critical process that must be systematic, transparent, and auditable. To ensure this, all procedures will be meticulously recorded in smart contracts. Moreover, given the large volume of tokens involved, it is vital to apply various technologies to prevent errors (such as fat finger errors) and minimize security risks. The application of the new tokenomics is structured to proceed safely only after several conditions are met. Ultimately, the new tokenomic state is achieved through the consensus of validators, relying on the highest level of security available on the blockchain.\n\nThe overall process is as follows. A contract named TreasuryRebalance is deployed, followed by the uploading of a rebalance configuration into this contract. All stakeholders whose balance will be altered must approve of the configuration. Once all stakeholders have approved, block validators check the validity of the contract at the hardfork block at which the rebalance event takes place. Provided all conditions are met, block validators execute the rebalance event and reach a consensus. After the event was successful, an execution receipt which block providers output will be uploaded to the contract so that anyone can view the rebalance result.\n\nTreasuryRebalance contract is implemented as a finite state machine and has the following states:\n\n- Initialized: right after the deployment. In this state, a list of addresses whose balance will be zeroed, namely “Zeroed”, and addresses whose balance will be allocated, namely “Allocated”, can be registered.\n\n- Registered: after all Zeroed and Allocated has been registered. In this state, there cannot be further registration. All owners of Zeroed must send a consent transaction, which indicates that they approve that their balance will be burnt.\n\n- Approved: after all consents have been collected, the contract can enter Approved state. Any change in this contract is prohibited until the hardfork block passes.\n\n- Finalized: After the hardfork block, the rebalance result, namely “memo”, is recorded and the contract is finalized. The contract is rendered immutable.\n\nThe state transition is only possible in the following order. However, there can be a “reset” where all data is deleted and the state goes back to initialized.\n\n![](/img/misc/state-machine.jpg)\n\nAll block validators validate the contract state at the hardfork block. The rebalance event takes place only in the Approved state where no further change can happen. Since this event depends on the consensus of all validators, it is ensured that all validators reach the same world state after this event. \n\nAll block validators produce the result of the rebalance event called memo in their validator log. The memo is uploaded to the TreasuryRebalance contract during Finalize. memory is a JSON-formatted string which contains information such as the balance of Zeroed before the rebalance, the balance of Allocated after the rebalance, and the burnt amount. The admin of treasury rebalance validates the consistency of the memo and uploads it to TreasuryRebalance contract. After finalization, the contract becomes immutable forever.\n\n## Governance\n\n### Governance Core Components\n\nKaia Governance operates based on three main components: Kaia Community, Kaia Council, and Kaia Foundation. Kaia Community encompasses all KAIA holders, who have the right to express their opinions on Kaia Mainnet operations via the governance forum and social channel. Kaia Council represents the community and directly participates in the governance decisions of the project based on the coins it holds and voting rights delegated from the community. Lastly, Kaia Foundation utilizes its expertise in blockchain and Web3 technology to provide evidence, based on professional knowledge and data that could assist Kaia Council in making decisions and implementing the decisions made through governance. Kaia Governance ensures effective decision-making and execution with this systematic structure and pursues transparent and fair community operation.\n\n### Governance System\n\nKaia Governance respects the diversity of the governance system and seeks to create a diverse governance ecosystem through the coexistence, cooperation, and competition of multiple systems. It encompasses various forms of governance found in the real world ranging from representative democracy, where each individual grants voting rights to decision-makers to representatives, the DAO system, where all members participate in the decision-making process of the organization, and capitalism, where shareholders influence company decisions through representatives designated by shareholders. Kaia Governance seeks to lay the foundation for a transparent and fair blockchain ecosystem through this comprehensive approach. Its vision is to build a stronger and more flexible system by combining the strengths of multiple governance models.\n\n### Community-Centered Governance\n\nAt Kaia, organizations based on various governance systems will participate in governance, express their opinions, and thereby prove the excellence of their systems. More holders and assets will be concentrated in systems that have proven their greater contribution to the sustainable development of the Kaia ecosystem, resulting in more decision-making authority being concentrated in members with successful systems. Also, the council members will replicate successful governance, expanding the system.\n\nAs time passes, optimized governance systems for new trends will emerge. Kaia Governance will continue to develop focusing on the optimized governance system in line with these changes, which will contribute to an increased efficiency of the entire ecosystem. In the process, Kaia will present an example of a governance system with both diversity and flexibility and will lead the innovation in governance in the blockchain ecosystem.\n\nKaia builds the Kaia Governance system based on the belief that Web3 innovation has its roots in the participation of various communities. In line with this hypothesis, greater importance is given to community input in the decision-making process. As a result, it ensures that decision-making power is fairly distributed among different council members. Through this approach, Kaia Governance aims to foster sustainable development and innovation in Web3 by prioritizing the voices of the community and creating a more inclusive and diverse decision-making environment.\n\n### Governance Direction\n\nKaia Governance adopts a strategy of adjusting the pace of the governance process, considering changes in the cryptocurrency market and the development stage of the Kaia ecosystem. The discussion and processing speed of the agenda are determined through a consensus between the foundation, council, and community, which reflects the rapidly changing cryptocurrency market situation and the ongoing growth process of Project Kaia. Currently, in 2024, the ecosystem of Project Kaia is still in the development stage despite the rapid progress over the past five years, and Kaia takes a governance approach with growth as its priority. By establishing a structure where the agendas can be discussed and decided quickly, the project plans to proactively respond to the changing market environments and accelerate the growth of the ecosystem.\n\n## Technology\n\n### Overview\n\nKaia Blockchain has three primary technical objectives.\n\nFirst, performance is paramount. The blockchain emphasizes rapid finality, ensuring that users receive immediate responses. It also aims to process a high volume of user requests quickly, enabling blockchain applications (dApps) on Kaia Blockchain to offer a user experience comparable to conventional mobile apps.\n\nSecond, transparency is crucial. Decision-making at the layer 1 protocol has widespread implications across the ecosystem. Therefore, decisions should be made transparently through on-chain governance. Furthermore, Kaia Blockchain intends to publicly disclose all elements related to the operation of the blockchain network, ensuring that it is fully verifiable by anyone.\n\nThird, sustainability is essential. Operating a blockchain over the long term presents various challenges, such as the continuous increase in block data and the economics necessary to sustain network operations. Kaia Blockchain is designed to reduce operational costs and increase profitability, ensuring its long-term viability.\n\nThe forthcoming content will cover two main topics. The first is the genesis of the Kaia Blockchain, describing the technologies applied, including consensus mechanisms, smart contracts, and on-chain governance, which collectively reflect the extensive technical considerations made to achieve its goals. The second topic is the evolution of the Kaia Blockchain. It will introduce a variety of new technologies that are planned for the near future, including maintaining high performance while allowing anyone to operate a validator node in a permissionless manner, enhancing transparency in block transaction ordering to mitigate the negative effects of Maximal Extractable Value (MEV), and block archiving techniques for swift verification of historical blocks. These innovations will set the Kaia Blockchain apart, enhancing its uniqueness and attractiveness.\n\n### Birth of Kaia Blockchain\n\nTo achieve the aforementioned technical goal, Kaia Blockchain is launched with various technical features. Specifically, the performance goal is facilitated by consensus and network topology, and the transparency and the sustainability is facilitated by smart contracts and on-chain governance. The initial performance of Kaia Blockchain is as follows:\n\n- Process 4,000 transactions/sec (TPS)\n\n- Instant transaction finality\n\n- Creation time of 1 block/second\n\n#### Consensus and Networking\n\nBlockchains use a “distributed ledger,” which consists of a connected network between individuals with several network participants to record and manage the transaction information. Each blockchain adopts a consensus algorithm that is most suitable for it, with the aim of efficient and smooth consensus on transaction validation and block generation among network participants. These consensus algorithms help the system to reach a consensus on the correct state, even if there is a system failure or malicious attack on the network. They play an important role in ensuring the integrity and stability of the blockchain.\n\n##### IBFT (Istanbul Byzantine Fault Tolerance)\n\nKaia aims to become an enterprise-support and service-oriented platform. Therefore, the finality problem must be solved, with the network allowing many nodes to participate in the network. For this purpose, Kaia uses an optimized version of Istanbul BFT, which implements PBFT with modifications to suit the characteristics of blockchain networks.\n\nKaia Blockchain has three types of nodes: Consensus Node(CN), Proxy Nodes(PN), and Endpoint Nodes (EN). CN is managed by a validator and is responsible for block creation. These blocks are verified by all the nodes within the network.\n\n![](/img/misc/kaia-nodes.jpg)\n\nKaia Blockchain has adopted and enhanced Istanbul BFT to achieve rapid finality. Since validation and consensus occur with each block, there are no forks, and the finality of the blocks where consensus is reached is immediately guaranteed. Block proposers are selected in an unpredictable manner using a Verifiable Random Function (VRF), thereby offering high resistance to centralized Denial of Service (DoS) attacks. CN must deposit a certain amount of tokens, maintaining reasonable networking costs while enabling easy operation by any EN, thus enhancing the scalability of the blockchain network usage.\n\n##### Multi-channel Broadcast\n\nNetwork latency is greatly affected by network congestion. Assuming the throughput of the network is constant, network latency increases proportionally to the increase in the number of transactions. General users of mobile apps or web services do not tolerate response times longer than a few seconds, and there is no reason to assume that blockchain services will have greater user patience.\n\nKaia Blockchain adopts a multi-channel approach to deal with network congestion. By allocating separate propagation channels to transactions and blocks, the Kaia network can propagate newly created blocks in a timely manner even when the network faces severe congestion due to a large number of transactions. In turn, Kaia guarantees the dApps on the network to continue responding to end-user requests despite intermittent network traffic surges.\n\n##### Consensus Process\n\nThe consensus process consists of the following three stages:\n\n1. Election: The Committee is composed of Consensus Nodes (CNs) that participate in achieving consensus. This is a similar task to the leader election in a general distributed system. The proposer is randomly selected through VRF since knowing them in advance can make them vulnerable to targeted DoS (denial of service).\n\n2. Block Generation: Elected proposers create a block and make a proposal to the committee. The block proposal made through the P2P network is sent to the committee.\n\n3. Block Verification: The committee verifies and signs the block proposed by the proposer. A block is complete when more than a quorum of signatures is collected.\n\n#### Account Model and Smart Contract\n\nKaia Blockchain offers scalability in service development through its expanded account model and smart contract capabilities. Smart contracts on the blockchain enhance the efficiency of transactions and contracts between individuals through contract automation, and the use of smart contracts has had a significant impact on the blockchain and dApp ecosystem. Contract conditions can be coded into smart contracts and automatically executed, solving the trusted intermediary issue. Smart contracts have allowed the blockchain ecosystem to create new business models and economic systems by reducing the cost and time required to complete transactions. Kaia Blockchain supports a distributed virtual machine for executing smart contracts, which is designed to be fast and efficient, providing the best and swiftest development environment for dApp developers and projects.\n\n##### Account Model\n\nThe Kaia Blockchain supports an expanded form of the Account Model. Inside the implementation of an EOA (Externally Owned Account) account, it is possible to store an Account Key, which is an expanded form of the EOA's Public Key. This information allows users to replace the Private Key associated with that account. Additionally, users can register multiple Private Keys for use in Multi-Signature setups or to separate roles among different Private Key users. The roles provided include the authority to create transactions, update registered keys in the Account, and permissions solely for fee delegation purposes.\n\n##### Kaia Virtual Machine (KVM)\n\nThe current version of Kaia Virtual Machine (KVM) is a derivative of the Ethereum Virtual Machine (EVM). It supports all Opcodes of the Ethereum Virtual Machine equally while providing additional precompiled contracts unique to the Kaia Virtual Machine. To prevent the additional precompiled contracts of Kaia from colliding with the precompiled contracts of the Ethereum Virtual Machine, the precompiled contract addresses of Kaia are given in a decreasing order starting from 0x03ff.\n\nKaia Virtual Machine provides several methods to write and run Smart Contracts on the Kaia network. Kaia supports Solidity and maintains interoperability with Ethereum development toolkits such as Remix, Hardhat, Truffle, and Foundry. A smart contract written with Solidity can be compiled using the existing Solidity compiler and can be run on Kaia without additional work. Solidity is the de facto standard contract programming language on Ethereum and is supported by an active community. Therefore, Kaia Blockchain supports the Solidity language to provide the most familiar development environment for Ethereum dApp developers allowing them to easily migrate their work.\n\n##### System contracts\n\nKaia Blockchain manages a part of protocol as smart contracts, which are called system contracts. Block validators directly or indirectly interact with system contracts. System contracts facilitate transparent and easy-to-access protocol operation. There is a specification that defines a Registry contract which will contain new system contracts. It can be viewed by a REST API and thus users can continuously check and monitor system contracts.\n\nSince system contracts can directly impact the blockchain protocol, they need to be managed in a highly secure manner. They are internally classified as the highest level of security, and thus they are managed as a multi-sig by default. Storing of keys and signing of transactions are performed in an isolated device which is never connected to online. In addition, there are internal manuals and tools for systematic management of system contracts.\n\nThese are essential system contracts:\n\n- AddressBook: a contract which manages a list of validators.\n\n- GovParam: a contract for on-chain governance on network parameters .\n\n- SimpleBlsRegistry: a BLS key storage for validators.\n\n#### On-Chain Governance\n\nOn-chain governance is an on-chain decision-making system among stakeholders. On-chain governance is implemented in a structure including smart contracts and has several advantages over off-chain governance. The entire process of governance is transparently recorded, and anyone can check the progress of governance on-chain (transparency). Since the governance process proceeds solely according to the contract logic, the voting and results cannot be tampered with maliciously (integrity). Therefore, the intentions of the participants can be reflected without any distortion in the governance process. Also, it is impossible to deny a vote because no one except the voter can vote (non-repudiation). As a result, the voters become accountable for their voting behaviors. An environment where the voting results can be enforced compulsorily or automatically can be created (enforceability). Without enforceability, the implementer may ignore the voting results, which will eventually reduce the credibility of governance.\n\nKaia Blockchain implements an on-chain governance system satisfying the above properties. The on-chain governance of Kaia Blockchain is designed to be fair and to ensure diverse opinions are shared. Voting entities can vote on all agenda items. Voting rights are calculated in proportion to the amount of staking. However, there is a cap on voting rights to prevent minority opinions from being ignored. Users can delegate their staking amount to other voters.\n\nThe voting process is transparent and open. Types of agendas include text agendas, parameter change agendas, and fund expense agendas. For some agendas, such as parameter change agendas, a transaction can be attached to the agenda. In this case, once the agenda is passed, the transaction will be automatically executed. This allows the mandatory performance of governance by automatically reflecting the changes in network parameters as well as executing funds through governance.\n\nOther than this, various detailed policy decisions, such as restrictions on voting rights, voting periods, and voter participation, are needed for a comprehensive and fair decision-making system. A highly reliable network will be built by establishing a governance system that harmoniously reflects the needs and expectations of various stakeholders.\n\n##### Governance Process\n\nThe overall governance process of Kaia is as follows:\n\n1. Discussion: Improve the agenda through free discussion among all participants off-chain.\n\n2. On-Chain Agenda Voting: Register the agenda on-chain and proceed with voting.\n\n3. Reflect Results (Activation): Implement when agenda items are approved.\n\n![](/img/misc/gov-process.jpg)\n\nAgendas registered on-chain go through several states until the voting is complete.\n\n- Pending: Status after the agenda is registered and until voting takes place. As the agenda is registered, the list of voters is determined.\n\n- Active: Voting is in progress. The voting power of the voters gets fixed when voting begins.\n\n- Passed: Agenda passed with the approval of a quorum.\n\n- Failed: Agenda rejected because it did not receive a quorum of approval votes.\n\n- Queued: Waiting period after the passing of the agenda and before the execution.\n\n- Executed: Agenda fully executed.\n\n![](/img/misc/gov-process-2.png)\n\n##### Enforceability\n\nKaia Blockchain is configurable via several network parameters, with which they can be altered by on-chain governance. An example of network parameters is “upperboundbasefee”, which defines the maximum value to which the dynamic gas fee can go up. There exists a system contract named GovParam, which enables the enforceability of the governance proposal. This contract is a key-value storage with an activation number for each key. A value of network parameter can be updated by submitting a tuple of (param as a key, new value, activation block number), which will be read by validators and be activated starting from the activation block.\n\n![](/img/misc/enforceability.png)\n\nThe above figure shows how network parameters are updated via on-chain governance. A governance proposal can contain a transaction, which will be executed once the proposal passes. When proposing, the proposer attaches a transaction which invokes GovParam. When the proposal passes, the secretary sends a transaction to execute the proposal, which will internally invoke the transaction contained in the proposal. Validators check GovParam every block and apply the new network parameter value at the activation block. In this way, the network parameters can be enforced in a decentralized manner.\n\n### Kaia Evolution\n\nThe Kaia Blockchain is committed to continuously adopting new technologies to achieve the three technical objectives introduced earlier. Some of these technologies are expected to be developed and implemented in the near future. Specifically, new technologies that Kaia blockchain will adopt can improve the aforementioned three goals; high performance permissionless allows anyone to become a node validator, mitigating the negative effect of MEV with transparent tx ordering, archiving old blocks in a verifiable manner, and public governance delegation can facilitate high performance, transparency, and sustainability.\n\n#### High-Performance Permissionless\n\nBFT-type consensus algorithms generally have restrictions in the process of participating as a validator. This is due to the tendency of the performance of the entire network to deteriorate caused by abnormal nodes when validators participate freely. As an integrated chain, Kaia pursues a completely permissionless network and will develop into a network where anyone can participate as a block creation node while maintaining high performance. After introducing the Permissionless Network, nodes meeting certain conditions will be given the role of block creation nodes. Specifically, an automated qualification verification process will be introduced to check whether the block creation node is qualified to maintain stability. In terms of consensus participating in the creation and verification of blocks, there are “candidates” and validators. In terms of governance, there are Governance Council Members. One can register as a candidate and meet specific conditions to become a validator. Validators can receive rewards by participating in the block creation consensus process. Permissionless Network is implemented through the following factors:\n\n- ***Unpredictable Proposer Selection Algorithm:*** An algorithm that strengthens resistance to DoS attacks by changing the block proposer selection method difficult to predict.\n\n- ***VRank (Validator Reputation Evaluation Framework):*** A framework that evaluates the reputation of a validator.\n\n- ***Autonomous Validator Slashing System:*** A system that penalizes erroneous or malicious actions of validators.\n\n- ***System Transaction and Consensus Msg:*** A reflection of the latest consensus information in the contract for each block through a “system transaction” automatically generated by the block proposer.\n\n#### Maximal Extraction Value\n\nMEV (Maximal Extractable Value) is the potential benefit that can be gained by strategically ordering or changing the transaction order in a block. MEV involves unfair practices, such as front-running, to gain profits at the expense of other users. Kaia Network aims to build a system that ensures a fair and transparent transaction order to mitigate the negative effects of MEV. Also, a method to redistribute or burn MEV extraction profits into the network ecosystem will be provided to support the sustainable development of the network. Lastly, a system to monitor and share transactions in real time will be implemented to prevent any unfair practices that may be carried out by validators, increasing the reliability of the network. This will not only increase the transparency and fairness of the Kaia network but will also greatly contribute to the sustainable development of the ecosystem.\n\n#### Block Data Archiving\n\nBlockchain continuously has an increase in the blocks (data) stored over time due to transaction history and execution of smart contracts. The capacity of Kaia Blockchain is growing even faster due to its short block time and high transaction throughput (TPS). As a result, the cost of new validators participating in the network and verifying the blocks by synchronizing them is also increasing. The volume of data accumulated over the years is not small, and it takes a lot of resources to verify it. High verification costs work as a barrier for new validators to enter, which can reduce the reliability of the chain. To solve this issue, Kaia Blockchain will study how to reduce the verification cost of past blocks. The following methods will be considered and introduced as they compress or archive old blocks in a verifiable manner so that only the archived data can be quickly verified without each block having to be verified.\n\n- **Verifiable block data compression:** Compresses blocks in a verifiable manner.\n\n  - Block data pruning at a certain block cycle or data unit\n\n  - Convert the blocks pruned in on-chain into a verifiable certificate and record in on-chain. This certificate is compressed and recorded as a Commitment using cryptography (such as KZG) or Proof using the recursion method of ZKP.\n\n  - Support a verification system that can verify certificates in on-chain\n\n    - Verification system efficiently and constantly verifies certificates.\n\n    - At the time of compression, the certificate is verified and recorded in the block when the next block is created.\n\n    - Anyone can verify the corresponding certificate through a verification system.\n\n- **Lightweight block synchronization:** When participating as a new node or verifier, synchronize and verify the compressed certificates and subsequent blocks rather than synchronize the entire block data.\n\n- **Support DA Layer:** Some users and dApps require a checkup on historical data. A DA Layer is provided to provide trusted data without faults.\n\nBy dramatically reducing the verification cost by the above methods, new validators will be able to onboard quickly.\n\n#### Public Delegation\n\nKaia Blockchain provides a function where validator operators can be delegated. To provide this function as a default, Kaia Blockchain will additionally develop and provide a contract providing a public delegation function in conjunction with staking contracts for validators. This will allow users to participate in governance in the future by expanding the voting power of voters by delegating tokens to other voters expressing opinions on their behalf. This structure is similar to representative democracy, a form of politics in which the people elect members of the National Assembly, and the members of the National Assembly vote when the National Assembly passes an agenda. The users, furthermore, can delegate or revoke their delegation whenever they wish in Kaia Blockchain. This will allow general holders to reflect their opinions in governance and a governance system respecting diverse opinions will be established.\n\n## Roadmap\n\nKaia Blockchain is an integrated mainnet platform that started with the integration of the Finschia Foundation and the Klaytn Foundation. Its core goal is to provide an infrastructure for the adoption of Web3. To achieve this goal, Kaia Blockchain seeks to facilitate the development of blockchain-based projects through builder-centric support. Through this, new potentials of Web3 technology will be explored. Kaia Blockchain provides developers with essential toolkits, SDKs, and IDEs to help them easily implement innovative and competitive solutions at all stages of project development.\n\nIn addition, strategies such as messenger integration through cooperation with Kakao and LINE will help Web2 users easily transfer to Web3. This approach will accelerate the adoption of Web3 technology and allow more users to experience the benefits of blockchain technology. Kaia Blockchain will foster the growth of a strong developer community and explore new possibilities in blockchain technology by enabling access to various infrastructure assets and KAIA funds while also supporting decentralized governance and permissionless participation.\n\nThe roadmap of the integrated mainnet focuses on supporting developers and driving Web3 adoption at the same time. This will enable Kaia Blockchain to help both developers and general users build successful projects, adopt blockchain technology more broadly, and establish a solid foundation to explore the new possibilities of the Web3 world.\n\n### Short-term Initiatives\n\n#### 2024 Q1\n\n- Construction and operation of the Klaytn & Finschia integrated TF\n\n#### 2024 Q2\n\n- Establishment of a new integrated chain brand\n- Establishment of a joint marketing system and community integration\n- Preparation for ecosystem infrastructure, DApp, and service migration (~Q4)\n- Network support for integration and response to existing DApps and services (~Q4)\n- Preparation for new integrated tokens issuance and swap service provision\n- Establishment of the 1st integrated network (EVM)\n\n#### 2024 Q3\n\n- Issuance of new integrated tokens and provision of swap services\n- Strengthening of the node user/community delegation function\n- Introduction of a new burning model (~Q4)\n\n#### 2024 Q4\n\n- Reorganization of the integrated foundation and promotion of joint business initiatives\n- Establishment of the 2nd integrated network\n\n### Long-term Initiatives\n\n#### Establishment of infrastructure for institutional needs\n\n- Establishment of integrated token, Fiat On/Off Ramp, for major Asian countries\n- Establishment of infrastructure for improved accessibility by institutional investors\n\n#### Strengthening of large-scale DeFi infrastructure\n\n- Establishment of a new De-fi ecosystem for the integrated mainnet\n- Expansion of RWA (Real World Asset) linked services\n\n#### Launching of native stablecoins\n\n- Launching of key stable coins based on the integrated mainnet\n- Expansion of native stable coin-based services\n\n#### Asian community boost-up\n\n- Re-establishment of developer and user communities in each Asian country\n- Expansion of governance and ecosystem partners in major countries\n\n#### Discovery of AI DApp categories\n\n- Establishment of new AI DApp categories and activation of onboarding\n- Discovery of generative AI-based content/avatar/game Dapps\n\n#### Large-scale on-chain tokenization of Web2 assets\n\n- Linking of Web2 digital items, memberships, and ticket markets\n- Discovery of large-scale item tokenization and mass adoption cases\n\n#### Onboarding of Asian SSS game companies\n\n- Interoperable game onboarding based on Brown Friends IP\n- Web3 game onboarding based on Japanese SSS-rated game company IP\n\n#### Cooperation in Global IP projects\n\n- Web3 project onboarding of large global IP companies\n- Strengthening of onboarding infrastructure for Web2 companies\n\n## Important Notes\n\n### Disclaimer of liability\n\nTo the maximum extent permitted by the applicable laws, regulations and rules, the Kaia Foundation shall not be liable for any indirect, special, incidental, consequential or other losses of any kind, in tort, contract or otherwise (including but not limited to loss of revenue, income or profits, and loss of use or data), arising out of or in connection with any acceptance of or reliance on this Whitepaper or any part thereof by you.\n\n### No representations and warranties\n\nThe Kaia Foundation does not make or purport to make, and hereby disclaims, any representation, warranty or undertaking in any form whatsoever to any entity or person, including any representation, warranty or undertaking in relation to the truth, accuracy and completeness of any of the information set out in this Whitepaper.\n\nNothing contained in this Whitepaper is or may be relied upon as a promise, representation or undertaking as to the future performance or policies of the Kaia Foundation. All information, features, issuances, distributions, and architectures are subject to change at any time, at the sole and absolute discretion of Foundation and/or Kaia Governance depending on the then current roadmap presented in this Whitepaper.\n\nFurther, the Kaia Foundation disclaims any responsibility to update any forward-looking statements or publicly announce any revisions to those forward-looking statements to reflect future developments, events or circumstances, even if new information becomes available or other events occur in the future.\n\nPlease note that this Whitepaper is also only a work in progress and the information in this Whitepaper is current only as of the date on the cover hereof. The Kaia Foundation reserves the right to update the Whitepaper from time to time.\n\n### Staking services\n\nIf you choose to participate in the KAIA staking programme, any such service provided to you may be facilitated by the Kaia Foundation acting as a transaction validator on the Kaia and providing its private nodes for staking on your behalf. Any applicable Delegation Rewards will be determined by the protocols of the Kaia and will be credited .\n\nYou acknowledge and understand that the Kaia Foundation does not guarantee that you will receive any Delegation Rewards and such staking services do not constitute a fixed deposit product or issuance of securities, which would fall under the regulatory scope of the FSMR.\n\nWithdrawal of staked assets may be delayed as a result of protocol unstaking periods or network conditions, and the Kaia Foundation cannot guarantee the timing and amount of the distribution of the Network Contribution Rewards. The Kaia Mainnet and relevant interfaces used for the delivery of KAIA staking services have inherent risks and the market for KAIA tokens and rewards may be highly volatile due to factors that include but are not limited to adoption, speculation, technology, security, and regulations. You agree and acknowledge that the Kaia Foundation is not responsible or liable for any of these variables or risks.\n\n### No advice\n\nNo information in this Whitepaper should be considered to be business, legal, financial or tax advice regarding the Kaia Foundation or KAIA. You should consult your own legal, financial, tax or other professional adviser regarding the Kaia Foundation and their businesses and operations, and KAIA. You should be aware that you may be required to bear the financial risk of any purchase of KAIA for an indefinite period of time.\n\n### Restrictions on distribution and dissemination\n\nThe distribution or dissemination of this Whitepaper or any part thereof may be prohibited or restricted by the laws, regulatory requirements and rules of any jurisdiction. In the case where any restriction applies, you are to inform yourself about, and to observe, any restrictions which are applicable to your possession of this Whitepaper or such part thereof (as the case may be) at your own expense and without liability to the Kaia Foundation. Persons who have been provided access to this Whitepaper or to whom a copy of this Whitepaper has been distributed or disseminated or who otherwise have the Whitepaper in their possession shall not circulate it to any other persons, reproduce or otherwise distribute this Whitepaper or any information contained herein for any purpose whatsoever nor permit or cause the same to occur.\n\n### Risks and uncertainties\n\nProspective purchasers of KAIA should carefully consider and evaluate all risks and uncertainties associated with the Kaia Foundation, and its businesses and operations, and all information set out in this Whitepaper and the T&Cs, prior to any purchase of KAIA.\n\nYou should not transact in KAIA if you are not familiar with digital tokens of this nature. Transacting in digital tokens may not be suitable for you if you are not familiar with the technology in which KAIA services will be provided.\n\nYou should be aware that the value of KAIA may fluctuate greatly. You should buy KAIA only if you are prepared to accept the risk of losing all the money you put into KAIA.\n\nAs previously indicated, participating dApps will receive allocations of KAIA from the Foundation that are to be distributed to dApp users. Subject to dApp’s respective distribution policies, dApps may from time to time, either directly or indirectly, make large distributions of KAIA to users, which could have the effect of increasing the overall supply of KAIA that is traded on relevant trading platforms. It is possible that such distributions could have a negative impact on the market price of KAIA, particularly if a large number of recipients of KAIA engage in sales of KAIA on relevant trading platforms in a short period of time. Please note that a specific way of each dApp’s distributions of KAIA may vary depending upon each dApp’s jurisdiction or country of registration to fully comply with applicable regulations.\n\n### KAIA issuance costs\n\nThe Kaia Foundation will, in any event, incur no costs in regard to any issuance or distribution of KAIA.\n\n**THERE IS NO GUARANTEE THAT THE FUNCTIONALITIES OF KAIA, OR THAT THE KAIA TOKEN ECONOMY INFRASTRUCTURE, WILL BE DELIVERED OR REALISED. IF ANY OF SUCH RISKS AND UNCERTAINTIES DEVELOPS INTO ACTUAL EVENTS, THE BUSINESS, FINANCIAL CONDITION, RESULTS OF OPERATIONS AND PROSPECTS OF THE KAIA FOUNDATION COULD BE MATERIALLY AND ADVERSELY AFFECTED. IN SUCH CASES, YOU MAY LOSE ALL OR PART OF THE VALUE OF KAIA. IN THE EVENT THAT YOU HAVE PURCHASED KAIA, YOUR PURCHASE CANNOT BE REFUNDED OR EXCHANGED.**\n\n**IF YOU ARE IN ANY DOUBT AS TO THE ACTION YOU SHOULD TAKE, YOU SHOULD CONSULT YOUR LEGAL, FINANCIAL, TAX OR OTHER PROFESSIONAL ADVISOR(S).**\n\n<!-- ## Appendix\n\n### Ecosystem\n\n1. Governance Council\n    - Kakao\n    - LINE\n    - LINE NEXT Corp\n    - Binance\n    - Softbank\n    - Animoca Brands\n    - Jump\n    - Netmarble(Marblex)\n    - Hashkey\n    - CertiK\n    - Crescendo\n    - Neopin\n    - AhnLab Blockchain Company\n\n2. Partners\n    - Opensea\n    - Dappradar\n    - SEGA\n    - Naver\n    - Shinsegae\n    - CJ ENM\n    - Double Jump\n    - YG Entertainment\n    - Messari\n    - Injective\n\nIn addition, it includes a cryptocurrency wallet built into the LINE messenger, Klip, a cryptocurrency wallet that integrates with Kakao Messenger, and supports over 400 dApps and partners.\n\n![](/img/misc/partners.jpg) -->",
    "Current Website Url is https://docs.kaia.io/learn/accounts. # Accounts\n\n## Kaia Accounts <a id=\"kaia-accounts\"></a>\n\n### Overview of Account, State, and Address <a id=\"overview-of-account-state-and-address\"></a>\n\nAn account in Kaia is a data structure containing information about a person's balance or a smart contract. Kaia's state is the collection of all its accounts' states - that is, the past and current state of all data stored across Kaia's accounts. When a transaction is executed on a Kaia node, the state of Kaia consequently changes across all its nodes. The state should be the same across all nodes in the Kaia network if they have processed the same blocks in the same order. State information of each account is associated with a 20-byte address, which is used to identify each account.\n\n### Decoupling Key Pairs From Addresses <a id=\"decoupling-key-pairs-from-addresses\"></a>\n\nAn account in a typical blockchain platform is associated with a cryptographically processed address of a certain length that usually looks like this: \"0x0fe2e20716753082222b52e753854f40afddffd2\". This address is strongly coupled with a key pair. If a key pair is chosen, the address is derived from the public key. This has many disadvantages in terms of user experience. Some of them are the following:\n\n* It is impossible for users to have addresses they want.\n* It is impossible for users to use multiple key pairs to increase security of their accounts.\n* It is impossible for users to change the account's key pair when the private key is accidentally exposed or when users want to update the private key periodically to increase the account's security.\n\nThose are big hurdles that users cannot think of an address as an identifier in the blockchain platform. To clear this hurdle, Kaia provides a feature that users can choose their addresses and key pairs. With this feature, users can choose addresses that they want and they can use multiple key pairs to increase security. The number of key pairs can be one or more, and the key pairs can have different roles. For details of multiple key pairs or role-based keys, please refer to [Multiple Key Pairs & Role-Based Keys](#multiple-key-pairs-and-role-based-keys).\n\nIt is worth noting that Kaia also supports the old scheme that a key pair and an address are strongly coupled.\n\n### Multiple Key Pairs and Role-Based Keys <a id=\"multiple-key-pairs-and-role-based-keys\"></a>\n\nAs described before, when the private key is stolen, exposed, or somehow compromised, there is nothing to do to restore the account’s security: the best option is to generate another key pair to create a new account, and migrate the balance from the old compromised account to the new one. Lack of support for advanced key schemes such as multi-sig or usage-specific key is yet another source of major inconvenience. To address those problems more efficiently, Kaia accounts provide the following capabilities:\n\n* Kaia account allows the key pair associated with the account to be changed.\n* Kaia account supports multiple key pairs, along with the ability to assign each key with different purpose.\n* Kaia account maintains compatibility with accounts having a single key that is strongly coupled with the address.\n\nBy utilizing Kaia account’s role-based multi-key support, end-users can better handle real-life security risk situations such as private key mismanagement. For example, when a user realizes that his or her private key has been exposed, the user can simply replace the compromised private key by removing the exposed key pair from his or her account and creating a new key pair to replace them. This could be achieved by using a dedicated key used for updating account information, created in advance and stored separately from the compromised private key.\n\n### Kaia Wallet Key Format <a id=\"kaia-wallet-key-format\"></a>\n\nKaia wallet key format is provided to easily handle a private key along with the corresponding address. It makes easier for a user to maintain his/her private key with an address. The format is `0x{private key}0x{type}0x{address in hex}` in hexadecimal notation, where `{type}` must be `00`. Other values are reserved. An example is shown below:\n\n```text\n0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d80x000xa94f5374fce5edbc8e2a8697c15331677e6ebf0b\n```\n\n### Kaia Account Types <a id=\"kaia-account-types\"></a>\n\nThere are two types of accounts in Kaia: <LinkWithTooltip to=\"../../misc/glossary#externally-owned-account-eoa\" tooltip=\"User-controlled blockchain accounts for transactions,<br /> secured by a private key.\">externally owned accounts</LinkWithTooltip> \\(EOAs\\), and <LinkWithTooltip to=\"../../misc/glossary#smart-contract-account-sca\" tooltip=\"Blockchain account with programmable logic <br />for automated transactions.\">smart contract accounts</LinkWithTooltip> \\(SCAs\\).\n\n#### Externally Owned Accounts \\(EOAs\\) <a id=\"externally-owned-accounts-eoas\"></a>\n\nExternally owned accounts have information such as nonce and balance. This type of accounts does not have code or storage. EOAs are controlled by private keys and do not have code associated with them. An EOA can be created using key pairs and subsequently controlled by anyone with the key pairs. The account key is described in the section [Account Key](#account-key).\n\n**Attributes**\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of externally owned accounts. It must be **0x1** for EOAs. |\n| nonce | uint64 \\(Go\\) | A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value. |\n| balance | \\*big.Int \\(Go\\) | The amount of KAIA the account has. |\n| humanReadable | bool \\(Go\\) | A boolean value indicating that the account is associated with a human-readable address. Since HRA (human-readable address) is not supported yet, this value is false for all accounts. |\n| key | [AccountKey](#account-key) | The key associated with this account. This field can be any of [AccountKeyLegacy](#accountkeylegacy), [AccountKeyPublic](#accountkeypublic), [AccountKeyFail](#accountkeyfail), [AccountKeyWeightedMultisig](#accountkeyweightedmultisig), [AccountKeyRoleBased](#accountkeyrolebased). Signatures in transactions are verified with this key. |\n\n#### Smart Contract Accounts \\(SCAs\\) <a id=\"smart-contract-accounts-scas\"></a>\n\nIn contrast to EOAs, SCAs have code associated with them and are controlled by their code. SCAs are created by smart contract deployment transactions; once deployed, an SCA cannot initiate new transactions by itself and must be triggered by another account, either by an EOA or another SCA.\n\n**Attributes**\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| type | uint8 \\(Go\\) | The type of smart contract accounts. It must be **0x2** for SCAs. |\n| nonce | uint64 \\(Go\\) | A sequence number used to determine the order of transactions. The transaction to be processed next has the same nonce with this value. |\n| balance | \\*big.Int \\(Go\\) | The amount of KAIA the account has. |\n| humanReadable | bool \\(Go\\) | A boolean value indicating that the account is associated with a human-readable address. Since HRA (human-readable address) is not supported yet, this value is false for all accounts. |\n| key | [AccountKey](#account-key) | The key associated with this account. This field can be any of [AccountKeyLegacy](#accountkeylegacy), [AccountKeyPublic](#accountkeypublic), [AccountKeyFail](#accountkeyfail), [AccountKeyWeightedMultisig](#accountkeyweightedmultisig), [AccountKeyRoleBased](#accountkeyrolebased). Signatures in transactions are verified with this key. |\n| codeHash | \\[\\]byte \\(Go\\) | The hash of the account's smart contract code. This value is immutable, which means it is set only when the smart contract is created. |\n| storageRoot | \\[32\\]byte \\(Go\\) | A 256-bit hash of the root of the Merkle Patricia Trie that contains the values of all the storage variables in the account. |\n| codeFormat | uint8 \\(Go\\) | Supporting interpreter version. Up to 16 can be set. Currently, it supports EVM\\(0x00\\) only. |\n| vmVersion | uint8 \\(Go\\) | The protocol upgrade (hard fork) information at contract deployment time (ex. 0x0(constantinople), 0x1(istanbul,london,...)). Up to 16 can be used. It is automatically created with the contract. |\n\n:::note\n\nNOTE: From kaia v1.7.0 onwards, vmVersion attribute will be added to the Smart Contract Account.\n\n:::\n\n### Kaia Account Type ID <a id=\"kaia-account-type-id\"></a>\nBelow are the Account Type ID assigned to each Account Type.\n\n| Account Type | Account Type ID |\n|---|---|\n| Externally Owned Account (EOA) | 0x1 |\n| Smart Contract Account (SCA) | 0x2 |\n\n## Account Key <a id=\"account-key\"></a>\n\nAn account key represents the key structure associated with an account.\n\n### AccountKeyNil <a id=\"accountkeynil\"></a>\n\nAccountKeyNil represents an empty key. If an account tries to have an AccountKeyNil object, the transaction will be failed. AccountKeyNil is used only for TxTypeAccountUpdate transactions with role-based keys. For example, if an account tries to update RoleAccountUpdate key only, the key field of the TxTypeAccountUpdate transaction would be:\n\n`[AccountKeyNil, NewKey, AccountKeyNil]`\n\nThen, only the RoleAccountUpdate key is updated. Other roles are not updated. Refer to the [AccountKeyRoleBased](#accountkeyrolebased) for more detail.\n\n#### Attributes <a id=\"attributes\"></a>\n\nNo attributes for AccountKeyNil.\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x80`\n\n### AccountKeyLegacy <a id=\"accountkeylegacy\"></a>\n\nAccountKeyLegacy is used for the account having an address derived from the corresponding key pair. If an account has AccountKeyLegacy, the transaction validation process is done like below \\(as typical Blockchain platforms did\\):\n\n* Get the public key from `ecrecover(txhash, txsig)`.\n* Get the address of the public key.\n* The address is the sender.\n\n#### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| Type | uint8 \\(Go\\) | The type of AccountKeyLegacy. This must be **0x01**. |\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x01c0`\n\n### AccountKeyPublic <a id=\"accountkeypublic\"></a>\n\nAccountKeyPublic is used for accounts having one public key.  \nIf an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n* Get the public key derived from `ecrecover(txhash, txsig)`.\n* Check that the derived public key is the same as the corresponding\n\n  account's public key.\n\n#### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| Type | uint8 \\(Go\\) | The type of AccountKeyPublic. This must be **0x02**. |\n| Key | \\[33\\]byte \\(Go\\) | Key should be a compressed public key on S256 curve. |\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x02 + encode(CompressedPubKey)`\n\n**NOTE**: CompressedPubKey is a public key in a compressed format defined in [SEC1](https://www.secg.org/SEC1-Ver-1.0.pdf). In short, 0x02`{PubkeyX}` if PubkeyY is an even number or 0x03`{PubkeyX}` otherwise.\n\n#### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\n```javascript\nprvkey 0xf8cc7c3813ad23817466b1802ee805ee417001fcce9376ab8728c92dd8ea0a6b\npubkeyX 0xdbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8\npubkeyY 0x906d7170ba349c86879fb8006134cbf57bda9db9214a90b607b6b4ab57fc026e\n\nRLP: 0x02a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8\n```\n\n### AccountKeyFail <a id=\"accountkeyfail\"></a>\n\nIf an account has the key AccountKeyFail, the transaction validation process always fails. It can be used for smart contract accounts so that a transaction sent from the smart contract account always fails.\n\n#### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| Type | uint8 \\(Go\\) | The type of AcccountKeyFail. It must be **0x03**. |\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x03c0`\n\n### AccountKeyWeightedMultiSig <a id=\"accountkeyweightedmultisig\"></a>\n\nAccountKeyWeightedMultiSig is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight. \nIn order for a transaction to be valid for an account associated with AccountKeyWeightedMultiSig, the following conditions should be satisfied:\n* The weighted sum of the signed public keys should be larger than the threshold.\n* The invalid signature should not be included in the transaction.\n* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n:::note\n\nThe following multiSig validation logic has been added with the [IstanbulEVM](../misc/klaytn-history#istanbul-evm) hardfork.\n\n* The invalid signature should not be included in the transaction.\n* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n:::\n\n#### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| Type | uint8 \\(Go\\) | The type of AccountKeyWeightedMultiSig. This must be **0x04**. |\n| Threshold | uint \\(Go\\) | Validation threshold. To be a valid transaction, the weight sum of signatures should be larger than or equal to the threshold. |\n| WeightedPublicKeys | \\[\\]\\{uint, \\[33\\]byte\\} \\(Go\\) | A list of weighted public keys. A weighted public key contains a compressed public key and its weight. |\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x04 + encode([threshold, [[weight, CompressedPubKey1], [weight2, CompressedPubKey2]]])`\n\n#### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\n```javascript\nThreshold 3\nKey0 Weight: 1\nPubkeyX 0xc734b50ddb229be5e929fc4aa8080ae8240a802d23d3290e5e6156ce029b110e\nPubkeyY 0x61a443ac3ffff164d1fb3617875f07641014cf17af6b7dc38e429fe838763712\nKey1 Weight: 1\nPubkeyX 0x12d45f1cc56fbd6cd8fc877ab63b5092ac77db907a8a42c41dad3e98d7c64dfb\nPubkeyY 0x8ef355a8d524eb444eba507f236309ce08370debaa136cb91b2f445774bff842\nKey2 Weight: 1\nPubkeyX 0xea9a9f85065a00d7b9ffd3a8532a574035984587fd08107d8f4cbad6b786b0cd\nPubkeyY 0xb95ebb02d9397b4a8faceb58d485d612f0379a923ec0ddcf083378460a56acca\nKey3 Weight: 1\nPubkeyX 0x8551bc489d62fa2e6f767ba87fe93a62b679fca8ff3114eb5805e6487b51e8f6\nPubkeyY 0x4206aa84bc8955fcbfcc396854228aa63ebacd81b7311a31ab9d71d90b7ec3d7\n\nRLP: 0x04f89303f890e301a102c734b50ddb229be5e929fc4aa8080ae8240a802d23d3290e5e6156ce029b110ee301a10212d45f1cc56fbd6cd8fc877ab63b5092ac77db907a8a42c41dad3e98d7c64dfbe301a102ea9a9f85065a00d7b9ffd3a8532a574035984587fd08107d8f4cbad6b786b0cde301a1038551bc489d62fa2e6f767ba87fe93a62b679fca8ff3114eb5805e6487b51e8f6\n```\n\n### AccountKeyRoleBased <a id=\"accountkeyrolebased\"></a>\n\nAccountKeyRoleBased represents a role-based key. The roles are specified at [Roles](#roles).\n\n#### Attributes <a id=\"attributes\"></a>\n\n| Attribute | Type | Description |\n| :--- | :--- | :--- |\n| Type | uint8 \\(Go\\) | The type of AccountKeyRoleBased. It must be **0x05**. |\n| Keys | \\[\\]`{AccountKey}` \\(Go\\) | A list of keys. A key can be any of AccountKeyNil, AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, and AccountKeyWeightedMultiSig. |\n\n#### Roles <a id=\"roles\"></a>\n\nRoles of AccountKeyRoleBased are defined as below:\n\n| Role | Description |\n| :--- | :--- |\n| RoleTransaction | Index 0. Default key. Transactions other than TxTypeAccountUpdate should be signed by the key of this role. |\n| RoleAccountUpdate | Index 1. TxTypeAccountUpdate transaction should be signed by this key. If this key is not present in the account, TxTypeAccountUpdate transaction is validated using RoleTransaction key. |\n| RoleFeePayer | Index 2. If this account wants to send tx fee instead of the sender, the transaction should be signed by this key.  If this key is not present in the account, a fee-delegated transaction is validated using RoleTransaction key. |\n\n#### RLP Encoding <a id=\"rlp-encoding\"></a>\n\n`0x05 + encode([key1, key2, key3])`\n\nNote that key1, key2, and key3 can be any of above keys \\(AccountKeyNil, AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, and AccountKeyWeightedMultiSig\\).\n\n#### Omissible and Expandable Roles <a id=\"omissible-and-expandable-roles\"></a>\n\nThe roles can be omitted from the last index, and the omitted roles are mapped to the first role. However, a role in the middle cannot be omitted, which means RoleTransaction and RoleFeePayer cannot be set without RoleAccountUpdate. For example, if a role-based key is set to `0x05 + encode([key1, key2])`, RoleFeePayer works as if the key is set like `0x05 + encode([key1, key2, key1])`.\n\nThis feature allows for more roles to be added in the future. If a new role is provided, the new role of accounts already created with old roles is mapped to the first role.\n\n#### RLP Encoding \\(Example\\) <a id=\"rlp-encoding-example\"></a>\n\n```javascript\nRoleTransaction Key\nPubkeyX 0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d\nPubkeyY 0x0a5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919\nRoleAccountUpdate Key\nThreshold: 2\nKey0 Weight:1\nPubkeyX 0xe4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512d\nPubkeyY 0x0a5735a23ce1654b14680054a993441eae7c261983a56f8e0da61280758b5919\nKey1 Weight:1\nPubkeyX 0x36f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06\nPubkeyY 0x6fdf9fc87a16ac359e66d9761445d5ccbb417fb7757a3f5209d713824596a50d\nRoleFeePayer Key\nPubkeyX 0xc8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447\nPubkeyY 0x94c27901465af0a703859ab47f8ae17e54aaba453b7cde5a6a9e4a32d45d72b2\n\nRLP: 0x05f898a302a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512db84e04f84b02f848e301a103e4a01407460c1c03ac0c82fd84f303a699b210c0b054f4aff72ff7dcdf01512de301a10336f6355f5b532c3c1606f18fa2be7a16ae200c5159c8031dd25bfa389a4c9c06a302a102c8785266510368d9372badd4c7f4a94b692e82ba74e0b5e26b34558b0f081447\n```\n\n## Account Key Type ID <a id=\"account-key-type-id\"></a>\nBelow are the Account Key Type ID assigned to each Account Key Type.\n\n| Account Key Type | Account Key Type ID |\n|---|---|\n| AccountKeyLegacy | 0x01 |\n| AccountKeyPublic | 0x02 |\n| AccountKeyFail | 0x03 |\n| AccountKeyWeightedMultiSig | 0x04 |\n| AccountKeyRoleBased | 0x05 |\n\n",
    "Current Website Url is https://docs.kaia.io/learn/computation/computation-cost. # Computation Cost\n\nSince Kaia aims to maintain 1-second block time, the execution time of transactions has to be managed. Here are three approaches to achieve that: \n\n1. Limiting the gas limit of a transaction \n2. Limiting the execution time of a transaction \n3. Limiting the computation cost of a transaction\n\nLimiting the gas limit of a transaction was not a feasible solution because the concept of the gas represents the current exchange value of the various resources in the blockchain platform such as computation, storage, network bandwidth, and so on. It is not suitable as a metric for the transaction execution time.\n\nLimiting the execution time of a transaction was not feasible either because the execution time can vary between nodes on the blockchain platform. For example, consider the case in which we limit the execution time of a transaction to be 100 milli-second. If a node executes a transaction in 90 ms and another node executes it in 110 ms, the two nodes cannot reach a consensus. Hence, this solution is not appropriate.\n\nThe last approach is to limit the computation cost of a transaction. We modelled the computation cost of each EVM opcode based on its actual execution time and limit the sum of computation cost of a transaction. With this approach, we eliminate other factors and only count the normalized execution time unit, and nodes can reach a consensus as well.\n\nTherefore, we chose the third option for Kaia. The computation cost limit was 100,000,000, but as CPU computing performance has increased, the limit has been raised to 150,000,000 after Cancun EVM hardfork. This limit value is determined by the platform, so the developers should be aware of the computation cost of a transaction. To calculate the computation cost of a transaction, Kaia provides [kaia_estimateComputationCost](../../../references/json-rpc/kaia/estimate-computation-cost). The usage is almost the same as [kaia_estimateGas](../../../references/json-rpc/kaia/estimate-gas).\n\n:::note\n\nComputation cost related hardfork changes can be found at the bottom of this page. Go to [Hardfork Changes](#hardfork-changes).\n\n:::\n\n## Computation Cost Limit <a id=\"coputation-cost-limit\"></a>\nA series of opcodes or precompiled contracts are executed sequentially when executing a transaction. To limit the execution time of a transaction, we have made a deterministic execution time calculation model for opcodes and precompiled contracts based on real execution time.\n\nBased on this model, predetermined computation cost values for opcodes and precompiled contracts are added to the total computation cost. If the total value exceeds computation cost limit, transaction execution is aborted and returns [ComputationCostLimitReached(0x0a)](../../references/transaction-error-codes) error.\n\nWhen setting the computation cost limit value, we set `--opcode-computation-cost-limit` flag value as a limit if it is set as a non-zero value. If it's zero, the limit is set to the default computation cost limit defined for each specific hardfork.\nExceptionally, the limit for call/estimateGas/estimateComputationCost is always set to unlimited and is not influenced by flag or hardfork values. However, execution still can be aborted due to other limits such as gas cap.\n\n## Computation Cost of Opcodes <a id=\"computation-cost-of-opcodes\"></a>\n\nThe below table shows the computation cost of EVM opcodes. The computation cost was determined based on experiments.\n\n| Opcode         | ComputationCost |\n|:---------------|----------------:|\n| STOP           |               0 |\n| ADD            |             150 |\n| MUL            |             200 |\n| SUB            |             219 |\n| DIV            |             404 |\n| SDIV           |             360 |\n| MOD            |             320 |\n| SMOD           |             560 |\n| ADDMOD         |             360 |\n| MULMOD         |             700 |\n| EXP            |             720 |\n| SIGNEXTEND     |             481 |\n| LT             |             201 |\n| GT             |             264 |\n| SLT            |             176 |\n| SGT            |             222 |\n| EQ             |             220 |\n| ISZERO         |             165 |\n| AND            |             288 |\n| OR             |             160 |\n| XOR            |             454 |\n| NOT            |             364 |\n| BYTE           |             589 |\n| SHL            |             478 |\n| SHR            |             498 |\n| SAR            |             834 |\n| SHA3           |             560 |\n| ADDRESS        |             284 |\n| BALANCE        |            1407 |\n| ORIGIN         |             210 |\n| CALLER         |             188 |\n| CALLVALUE      |             149 |\n| CALLDATALOAD   |             596 |\n| CALLDATASIZE   |             194 |\n| CALLDATACOPY   |             100 |\n| CODESIZE       |             145 |\n| CODECOPY       |             898 |\n| GASPRICE       |             131 |\n| EXTCODESIZE    |            1481 |\n| EXTCODECOPY    |            1000 |\n| RETURNDATASIZE |              10 |\n| RETURNDATACOPY |              40 |\n| EXTCODEHASH    |            1000 |\n| BLOCKHASH      |             500 |\n| COINBASE       |             189 |\n| TIMESTAMP      |             265 |\n| NUMBER         |             202 |\n| PREVRANDAO     |            1498 |\n| GASLIMIT       |             166 |\n| CHAINID        |             120 |\n| SELFBALANCE    |             374 |\n| POP            |             140 |\n| MLOAD          |             376 |\n| MSTORE         |             288 |\n| MSTORE8        |             230 |\n| SLOAD          |            2550 |\n| SSTORE         |            2510 |\n| JUMP           |             253 |\n| JUMPI          |             176 |\n| PC             |             147 |\n| MSIZE          |             137 |\n| GAS            |             230 |\n| JUMPDEST       |              10 |\n| PUSH0          |              80 |\n| PUSH1          |             120 |\n| PUSH2          |             120 |\n| PUSH3          |             120 |\n| PUSH4          |             120 |\n| PUSH5          |             120 |\n| PUSH6          |             120 |\n| PUSH7          |             120 |\n| PUSH8          |             120 |\n| PUSH9          |             120 |\n| PUSH10         |             120 |\n| PUSH11         |             120 |\n| PUSH12         |             120 |\n| PUSH13         |             120 |\n| PUSH14         |             120 |\n| PUSH15         |             120 |\n| PUSH16         |             120 |\n| PUSH17         |             120 |\n| PUSH18         |             120 |\n| PUSH19         |             120 |\n| PUSH20         |             120 |\n| PUSH21         |             120 |\n| PUSH22         |             120 |\n| PUSH23         |             120 |\n| PUSH24         |             120 |\n| PUSH25         |             120 |\n| PUSH26         |             120 |\n| PUSH27         |             120 |\n| PUSH28         |             120 |\n| PUSH29         |             120 |\n| PUSH30         |             120 |\n| PUSH31         |             120 |\n| PUSH32         |             120 |\n| DUP1           |             190 |\n| DUP2           |             190 |\n| DUP3           |             176 |\n| DUP4           |             142 |\n| DUP5           |             177 |\n| DUP6           |             165 |\n| DUP7           |             147 |\n| DUP8           |             157 |\n| DUP9           |             138 |\n| DUP10          |             174 |\n| DUP11          |             141 |\n| DUP12          |             144 |\n| DUP13          |             157 |\n| DUP14          |             143 |\n| DUP15          |             237 |\n| DUP16          |             149 |\n| SWAP1          |             141 |\n| SWAP2          |             156 |\n| SWAP3          |             145 |\n| SWAP4          |             135 |\n| SWAP5          |             115 |\n| SWAP6          |             146 |\n| SWAP7          |             199 |\n| SWAP8          |             130 |\n| SWAP9          |             160 |\n| SWAP10         |             134 |\n| SWAP11         |             147 |\n| SWAP12         |             128 |\n| SWAP13         |             121 |\n| SWAP14         |             114 |\n| SWAP15         |             197 |\n| SWAP16         |             128 |\n| LOG0           |             100 |\n| LOG1           |             500 |\n| LOG2           |             500 |\n| LOG3           |             500 |\n| LOG4           |             500 |\n| PUSH           |               0 |\n| DUP            |               0 |\n| SWAP           |               0 |\n| CREATE         |            2094 |\n| CALL           |            5000 |\n| CALLCODE       |            4000 |\n| RETURN         |               0 |\n| DELEGATECALL   |             696 |\n| CREATE2        |           10000 |\n| STATICCALL     |           10000 |\n| REVERT         |               0 |\n| SELFDESTRUCT   |               0 |\n| BASEFEE        |             198 |\n| BLOBBASEFEE    |             120 |\n| BLOBHASH       |             165 |\n| TSTORE         |             280 |\n| TLOAD          |             220 |\n| MCOPY          |             250 |\n\n## Precompiled contracts computation cost table <a id=\"precompiled-contracts-computation-cost-table\"></a>\n`Input` is a byte array input of a precompiled contract.\n\n| Address | Precompiled contracts | Computation Cost                                                                                                                    |\n|:--------|:----------------------|:------------------------------------------------------------------------------------------------------------------------------------|\n| 0x01    | ecrecover             | 113,150                                                                                                                             |\n| 0x02    | sha256hash            | numOfWords(input) / 32 * 100 + 1,000                                                                                                |\n| 0x03    | ripemd160hash         | numOfWords(input) / 32 * 10 + 100                                                                                                   |\n| 0x04    | dataCopy              | 0                                                                                                                                   | \n| 0x05    | bigModExp             | see the code [here](https://github.com/kaiachain/kaia/blob/75c149a464998eb946311f3a290d4b1ea339eaba/blockchain/vm/contracts.go#L340) |\n| 0x06    | bn256Add              | 8,000                                                                                                                               | \n| 0x07    | bn256ScalarMul        | 100,000                                                                                                                             |\n| 0x08    | bn256Pairing          | numOfPairings(input) * 1,000,000 + 2,000,000                                                                                        |\n| 0x09    | blake2f               | bigEndian(getRounds(input[0:4])) * 10 + 10,000                                                                                      |\n| 0x0A    | kzg                   | 2,200,000                                                                                                                           |\n| 0x3FD   | vmLog                 | 10                                                                                                                                  |\n| 0x3FE   | feePayer              | 10                                                                                                                                  |\n| 0x3FF   | validateSender        | numOfSigs(input) * 180,000 + 10,000                                                                                                 |\n\n## Hardfork Changes <a id=\"hardfork-changes\"></a>\n| Hardfork     | New items                                                                                                                             | Changes|\n|--------------|:--------------------------------------------------------------------------------------------------------------------------------------||\n| Cancun EVM   | BLOBBASEFEE (0x49)<br/>BLOBHASH (0x50)<br/>TSTORE (0x5c) opcode<br/>TLOAD (0x5d)<br/>MCOPY (0x5e)<br/>kzg (0x0a) precompiled contract | increase the computation cost limit <br/>from 100,000,000 to 150,000,000<br/><br/>reduce the computation cost of some opcodes <br/>due to cpu performance increase<br/>-Sdiv (0x05): 739 -> 360<br/>-Mod (0x06): 812 -> 320<br/>-Addmod (0x08): 1410 -> 360<br/>-Mulmod (0x09): 1760 -> 700<br/>-Exp (0x0A): 5000 -> 720<br/>-Sha3 (0x20): 2465 -> 560<br/>-Mstore8 (0x53): 5142 -> 230<br/>-Log1, Log2, Log3, Log4 (0xA1-0xA4): 1000 -> 500<br/><br/>increase the computation cost of some opcodes <br/>due to increased database size<br/>-SLOAD (0x54): 835 -> 2550<br/>-SSTORE (0x55): 1548 -> 2510 |\n| Shanghai EVM | PUSH0 (0x5f) opcode                                                                                                                   ||                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| Kore         |                                                                                                                                       | modExp (0x05) precompiled contract <br/>use new gas calculation logic. <br/>Computation cost also affected. <br/>Become more accurate.                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | |                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| London EVM   | BaseFee (0x48) opcode                                                                                                                 ||\n| Istanbul EVM | CHAINID (0x46) opcode<br/>SELFBALANCE (0x47) opcode<br/>blake2f (0x09) precompiled contract                                           | reduce the computation cost of over-priced opcodes<br/>- ADDMOD (0x08): 3349 -> 1410<br/>- MULMOD (0x09): 4757 -> 1760<br/>- XOR (0x18): 657 -> 454<br/>- NOT (0x19): 1289 -> 364<br/>- SHL (0x1B): 1603 -> 478<br/>- SHR (0x1C): 1815 -> 834                                                                                                                                                                                                                                                                                                                                                           |\n",
    "Current Website Url is https://docs.kaia.io/learn/computation. # Transaction Execution\n\nThis section provides a comprehensive guide to how transactions are processed, executed, and analyzed on the Kaia blockchain. Understanding these processes is critical for developers building applications on Kaia, as it directly impacts performance, cost, and debugging strategies.\n\n- [Execution Model](./execution-model) details the complete lifecycle of a Kaia transaction, from its initial submission to its final inclusion in a block. Learn how transactions are validated by Consensus Nodes (CNs), the process of block creation, and the role of the BFT consensus mechanism in finalizing transactions. This includes details on Kaia's enhanced randomness for block proposer selection, as well as crucial restrictions on both transaction execution and smart contract deployment. Understanding these limitations is essential for avoiding unexpected transaction failures.\n\n- [Computation Cost](./computation-cost) explains the mechanics of transaction costs on the Kaia network. Dive into the gas mechanism, including how gas pricing is determined, the network's computation cost limit, and the gas costs associated with specific EVM operations. This section also details the additional gas costs incurred for contract creation based on initcode length, introduced with the Shanghai hardfork, enabling developers to accurately estimate and manage transaction expenses.\n\n- [Debug Tracing](debug-tracing) explores the tools and techniques available for monitoring and debugging transaction execution. Gain insights into how to identify and resolve issues within your Kaia applications, ensuring smooth operation and efficient resource utilization. This includes information on how to trace the execution flow of transactions and pinpoint potential bottlenecks or errors.",
    "Current Website Url is https://docs.kaia.io/learn/computation/debug-tracing. # Debug tracing\n\nDebug tracing is a feature that extracts additional information while executing a transaction in a VM. As the name suggests, it is mainly used for debbuging transaction failure or gas spending breakdown. Since VMs are deterministic, once a transaction is confirmed, the same trace will be produced no matter when it is traced. In other words, you can debug a confirmed transaction after the fact, making it a useful tool for dApp development.\n\nThere are various methods where you can retrieve debug traces\n\n- Call debug namespace JSON-RPC APIs on-demand.\n- Receive into kafka via chaindatafetcher on-demand.\n- Receive into kafka via chaindatafetcher from a node as the node syncs blocks.\n- Use block explorers or indexer services, which is outside scope of this document.\n\n## Using debug APIs\n\nThe go-to method is to calling the `debug_trace*` JSON-RPC APIs.\n\n### Tracer types\n\nTo get traces with the debug API, you first need to decide what kind of information you want to learn. Most commonly, you'll want to use `callTracer` to understand the interaction between contracts i.e. internal transactions. There are other tracer types like `prestateTracer` and `structLogger` that allow you to debug the same transaction from multiple angles. Below lists some frequently used tracers.\n\n**NOTE**: Since Kaia v1.0.1 `callTracer` and `fastCallTracer` are identical as they consolidated to one native (Go) implementation.\n\n**NOTE**: Since Kaia v1.0.1 `callTracer` and `fastCallTracer` outputs are updated to more correctly reflect the execution. The same transaction could have yielded different trace in previous versions. See the [GitHub PR](https://github.com/kaiachain/kaia/pull/15) for the details.\n\n- Predefined tracers\n  - `callTracer` traces contract calls and contract creation within a transaction (internal tx). Returns the specific call or create opcode, revert reason, and gas spending at each call frame. Its use has been discouraged for slow speed, but since v1.0.1 the problem was resolved. Developers can safely use this tracer.\n  - `fastCallTracer` is a Golang implementation of `callTracer`. But since v1.0.1 the two are identical, so there is no need to use fastCallTracer anymore.\n  - `prestateTracer` returns information needed to construct a custom local genesis state that this transaction can run on. Useful for creating a test case out of live blockchain data.\n  - `revertTracer` returns the revert reason, if any. This can be replaced by `callTracer` which returns `.reverted.reason` and `.revertReason` fields.\n  - Refer to [API reference](../../../references/json-rpc/debug/trace-transaction) for the full list of supported tracers.\n- structLogger is the tracer activated when you don't specify any tracer. The execution of every opcode is shown in detail which is extremely heavy and usually too verbose for application debugging.\n- Custom JS tracer is also supported, unless the node prohibits its use with `--rpc.unsafe-debug.disable` option. You can submit a piece of JavaScript code that gets invoked alongside transaction execution. Below is an example custom tracer that prints the gasUsed after each opcode `\"{gasUsed: [], step: function(log) { this.gasUsed.push(log.getGas()); }, result: function() { return this.gasUsed; }, fault: function() {}}\"`. You can find more about custom JS tracer [here](https://docs.chainstack.com/reference/custom-js-tracing-ethereum) and [here](https://geth.ethereum.org/docs/developers/evm-tracing/custom-tracer).\n\n### CallTracer special cases\n\nKaia's `callTracer` output format is identical to go-ethereum except for following:\n\n- For revered transactions, both fields are provided.\n  - `result.revertReason`: revert reason string, if any.\n  - `result.reverted.contract`: the address of the reverted contract.\n  - `result.reverted.message`: same as revertReason\n\n```js\n> debug.traceTransaction(\"0x49aa6074a3b4970399ef2af12b109c4cb4a65ab8a833d1540e4cefa657a3c0c7\", {tracer: \"callTracer\"})\n{\n  error: \"execution reverted\",\n  from: \"0x7f0546832758f61410e81a94d7a07d55b1dfd278\",\n  gas: \"0xc350\",\n  gasUsed: \"0x6992\",\n  input: \"0x96670644\",\n  output: \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000962616420696e7075740000000000000000000000000000000000000000000000\",\n  revertReason: \"bad input\",\n  reverted: {\n    contract: \"0xe6c5b1cbf283d9482088136b8cee53fdb6c088eb\",\n    message: \"bad input\"\n  },\n  to: \"0xe6c5b1cbf283d9482088136b8cee53fdb6c088eb\",\n  type: \"CALL\",\n  value: \"0x0\"\n}\n```\n\n- Some transaction types that does not execute VM are treated as 0 KAIA transfer to the sender itself. Those transaction types are AccountUpdate, Cancel, ChainDataAnchoring and their fee delegated variants.\n\n```js\n> kaia.getTransaction(\"0xac43859eb4064916e8be8e74645d6019cc48cb6791f68ea21d42ead6bba569b5\").type\n\"TxTypeAccountUpdate\"\n> debug.traceTransaction(\"0xac43859eb4064916e8be8e74645d6019cc48cb6791f68ea21d42ead6bba569b5\", {tracer: \"callTracer\"})\n{\n  from: \"0x7f0546832758f61410e81a94d7a07d55b1dfd278\",\n  gas: \"0xcd14\",\n  gasUsed: \"0xa028\",\n  input: \"0x\",\n  to: \"0x7f0546832758f61410e81a94d7a07d55b1dfd278\",\n  type: \"CALL\",\n  value: \"0x0\"\n}\n```\n\n### Batch tracing\n\nDebug tracers can be retrieved at different granularity.\n\n- `debug_traceTransaction` traces a single transaction hash\n- `debug_traceBlockByNumber` and `debug_traceBlockByHash` traces all transactions in a block\n- `debug_traceBlobkByRange` traces consecutive blocks in a range\n- `debug_traceCall` lets you run an `eth_call` at the given block's final state. This is useful for simulating a transaction execution before sending it.\n\n### State regeneration\n\nWhen an full-mode node serves the debug trace APIs it may undergo historical state regeneration. Suppose you requested to trace a block. The node has to execute the block from the parent block's final state. But a full-mode node stores block states only so often (every other 128 blocks by default), so the node re-exectues blocks from the nearest saved state. At worst case tracing one block takes executing 127 blocks. Therefore a full-mode node may respond to debug trace APIs slowly. If you are going to requeat a large number, you must use an archive-mode nodes.\n\n## Using chaindatafetcher\n\nChaindatafetcher (CDF) is a unique feature of Kaia where block processing results are published into Kafka queue to simplify building downstream data services. For instance a block explorer can utilize CDF to populate its database.\n\n**NOTE**: Since Kaia v1.0.1 tracegroup (internally callTracer) outputs are updated to more correctly reflect the execution. The same transaction could have yielded different trace in previous versions. See the [GitHub PR](https://github.com/kaiachain/kaia/pull/15) for the details.\n\n### Connecting to Kafka\n\nPrepare a Kafka cluster first. You can test chaindatafetcher with below example docker compose configuration, but you can use any Kafka installation.\n\n```yaml\n# Test kafka docker-compose.yml. Not for production.\nservices:\n  kafka:\n    image: bitnami/kafka:3.7\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_CFG_NODE_ID: 0\n      KAFKA_CFG_PROCESS_ROLES: controller,broker\n      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@127.0.0.1:9093\n      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093\n      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092\n      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT\n      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER\n      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT\n```\n\nThen direct the node to connect to Kafka. Below is a minimal CDF configuration in your `kend.conf`,\n\n```sh\nADDITIONAL=\"--chaindatafetcher \\\n--chaindatafetcher.mode kafka \\\n--chaindatafetcher.kafka.brokers localhost:9092\"\n```\n\nThe node publishes to two Kafka topics. `blockgroup` carries block header, consensus-related information, and transaction receipts. `tracegroup`, when enabled, carries internal tx traces (i.e. callTrace) of the block. Below are the default topic names.\n\n```sh\n$ kafka-topics.sh --bootstrap-server localhost:9092 --list\n__consumer_offsets\nlocal.klaytn.chaindatafetcher.en-0.blockgroup.v1\nlocal.klaytn.chaindatafetcher.en-0.tracegroup.v1\n```\n\nThe `ken` command line flags `--chaindatafetcher.*` let you customize topic names, partitions, replicas and other Kafka configurations.\n\n### Traces from currently syncing block\n\nIf the chaindatafetcher is configured and the node is syncing blocks, then execution results of those blocks will be automatically published. With the default setting, only `blockgroup` topic is populated. To enable internal tx tracing alongside block sync, specify `--vm.internaltx`.\n\n```sh\nADDITIONAL=\"$ADDITIONAL --vm.internaltx\"\n```\n\nThen you can receive the callTrace results as the node syncs the blocks. Note that no tracegroup messages are published for empty blocks.\n\n```\n$ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic local.klaytn.chaindatafetcher.en-0.tracegroup.v1\n{\"blockNumber\":97316,\"result\":[{\"type\":\"CALL\",\"from\":\"0x854ca8508c8be2bb1f3c244045786410cb7d5d0a\",\"to\":\"0xda65c2761c358cd14cb82a4e5fc81e9debce6942\",\"value\":\"0xde0b6b3a7640000\",\"gas\":\"0x989680\",\"gasUsed\":\"0x5208\",\"error\":\"\"}]}\n{\"blockNumber\":97348,\"result\":[{\"type\":\"CALL\",\"from\":\"0x854ca8508c8be2bb1f3c244045786410cb7d5d0a\",\"to\":\"0x75779e1c1436bc2e81db7fb32f9b9d193d945146\",\"value\":\"0xde0b6b3a7640000\",\"gas\":\"0x989680\",\"gasUsed\":\"0x5208\",\"error\":\"\"}]}\n```\n\nThis method achieves both block syncing and block tracing at the same time.\n\n### Traces from requested range\n\nThe chaindatafetcher also supports delivers blocks and traces on-demand, called the 'range fetching' option. The results are published to the same Kafka topic as the syncinc blocks, so if you need to separate them then stop the block sync.\n\nThe range fetching is triggered by `chaindatafetcher_` namespace RPC. This RPC is accessible via IPC. Note yo don't need `--vm.internaltx` flag to use range fetching.\n\n```\n$ ken attach --datadir /var/kend/data\n> chaindatafetcher.startRangeFetching(97300,97400,'trace')\n```\n",
    "Current Website Url is https://docs.kaia.io/learn/computation/execution-model. # Execution Model\n\nThis page describes the execution model, the data structures, and the life cycle of Kaia smart contracts.\n\n## Execution Model <a id=\"execution-model\"></a>\n\nTransactions can be generated by platform APIs as described in [Platform API Specification](../../../references/json-rpc/kaia/account-created). These transactions are sent to _Consensus Nodes \\(CNs\\)_ to be stored in a block. The CNs check whether each received transaction is valid. Valid transactions are stored in the transaction pool; otherwise, they are discarded. A CN selects the executable transactions in the current block in its transaction pool and executes them one by one.\n\nTo execute a transaction, the sender must pay some amount of KAIA as a transaction fee. This transaction fee in KAIA is calculated based on gas and a multiplier, _i.e._, unit price. A gas is the fundamental unit of computation. Every operation executed on a Kaia node consumes a predefined amount of gas. The exact amount of KAIA required for the transaction is calculated by the formula illustrated in [Transaction Fees](../transaction-fees/transaction-fees). The transaction can fail if the sender submits a transaction accompanied by insufficient gas. A transaction can also fail if the sender's account has an insufficient balance.\n\nWhen a transaction is executed successfully, it is included in the current block. A CN gathers transactions until it reaches block gas limit or block time limit. Then, the CN makes a block with the transactions. This step requires filling several fields in the block. For example, it must calculate the hash values of transactions, receipts, state, etc. After all required fields have been completed, the CN generates a block hash.\n\nWhen block generation is complete, the block is propagated to all the other CNs. The other CNs all verify the propagated block and reach consensus on the verification results by using the BFT consensus algorithm. When the verification process completes successfully by the majority of CNs, the block is stored in the blockchain. Because the BFT consensus algorithm satisfies the immediate finality property, the block is final and will never be removed. After a block is finalized, the execution of all the transactions in that block are irreversibly guaranteed, and their execution results can be returned to the sender if requested.\n\n## Enhanced Randomness in Block Proposer and Committee Selection <a id=\"enhanced-randomness-in-block-proposer-and-committee-selection\"></a>\n\nKaia has implemented a new mechanism to introduce verifiable on-chain randomness in the block proposer and committee selection processes. This mechanism involves two new fields in the block header: `randomReveal` and `mixHash`.\n\nIn this system, block proposers generate and commit to random values. The `randomReveal` field in a block contains the proposer's signature, generated using a specific signature scheme, and is calculated based on the current block number being proposed. The `mixHash` is then computed using this revealed random value along with other block data, creating a source of randomness for the network.\n\nThe block proposer and committee selection processes utilize this generated randomness. The use of this randomness aims to make the selection processes more unpredictable and fair, enhancing the overall security of the network. One particular use case for this mechanism is allowing block proposers to remain private until the previous block is completed, adding an extra layer of security to the network.\n\nThe execution flow creates a cycle where each block's randomness influences future block proposer and committee selections. This introduces an element of unpredictability to these processes while maintaining their verifiability.\n\nIt's important to note that while this randomness is used in selection processes, rewards are still distributed at the end of block mining by directly modifying states, based on staking amounts. The randomness determines which validators are selected to be part of the committee that receives rewards, not the amount of rewards distributed.\n\nSeveral security considerations are crucial to this mechanism:\n\n* To prevent replay attacks, each `randomReveal` value must be unique for each block.\n* Block proposers must honestly generate and submit their `randomReveal` to prevent manipulation of the `mixHash`.\n* Proposers must keep their `randomReveal` secret until the block proposal to prevent prediction and potential manipulation by other participants.\n* The `randomReveal` must be properly signed and validated to prevent tampering.\n\nThis mechanism aims to introduce unpredictability in the block creation and committee selection processes while maintaining verifiability. It's important to note that while this system provides a framework for enhanced randomness, the specific implementations of proposer and committee selection algorithms using this randomness may evolve over time as the network develops and improves.\n\n### Restrictions on Transaction Execution <a id=\"restrictions-on-transaction-execution\"></a>\n\nKaia Mainnet and Kairos Testnet currently have the following restrictions on the transaction execution:\n\n* You can set gasPrice of the transaction, but it means it's the most you can pay. The actual gasPrice will be determined by network. For more detailed information, see [gas price overview](../transaction-fees/transaction-fees#gas-price-overview)\n* A transaction which has bigger execution cost than the computation cost limit will be discarded. Please refer to [computation cost](./computation-cost)\n* As of the Shanghai hardfork, there is an additional gas cost for contract creation based on the length of the initcode, charged at 2 gas for every 32-byte chunk of initcode.\n\n### Restrictions on Smart Contract Deployment <a id=\"restriction-on-smart-contract-deployment\"></a>\n\nKaia implements several restrictions on smart contract deployment:\n\n* As of the Kore hardfork, deployment of new contract code starting with the 0xEF byte is not allowed, as per [EIP-3541](https://eips.ethereum.org/EIPS/eip-3541).\n* Since the Shanghai hardfork:\n  * Deployment of new contract code is rejected if the initcode length exceeds 49,152 bytes.\n  * The length of the new contract code cannot exceed 24,576 bytes.\n  * These limitations are based on [EIP-3860](https://eips.ethereum.org/EIPS/eip-3860).\n  * Smart contract account (SCA) overwriting over externally owned accounts (EOA) is enabled.\n\n## Data Structures <a id=\"data-structures\"></a>\n\n### Account <a id=\"account\"></a>\n\nAn account in Kaia blockchain platform is a data structure containing information about a person's balance or a smart contract. Kaia redesigns its account model to provide better DX and UX. Detailed information about the account model can be found [here](../accounts).\n\n### Transaction <a id=\"transaction\"></a>\n\nA transaction in a blockchain platform is a message sent between nodes that changes the state of the blockchain. Kaia also redesigns its transaction model. Transactions are separated into various types according to their own purposes to find chances of performance optimization and to support the redesigned account model. Detailed information about the transaction model can be found [here](../../build/transactions/transactions).\n\n### State <a id=\"state\"></a>\n\nKaia's **state** is a collection of account states. This state must be the same across Kaia nodes if they have processed the same blocks in the same order. The state is changed when a transaction is executed on a Kaia node.\n\nThe table below shows the account data that are stored in the state.\n\n| Component | Description |\n| :--- | :--- |\n| nonce | An integer value indicating the number of transactions executed by this account. When submitting a transaction, the nonce of the transaction should be equal to the account's nonce. |\n| balance | An integer value showing the amount of KAIA that this account currently has. |\n| storageRoot | A 256-bit hash of the root of the Merkle Patricia Trie that contains the values of all the storage variables in the account. |\n| codeHash | The hash of the account's bytecode.  This value is immutable, which means it is set only when the smart contract is created.  If the account is an EOA or an EA, this value is set to the hash of null. |\n\n### Block <a id=\"block\"></a>\n\nA block is a crucial element of the Kaia blockchain because the blockchain literally consists of a chain of blocks. The table below shows the components in a block.\n\n| Component | Description |\n| :--- | :--- |\n| baseFeePerGas | The base fee per gas. This value is returned only when EthTxTypeCompatibleBlock is activated for that block number. |\n| blockScore | Former difficulty. Always 1 in the BFT consensus engine |\n| extraData | The \"extra data\" field of this block. |\n| gasUsed | The total used gas by all transactions in this block. |\n| governanceData | RLP encoded governance configuration |\n| logsBloom | The bloom filter for the logs of the block. `null` when it is pending block. |\n| number | The block number. `null` when it is pending block. |\n| parentHash | The hash of the block's parent block. |\n| proposer | The address of the block proposer. |\n| receiptsRoot | The root of the receipts trie of the block. |\n| reward | The address receiving block reward. |\n| size | Integer the size of this block in bytes. |\n| stateRoot | The root of the final state trie of the block. |\n| totalBlockScore | Integer of the total blockScore of the chain until this block. |\n| transactionsRoot | The root of the transaction trie of the block. |\n| timestamp | The Unix timestamp for when the block was collated. |\n| timestampFoS | The fraction of a second of the timestamp for when the block was collated. |\n| transactions | Array of transaction objects, or 32-byte transaction hashes depending on the last given parameter. |\n| voteData | RLP encoded governance vote of the proposer |\n\n## Smart Contract Lifecycle <a id=\"smart-contract-lifecycle\"></a>\n\nA _smart contract_ consists of a collection of code \\(functions\\) and data \\(state\\) that resides at a specific address on the Kaia blockchain. Contract accounts are able to pass messages between each other as well as perform practically Turing complete computation. Contracts exist on the blockchain in Kaia-specific binary formats. Currently, Kaia supports one binary format --Ethereum Virtual Machine \\(EVM\\) bytecode; however, other formats will be supported in the future.\n\n### Creating Smart Contracts <a id=\"creating-smart-contracts\"></a>\n\nA smart contract can be created in the Kaia blockchain by sending a transaction to an empty address with the binary as data. The binary can be in various formats; however, Kaia currently supports one binary format, EVM bytecode. It is worth pointing out that this transaction requires a payment for execution. The account balance on the sender's account will be reduced according to the transaction fee model after the transaction has been stored in a block. After some time, the transaction should appear in a block, which confirms that the state it entails reached a consensus. At this point, the smart contract now exists in the Kaia blockchain.\n\n### Executing Smart Contracts <a id=\"executing-smart-contracts\"></a>\n\nA function of a smart contract can be called and executed either by sending a transaction to the smart contract or by calling the function locally in the node. When a function is called by sending a transaction, the function is executed by processing a transaction. This entails a cost in KAIA for sending the transaction, and the call will be recorded forever on the blockchain. The return value of calls made in this manner is the hash of the transaction. When the function is invoked locally, it is executed locally in the Kaia Virtual Machine \\(KVM\\), and the call returns the return value of the function. Calls made in this manner are not recorded on the blockchain; thus, they cannot modify the internal state of the contract. This type of call is referred to as a constant function call. Calls made in this manner do not cost any KAIA. Constant function calls should be used when only the return value is of interest, while a transaction should be used when side effects on the contract state are of interest.\n\nWhen executing a smart contract function through a transaction, gas costs are incurred. The exact gas cost depends on the operations performed by the function and is calculated based on predefined gas costs for each EVM operation.\n\n### Disabling Smart Contracts <a id=\"disabling-smart-contracts\"></a>\n\nBecause smart contracts exist in the Kaia blockchain, they cannot be deleted; they can only be disabled. For now, Kaia has adopted the same process for disabling a Kaia smart contract as is used for disabling smart contracts in Ethereum. For example, the Kaia smart contract for KLVM can be disabled by using the [`selfdestruct(address recipient)`](https://solidity.readthedocs.io/en/v0.5.6/introduction-to-smart-contracts.html#self-destruct) call in Solidity \\(or the KLVM opcode `SELFDESTRUCT`\\). The Kaia team will also provide ways to disable smart contracts for other execution environments.\n\n### Upgrading Smart Contracts <a id=\"upgrading-smart-contracts\"></a>\n\nKaia will provide ways to upgrade a deployed smart contract to address the inconvenient user experience with existing blockchains. For example, deployed services on blockchains are difficult to upgrade. Kaia will provide frameworks and smart contract libraries to enable service providers \\(SPs\\) to upgrade deployed services and migrate service information. Kaia will provide this feature carefully by considering the following requirements.\n\n* Only authorized accounts or the owner of a smart contract should be able to upgrade the smart contract.\n* Upgraded smart contracts should be able to manipulate existing data maintained by the old smart contract.\n* Other smart contracts that refer to the old smart contracts should be able to determine whether to use newer, upgraded versions of those smart contracts.",
    "Current Website Url is https://docs.kaia.io/learn/consensus-mechanism. # Consensus Mechanism\n\nA consensus mechanism (algorithm) is a way of reaching a consensus between trustless entities. In blockchain technology, it is used to reach a consensus about if a block is valid or not. The performance of blockchain networks relies on the performance of the adopted consensus mechanisms, and it has a significant impact on the perceived usability of the Blockchain Applications.\n\nKaia Mainnet exhibits the following performance.\n- Handles 4,000 transactions per second. \n- Immediate transaction finality.\n- One-second block generation time. \n- Over 50 consensus nodes can participate in the consensus process.\n\nIn the document, we will go over how Kaia implemented the high-performing consensus process. \n\n## Background <a id=\"background\"></a>\n\n[Bitcoin](https://en.wikipedia.org/wiki/Bitcoin) is using [PoW](https://en.wikipedia.org/wiki/Proof_of_work) (Proof-of-Work), whereas Ethereum has recently shifted to [PoS](https://en.wikipedia.org/wiki/Proof_of_stake) (Proof-of-Stake), which decides on the block generating nodes by the stake of the node. Usually, these algorithms involve no communication between nodes in determining the validities of blocks. \n\nSo in these systems, a fork can happen which means two or more different blocks can be made on the same height. Usually, the \"Longest chain wins\" rule is applied to solve the fork condition. It means that those forks will be merged into a single canonical chain eventually, but it also means a list of blocks can be reverted in some period of time when it belongs to the shorter chain. So in these algorithms, there is no guarantee of the finality of blocks and transactions. The finality can only be achieved probabilistically after a period of time, which is still can't be 100% guaranteed.\n\nThis lack of finality is a very difficult issue in customer-facing services that use blockchain platforms. Because it has to wait until forks are resolved and enough blocks are stacked after the transfer to believe the transaction is not reversible. This has a negative effect both on users and service providers. \n\nA simple example of this issue can be demonstrated in financial services. Say a user transferred money to someone, and the service can't verify that the transfer is valid until 30 to 60 minutes have passed. Because it has to wait until the forks have been merged into a single chain and several blocks are stacked after the transfer to be sure that the transaction is not reversible.\n\n### PBFT (Practical Byzantine Fault Tolerance)  <a id=\"pbft-practical-byzantine-fault-tolerance\"></a>\n\nTo prevent the above issues, we need other algorithms that guarantee the finality. BFT algorithm is one of those, first [published](https://dl.acm.org/citation.cfm?doid=357172.357176) in 1982 by Lamport, Shostak, Pease. In 1999, Miguel Castro and Barbara Liskov introduced \"Practical Byzantine Fault Tolerance\" ([PBFT](http://www.pmg.csail.mit.edu/papers/bft-tocs.pdf)) which provides high-performance state machine replication.\n\nIn the PoW algorithm stated above, though each node receives and validates blocks, there are no message exchanges between nodes to reach a consensus. But in PBFT, each node communicates with other participating nodes to reach a consensus and the finality of the block can be guaranteed as soon as nodes were able to reach a consensus.\n\nThe communication between nodes basically progresses as shown below. But there are some variants which reflect each system's characteristics.\n\n![PBFT message flow](/img/learn/pbft.png)\n\nAs shown above, a participating node in PBFT basically communicates with all nodes in the network in several phases. This characteristic limits the number of nodes because the communication volume increases exponentially as the number of nodes increases.\n\n## Consensus Mechanism in Kaia <a id=\"consensus-mechanism-in-kaia\"></a>\nKaia is aiming to be an Enterprise-ready and Service-centric platform. Therefore we need to solve the finality problem written above and the network should be able to allow many nodes to participate in the network. To make this possible, Kaia is using an optimized version of Istanbul BFT, which implements PBFT with modifications to deal with blockchain network's characteristics.\n\nIn Kaia, there are three types of nodes, CN (Consensus Node), PN (Proxy Node) and EN (Endpoint Node). CNs are managed by CCOs (Core Cell Operators) and are in charge of block generation. These blocks are verified by all nodes in the network. Please refer to [here](learn#network-architecture) to know more about this network topology.\n\n![Network topology](/img/learn/klaytn_network_node.png)\n\nKaia achieves fast finality by adopting and improving Istanbul BFT. Because validation and consensus are done for each block there is no fork and the block's finality is guaranteed instantly as soon as the consensus is made. \n\nAnd also the issue of increasing communication volume in the BFT algorithm is solved by utilizing randomly selected `Committee`. CNs collectively form a `Council` and on each block generation, part of them are selected as a member of `Committee` using a VRF (Verifiable Random Function).\n\n![Concept of council and committee](/img/learn/council-committee.png)\n\nBecause consensus messages are exchanged only between the committee members, the communication volume can be limited under the designed level even though the total number of CNs increases.\n\nCurrently, Kaia Mainnet can provide a high throughput of 4,000 transactions per second with one-second block generation interval. More than 50 consensus nodes can participate in the CNN (Consensus Node Network) at the moment and the number will continuously increase as Kaia continues to aggressively optimize the algorithm.\n",
    "Current Website Url is https://docs.kaia.io/learn/governance/governance-by-kip. # Core Governance Changes by KIPs\n\n Kaia has undergone several hard forks to improve its governance system. These changes reflect the evolving needs of the network and its stakeholders.\n\n## KIP-163: CnStakingV3 With Public Delegation <a id=\"KIP-163\"></a>\n**Date: 2024-04-30**\n\nKIP-163 introduces a new CnStakingV3 that supports public delegation, allowing general users to delegate and re-delegate their KAIA tokens more easily. The staking information interval is also changed from 86,400 blocks to 1 block to enhance efficiency and accuracy in validator set and reward distribution.\nThe motivation behind this update is to address the limitations of CnStakingV2, where only a few validators offered public delegation services, limiting users' options. By enabling public delegation natively in CnStakingV3, users can delegate their KAIA to any validator offering this service, thus broadening the delegation options and improving network participation.\nCnStakingV3 will be compatible with existing core contracts like AddressBook and StakingTracker. Public delegation will be facilitated through a new contract named PublicDelegation, based on an interest-bearing token model (ERC-4626), where users receive non-transferable shares representing their assets. This approach aims to make the delegation process more transparent and accessible for all users.\nAdditionally, from the FORK_BLOCK onwards, staking information for block N will be derived from block N-1, ensuring more timely and accurate updates in the staking process. This change is designed to support the dynamic nature of staking and delegation in the Kaia network, making it more robust and user-friendly\n\n## KIP-160: An Update On Treasury Fund Rebalancing <a id=\"KIP-160\"></a>\n**Date: 2024-04-22**\n\nKIP-160 proposes enhancements to the Treasury Fund Rebalancing mechanism, addressing the limitations of KIP-103. The primary motivation is to allow both increases and decreases in fund balances and make the rebalance block number editable. This update involves generalizing the rebalancing process, enabling both the burning and minting of funds, and ensuring the rebalance block number can be aligned with changes in the blockchain's hard fork schedule. Find the rebalance detail in the [contracts addresses](../../references/contract-addresses) page.\n\n## KIP-149: Unified Deployment and Management of System Contracts <a id=\"KIP-149\"></a>\n**Date: 2023-09-20**\n\nKIP-149 introduces a standardized method for deploying and managing system contracts on the Kaia blockchain. System contracts directly impact or are read by the Kaia core protocol. This proposal includes a centralized Registry Contract to manage these contracts efficiently. Currently, the deployment methods for system contracts lack standardization, leading to inefficiencies. KIP-149 addresses this by introducing key features such as:\n- Registry Contract: Manages all system contracts, ensuring centralized tracking and governance control through a governance contract.\n- Proxy Pattern: Utilizes the UUPS proxy pattern to separate data storage from logic, allowing updates without affecting stored data and ensuring upgradability.\nSystem Contract Lifecycle: Defines stages (Registered, Active, Deprecated) for managing contracts efficiently.\n- Governance and Upgrades: Establishes a community-driven proposal and voting process for new contracts or upgrades, ensuring decentralized control and smooth implementation.\nKIP-149 aims to enhance Kaia’s governance and operational efficiency by providing a secure, scalable approach to managing system contracts, facilitating smoother upgrades, and promoting decentralized control.\n\n\n## KIP-103: Treasury Fund Rebalancing <a id=\"KIP-103\"></a>\n**Date: 2023-04-06**\n\nKIP-103 was introduced with the v1.10.2 release. It introduces a Treasury Fund Rebalancing mechanism which is the proposal for the implementation of KGP-6.\n\nThe KGP-6 proposal aims to establish a sustainable and verifiable KAIA token economy. It was approved by the Governance Council, with 26 out of 31 members voting in favor. The proposal includes contributions from various organizations such as 1inch, Swapscanner, Ground X, and others. The goal is to create a more robust and transparent ecosystem for the KAIA token. Find the rebalance detail in the [contracts addresses](../../references/contract-addresses) page.\n\n## KIP-82: KIP-82: A new GC reward structure due to abolition of the Gini coefficient <a id=\"KIP-82\"></a>\n**Date: 2022-09-21**\n\nKIP-82, introduced with v1.10.0 and activated at the Kore hardfork, addresses the limitations of Kaia’s previous reward system by removing the Gini coefficient used in block proposer selection and rewards. This change supports the expanding Governance Council, which now includes DAOs alongside traditional enterprises, necessitating a more balanced and inclusive reward system.\nKey changes include a new reward distribution structure, where 20% of GC rewards go to block proposers and 80% to stakers. This ensures fair compensation for both groups, enhancing network stability and participation. Voting power and rewards are now directly tied to the amount of KAIA tokens staked, encouraging broader network participation and reducing reliance on a few high-stake nodes. Block proposers are selected based on equal opportunity, independent of staking amounts, democratizing the process and enhancing decentralization.\nTo compensate for the opportunity cost of staking, inflationary rewards have been introduced, allowing public users to participate in the staking program managed by the GC and earn rewards, thus promoting network growth and stability.\nA new governance parameter (reward.kip82ratio) sets the initial reward distribution ratio at 20/80 between proposer and staking rewards, which can be adjusted through governance processes.\nKIP-82 represents a significant step towards a more equitable and stable governance system in Kaia, ensuring fair compensation for network contributions and fostering a more decentralized and resilient network.\n\n\n## KIP-81: Implementing the on-chain governance voting method <a id=\"KIP-81\"></a>\n**Date: 2022-09-19**\n\nKIP-81 was introduced with v1.10.0 and activated at the Kore hardfork. It introduced a stake-based voting mechanism through its governance portal. This approach shifts from the current system, where each Governance Council (GC) member casts one vote, to a model where voting power is determined by the amount of staked KAIA, with a cap to prevent any single entity from gaining excessive influence.\nA GC member will receive one vote per a certain amount of staked KAIA (initially set at 5 million KAIA), with a cap of one less than the total number of GC members. For instance, if there are 35 GC members, the maximum voting power is 34 votes, preventing monopolies.\nWith this system, governance topics are discussed in the Governance Forum and voted on through Klaytn Square, ensuring responsibility and transparency in decision-making.\nThis change aims to make the voting process more transparent and reflect the interests of those most invested in Kaia. By linking voting power to the staking amount, the system incentivizes greater participation and alignment of interests, ensuring that those who contribute more to the ecosystem have a proportionate influence on its decisions.\n\n\nThis governance structure ensures a fair and balanced decision-making process, aligning voting power with contributions to the ecosystem while preventing any single entity from having undue influence.\n",
    "Current Website Url is https://docs.kaia.io/learn/governance. # Governance\n\n## Kaia Governance: Taking the First Step to Decentralization <a id=\"kaia-governance-taking-the-first-step-to-decentralization\"></a>\n\nThe Kaia Governance Council is a council that has the right to decide various governance matters. To secure its reliability, the early members of the Governance Council have been limited to trusted organizations. This was chosen for the sake of efficiency in the platform's development and stabilization stage. Kaia reached the stage by joining hands with 31 Governance Council Members and a seamless operation of the Kaia Mainnet. \n\nKaia believes that Kaia governance should lead Kaia’s growth aligned with the transition of our world. One of the key transitions in the world is coming from the growth of the metaverse. The technological advancements are ushering in a more metaversified world. In particular, we are witnessing the growth of the influence of non-traditional entities such as Decentralized Autonomous Organizations (DAOs) and builders. As an organization operating on smart contracts without a centralized structure, DAOs will be a core entity in the metaverse. Builders will have more influence by contributing to the operation and growth of the metaverse. \n\nWe are reorganizing our governance structure to better accommodate to the changing world. In addition to traditional enterprises, Kaia is opening up the Membership of the Kaia Governance Council to the non-traditional entities mentioned above. \n\nBy introducing a stake-based governance model and eliminating the Gini Coefficient from Kaia’s voting mechanism, Kaia enables governance participants who can gather more support from Kaia Communities to shape Kaia in line with their preference. Entities who can make a proper decision in a Metaversified world will have more influence in the Kaia GC. We believe DAOs and builders will lead the scene in the future.\n\nTo further enhance participation and representation within the Kaia Governance Council, we are introducing \"Public Delegation.\" This function allows any token holder to delegate their voting power to other voters who will express opinions on their behalf. This mechanism is akin to representative democracy, where elected representatives vote on behalf of their constituents. Users maintain the flexibility to delegate or revoke their delegation at any time, ensuring their voice is heard.\n\nWhen the level of metaversification crosses the critical threshold, Kaia governance will be fully decentralized with various types of entities. Ultimately, Kaia will evolve into a DAO of DAOs and a platform for DAOs to communicate the voices of Kaia Communities through on-chain mechanisms.\n\n## Governance Topics <a id=\"governance-topics\"></a>\n\nThe main topics that can be decided through the governance structure include the following three areas, and proposals that require additional decision making may be introduced in a regular meeting or temporary meeting for review. The Kaia Governance Council must make decisions that are best for the growth of Kaia.\n\n- **Technology**\n  - Matters related to the technical update of the platform. Here the issues on the blockchain's basic structure (e.g., Account Structure), new features (e.g., L2 solution), or software update schedule are included.\n- **Economy**\n  - Issues relating to additional issuance of KAIA and its distribution structure, changes in transaction fees, and Kaia Ecosystem Fund spending approval etc. are included in this category.\n- **Governing Rule**\n  - The governance subjects and processes, as well as the rules for the responsibilities and rights of governing bodies, are included in this category.\n\n## Governance Process <a id=\"governance-process\"></a>\n\nKaia principally aims for the governance process to occur within the protocol (on-chain). Through this process, the votes will be recorded on the blockchain, and the results will be carried out following the vote. As the platform grows, more matters will be handled through on-chain governance.\n\n### General Governance Process <a id=\"general-governance-process\"></a>\n\nThe initial governance process proceeds in the following order: proposal introduction, statement of opinion submitted by advisors, voting by council members, and various follow-up procedures depending on the result of the vote.\n\nThose who have the right to introduce proposals can make sure each proposal is voted on by introducing it. Once the proposal is introduced, the advisors must conduct expert analysis on the proposal and submit a statement of opinion with their results.\n\nDuring the initial phase of Kaia governance, the Kaia Governance Council members will have the right to vote on the introduced proposals and will reference the advisors' statements of opinion to vote on what they believe to be the best option. This voting power can be strengthened through Public Delegation, allowing a wider range of token holders to participate in the decision-making process. If the number of votes passes the threshold, the proposal will pass; if not, the proposal will be dismissed. In its initial phase, the voting process may be replaced by a discussion process facilitated by the Kaia foundation. The follow-up measures for an approved proposal will be led by the chairman, and the chairman has the responsibility to carry out all the proposals that have been passed by the council during his or her term. \n\n## Governance Roadmap <a id=\"governance-roadmap\"></a>\n\nThe bodies participating in governance must act in consideration of Kaia’s long-term benefits rather than just for their personal interests, and they must actively participate in the governance process. Additionally, all participants that contribute to the network as Kaia Governance Council members must secure computing resources that are greater than the platform requirements and stake a set amount KAIA of their own or from third parties. For smooth operations in development and stabilization of the platform, Kaia Foundation will take on many roles in governance related matters in the initial development phase. In the future, however, other bodies will gradually take on greater roles in the decision-making process, and they will have the right to participate independently.\n\n* **Development Phase**: The initial development phase after the mainnet launch must quickly see parameter adjustments, new feature developments, etc. For this to be possible, many issues will be decided through gathering the opinions of the Kaia Governance Council members, service providers, and community members. To secure initial stabilization, Kaia Foundation will lead the decision-making process. Additionally, all decided matters will be transparently shared with the public.\n* **Stabilization Phase**: The Kaia Governance Council has governing rights on many proposals and this phase will gradually begin starting Jan 2021. For special matters such as those concerning platform development, and matters that directly affect the overall Kaia ecosystem, Kaia foundation may facilitate the discussion and execution. \n* **Decentralization Phase**: Following the stabilization period, a number of non-traditional entities such as DAOs and builders may be brought into the decision-making process for additional opinions. Public Delegation will play a crucial role in this phase, ensuring a broader and more diverse range of stakeholders can contribute to Kaia's governance. Decentralization phase may be gradually achieved through multiple stages with different governing rules and participants.\n",
    "Current Website Url is https://docs.kaia.io/learn/kni. # Kaia Network Identifier\n\n**KNI (Kaia Network Identifier)** is a URL scheme to identify a Kaia node. Its syntax is shown below:\n```\nkni://<nodeID>@<hostname>:<port>?subport=<subport>&discport=<discport>\n```\n![KNI scheme](/img/learn/kni_scheme.png)\n\n**nodeID** is a 512-bit public key corresponding to the node's private key. It is used to verify communication with peers on p2p network.\n\n**hostname** describes the address of a node, located between `@` and `:`. The address format can be one of the following:\n* IPv4 dotted decimal (`192.0.2.1`)\n* IPv6 (`[2001:db8::68]`)\n* IPv4-mapped IPv6 (`[2001:db8:3c4d:15::abcd:ef12]`)\n* Domain name (`your.node.com`)\n\n**port** is used to make connections with peer nodes through TCP. In Kaia, the default `port` is `32323` and the default `subport` is `32324`. Note that the default `subport` is configured as `port + 1` in `kend.conf`. Depending on the number of TCP listening ports, Kaia offers two [types of connections](scaling-solutions#multi-channel-communication).\n\n**discport** is used for checking if the known neighbors are reachable kaia nodes and fetching their neighbors' addresses for new connections. Note that this is a UDP port.\nBy default, the UDP port, or `discport`, uses the same port with the TCP port.\nIf the node uses a different port for `discport`, it can be specified by the `discport` query parameter.\n\nThe following two URLs shows a KNI example of a node having IP address `10.0.0.1` and TCP listening port `32323` and `32324`.\nIf `discport` is omitted, it is set to the UDP port of `32323`, same as the value of `port`.\n```\nkni://a979...163c@10.0.0.1:32323                 # either single-channel or multi-channel peer with omitted subport\nkni://a979...163c@10.0.0.1:32323?subport=32324   # multi-channel peer\n```\n\nThe next two shows KNI examples of nodes having `discport` of `30301`.\n```\nkni://a979...163c@10.0.0.1:32323?discport=30301                 # either single-channel or multi-channel peer with omitted subport\nkni://a979...163c@10.0.0.1:32323?subport=32324&discport=30301   # multi-channel peer\n```\n\nIf you want to know how to generate a KNI of a node, please refer to [Node Key & Node URI Creation](../nodes/core-cell/install/before-you-install#node-key--node-uri-creation).\nThe KNI scheme is used in node discovery protocol, [setting `static-nodes.json` file](../nodes/core-cell/install/install-proxy-nodes#install-static-nodesjson), [addPeer API](../references/json-rpc/admin/add-peer), [bootnodes option](../misc/operation/configuration#properties) and etc.\n",
    "Current Website Url is https://docs.kaia.io/learn. # Kaia Overview\n\nKaia is a highly optimized, <LinkWithTooltip to=\"../misc/glossary#bft-based-public-blockchain\" tooltip=\"A blockchain that ensures consensus even if up to 1/3 of nodes act maliciously,<br /> using Byzantine Fault Tolerance (BFT) algorithms to maintain network integrity.\"> BFT-based public blockchain </LinkWithTooltip> designed to meet enterprise-grade reliability and performance standards. This overview details Kaia's architecture, features, and ecosystem.\n\n## Key Design Goals\n\nKaia blockchain aims to:\n\n- Achieve immediate finality for transactions.\n- Provide high transaction processing speed for real-world use cases.\n- Lower the cost of running blockchain applications.\n- Reduce barriers to entry for end-users.\n- Facilitate easy technology adoption for various industries.\n\n## Core Specifications\n\nKaia blockchain offers:\n\n- 1-second block generation and confirmation time.\n- Processing capability of 4,000 transactions per second.\n- Low gas price, approximately 1/10 of Ethereum.\n- EVM (Ethereum Virtual Machine) compatibility, supporting Solidity contracts.\n- Governance by reputable corporations worldwide forming <LinkWithTooltip to=\"../misc/glossary#kaia-governance-council-kgc\" tooltip=\"A consortium governing Kaia blockchain development and operations.\">Kaia Governance Council</LinkWithTooltip>.\n\n## Network Architecture\n\nKaia's network is structured into three logical subnetworks:\n\n![Kaia Ecosystem and its Logical Subnetworks (CCN, ENN, SCN)](/img/learn/klaytn_network_overview.png)\n\n1. **Core Cell Network (CCN)**: Consists of [Core Cells (CCs)](../nodes/core-cell) responsible for transaction verification, execution, and block creation.\n\n2. **Endpoint Node Network (ENN)**: Composed of [Endpoint Nodes (ENs)](../nodes/endpoint-node) that handle RPC API requests and process data for service chains.\n\n3. **[Service Chain](../nodes/service-chain) Network (SCN)**: Auxiliary blockchains independently operated by dApps, connected to the main chain via ENs.\n\n### Node Types\n\n![Kaia Main Chain Physical Topology and Tiered Architecture (CNN, PNN, and ENN)](/img/learn/klaytn_network_node.png)\n\n1. **Core Cell (CC)**: Composed of one Consensus Node (CN) and two Proxy Nodes (PNs).\n\n   - **Consensus Node (CN)**: Participates in block generation.\n   - **Proxy Node (PN)**: Provides network interface, transmits transaction requests, and propagates blocks.\n\n2. **Endpoint Node (EN)**: Serves as network endpoints, handling API requests and data processing.\n\n3. **Bootnode**: Special nodes operated by Kaia to help new nodes join the network.\n\n## Consensus Algorithm\n\nKaia uses an optimized version of Istanbul BFT, implementing Practical Byzantine Fault Tolerance (PBFT) with blockchain-specific modifications. The consensus process involves:\n\n1. Election of a committee (<LinkWithTooltip to=\"../misc/glossary#proposer\" tooltip=\"A randomly chosen consensus node for block creation.\">proposer</LinkWithTooltip> and <LinkWithTooltip to=\"../misc/glossary#validator\" tooltip=\"A node verifying data, ensuring efficient block processing.\">validator</LinkWithTooltip>) using Verifiable Random Function (VRF).\n2. Block generation by the elected proposer.\n3. Block verification and signing by the committee.\n\nThis [consensus mechanism](consensus-mechanism) enables Kaia to achieve high performance, processing 4,000 transactions per second with instant transaction finality.\n\n## Block Generation and Propagation\n\n- Blocks are generated in rounds, targeting a 1-second interval.\n- Proposer and committee selection is random but deterministic.\n- Blocks require signatures from more than two-thirds of committee members.\n- Separate propagation channels for blocks and transactions (multichannel approach) manage network congestion.\n\n## Kaia Virtual Machine (KVM)\n\nThe Kaia Virtual Machine (KVM) provides a robust environment for smart contract execution:\n\n- Based on the Ethereum Virtual Machine (EVM).\n- Supports all EVM opcodes and additional Kaia-specific precompiled contracts.\n- Compatible with Solidity and Ethereum development tools (e.g. Remix, Hardhat, Foundry).\n- Allows developers to port Ethereum smart contracts to Kaia with minimal modifications.\n\n## Security Measures\n\nKaia implements several security measures:\n\n- VRF for random selection of block proposers, adding unpredictability to the process.\n- Separation of validator keys and reward keys to protect validators from potential key theft.\n- Transparent block verification process, with all committee members verifying signatures on proposed blocks.\n\n## Interoperability\n\nKaia is designed for seamless interaction with other blockchain networks:\n\n- <LinkWithTooltip tooltip=\"A blockchain that can run smart contracts and <br/> interact with the Ethereum Virtual Machine(EVM)\">EVM-compatible</LinkWithTooltip>, allowing easy deployment of Ethereum smart contracts.\n- Designed to interoperate with other EVM-SDK based chains.\n- Supports cross-platform transactions and smart contract execution.\n\n## Token Economy\n\nKaia's native token, [KAIA](./token-economics/kaia-native-token), plays a central role in the blockchain's economy:\n\n- KAIA tokens are issued automatically with each new block.\n- Initial annual inflation rate: 5.2%.\n- Block rewards are distributed as follows:\n  - CCO and Community: 50% (20% Block Creator rewards, 80% Staking rewards)\n  - KEF (Kaia Ecosystem Fund): 25%\n  - KIF (Kaia Infrastructure Fund): 25%\n\nThis distribution model incentivizes network participation while supporting the growth and development of the Kaia ecosystem.\n\n## Governance\n\nKaia implements an on-chain governance system designed to be fair and inclusive:\n\n- Voting rights are proportional to the amount of KAIA tokens staked.\n- A cap on voting rights prevents suppression of minority opinions.\n- Delegation of voting power is allowed.\n- All governance proposals are recorded on-chain, ensuring transparency.\n\n## Auditability and Transparency\n\nKaia prioritizes transparency and auditability:\n\n- All transactions provide an immutable and verifiable history of state changes.\n- Two primary tools for blockchain exploration:\n  - [Kaiascope](https://kaiascope.com/): A comprehensive blockchain explorer.\n  - [Kaiascan](http://kaiascan.io/): A user-friendly interface for quick blockchain data lookups.\n- The \"Square\" voting platform discloses all expenses and quarterly known transactions.\n\n## Network Monitoring\n\nTo ensure optimal performance and reliability, Kaia implements:\n\n- A multi-channel approach to manage network congestion.\n- Dedicated network monitoring for all validators.\n",
    "Current Website Url is https://docs.kaia.io/learn/scaling-solutions. # Scaling Solutions\n\nKaia offers robust scaling solutions to ensure high throughput and responsiveness even under heavy network load. These solutions include Service Chains and a novel Multi-Channel communication architecture\n\n## Service Chain <a id=\"service-chain\"></a>\n\nService chains in Kaia are auxiliary blockchains independent from the Kaia main chain,\ntailored for individual dApp requiring special node configurations, customized security levels,\nor exceptionally high throughput that makes deploying the dApp on the main chain inconvenient or economically infeasible.\n\nWhile there are fully-decentralized scaling solutions, due to their difficult interfaces such as challenge or exit and non-immediate finality,\nwe take a different approach in Kaia’s Service Chain by sacrificing the full decentralization for better usability,\ninstant finality, high performance, and high availability.\n\nKaia service chains may be used for various service-specific goals,\nand can connect to the main chain for multiple reasons including data anchoring (periodic storing of block hashes\nfrom the service chain onto the main chain to compensate for the decreased security of the service chain due to the smaller number of nodes) or\nvalue transfer (interchain transfer of KAIA, Kaia’s native unit of value, and the tokens\nissued by dApps).\n\n## Network <a id=\"network\"></a>\n\nService chains connected to Kaia main chain are collectively called Service Chain Network.\nNote that the method of connection between service chains and the main chain may change in Kaia’s future iterations.\n\n![Figure 1. Kaia Main Chain and Service Chain](/img/learn/mainchain_servicechain.png)\n\nFigure 1 shows the network topology of service chains being used to meet various business needs, connected\nwith Kaia main chain to expand the Kaia network.\n\n![Figure 2. Main Chain and Service Chain Connection using Main/Sub-Bridge Model](/img/learn/sc_connection.png)\n\nFigure 2 shows an example of SCN (Service Chain Consensus Node) connected directly with Kaia main chain’s EN (Endpoint Node)\nusing a main/sub-bridge model in using the service chain’s features.\n \n## Features <a id=\"features\"></a>\n\nService Chain expands and augments Kaia by providing a data integrity mechanism and supporting token transfers between different chains.\n\n### Data Anchoring <a id=\"data-anchoring\"></a>\n\nFor data integrity, Service Chain can automatically anchor every service chain block hash as a special transaction to the main chain.\nThis data anchoring can ensure to the service users that the data in the service chain cannot be altered once it is created.\n\n### Value Transfer <a id=\"value-transfer\"></a>\n\nTo help the service providers (SPs) to easily migrate service users and values across chains,\ntransferring tokens, such as KAIA (Kaia's native unit of value) and Kaia tokens issued by dApps, between different chains can be enabled.\nUsers can easily request to transfer tokens to other chains by sending a transaction to a special contract, called bridge contract.\n\n## Multi-Channel Communication\n\nKaia employs a multi-channel communication architecture to enhance network performance and resilience, particularly during periods of high transaction volume. By separating different message types onto dedicated communication channels, Kaia can maintain efficient block propagation and consensus even under heavy network congestion.\n\n### Architecture\n\n![Multi-Channel Server](/img/learn/multichannel.png)\n\n*Multi-Channel Connection*\n\n![Single Channel Server](/img/learn/singlechannel.png)\n\n*Single-Channel Connection*\n\n### Configuration Modes\n\n- **Multi-Channel:** Uses two ports. Enabled by default in `kend` due to `MULTICHANNEL=1` in `kend.conf`. Disable by setting `MULTICHANNEL=0`. Customize ports using `--port` and `--subport` flags.\n- **Single-Channel:** Uses one port (default 32323). Active when `MULTICHANNEL` is not set or set to `0`.\n\n### How Multi-Channel Works\n\nMulti-channel separates different message types onto dedicated ports:\n\n* **Main Port:** Handles block-related messages (requests/responses for hash, header, body, receipt) and consensus messages (Request, Preprepare, Prepare, Commit, RoundChange). The meaning of the messages can be found in [PBFT](./consensus-mechanism#pbft-practical-byzantine-fault-tolerance).\n* **Subport:** Handles transaction messages.\n\nThis separation enhances network stability: if one port fails, the other continues operating. For example, if the subport (typically congested during high traffic) fails, the main port maintains essential block and consensus operations.\n\n### Connection Establishment\n\n* **Multi-Channel to Multi-Channel:** Both ports are used.\n* **Other Cases (Multi-Channel to Single-Channel or Single-Channel to Single-Channel):** A single port is used.\n\nIf a node attempts to connect without specifying a subport, it initially connects using a single port. During the handshake, if the peer is multi-channel, the connection is re-established using both ports.\n\n### Port Configuration (KNI)\n\nSee [the KNI scheme](./kni) for details. Default ports are 32323 (main) and 32324 (sub).\n\n### Integration with KNI\n\nMulti-channel integrates with KNI for node discovery and connection. KNI URLs allow specifying both main and subports.\n\n### Implementation Note\n\nKaia's multi-channel implementation deviates slightly from the original specification. While the details of this deviation are beyond the scope of this document, the core principles of enhanced network communication and robustness remain central to Kaia's operation. This information is primarily relevant for node operators and developers.\n\nIn summary, multi-channel enhances Kaia's network by segregating message traffic, improving efficiency and resilience. While providing advanced configuration options for node operators, the system remains transparent to general users.",
    "Current Website Url is https://docs.kaia.io/learn/smart-contracts/precompiled-contracts. # Precompiled Contracts\n\nKaia provides several useful precompiled contracts, none of which are state-changing.\nThese contracts are implemented in the platform itself as a native implementation, which means they are part of the Kaia client specifications. \nThe precompiled contracts from address 0x01 through 0x0A are the same as those in Ethereum. \nThe utility of precompiles falls into four major categories:\n    . Elliptic curve digital signature recovery.\n    . Hash Methods\n    . Memory copying\n    . Methods to enable elliptic curve maths for zk proofs. \nKaia additionally implements precompiled contracts from 0x3FD through 0x3FF to support new Kaia features.\n\n:::note\n\nContracts deployed before the istanbul EVM hardfork should use the original addresses.\n* case 1) The contracts deployed in Kairos at block number `#75373310` recognizes 0x09, 0x0a, and 0x0b as addresses of vmLog, feePayer, and validateSender, respectively, and blake2f cannot be used.\n* case 2) The contracts deployed in Kairos at block number `#75373314` recognizes 0x09 as the address of blake2f, and recognizes 0x3fd, 0x3fe, and 0xff as addresses of vmLog, feePayer, and validateSender.\n\nPrecompiled contracts related hardfork changes can be found at the bottom of this page. Go to [Hardfork Changes](#hardfork-changes).\n\n:::\n\n## Address 0x01: ecrecover\\(hash, v, r, s\\) <a id=\"address-0x-01-ecrecover-hash-v-r-s\"></a>\n\nThe address 0x01 implements ecrecover. It returns the address from the given signature by calculating a recovery function of ECDSA. It is the only precompile that comes with a solidity wrapper. Its function prototype is as follows:\n\n```text\nfunction ecRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public view returns (address) {\n        address r = ecrecover(hash, v, r, s); // prototype function \n        require(r != address(0), \"signature is invalid\");\n} // solidity wrapper\n```\n\n## Address 0x02: sha256\\(data\\) <a id=\"address-0x-02-sha-256-data\"></a>\n\nThe address 0x02 implements SHA256 hash. It returns a SHA256 hash from the given data. It is mostly used by Bitcoin and Zcash as Ethereum uses Keccak256. Its function prototype is as follows:\n\n```text\nfunction sha256(uint256 numberToHash) public view returns (bytes32 hash) {\n      (bool ok, bytes memory hashData) = address(0x02).staticcall(abi.encode(numberToHash));\n      require(ok);\n      hash = abi.decode(hashData, (bytes32));\n}\n```\n\nusage in Yul / Inline Assembly:\n\n```text\nfunction sha256Yul(uint256 numberToHash) public view returns (bytes32) {\n        assembly {\n      mstore(0, numberToHash) // store number in the zeroth memory word\n\n      let ok := staticcall(gas(), 2, 0, 32, 0, 32)\n      if iszero(ok) {\n    revert(0,0)\n      }\n          return(0, 32)\n  }\n}\n```\n\n## Address 0x03: ripemd160\\(data\\) <a id=\"address-0x-03-ripemd-160-data\"></a>\n\nThe address 0x03 implements RIPEMD160 hash. It returns a RIPEMD160 hash from the given data. Its function prototype is as follows:\n\n```text\nfunction RIPEMD160(bytes calldata data) public view returns (bytes20 h) {\n  (bool ok, bytes memory out) = address(0x03).staticcall(data);\n  require(ok);\n  h = bytes20(abi.decode(out, (bytes32)) << 96);\n}\n```\n\n## Address 0x04: datacopy\\(data\\) <a id=\"address-0x-04-datacopy-data\"></a>\n\nThe address 0x04 implements datacopy \\(i.e., identity function\\). It returns the input data directly without any modification. This precompiled contract is not supported by the Solidity compiler. The following code with inline assembly can be used to call this precompiled contract.\n\n```text\nfunction callDatacopy(bytes memory data) public returns (bytes memory) {\n    bytes memory ret = new bytes(data.length);\n    assembly {\n        let len := mload(data)\n        if iszero(call(gas, 0x04, 0, add(data, 0x20), len, add(ret,0x20), len)) {\n            invalid()\n        }\n    }\n\n    return ret;\n}     \n```\n\n## Address 0x05: bigModExp\\(base, exp, mod\\) <a id=\"address-0x05-bigmodexp-base-exp-mod\"></a>\n\nThe address 0x05 implements the formula `base**exp % mod`. It returns the result from the given data. This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract. Note that although this precompiled contract supports an arbitrary length of inputs, the below code uses a fixed length of inputs as an example.\n\n```text\nfunction callBigModExp(bytes32 base, bytes32 exponent, bytes32 modulus) public returns (bytes32 result) {\n    assembly {\n        // free memory pointer\n        let memPtr := mload(0x40)\n\n        // length of base, exponent, modulus\n        mstore(memPtr, 0x20)\n        mstore(add(memPtr, 0x20), 0x20)\n        mstore(add(memPtr, 0x40), 0x20)\n\n        // assign base, exponent, modulus\n        mstore(add(memPtr, 0x60), base)\n        mstore(add(memPtr, 0x80), exponent)\n        mstore(add(memPtr, 0xa0), modulus)\n\n        // call the precompiled contract BigModExp (0x05)\n        let success := call(gas, 0x05, 0x0, memPtr, 0xc0, memPtr, 0x20)\n        switch success\n        case 0 {\n            revert(0x0, 0x0)\n        } default {\n            result := mload(memPtr)\n        }\n    }\n}\n```\n\n## Address 0x06: bn256Add\\(ax, ay, bx, by\\) <a id=\"address-0x-06-bn-256-add-ax-ay-bx-by\"></a>\n\nThe address 0x06 implements a native elliptic curve point addition. It returns an elliptic curve point representing `(ax, ay) + (bx, by)` such that \\(ax, ay\\) and \\(bx, by\\) are valid points on the curve bn256. This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callBn256Add(bytes32 ax, bytes32 ay, bytes32 bx, bytes32 by) public returns (bytes32[2] memory result) {\n    bytes32[4] memory input;\n    input[0] = ax;\n    input[1] = ay;\n    input[2] = bx;\n    input[3] = by;\n    assembly {\n        let success := call(gas, 0x06, 0, input, 0x80, result, 0x40)\n        switch success\n        case 0 {\n            revert(0,0)\n        }\n    }\n}\n```\n\n## Address 0x07: bn256ScalarMul\\(x, y, scalar\\) <a id=\"address-0x-07-bn-256-scalarmul-x-y-scalar\"></a>\n\nThe address 0x07 implements a native elliptic curve multiplication with a scalar value. It returns an elliptic curve point representing `scalar * (x, y)` such that \\(x, y\\) is a valid curve point on the curve bn256. This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callBn256ScalarMul(bytes32 x, bytes32 y, bytes32 scalar) public returns (bytes32[2] memory result) {\n    bytes32[3] memory input;\n    input[0] = x;\n    input[1] = y;\n    input[2] = scalar;\n    assembly {\n        let success := call(gas, 0x07, 0, input, 0x60, result, 0x40)\n        switch success\n        case 0 {\n            revert(0,0)\n        }\n    }\n}\n```\n\n## Address 0x08: bn256Pairing\\(a1, b1, a2, b2, a3, b3, ..., ak, bk\\) <a id=\"address-0x-08-bn-256-pairing-a-1-b-1-a-2-b-2-a-3-b-3-ak-bk\"></a>\n\nThe address 0x08 implements elliptic curve paring operation to perform zkSNARK verification. For more information, see [EIP-197](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197). This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callBn256Pairing(bytes memory input) public returns (bytes32 result) {\n    // input is a serialized bytes stream of (a1, b1, a2, b2, ..., ak, bk) from (G_1 x G_2)^k\n    uint256 len = input.length;\n    require(len % 192 == 0);\n    assembly {\n        let memPtr := mload(0x40)\n        let success := call(gas, 0x08, 0, add(input, 0x20), len, memPtr, 0x20)\n        switch success\n        case 0 {\n            revert(0,0)\n        } default {\n            result := mload(memPtr)\n        }\n    }\n}\n```\n\n## Address 0x09: blake2F\\(rounds, h, m, t, f\\) <a id=\"address-0x-09-blake2F-rounds-h-m-t-f\"></a>\nThe address 0x09 implements BLAKE2b F compression function. For more information, see [EIP-152](https://eips.ethereum.org/EIPS/eip-152). This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callBlake2F(uint32 rounds, bytes32[2] memory h, bytes32[4] memory m, bytes8[2] memory t, bool f) public view returns (bytes32[2] memory) {\n    bytes32[2] memory output;\n\n    bytes memory args = abi.encodePacked(rounds, h[0], h[1], m[0], m[1], m[2], m[3], t[0], t[1], f);\n\n    assembly {\n        if iszero(staticcall(not(0), 0x09, add(args, 32), 0xd5, output, 0x40)) {\n            revert(0, 0)\n        }\n    }\n\n    return output;\n}\n```\n\n## Address 0x0A: kzg\\(data\\) <a id=\"address-0x-0a-kzg-data\"></a>\nThe address 0x0A implements the KZG proof verification to a given value at a given point. For more information, see [EIP-4844](https://eips.ethereum.org/EIPS/eip-4844). This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callKzg(bytes memory data) public returns (bytes memory) {\n    bytes memory ret;\n    assembly {\n        let len := mload(data)\n        if iszero(call(gas(), 0x0a, 0, add(data, 0x20), len, 0, 0)) {\n            revert (0,0)\n        }\n    }\n    return ret;\n}\n```\n\n## Address 0x3fd: vmLog\\(str\\) <a id=\"address-0x-3fc-vmlog-str\"></a>\n\nThe address 0x3FD prints the specified string `str` to a specific file or passes it to the logger module. For more information, see [debug_setVMLogTarget](../../references/json-rpc/debug/set-vm-log-target). Note that this precompiled contract should be used only for debugging purposes, and it is required to enable the `--vmlog` option when the Kaia node starts. Also, the log level of the Kaia node should be 4 or more to see the output of vmLog. This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction callVmLog(bytes memory str) public {\n    address(0x3fd).call(str);\n}\n```\n\n## Address 0x3fe: feePayer\\(\\) <a id=\"address-0x-3fd-feepayer\"></a>\n\nThe address 0x3FE returns a fee payer of the executing transaction. This precompiled contract is not supported by the Solidity compiler. The following code can be used to call this precompiled contract.\n\n```text\nfunction feePayer() internal returns (address addr) {\n    assembly {\n        let freemem := mload(0x40)\n        let start_addr := add(freemem, 12)\n        if iszero(call(gas, 0x3fe, 0, 0, 0, start_addr, 20)) {\n          invalid()\n        }\n        addr := mload(freemem)\n    }\n}\n```\n\n## Address 0x3ff: validateSender\\(\\) <a id=\"address-0x-3fe-validatesender\"></a>\n\nThe address 0x3FF validates the sender's signature with the message. Since Kaia [decouples key pairs from addresses](../accounts#decoupling-key-pairs-from-addresses), it is required to validate that a signature is properly signed by the corresponding sender. To do that, this precompiled contract receives three parameters:\n\n* The sender's address to get the public keys\n* The message hash that is used to generate the signature\n* The signatures that are signed by the sender's private keys with the given message hash\n\nThe precompiled contract validates that the given signature is properly signed by the sender's private keys. Note that Kaia natively support multi signatures, which means there can be multiple signatures. The signature must be 65 bytes long.\n\n```text\nfunction ValidateSender(address sender, bytes32 msgHash, bytes sigs) public returns (bool) {\n    require(sigs.length % 65 == 0);\n    bytes memory data = new bytes(20+32+sigs.length);\n    uint idx = 0;\n    uint i;\n    for( i = 0; i < 20; i++) {\n        data[idx++] = (bytes20)(sender)[i];\n    }\n    for( i = 0; i < 32; i++ ) {\n        data[idx++] = msgHash[i];\n    }\n    for( i = 0; i < sigs.length; i++) {\n        data[idx++] = sigs[i];\n    }\n    assembly {\n        // skip length header.\n        let ptr := add(data, 0x20)\n        if iszero(call(gas, 0x3ff, 0, ptr, idx, 31, 1)) {\n          invalid()\n        }\n        return(0, 32)\n    }\n}\n```\n## Hardfork Changes <a id=\"hardfork-changes\"></a>\n| Hardfork     | New items                           | Changes                                                                                                                                                                                                             |\n|--------------|:------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Cancun EVM   | kzg (0x0a) precompiled contract     |                                                                                                                                                                                                                     |\n| Kore         |                                     | modExp (0x05) precompiled contract use new gas <br/>calculation logic. Computation cost also affected. <br/>Become more accurate.                                                                                   |                                                                                                                                                                                                                                                                                                                                                                                                                         \n| Istanbul EVM | blake2f (0x09) precompiled contract | kaia precompiled contract addresses has been moved <br/>from 0x09,0x0A,0x0B to 0x3FD,0x3FE,0x3FF.<br/>see the below [precompiled contract address change table](#precompiled-contract-address-change) for detail. |\n\n### Precompiled contract address change <a id=\"precompiled-contract-address-change\"></a>\n| Precompiled Contract | address **BEFORE** istanbul EVM hardfork | address **AFTER** istanbul EVM hardfork |\n|:---------------------|:-----------------------------------------|:----------------------------------------|\n| vmLog                | 0x09                                     | 0x3fd                                   |\n| feePayer             | 0x0a                                     | 0x3fe                                   |\n| validateSender       | 0x0b                                     | 0x3ff                                   |\n",
    "Current Website Url is https://docs.kaia.io/learn/smart-contracts. # Kaia Smart Contracts\n\nThe Kaia Blockchain leverages the power of smart contracts, recognizing their importance in driving innovation and functionality within the ecosystem. Here's a closer look at the concept of smart contracts within the Kaia Blockchain:\n\n## What are Smart Contracts? <a id=\"what-are-smart-contracts\"></a>\n\nSmart contracts on the Kaia Blockchain are essentially self-executing digital agreements written in code. These contracts exist on the blockchain, giving them unique characteristics:\n\n- **Immutable**: Once deployed, the code cannot be altered, guaranteeing the integrity and permanence of the agreement.\n- **Transparent**: The code and all transaction history associated with a smart contract are publicly viewable on the blockchain, ensuring transparency and accountability.\n- **Secure**: Protected by the robust cryptographic principles of the Kaia Blockchain, making them highly resistant to tampering or unauthorized modifications.\n\n## Kaia Virtual Machine (KVM): Powering Smart Contracts <a id=\"kaia-virtual-machine-powering-smart-contracts\"></a>\n\nKaia Blockchain utilizes a specialized virtual machine called the Kaia Virtual Machine (KVM) to execute smart contracts. The KVM is a derivative of the widely-used Ethereum Virtual Machine (EVM), providing key advantages:\n\n- **Developer-Friendly**: Developers familiar with Ethereum can easily migrate existing smart contracts to Kaia or build new ones using familiar tools, languages (like Solidity), and [development environments](../../build/smart-contracts/ide-and-tools/ide-and-tools).\n- **Enhanced Functionality**: While maintaining full compatibility with EVM opcodes, the KVM introduces additional precompiled contracts unique to Kaia, expanding the capabilities for developers. To avoid conflicts with existing EVM precompiled contracts, Kaia's [precompiled contract addresses](precompiled-contracts) are assigned in descending order from `0x03ff`.\n\nWhen a smart contract is deployed on Kaia, it receives a unique address on the blockchain, much like a digital mailbox. Users interact with the contract by sending transactions to this address. These transactions can trigger a variety of actions predefined in the contract's code, such as:\n\n- **Token Transfers**: Automatically transfer tokens between accounts based on predefined conditions.\n- **Data Storage**: Store and retrieve data securely and transparently on the blockchain.\n- **Complex Logic Execution**: Execute more sophisticated logic and computations based on the contract's rules.\n\n## What are Smart Contracts used for on Kaia? <a id=\"what-are-smart-contracts-used-for-on-kaia\"></a>\n\nSmart contracts are highly versatile and power a wide array of applications within the Kaia ecosystem:\n\n- **Decentralized Applications (dApps)**: Smart contracts serve as the foundation for building and running dApps on Kaia. This enables the creation of decentralized exchanges, lending platforms, prediction markets, gaming applications, and much more.\n- **Tokenization of Assets**: Smart contracts can represent and manage real-world assets like gold, real estate, intellectual property, or even digital items as unique tokens on the blockchain. This process, known as tokenization, unlocks liquidity and creates new opportunities for fractional ownership and trading.\n- **Automated Governance**: Kaia's on-chain governance system relies on smart contracts to ensure transparency and fairness. These contracts facilitate voting mechanisms, automatically implement changes based on voting outcomes, and provide a tamper-proof record of all governance decisions.\n- **System Contracts**: Kaia itself utilizes smart contracts to manage critical aspects of its protocol. These system contracts handle tasks such as validator registration, network parameter updates, and the execution of governance mechanisms, further enhancing transparency and security.\n\n## Benefits of Smart Contracts on Kaia <a id=\"benefits-of-smart-contracts-on-kaia\"></a>\n\nThe use of smart contracts on the Kaia Blockchain offers numerous benefits, including:\n\n- **Increased Efficiency**: Automating agreements and processes eliminates the need for intermediaries, significantly reducing time, costs, and potential points of friction.\n- **Enhanced Security**: Immutability, transparency, and cryptographic security work together to minimize the risks of fraud, manipulation, or security breaches.\n- **Improved Transparency**: All transactions and interactions with smart contracts are recorded on the blockchain, providing a publicly auditable trail and fostering trust and accountability.\n- **Trustless Environment**: Smart contracts remove the reliance on trust between parties. The code itself acts as the impartial enforcer of the agreement, ensuring all parties adhere to the predefined rules.\n- **Affordable Smart Contract Execution Cost**: Kaia prioritizes affordable smart contract execution.  Blockchains often charge fees for contract execution to encourage efficient code and deter malicious actors.  However, high fees can hinder adoption. Kaia addresses this by using an opcode-based fixed fee model with a low unit cost per opcode. This is achieved through Kaia's enhanced scalability, which includes vertically scaling each CN node with high-end hardware, parallelizing computation via service chains, and horizontally scaling physical clusters. This combination allows for significantly lower opcode costs compared to other platforms, fostering broader adoption and innovation.\n\nIn essence, smart contracts are fundamental building blocks of the Kaia Blockchain. They empower developers to create a diverse range of decentralized applications and services, fostering innovation and expanding the possibilities of what's achievable on the blockchain. The use of smart contracts within the Kaia ecosystem promotes transparency, security, and efficiency, paving the way for a more equitable and accessible decentralized future.",
    "Current Website Url is https://docs.kaia.io/learn/storage/block-sync. # Block Synchronization\n\nBlock synchronization is the process of updating a node with the latest blocks and states from the Kaia blockchain. Node operators can choose from various synchronization methods based on their hardware specifications and service requirements.\n\n## Full Sync\n\nFull sync is the default synchronization method in Kaia, activated by either using the `--syncmode full` flag or omitting the flag altogether. This method involves downloading and executing every block (header and transactions) from p2p peers to generate the block states.\n\n### State Persistence Options\n\nWhile Full Sync processes every block, Kaia provides flexibility in how much state data is persistently stored on disk. This allows node operators to balance data accessibility with storage capacity. The following diagram illustrates these options:\n\n![Block sync options](/img/learn/block_sync.png)\n\n- **Archive Mode**: This mode persists every block state to disk. To enable it, use the `--gcmode archive` flag. Nodes operating in this mode are referred to as **Archive Nodes**.\n- **Full Mode**: This mode persists block states at specific intervals to optimize disk usage. To enable it, use the `--gcmode full` flag or omit the `--gcmode` flag altogether. Nodes operating in this mode are referred to as **Full Nodes**. Don't confuse this with the general \"full sync\" method.\n\nIn a full node, block states are persisted to disk every multiple of the number specified by `--state.block-interval NNN` (default: 128). Also the block states of the recent `--state.tries-in-memory NNN` (default: 128) blocks are kept in memory to serve APIs. Therefore, block states are available only when it is a multiple of block interval or recently processed.\n\n```js\n// State available\n> eth.getBalance('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', 150000000)\n735000000000002\n\n// State absent\n> eth.getBalance('0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266', 150000001)\nError: missing trie node 64380a8de7bd83a6421c9ad45ae596a0eebbc7b504d061f4a57c61742eadc804 (path )\n\tat web3.js:6812:9(39)\n\tat send (web3.js:5223:62(29))\n\tat <eval>:1:15(4)\n```\n\n:::info\n\nApplications should not assume a fixed block interval of 128. While it's the default, nodes can be configured to use different intervals.\n\n:::\n\n#### Choosing the Right Option\n\nApplications typically need access to the latest state data, including nonces, balances, and contract storage. While apps and developers may occasionally utilize debug tracing APIs for historical blocks, these blocks can generally be recreated by re-executing transactions from the nearest stored state (e.g., up to 127 blocks prior under the default block interval). Therefore, running a full node is a cost-effective choice for most applications.\n\nHowever, data analysis often requires using an archive node. It's important to note that even when querying historical consensus data, such as validator information or rewards, an archive node is still required. This is because consensus data is derived from the state of the blockchain at specific block heights.\n\nTo summarize:\n\n- Full Node: Suitable for most applications requiring access to the latest state data and occasional historical data access via tracing APIs.\n- Archive Node: Essential for applications requiring comprehensive historical state access, such as data analysis tools.\n\n### Hybrid Option: Upstream EN\n\nIf your node mostly serves the latest data but occasionally serves historic data, then try the [Upstream EN](../../misc/operation/upstream-en) feature. This feature allows you to balance the storage requirements of an archive node with the performance of a full node.\n\n## Chaindata Snapshot\n\nChaindata snapshots offer a faster alternative to Full Sync. A snapshot is a compressed archive (e.g. `.tar.gz` file) of a synced node's data directory. Downloading and extracting a snapshot allows a new node to quickly catch up to the blockchain without processing every block individually. See [Use Chaindata Snapshots](../../misc/operation/chaindata-snapshot) for more information.\n\n## Snap Sync\n\nCurrently, Kaia nodes do not support the [Snap Sync](https://geth.ethereum.org/docs/fundamentals/sync-modes) method. However, using a chaindata snapshot provides a comparable advantage in terms of faster initial synchronization.",
    "Current Website Url is https://docs.kaia.io/learn/storage/live-pruning. # Live Pruning\n\nSee [Storage Optimization](state-pruning#state-live-pruning).\n",
    "Current Website Url is https://docs.kaia.io/learn/storage/state-migration. # State Migration\n\nSee [Storage Optimization](state-pruning#state-batch-pruning-state-migration).\n",
    "Current Website Url is https://docs.kaia.io/learn/storage/state-pruning. # Storage Optimization\n\nAs the Kaia blockchain grows, so does the storage required to store the chain data. Kaia implements two main techniques to manage this growing storage requirement:\n\n## State Batch Pruning (State Migration)\n\nState Migration is a batch pruning feature that can be applied to existing node without interrupting the running node.\n\n### Motivation\n\nBlock states, or StateDB stores on-chain accounts and contracts in a trie data structure. The trie data structure is designed to store both obsolete and recent states so they can be verified using the Merkle hash. As transactions perform state changes, the state trie grows indefinitely. As of writing (Aug 2024), the Kaia Mainnet archive node size is over 20TB and even full node is over 10TB.\n\n### Concept\n\nState Migration deletes old block states that are not required for processing new blocks. It copies the state trie from \"old\" to \"new\". Not all trie nodes are copied. The ones are reachable from state roots of selective blocks are copied. After the copying, old directory is deleted so you are only left with the states of the selected blocks.\n\nRead these blog articles for more technical details:\n[State Migration: Saving Node Storage](https://medium.com/klaytn/klaytn-v1-5-0-state-migration-saving-node-storage-1358d87e4a7a),\n[Kaia State Migration: An Efficient Way to Reduce Blockchain Data](https://medium.com/klaytn/klaytn-state-migration-an-efficient-way-to-reduce-blockchain-data-6615a3b36523)\n\nFor how to perform Batch Pruning, see the [State Migration Guide](../../misc/operation/node-pruning#how-to-perform-batch-pruning).\n\n## State Live Pruning\n\nState Live Pruning is a new solution to the growing state database size problem. Unlike Batch Pruning (State Migration), Live Pruning automatically deletes old states little by little as the node process blocks.\n\n### Motivation\n\nBlock states, or StateDB stores on-chain accounts and contracts in a trie data structure. The trie data structure is designed to store both obsolete and recent states so they can be verified using the Merkle hash. As transactions perform state changes, the state trie grows indefinitely. As of writing (Aug 2024), the Kaia Mainnet archive node size is over 20TB and even full node is over 10TB.\n\nPreviously the State Migration has mitigated this problem by deleting old states by selectively copying the recent states and deleting the rest. This can reduce the full node size to less than 5TB.\n\nNonetheless, the State Migration has its own drawbacks. It suffers from from high overhead of traversing the entire state trie which could take a few days. Also the state migration has to be manually triggered. To overcome these limitations, Live Pruning technique was introduced.\n\n### Concept\n\nTrie pruning is hard because it is uncertain if a trie node is outdated or not. In the original state trie structure, a trie node can be part of multiple tries each constitutes a different block. Even if a trie node (e.g. account balance) is updated to another value, the trie node cannot be deleted because it could be still needed by other parent nodes. This issue is referred to as the hash duplication problem.\n\nThe Live Pruning intentionally duplicates the trie nodes with the same content. Under Live Pruning, a trie node is not referenced by its hash, instead it is referenced by its ExtHash. An ExtHash is the 32-byte hash of the content plus a 7-byte serial index. The serial index is monotonically increasing, so that every trie node is unique.\n\n```\nHash:    32-byte Keccak256\nExtHash: 32-byte Keccak256 + 7-byte Serial index\n```\n\nThis way, whenever a trie node's content change, it is safe to assume that the trie node is now obsolete. The Merkle hash can be calculated the same way by just ignoring the serial index, make it compatible with non-live-pruning nodes in terms of consensus.\n\nRead this blog article for more technical details: [Efficient Management of Blockchain Data Capacity with StateDB Live Pruning](https://medium.com/klaytn/strong-efficient-management-of-blockchain-data-capacity-with-statedb-live-pruning-strong-6aaa09b05f91).\n\nFor how to enable Live Pruning, see the [Live Pruning Guide](../../misc/operation/node-pruning#how-to-perform-live-pruning).",
    "Current Website Url is https://docs.kaia.io/learn/storage/storage. # Data Management\n\nThis section explains how Kaia nodes synchronize with the blockchain and manage the growing storage requirements associated with blockchain data.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/learn/token-economics/kaia-native-token. # Kaia native coin - KAIA\n\n## KAIA <a id=\"klay\"></a>\n\nKAIA is the main internal transferable cryptocurrency of Kaia and is used to pay transaction fees when creating or executing smart contracts or when transferring KAIA.\n\nKAIA is a necessary element--a fuel--for operating the Kaia distributed application platform. It is a form of payment made by the clients of the platform to the consensus nodes \\(CNs\\) executing the requested operations. To put it another way, KAIA is an incentive; it ensures that developers write high-quality applications \\(wasteful code costs more\\) and that the network remains healthy \\(CNs are compensated for the resources they contribute\\).\n\n## Units of KAIA <a id=\"units-of-klay\"></a>\n\n Below is the Kaia token unit structure similar to the Ethereum model with Wei:  \n\n| Unit Name      | Wei Equivalent         | Kei Equivalent                  |  \n|--------------|------------------|--------------------------|  \n| **kei**       | 1 wei             | 1 kei                      |  \n| **kkei**      | 1e3 wei           | 1,000 kei                  |  \n| **mkei**      | 1e6 wei           | 1,000,000 kei              |  \n| **gkei**      | 1e9 wei           | 1,000,000,000 kei          |  \n| **microkaia** | 1e12 wei          | 1,000,000,000,000 kei      |  \n| **millikaia** | 1e15 wei          | 1,000,000,000,000,000 kei  |  \n| **KAIA**      | 1e18 wei          | 1,000,000,000,000,000,000 kei  |  \n\n\n## Historical Pricing <a id=\"historical-pricing\"></a>\n\nYou can download historical price data for the former KLAY and FNSA tokens using the following links:\n\n- [Download KLAY historical pricing](pathname:///files/Klaytn_historical_data_coinmarketcap.csv)\n- [Download FNSA historical pricing](pathname:///files/Finschia_historical_data_coinmarketcap.csv)\n",
    "Current Website Url is https://docs.kaia.io/learn/token-economics. # Token Economics\n\nThis section describes the token economics of the Kaia blockchain, including details about its native coin, KAIA, and the overall token economy model.  It explains how KAIA functions as the fuel for the platform, its various denominations, and its role in transaction fees and smart contract execution.  Further, this section outlines the distribution of KAIA, the funding mechanisms supporting the ecosystem's growth, and the governance structure ensuring its stability and sustainability.  Explore the following pages for a comprehensive understanding:\n\n- [Kaia Native Token - KAIA](kaia-native-token): Learn about KAIA, its units (kei, Gkei, KAIA), and its utility within the Kaia ecosystem.\n- [Token Economy](token-economy): Discover the distribution of KAIA, including the allocation to validators, community members, and dedicated funds like the Kaia Ecosystem Fund (KEF) and Kaia Infrastructure Fund (KIF).  This page also details the governance and reward mechanisms.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/learn/token-economics/token-economy. # Token Economy\n\n## Overview <a id=\"overview\"></a>\n\nKaia’s token economy is designed to create sustainable funding structures for empowering its ecosystem, growth initiatives, and strategic investments. Many public blockchain projects have monetary systems that solely incentivize their node operators \\(miners or block producers\\), focusing only on the technical aspect of network maintenance. However, such designs miss out on the importance of incentivizing other types of participants who contribute to the growth of the network’s token economy or invest in long-term growth prospects. In contrast, Kaia’s token economy is designed to compensate more diverse forms of contributions from a wider range of participants, and has built-in funding structure to procure sustained resources to fuel future growth initiatives and strategically sourced investment projects in addition to maintaining its blockchain nodes.\n\n## Funding Structure <a id=\"funding-structure\"></a>\n\nKaia’s funding structure runs continuously with Kaia network’s block generation. With every new block, newly issued KAIA and the sum of transaction fees used in the block \\(collectively called “block reward”\\) are aggregated and distributed to the following three destination accounts in accordance to the predetermined ratio:\n\n* Validators and Community: 50%\n    * Block proposer rewards: 20% of the 50% (10% of total)\n    * Staking rewards: 80% of the 50% (40% of total)\n* Kaia Ecosystem Fund (KEF): 25%\n* Kaia Infrastructure Fund (KIF): 25%\n\n9.6 KAIA will be minted for every new block. This implies that approximately 300 million KAIA will be minted annually, which is equivalent to 5.2% annual inflation against the total KAIA tokens in the market (the annual inflation rate is subject to change through the Kaia Governance Process). Transaction fee is charged and metered according to the pre-determined fee tables. For detailed information about the transaction fees, please refer to [Transaction Fees](../transaction-fees/transaction-fees).\n\n## Kaia Governance Council Reward <a id=\"kaia-governance-council-reward\"></a>\n\nKaia Governance Council is the collective group of Core Cell Operators \\(CCOs\\). Council members are responsible for maintaining Core Cells \\(CCs\\), which makes the Council an essential body in the Kaia ecosystem responsible for providing the underlying infrastructure. To become a Council member, the candidate must undergo a qualification review by the Kaia Governance Process and must stake at least 5 million KAIA. The Kaia Governance Council Reward is a structure for incentivizing Council members to continue to provide a stable foundation for the Kaia ecosystem.\n\n### Kaia Governance Council Reward Mechanism <a id=\"kaia-governance-council-reward-mechanism\"></a>\n\nFor each block in the Kaia blockchain, a Committee is formed by randomly selecting members from the Kaia Governance Council (GC). This Committee consists of a single member who is assigned the role of Proposer, while the remaining Committee members take on the role of Validators. Once a block is successfully created and appended to the Kaia blockchain, the block reward is distributed among the Council members and various funds according to the previously mentioned ratios.\n\nAll Council members have an equal probability of being selected as the Proposer for a given block, and the block proposer reward is distributed evenly among them. However, the GC staking reward is allocated proportionally based on the amount of KAIA staked by each member, minus the minimum requirement of 5 million KAIA. This means that Council members who stake a larger amount of KAIA beyond the minimum threshold will receive a greater share of the staking reward compared to those who stake less. As a result, Council members are incentivized to stake more KAIA to maximize their potential rewards from the GC staking award portion of the block reward distribution.\n\nAs long as the minimum 5 million KAIA staking requirement is met, Kaia Governance Council members can freely stake or unstake his or her own KAIA. Staking information is updated every 86,400 blocks, and newly staked KAIA comes info effect two update cycles later from when the staking is completed. Withdrawing staked KAIA requires one week of delay to prevent malicious members from immediately exiting.\n\n\n### Penalty for Misbehaving Council Members <a id=\"penalty-for-misbehaving-council-members\"></a>\n\nA Council member may be subject to penalties for conducting misbehaviors defined below. In the future, more penalty rules can be established and refined through the Kaia Governance Process.\n\nCausing Safety Failure:\n\n* A Council member selected as Proposer may not create more than one block in the same height\n* A Council member selected as Proposer may not intentionally omit certain transactions\n\nCausing Liveness Failure:\n\n* A Council member selected as Proposer must create a valid block\n* A Council member selected as Validator must validate the block proposed by the Proposer\n\n## Kaia Ecosystem Fund <a id=\"kaia-ecosystem-fund\"></a>\n\nThe Kaia Ecosystem Fund (KEF) was established to support Kaia's mission of enabling greater transparency and verifiability. It is funded by 25% of the total KAIA issued when creating a block.\n\nThe Kaia Ecosystem Fund will be used to fund activities that improve the Kaia ecosystem, such as:\n\n1. **Service Contribution Reward (SCR)**: The KEF will provide rewards to service developers or users operating on the integrated ecosystem, as compensation for directly or indirectly contributing to the enhancement of the ecosystem's value.\n2. **Building our Developer Community**: The KEF will support various initiatives including hackathons, development education programs, collaborative research with academia, and collaboration with various DAOs to foster and grow the Kaia developer community.\n3. **Fostering Ecosystem Services and Infrastructure**: The KEF will support essential ecosystem infrastructure, alongside the development of services with clear utility and provide marketing support.\n4. **Kaia Eco Fund Indirect Investment**: The KEF will make indirect mid-to long-term investments by entrusting specialized crypto VCs. A portion of the profits generated upon subsequent investment recovery will be either burned or returned to the Kaia ecosystem.\n5. **Governance Committee Budget**: This budget is allocated for the operation of committees in specific sectors such as Gaming, DeFi, and Community. These committees aim to grow the Kaia Blockchain ecosystem in their respective sectors.\n6. **Other ecosystem and community-building activities**\n\nThe administration of the Kaia Ecosystem Fund follows a process in which the Governance Council (GC) reviews and approves the use of funds in public forums on [Kaia Square](https://square.klaytn.foundation/Home). The Foundation will submit a quarterly budget proposal for each category to the GC for approval. Within the approved budget, each specific use will be reviewed and approved again by the GC. All execution details are transparently disclosed.\n\nNew proposals for the use of KEF can be made via the GC, requiring individual approval. Plans are in place to develop a structure allowing more ecosystem participants to efficiently propose and participate in KEF use. For categories requiring specialized and rapid decision-making, separate governance committees may operate.\n\n## Kaia Infrastructure Fund <a id=\"kaia-infrastructure-fund\"></a>\n\nKaia Infrastructure Fund (KIF) is an operational fund that will focus on these main categories:\n\n1. **Mainnet and Essential Infrastructure R&D**: This includes advancing research on the latest technologies related to mainnet and infrastructure, foundation-led service development, and infrastructure establishment.\n2. **Ecosystem Acceleration**: This includes token swap, financial support for small-scale Kaia Blockchain ecosystem partners, attracting new GC members, and providing market liquidity.\n3. **Foundation Operations**: This includes operating expenses such as development, accounting, legal affairs, IT infrastructure operations, marketing, and labor costs, as well as financial management and fundraising costs.\n\nKIF is funded by 25% of the total KAIA issued when creating a block. It is executed by the foundation through an internal control system after a prior announcement of the budget plan for each detailed category. All execution details are transparently disclosed.\n\nThe foundation directly establishes a budget plan and executes the funds for KIF. To ensure transparent execution, the foundation discloses the budget plans and execution details in advance and afterward.\n\n## Treasury Rebalancing\n\nTo ensure the flexibility and adaptability of Kaia's token economy, a Treasury Rebalance mechanism has been implemented. This process allows for adjustments to the treasury funds in response to changing ecosystem needs and market conditions.\n\n### Treasury Rebalance Contract\n\nThe Treasury Rebalance Contract is a smart contract designed to manage the rebalancing process in a transparent and secure manner. At its core, the contract operates as a finite state machine, progressing through stages such as initialization, registration, approval, and finalization. This structured approach ensures that all stakeholders have the opportunity to review and approve changes before they are implemented.\n\nKey features of this contract include:\n\n1. **Flexible Balance Adjustment**: The contract supports both increases and decreases in total fund balance, enabling comprehensive treasury management.\n2. **Aligned Rebalance Timing**: The rebalance block number can be set to align with relevant hard fork block numbers, providing better synchronization with network upgrades.\n3. **Transparent Execution**: The entire rebalancing process is recorded on the blockchain through the TreasuryRebalance contract, maintaining the ecosystem's commitment to openness and verifiability.\n4. **Validator Consensus**: The rebalance event occurs only after reaching consensus among block validators, ensuring network-wide agreement on the changes.\n5. **Immutable Record**: After execution, a detailed memo of the rebalance event is uploaded to the contract, providing an immutable record of the changes for future reference and auditing.\n\nThis Treasury Rebalancing mechanism allows Kaia to maintain a dynamic and responsive token economy, better serving the evolving needs of its ecosystem while upholding principles of transparency and security. By leveraging smart contract technology and a consensus-based approach, it provides a structured and verifiable way to adjust treasury funds, ensuring that the Kaia blockchain can adapt to changing circumstances while maintaining the trust of its community.\n\nFor the information on the Treasury Rebalance contract addresses, please refer to [KIP-160](../governance/governance-by-kip#kip-160-an-update-on-treasury-fund-rebalancing) and [KIP-103](../governance/governance-by-kip#kip-103-treasury-fund-rebalancing).",
    "Current Website Url is https://docs.kaia.io/learn/transaction-fees/execution-gas. # Execution Gas\n\nGas is a sum of `IntrinsicGas` and `ExecutionGas`. In here, we would focus on how `ExecutionGas` is calculated.\n\n:::note\n\nExecution gas related hardfork changes can be found at the bottom of this page. Go to [Hardfork Changes](#hardfork-changes).\n\n:::\n\n## Overview <a id=\"overview\"></a>\n\nExecution gas is charged during executing a contract under three distinct circumstances. Sometimes, some policies may be omitted.\n\n* The first and most common is the `constantGas`. It's a fee intrinsic to the computation of the operation.\n* Second, gas may be deducted to form the payment for a subordinate message call or contract creation; this forms part of the payment for `CREATE`, `CALL` and `CALLCODE`.\n* Finally, gas may be charged due to an increase in memory usage.\n\nOver an account's execution, the total fee payable for memory-usage payable is proportional to the smallest multiple of 32 bytes that are required to include all memory indices \\(whether for read or write\\) in the range. This fee is paid on a just-in-time basis; consequently, referencing an area of memory at least 32 bytes greater than any previously indexed memory will result in an additional memory usage fee. Due to this fee, it is highly unlikely that addresses will ever exceed the 32-bit bounds. That said, implementations must be able to manage this eventuality.\n\nStorage fees have a slightly nuanced behavior. To incentivize minimization of the use of storage \\(which corresponds directly to a larger state database on all nodes\\), the execution fee for an operation that clears an entry from storage is not only waived but also elicits a qualified refund; in fact, this refund is effectively paid in advance because the initial usage of a storage location costs substantially more than normal usage.\n\n## Opcode Gas Schedule <a id=\"opcode-gas-schedule\"></a>\n\nThe fee schedule `G` is a tuple of 37 scalar values corresponding to the relative costs, in gas, of a number of abstract operations that a transaction may incur. Also, there's gas items to calculate the gas of the precompiled contracts called by `CALL_*` opcodes.\n\n### Scalar values representing `constantGas` of an opcode\n\n| Name | Value |                Name in code | Opcodes                                                                                                                                                                                                                                                                            |\n| :--- | ---: |----------------------------:|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `G_base` | 2 |                GasQuickStep | `ADDRESS`, `ORIGIN`, `CALLER`, `CALLVALUE`, `CALLDATASIZE`,  `CODESIZE`, `GASPRICE`, `COINBASE`, `TIMESTAMP`, `NUMBER`,   `PREVRANDAO`(originally it was `DIFFICULTY`), `GASLIMIT`, `RETURNDATASIZE`, `POP`, `PC`, `MSIZE`, `GAS`,  `CHAINID`,  `BASEFEE`,  `PUSH0`, `BLOBBASEFEE` |\n| `G_verylow` | 3 |              GasFastestStep | `ADD`, `SUB`, `LT`, `GT`, `SLT`, `SGT`, `EQ`, `ISZERO`, `AND`,  `OR`, `XOR`, `NOT`, `BYTE`, `CALLDATALOAD`,  `MLOAD`, `MSTORE`, `MSTORE8`, `PUSH`, `DUP`, `SWAP`, `BLOBHASH`, `MCOPY`                                                                                              |\n| `G_low` | 5 |                 GasFastStep | `MUL`, `DIV`, `SDIV`, `MOD`, `SMOD`, `SIGNEXTEND`,  `SELFBALANCE`                                                                                                                                                                                                                  |\n| `G_mid` | 8 |                  GasMidStep | `ADDMOD`, `MULMOD`, `JUMP`                                                                                                                                                                                                                                                         |\n| `G_high` | 10 |                 GasSlowStep | `JUMPI`                                                                                                                                                                                                                                                                            |\n| `G_selfdestruct` | 5000 |             SelfdestructGas | `SELFDESTRUCT`                                                                                                                                                                                                                                                                     |\n| `G_warmStorageReadCost`  | 100 | WarmStorageReadCostEIP2929  | `EXTCODECOPY`, `EXTCODESIZE`, `EXTCODEHASH`, `BALANCE`,  `CALL`, `CALLCODE`, `STATICCALL`, `DELEGATECALL`, `TSTORE`, `TLOAD`                                                                                                                                                              |\n| `G_blockhash` | 20 |                  GasExtStep | `BLOCKHASH`                                                                                                                                                                                                                                                                        |\n| `G_jumpdest` | 1 |                 JumpdestGas | `JUMPDEST`                                                                                                                                                                                                                                                                         |\n| `G_sha3` | 30 |                     Sha3Gas | `SHA3`                                                                                                                                                                                                                                                                             |\n| `G_create` | 32000 |                   CreateGas | `CREATE`, `CREATE2`                                                                                                                                                                                                                                                                |\n\n### Scalar values used to calculate the gas based on memory and log usage\n\n| Name | Value | Name in Code | Description |\n| :--- | ---: | ---: | :--- |\n| `G_memory` | 3 | MemoryGas | Amount of gas paid for every additional word when expanding memory |\n| `G_copy` | 3 | CopyGas | Partial payment for `COPY` operations, multiplied by words copied, rounded up |\n| `G_log` | 375 | LogGas | Partial payment for a `LOG` operation |\n| `G_logdata` | 8 | LogDataGas | Amount of gas paid for each byte in a `LOG` operation's data |\n| `G_logtopic` | 375 | LogTopicGas | Amount of gas paid for each topic of a `LOG` operation |\n\n### Scalar values used to calculate the gas of the particular opcode\n\n| Name              | Value | Name in Code | Description |\n|:------------------| ---: | --- | :--- |\n| `G_sset`          | 20000 | SstoreSetGas | Amount of gas paid when the storage value when set storage | \n| `G_sreset`        | 5000 | SstoreResetGas | Amount of gas paid when the storage value remains unchanged at zero or is set to zero | \n| `G_coldSloadCost` | 2100 | ColdSloadCostEIP2929 | Amount of gas paid when the storage value is not in accessList |\n| `R_sclear`        | 15000 | SstoreClearsScheduleRefundEIP3529 | `G_sreset` - `G_coldSloadCost` + `TxAccessListStorageKeyGas (1900)` |\n| `G_exp`           | 10 | ExpGas | Partial payment |\n| `G_expbyte`       | 50 | ExpByte | Partial payment when multiplied by `ceil(log_256(exponent))` |\n| `G_selfdestruct`  | 5000 | SelfdestructGas | Amount of gas paid for a `SELFDESTRUCT` operation |\n| `G_callvalue`     | 9000 | CallValueTransferGas | Amount of gas paid for a nonzero value transfer |\n| `G_callstipend`   | 2300 | CallStipend | Free gas given at beginning of call for a nonzero value transfer |\n| `G_newaccount`    | 25000 | CallNewAccountGas | Amount of gas paid when creating an account. It is also be defined as `CreateBySelfdestructGas` with `SELFDESTRUCT` operation. |\n| `G_codedeposit`   | 200 | CreateDataGas | Amount of gas paid per byte for a creating a contract that succeeds in placing code into state |\n| `G_sha3word`      | 6 | Sha3WordGas | Amount of gas paid for each word \\(rounded up\\) for an `SHA3` input data |\n| `G_InitCodeWord`  | 2 | InitCodeWordGas | Amount of gas paid for each word of initcode for a `CREATE`,`CREATE2` | \n\n## Precompiled contracts gas cost table <a id=\"precompiled-contracts-gas-cost-table\"></a>\n\nPrecompiled contracts are special kind of contracts which usually perform complex cryptographic computations and are initiated by other contracts.\n\nBelow is the gas cost table for precompiled contracts in Kaia. `Input` is a byte array input of a precompiled contract.\n\n| Address | Precompiled contracts | Gas Cost                                                                                                                            |\n|:--------|:----------------------|:------------------------------------------------------------------------------------------------------------------------------------|\n| 0x01    | ecrecover             | 3,000                                                                                                                               |\n| 0x02    | sha256hash            | numOfWords(input) * 12 + 60                                                                                                         |\n| 0x03    | ripemd160hash         | numOfWords(input) * 120 + 600                                                                                                       |\n| 0x04    | dataCopy              | numOfWords(input) * 3 + 15                                                                                                          | \n| 0x05    | bigModExp             | see the code [here](https://github.com/kaiachain/kaia/blob/75c149a464998eb946311f3a290d4b1ea339eaba/blockchain/vm/contracts.go#L340) |\n| 0x06    | bn256Add              | 150                                                                                                                                 | \n| 0x07    | bn256ScalarMul        | 6,000                                                                                                                               |\n| 0x08    | bn256Pairing          | numOfPairings(input) * 34,000 + 45,000                                                                                              |\n| 0x09    | blake2f               | bigEndian(getRounds(input[0:4]))                                                                                                    |\n| 0x0A    | kzg                   | 50,000                                                                                                                              |\n| 0x3FD   | vmLog                 | len(input) * 20 + 100                                                                                                               |\n| 0x3FE   | feePayer              | 300                                                                                                                                 |\n| 0x3FF   | validateSender        | numOfSigs(input) * 5,000                                                                                                            |\n\n\n## Gas calculation logic for contract execution <a id=\"gas-calculation-logic-for-contract-execution\"></a>\n\nThe gas cost of one transaction is calculated through the methods described below. First, gas is added according to the transaction type and input. Then, if the contract is executed, opcodes are executed one by one until the execution ends or `STOP` operation appears. In the process, the cost is charged according to the `constantGas` defined for each opcode and the additionally defined gas calculation method.\n\nHere, I will briefly explain the gas calculation logic during contract execution using the fee schedule variables defined above. As this explanation assumes a general situation, the unusual situations such as revert appears is not considered.\n\n* add `constantGas` defined in each opcode to gas\n    * e.g. if an opcode is `MUL`, add `G_low` to gas\n    * e.g. if an opcode is `CREATE2`, add `G_create` to gas\n* add the gas which is calculated through additionally defined gas calculation method\n    * For `LOG'N'`, where N is [0,1,2,3,4], add `G_log + memoryGasCost * g_logdata + N x G_logtopic` to gas\n    * For `EXP`, add `G_exp + byteSize(stack.back(1)) x G_expbyte` to gas\n    * For `CALLDATACOPY` or `CODECOPY` or `RETURNDATACOPY`, add `wordSize(stack.back(2)) x G_copy` to gas\n    * For `EXTCODECOPY`,\n        * add `wordSize(stack.back(3)) x G_copy` to gas\n        * [**_eip2929_**] If an address is not in AccessList, add it to accessList and add `G_coldSloadCost - G_warmStorageReadCost` to gas\n    * For `EXTCODESIZE` or `EXTCODEHASH` or `BALANCE`,\n        * [**_eip2929_**] If an address is not in AccessList, add it to accessList and add `G_coldSloadCost - G_warmStorageReadCost` to gas\n    * For `SHA3`, add `G_sha3 + wordSize(stack.back(1)) x G_sha3word` to gas\n    * For `RETURN`, `REVERT`, `MLoad`, `MStore8`, `MStore`, add `memoryGasCost` to gas\n    * For `CREATE`, add `memoryGasCost + size(contract.code) x G_codedeposit + wordsize(initcode) x G_InitCodeWord` to gas\n    * For `CREATE2`, add `memoryGasCost + size(data) x G_sha3word + size(contract.code) x G_codedeposit + wordsize(initcode) x G_InitCodeWord` to gas\n    * For `SSTORE`,\n        * [**_eip2929_**]  If a slot(contractAddr, slot) is not in AccessList, add it to accessList and add `G_coldSloadCost` to gas\n        * If it just reads the slot (no-op), add `G_warmStorageReadCost` to gas\n        * If it creates a new slot, add `G_sset` to gas\n        * If it deletes the slot, add `G_sreset-G_coldSloadCost` to gas and add `R_sclear` to refund\n        * If it recreates the slot once exists before, add `G_warmStorageReadCost` to gas and subtract `R_sclear` from refund\n        * If it deletes the slot once exists before, add `R_sclear` to refund\n        * If it resets to the original inexistent slot, add `G_warmStorageReadCost` to gas and add `G_sset - G_warmStorageReadCost` to refund\n        * IF it resets to the original existing slot, add `G_warmStorageReadCost` to gas and add `G_sreset - G_coldSloadCost - G_warmStorageReadCost` to refund\n    * For `SLOAD`,\n        * [**_eip2929_**] If a slot(contractAddr, slot) is not in AccessList, add it to accessList and add `G_coldSloadCost` to gas\n        * [**_eip2929_**] If a slot(contractAddr, slot) is in AccessList, add `G_warmStorageReadCost` to gas\n    * For `CALL`, `CALLCODE`, `DELEGATECALL`, `STATICCALL`,\n        * [**_eip2929_**] If an address is not in AccessList, add it to accessList and add `G_coldSloadCost` to gas\n        * if it is `CALL` and `CALLCODE` and if it transfers value, add `G_callvalue` to gas\n        * if it is `CALL` and if it transfers value and if it is a new account, add `G_newaccount` to gas\n        * if the callee contract is precompiled contracts, calculate precompiled contract gas cost and add it to gas\n        * add `memoryGasCost + availableGas - availableGas/64, where availableGas = contract.Gas - gas` to gas\n    * For `SELFDESTRUCT`,\n        * [**_eip2929_**] If an address is not in AccessList, add it to accessList and add `G_coldSloadCost` to gas\n        * if it transfers value and if is a new account, add `G_newaccount` to gas\n\n## Hardfork changes\n\n| Hardfork     | New Items                                                                                                                                                        | Change|\n|--------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------||\n| Cancun EVM   | BLOBBASEFEE (0x49) opcode<br/>BLOBHASH (0x50) opcode<br/>TSTORE (0x5C) opcode<br/>TLOAD (0x5D) opcode<br/>MCOPY(0x5E) opcode<br/>kzg (0x0A) precompiled contract | accessList is fully supported, the storage <br/>access which are added to accessList <br/>put through tx args are became warm                                                                                                                                                                                                                                                                                                                                                                                               |\n| Shanghai EVM | PUSH0 (0x5F) opcode                                                                                                                                              | warm coinbase so the gas cost accessing <br/>coinbase is always warm<br/><br/>started to add 2 gas per word of the initcode <br/>at `Create`, `Create2` opcodes                                                                                                                                                                                                                                                                                                                                                             |\n| Kore         |                                                                                                                                                                  | reduction in refunds<br/>- removes refund for SELFDESTRUCT (0xFF), SSTORE (0x55) <br/>- capped the refund to gasUsed/5 (it was gasUsed/2)<br/> <br/>increase gas cost for state access opcodes <br/>- accessList is introduced here but it's not yet supported.                                                                                                                                                                                                                                                             |\n| London EVM   | BASEFEE (0x48) opcode                                                                                                                                            | modExp (0x05) precompiled contract <br/>use new gas calculation logic. <br/>Become more accurate.                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| Istanbul EVM | CHAINID (0x46) opcode <br/> SELFBALANCE (0x47) opcode<br/>blake2f (0x09) precompiled contract                                                                    | reduce the gas cost of BN256 precomiled contracts<br/>- Bn256Add (0x06):500->150<br/>- Bn256ScalarMul (0x07): 40,000->6,000<br/>- BN256Pairing (0x08): <br/> -- BaseGas: 100,000->45,000 <br/> -- PerPointGas: 80,000->34,000<br/> <br/>new gas calculation logic of SSTORE (0x55). <br/>- introduced cold storage. <br/>- gas cost for the first access is increased. <br/> <br/>increase the gas cost of heavy storage access<br/>- SLOAD(0x54): 200->800<br/>- BALANCE(0x31): 400->700<br/>- EXTCODEHASH(0x3F): 400->700 |\n",
    "Current Website Url is https://docs.kaia.io/learn/transaction-fees/intrinsic-gas. # Intrinsic Gas\n\nGas is a sum of `IntrinsicGas` and `ExecutionGas`. In here, we would focus on how `IntrinsicGas` is organized.\n\n:::note\n\nIntrinsic gas related hardfork changes can be found at the bottom of this page. Go to [Hardfork Changes](#hardfork-changes).\n\n:::\n\n## Overview\n\nA transaction's `intrinsicGas` can be calculated by adding up the next four factors.\n\n```\nIntrinsicGasCost = KeyCreationGas + KeyValidationGas + PayloadGas + TxTypedGas\n```\n\n* `PayloadGas` is calculated based on the size of the data field in the tx.\n* `KeyCreationGas` is calculated when the transaction registers new keys. Only applicable in `accountUpdate` transaction.\n* `KeyValidationGas` is calculated based on the number of signatures.\n* `TxTypedGas` is defined based on the transaction types.\n\nBefore we get into the detail, keep in mind that not all key types apply the keyGases (`KeyCreationGas` and `KeyValidationGas`).\n\n| Key Type | Are those keyGases applicable? |\n| :--- | :--- |\n| Nil | No |\n| Legacy | No |\n| Fail | No |\n| Public | Yes |\n| MultiSig | Yes |\n| RoleBased | Depending on key types in the role |\n\n## KeyCreationGas <a id=\"keycreationgas\"></a>\n\nThe KeyCreationGas is calculated as `(number of registering keys) x TxAccountCreationGasPerKey (20000)`.  \nPlease keep in mind that Public key type always has only one registering key, so the gas would be always 20000.\n\n## KeyValidationGas <a id=\"keyvalidationgas\"></a>\n\n`KeyValidationGas` is calculated as `(number of signatures - 1) x TxValidationGasPerKey(15000)`.  \nPlease keep in mind that Public key type always has only one signature key, so the gas would be always zero.\n\nA Kaia transaction can also have a feePayer, so the total KeyValidationGas is like this.\n\n```\nKeyValidationGas =  (KeyValidationGas for a sender) + (KeyValidationGas for a feePayer)\n```\n\n## PayloadGas <a id=\"payloadgas\"></a>\n\nBasically, `PayloadGas` is charged with `number_of_bytes_of_tx_input x TxDataGas (100)`. \n\nIn the case of a transaction creating contract, an additional charge of `number_of_words_of_initcode x InitCodeWordGas (2)` is applied. It is effective since Shanghai hardfork.\n\n## TxTypedGas <a id=\"txtypedgas\"></a>\n\nThere are three types of transactions in klaytn; `base`, `feeDelegated`, and `feeDelegatedWithFeeRatio`.\n\nFor example,\n\n* TxTypeValueTransfer is the `base` type of the valueTransaction transaction.\n* TxTypeFeeDelegatedValueTransfer is a `feeDelegated` type of the valueTransfer transaction.\n* TxTypeFeeDelegatedValueTransferWithRatio is a `feeDelegatedWithRatio` type of the valueTransfer transaction.\n\nThis is important when calculating TxTypedGas:\n\n* First, check the TxType is `feeDelegated` or `feeDelegatedWithFeeRatio`.\n    * If the TxType is `feeDelegated`, add `TxGasFeeDelegated(10000)` to TxTypedGas\n    * If the TxType is `feeDelegatedWithFeeRatio`, add `TxGasFeeDelegatedWithRatio (15000)` to TxTypedGas\n* Second, check the transaction creates contract or not.\n    * If the transaction creates contract, add `TxGasContractCreation (53000)` to TxTypedGas.\n    * Otherwise, add `TxGas (21000)` to TxTypedGas.\n\nFor example,\n\n* If it's legacyTransaction and creates contract, the TxTypedGas would be `0 + TxGasContractCreation(53000)`.\n* If it's TxTypeFeeDelegatedValueTransfer, the TxTypedGas would be `TxGasFeeDelegated(10000) + TxGas (21000)`\n* If it's TxTypeFeeDelegatedSmartContractDeployWithRatio, the TxTypedGas would be `TxGasFeeDelegatedWithRatio (15000) + TxGasContractCreation (53000)`\n\n## Hardfork changes\n\n| Hardfork     | Change                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n|--------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Shanghai EVM | limit and meter initcode when calculating intrinsicGas<br/>- started to add 2 gas per word of the initcode                                                                                                                                                                                                                                                                                                                                                    |\n| Istanbul EVM | make the [PayloadGas](#payloadgas) of legacyTxType consistent with other TxTypes<br/>- Before: PayloadGas=number_of_zero_bytes_of_tx_input x 4 + number_of_nonzero_bytes_of_tx_input x 68 <br/> - After: PayloadGas=number_of_bytes_of_tx_input x 100<br/><br/>change [keyValidationGas](#keyvalidationgas) calculation logic<br/>- Before: KeyValidationGas=(number of keys - 1) x 15,000<br/>- After: KeyValidationGas=(number of signatures - 1) x 15,000 |\n\n",
    "Current Website Url is https://docs.kaia.io/learn/transaction-fees. # Transaction Fees\n\nThe transaction fee of one transaction is calculated as follows:\n\n```text\ngas fee := (gas used) x (effective gas price)\n```\n\nAs an easy-to-understand analogy in this regard, suppose you're filling up gas at a gas station. The gas price is determined by the refinery every day, and today's price is $2. If you fill 15L up, then you would pay $30 = 15L x $2/1L for it, and the $30 will be paid out of your bank account. Also, the transaction will be recorded in the account book.\n\nTransaction fee works just the same as above. Suppose a transaction spent 21000 gas and the effective gas price of the transaction was 25 Gkei. Then the gas fee is 525000 Gkei. This amount would be deducted from the sender (`from` account) balance.\n\n## Gas used <a id=\"gas-used\"></a>\n\nEvery action that changes the state of the blockchain requires gas. While processing the transactions in a block, such as sending KAIA, using ERC-20 tokens, or executing a contract, the sender has to pay for the computation and storage usage. The payment amount is decided by the amount of `gas` required. The gas has no unit, and we just say like \"21000 gas\".\n\nGas of a transaction comprises of two components:\n\n* `IntrinsicGas` is the gas statically charged based on the transaction body itself, such as the size of the input. For more details, please refer to [Intrinsic Gas](intrinsic-gas).\n* `ExecutionGas` is the gas dynamically calculated during the execution. For more details, please refer to [Execution Gas](execution-gas).\n\nThe gas used amount is only determined after the transaction is executed. As such, you can find the gas used amount of a transaction from its receipt.\n\n### Finding the appropriate gasLimit\n\nEvery transaction must specify a gasLimit which is the maximum gas the transaction can spend. The sender can also utilize the `eth_estimateGas` and `kaia_estimateGas` RPCs to find the appropriate gasLimit for a transaction. Alternatively, the sender can manually specify a big enough number. Specifying a high gasLimit does not automatically charge high gas fee, so using a fixed number is a viable option. However, the sender having only a few tokens cannot specify too high gasLimit because the sender has to own at least `gasLimit * effectiveGasPrice` in its balance regardless of the actual gasUsed.\n\n## Effective gas price <a id=\"effective-gas-price\"></a>\n\nEffective gas price of a transaction is calculated from many variables:\n\n- Hardfork level\n- Gas price fields in the transaction submitted by the sender\n  - `maxFeePerGas` (often referred to as feeCap) field exists in the type 2 transactions.\n  - `maxPriorityFeePerGas` (often referred to as tipCap) field exists in the type 2 transactions.\n  - `gasPrice` field exists in every other transaction types.\n- `baseFeePerGas` (often referred to as baseFee) of the block the transaction is executed in\n\n### Before Magma hardfork (fixed unit price)\n\nBefore Magma hardfork, the transaction fee of all transactions is the fixed value called `unitPrice`. This unitPrice can be adjusted via governance. All transactions must submit the gas price field that equals to the current unitPrice. The unit price mechanism avoids UX frustration due to gas price estimation in the gas fee auction market and allows service providers to easily predict gas fee budget.\n\nThe `unitPrice` at a given block can be found through the `kaia_getParams` API.\n\n### After Magma hardfork (KIP-71 dynamic base fee)\n\nSince Magma hardfork, the network decides a gas price value `baseFeePerGas` (or simply baseFee) every block depending on the network congestion. The baseFee increases if the transaction traffic is higher than a threshold, and decreases otherwise. The transaction traffic is measured in the block gas used. As transaction executions in a block gets heavier, the network perceives higher congestion, likely to increase the baseFee.\n\nUnlike [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559), Magma gas policy has no tip (tip is introduced since Kaia hardfork). Instead, the FCFS (first-come first-serve) policy is implemented to protect the network from spamming.\n\n#### baseFee calculation\n\nThe baseFee calculation depends on following parameters:\n\n- Block congestion data\n  - PREVIOUS_BASE_FEE: Base fee of the previous block\n  - PREVIOUS_BLOCK_GAS_USED: Gas used to process all transactions of the previous block\n- Tuning parameters which can be changed later via governance\n  - GAS_TARGET: The gas amount that determines the increase or decrease of the base fee\n  - MAX_BLOCK_GAS_USED_FOR_BASE_FEE: Implicit block gas limit to enforce the max basefee change rate.\n  - BASE_FEE_DENOMINATOR: The value to set the maximum base fee change per block\n  - UPPER_BOUND_BASE_FEE: The maximum value for the base fee\n  - LOWER_BOUND_BASE_FEE: The minimum value for the base fee\n\nBelow is an oversimplified version of the baseFee calculation. In its essense, the base fee change is proportional to the difference between GAS_TARGET and PREVIOUS_BLOCK_GAS_USED, and other parameters controls the change speed or bounds the baseFee. Refer to [KIP-71](https://github.com/kaiachain/kips/blob/main/KIPs/kip-71) for the exact formula.\n\n```\n              min(PREVIOUS_BLOCK_GAS_USED, MAX_BLOCK_GAS_USED_FOR_BASE_FEE) - GAS_TARGET\nchangeRate = ----------------------------------------------------------------------------\n                                BASE_FEE_DENOMINATOR * GAS_TARGET\n\nnextBaseFeeBeforeBound = PREVIOUS_BASE_FEE * (1 + changeRate)\n\nnextBaseFee = max(min(nextBaseFeeBeforeBound, UPPER_BOUND_BASE_FEE), LOWER_BOUND_BASE_FEE)\n```\n\nThe tuning parameters at a given block can be found through the `kaia_getParams` API. The `baseFeePerGas` of each block can be found through the `kaia_getBlock*` and `eth_getBlock*` APIs.\n\n#### Gas fee burn\n\nSince Magma hardfork, half of the block gas fee is burnt. See [KIP-71](https://github.com/kaiachain/kips/blob/main/KIPs/kip-71) for details.\n\nSince Kore hardfork, most of the block gas fee is burnt. See [KIP-82](https://kips.kaia.io/KIPs/kip-82) for details.\n\n### After Kaia hardfork (KIP-162 priority fee)\n\nSince Kaia hardfork, the transactions can specify nonzero priority fee (or simply tip) to increase the block inclusion possibility. The Kaia gas policy is similar to [EIP-1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559) in that transactions pay the baseFee plus the effective tip.\n\nThe effective gas price of a transaction is defined as `min(baseFee + tipCap, feeCap)`. For type-2 transactions, the transaction fields `maxPriorityFeePerGas` and `maxFeePerGas` naturally becomes the tipCap and feeCap. However, other transaction types only have one `gasPrice` field. For those types, tipCap and feeCap are both equals to `gasPrice`. Consequently their effective gas price becomes `min(baseFee + tipCap, feeCap) = min(baseFee + gasPrice, gasPrice) = gasPrice`, which is identical to gas price auction mechanism.\n\nSee [KIP-162](https://github.com/kaiachain/kips/blob/main/KIPs/kip-162) for details.\n\n### Finding the appropriate gas price after Kaia\n\nIf your application or wallet utilizes type-2 transactions (EIP-1559 type), ensure you set a reasonable priority fee. You can also call the `eth_maxPriorityFeePerGas` RPC to retrieve the recommended priority fee (tx.maxPriorityFeePerGas). When the network is uncongested, a zero priority fee transaction should have no disadvantage in transaction processing. When the network is congested it is safer to specify a nonzero priority fee to compete with other transactions.\n\nThe Kaia node's `eth_maxPriorityFeePerGas` RPC shall:\n- Return 0 if the network is uncongested. The network is considered uncongested when the next baseFeePerGas equals the UPPER_BOUND_BASE_FEE.\n- Otherwise return P percentile effective priority fees among the transactions in the last N blocks. Kaia nodes with default settings uses P=60 and N=20 but the configuration can differ by nodes.\n\nA type-2 transaction's `maxFeePerGas` should be higher than the network's next baseFee to ensure the transaction gets processed even if the baseFee rises. A common formula is `lastBaseFee*2 + maxPriorityFeePerGas`. It takes at least 15 seconds for baseFee to double when BASE_FEE_DENOMINATOR is 20. Another option is to use `eth_gasPrice` RPC.\n\nFor transactions of other tx types, more care should be taken when choosing an appropriate `gasPrice`. Because for these tx types, the gasPrice is spent as-is regardless of the baseFee. On the other hand, gasPrice must be at least network's baseFee. Therefore, applications and users would want to avoid setting gasPrice too high, while at the same time matching the network's baseFee. One strategy would be setting the `gasPrice` a slightly higher than the next baseFee so it can accommodate a few baseFee rises. You can call `eth_gasPrice` RPC to retrieve the recommended gas price.\n\nThe Kaia node's `eth_gasPrice` RPC shall:\n\n- Return (next baseFee) * M + (eth_maxPriorityFeePerGas). Multiplier M is heuristically chosen as 1.10 under uncongested network and 1.15 under congested network. When BASE_FEE_DENOMINATOR is 20, the M=1.10 can withstand at least one baseFee increase (1.05) and M=1.15 can withstand at least two consecutive baseFee increase (1.05\\*1.05). Considering that the baseFee usually does not rise at top speed of 5%, the multiplier should actually be enough for a few baseFee increases.\n\n### Gas price summary\n\n| Hardfork | `gasPrice` requirement | `maxFeePerGas` requirement | `maxPriorityFeePerGas` requirement | calculated `effectiveGasPrice` |\n| - | - | - | - | - |\n| Before Magma | must be unitPrice | must be unitPrice<br/>(only after EthTxType fork) | must be unitPrice<br/>(only after EthTxType fork) | unitPrice\n| After Magma | at least baseFee<br/>(recommended: 2*baseFee) | at least baseFee<br/>(recommended: 2*baseFee) | ignored | baseFee\n| After Kaia |  at least baseFee<br/>(recommended: baseFee*M + suggestedTip) | at least baseFee<br/>(recommended: baseFee*2 + suggestedTip) | up to users, wallets, and SDKs<br/>(recommended: suggestedTip = 0 or P percentile in N blocks) | tx type 2: min(baseFee + feeCap, tipCap),<br/>other tx types: gasPrice\n",
    "Current Website Url is https://docs.kaia.io/learn/transactions. # Transactions\n\nTransactions are the core mechanism for state changes on the Kaia blockchain. They represent messages passed between accounts, altering balances, deploying smart contracts, or executing contract functions. For example, when a transaction that sends 10 KAIA from Alice’s account to Bob’s is executed, Alice's balance decreases by 10 KAIA, and Bob's balance increases by 10 KAIA. Understanding transactions is fundamental to grasping how Kaia works.\n\n## Key Aspects of Kaia Transactions\n\n* **Atomic Operations:** Each transaction is treated as a single, indivisible unit. Either the entire transaction succeeds, applying all changes, or it fails, leaving the blockchain state unchanged. This ensures data integrity and prevents partial updates.\n\n* **Components:** Kaia transactions share core components with other blockchains but also have unique elements due to its decoupling of key pairs and addresses. This decoupling enhances flexibility but requires explicit sender information within the transaction. Typical components include:\n    * **Sender:** The originating account (`from` field).  This is explicitly included in Kaia transactions because addresses and key pairs are not directly linked.\n    * **Recipient:** The destination account (`to` field, for value transfers and smart contract interactions).\n    * **Value:** The amount of KAIA being transferred (`value` field, in `kei`).\n    * **Data:**  Additional information (`input` field), often used as input for smart contract execution.\n    * **Fees:** Calculated based on `gas` (maximum gas allowed) * `gasPrice` (price per unit of gas).  Fees are paid in KAIA (unit: `kei`, see [link to KAIA units documentation]).\n    * **Signature (`v`, `r`, `s` fields):** Cryptographic proof authorizing the transaction.\n\n* **Transaction Types:** Kaia offers a variety of transaction types to support different use cases, from basic value transfers to complex smart contract interactions and fee delegation. This flexibility caters to diverse needs and optimizes performance. See the [Implementing Transactions](../build/transactions/transactions#transaction-types) page for details on each type.\n\n* **Fee Mechanism:** Transactions require fees to incentivize validators. These fees are calculated based on the computational resources consumed (`gas`) and a price per unit of gas (`gasPrice`), which can be dynamic.\n\n* **Security:** Transactions are cryptographically signed, ensuring authenticity and preventing unauthorized modifications. Kaia's decoupling of key pairs and addresses adds another layer of security.\n\n* **Fee Delegation:** Kaia's fee delegation feature allows third parties to pay transaction fees on behalf of users, simplifying user onboarding and supporting various business models.  This requires two signatures: one from the sender and one from the fee payer. See the [Fee Delegation](../build/transactions/fee-delegation) for its implementation details.\n\nThis conceptual overview provides a foundation for understanding Kaia transactions. The [Implementing Transactions](../build/transactions/transactions) offers a detailed guide for developers.",
    "Current Website Url is https://docs.kaia.io/learn/why-kaia. # Why Build on Kaia\n\nKaia Blockchain aims to become Asia's #1 blockchain, leading the adoption of Web3 by providing a robust infrastructure for projects of all sizes. This document explains how Kaia is different based on its key design principles and value propositions.\n\n## Wide User Base\n\n1. **Web2 User Accessibility**: Kaia provides easy access to existing Web2 users through messenger-integrated wallets, collaborating with Kakao (50 million Korean users) and LINE (200 million users in Japan, Taiwan, Indonesia, and Thailand).\n\n2. **Web3 User Accessibility**: Kaia offers more than 1.2 million active wallet addresses and interfaces connecting users to projects, facilitating quick attraction of Web3 users.\n\n3. **Community Building Support**: Joint marketing with Kaia Foundation helps users gather and build projects, providing an environment with easy access for users from various chains.\n\n## Abundant Liquidity Support\n\n1. **Real World Asset (RWA) Linkage**: Kaia Blockchain hosts various real-world assets like gold, ships, and real estate. Future plans include on-chaining fiat-backed stablecoins and bonds, expanding the range of assets available to developers.\n\n2. **Large-Scale Ecosystem Fund**: The Kaia Ecosystem Fund, based on KAIA tokens, supports various sectors requiring liquidity, such as DeFi and GameFi.\n\n3. **Chain Native Yield**: Built-in MEV (Maximal Extractable Value) extraction allows KAIA Stakers to automatically earn MEV profits, increasing chain liquidity and providing a token burning mechanism.\n\n## Top-Level Core Technology and Development Convenience\n\n1. **High Performance**:\n   - Main chain handles at least 4,000 TPS with immediate transaction finality and one-second block generation time.\n   - Scalability through customizable and easily deployable [Service Chains](scaling-solutions#service-chain) as <LinkWithTooltip tooltip=\"L2 (layer 2) blockchains act as an additional<br />  layer that helps the main blockchain handle<br />  more transactions more efficiently.\">L2</LinkWithTooltip> solutions.\n\n2. **Ethereum Compatibility**:\n   - 100% compatibility ensures EVM-based dApps can be onboarded without modifications.\n   - Development tools, EVM, and APIs are equivalent to Ethereum, allowing seamless integration and mutual benefit to both ecosystems. See [Solidity-Smart Contract Language](../build/smart-contracts/solidity-smart-contract-language), and [Migrating Ethereum App to Kaia](../build/tutorials/migrating-ethereum-app-to-kaiax).\n\n3. **Convenient Account Model**: Enables assigning various keys to accounts, strengthening security and improving user experience.\n\n4. **Permissionless and Decentralized Structure**: Kaia is transitioning to a permissionless validator structure, increasing network decentralization.\n\n## Low Cost and Enhanced User Experience\n\n1. **Affordable Transaction Fees**: End-users are not burdened with high transaction fees. Costs are stable and determined by transaction complexity. See [Affordable Smart Contract Execution Cost](./smart-contracts/smart-contracts#benefits-of-smart-contracts-on-kaia) and [Transaction Fees](transaction-fees/transaction-fees).\n\n2. **Fee Delegation**: Applications can cover users' transaction fees, allowing for flexible business models and lowering user acquisition barriers.\n\n## Open-Source Infrastructure and Ecosystem Support\n\n1. **Primary Infrastructure**: Includes SDKs, smart contract libraries, wallets, chain explorers, distributed storage solutions, Oracle support, and bridges.\n\n2. **Secondary Infrastructure**: Ecosystem for supporting products and services, including integration services, stablecoin integrations, DAOs, NFT marketplaces, DEX, DeFi, and traditional finance interfaces.\n\n3. **Ecosystem Fund**: 50% of newly minted tokens are reinvested in the ecosystem through [Kaia Ecosystem Fund](./token-economics/token-economy#kaia-ecosystem-fund) and [Kaia Infrastructure Fund](./token-economics/token-economy#kaia-infrastructure-fund).\n\n## Community Co-Building and Governance\n\n1. **Diverse Community Engagement**: Kaia expands its ecosystem through collaboration with game guilds, investment DAOs, community DAOs, and global alliances.\n\n2. **Decentralized Governance**: The Kaia Governance Council (GC) includes traditional enterprises, DAOs, and builders, creating a unique governance structure with hundreds of participants.\n\nIn summary, Kaia maintains blockchain's core characteristics of transparency, security, and decentralization while providing these enhancements. The protocol remains stable with strongly committed stakeholders, creating an ideal environment for builders to bring innovative Web3 ideas to life.",
    "Current Website Url is https://docs.kaia.io/minidapps/build-unity-app. # Build Unity App\n\n## Prerequisites \n\nBefore we dive in, make sure you have:\n\n* [Unity Hub](https://unity.com/download) installed on your computer - this is where we'll build our dApp interface\n* Basic C# and JavaScript knowledge - nothing too fancy, just the fundamentals\n* A LINE Developer account - you can easily create one using your email\n* Test Kaia from [Kaia Faucet](https://faucet.kaia.io/)\n* Dapp Portal SDK Client ID receiveed from Dapp Portal team.\n* Some familiarity with Web3 concepts - if you understand wallets and tokens, you're good to go. \n\n\n## Setting Up Your Unity Environment \n\nLet's set up your development environment. We'll start with the Unity setup.\n\n### Step 1: Install and Verify Unity Version \n\nTo begin, let's make sure we're all using the same Unity version to avoid any compatibility issues:\n* Install Unity Hub if you haven't already.\n* Install Unity Editor version 2022.3.50f1 specifically.\n\n### Step 2: Create Your New Unity Project \n\n1. Open Unity Hub and head to the Projects tab.\n2. Click the inviting \"New project\" button in the top-right corner.\n3. Under \"All templates\", select the **3D (Built-in Render Pipeline)** template.\n4. Give your project a meaningful name (e.g., mini-dApp-example).\n5. Choose a convenient location for your project files.\n6. Click **Create project**. \n\n![](/img/minidapps/unity-minidapp/create-unity-mini-dApp.png)\n\n## Creating Your dApp's UI Components \n\nIn this section, we will build our dApp's user interface! We'll create a structured UI system with three main panels for status updates, actions, and minting functionality.\n\n### Setting Up the Main Canvas \nFirst, let's create our base canvas:\n\n1. In the Hierarchy window, right-click on \"Sample Scene\".\n2. Navigate to GameObject → UI → Canvas.\n\n### Creating the Web3UI Container\n\n1. Right-click on your new Canvas.\n2. Select \"Create Empty\".\n3. Rename it to \"Web3UI\".\n\n### Setting Up Main Panels \nInside Web3UI, create three panel objects:\n\n1. Right-click on Web3UI and select \"Create Empty\".\n2. Create and rename these panels:\n    * StatusPanel - Your dApp's information display\n    * ButtonPanel - For user interactions\n    * MintPanel - For token minting features\n\n### Creating Panel Components\n\n#### StatusPanel Components\nThis panel shows all your important Web3 information:\n\n* Right click on StatusPanel, click on UI → Text - TextMeshPro and then rename to StatusText. Make sure to fill the “Text Input” field in the Inspector pane e.g. \"Status...\"\n\n:::note\n**TextMeshPro (TMP) Setup**\n\nWhen you first create a TextMeshPro element (UI - Text - TextMeshPro), Unity automatically prompts you to import TMP Essentials. If you accidentally skip this prompt, you can manually import it through Window > TextMeshPro > Import TMP Essentials.\n\nWhy we need this: TextMeshPro requires core resources (shaders, default fonts, and materials) to properly display text in your game. Without these essentials, your text components won't render correctly and you'll see shader/material errors in your project. This is a one-time setup that's necessary for text to work properly.\n:::\n\n![](/img/minidapps/unity-minidapp/status_text.png)\n\n* Right click on StatusPanel, click on UI → Text - TextMeshPro and then rename to AddressText. Make sure to fill the text object e.g \"Address Text...\"\n* Right click on StatusPanel, click on UI → Text - TextMeshPro and then rename to TokenBalanceText. Make sure to fill the text object e.g \"0.0000 ET\"\n\n```code\n├── StatusText (TextMeshPro)\n│   └── Default: \"Status...\"\n├── AddressText (TextMeshPro)\n│   └── Default: \"Address Text...\"\n└── TokenBalanceText (TextMeshPro)\n    └── Default: \"0.0000 ET\"\n```\n\n#### ButtonPanel Components\n\nYour main interaction buttons:\n\n* Right click on ButtonPanel, click on UI → Button - TextMeshPro and then rename it to ConnectWalletButton. Make sure to fill the \"Text Input\" field in the Inspector pane with \"Connect Wallet\".\n\n```code\nButtonPanel\n├── ConnectButton (Button - TextMeshPro)\n│   └── Text: \"Connect Wallet\"\n```\n\n#### MintPanel Components \n\nThe token minting interface:\n\n* Right click on MintPanel, click on UI → Input Field → TextMeshPro  and then rename to MintAmountInput. Make sure to fill the placeholder object with \"Enter Amount…\"\n* Right click on MintPanel, click on UI →  Button → TextMeshPro  and then rename to MintButton. Make sure to fill the text object with \"Mint\"\n\n```code \nMintPanel\n├── MintAmountInput (Input Field - TextMeshPro)\n│   └── Placeholder: \"Enter Amount...\"\n└── MintButton (Button - TextMeshPro)\n    └── Text: \"Mint\"\n```\n\nAfter creating all components, your hierarchy should look like this:\n\n```code\nCanvas\n└── Web3UI\n    ├── StatusPanel\n    ├── ButtonPanel\n    └── MintPanel\n```\n\n![](/img/minidapps/unity-minidapp/unity_ui_canvas.png)\n\n:::note\nFor your component to be well arranged as seen in the image above, you have to manually arrange them with the icon on the right-hand side when you click on each component. \n:::\n\n## Setting Up Web3 Integration \n\nIn this section, we will build up pieces to integrate web3 into our Unity project.\n\n### Creating and deploying KIP7 smart contract \n\nFirst, we'll use Kaia Contract Wizard to generate our smart contract. \n\n#### Step 1: Using Kaia Contract Wizard\n\n1. Navigate to Kaia Contract Wizard.\n2. Select KIP7 (Kaia's token standard, similar to ERC20).\n3. Configure your token:\n    * Name: ExampleTestToken (or something else!)\n    * Symbol: ET (your token's ticker)\n    * Premint: 100 (initial token supply)\n    * Features: Check ✅ Mintable\n\nFor this guide, we will tweak the mint function not to have onlyOwner modifier. To do this, we have to remove the ownable.sol import, and Ownable inheritance. The tweaked code should now look like this:\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\nimport \"@kaiachain/contracts/KIP/token/KIP7/KIP7.sol\";\ncontract ExampleTokens is KIP7 {\n    constructor() KIP7(\"ExampleTokens\", \"ET\") {\n        _mint(msg.sender, 100 * 10 ** decimals());\n    }\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return\n            super.supportsInterface(interfaceId);\n    }\n    function mint(uint256 amount) public  {\n        _mint(msg.sender, amount);\n    }\n}\n```\n\n:::info\n We removed the onlyOwner modifier to allow anyone to call the mint function other than the original deployer or owner of the contract. \n:::\n\n#### Step 2: Deploying via Remix IDE \n\n1. Copy and Paste the code above in a newly created file `ET.sol` on Remix IDE.\n2. In Remix IDE:\n    * Click the **Compile contract** button.\n    * Activate the **Kaia plugin** in the plugin manager.\n    * Under Environment in the Kaia Plugin tab, choose **Injected Provider** - **Kaia Wallet**.\n    * Find your contract (ExampleTokens) in the **Contract** dropdown.\n    * Click **Deploy** to launch your token!\n3. When your Kaia Wallet pops up:\n    * Review the deployment details.\n    * Click Confirm to deploy to Kaia Kairos Testnet.\n\n:::important\nCopy and save the deployed contract address. You'll need it later in the tutorial.\n:::\n\n## Building the Unity-Web3 Bridge \n\nNow we'll create the vital connection between Unity and Web3 functionality. This is where we bring blockchain capabilities into your Unity application!\n\n### Part 1: Creating the Plugin Bridge (kaiaPlugin.jslib) \n\nFirst, we'll build our JavaScript bridge that lets Unity talk to Web3:\n\n1. Create your plugin directory:\n\n```\nAssets/\n└── Plugins/\n    └── WebGL/\n        └── KaiaPlugin.jslib    // We'll create this file\n```\n\n2. Why a .jslib? Think of it as a translator between Unity's C# and the browser's JavaScript - essential for Web3 interactions!\n\n3. The plugin will handle three core functions:\n    * ConnectWallet() - Handles Kaia Wallet connections\n    * GetTokenBalance() - Checks token balances\n    * MintTokens() - Manages token minting\n\nOpen this file in VS Code and paste the `KaiaPlugin.jslib` source code in [Appendix A](../minidapps/convert-unity-liff#appendix-a):\n\n### Part 2: Creating the C# Manager (Web3Manager.cs) \n\nNext, we'll create our C# script to manage all Web3 operations:\n\n1. Create your scripts directory:\n\n```js\nAssets/\n└── Scripts/\n    └── Web3/\n        └── Web3Manager.cs    // We'll create this file\n```\n\n:::info\n\n**What does Web3Manager do?**\n\n* Acts as the main conductor for all Web3 operations.\n* Manages communication with our JavaScript plugin.\n* Updates UI elements based on blockchain events.\n* Handles all wallet and token operations.\n* Connects the `Connect Wallet` and `Mint` buttons with their respective functions \n:::\n\n\n2. Open this file in VS Code and paste the `Web3Manager.cs` source code in [Appendix B](../minidapps/convert-unity-liff#appendix-b)\n\n\n### Part 3: Setting Up the Web3Manager GameObject \n\nFinally, let's bring it all together in Unity:\n\n1. Create the Manager Object:\n    * Right-click in the Hierarchy window (root level).\n    * Select \"Create Empty Object\".\n    * Name it \"Web3Manager\".\n2. Attach Your Script:\n    * Select the Web3Manager GameObject.\n    * In Inspector, click Add Component.\n    * Search for and select \"Web3Manager\".\n3. Connect UI Elements:\n    * With Web3Manager selected, look in the Inspector.\n    * Drag and drop your UI elements from the Hierarchy to the corresponding fields:\n        * StatusText\n        * AddressText\n        * TokenBalanceText\n        * Connect / Mint buttons\n        * Input fields\n\n![](/img/minidapps/unity-minidapp/connect_ui_manager.png)\n\n## Setting Up WebGL Build Settings \n\nIn this section, we will configure our dApp for the web! This will configure Unity for Web3 compatibility and create a custom template for Kaia integration.\n\n### Step 1: Switch to WebGL Platform\n\n1. Navigate to File → Build Settings.\n2. Select WebGL and click \"Switch Platform\".\n\n:::note\nThis might take a few minutes if it's your first time switching.\n:::\n\n![](/img/minidapps/unity-minidapp/ui-webgl-switch.png)\n\n### Step 2: Creating a Custom WebGL Template \n\nWe need a custom template to integrate Web3 capabilities. Here's our folder structure:\n\n```code\nAssets/\n└── WebGLTemplates/\n    └── KaiaTemplate/\n        ├── index.html\n        └── scripts/\n            └── dapp_portal_sdk.js\n```\n\n:::info\n**Why Custom Template?**\n\nThe default Unity template doesn't include Web3 support. Our custom template will:\n\n* Load necessary Web3 libraries.\n* Enable Kaia Wallet integration.\n* Handle blockchain interactions properly.\n:::\n\n### Step 3: Setting Up index.html\n\nCopy and paste the code below in your `index.html` file:\n\n```\n<!DOCTYPE html>\n<html lang=\"en-us\">\n <head>\n   <meta charset=\"utf-8\">\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n   <title>Unity WebGL Player</title>\n   <script src=\"scripts/dapp_portal_sdk.js\"></script>\n   <style>\n     body { margin: 0; padding: 0; }\n     #unity-container { width: 100%; height: 100%; position: absolute; }\n     #unity-canvas { width: 100%; height: 100%; background: #231F20; }\n     #unity-loading-bar { display: none; }\n     #unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('Build/minidapp.progress-bar-empty-dark.png') no-repeat center; }\n     #unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('Build/minidapp.progress-bar-full-dark.png') no-repeat center; }\n   </style>\n </head>\n <body>\n   <div id=\"unity-container\">\n     <canvas id=\"unity-canvas\"></canvas>\n     <div id=\"unity-loading-bar\">\n       <div id=\"unity-progress-bar-empty\">\n         <div id=\"unity-progress-bar-full\"></div>\n       </div>\n     </div>\n   </div>\n   <script src=\"Build/minidapp.loader.js\"></script>\n   <script>\n     var sdk = null;\n     var connectedAddress = null;\n     var myGameInstance = null;\n\n     var Module = {\n       onRuntimeInitialized: function() {\n         console.log(\"Runtime initialized\");\n       },\n       env: {\n         MintToken: function(amount) {\n           window.MintToken(amount);\n         },\n         GetBalance: function() {\n           window.GetBalance();\n         },\n         ConnectWallet: function() {\n           window.ConnectWallet();\n         },\n         GetConnectedAddress: function() {\n           var address = window.GetConnectedAddress();\n           var bufferSize = lengthBytesUTF8(address) + 1;\n           var buffer = _malloc(bufferSize);\n           stringToUTF8(address, buffer, bufferSize);\n           return buffer;\n         }\n       }\n     };\n\n     async function initializeSDK() {\n       try {\n         sdk = await DappPortalSDK.init({\n           clientId: 'PASTE CLIENT ID',\n           chainId: '1001'\n         });\n         console.log(\"SDK initialized\");\n         return true;\n       } catch (error) {\n         console.error(\"SDK init error:\", error);\n         return false;\n       }\n     }\n\n     window.ConnectWallet = async function() {\n       try {\n         if (!sdk) {\n           const initialized = await initializeSDK();\n           if (!initialized) return null;\n         }\n\n         const provider = sdk.getWalletProvider();\n         const accounts = await provider.request({ method: 'kaia_requestAccounts' });\n         \n         if (accounts && accounts.length > 0) {\n           connectedAddress = accounts[0];\n           myGameInstance.SendMessage('Web3Manager', 'OnWalletConnected', connectedAddress);\n         }\n       } catch (error) {\n         myGameInstance.SendMessage('Web3Manager', 'OnWalletError', error.message);\n       }\n     }\n\n     window.GetConnectedAddress = function() {\n       return connectedAddress || '';\n     }\n\n     window.MintToken = async function(amount) {\n       try {\n         const provider = sdk.getWalletProvider();\n         \n         const mintSignature = '0xa0712d68';\n         const amountHex = amount.toString(16).padStart(64, '0');\n         const data = mintSignature + amountHex;\n\n         const tx = {\n           from: connectedAddress,\n           to: '0x099D7feC4f799d1749adA8815eB21375E13E0Ddb',\n           value: '0x0',\n           data: data,\n           gas: '0x4C4B40'\n         };\n\n         const txHash = await provider.request({\n           method: 'kaia_sendTransaction',\n           params: [tx]\n         });\n\n         myGameInstance.SendMessage('Web3Manager', 'OnMintSuccess', txHash);\n         GetBalance(); // Get updated balance after mint\n       } catch (error) {\n         myGameInstance.SendMessage('Web3Manager', 'OnMintError', error.message);\n       }\n     }\n\n     window.GetBalance = async function() {\n       try {\n         const provider = sdk.getWalletProvider();\n         \n         const balanceSignature = '0x70a08231';\n         const addressParam = connectedAddress.substring(2).padStart(64, '0');\n         const data = balanceSignature + addressParam;\n\n         const result = await provider.request({\n           method: 'kaia_call',\n           params: [{\n             from: connectedAddress,\n             to: '0x099D7feC4f799d1749adA8815eB21375E13E0Ddb',\n             data: data\n           }, 'latest']\n         });\n\n         const balance = parseInt(result, 16);\n         myGameInstance.SendMessage('Web3Manager', 'OnBalanceReceived', balance.toString());\n       } catch (error) {\n         myGameInstance.SendMessage('Web3Manager', 'OnBalanceError', error.message);\n       }\n     }\n\n     createUnityInstance(document.querySelector(\"#unity-canvas\"), {\n       dataUrl: \"Build/minidapp.data\",\n       frameworkUrl: \"Build/minidapp.framework.js\",\n       codeUrl: \"Build/minidapp.wasm\",\n       streamingAssetsUrl: \"StreamingAssets\",\n       companyName: \"DefaultCompany\",\n       productName: \"minidapp\",\n       productVersion: \"0.1\",\n     }).then((unityInstance) => {\n       myGameInstance = unityInstance;\n     });\n   </script>\n </body>\n</html>\n\n```\n\n### Step 4: Setting Up Dapp Portal SDK\n\n1. Visit: https://static.kaiawallet.io/js/dapp-portal-sdk.js\n2. Save the content to your `scripts/dapp_portal_sdk.js`.  Using a local Dapp Portal SDK file improves load times and reliability.\n\n:::note\nAlternatively, you can directly add the link to the Dapp Portal SDK as the `src` in the `script` tag in your `index.html`.\n\n```js\n// <script src=\"scripts/dapp_portal_sdk.js\"></script>\n<script src=\"https://static.kaiawallet.io/js/dapp-portal-sdk.js\"></script>\n```\n:::\n\n### Step 5: Configure Unity to Use Custom Template\n\n* Open Build Settings.\n* Navigate to Player Settings.\n* Under \"Resolution and Presentation\":\n    * Find \"WebGL Template\".\n    * Select \"KaiaTemplate\".\n* Under \"Publish Settings\" select **disabled** in the Compression Format field.\n\n![](/img/minidapps/unity-minidapp/ui-select-webgl-temp.png)\n\n### Step 6: Building Your dApp \n\nNow Let's bring it all together:\n\n1. Open Build Settings (File → Build Settings).\n2. Click \"Build And Run\".\n3. Save the build project as prompted on Unity; e.g \"minidapp\".\n4. Important Build Files:\n\n```bash\nminidapp/\n├── minidapp.loader.js\n├── minidapp.data\n├── minidapp.framework.js\n└── minidapp.wasm\n```\n\n### Step 7: Post-Build Configuration \n\nAfter building your project,\n\n1. Open your build folder.\n2. Note all generated file names.\n3. Update your index.html to match these names.\n4. Save changes and rebuild.\n5. You should now see a tab opened in your browser. \n\n![](/img/minidapps/unity-minidapp/ui_build_app.png)\n\n### Step 8: Route WebGL build to Localhost:3000\n\nFor security and development purposes, the DApp Portal SDK currently works on localhost:3000. At the moment, the default Unity WebGL builds use random ports (like 61445) and for our app to work efficiently we need to configure our Unity WebGL build to open on localhost:3000.\n\nTo do so, follow the steps below:\n\n1. Copy and Paste the code below in your project terminal \n\n```bash\n# Install http-server globally\nnpm install -g http-server\n```\n\n2. Navigate to build folder\n\n```bash\ncd path/to/minidapp\n```\n\n3. Start server on port 3000\n\n```bash\nhttp-server -p 3000\n```\n![](/img/minidapps/unity-minidapp/lh_3000.png)\n\n## Testing and running application\nNow that we have our project running, let’s test and interact with it. \n* Click on the Connect Wallet button to connect to Dapp Portal Wallet. \n* Once connected, fill in details (amount) to mint to the connected address.\n\n![](/img/minidapps/unity-minidapp/minidapp.gif)\n\n\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/minidapps/convert-unity-liff. # Converting Your Unity Build to a LINE LIFF App\n\nNow for the exciting part - turning your Unity WebGL build into a mini dApp that can be accessed through LINE! \n\n## Step 1: Create Your LIFF App <a id=\"create-liff-app\"></a> \n\nFirst, let's set up your app in the LINE ecosystem:\n\n1. LINE Developers Console Setup:\n    * Visit LINE Developers Console.\n    * Create a Provider (skip if you already have one).\n\n    ![](/img/minidapps/unity-minidapp/create-provider-lc.png)\n\n    * Create a new LINE Login channel.\n\n    ![](/img/minidapps/unity-minidapp/line-login-lc.png)\n\n    * Navigate to the LIFF tab\n    * Click \"Add LIFF app\"\n\n    ![](/img/minidapps/unity-minidapp/line-liff-add.png)\n\n2. Configure LIFF Settings:\n\n```code\nSize: Choose one of:\n├── Full (entire screen)\n├── Tall (75% of screen)\n└── Compact (50% of screen)\nEndpoint URL: https://example.com (temporary)\nPermissions: Enable as needed\n```\n\n:::note\nSave your LIFF ID - you'll need it in the next step! \n:::\n\n\n## Step 2: Modify Your WebGL Template <a id=\"modify-webgl-template\"></a>\n\nThe index.html file helps us to check web3 availability, set up LINE integration (LIFF), proceed to load our Unity game and connect everything together.\n\n```code\n<!DOCTYPE html>\n<html lang=\"en-us\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Unity WebGL Player</title>\n  <script src=\"https://static.line-scdn.net/liff/edge/2/sdk.js\"></script>\n  <script src=\"scripts/dapp_portal_sdk.js\"></script>\n  <style>\n    body { margin: 0; padding: 0; }\n    #unity-container { width: 100%; height: 100%; position: absolute; }\n    #unity-canvas { width: 100%; height: 100%; background: #231F20; }\n    #unity-loading-bar { display: none; }\n    #unity-progress-bar-empty { width: 141px; height: 18px; margin-top: 10px; background: url('Build/minidapp.progress-bar-empty-dark.png') no-repeat center; }\n    #unity-progress-bar-full { width: 0%; height: 18px; margin-top: 10px; background: url('Build/minidapp.progress-bar-full-dark.png') no-repeat center; }\n  </style>\n</head>\n<body>\n  <div id=\"unity-container\">\n    <canvas id=\"unity-canvas\"></canvas>\n    <div id=\"unity-loading-bar\">\n      <div id=\"unity-progress-bar-empty\">\n        <div id=\"unity-progress-bar-full\"></div>\n      </div>\n    </div>\n  </div>\n  <script src=\"Build/minidapp.loader.js\"></script>\n  <script>\n    var sdk = null;\n    var connectedAddress = null;\n    var myGameInstance = null;\n\n    var Module = {\n      onRuntimeInitialized: function() {\n        console.log(\"Runtime initialized\");\n      },\n      env: {\n        MintToken: function(amount) {\n          window.MintToken(amount);\n        },\n        GetBalance: function() {\n          window.GetBalance();\n        },\n        ConnectWallet: function() {\n          window.ConnectWallet();\n        },\n        DisconnectWallet: function() {\n          window.DisconnectWallet();\n        },\n        GetConnectedAddress: function() {\n          var address = window.GetConnectedAddress();\n          var bufferSize = lengthBytesUTF8(address) + 1;\n          var buffer = _malloc(bufferSize);\n          stringToUTF8(address, buffer, bufferSize);\n          return buffer;\n        }\n      }\n    };\n\n    async function initializeSDK() {\n      try {\n        await liff.init({\n          liffId: \"YOUR_LIFF_ID\" // Replace with your LIFF ID\n        });\n\n        if (!liff.isLoggedIn()) {\n          liff.login();\n        }\n\n        sdk = await DappPortalSDK.init({\n          clientId: 'YOUR CLIENT ID', // Replace with your CLIENT ID\n          chainId: '1001'\n        });\n        \n        console.log(\"SDKs initialized\");\n        return true;\n      } catch (error) {\n        console.error(\"SDK init error:\", error);\n        return false;\n      }\n    }\n\n    window.ConnectWallet = async function() {\n      try {\n        if (!sdk) {\n          const initialized = await initializeSDK();\n          if (!initialized) return null;\n        }\n\n        if (!liff.isLoggedIn()) {\n          liff.login();\n          return;\n        }\n\n        const provider = sdk.getWalletProvider();\n        const accounts = await provider.request({ method: 'kaia_requestAccounts' });\n        \n        if (accounts && accounts.length > 0) {\n          connectedAddress = accounts[0];\n          myGameInstance.SendMessage('Web3Manager', 'OnWalletConnected', connectedAddress);\n        }\n      } catch (error) {\n        myGameInstance.SendMessage('Web3Manager', 'OnWalletError', error.message);\n      }\n    }\n\n    window.DisconnectWallet = async function() {\n      try {\n        if (liff.isLoggedIn()) {\n          await liff.logout();\n        }\n        \n        const provider = sdk.getWalletProvider();\n        await provider.request({ method: 'kaia_disconnect' });\n        connectedAddress = null;\n        myGameInstance.SendMessage('Web3Manager', 'OnWalletDisconnected');\n      } catch (error) {\n        console.error(\"Disconnect error:\", error);\n        myGameInstance.SendMessage('Web3Manager', 'OnWalletError', error.message);\n      }\n    }\n\n    window.GetConnectedAddress = function() {\n      return connectedAddress || '';\n    }\n\n    window.MintToken = async function(amount) {\n      try {\n        const provider = sdk.getWalletProvider();\n        \n        const mintSignature = '0xa0712d68';\n        const amountHex = amount.toString(16).padStart(64, '0');\n        const data = mintSignature + amountHex;\n\n        const tx = {\n          from: connectedAddress,\n          to: '0x099D7feC4f799d1749adA8815eB21375E13E0Ddb',\n          value: '0x0',\n          data: data,\n          gas: '0x4C4B40'\n        };\n\n        const txHash = await provider.request({\n          method: 'kaia_sendTransaction',\n          params: [tx]\n        });\n\n        myGameInstance.SendMessage('Web3Manager', 'OnMintSuccess', txHash);\n        GetBalance();\n      } catch (error) {\n        myGameInstance.SendMessage('Web3Manager', 'OnMintError', error.message);\n      }\n    }\n\n    window.GetBalance = async function() {\n      try {\n        const provider = sdk.getWalletProvider();\n        \n        const balanceSignature = '0x70a08231';\n        const addressParam = connectedAddress.substring(2).padStart(64, '0');\n        const data = balanceSignature + addressParam;\n\n        const result = await provider.request({\n          method: 'kaia_call',\n          params: [{\n            from: connectedAddress,\n            to: '0x099D7feC4f799d1749adA8815eB21375E13E0Ddb',\n            data: data\n          }, 'latest']\n        });\n\n        const balance = parseInt(result, 16);\n        myGameInstance.SendMessage('Web3Manager', 'OnBalanceReceived', balance.toString());\n      } catch (error) {\n        myGameInstance.SendMessage('Web3Manager', 'OnBalanceError', error.message);\n      }\n    }\n\n    createUnityInstance(document.querySelector(\"#unity-canvas\"), {\n      dataUrl: \"Build/minidapp.data\",\n      frameworkUrl: \"Build/minidapp.framework.js\",\n      codeUrl: \"Build/minidapp.wasm\",\n      streamingAssetsUrl: \"StreamingAssets\",\n      companyName: \"DefaultCompany\",\n      productName: \"minidapp\",\n      productVersion: \"0.1\",\n    }).then((unityInstance) => {\n      myGameInstance = unityInstance;\n    });\n  </script>\n</body>\n</html>\n\n```\n\nMake sure to change your LIFF-ID in the code snippet above. \n\n## Step 3: Deploy Your WebGL Build <a id=\"step3-deploy-webgl-build\"></a>\n\n* Build your Unity project for WebGL\n* Upload all build files to a web server; e.g Netlify\n\nYour deployment folder structure should look like this:\n\n```bash\nMinidapp/\n├── Build/\n│   ├── minidapp.data\n│   ├── minidapp.framework.js\n│   ├── minidapp.loader.js\n│   └── minidapp.wasm\n├── scripts/\n│   └── dapp_portal_sdk.js\n└── index.html\n```\n\n## Step 4: Final Configuration & Testing <a id=\"step4-final-config-testing\"></a>\n\n1. Update your LIFF endpoint:\n    * Return to LINE Developers Console\n    * Locate your LIFF app\n    * Click \"Edit\"\n    * Update URL to your deployed site.\n    \nNow your mini dApp should be readily available. \n\n## Summing Up <a id=\"summing-up\"></a>\n\nCongratulations! You've successfully created your first LINE mini dApp with Unity! By completing this guide, you've implemented a mini dApp with token minting functionalities. Building a LINE mini dApp transcends traditional app development - it's about creating seamless Web3 experiences within an ecosystem that users already trust and use daily. \n\nThrough Kaia's integration, you've unlocked the ability to bring blockchain functionality directly to users' fingertips, eliminating the usual barriers to Web3 adoption. This combination of LINE's extensive reach and Web3 capabilities creates a unique opportunity to innovate in ways that were previously impossible.\n\nThe power of LINE mini dApps lies in their versatility and accessibility. Whether you're a developer exploring new blockchain implementations, a business looking to enhance customer engagement, or an innovator seeking to create novel digital experiences, the platform provides all the tools needed to bring your vision to life. \n\nFor more detailed information on developing LINE mini dApps, explore these comprehensive resources:\n\n* [Kaia Documentation](https://docs.kaia.io/)\n* [LINE Developers Documentation](https://developers.line.biz/en/docs/line-mini-app/)\n* [Unity Documentation](https://docs.unity.com/)\n\n\n## Appendix <a id=\"appendix\"></a>\n\n### Appendix A <a id=\"appendix-a\"></a>\n[KaiaPlugin.jslib source code](https://gist.github.com/ayo-klaytn/2aad97e1e263b00f5403177a7ad1fff1#file-kaiaplugin-jslib)\n\n### Appendix B <a id=\"appendix-b\"></a>\n[Web3Manager.cs source code](https://gist.github.com/ayo-klaytn/2aad97e1e263b00f5403177a7ad1fff1#file-web3manager-cs)\n\n\n",
    "Current Website Url is https://docs.kaia.io/minidapps/minidapps. # Build Mini dApps on LINE with Unity \n\n## Introduction\n\nLINE serves as a comprehensive communication and lifestyle platform with over 200 million active users. By integrating Web3 capabilities into LINE through mini dApps, developers can leverage LINE's vast user base to facilitate mainstream adoption of blockchain technologies. This integration allows users to interact with decentralized applications directly within their familiar LINE interface, eliminating the need to switch between multiple platforms.\n\nThis tutorial guides you through building mini dApps on the LINE platform using Unity WebGL and Kaia's infrastructure. Mini dApps allow developers to integrate Web3 functionality directly into LINE, leveraging its extensive user base.\n\nYou will learn how to create a mini dApp that enables users to connect their wallets, check token balances, and mint tokens. This guide caters to both experienced blockchain developers and those new to Web3 development. By the end of this tutorial, you will have the skills to build and deploy your own LINE mini dApp.\n\n## Getting Started\n\nReady to build your first LINE mini dApp? We'll walk through creating a dApp using Unity WebGL, transform it into a LIFF (LINE Front-end Framework) app, and add some exciting token minting capabilities. If you're unfamiliar with some of these terms, each concept will be explained thoroughly.\n\n![](/img/minidapps/unity-minidapp/info-minidapp-banner.png)\n\n",
    "Current Website Url is https://docs.kaia.io/misc/brand. ---\nsidebar_label: Brand Guidelines\n---\n\n# Kaia Brand Guidelines and Assets\n\nConsistency strengthens our brand.\n\n## Logo and Symbol Usage\n\nThe Kaia logo and token symbol represent our project's identity.  Adhering to these guidelines ensures consistent and impactful branding across all platforms.\n\n- **Primary Color Scheme:** We recommend using the dark version over the light version.\n- **Default Color Combination:** Neon lime on a black background.\n- **Color Usage Priority:**\n  1. ![](/img/misc/kaia_brandmark_neonlime_on_black.png) Neon lime on black background\n  2. ![](/img/misc/kaia_brandmark_black_on_neonlime.png) Black on neon lime background\n  3. ![](/img/misc/kaia_brandmark_white_on_black.png) White on black background\n  4. ![](/img/misc/kaia_brandmark_black_on_white.png) Black on white background\n\n## Logo Usage Best Practices\n\nThe following guidelines ensure the Kaia logo is presented correctly and effectively:\n\n* **Correct Variations:**  Kaia provides various logo versions for different applications. Please select the appropriate version for your specific use case.  The provided asset pack contains all available variations.\n* **No Modifications:**  Do not modify or alter the logo in any way. This includes resizing (unless proportionally), changing colors, adding effects, or distorting the original artwork.\n* **Placement and Visibility:**  Place the logo prominently and ensure it's clearly visible and unobstructed.  Avoid cluttered backgrounds or placements that make the logo difficult to identify.\n* **Attribution:** When using the Kaia logo, please acknowledge the Kaia project and, if possible, link to relevant resources such as the official website or documentation. This helps build community and awareness.\n\nDownload the complete Kaia Brand Guidelines and Asset Pack [here](https://drive.google.com/drive/folders/1Ia9R44Aw4TQRyupqPDCQ5qaeuk-0iWr2?usp=drive_link).",
    "Current Website Url is https://docs.kaia.io/misc/faq. # FAQ\n\n- [What is Kaia?](#what-is-kaia)\n- [How does Kaia support Ethereum equivalence?](#how-ethereum-equivalence)\n- [What is Kaia’s gas policy?](#kaia-gas-policy)\n- [What is special about Kaia’s account structure?](#kaia-account-structure)\n- [Where can I start dApp development with Kaia?](#dapp-development)\n- [Is Kaia Open Source?](#is-kaia-open-source)\n- [How can I initially fund my account?](#fund-my-acconut)\n- [Any Kaia’s Public Node Providers for testing and development?](#node-providers)\n- [Are there faucets to get test KAIA?](#are-there-faucets)\n- [How do I check for Public RPC endpoint status?](#rpc-endpoint-status)\n- [Which wallets support Kaia?](#which-wallets)\n- [What is Mainnet, what is Kairos?](#what-is-mainnet-what-is-kairos)\n- [Are there any Kaia SDKs? In what languages?](#kaia-sdks)\n- [Must I install and run an EN (Endpoint Node) to use Kaia?](#must-i-install-and-run-en)\n- [I am running an EN, and node data sync is too slow.](#node-data-sync-is-too-slow)\n- [Can I use ERC-20 and ERC-721 contracts on Kaia?](#can-i-use-erc-20-and-erc-721)\n- [Where can I get a browser extension wallet like Metamask?](#where-can-i-get-a-browser-extension-wallet)\n- [Why is my fee-payer account address not derived from the key provided?](#account-address-is-not-derived-from-the-key)\n- [Where can I find complete working samples of fee-delegation?](#fee-delegation-samples)\n\n## What is Kaia? <a id=\"what-is-kaia\"></a>\n\nKaia is a high-performance Layer 1 blockchain designed for the mass adoption of Web3, particularly in Asia. It offers over 4,000 TPS, immediate finality, and one-second block times. Fully compatible with Ethereum, Kaia enables seamless dApp migration and provides a robust ecosystem with developer-friendly tools, low fees, and strong liquidity from an ecosystem fund. It prioritizes Web2 user accessibility through integrations with major messaging platform like Kakao and LINE. For details, see our [White Paper](https://docs.kaia.io/kaiatech/kaia-white-paper/).\n\n## How does Kaia support Ethereum equivalence? <a id=\"how-ethereum-equivalence\"></a>\n\nKaia is EVM-compatible and supports all Ethereum Cancun EVM features except EIP-4844 blob transactions. It provides the `eth` namespace RPC API, allowing seamless use of Ethereum SDKs and tools. Kaia-specific transaction types are represented as Type 0 legacy transactions within the eth namespace APIs, so Ethereum SDKs do not need to be aware of them.\n\n## What is Kaia’s gas policy? <a id=\"kaia-gas-policy\"></a>\n\nKaia uses a dynamic gas fee model that maintains low fees during normal network conditions but adjusts fees based on network congestion. The gas fee can change within a limited range per block, helping prevent network spam while keeping fees predictable. A portion of every transaction fee is automatically burned. The model prioritizes user experience and enterprise-friendliness while maintaining network stability.\n\n## What is special about Kaia’s account structure? <a id=\"kaia-account-structure\"></a>\n\nTo provide maximum convenience for dApp developers, Kaia has devised a way to [decouple private keys from addresses](https://klaytn-tech.medium.com/klaytn-usability-improvement-series-1-separating-keys-and-addresses-dd5e367a0744). As a result, you can easily implement [multisig](https://medium.com/klaytn/klaytn-usability-improvement-series-2-introducing-multisig-on-the-platform-level-85141893db01), whereby you create multiple private keys for a single account, with each key having different weights. Each key can be assigned with [different roles](https://medium.com/klaytn/klaytn-usability-improvement-series-4-supporting-role-based-keys-on-the-platform-level-e2c912672b7b) as well.\n\n## Where can I start dApp development with Kaia? <a id=\"dapp-development\"></a>\n\nWhether you are migrating from Ethereum, or building on Kaia from scratch, we support all the necessary tools and infrastructure. You can test your smart contracts on [Remix IDE](../build/tutorials/connecting-remix) using Kaia Plugin or connect to [MetaMask](../build/tutorials/connecting-metamaskx) wallet and [Kaia Wallet](https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi). Kaia’s sdk is available [here](https://github.com/kaiachain/kaia-sdk). You can refer to our [tutorials](../build/tutorials/tutorials) to try building a dApp on Kaia.\n\n## Is Kaia Open Source? <a id=\"is-kaia-open-source\"></a>\n\nKaia is most certainly open source! Take a look at our [Github Organization](https://github.com/kaiachain) and you can start [contributing](https://github.com/kaiachain/kaia-docs/blob/main/CONTRIBUTING) to our Kaia Documentation. Read more about our open-source policies [here](opensource).\n\n## How can I initially fund my account? <a id=\"fund-my-acconut\"></a>\n\nYou may purchase KAIA on the exchange. The list of available exchanges can be found here:\n[Coinmarketcap](https://coinmarketcap.com/currencies/klaytn/markets/), [Coingecko](https://www.coingecko.com/en/coins/klay#markets).\n\n## Any Kaia’s Public Node Providers for testing and development? <a id=\"node-providers\"></a>\n\nRefer to [this list](../references/public-en#rpc-service-providers) for Kaia’s Public Node Providers and the network domains.\n\n## Are there faucets to get test KAIA? <a id=\"are-there-faucets\"></a>\n\nYou can get test KAIA for development and testing purposes here:\n\n- [Kaia Faucet](https://faucet.kaia.io)\n- [NODIT Faucet](https://kaiafaucet.com)\n- [Thirdweb Faucet](https://thirdweb.com/kaia-testnet-kairos)\n\n## How do I check for Public RPC endpoint status? <a id=\"rpc-endpoint-status\"></a>\n\nSince we cannot guarantee uptime and stability of the endpoints, you can always check for node provider status here: [ChainList](https://chainlist.org/chain/8217), [Kaia Status](https://status.kaia.io/).\n\n## Which wallets support Kaia? <a id=\"which-wallets\"></a>\n\nKaia is supported by the cold wallet D’cent, as well as a host of hot wallets like Kaia Wallet, MetaMask and more. Please refer to the list [here](../build/tools/wallets/wallets).\n\n## What is Mainnet, what is Kairos? <a id=\"what-is-mainnet-what-is-kairos\"></a>\n\nMainnet is the Kaia mainnet, Kairos is a testnet.\nBelow is information relating to each network.\n\nMainnet:\n\n- EN download : Choose the Mainnet package from the [download page](../nodes/downloads/downloads).\n- Kaiascope : https://kaiascope.com/\n\nKairos testnet:\n\n- EN download : Choose the Kairos package from the [download page](../nodes/downloads/downloads).\n- Kaiascope : https://kairos.kaiascope.com\n- Kairos Faucet : https://faucet.kaia.io\n\n## Are there any Kaia SDKs? In what languages? <a id=\"kaia-sdks\"></a>\n\nKaia Node is Ethereum-compatible, so you can use popular Ethereum SDKs like ethers.js, web3.js, web3py, web3j, or viem. However, Kaia Node also includes extended features with Kaia-specific account and transaction types.\n\nTo take advantage of these features, you can use the Kaia SDKs, which include extensions such as ethers-ext, web3js-ext, web3j-ext, and web3py-ext. These are plugin-type SDKs that extend Ethereum SDKs. If you prefer standalone SDKs, you can consider the Caver SDKs, such as caver-js and caver-java, which are designed for projects where Ethereum compatibility is not required.\n\n### kaia-sdk (Plug-in SDKs)\n\nThese SDKs support JavaScript, Java, and Python, so you can choose based on the language your project uses:\n\n- ethers-ext, web3js-ext for javascript\n- web3j-ext for java\n- web3py-ext for python\n\n### caver (Standalone SDKs)\n\nThese SDKs support JavaScript and Java, and are ideal for projects where Ethereum compatibility is not necessary:\n\n- caver-js for javascript\n- caver-java for java\n\n## Must I install and run an EN (Endpoint Node) to use Kaia? <a id=\"must-i-install-and-run-en\"></a>\n\nIt depends on your needs. If you require full control over your node and need to validate blocks yourself, then yes, you'll need to install and run your own EN. This is the typical setup for most Kaia applications. However, for testing and development, or if you prefer not to manage your own infrastructure, the [Kaia API Service (KAS)](https://www.klaytnapi.com/en/landing/main) is a great option. KAS provides access to the Kaia Node RPC APIs for both Kairos and Mainnet, plus additional API services. KAS offers free API requests after registration. Check the KAS [pricing page](https://www.klaytnapi.com/en/landing/pricing) for pricing plan information.\n\n## I am running an EN, and node data sync is too slow. <a id=\"node-data-sync-is-too-slow\"></a>\n\nFirst, check if your HW specification meets the [system requirements](../nodes/endpoint-node/system-requirements).\n\nSecond, consider [downloading chaindata snapshot](../nodes/endpoint-node/install-endpoint-nodes#optional-download-chaindata-snapshot) to skip the time-consuming Full Sync process. The chaindata snapshot is a database snapshot that stores all blocks generated since the genesis. It is updated daily.\n\n## Can I use ERC-20 and ERC-721 contracts on Kaia? <a id=\"can-i-use-erc-20-and-erc-721\"></a>\n\nYes. Kaia supports Solidity as a smart contract language. [ERC-20](../build/smart-contracts/samples/erc-20) and [ERC-721](../build/smart-contracts/samples/erc-721) written in Solidity for Etherem can be deployed and executed on Kaia.\n\nFurther Kaia-specific token standards can be defined. Follow the [KIP (Kaia Improvement Proposal)](https://kips.kaia.io/) and join the discussion.\n\n## Where can I get a browser extension wallet like Metamask? <a id=\"where-can-i-get-a-browser-extension-wallet\"></a>\n\nKaia's web browser extension wallet [Kaia Wallet](https://chromewebstore.google.com/detail/kaia-wallet/jblndlipeogpafnldhgmapagcccfchpi). Kaia Wallet is a non-custodial wallet with which you can make KAIA transactions and create accounts. \n\n## Why is my fee-payer account address not derived from the key provided? <a id=\"account-address-is-not-derived-from-the-key\"></a>\n\nIn Kaia, [the account address can be decoupled from the key pair](../learn/accounts#decoupling-key-pairs-from-addresses).\n\nCommon use cases are as follows.\n\n- The account owner wants to change the key for security reasons.\n- The account has a weighted-multisig or a role-based key that allows having multiple key pairs to control the account.\n\nFee-payer accounts usually have a [role-based key](../learn/accounts#accountkeyrolebased). In most cases, the account address is not derived from the RoleFeePayer key.\n\n## Where can I find complete working samples of fee-delegation? <a id=\"fee-delegation-samples\"></a>\n\nYou can find complete working examples of fee delegation using several different Kaia SDKs:\n\n- ethers-ext: [fee delegated value transfer example](https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/value-transfer/)\n- web3js-ext: [fee delegated value transfer example](https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/value-transfer/)\n- web3j-ext: [fee delegated value transfer example](https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/value-transfer/)\n- web3py-ext: [fee delegated value transfer example](https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/value-transfer/)\n- Caver-js: [fee-delegation-example](https://docs.kaia.io/build/tutorials/fee-delegation-example/)",
    "Current Website Url is https://docs.kaia.io/misc/finschia. # Finschia Archive\n\nThis page serves as an archive of information for existing Finschia users, including FNSA token holders, DApp builders, and node operators. As Finschia integrates with Klaytn to form Kaia, this resource now exists as a summary of the key information about Finschia and a subset of the broader Kaia documentation.\n\n## About Finschia\n\nFinschia is a Cosmos-SDK-based chain that migrated the state of the former LINE Blockchain Mainnet and launched on December 22, 2022.\n\nFollowing the approval of Klaytn's [KGP-25](https://govforum.klaytn.foundation/t/kgp-25-klaytn-finschia-mainnet-merge/719) and Finschia's [FGP-23](https://www.mintscan.io/finschia/proposals/23) on-chain proposals, the two chains are undergoing phased technical integration.\n\nThe FNSA token, which is the native (base) coin of the Finschia mainnet, can be converted (swap & bridge) into the KAIA token through the Kaia Portal once it launches with the Kaia Mainnet. KAIA is the native coin of the Kaia Mainnet.\n\n## Finschia Specifications\n\nFinschia operates both Mainnet and Testnet environments, each with the following specifications:\n\n|**Category**|**Finschia mainnet**|**Ebony testnet**|\n| :- | :- | :- |\n|Purpose and usage|A real environment where FNSA can be indirectly or directly used in services and the Finschia governance takes place|An environment for development and testing with the same specifications as the Finschia mainnet|\n|Consensus algorithm|Ostracon (PBFT + DPoS + VRF)||\n|Chain ID|finschia-2|ebony-2|\n|Address prefix|link|tlink|\n|Base coin|**FNSA (FINSCHIA)**<br/>• Denom: cony<br/>• Decimal: 6 (1 FNSA = 10^6 cony)<br/>**KAIA**<br/>• Denom: kei<br/>• Decimal: 18 (1 KAIA = 10^18 kei)<br/>**Swap rate**<br/>• FNSA:KAIA = 1:148.079656|**TFNSA**<br/>• Denom: tcony<br/>• Decimal: 6 (1 TFNSA = 10^6 tcony)<br/>**KAIA**<br/>• Denom: kei<br/>• Decimal: 18 (1 KAIA = 10^18 kei)<br/>**Swap rate**<br/>• TFNSA:KAIA = 1:148.079656<br/>• KAIA of Ebony testnet is a test coin with no real value.|\n|Key features|• Smart contract<br/>• Collection (NFT)<br/>• Delegation<br/>• On-chain governance||\n|Performance|• Block confirm time: about 3.3+ seconds<br/>• TPS (transaction per second): 1200||\n\n## Finschia Developer Resources\n\nTechnical information about Finschia can be found in the links below. This list may be updated as needed.\n\nIf you cannot find the information you're looking for in these links or need more detailed information, please contact contact@kaia.io.\n\n|**Repository**|**Link**|**Description**|\n| :- | :- | :- |\n|Official Github repository|https://github.com/Finschia/finschia|Introduction, installation, connect to mainnet/testnet, interact with Finschia node, endpoint info|\n|Binary release|https://github.com/Finschia/finschia/releases|Latest or old version of Finschia binaries with release notes|\n|Finschia-sdk|https://github.com/Finschia/finschia-sdk|A framework for building blockchains based on Finschia forked from cosmos-sdk|\n|Proto-docs|https://github.com/Finschia/finschia-sdk/blob/main/docs/core/proto-docs|Messages, Queries, Structs,  and Parameters of each module of Finschia|\n|Finschia-kt|https://github.com/Finschia/finschia-kt|Kotlin SDK for Finschia|\n|Finschia-js|https://github.com/Finschia/finschia-js|Javascript SDK for Finschia|\n|Ostracon|https://github.com/Finschia/ostracon|Consensus algorithm of Finschia|",
    "Current Website Url is https://docs.kaia.io/misc/glossary. # Glossary\n\nThis glossary provides explanation on technical terms specific to the Kaia Blockchain. It stands as your goto for understanding numerous terms you will encounter while exploring Kaia documentation, guides and tutorials.\n\n### anchor\nA cryptographically secure reference to data stored outside of a blockchain. Anchors can be used to link data from different systems together, or to provide tamper-proof evidence of the existence of data at a specific point in time.\n\n### anchoring\nThe process of storing an anchor on a blockchain. This can be done by creating a transaction that contains the hash of the external data, or by creating a smart contract that references the external data (for example, [Anchoring in service chain](../nodes/service-chain/configure/anchoring)).\n\n### BFT-based public blockchain\nThis is a blockchain that utilizes Byzantine Fault Tolerance (BFT), ensuring consensus can be reached even if some nodes fail or act maliciously. The system relies on algorithms designed to handle up to ⅓ of nodes behaving incorrectly or dishonestly, without compromising the integrity of the network.\n\n### block explorer\nA web-based tool that allows users to view and search data on a blockchain. Block explorers typically display information such as block height, block hash, transaction hash, transaction sender and receiver, transaction amount, and transaction status. \n\nThe block explorers available in Kaia are [Kaiascope](../build/tools/block-explorers/kaiascope) and [Kaiascan](https://www.kaiascan.io/).\n\n### core cell (CC)\n\nAn entity in the Kaia blockchain architecture that is responsible for executing transactions and generating blocks. A core cell typically consists of a consensus node and multiple proxy nodes. \n\nSee also [consensus node (CN)](#consensus-node-cn), [proxy node (PN)](#proxy-node-pn).\n\n### core cell node network (CCN)\n\nA group of core cell nodes that are interconnected\n\n### consensus node (CN)\n\nA node that is responsible for generating and propagating blocks, and for reaching consensus on the state of the Kaia blockchain. Consensus nodes validate submitted transactions and execute valid transactions.\n\n### endpoint node (EN)\n\nA node that serves as an entry point for service chains and DApps to interact with the Kaia blockchain through its exposed RPC APIs. Endpoint nodes synchronize the entire blockchain ledger and allow reading blockchain data or submitting transactions directly to the network without going through a proxy node.\n\n### endpoint node network (ENN)\n\nA group of endpoint nodes that are interconnected\n\n### externally owned account (EOA)\n\nAn account on a blockchain that is controlled by a private key. The private key is held by the user and is used to sign transactions. EOAs are the most common type of account on blockchains and are used by individuals and businesses to interact with the blockchain. \n\nSee also [smart contract account (SCA)](#smart-contract-account-sca).\n\n### fee delegation\n\nA mechanism in some blockchain networks that enables a user to nominate another account to pay transaction fees on their behalf. This allows the user to submit transactions and have them processed without needing to pay fees directly from their own account balance.\n\n### governance council (GC)\n\nA group or organization formed to establish and maintain oversight and decision-making authority over a blockchain network. A blockchain governance council typically defines tasks such as establishing operational procedures, resolving disputes, approving protocol upgrades, and representing the interests of all stakeholders in the network.\n\n### inter-process communication (IPC)\n\nA set of techniques for the exchange of data among two or more processes in one or more computers. It is a fundamental part of operating systems and distributed systems, and is used by many different types of software, including web servers, databases, and graphical user interfaces.\n\n### interplanetary file system (IPFS)\n\nA peer-to-peer distributed file system that enables users to store and share files in a decentralized manner. IPFS uses a content-addressing scheme to uniquely identify each file, and it stores files in a distributed network of nodes.\n\n### Kaia Ecosystem Fund (KEF)\n\nA fund established by the Kaia Foundation to support initiatives that contribute to the growth and development of the Kaia blockchain ecosystem. The KEF provides grants and financial support to projects, organizations, and individuals working to expand usage and adoption of Kaia. The goal of the KEF is to advance innovation and community growth around Kaia through funded initiatives.\n\n### Kaia endpoint node (KEN)\n\nSee [endpoint node (EN)](#endpoint-node-en).\n\n### Kaia Infrastructure Fund (KIF)\n\nA reserve fund established by the Kaia Foundation to support its operating expenses and long-term initiatives. The KIF aids in funding the Foundation's work to further develop and enhance the Kaia blockchain protocol and ecosystem through research, business development activities, education programs and more.\n\n### Kaia Governance Council (KGC)\n\nA council of organizations that are responsible for governing the Kaia blockchain. The GC members are selected by the Kaia Foundation and are required to operate a consensus node on the Kaia network. The GC is responsible for making decisions about the development and operation of the Kaia blockchain, including upgrades, partnerships, and ecosystem development initiatives.\n\n### Kaia Improvement Proposal (KIP)\n\nA design document providing information to Kaia stakeholders regarding new features or processes for the Kaia blockchain network. KIPs are intended to provide a consistent and controlled mechanism for proposing, reviewing and adopting protocol upgrades and innovations. They allow advocates to collaborate with the Kaia community to refine any potential protocol upgrades before being considered for inclusion in the software. \n\nSome of typical examples of KIP are [KIP-7](http://kips.klaytn.foundation/KIPs/kip-7), [KIP-17](http://kips.klaytn.foundation/KIPs/kip-17), and [KIP-37](http://kips.klaytn.foundation/KIPs/kip-37).\n\n### Kaia State\n\nThis is the world state of accounts in Kaia containing the balances, storage variables of the account and the hash of the code or bytecode depending on if the account is an EOA or SCA.\n\n\n### Kaia virtual machine (KVM)\n\nA virtual state machine that executes Kaia smart contracts. It is a quasi-Turing-complete stack-based virtual machine that is derived from the Ethereum Virtual Machine (EVM). The KVM is responsible for processing and executing smart contracts on the Kaia blockchain.\n\n### Kaia network identifier (KNI)\n\nA unique resource identifier scheme to identify a Kaia node. It consists of nodeID, hostname, port, and discport.\n\n### Kairos\nThe public testnet of the Kaia platform. It is used by developers to test and verify their applications before deploying them to the Mainnet.\n\n### proposer\n\nA role assigned to a consensus node (CN) in each round of block creation. The proposer is randomly but deterministically selected to create the next block. The probability of a CN being enlisted as the proposer is determined by the amount of Kaia tokens, or KAIA, that the CN stakes.\n\n### proxy node (PN)\n\nA node that is responsible for relaying transactions from endpoint nodes (ENs) to consensus nodes (CNs). It aids in enhancing the performance of the network by reducing the direct communication load between ENs and CNs.\n\n### recursive-length prefix (RLP)\n\nAn address prefix format where the length of the prefix is included as part of the address information in computer networking, It allows for more efficient routing by eliminating the need to store prefix lengths separately for each route. Kaia uses recursive-length prefix to represent blockchain addresses.\n\n### remote procedure call (RPC)\n\nA communication protocol that allows a program on one computer to execute code or request services from a program located on another, often remote, computer within a network.\n\n### soul-bound token (SBT)\n\nA non-transferable token that represents a person's identity and achievements in the Web3 ecosystem. It is a type of non-fungible token (NFT) that is permanently tied to a specific individual or crypto wallet.\n\n### smart contract account (SCA)\n\nAn account on a blockchain that is controlled by a smart contract. A smart contract is a self-executing contract with the terms of the agreement between buyer and seller directly written into lines of code. SCAs are used to automate transactions and agreements on the blockchain. \n\nSee also [externally owned account (EOA)](#externally-owned-account-eoa).\n\n### service chain\n\nA sidechain or auxiliary blockchain that is connected to the Kaia mainnet. Service chains are designed to meet the specific needs of different applications or industries, such as immediate finality, cross-chain token transfer, and data anchoring to the main chain.\n\n### service chain consensus node (SCN)\n\nA node that is responsible for participating in the consensus process in a Kaia service chain. \n\nSee also [consensus node (CN)](#consensus-node-cn), [service chain](#service-chain).\n\n### service chain endpoint node (SEN)\n\nA node in a Kaia service chain that provides a public interface for interacting with the service chain. \n\nSee also [endpoint node (EN)](#endpoint-node-en), [service chain](#service-chain).\n\n### state migration\n\nThis process involves removing unnecessary or outdated data from the blockchain to reduce the amount of required storage space and improve efficiency.\n\n### transaction pool\n\nA critical component for managing pending and queued transactions awaiting inclusion in the next blocks within the network. \n\n### validator\n\nA node that verifies the accuracy of data contained in new blocks and ensures that blocks are processed efficiently across the network. In Kaia's permissionless validation structure, anyone can act as a block validator if they meet certain qualifications while maintaining the existing Governance Council structure and roles.",
    "Current Website Url is https://docs.kaia.io/misc/internationalization. # Internationalization\n\nKaiaDocs is available in the following languages:\n\n* [English](https://docs.kaia.io/)\n* [한국어](https://docs.kaia.io/ko/)\n* [Tiếng Việt](https://docs.kaia.io/vi/)\n\n## Get involved! <a href=\"#get-involved\" id=\"get-involved\"></a>\n\nIf you are fluent and confident in a language and are willing to contribute to translate or to improve the quality of the localized documents, see [the list of languages currently being translated](https://crowdin.com/project/kaia-docs).\n\n### How to contribute KaiaDocs localization via Crowdin [![](https://badges.crowdin.net/kaia-docs/localized.svg)](https://crowdin.com/project/kaia-docs) <a href=\"#how-to-contribute-kaiadocs-localization-via-crowdin-crowdin-https-badges-crowd\" id=\"how-to-contribute-kaiadocs-localization-via-crowdin-crowdin-https-badges-crowd\"></a>\n\nCrowdin is a web service for collaborative translation. To contribute to localization, please follow these steps:\n\n1. Go to [Kaia-Docs project at Crowdin](https://crowdin.com/project/kaia-docs).\n2. Create an account there.\n3. Select the language you want to contribute. Can not find your language? Send a request to the project owner to initiate a new language translation.\n4. Join the translator team. Wait until one of the managers approves your request.\n5. Choose the file you want to contribute.\n6. You can submit your translation for a string, vote for a translation, or leave a comment. When you submit a translation, please make sure your word choice conforms to the Kaia Terminologies.\n\n![](/img/misc/crowdin-editor.png)\n\nFor detailed usage guidelines for the online-editor, please refer to the official [Crowdin document](https://support.crowdin.com/online-editor/).\n\nTranslation suggestions will be reviewed and approved by the maintainers in a couple of days, then, will be made available to the web site. The list of localized web sites are listed above.\n\n### Discussion <a href=\"#discussion\" id=\"discussion\"></a>\n\nJoin the [discussion board](https://crowdin.com/project/kaia-docs/discussions) and meet the fellow contributors.\n\n### Code of conduct <a href=\"#code-of-conduct\" id=\"code-of-conduct\"></a>\n\nPlease be respectful to fellow community members. Project managers may delete any offensive posts or comments without notice and reserve the right to revoke the membership.\n",
    "Current Website Url is https://docs.kaia.io/misc/kaia-transition/faq-chain-transition. # Transition FAQ\n\n:::info[Archive Notice]\n\nPlease note that most of the information provided in this FAQ reflects a transitional period that occurred in 2024, and most of the events and processes mentioned have already taken place. While the FAQ remains available for historical reference, some sections are now out of date and may no longer apply. For the most current information regarding Kaia, please consult the latest official documentation and announcements.\n\n:::\n\nThis FAQ addresses common questions and concerns for CEXs, node providers, wallet providers, dApp builders, and retail users familiar with the Klaytn ecosystem, to ensure a smooth transition.\n\n- KLAY and FNSA holders\n  - [What happened to Klaytn and Finschia?](#what-happened-to-klaytn-and-finschia-)\n  - [What happens to KLAY and FNSA?](#what-happens-to-klay-and-fnsa-)\n  - [Will I need to create a new wallet for Kaia?](#will-i-need-to-create-a-new-wallet-for-kaia-)\n  - [Will Klaytn provide a swap or migration website for new KAIA tokens?](#will-klaytn-provide-a-swap-or-migration-website-for-new-kaia-tokens-)\n  - [Will there be any delay in receiving KAIA tokens?](#will-there-be-any-delay-in-receiving-kaia-tokens-)\n  - [Is there a limit on the amount for swapping KLAY and FNSA tokens?](#is-there-a-limit-on-the-amount-for-swapping-klay-and-fnsa-tokens-)\n  - [I'm currently staking FNSA. Will I need to wait 7 days to unstake my FNSA to swap to KAIA?](#im-currently-staking-fnsa-will-i-need-to-wait-7-days-to-unstake-my-fnsa-to-swap-to-kaia-)\n  - [Where can I find the historical price information for KLAY and FNSA? I can't seem to find it on CoinMarketCap or CoinGecko anymore.](#where-can-i-find-the-historical-price-information-for-klay-and-fnsa-i-cant-seem-to-find-it-on-coinmarketcap-or-coingecko-anymore-)\n\n- DApp builders\n  - [What do DApps on Klaytn need to do to migrate to Kaia?](#what-do-dapps-on-klaytn-need-to-do-to-migrate-to-kaia-)\n  - [What do DApps on Finschia need to do to migrate to Kaia?](#what-do-dapps-on-finschia-need-to-do-to-migrate-to-kaia-)\n  - [Will Kaia Foundation continue to provide code audit grants as Klaytn Foundation did?](#will-kaia-foundation-continue-to-provide-code-audit-grants-as-klaytn-foundation-did-)\n\n- Wallet providers\n  - [Is it necessary to update the brand name from Klaytn to Kaia in the wallet?](#is-it-necessary-to-update-the-brand-name-from-klaytn-to-kaia-in-the-wallet-)\n  - [What happens if we don't upgrade to the Kaia brand after the mainnet upgrade?](#what-happens-if-we-dont-upgrade-to-the-kaia-brand-after-the-mainnet-upgrade-)\n  - [What will happen to Klaytnscope, the default explorer?](#what-will-happen-to-klaytnscope-the-default-explorer-)\n\n- Centralized exchanges\n  - [Is KAIA a rebrand from KLAY or a completely new token?](#is-kaia-a-rebrand-from-klay-or-a-completely-new-token-)\n  - [Will Kaia be on the Klaytn mainnet or a different mainnet?](#will-kaia-be-on-the-klaytn-mainnet-or-a-different-mainnet-)\n  - [Will the current Klaytn mainnet continue to work after the rebrand?](#will-the-current-klaytn-mainnet-continue-to-work-after-the-rebrand-)\n  - [When will the KAIA market open?](#when-will-the-kaia-market-open-)\n  - [Where can I find Kaia’s whitepaper?](#where-can-i-find-kaias-whitepaper-)\n\n- RPC node providers\n  - [What changes do I need to make to my infrastructure to support the transition from Klaytn to Kaia, and will there be any breaking changes in the RPC APIs?](#as-an-rpc-node-provider-what-changes-do-i-need-to-make-to-my-infrastructure-to-support-the-transition-from-klaytn-to-kaia-and-will-there-be-any-breaking-changes-in-the-rpc-apis-)\n  - [Is Kaia a new chain with a different chain ID, or an upgrade based on the Klaytn chain?](#is-kaia-a-new-chain-with-a-different-chain-id-or-an-upgrade-based-on-the-klaytn-chain-)\n\n\n## KLAY and FNSA holders\n\n### What happened to Klaytn and Finschia? <a id=\"what-happened-to-klaytn-and-finschia-\"></a>\n\nKlaytn and Finschia merged to form Kaia through governance decisions made by both chains. You can view the voting results [here](https://medium.com/kaiachain/klaytn-and-finschia-merge-proposal-passes-creating-asias-largest-blockchain-ecosystem-7af570eb069a). The utility tokens of the two chains (KLAY and FNSA) are converted to the KAIA token. You can find the exchange rates for both tokens [here](../../kaiatech/kaia-white-paper#fnsa-issuancedistribution-status).\n\n### What happens to KLAY and FNSA? <a id=\"what-happens-to-klay-and-fnsa-\"></a>\n\nWith the launch of the KAIA coin, KLAY balances were automatically reflected as KAIA. FNSA holders are able to use the swap service on the [Kaia Portal](https://portal.kaia.io/) to burn their FNSA tokens on the Finschia network and claim an equivalent value of KLAY tokens. Please read [this post](https://medium.com/lineblockchain/preparations-for-the-upcoming-kaia-chain-token-swap-d9ccd853eda4) to learn more about swapping your FNSA to KAIA.\n\n### Will I need to create a new wallet for Kaia? <a id=\"will-i-need-to-create-a-new-wallet-for-kaia-\"></a>\n\nYour Klaytn wallet will be usable on Kaia, but you will need to update the RPC and block explorer URLS if you are using a 3rd-party multi chain wallet such as Metamask. These will be provided at a later date. Finschia wallet holders will need to create a Kaia wallet, and a website will be provided for FNSA holders to burn their tokens and claim an equivalent value of KAIA.\n\n### Will Klaytn provide a swap or migration website for new KAIA tokens? <a id=\"will-klaytn-provide-a-swap-or-migration-website-for-new-kaia-tokens-\"></a>\n\nNo action is required from users. KLAY tokens will be automatically renamed to KAIA tokens.\n\n### Will there be any delay in receiving KAIA tokens? <a id=\"will-there-be-any-delay-in-receiving-kaia-tokens-\"></a>\n\nThe token swap will be delayed by at least 30 minutes Timelock for safety. Relayers and RPC nodes may incur insignificant additional delays\n\n### Is there a limit on the amount for swapping KLAY and FNSA tokens? <a id=\"is-there-a-limit-on-the-amount-for-swapping-klay-and-fnsa-tokens-\"></a>\n\nThere is no limit for swapping and bridging the two tokens.\n\n### I'm currently staking FNSA. Will I need to wait 7 days to unstake my FNSA to swap to KAIA? <a id=\"im-currently-staking-fnsa-will-i-need-to-wait-7-days-to-unstake-my-fnsa-to-swap-to-kaia-\"></a>\n\nWith the upcoming launch of Kaia, a governance vote will be proposed on the Finschia network to smoothly integrate token and governance mechanisms, including potentially reducing the unbonding time from 7 days to a couple of hours. If the vote passes, FNSA holders will be able to unstake and swap without having to wait a week.\n\n### Where can I find the historical price information for KLAY and FNSA? I can't seem to find it on CoinMarketCap or CoinGecko anymore. <a id=\"where-can-i-find-the-historical-price-information-for-klay-and-fnsa-i-cant-seem-to-find-it-on-coinmarketcap-or-coingecko-anymore-\"></a>\n\nDue to the merger of KLAY and FNSA and their transition to the new token KAIA, historical price information for KLAY and FNSA is no longer available on cryptocurrency tracking websites. However, we have preserved this data for transparency and reference purposes. You can download CSV files containing the historical price data for both KLAY and FNSA from [Kaia native coin - KAIA](../../learn/token-economics/kaia-native-token#historical-pricing).\n\n## DApp builders\n\n### What do DApps on Klaytn need to do to migrate to Kaia? <a id=\"what-do-dapps-on-klaytn-need-to-do-to-migrate-to-kaia-\"></a>\n\nKlaytn apps will work seamlessly with the Kaia chain, requiring only rebranding. The team will provide branding guidelines. For existing Finschia apps, tech updates and marketing support will be provided through their business channels.\n\n### What do DApps on Finschia need to do to migrate to Kaia? <a id=\"what-do-dapps-on-finschia-need-to-do-to-migrate-to-kaia-\"></a>\n\nFor DApps in the Finschia ecosystem to migrate to Kaia, a process similar to migrating from a Cosmwasm chain to an EVM chain is required. Additional migration support will be shared once available, but if you need immediate assistance please contact Finschia Foundation.\n\n### Will Kaia Foundation continue to provide code audit grants as Klaytn Foundation did? <a id=\"will-kaia-foundation-continue-to-provide-code-audit-grants-as-klaytn-foundation-did-\"></a>\n\nYes, audit grants will remain the same along with other grant and funding programs available for Klaytn.\n\n## Wallet providers\n\n### Is it necessary to update the brand name from Klaytn to Kaia in the wallet? <a id=\"is-it-necessary-to-update-the-brand-name-from-klaytn-to-kaia-in-the-wallet-\"></a>\n\nYes, eco-partners will be informed when the update is required.\n\n### What happens if we don't upgrade to the Kaia brand after the mainnet upgrade? <a id=\"what-happens-if-we-dont-upgrade-to-the-kaia-brand-after-the-mainnet-upgrade-\"></a>\n\nThere will be no functional issues after the mainnet upgrade. Rebranding can be done later.\n\n### What will happen to Klaytnscope, the default explorer? <a id=\"what-will-happen-to-klaytnscope-the-default-explorer-\"></a>\n\nKlaytnscope will continue to work as before and will be upgraded after three months.\n\n## Centralized exchanges\n\n### Is KAIA a rebrand from KLAY or a completely new token? <a id=\"is-kaia-a-rebrand-from-klay-or-a-completely-new-token-\"></a>\n\nKAIA is a rebrand of KLAY. KLAY will continue to be used with the updated name and ticker symbol. It is recommended to renew the token chart if possible.\n\nDue to the merger of the Klaytn and Finschia chains, the total and circulating supply have changed. The circulating supply increased from approximately 3.804 billion to 5.805 billion KAIA, while the total supply decreased from approximately 6.005 billion to 5.805 billion KAIA. These figures may not reflect the current circulating and total supply due to ongoing inflation. KAIA’s inflation rate has been adjusted from 6.4 KAIA per block to 9.6 KAIA per block. For more details on these changes, please refer to the [KAIA Issuance and Distribution Plan](../../kaiatech/kaia-white-paper#kaia-issuancedistribution-plan-1).\n\n### Will Kaia be on the Klaytn mainnet or a different mainnet? <a id=\"will-kaia-be-on-the-klaytn-mainnet-or-a-different-mainnet-\"></a>\n\nKaia will continue to be on the Klaytn mainnet.\n\n### Will the current Klaytn mainnet continue to work after the rebrand? <a id=\"will-the-current-klaytn-mainnet-continue-to-work-after-the-rebrand-\"></a>\n\nYes, the mainnet's operation will remain unaffected. The transition to Kaia primarily involves a name change and technical upgrades occurring behind the scenes.\n\n### When will the KAIA market open? <a id=\"when-will-the-kaia-market-open-\"></a>\n\nThe KAIA market will open in Q3 2024, we will share the exact block number closer to the date.\n\n### Where can I find Kaia’s whitepaper? <a id=\"where-can-i-find-kaias-whitepaper-\"></a>\n\nYou can access Kaia’s whitepaper [here](../../kaiatech/kaia-white-paper).\n\n## RPC node providers\n\n### What changes do I need to make to my infrastructure to support the transition from Klaytn to Kaia, and will there be any breaking changes in the RPC APIs? <a id=\"as-an-rpc-node-provider-what-changes-do-i-need-to-make-to-my-infrastructure-to-support-the-transition-from-klaytn-to-kaia-and-will-there-be-any-breaking-changes-in-the-rpc-apis-\"></a>\n\nMost RPC APIs will remain the same on the Kaia chain, with the exception of namespace changes from klay_ to kaia_. However, klay_ will still be available for backward compatibility.\n\nTo support the transition from Klaytn to Kaia, RPC node providers will need to upgrade their binary to the Kaia version once it is released. No immediate action is required before the upgrade.\n\n### Is Kaia a new chain with a different chain ID, or an upgrade based on the Klaytn chain? <a id=\"is-kaia-a-new-chain-with-a-different-chain-id-or-an-upgrade-based-on-the-klaytn-chain-\"></a>\n\nKaia is a hard fork of the Klaytn chain, and the chain ID remains unchanged. The previous testnet \"Baobab\" has been renamed to \"Kairos,\" while the mainnet \"Cypress\" is now referred to as \"Mainnet\" or \"Kaia Mainnet.\" The original URLs related to Klaytn such as docs, website, public endpoints, and package download links will remain for three months to ensure a smooth transition.\n\n## Resources\n\nHere are the main information sources for the chain merge:\n- [Governance proposal](https://govforum.klaytn.foundation/t/kgp-25-klaytn-finschia-mainnet-merge/719)\n- [Our vision behind the merge](https://medium.com/klaytn/finschia-klaytn-chain-merge-proposal-our-vision-for-asias-1-blockchain-ecosystem-7de1588e28c0)\n- [Crafting the core of Kaia DeFi](https://medium.com/klaytn/crafting-the-core-of-project-dragons-defi-ecosystem-0fa561e02f56)\n- [Responding to institutional demand](https://medium.com/klaytn/project-dragon-responding-to-institutional-demand-bd36e2e1e2a6)\n- [Supplementary data and insights](https://medium.com/klaytn/project-dragon-supplementary-data-and-insights-d36abd25ca0f)\n- [The Kaia brand story](https://medium.com/klaytn/say-hello-to-kaia-4182ccafe456)\n",
    "Current Website Url is https://docs.kaia.io/misc/kaia-transition/kaia-transition. # Transition to Kaia\n\nThe Finschia and Klaytn blockchains have transitioned to the Kaia blockchain. This section provides essential information about the transition process, including frequently asked questions and overview about Kaiabridge, a system designed to facilitate token swaps between the Finschia and Kaia networks.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/misc/kaia-transition/kaiabridge. # Kaiabridge\n\nFinschia users can swap their FNSA tokens on Finshia network to KAIA tokens on Kaia network at a fixed swap rate. The swap is mediated by a set of smart contract and programs, collectively called Kaiabridge.\n\nA token swap process begins with the Finschia user sending the FNSA token to the `fwsap` module. The token is first swapped from `cony` to `kei` denomination, then transferred to `fbridge` module. The event from `fbridge` is recognized by the trusted relayers and submitted to bridge smart contracts on Kaia chain. The bridging request is handled in multiple steps:\n\n- Inflight: The token arrived in Finschia's `fbridge` module, but the relayers did not report to the Kaia smart contracts.\n- Confirmed: The relayers submitted the request to the contracts (\"provision\"). Now the request enters a 30 minute timelock.\n- Claimed: After the timelock has expired, the token has been transferred (\"claim\") to the destination account on Kaia chain.\n\nKaiabridge smart contracts has built-in multisig features. For instance, it takes multiple provision transactions from the Operator accounts for a request to be Confirmed. Each Operator account is held by a relayer, and the relayers are managed by Kaia Foundation and Finschia Foundation.\n\nYou can find the contract source codes in [kaiachain GitHub](https://github.com/kaiachain/kaia/tree/dev/contracts/contracts/system_contracts/kaiabridge) and deployed addresses in the [contract addresses](https://docs.kaia.io/references/contract-addresses/) page.",
    "Current Website Url is https://docs.kaia.io/misc/klaytn-history. # Kaia Hard Fork History\n\nThis page shows all the hard forks to the Kaia blockchain.\n\n## Randao\n| ` ` | Baobab                        | Cypress                       |\n| --------------- |-------------------------------|-------------------------------|\n| Date | Dec 19, 2023 10:05:01 / UTC+9 | Mar 04, 2024 10:25:34 / UTC+9 |\n| Block number  | `#141,367,000`                | `#147,534,000`                |\n\n### Summary\nRandao hardfork was introduced with the [v1.12.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.12.0). It implements an optional hardfork implementing the Randao on-chain randomness according to [KIP-113](https://kips.kaia.io/KIPs/kip-113), [KIP-114](https://kips.kaia.io/KIPs/kip-114), [KIP-146](https://kips.kaia.io/KIPs/kip-146).\n\n## Cancun\n| ` ` | Baobab                        | Cypress                       |\n| --------------- |-------------------------------|-------------------------------|\n| Date | Dec 19, 2023 10:05:01 / UTC+9 | Mar 04, 2024 10:25:34 / UTC+9 |\n| Block number  | `#141,367,000`                | `#147,534,000`                |\n\n### Summary\nEthereum's Cancun hardfork items were introduced with the [v1.12.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.12.0). For specific information, please see the release note. In addition, AccessList transaction type(introduced in [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)) became fully supported ([#1955](https://github.com/klaytn/klaytn/pull/1955)).  \n\n## Shanghai\n| ` ` | Baobab                        | Cypress                       |\n| --------------- |-------------------------------|-------------------------------|\n| Date | Apr 28, 2023 10:30:31 / UTC+9 | Oct 16, 2023 10:50:24 / UTC+9 |\n| Block number  | `#131,608,000`                | `#135,456,000`                |\n\n### Summary\nEthereum's Shanghai hardfork items were introduced with the [v1.11.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.11.0). It includes the features equivalent to Ethereum Shanghai hardfork([#1883](https://github.com/klaytn/klaytn/pull/1883), [#1861](https://github.com/klaytn/klaytn/pull/1861), [#1888](https://github.com/klaytn/klaytn/pull/1888)) and fixed to allow a new contract account to be created by overwriting an EOA ([#1904](https://github.com/klaytn/klaytn/pull/1904)).\n\n## KIP-103 <a id=\"kip-103\"></a>\n\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Apr 06, 2023 04:25:03 / UTC+9 | Apr 17, 2023 01:24:48 / UTC+9 |\n| Block number  | `#119,145,600`  | `#119,750,400` |\n\n### Summary\n\nKIP-103 hardfork was introduced with the [v1.10.2 release](https://github.com/klaytn/klaytn/releases/tag/v1.10.2). It includes an implementation of [KIP-103](https://kips.kaia.io/KIPs/kip-103) that is a technical specification of treasury rebalance([KGP-6](https://govforum.klaytn.foundation/t/kgp-6-proposal-to-establish-a-sustainable-and-verifiable-klay-token-economy/157)).\n\n\n### Treasury Rebalance <a id=\"treasury-rebalance\"></a>\n\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| TreasuryRebalance contract address | 0xD5ad6D61Dd87EdabE2332607C328f5cc96aeCB95 | 0xD5ad6D61Dd87EdabE2332607C328f5cc96aeCB95 |\n| KCV address | 0xaa8d19a5e17e9e1bA693f13aB0E079d274a7e51E | 0x4f04251064274252D27D4af55BC85b68B3adD992 |\n| KFF address | 0x8B537f5BC7d176a94D7bF63BeFB81586EB3D1c0E | 0x85D82D811743b4B8F3c48F3e48A1664d1FfC2C10 |\n| KCF address | 0x47E3DbB8c1602BdB0DAeeE89Ce59452c4746CA1C | 0xdd4C8d805fC110369D3B148a6692F283ffBDCcd3 |\n\n\n## Kore <a id=\"kore\"></a>\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Jan 10, 2023 10:20:50 / UTC+9 | Apr 17, 2023 01:24:48 / UTC+9 |\n| Block number  | `#111,736,800`  | `#119,750,400` |\n\n### Summary\n\nKore hardfork was introduced with the [v1.10.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.10.0). It is an implementation of the on-chain governance voting method ([KIP-81](https://kips.kaia.io/KIPs/kip-81)), a new GC reward structure ([KIP-82](https://kips.kaia.io/KIPs/kip-82)), and EVM changes.\n\n\n## Magma <a id=\"magma\"></a>\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Aug 08, 2022 11:01:20 / UTC+9 | Aug 29, 2022 11:51:00 / UTC+9 |\n| Block number  | `#98,347,376`  | `#99,841,497` |\n\n### Summary\n\nMagma hardfork was introduced with the [v1.9.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.9.0). It includes dynamic gas fee pricing mechanism, [#1493](https://github.com/klaytn/klaytn/pull/1493)) and is an implementation of [KIP-71](https://kips.kaia.io/KIPs/kip-71).\n\n## EthTxType <a id=\"eth-tx-type\"></a>\n\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Mar 27, 2022 23:56:31 / UTC+9 | Mar 31, 2022 12:14:39 / UTC+9 |\n| Block number  | `#86,513,895`  | `#86,816,005` |\n\n### Summary\n\nEthereum's EthTxType changes were introduced with the [v1.8.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.8.0). It includes new transactions types to support Ethereum transaction types: TxTypeEthereumAccessListand TxTypeEthereumDynamicFee ([#1142](https://github.com/klaytn/klaytn/pull/1142), [#1158](https://github.com/klaytn/klaytn/pull/1158)).\n\n## London EVM <a id=\"london-evm\"></a>\n\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Jan 14, 2022 11:02:55 / UTC+9 | Mar 31, 2022 12:14:39 / UTC+9 |\n| Block number  | `#80,295,291`  | `#86,816,005` |\n\n### Summary\n\nEthereum's London hard fork items were introduced with the [v1.7.3 release](https://github.com/klaytn/klaytn/releases/tag/v1.7.3), which includes BaseFee EVM opcode for Ethereum London EVM compatibility ([#1065](https://github.com/klaytn/klaytn/pull/1065), [#1066](https://github.com/klaytn/klaytn/pull/1066), [#1096](https://github.com/klaytn/klaytn/pull/1096)).\n\n## Istanbul EVM <a id=\"istanbul-evm\"></a>\n\n| ` ` | Baobab | Cypress |\n| --------------- | --------------- | --------------- |\n| Date | Nov 17, 2021 23:42:13 / UTC+9 |  Mar 31, 2022 12:14:39 / UTC+ |\n| Block number  | `#75,373,312`  | `#86,816,005` |\n\n### Summary\n\nEthereum's Istanbul hard fork items were introduced with the [v1.7.0 release](https://github.com/klaytn/klaytn/releases/tag/v1.7.0), which includes changes from [EIP-152](https://eips.ethereum.org/EIPS/eip-152), [EIP-1108](https://eips.ethereum.org/EIPS/eip-1108), [EIP-1344](https://eips.ethereum.org/EIPS/eip-1344), [EIP-1844](https://eips.ethereum.org/EIPS/eip-1844), and [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200).\n",
    "Current Website Url is https://docs.kaia.io/misc/opensource. # Open Source\n\nThe virtue of public blockchains is that they share each other’s code and seek the development of general blockchain technology. Kaia is developed by forking Ethereum source code and referred various open source project technologies. Therefore, Kaia also tries to repay the blockchain ecosystem by open-sourcing code again. Especially, because lots of efforts were put in to achieve 1 second block generation time, the projects that are interested in reducing latency will make a good reference out of it.\n\nThe participation of the developer community at public blockchain is one of the important factors for success. Since the design of Kaia, Ethereum that is the strongest developer community is selected as base code considering this, and by protecting solidity compatibility as smart contract language, it is supporting original blockchain engineers to transfer to Kaia easily. Also, Ethereum Toolkits also tried to protect compatibility so that it is able to drive at Kaia with a little bit of modification. In contrast, tools developed for Kaia can also be used at Ethereum with a little bit of modification. Through this, we hope there are more opportunities for two platforms’ community to exchange with each other.\n\nBy open sourcing Kaia, we opened Kaia development to the community. So, all engineers can participate in Kaia development in various formats from translation, bug reporting to the code commit. We provide the Kaia Ecosystem Fund (KEF) support program to encourage the participation of open source developers. KEF is the program that offers for Kaia development at the community and receives funding to reach this. This makes financial support to be rewarded for enthusiastic participants.",
    "Current Website Url is https://docs.kaia.io/misc/operation/aws-ami. # Use AWS AMIs\n\n:::info[Service No Longer Updated]\n\nThe AWS AMI service for Kaia endpoint nodes is no longer being updated (last update: November 2024). While existing AMIs (dated November 2024) are still available for use, please note that they may require additional synchronization time to catch up with the current blockchain state. For alternative setup methods, such as using chaindata snapshots or performing full synchronization, please refer to [Block Synchronization](../../learn/storage/block-sync).\n\n:::\n\nKaia offers an AWS AMI ([Amazon Machine Image](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html)) for Kaia endpoint nodes (EN). These AMIs are pre-installed with both the EN software and the chaindata, enabling users to quickly and conveniently launch a fully operational node. With Kaia's AMI, setting up a new endpoint node on demand becomes seamless, allowing for simplifying the process of joining the Kaia network.\n\n## Why use AMI\n\nAMI offers a convenient way to launch a new Kaia EN. Also, as its chaindata is already set, you don't need extra disk storage to download and extract compressed chaindata. Additionally, using AMI is the only option to operate a new EN without full sync for some sync modes, such as archive mode or full mode without state migration (we only provide snapshot download for pruned chaindata).\n\n## Types of EN AMIs\n\nKaia provides different types of AMIs, whose chaindata has been synced with different modes.\n\n| **Type** | **Sync Mode** | **AMI Name** |\n|----------|---------------|--------------|\n| full             | Full mode                                         | `kaia-xxxx-clean-full-en-xxxx` |\n| pruning          | Full mode, live pruning enabled                   | `kaia-xxxx-clean-pruning-en-xxxx` |\n| state-migrated   | Full mode, state migrated (or state batch pruned) | `kaia-xxxx-clean-en-xxxx`|\n| archive          | Archive mode                                      | `kaia-xxxx-clean-archive-en-xxxx` |\n\nKaia provides these 4 types of AMIs for mainnet. There are also AMIs for Kairos except for the `full` type.\n\nSee [State Batch Pruning](../../../learn/storage/state-pruning/#state-batch-pruning-state-migration) for more details on state migrated chaindata.\nSee [Block Synchronization](../../learn/storage/block-sync) for more details on block sync modes.\n\n\n## Launch new EC2 instance with AMI in Amazon console\n\nWhen launching a new EC2 instance in the AWS console, you should select an AMI. Search for `kaia-mainnet` in the AMI search bar.\n\n![AMI search bar](/img/misc/ami_search.png)\n\nThe page will bring you to the search results. Click \"Community AMIs\" tab in the search result page and select the AMI you want to use in the list.\n\n![AMI search result](/img/misc/ami_select.png)\n\n### Allow inbound connections\n\nWhen launching a new EC2 instance in the AWS console, you can either create a new security group for the instance or choose existing security group. Either way, you must add inbound rules to allow connections to the ports that Kaia nodes use to communicate each other.\n\nNavigate to the EC2 instance page in the AWS console, find associated security groups in the \"Security\" tab. You should add inbound rules for port 32323-32324.\n\n| IP version | Type        | Protocol | Port range     | Source   |\n|------------|-------------|----------|----------------|----------|\n| IPv4       | Custom TCP  | TCP      | 32323 - 32324  | 0.0.0.0/0|\n| IPv4       | Custom UDP  | UDP      | 32323          | 0.0.0.0/0|\n\n## Post-Launch Instance Preparation and Setup\n\n### Warmup Amazon EBS volumes\n\nThe Amazon EBS volumes that were created from snapshots (AMI would be one case), the storage blocks must be pulled down from Amazon S3 and written to the volume before they can be accessed. This causes a significant overhead for disk operations the first time each block is accessed. Volume performance is recovered after all blocks have been downloaded and written to the volume. For more details, see [Initialize Amazon EBS volumes](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-initialize.html).\n\nIn order to get our volume ready, we can run a task to read all blocks.\n\n```bash\n$ sudo yum install -y fio\n$ sudo fio --filename=/dev/nvme1n1 --rw=read --bs=128k --iodepth=32 --ioengine=libaio --direct=1 --name=volume-initialize\n```\n\n:::note\n\nThis task to warmup Amazon EBS volume would take a long time depending on the data size. Refer to `fio` output for the ETA.\n\n:::\n\n### Check `kend.conf` configuration\n\nBefore starting the node, check `NETWORK` and `NETWORK_ID` fields in the configuration file `kend.conf`. The `kend.conf` file is located in `/etc/kend/conf/kend.conf`.\n\nFor Mainnet, the `NETWORK` field should be `mainnet`. For Kairos, the `NETWORK` field should be `kairos`.\n```\n# for Mainnet\nNETWORK=mainnet\n\n# for Kairos\nNETWORK=kairos\n```\n\nNote that `NETWORK_ID` is only used for private network. Thus make sure not to set `NETWORK_ID` for Mainnet or Kairos.\n\nFor more details on `kend.conf`, see [Configuration](configuration).\n\n### Start `kend` service\n\nIn the EC2 instance, Kaia CLI client and the chaindata are installed. Also, `kend`, the script to start/terminate EN, is installed as a service. You can check the `kend` service's status by the following command.\n\n```bash\n$ sudo service kend status\n```\n\nIf the service is not running, try to restart it.\n\n```bash\n$ sudo service kend restart\n```\n\nIf the service restarted and the EN has started successfully, you can check its logs in the path `/var/kend/logs/kend.out`.\n\n```bash\n$ tail -f /var/kend/logs/kend.out\n```\n\nKaia provides a CLI client `ken console`. You can interact with the Kaia node using the `ken console` via multiple endpoints, and one option is to use IPC (inter-process communication). The IPC file `klay.ipc` is located in the `DATA_DIR` path on an EN, in our case `/var/kend/data`. Thus in order to use `ken console`:\n\n```bash\n$ sudo ken attach --datadir /var/kend/data\nWelcome to the Kaia JavaScript console!\n\n instance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n  datadir: /var/kend/data\n  modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n\n>\n```\n\n### Wait for block sync\n\nSince the AMI was created hours ago, we need some time to sync to the latest block. You can check the currently synced block number and the sync progress in the `ken console`.\n\n```js\n> klay.blockNumber\n165227166\n> klay.syncing\n{\n  currentBlock: 165227166,\n  highestBlock: 165357203,\n  knownStates: 0,\n  pulledStates: 0,\n  startingBlock: 165222272\n}\n```\n\nWhen the block sync is done, querying sync progress should return `false`.\n\n```js\n> klay.syncing\nfalse\n```\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/chaindata-change. # Change Chaindata\n\nSee [Use Chaindata Snapshots](/misc/operation/chaindata-snapshot/).\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/chaindata-migration. # Migrate Chaindata\n\nSee [State Migration Guide](/misc/operation/node-pruning/#how-to-perform-batch-pruning).\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/chaindata-snapshot. # Use Chaindata Snapshots\n\nYou can start a node from an already-synced database called a chaindata snapshot. A chaindata snapshot is a compressed Kaia data directory.\n\n:::note\n\nThis saves time to [Full Sync](../../learn/storage/block-sync#full-sync) the whole blockchain, allowing you to relatively quickly start a new node or recover from corrupt database.\n\n:::\n\n## Prepare Data Directory\n\nBefore start, prepare enough disk space to accommodate both compressed file and uncompressed directory.\n\n- If you're going to start from an empty machine, simply create a datadir.\n  ```sh\n  sudo mkdir /var/kend\n  ```\n- If you're going to swap the existing directory, create a temporary directory.\n  - Option 1. Mount a new disk (Recommended for optimal disk utilization)\n    ```sh\n    $ lsblk\n    NAME          MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\n    nvme2n1       259:0    0  3500G  0 disk /var/kend2 # New disk at temporary path\n    nvme1n1       259:0    0  4000G  0 disk /var/kcnd  # Old disk at production path\n    nvme0n1       259:2    0    8G  0 disk\n    ├─nvme0n1p1   259:3    0    8G  0 part /\n    └─nvme0n1p128 259:4    0    1M  0 part\n\n    ```\n  - Option 2. Use existing disk\n    ```sh\n    sudo mkdir /var/kend2/data\n    ```\n\n## Download the File\n\nDownload a compressed file to the new directory. URLs can be found at the bottom of this page.\n\n- Option 1. curl\n  ```sh\n  curl -O https://storage.googleapis.com/kaia-chaindata/mainnet/kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz\n  ```\n- Option 2. wget\n  ```sh\n  wget https://storage.googleapis.com/kaia-chaindata/mainnet/kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz\n  ```\n- Option 3. axel\n  ```sh\n  # Amazon Linux installation example\n  sudo amazon-linux-extras install epel\n  sudo yum install axel pigz\n\n  # Multi-threaded download and print status bar\n  axel -n8 https://storage.googleapis.com/kaia-chaindata/mainnet/kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz | awk -W interactive '$0~/\\[/{printf \"%s'$'\\r''\", $0}'\n  ```\n- Option 4. aria2\n  ```sh\n  # Rocky Linux installation example\n  sudo yum install epel-release aria2\n\n  # Lightweight, multi-connection download\n  aria2c https://storage.googleapis.com/kaia-chaindata/mainnet/kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz\n  ```\n\n## Decompress the File\n\n- Option 1. tar\n  ```sh\n  tar -xvf kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz\n  ```\n- Option 2. tar and pigz\n  ```sh\n  # Amazon Linux & Rocky Linux installation example\n  sudo yum install pigz\n\n  # Multi-threaded decompression\n  tar -I pigz -xvf kaia-mainnet-chaindata-xxxxxxxxxxxxxx.tar.gz\n  ```\n\n## Swap the data directory\n\n- First, stop the node.\n  - **IMPORTANT**: If you are running a consensus node (CN), make sure to remove the node from the Council.\n- Option 1. Swap the content at the same path\n  - If you mounted new disk, change the mount.\n    ```sh\n    umount /var/kend  # Old disk\n    umount /var/kend2 # New disk at temporary path\n    mount /dev/nvme2n1 /var/kend  # New disk at production path\n    ```\n  - If you used existing disk, rename the directory.\n    ```sh\n    mv /var/kend /var/kend_old  # Old data\n    mv /var/kend2 /var/kend     # New data\n    ```\n- Option 2. Change the path in the node configuraion\n  - Change `DATA_DIR` value in the `kend.conf` file.\n- Optionally delete old data and tar.gz file.\n- Finally, start the node.\n\n## Downloads\n\nFor efficiency, only batch pruned (state migrated) or live pruned database are provided. Read [Storage Optimization](../../learn/storage/state-pruning) for their concepts. If you want a full database without neither pruning, or even archive data, perform a fresh full sync from genesis.\n\n| network | sync options | download |\n|-|-|-|\n| mainnet | state migrated | https://packages.kaia.io/mainnet/chaindata/ |\n| mainnet | live pruning | https://packages.kaia.io/mainnet/pruning-chaindata/ |\n| kairos | state migrated | https://packages.kaia.io/kairos/chaindata/ |\n| kairos | live pruning | https://packages.kaia.io/kairos/pruning-chaindata/ |\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/configuration. # Configuration\n\nThis document explains the configurable properties of the node. Kaia node package ships with good defaults and requires very little configuration. If you changed any settings of a running node, you must restart the node to reflect the changes.\n\n## CN Configuration File location <a id=\"cn-configuration-file-location\"></a>\n\n* `kcnd.conf` for configuring the Consensus Node\n\nThe configuration file is located in the `conf` directory, whose default location depends on whether or not the installation is from an archive distribution \\(`tar.gz`\\) or a package distribution \\(RPM\\).\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/kcn-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kcnd/conf/`.\n\n## PN Configuration File location <a id=\"pn-configuration-file-location\"></a>\n\n* `kpnd.conf` for configuring the Proxy Node\n\nThe configuration file is located in the `conf` directory, whose default location depends on whether or not the installation is from an archive distribution \\(`tar.gz`\\) or a package distribution \\(RPM\\).\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/kpn-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kpnd/conf/`.\n\n## EN Configuration File location <a id=\"configuration-file-location\"></a>\n\n* `kend.conf` for configuring the Endpoint Node\n\nThe configuration file is located in the `conf` directory, whose default location depends on whether or not the installation is from an archive distribution \\(`tar.gz`\\) or a package distribution \\(RPM\\).\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/ken-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kend/conf/`.\n\n\n## Configuration File Format  <a id=\"configuration-file-format\"></a>\n\nCN and PN have the same configuration file format and the properties. \n\nBelow is a sample configuration file for the CN that participates in the mainnet and stores the blockchain data in the default location, which is `~/kcnd_home` with the archive distribution, `/var/kcnd/data` with the package distribution.\n\n```text\n# Configuration file for the kcnd\n\n# mainnet, kairos is only available if you don't specify NETWORK_ID.\nNETWORK=\"mainnet\"\n# if you specify NETWORK_ID, a private network is created.\nNETWORK_ID=\nPORT=32323\nSERVER_TYPE=\"fasthttp\"\nSYNCMODE=\"full\"\nVERBOSITY=3\nMAXCONNECTIONS=100\n# LDBCACHESIZE=10240\nREWARDBASE=\"0x0\"\n\n...\n\nDATA_DIR=\nLOG_DIR=$DATA_DIR/logs\n```\n\nThe recommended txpool sizes for CN are as follows. \n\n```text\nTXPOOL_EXEC_SLOTS_ALL=16384\nTXPOOL_NONEXEC_SLOTS_ALL=16384\nTXPOOL_EXEC_SLOTS_ACCOUNT=16384\nTXPOOL_NONEXEC_SLOTS_ACCOUNT=16384\n```\n\nThe recommended txpool sizes for PN are as follows.\n\n```text\nTXPOOL_EXEC_SLOTS_ALL=8192\nTXPOOL_NONEXEC_SLOTS_ALL=8192\nTXPOOL_EXEC_SLOTS_ACCOUNT=8192\nTXPOOL_NONEXEC_SLOTS_ACCOUNT=8192\n```\n\nThe recommended txpool sizes for EN are as follows.\n\n```text\nTXPOOL_EXEC_SLOTS_ALL=4096\nTXPOOL_NONEXEC_SLOTS_ALL=4096\nTXPOOL_EXEC_SLOTS_ACCOUNT=4096\nTXPOOL_NONEXEC_SLOTS_ACCOUNT=4096\n```\n\n## Properties <a id=\"properties\"></a>\n\nThe configuration file has the following configurable properties. CN and PN configuration files have the same properties except `REWARDBASE.`\n\n| Name | Description |\n| --- | --- |\n| NETWORK | Network name that this node will join.  This value is used when NETWORK_ID is not defined.  (\"mainnet\", \"kairos\") |\n| NETWORK_ID | Kaia network ID.  If you create a local private network, you will define the network ID for your own.  Following IDs are reserved for pre-configured networks. <br/>8217 : Mainnet <br/>1000 : Aspen test network <br/>1001 : Kairos test network |\n| PORT | P2P port. (Default: \"32323\") |\n| SERVER_TYPE | JSON RPC server type.  (\"http\", \"fasthttp\") |\n| SYNCMODE | Blockchain sync mode.  (\"fast\", \"full\") |\n| VERBOSITY | Logging verbosity.  (0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail) |\n| MAXCONNECTIONS | Maximum number of physical connections.  All single-channel peers can have up to MAXCONNECTIONS peers.  All multi-channel peers can have up to MAXCONNECTIONS/2 peers.  Network connection is disabled if it is set to 0. (Default: 10) |\n| LDBCACHESIZE | Size of in-memory cache in LevelDB (MiB). (Default : 768) |\n| REWARDBASE | Account address that will receive block consensus rewards. This property only applies to CN. |\n| TXPOOL_EXEC_SLOTS_ALL | Maximum number of executable transaction slots for all accounts. (Default: 4096) |\n| TXPOOL_NONEXEC_SLOTS_ALL | Maximum number of non-executable transaction slots for all accounts. (Default: 1024) |\n| TXPOOL_EXEC_SLOTS_ACCOUNT | Number of executable transaction slots guaranteed per account. (Default: 16) |\n| TXPOOL_NONEXEC_SLOTS_ACCOUNT | Maximum number of non-executable transaction slots guaranteed per account. (Default: 64) |\n| TXPOOL_LIFE_TIME | Maximum amount of time non-executable transactions is queued. (Default : 5m) |\n| RPC_ENABLE | Enable the HTTP-RPC server if it is set to 1. |\n| RPC_API | Comma-separated list of APIs offered over the HTTP-RPC interface.  (admin, debug, klay, miner, net, personal, rpc, txpool, web3) |\n| RPC_PORT | HTTP-RPC server listening port. (Default: \"8551\") |\n| RPC_ADDR | HTTP-RPC server listening interface. (Default: \"localhost\") |\n| RPC_CORSDOMAIN | Comma-separated list of domains from which to accept cross-origin requests (browser enforced) |\n| RPC_VHOSTS | Comma-separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (Default: {\"localhost\"}) |\n| WS_ENABLE | Enable the WS-RPC server if it is set to 1. |\n| WS_API | APIs offered over the WS-RPC interface.  (admin, debug, klay, miner, net, personal, rpc, txpool, web3) |\n| WS_ADDR | WS-RPC server listening interface. |\n| WS_PORT | WS-RPC server listening port. (Default : \"8552\") |\n| WS_ORIGINS | Origins from which to accept websockets requests. (Default: \"localhost\") |\n| AUTO_RESTART | Restart the process when the current block has not been updated for `autorestart.timeout` (e.g., 60s, 10m and 1h) if it is set to 1. |\n| METRICS | Enable metrics collection and reporting if it is set to 1. |\n| PROMETHEUS | Enable prometheus exporter if it is set to 1. |\n| DB_NO_PARALLEL_WRITE | Disable parallel writes of block data to persistent database if it is set to 1. |\n| MULTICHANNEL | Create a dedicated channel for block propagation if it is set to 1. |\n| SUBPORT | Listening sub port number if multichannel option is enabled. (Default : \"32324\") |\n| NO_DISCOVER | Turn off the discovery option if it is set to 1. |\n| BOOTNODES | Comma-separated kni addresses of bootstrap nodes. |\n| ADDITIONAL | For additional command-line options. e.g) --txpool.nolocals |\n| DATA_DIR | Kaia blockchain data folder path. |\n| LOG_DIR | Log folder path. |\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/kaia-command. # Frequently Used Commands\n\n## How to find the Kaia Directory (Normally “Kaia DIR”)\n\n---\nYou can check Kaia directory at `kcn` or `kpn` config. Config file is located under `/etc/kcnd/conf` or `/etc/kpnd/conf`.\n\n```bash\ncat /etc/kcnd/conf/kcnd.conf (or /etc/kpnd/conf/kpnd.conf)\n\n# Find DATA_DIR and LOG_DIR path as below example\nDATA_DIR=/var/kcnd/data/\nLOG_DIR=/var/kcnd/logs/\n```\n\n## How to connect to Kaia Console\n\n---\nConnect to Kaia API to check node and network status.\n\n```bash\n# execute the command below with the Kaia DATA_DIR Path\n$ sudo kcn attach --datadir <DATA_DIR>\n> \n```\n\n## Useful APIs\n\n```bash\n# Check current block Number\n  > kaia.blockNumber\n\n# Check my kni address\n  > admin.nodeInfo\n\n# Check my dode address\n  > governance.nodeAddress\n\n# Check other connected nodes\n  > admin.peers\n\n# Add or remove nodes\n  > admin.addPeer(\"kni\")\n  > admin.removePeer(\"kni\")\n```\n\n## How to get the API Result only\n\n```jsx\n# execute the command below with the Kaia DATA_DIR Path\n$ sudo kcn attach --exec <statement> --datadir <DATA_DIR>\n\ne.g.\n# Check my dode address\n$ sudo kcn attach --exec \"governance.nodeAddress\" --datadir /path/to/datadir\n\"0xda23978e6e354fbf25dd87aaf1d1bb4ed112753f\"\n```\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/log-management. # Log operation\n\n## Configure Log Rotation\n\nYou can enable the log rotation by setting the `--log.rotate` flag, and configure the log rotation settings by the following flags.\n- `--log.rotate`: By setting this flag, it enables the log rotation and applies the other log rotation options\n- `--log.maxsize`: Specifies the file size in MB that triggers backup file creation\n- `--log.maxbackups`: Determines the maximum number of backup files that can be stored. Once this limit is reached, older logs will be deleted.\n- `--log.maxage`: Represents the maximum number of days to retain a log file. For example, if set to 30, a backup file will be deleted after 30 days.\n- `--log.compress`: By setting this flag, it compresses the backup logs in gz format.\n\nExample\n```\n./bin/ken ... --log.rotate --log.maxsize 100 --log.maxbackups 10 --log.maxage 30 --log.compress\n```\nYou can also enable and configure the log rotation by setting following options in configuration file (e.g., `kend.conf`).\n```\n# log rotation related options\nLOG_ROTATE=1 # setting 1 to enable the log rotation related options\nLOG_MAXSIZE=100 # the unit is MB\nLOG_MAXBACKUPS=10\nLOG_MAXAGE=30 # maximum number of days to retain a log file\nLOG_COMPRESS=1 # setting 1 to compress the backup logs in gz format\n```\nIt is recommended to download and use the package which version is v1.0.0 or higher. You can download it in Binaries section of the release note(e.g., [v1.11.0 release note](https://github.com/klaytn/klaytn/releases/tag/v1.11.0)). Make sure next three files are v1.0.0 or higher: configuration file, daemon, and binary. Otherwise, it won't work.\n\n## Normal Log Status\n\n| Type                                        | Message                                                                                                          | Description                                                                                                                                                                                                                                                                                                                       |     |\n| ------------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --- |\n| Error                                       | FastWebsocketHandler fail to upgrade message                                                                     | Version issue of WebSocket connection                                                                                                                                                                                                                                                                                             | low |\n| Error                                       | invalid index of the proposer                                                                                    | The error that occurs when EN receives transactions from CN                                                                                                                                                                                                                                                                       | low |\n| WARN                                        | ProtocolManager failed to read msg                                                                               |                                                                                                                                                                                                                                                                                                                                   | low |\n| WARN                                        | Failed doConnTypeHandshake                                                                                       |                                                                                                                                                                                                                                                                                                                                   | low |\n| ERRORErro                                   | Protocol istanbul/64 failed                                                                                      | Peer disconnected                                                                                                                                                                                                                                                                                                                 | low |\n| Error                                       | Fasthttp Err                                                                                                     | Error when serving connection: read timeout with nothing read                                                                                                                                                                                                                                                                     | low |\n| Error                                       | Fasthttp Err                                                                                                     | Error when serving connection: error when reading request headers: cannot find http request method in \"\\x16…                                                                                                                                                                                                                      | low |\n|  Warn                                       | hash=b1b26c…6b220a err=\"insufficient balance for transfer\"                                                       | This log occurs when the transaction processed (usually mining) cannot be executed due to insufficient balance in the \"from account”(Theoretically, it occurs when the balance was sufficient at the time when the transaction was created and entered the txpool, but there was no balance at the time of the actual execution.) | low |\n| ERROR                                       | ERROR\\[06/06,23:23:46 Z] \\[7] decode anchor payload err=\"rlp: expected input list for types.AnchoringDataLegacy\" | Any type of value may be included in the data field of Anchoring tx. However, an error log is the output to the node when an incorrect type of value is entered                                                                                                                                                                   |     |\n| Proposer : `Successfully wrote mined block` |                                                                                                                  |                                                                                                                                                                                                                                                                                                                                   |     |\n\nNon Proposer `Inserted a new block`\n\n## Log Level Change (0\\~5)\n\nGo to Kaia Console\n\n```\n#default Value\n> debug.verbosity(3)\n# hight detail logs Value\n> debug.verbosity(5)\n# No Logs Value\n> debug.verbosity(0)\n\n# Default Value for Blockchain log\n> debug.vmodule(\"blockchain=3\")\n# High detail Value for Blockchain Log\n> debug.vmodule(\"blockchain=5\")\n\n```\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/monitoring-setup. # Configure Node Monitoring\n\nThis guide explains how to set up Prometheus and Grafana to monitor your Kaia node.\n\n## 1\\. Metric Configuration in Kaia\n\nKaia provides the following flags for metric export:\n\n* `--metric`: Enables metric recording. This flag is typically used in conjunction with the `--prometheus` flag.  \n* `--prometheus`: Enables exporting recorded metrics to a Prometheus server. This flag is typically used in conjunction with the `--metric` flag.  \n* `--prometheusport`: Specifies the port for Prometheus metrics. Defaults to `61001`.\n\nTo enable metrics and Prometheus exporting, set both `METRICS` and `PROMETHEUS` to `1` in your `.conf` file:\n\n```conf\nMETRICS=1\nPROMETHEUS=1\n```\n\n## 2\\. Setting up Prometheus\n\n[Prometheus](https://prometheus.io/) acts as the central system for monitoring, providing robust data mining capabilities to extract real-time data from your nodes and archive it.\n\n:::note[Prometheus Hardware Requirements]\n\nBefore setting up Prometheus, ensure your system meets the following hardware requirements:\n\n- **Processor:** At least 2 CPUs  \n- **Memory:** Minimum of 4 GB RAM  \n- **Storage:** At least 20 GB of free disk space\n\n:::\n\n### 2.1 Installing Prometheus\n\nThe following steps outline the manual installation process for Prometheus. Choose your operating system for specific instructions. For more information about Prometheus installation, refer to the [official Prometheus documentation](https://prometheus.io/docs/prometheus/latest/getting_started/).\n\n1. Download the latest Prometheus release suitable for your architecture (e.g., darwin-amd64) from the official Prometheus download page. This guide uses version 2.53.3 as an example.\n\n```bash\ncurl -LO https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.darwin-arm64.tar.gz\n```\n\n```bash\nwget https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.linux-amd64.tar.gz\n```\n\n2. Extract the downloaded archive and install binaries by moving them to `/usr/local/bin/`:\n\n```bash\ntar xvfz prometheus-2.53.3.darwin-arm64.tar.gz\nmv prometheus-2.53.3.darwin-arm64/prometheus /usr/local/bin/\nmv prometheus-2.53.3.darwin-arm64/promtool /usr/local/bin/\n```\n\n```bash\nwget https://github.com/prometheus/prometheus/releases/download/v2.53.3/prometheus-2.53.3.linux-amd64.tar.gz\ntar xvfz prometheus-2.53.3.linux-amd64.tar.gz\nmv prometheus-2.53.3.linux-amd64/prometheus /usr/local/bin/\nmv prometheus-2.53.3.linux-amd64/promtool /usr/local/bin/\n```\n\n3. Remove the downloaded archive and extracted directory:\n\n```bash\nrm -rf prometheus-2.53.3.darwin-arm64.tar.gz prometheus-2.53.3.darwin-amd64\n```\n\n```bash\nrm -rf prometheus-2.43.0.linux-amd64.tar.gz prometheus-2.43.0.linux-amd64\n```\n\n4. Add Prometheus to your `PATH` environment variable to access Prometheus from any terminal session.\n\n```bash\necho \"export PATH=\\\"\\$HOME/monitoring/prometheus:\\$PATH\\\"\" >> ~/.bashrc\nsource ~/.bashrc\n# This assumes that a prometheus directory already exists in the HOME directory. If not, make a new one (mkdir -p  $HOME/monitoring/prometheus).\n```\n\n### 2.2 Configuring Prometheus\n\nPrometheus needs to be configured to scrape metrics from your Kaia nodes.\n\n:::info\\[Prometheus Configuration\\]\n\nThe `prometheus.yml` file configures Prometheus.  The key sections are:\n\n* **`global`**:  Sets global configuration parameters like `evaluation_interval` (how often Prometheus evaluates rules) and `scrape_interval` (how often Prometheus scrapes targets).  15 seconds is a reasonable starting point for both, but adjust based on your needs and block time.  \n    \n* **`scrape_configs`**: Defines the targets Prometheus monitors.  The `job_name` identifies the target group.  `static_configs` lists the target addresses.  Replace `<ip>` with the IP address of your Kaia node and ensure the port (`61001` by default) is correctly configured.\n\nFor more advanced configurations, refer to the [Prometheus documentation](https://prometheus.io/docs/prometheus/latest/configuration/configuration/).\n\n:::\n\n1. Open the `prometheus.yml` file located at `prometheus/prometheus.yml` in a text editor.  \n     \n2. Ensure the `scrape_configs` section includes your Kaia nodes. Below is an example configuration:\n\n```yaml\nglobal:\n  evaluation_interval: 15s\n  scrape_interval: 15s\n\nscrape_configs:\n- job_name: klaytn\n  static_configs:\n  - targets:  #Replace `192.168.1.100` and `192.168.1.101` with the actual IP addresses of your Kaia nodes.\n      - \"192.168.1.100:61001\"\n      - \"192.168.1.101:61001\"\n      ...\n```\n\n3. Use `promtool` to check the configuration file for any syntax errors:\n\n```bash\npromtool check config prometheus/prometheus.yml\n```\n\n4. Start Prometheus with your configuration file.\n\n```bash\nprometheus --config.file=prometheus/prometheus.yml\n```\n\n### 2.3 Setting up Prometheus Using Macro Script (macOS)\n\nThis script automates the Prometheus installation and configuration process on macOS. Adapt it for other Prometheus versions and operating systems as needed.\n\n```sh\nrm -rf prometheus\n\necho \"Installing Prometheus...\"\ncurl -LO https://github.com/prometheus/prometheus/releases/download/v2.43.0/prometheus-2.43.0.darwin-arm64.tar.gz\ntar xvfz prometheus-2.43.0.darwin-arm64.tar.gz > /dev/null 2>&1 && mv prometheus-2.43.0.darwin-arm64 prometheus && rm -rf prometheus-2.43.0.darwin-arm64 && rm -rf prometheus-2.43.0.darwin-arm64.tar.gz\necho \"export PATH=\\\"$HOMEDIR/monitoring/prometheus:\\$PATH\\\"\" >> ~/.bashrc && source ~/.bashrc\n\n# Generate Prometheus config file (prometheus.yml)\nprintf \"%s\\n\" \"global:\" \\\n              \"  evaluation_interval: 15s\" \\\n              \"  scrape_interval: 15s\" \\\n              \"\" \\\n              \"scrape_configs:\" \\\n              \"- job_name: klaytn\" \\\n              \"  static_configs:\" \\\n              \"  - targets:\" > prometheus/prometheus.yml\n\n# Append target configurations for multiple nodes\nfor (( i=0; i<NUMOFNODE; i++ ))\ndo\n  # Replace <ip> and <port> with the actual IP address and port (61001) for each node\n  printf \"    - \\\"<ip>:%d\\\"\\n\" <port> >> prometheus/prometheus.yml\ndone\n```\n\n## 3\\. Setting up Grafana\n\nGrafana allows you to visualize the metrics collected by Prometheus through customizable dashboards.\n\n:::note[Grafana System Requirements]\n\nBefore setting up Grafana, ensure your system meets the minimum hardware and software requirements from the [official Grafana documentation](https://grafana.com/docs/grafana/latest/setup-grafana/installation/).\n\n:::\n\n### 3.1 Installing Grafana\n\nDownload and install Grafana using the appropriate method for your operating system. For example, you can install Grafana [on macOS using Hombrew](https://grafana.com/docs/grafana/latest/setup-grafana/installation/mac/) (`brew install grafana`). See the [official Grafana installation guide](https://grafana.com/docs/grafana/latest/setup-grafana/installation/) for detailed instructions.\n\n### 3.2 Configuring Grafana\n\nSet up Grafana to visualize the metrics collected by Prometheus.\n\n1. Start Grafana Server.\n\n```bash\n# macOS using Homebrew\nbrew services start grafana\n```\n\nFor other operating systems, refer to the [official Grafana documentation](https://grafana.com/docs/grafana/latest/setup-grafana/start-restart-grafana/).\n\n2. Open a web browser and navigate to `http://localhost:3000`. Log in using the default credentials (admin/admin).  \n     \n3. Add Prometheus as a Data Source.  \n     \n   - Navigate to **Cofiguration** -> **Data Sources**.  \n   - Click on **Add data source**.  \n   - Select **Prometheus** as the type.  \n   - Set the **URL** to `http://localhost:9090` (modify if Prometheus is on a different server).  \n   - Click **Save & Test** to verify the connection.\n\n4. Add a Kaia dashboard and add a panel to visualize Kaia block number.  \n   - [Create a new dashboard](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/create-dashboard/) or navigate to an existing one.  \n   - Click **Edit** in the top-right corner, click **Add** in the dashboard header, and select **Visualization** in the drop-down to add a panel.  \n   - Under **Query**:\n     1. Select your Prometheus as **Data source**.\n     2. Enter `klaytn_blockchain_head_blocknumber` in the **Metric** field.\n     3. In **Options**, select **Custom** from the **Legend** dropdown and enter `{{instance}}` as the custom legend format.  \n   - Click **Apply** to save the panel to your dashboard.\n\n\n:::note[Additional Kaia Dashboards]\n\nFor a complete pre-configured dashboard and automated provisioning setup, refer to the [klaytn-deploy repository](https://github.com/klaytn/klaytn-deploy/tree/main/grafana). This repository contains JSON files for pre-built dashboards and configuration files for provisioning data sources.\n\n:::\n\n### 3.3 Setting up Grafana Using Macro Script (macOS)\n\nThis script automates the Grafana installation process on macOS. Adapt it for other Grafana versions and operating systems as needed.\n\n```sh\n# Remove any existing Grafana installation\nrm -rf grafana\n\n# Install Grafana\necho \"Installing Grafana...\"\ncurl -O https://dl.grafana.com/enterprise/release/grafana-enterprise-8.4.5.darwin-arm64.tar.gz\ntar -zxvf grafana-enterprise-8.4.5.darwin-arm64.tar.gz > /dev/null 2>&1 && mv grafana-8.4.5 grafana && rm -rf grafana-enterprise-8.4.5.darwin-arm64.tar.gz\necho \"export PATH=\\\"$HOMEDIR/monitoring/grafana/bin:\\$PATH\\\"\" >> ~/.bashrc && source ~/.bashrc\n\n# Generate Grafana dashboard config file\nprintf \"%s\\n\" \"apiVersion: 1\" \\\n              \"providers:\" \\\n              \"- name: 'klaytn'\" \\\n              \"  folder: ''\" \\\n              \"  options:\" \\\n              \"    path: conf/provisioning/dashboards\" > grafana/conf/provisioning/dashboards/klaytn-dashboard.yml\n\n# Generate Grafana datasource config file\nprintf \"%s\\n\" \"datasources:\" \\\n              \"-  is_default: true \" \\\n              \"   name: 'klaytn'\" \\\n              \"   type: 'prometheus'\" \\\n              \"   url: 'http://localhost:9090'\" > grafana/conf/provisioning/datasources/klaytn.yml\n```\n\n```sh\n# Clone the klaytn-deploy repository if not already cloned\nif [ ! -d \"klaytn-deploy\" ]; then\n  echo \"Cloning klaytn-deploy repository...\"\n  git clone https://github.com/klaytn/klaytn-deploy.git\nfi\n\n# Copy Grafana configuration files from klaytn-deploy\ncp klaytn-deploy/grafana/*.json grafana/conf/provisioning/dashboards/\n```\n\n## 4\\. Access Services\n\nAfter installation and configuration, access Prometheus and Grafana interfaces to verify that everything is set up correctly.\n\n- **Prometheus Interface**  \n    \n  - **URL:** `http://localhost:9090`  \n  - **Verification:** Navigate to this URL in your browser. You should see the Prometheus web interface. Use the **Graph** tab to execute sample queries and ensure metrics are being scraped.\n\n\n- **Grafana Interface**  \n    \n  - **URL:** `http://localhost:3000`  \n  - **Default Credentials:**  \n    - **Username:** `admin`  \n    - **Password:** `admin`  \n  - **Verification:** Upon first login, you'll be prompted to change the default password. After logging in, ensure that the Prometheus data source is correctly configured and that the Kaia dashboard displays metrics.",
    "Current Website Url is https://docs.kaia.io/misc/operation/node-log. # Node Log\n\nThis page details some important or frequently asked logs from Kaia nodes.\nIf the Kaia log is modified or newly added/deleted, please edit this page as well.\n\nFor more detailed information about log types, you can refer to [log_modules.go](https://github.com/kaiachain/kaia/blob/dev/log/log_modules.go)\n\nIf you encounter any abnormal situation, please report it to the kaia team via [github](https://github.com/kaiachain/kaia/issues), [Kaia Forum](https://devforum.kaia.io/), or [Discord](https://discord.com/KaiaOfficial).\n\n## Error Logs\n\n| Log Type | Node Type | Log Message | Description | Suggested Guide |\n| :--- | :--- | :--- | :--- | :--- |\n| Blockchain | CN/PN/EN |########## BAD BLOCK #########Chain config: %v<br/><br/>Number: %vHash: 0x%x%v<br/><br/>Error: %v############################## | A bad block occurs when the received receipt and the execution result do not match. If a node stops with bad block log, it could be due to two reasons.  <br/>- Case 1. The configuration of the node is wrong such, as the binary version.  <br/>- Case 2. There’s a problem with the code. It is very likely that other nodes will also experience the same problem. | This error is critical, so if you see any bad block, please make an issue or report it to the Kaia GitHub repository. |\n| ConsensusIstanbulCore | CN/PN/EN | **Drop an empty message from timeout channel** | It means that the round change timer will expire. This error is printed if the timer closes accidentally. | The error may occur when the downloader is started.  check next log is also printed: `Block synchronisation started`. |\n| NetworksP2P | CN/PN/EN | **Protocol istanbul/64 failed** id=04680a827fa1b240 conn=staticdial err=\"write tcp 10.117.2.105:34396->10.117.2.27:32323: use of closed etwork connection\" <br/><br/>**Protocol istanbul/64 failed** err=\"shutting down\" | This log can be printed when the other node is disconnected. It is usually followed by `Disconnected a P2P Peer` log. | Check if the disconnected peer is reconnected again. If it is not reconnected, check the network status or peer connection [admin_peers](../../../references/json-rpc/admin/peers) |\n| NodeCN | CN | **fail to SendNewBlockHashes** err=\"write tcp 10.117.2.124:24108->10.117.2.108:32323: use of closed network connection\"  <br/><br/>**fail to SendNewBlockHashes** err=\"shutting down\" | same as `Protocol istanbul/64 failed` | same as `Protocol istanbul/64 failed` |\n| NodeCN | CN | **fail to SendNewBlock** peer=d35220eccdb0de7b err=\"shutting down\" | same as `Protocol istanbul/64 failed` | same as `Protocol istanbul/64 failed` | \n| NetworksRPC | EN (mostly) | **FastWebsocketHandler fail to upgrade message** error=\"websocket: version != 13\" | Version issue of WebSocket connection | The header of the request should contain `Sec-Websocket-Version` field with the value set at 13. You may not have used kaia rpc client. |\n\n## Warn Logs\n\n| Log Type | Node Type | Log Message | Description | Suggested Guide |\n| :--- | :--- | :--- | :--- | :--- |\n| Blockchain | CN/PN/EN | **Upgrade database version** from=N/A to=3 | It is logged at the beginning of the node start-up | You don't need to handle this. |\n| ConsensusIstanbulCore | CN | **[RC]** round= | Round change log is started with [RC] tag. | If the round does not end in one or two rounds and continues to go up, then the network status or peer connection should be analyzed first.  peer connection check api: [admin_peers](../../../references/json-rpc/admin/peers)|\n| ConsensusIstanbulCore | CN | **unexpected request**  address= state=\"Accept request\" seq=312 err=\"old message\" number=311 hash=d960ea…6df6de | A proposer mines a block, but it is turned out unexpected. In most cases, it is too old to be a new block. | You don't need to handle this. |\n| Node | CN/PN/EN | **Failed doConnTypeHandshake** addr=10.117.2.252:28516 conn=inbound conntype=-1 err=\"read tcp 10.117.2.78:32324->10.117.2.252:28516: i/o timeout | By dialing, the two P2P peers setup a connection. This log is printed if the setup fails. | Check if the disconnected peer is reconnected again. If not, check the network status or peer connection  peer connection check api: [admin_peers](../../../references/json-rpc/admin/peers) |\n| NodeCN | PN/EN | **Failed to filter bodies** peer=c02e4b4d471c56b9 lenTxs=1 | A node received the unwanted block header of body when fetching.  - lenTxs: non-requested number of txs | You don't need to handle this. |\n| Work | CN | **Transaction aborted due to time limit** hash= | The block execution time when mining should not exceed 250ms, so the last transaction can be aborted due to this time limit. | Confirm that the transaction enters the block. |\n| Work | CN | **Transaction failed, account skipped** hash=b1b26c...6b220a err=\"insufficient balance for transfer\"<br/><br/>Error(before v1.6.2)<br/>Warn(after v1.6.2) | When a transaction cannot be executed during mining due to an insufficient balance in the `from` account  (Theoretically, it occurs when the balance was sufficient at the time when the transaction was created and entered the txpool, but not at the actual execution time.) | Check if the `from` account is really out of balance. |\n\n## Info Logs\n\n`Info` log contains the additional information for you to know more about the node status, so you don't need to handle `Info` level log.\n\n| Log Type | Node Type | Log Message | Description |\n| :--- | :--- | :--- | :--- |\n| Blockchain | CN/PN/EN | **Regenerated local transaction journal** transactions=0 accounts=0 | When node is shut down, local txs are journaled to a file (default file name is transactions.rlp). When node is restarted with the journaled file, the local transactions can be regenerated based on the file.  - transactions: number of the regenerated local transaction.  - accounts: number of the regenerated accounts(==from) |\n| Blockchain | CN/PN/EN| **Inserted a new block** number=14 hash=13cbfc…f007fc txs=0 gas=0 elapsed=793.458µs  processTxs=167ns finalize=157.708µs validateState=7.542µs totalWrite=443.417µs trieWrite=256.667µs | If the node is not a proposer at that block, and the consensus is successful, the node have executed(==validates) the block. In other words, a block is inserted.  - gas: total gas spent during tx execution.  This field is commonly used when testing the network to find the used gas per block. |\n| NetworksP2P | CN/PN/EN | **[Dial] Add dial candidate from static nodes**  id=62a08a4b9f091c4b NodeType=0 ip=10.117.2.8 mainPort=32323 port=[32323] | A new P2P peer is connected, and it is a static node. A node added manually by using static-nodes.json or addpeer api is called static node. If it is a multichannel, it uses two ports. ex. [32323, 32324].  - id: dst peer id  - NodeType: dst node type(cn,pn,en,bn)  - ip: dst ip  - mainPort: dst TCP listening port number  - port: dst TCP listening port number including both the main port and sub port.|\n| NetworksP2P | CN/PN/EN | **Added a multichannel P2P Peer** id=28a6760472a078fb conn=staticdial peerID=28a6760472a078fb | A new peer is connected as a multichannel peer.  - id/peerID: my node’s peer id  - conn: type of connection  - inbound: somebody connects me  - staticdial: static connection, such as static-nodes.json or addPeer  - trusteddial: trusted connection, such as trust-nodes.json. it can be always reconnected and established even the number of connections exceeds max limit.|\n| NetworksP2P | CN/PN/EN | **Disconnected a multichannel P2P Peer** id=28a6760472a078fb conn=inbound    peerID=28a6760472a078fb peerName=Kaia/v1.7.3+acae89350c/darwin-arm64/go1.18.1 err=EOF | A multichannel peer is disconnected.  - peerName: It shows my node info  - err: The reason why the connection is disconnected |\n| NetworksP2P | CN/PN/EN | **ProtocolManager.processConsensusMsg closed** id=28a6760472a078fb conn=inbound    PeerName=Kaia/v1.7.3+acae89350c/darwin-arm64/go1.18.1 | When a P2P node is disconnected, the consensus message channel between them is closed, too. |\n| StorageStateDB | CN/PN/EN | **Persisted trie from memory database** blockNum=23460 updated nodes=4 updated nodes size=499.00B time=539.959µs  gcnodes=68  gcsize=10.55kB gctime=226.499µs  livenodes=245 livesize=37.80kB | This log is printed to inform you that trie db has been committed. Here, commit means flushing db change to the actual db.  A commit is made periodically.  - Case 1. If the node is a full node, trie commit is made for every 128 block.  - Case 2. If the node is an archive node, trie commit is made for every block.  Commit is made at next circumstances, too.  - , A commit is made when a node is shut down.  - A commit is made when memory size exceeds the cap.  Tip.  - gc stands for garbage collection. Here, garbage collection means flushing db writes of trie node change.  - A full node stores the information of every 128 cycle and the latest 128 blocks.  - Archive node stores the information of every block.|\n| Work | CN | **Commit new mining work** number=14 hash=438ef7…68ca7f txs=0 elapsed=605.375µs commitTime=184.708µs finalizeTime=414.375µs | Every CN mines a block in preparation for round change - number: block number - hash: block hash (it is not a final version)  - txs: number of transactions in a block - elapsed: total block mining time (commitTime + finalizeTime) - commitTime: transactions execution time in a block - finalizeTime: block finalize time  |\n| Work | CN | **Successfully sealed new block** number=14 hash=13cbfc…f007fc | [Only Proposer] Sealing a new block is successful. Sealing contains the next steps.  - Ibft consensus process for the block.  - Update timestamp and signatures of the block |\n| Work | CN | **Successfully wrote mined block** num=14 hash=13cbfc…f007fc txs=0 elapsed=617.709µs | [Only Proposer] If the node is a proposer, and consensus is succeed, the proposer needs to store the block execution result in the db. This log means the storing was successful. | \n| Work | CN | **Mining too far in the future** wait=1s | In order to maintain 1 second block creation period, the node sleeps for \"1s - previous block generation/propagation/execution time\".  - wait: how much time the node sleeps|\n| VM | CN/PN/EN | **Returning since the addr is not a program account** addr= | Somebody tries to call a non-existent contract.  Tip. In Kaia, program account is equivalent to contract account. |\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/node-profiling. # Profile Node Data\n\nProfiling is an essential tool for understanding and optimizing the performance of Kaia nodes. This tutorial will guide you through various profiling techniques available for Kaia node operators, leveraging Kaia's debug API and the `net/http/pprof` Go package.\n\n## Prerequisites\n\nBefore you begin, ensure that:\n\n- **Node Setup:** Your Kaia node is correctly installed and running.  \n    \n- **Access to Node Console:** You'll need to interact with the node either via [the node console](../../nodes/endpoint-node/ken-cli-commands#javascript-console).\n    \n- **Tools:** Go is installed on your system to use `go tool pprof` and `go tool trace`. You can verify by running:\n\n```bash\ngo version\n```\n\n## 1\\. Managing Profiling: How to Start, Stop, and Check Status\n\nKaia nodes provide a `debug` API that offers several profiling methods. You can interact with these methods via the node's console or through [JSON-RPC API calls](https://docs.kaia.io/references/json-rpc/debug/start-p-prof/).\n\n### 1.1 Starting the pprof HTTP Server\n\nThe pprof HTTP server allows you to collect and analyze profiling data efficiently.\n\n```bash\n# Start pprof server with default settings (localhost:6060)\n> debug.startPProf()\n\n# Start pprof server on a specific address and port\n> debug.startPProf(\"localhost\", 8080)\n```\n\n#### Accessing pprof Endpoints\n\nOnce the pprof server is running, access the profiling data at:\n\n- [http://localhost:6060/debug/pprof/](http://localhost:6060/debug/pprof/) — Overview of available profiles.  \n- [http://localhost:6060/memsize/](http://localhost:6060/memsize/) — Memory size reports.  \n- [http://localhost:6060/debug/vars](http://localhost:6060/debug/vars) — Exporter for Prometheus metrics.\n\n### 1.2 Stopping the pprof HTTP Server\n\n```bash\n> debug.stopPProf()\n```\n\n### 1.3 Checking if pprof is Running\n\n```bash\n> debug.isPProfRunning()\ntrue  # if running\nfalse # if not running\n```\n\n## 2\\. Collecting Profiles\n\nOnce the pprof server is running, you can collect various profiles by using several methods to analyze your node's performance.\n\n### 2.1 Collect Using Web Interface\n\nEnter the respective endpoints in your web browser to collect different profiles as shown in the following examples:\n\n**Collect heap profile**\n\n`http://localhost:6060/debug/pprof/heap`\n\n**Collect 30-second CPU profile**\n\n`http://localhost:6060/debug/pprof/profile?seconds=30`\n\n**Collect goroutine profile with debug=2**\n\n`http://localhost:6060/debug/pprof/goroutine?debug=2`\n\n### 2.2 Collect Using API Calls\n\nType the respective commands in the node console to collect or configure profiles as shown in the following examples:\n\n```bash\n# Collect 30-second CPU profile\n> debug.cpuProfile(\"cpu.profile\", 30)\n\n# Collect 30-second block profile\n> debug.blockProfile(\"block.profile\", 30)\n\n# Set mutex profiling fraction\n> debug.setMutexProfileFraction(1)\n```\n\n### 2.3 Collect Using `go tool pprof`\n\nIf you cannot access the pprof web interface, you can generate and analyze profiling results locally using `go tool pprof`.\n\n#### Identify Available Profile Types\n\nThe supported profiles include:\n\n- `allocs`: A sampling of all past memory allocations.  \n- `block`: Stack traces that led to blocking on synchronization primitives.  \n- `goroutine`: Stack traces of all current goroutines. Use `debug=2` as a query parameter to export in the same format as an unrecovered panic.  \n- `heap`: A sampling of memory allocations of live objects. You can specify the `gc` GET parameter to run garbage collection before taking the heap sample.  \n- `mutex`: Stack traces of holders of contended mutexes.  \n- `profile`: CPU profile. You can specify the duration in the `seconds` GET parameter. After you get the profile file, use the `go tool pprof` command to investigate the profile.  \n- `threadcreate`: Stack traces that led to the creation of new OS threads.  \n- `trace`: A trace of execution of the current program. You can specify the duration in the `seconds` GET parameter. After you get the trace file, use the `go tool trace` command to investigate the trace.\n\n#### Collect Profiles Using `go tool pprof`\n\n```bash\ngo tool pprof http://localhost:6060/debug/pprof/<profiletype>\n```\n\nReplace `<profiletype>` with one of the supported profiles listed above (e.g., `heap`, `profile`).\n\n#### Example Commands\n\n```bash\n# Collect heap profile\ngo tool pprof http://localhost:6060/debug/pprof/heap\n\n# Collect 30-second CPU profile\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n\n# Collect goroutine profile with debug=2\ngo tool pprof http://localhost:6060/debug/pprof/goroutine?debug=2\n```\n\n#### Generating Text Profiling Files\n\nTo generate text-based profiling reports, use the `-text` option with `go tool pprof`.\n\n```bash\n# Generate text-based CPU profile\ngo tool pprof -text cpu.profile\n```\n\n#### pprof Extra Options\n\nProfiling can be customized further using additional query parameters and options when collecting profiles.\n\n- **Response Format (`debug=N`):**  \n    \n  - **Binary Format (Default):** `N = 0`  \n  - **Plaintext Format:** `N > 0`\n\n\n  **Example:**\n\n```bash\ngo tool pprof http://localhost:6060/debug/pprof/allocs?debug=1\n```\n\n- **Garbage Collection (`gc=N`):**  \n    \n  - **Run GC Before Profiling:** Set `gc=1` to trigger a garbage collection cycle before capturing a heap profile.\n\n\n  **Example:**\n\n```bash\ngo tool pprof http://localhost:6060/debug/pprof/heap?gc=1\n```\n\n- **Duration Parameters (`seconds=N`):**  \n    \n  - **Allocations, Block, Goroutine, Heap, Mutex, Threadcreate Profiles:**  \n      \n    - `seconds=N` returns a delta profile based on the given duration.\n\n    \n\n  - **CPU Profile and Trace Profiles:**  \n      \n    - `seconds=N` specifies the duration for which the CPU profile or trace should run.\n\n\n  **Example:**\n\n```bash\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=30\n```\n\n### 2.4 Collect Without Go Installed\n\nIf your program hasn’t installed Go (you can check by running `go version`), follow these steps to download and save profiling data locally:\n\n1. Download the Profile File Using `wget`.\n\n```bash\nwget -O memory_profile http://localhost:6060/debug/pprof/heap\n```\n\n2. Transfer the Profile File to Your Local Machine Using `scp`.\n\n```bash\nscp <user>@<node_ip>:memory_profile memory_profile\n```\n\nNOTE: Replace `<user>` with your SSH username and `<node_ip>` with the IP address of your Kaia node.\n\n## 3\\. Memory Profiling\n\nAs mentioned earlier, memory profiling refers to the heap information provided by go pprof. It can also be collected through writeMemProfile in the debug namespace offered by the Kaia node.\n\n```bash\n# Using go tool pprof\n> go tool pprof http://localhost:6060/debug/pprof/heap\n# Using Node Console\n> debug.writeMemProfile(\"mem.profile\")\n```\n\nProfiling memory is crucial for analyzing memory-related issues, such as memory leaks. To control the granularity of memory profiling, adjusting the `MemProfileRate` variable can be helpful in this process. This should be set as early as possible in your node's execution (e.g., at the beginning of the `main` function).\n\n:::note\n\nKaia provides the `--memprofilerate` flag which can set the `MemProfileRate` variable easily. Therefore, since it is only available as a flag, it must be set when starting the node, and cannot be changed via the API call.\n\n:::\n\n```bash\nvar MemProfileRate int = 512 * 1024\n```\n\n- **Set `MemProfileRate`:**  \n  - **Profile Maximum Allocations:** Set to `1`.  \n  - **Disable Profiling:** Set to `0`.  \n  - **Default Setting:** `512 * 1024` (profiles approximately one allocation per 512KB).\n\n**Impact:**\n\n- **Higher Profiling Rate (Lower `MemProfileRate`):** Increases the granularity but may introduce performance overhead.  \n- **Lower Profiling Rate (Higher `MemProfileRate`):** Reduces profiling detail, minimizing performance impact.\n\n**Best Practice:**\n\n- **Consistency:** Ensure that `MemProfileRate` remains constant throughout the node's runtime to maintain accurate profiling data.  \n- **Early Configuration:** Set `MemProfileRate` at the very start of the program to capture consistent profiling information\n\n## 4\\. Analyzing Profiles\n\nAfter collecting profiling data, use `go tool pprof` to analyze and visualize the saved profile files.\n\n### 4.1 Analyze Using Web Interface\n\nFor example, you can analyze memory profile data visually using Go’s pprof tool, which provides a visual representation of memory usage through a web interface as shown below:\n\n```bash\ngo tool pprof -http=0.0.0.0:8081 cpu.profile\n```\n\n### 4.2 Analyze Using Command Line\n\nYou can also analyze memory profile data using Go’s pprof tool in a text-based interface within the terminal:\n\n```bash\ngo tool pprof cpu.profile\n```\n\n- **Common `pprof` Commands:**  \n    \n  - `top`: Display the top functions consuming resources.  \n  - `list <function_name>`: Show annotated source code for a specific function.  \n  - `web`: Generate a visualization of the profile in your web browser.  \n  - `pdf`: Generate a PDF report of the profile.\n\n\n- **Example Usage:**\n\n```bash\ngo tool pprof cpu.profile\n# Inside the pprof interactive shell:\n> top\n> list main.functionName\n> web\n```\n\n:::note\n\nEnsure you have Graphviz installed for the `web` and `pdf` commands to generate visual graphs.\n\n:::\n\n## 5\\. Conclusion\n\nBy following this profiling tutorial, Kaia node operators can effectively identify and address performance bottlenecks, optimize resource usage, and ensure the smooth and efficient operation of their nodes. Regular profiling, combined with robust monitoring and logging practices, will contribute significantly to maintaining the reliability and performance of your Kaia node within the blockchain network.  \n",
    "Current Website Url is https://docs.kaia.io/misc/operation/node-pruning. # Prune Node Data\n\nThis page explains how to delete historical block states to reduce the storage requirement. Kaia offers two approaches for pruning block states:\n\n- [Live Pruning](../../learn/storage/state-pruning#state-live-pruning): With the live pruning feature enabled, the block states beyond a certain retention period will be automatically deleted.\n- [Batch Pruning: State Migration](../../learn/storage/state-pruning#state-batch-pruning-state-migration): The block states can be state-migrated, meaning the block states before a certain block number become available.\n\n## Understanding Pruning Impacts\n\n\"Live pruning\" continuously deletes old states, keeping disk size at a minimum. However, due to accompanying bookkeeping tasks, live pruning slightly slows down block sync speed. \"Batch pruning\", on the other hand, does not affect performance after migration is complete, but a migration session takes a few days and temporarily requires large free disk space to copy the states.\n\n## How to Perform Live Pruning\n\nTo enable live pruning from the genesis block, use the `--state.live-pruning` flag when starting your node. If you're starting from a database where live pruning is already enabled, the flag is optional but recommended for clarity.\n\n:::note\n\nYou can control the retention period for live pruning using the `--state.live-pruning-retention NNN` flag (default: 172800 seconds, that is 48 hours). This flag determines how long historical block states are kept before being pruned.\n\n:::\n\n:::info\n\nDatabases with and without live pruning are incompatible. To run a node with live pruning, you must either start from the genesis block with the `--state.live-pruning` flag or start from a [chaindata snapshot](./chaindata-snapshot) that already has live pruning enabled.\n\nYou cannot convert a non-live-pruning database to a live-pruning database, and vice versa. Here are some example log messages you might see:\n\n```sh\n# First time enabling live pruning with an empty database\nINFO[08/27,14:09:01 +09] [41] Writing live pruning flag to database\n\n# Live pruning enabled\nINFO[08/27,14:09:01 +09] [41] Live pruning is enabled     retention=172800\n\n# Live pruning disabled\nINFO[08/27,14:09:46 +09] [41] Live pruning is disabled because flag not stored in database\n\n# Cannot turn on live pruning after the chain has advanced (head block num > 0)\nFatal: Error starting protocol stack: cannot enable live pruning after chain has advanced\n```\n\n:::\n\n## How to Perform Batch Pruning\n\n### Prerequisites\n\n- Recommended to run on a machine with m6i.8xlarge (32 cores and 128GB memory) or higher specs.\n- The machine should have enough spare disk space (500GB or more).\n- The entire process takes approximately 7 days to complete:\n  - Stage 1: Copy (migrate) the state to a new directory. The message \"State migration is completed\" appears.\n  - Stage 2: Block sync continues on the new directory. The old directory will be deleted after this step.\n\n### Steps\n\n1. Attach to the node via console:\n\n```sh\nken attach --datadir /var/kend/data\n```\n\n2. Use the `admin` namespace RPCs to control state migration:\n\n```js\n// Start\n> admin.startStateMigration()\nnull\n\n// Check progress\n> admin.stateMigrationStatus\n\n// Abort\n> admin.stopStateMigration()\n```",
    "Current Website Url is https://docs.kaia.io/misc/operation/operation. # Node Quick Reference\n\nThis guide serves as a handy quick reference for Node operators to efficiently configure, monitor, and troubleshoot their Kaia nodes. It covers common tasks like configuring nodes, understanding and analyzing logs, managing chaindata, and using essential commands. The guide aims to help Node operators smoothly run and maintain their blockchain nodes by equipping them with key information and best practices.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/misc/operation/troubleshooting. # Troubleshooting\n\n## Where can I find a log file for the running Kaia node using the Kaia binary package? <a id=\"where-can-i-find-a-log-file-for-the-running-kaia-node-using-the-kaia-binary\"></a>\n\n**Answer**\n\nYou can find a log file in data directory. For example, default location of a log for `kcnd` is `/var/log/kcnd/kcnd.out` when you install `kcnd` RPM package.\n\n## Kaia node can not connect to network with `Protocol istanbul/64 failed` and `Genesis block mismatch` error message as below. <a id=\"kaia-node-can-not-connect-to-network-with-protocol-istanbul-64-failed-and-gene\"></a>\n\n```\nERROR[01/27,17:11:33 +09] [33] Protocol istanbul/64 failed               id=b10697e43d4f8e30 conn=staticdial err=\"Genesis block mismatch - 81cf117d44f99b21 (!= 74647b98b9f06cb4)\"\n```\n\n**Answer**\n\nThis error can happen when `genesis.json` is differ.\nPlease stop Kaia node and remove data directory. Then run `ken init` again using correct `genesis.json` as below.\n\nFor example, when data directory is `/var/kend/data`.\n```\nsudo kend stop\nsudo rm -rf /var/kend/data\nsudo ken init --datadir /var/kend/data genesis.json\nsudo kend start\n```\n\n\n## Can't deploy smart contract using truffle with following error message. <a id=\"can-t-deploy-smart-contract-using-truffle-with-following-error-message\"></a>\n\n```\nError: Returned error: The method net_version does not exist/is not available\n    at Object.ErrorResponse (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3-eth/~/web3-core-helpers/src/errors.js:29:1)\n    at /usr/local/lib/node_modules/truffle/build/webpack:/~/web3-eth/~/web3-core-requestmanager/src/index.js:140:1\n    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/truffle-provider/wrapper.js:112:1\n    at XMLHttpRequest.request.onreadystatechange (/usr/local/lib/node_modules/truffle/build/webpack:/~/web3/~/web3-providers-http/src/index.js:96:1)\n    at XMLHttpRequestEventTarget.dispatchEvent (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2-cookies/dist/xml-http-request-event-target.js:34:1)\n    at XMLHttpRequest._setReadyState (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2-cookies/dist/xml-http-request.js:208:1)\n    at XMLHttpRequest._onHttpResponseEnd (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2-cookies/dist/xml-http-request.js:318:1)\n    at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/truffle/build/webpack:/~/xhr2-cookies/dist/xml-http-request.js:289:47)\n    at IncomingMessage.emit (events.js:194:15)\n    at endReadableNT (_stream_readable.js:1125:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)\n```\n\n**Answer**\n\nEnable `net` and other API for RPC console by editing `kend.conf` file as below.\n\n```\nRPC_API=\"admin,debug,klay,miner,net,personal,rpc,txpool,web3\" # available apis: admin,debug,klay,miner,net,personal,rpc,txpool,web3\n```\nAfter updating `kend.conf`, restart Kaia node.\n\n\n## Can't start Kaia node with `Unit not found` error as below after installing binary package. <a id=\"can-t-start-kaia-node-with-unit-not-found-error-as-below-after-installing-bina\"></a>\n\n```\nFailed to start kcnd.service: Unit not found.\n```\n\n**Answer**\n\nPlease reload daemon as below.\n\n```\nsudo systemctl daemon-reload\n```\n\n## CN can't connect to network with `Add dial candidate from static nodes` log message. <a id=\"cn-can-t-connect-to-network-with-add-dial-candidate-from-static-nodes-log-messag\"></a>\n\n```\nINFO[02/20,12:35:34 Z] [21] [Dial] Add dial candidate from static nodes  id=7eaa1e3136fd16a3 addr=13.209.225.108:32323\n...\nINFO[02/20,12:35:38 Z] [21] [Dial] Add dial candidate from static nodes  id=7eaa1e3136fd16a3 addr=13.209.225.108:32323\n```\n\n**Answer**\n\nThis can happen when `genesis.json` and nodekey/validator information differ.\nPlease check nodekey/validator and `genesis.json` file again.\n\n## Kaia node can't start with following error log message. <a id=\"kaia-node-can-t-start-with-following-error-log-message\"></a>\n\n```\nFatal: Error starting protocol stack: listen unix /Users/username/some_directory/more_directories/klaytn/klaytn_client/my_test_klaytn/data/dd/klay.ipc: bind: invalid argument\n```\n\n**Answer**\n\nIf you see the above protocol stack error message in the log file, it means Kaia failed to start because the full path name of current working directory is too long. Please launch a Kaia node with a shorter full data directory. The maximum allowed length of path name depends on operating system.\n\n\n## EN can't connect to CC with following log message. <a id=\"en-can-t-connect-to-cc-with-following-log-message\"></a>\n\n```\nERROR[01/28,06:20:07 Z] [23] Protocol istanbul/64 failed id=845f596536450bad conn=staticdial err=\"InvalidPeerHierarchy - (PeerIsOnParentChain:false) == (OnChildChain:false)\"\n```\n\n**Answer**\n\nIt could happen when genesis of mainchain and service chain differ. Please check genesis of both chain are same.\n\n## Head state missing error <a id=\"head-state-missing-error\"></a>\n\n```\n\"ERROR[06/21,14:35:16 +09] [5] Head state missing, repairing chain       number=2955620 hash=66bba2…e15f8d\nFatal: Error starting protocol stack: rewound to block number 0, but repair failed\"\n```\n\n**Answer**\nDue to a compatibility issue, we strongly recommend to upgrade EN's binary to v0.9.6 if you have been running an EN with older versions (`<=` v0.8.2). If it is your first time upgrading the EN to v0.9.x and want to migrate the data from the older version, you must specify the option `ADDITIONAL=\"--db.num-statetrie-partitions 1\"` in the configuration file when you install the newer version.\n",
    "Current Website Url is https://docs.kaia.io/misc/operation/upstream-en. # Configure Upstream Archive Node: Upstream EN\n\nThe Upstream EN (Endpoint Node) feature allows a full node operator to utilize an archive node as an RPC fallback. For more information about full and archive nodes, see the [Block Synchronization](../../learn/storage/block-sync) page.\n\nWhen a full node is about to return a `missing trie node` error, it tries to call the specified upstream RPC URL and return that result. If you configure an archive node as the upstream, the full node essentially serves archive-grade service with minimal archive node load.\n\n## Usage\n\nUsing Upstream EN feature, you can operate a cost-effective archive RPC service. Run one archive node and run many full nodes. Make the full nodes fall back to the archive node. This way, most requests are handled by full nodes and some requests that require historic states are handled by the archive node.\n\n<p align=\"center\"><img src=\"/img/learn/upstream_en.png\" width=\"50%\"/></p>\n\n## How to Enable Upstream EN\n\nTo use Upstream EN feature, simply pass `--upstream-en <RPC_URL>` flag to the full node. For example in your `kend.conf` file,\n\n```sh\nADDITIONAL=\"$ADDITIONAL --upstream-en https://archive-en.node.kaia.io\"\n```",
    "Current Website Url is https://docs.kaia.io/misc/terms-of-use. # Terms of Use\n\n## 1. Your Use of Open Source Software <a id=\"1-your-use-of-open-source-software\"></a>\n\nWe may make \\(but are not obligated to make\\) the source code of Kaia Blockchain Network Platform \\(\"Platform\"\\), the software on the Platform, etc. for download as open source software. If you use this open source software, you agree to be bound by and comply with any license that applies to this open source software. You will not indicate that you are associated with us in connection with your use, modifications or distributions of this open source software.\n\n## 2. Services Provided on the Platform <a id=\"2-services-provided-on-the-platform\"></a>\n\nThe Platform is a combination of peer-to-peer subnetworks of nodes transmitting transactions and blocks to execute value transfers and run smart contracts. The Core Cell Network \\(\"CCN\"\\), which is one of the subnetworks that constitute the Platform, verifies and executes transactions that occur on the Platform. The CCN is operated by Kaia Governance Council, which is a collective group of Core Cell Operators, and Kaia is not directly involved in any services that are provided in or individual transactions that occur on the Platform.\n\n## 3. Your Installation of dApp on the Platform <a id=\"3-your-installation-of-dapp-on-the-platform\"></a>\n\nYour use of open source software is free of charge. However, you may be required to pay a certain number of KAIA as a transaction fee in order to execute a transaction on the Platform, including the installation of the dApp on the Platform.\n\nOnce transaction is executed successfully and respective block generation is verified successfully by the Platform’s mechanism, the block is irreversibly stored in the blockchain. As such, your installation of the dApp and any other transactions on the Platform, as well as the submission of transaction fee is final and irrevocable.\n\n## 4. User Content <a id=\"4-user-content\"></a>\n\nIf you or the users of your dApp post, upload, input, provide or submit any content on the Platform \\(collectively, your \"User Content\"\\), you must ensure that the User Content provided by you or the users of your dApp at that or at any other time is true, accurate, up to date and complete and that any User Content you or the users of your dApp post, upload, input, provide or submit via the Platform do not breach or infringe legal rights of any third party. To the extent that is technically possible, you agree to prevent, remove or block access of any User Content that you or the users of your dApp post, upload, input, provide or submit via the Platform that violate or may violate legal rights \\(such as rights of privacy and publicity\\) of others or any applicable laws or regulations. We do not own, control or endorse any User Content that is transmitted, stored or processed via the Platform or sent to us and we are not responsible or liable for any User Content. We make no assurance that any of Your Content will be secured or that such content will remain confidential.\n\nYou are solely responsible and liable for all of your User Content and for your use of any interactive features, links or information or content on the Platform, and you represent and warrant that \\(i\\) you own all intellectual property rights \\(or have obtained all necessary permissions\\) to provide your User Content and to grant the licenses in these Terms of Use; \\(ii\\) your User Content will not violate any agreements or confidentiality obligations; and \\(iii\\) your User Content will not violate, infringe or misappropriate any intellectual property right or other proprietary right, including the right of publicity or privacy, of any person or entity.\n\nYou shall not include in User Content, or upload, transmit to or create or include in the Services environment any production data or any sensitive, proprietary, confidential or other data with particular data protection requirements such as personal data or personally identifiable information relating to an identified or identifiable natural person.\n\nYou are prohibited from using the Platform to post or transmit any threatening, libellous, defamatory, obscene, scandalous, inflammatory, pornographic or profane material, any material that is contrary to applicable local, federal, or international laws and regulations, or any material that could constitute or encourage unlawful conduct. You must ensure that your User Content do not include such materials. We may from time to time monitor or review material transmitted or posted using the Network, and we reserve the right to delete any material we deem inappropriate.\n\nWe are under no obligation to do so and assume no responsibility or liability arising from any material transmitted or posted using the Platform.\n\nYou understand that any information you or users of your dApp upload to the Platform will be distributed among the blockchain nodes and may not removable due to technical limitations of the blockchain technology.\n\nYou are entirely responsible for any and all activities that occur under your account or your dApp \\(if any\\). You agree to notify us immediately of any unauthorized use of your User Content, your dApp or account or any other breach of security. We will not be liable for any loss or damages that you may incur as a result of someone else using your User Content, your dApp or account, either with or without your knowledge. However, you could be held liable for losses incurred by us or another party due to someone else using your User Content, your dApp or account. You may not use anyone else’s User Content, your dApp or account at any time without the permission of such person or entity.\n\nBy posting, uploading, inputting, providing or submitting your User Content to the Platform, you grant to participants of the Platform and any necessary sub-licensees a non-exclusive, worldwide, perpetual, right and permission to use, reproduce, copy, edit, modify, translate, reformat, create derivative works from, distribute, transmit, publicly perform and publicly display your User Content and sub-license such rights to others.\n\nIf we have reason to believe that there is likely to be a breach of security, breach or misuse of the Platform or if you breach any of your obligations under these terms, we may suspend your use of the Platform at any time and for any reason.\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/core-cell. # Core Cell\n\n## Intended Audience  <a id=\"intended-audience\"></a>\n\n- Core Cell Operators\n- If your interest is in making and running Blockchain Applications on Kaia, you don't need to maintain a Core Cell. You need to run an [Endpoint Node](../endpoint-node/endpoint-node) instead to make your application interact with Kaia network. \n\n\n## Core Cell Overview <a id=\"core-cell-overview\"></a>\n\nCore Cell (CC) is an entity that is participating in the consensus process, and is in charge of executing transactions and generating blocks.\nA Kaia Core Cell (CC) consists of the following components.\n\n-  Consensus Node (CN): Consensus Nodes are participating in the block generation process. \n-  Proxy Node (PN): Proxy Nodes provide the interface to the network. PNs transmit the transaction requests to the Consensus Nodes, and propagate the blocks down to the Endpoint Nodes.\n\nIt is recommended that a Core Cell consists of one CN with two or more PNs.\nA CN connects to other CNs within the Core Cell Network to perform consensus. \nCNs only accept connections from their PNs in the same Core Cell to receive transaction requests and propagate blocks to the network. \nPNs accepts connections from any ENs within the Endpoint Node Network.\n\n![Core Cell Overview](/img/nodes/cn_set.png)\n\n| Name | Description | Network Security | Quantity |\n| :--- | :--- | :--- | :--- |\n| CN | A node that creates a new block with other CNs in the Core Cell Network | A network is composed of permissioned CNs. (Requires IP access control). | 1 unit |\n| PN | - A node that submits transactions received from the Kaia Endpoint Node Network to the CN. <br/>- It propagates the created blocks to Kaia Endpoint Node Network. <br/>- It can scale out horizontally depending on the number of ENs in the Endpoint Node Network. | - It is connected to the CN in the Core Cell, and its IP and Ports are required to be public to accept connections from other Kaia nodes on the Internet. <br/>- It can connect to other PNs in other Core Cell via PN bootnode. <br/>- It can connect to ENs via EN bootnode. | At least 1 PN required. 2 or more PNs are recommended. |\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/h-a-setup. # Configure High Availability\n\nConfiguring the CN for high availability is critical for effectively operating a Core Cell. The recommended high availability scheme depends on whether the Core Cell is deployed on physical or cloud infrastructure.\n\n## Active-Standby \\(recommended for bare-metal\\) <a id=\"active-standby-recommended-for-bare-metal\"></a>\n\nIn this configuration, two CN nodes are installed in active-standby configuration. During normal operation the active node participates in block generation, while the standby only synchronizes chaindata from the network. This configuration ensures that the standby CN node has a fresh copy of the chaindata in the event of a failure in the active node.\n\n### Setup <a id=\"setup\"></a>\n\n1. Create a backup of the active CN's `nodekey`.\n2. Install a standby CN. The configuration is the same as the active CN except:\n   * The standby should use a different `nodekey`\n   * Add the addresses of the PNs to `$DATA_DIR/static-nodes.json`\n\n### Failover <a id=\"failover\"></a>\n\n1. Stop the standby CN: `sudo systemctl stop kcnd`\n2. Replace the `nodekey` of the standby with the `nodekey` of the failed active CN.\n3. Reassign the IP address of the active CN to the standby CN.\n4. Start the standby CN and verify that it is in sync with the network: `sudo systemctl start kcnd`\n\n## Machine Image & Snapshot \\(recommended for cloud\\) <a id=\"machine-image-snapshot-recommended-for-cloud\"></a>\n\nCloud infrastructure allows operators to replace failed nodes much more quickly, so it is not necessary to operate a second standby CN. Instead, it is sufficient to ensure that a new CN can be quickly provisioned and provided with a updated copy of the chaindata.\n\nThe exact terminology and procedure may vary across different cloud environments. The procedure below is based on AWS \\(specifically EC2 and EBS\\), but can be adapted for other cloud platforms.\n\n### Setup <a id=\"setup\"></a>\n\n1. Create a backup of the active CN's `nodekey`.\n2. Each time the CN configuration or software is updated, create a machine image \\(e.g. AMI\\). Do not include the volume containing `DATA_DIR` in this image -- this will be obtained separately.\n\n### Failover <a id=\"failover\"></a>\n\nUse any of the CC's PN nodes to obtain a chaindata snapshot:\n\n1. Connect to any PN node and stop kpnd: `sudo systemctl stop kpnd`. It is important to stop kpnd first, to ensure data consistency.\n2. Using the AWS console, create a snapshot of the volume containing the PN's `DATA_DIR`.\n3. Start kpnd: `sudo systemctl start kpnd`\n\nCreate a new CN using the base CN image and the chaindata image:\n\n1. Create an instance using the CN image \\(created in \"Setup\" above\\).\n2. Attach a volume created from the snapshot of the PN's `$DATA_DIR`.\n3. Remove all files from the volume except `$DATA_DIR/klay/chaindata`. Confirm that the `DATA_DIR` set in `kcnd.conf` matches the directory containing the chaindata. It may be necessary to rename the directory if the name is different.\n4. Copy the `nodekey` of the failed CN to `$DATA_DIR/klay/nodekey`.\n5. Reassign the IP address of the failed CN to the replacement.\n6. Start kcnd: `sudo systemctl start kcnd`\n7. Verify the CN is in sync with the network.\n\n## Additional Considerations <a id=\"additional-considerations\"></a>\n\nReassigning the public IP of the failed CN to the replacement CN will allow the replacement to connect immediately to other CNs. If the IP changes, the new CN will not be able to connect to the network until all other CCOs have updated their firewall configurations.\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/install/before-you-install. # Before You Install\n\n## Download <a id=\"download\"></a>\n\nYou can get packages for CN, and PN in the [download page](../../downloads/downloads).\n\n\n## Before You Install <a id=\"before-you-install\"></a>\n\nBefore installing the Kaia package, it is required to create the associated node information to enroll your node URIs. The Kgen package is provided for CC operators, please follow the steps in the order shown below.\n\n1. Download `kgen` Package\n2. Node Key & Node URI Creation\n3. Node URI Enrollment\n\n### Download `kgen` Package <a id=\"download-kgen-package\"></a>\n\nFirst of all, you can download the latest version of `kgen` package depending on your operating systems on [Download](../../downloads/downloads) page.\n\nYou can find the `kgen` binary file under the `bin` directory.\n\n### Node Key & Node URI Creation <a id=\"node-key-node-uri-creation\"></a>\n\nThe node key and the node URI are created only once at the beginning. The node URI must be shared with other Core Cells of the Core Cell Network. A CN connects to other CNs and a PN connects to a CN and some PNs using the created node URI. A node URI is created based on the node key by using the downloaded `kgen`. The below command line creates `nodekey` as well as `node_info.json`.\n\n`kgen` takes the associated IP and Port number as follows.\n\n```text\n$ kgen --ip \"123.456.789.012\" --port 32323 --file\n$ ls\nnodekey node_info.json\n```\n\nThe `nodekey` is a 64-byte hexadecimal string which is a private key used in the node internally. This private key must be present at the Kaia data directory and be careful not to lose it.\n\n```text\n$ cat nodekey\nf08f2118c455a6c9c9b5e035d3571e570a719ea61771e268546e796a264acc2b\n$ mv nodekey ~/kcnd_home\n```\n\nThe created file `node_info.json` includes the following contents.\n\n| Key Name | Description | Example |\n| :--- | :--- | :--- |\n| NodeAddress | an address of the associated node | 0xc8a23d67f2471066fa1b07270651fea7e5c0cf78 |\n| NodeKey | the node key \\(a.k.a private key\\) | aaa7248dfdf19418ae9121a0f39db39c5c27a3e404ea7c1b8e020ca8dbe7e71a |\n| NodeURI | node URI | kni://4f2f47f3bf35a2c576d3345e6e9c49b147d510c05832d2458709f63c3c90c76ead205975d944ed65e77dd4c6f63ebe1ef21d60da95952bc1e200e7487f4d9e1b@123.456.789.012:32323?discport=0 |\n\n`node_info.json` contains the node information in a JSON format as follows.\n\n```text\n$ cat node_info.json\n{\n    \"NodeAddress\": \"0xc8a23d67f2471066fa1b07270651fea7e5c0cf78\",\n    \"NodeKey\": \"aaa7248dfdf19418ae9121a0f39db39c5c27a3e404ea7c1b8e020ca8dbe7e71a\",\n    \"NodeURI\": \"kni://4f2f47f3bf35a2c576d3345e6e9c49b147d510c05832d2458709f63c3c90c76ead205975d944ed65e77dd4c6f63ebe1ef21d60da95952bc1e200e7487f4d9e1b@123.456.789.012:32323?discport=0\"\n}\n```\n\n### Node URI Enrollment <a id=\"node-uri-enrollment\"></a>\n\nThe created node URI should be enrolled to participate in the Core Cell Network \\(CCN\\). The process of the enrollment is as follows.\n\n1. Create a node URI using `kgen` \\(`node_info.json`\\) which contains the associated IP and Port number.\n2. Send the information to the official Kaia email address \\(`bootstrap@klaytn.com` for Mainnet or `baobab@klaytn.com` for Kairos\\).\n\nThe enrolled information should be sent to the official Kaia email address. The format is as follows.\n\nIn case of CN,\n\n```text\nCompany: Kakao\nCN URI : kni://\n4f2f47f3bf35a2c576d3345e6e9c49b147d510c05832d2458709f63c3c90c76ead205975d944ed65e77dd4c6f63ebe1ef21d60da95952bc1e200e7487f4d9e1b@123.456.789.012:32323?discport=0\n```\n\nIn case of PN,\n\n```text\nCompany: Kakao\nPN URI : kni://\n4f2f47f3bf35a2c576d3345e6e9c49b147d510c05832d2458709f63c3c90c76ead205975d944ed65e77dd4c6f63ebe1ef21d60da95952bc1e200e7487f4d9e1b@123.456.789.012:32323?discport=0\n```\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/install/install-consensus-nodes. # Install Consensus Nodes\n\n## Download\n\nYou can download the latest version of the `kcn`  on [Download](../../downloads/downloads) page.\n\n## Installation\n\n### Linux Archive Distribution <a id=\"linux-archive-distribution\"></a>\n\nThe archive file consists of the executable binary and the configuration file structured as follows.\n\n**Note**: Do NOT alter the file structure or file name. If you change it, the node may not function correctly.\n\n```text\n- bin\n  |- kcn\n  |- kcnd\n- conf\n  |- kcnd.conf\n```\n\n| File Name | File Description |\n| :--- | :--- |\n| bin/kcn | CN executable file |\n| bin/kcnd | CN start/termination script file |\n| conf/kcnd.conf | CN configuration file |\n\nThe installation is the uncompression of the downloaded package where you want to install the package.\n\n```bash\n$ tar zxf kcn-vX.X.X-linux-amd64.tar.gz\n```\n\nOr,\n\n```bash\n$ tar zxf kcn-baobab-vX.X.X-linux-amd64.tar.gz\n```\n\n**Note**: it is recommended that the uncompressed directory `kcn-linux-amd64/bin` path should be added to the environment variable `$PATH` to run the `kcn` and `kcnd` globally. As an example,\n\n```bash\n$ export PATH=$PATH:~/downloaded/path/kcn-linux-amd64/bin\n```\n\nThe other sections assume that the path is added to the variable.\n\n### RPM Distribution \\(RHEL/CentOS/Fedora\\) <a id=\"rpm-rhel-centos-fedora\"></a>\n\nYou can install the downloaded RPM file with the following `yum` command.\n\n```bash\n$ yum install kcnd-vX.X.X.el7.x86_64.rpm\n```\n\nOr,\n\n```bash\n$ yum install kcnd-baobab-vX.X.X.el7.x86_64.rpm\n```\n\n### Install from Kaia Yum Repo <a id=\"install-from-kaia-yum-repo\"></a>\n\nAlternatively, you can install `kcnd` from the Kaia Yum repo, run:\n\n```bash\n$ sudo curl -o /etc/yum.repos.d/kaia.repo https://packages.kaia.io/config/rhel/7/kaia.repo && sudo yum install kcnd\n```\n\n### Installed Location <a id=\"installed-location\"></a>\n\nThe installed files are located as follows.\n\n| File Name | Location |\n| :--- | :--- |\n| kcn | /usr/bin/kcn |\n| kcnd.conf | /etc/kcnd/conf/kcnd.conf |\n\n\n## Configuration <a id=\"configuration\"></a>\n\nThe CN configuration is to create a data directory and set up several values in the configuration file `kcnd.conf`.\n\n1. Create the CN data directory.\n2. Install node key\n3. Configure the CN with `kcnd.conf`.\n\n### CN Data Directory Creation <a id=\"cn-data-directory-creation\"></a>\n\nConsidering the fact that the size of Kaia blockchain data is always increased, it is recommended to use a big enough storage. You may need to create the directory on your desired path.\n\n```bash\n$ mkdir -p /var/kcnd/data\n```\n\n### Install Node Key <a id=\"install-node-key\"></a>\n\nIn order to operate a CN, a `nodekey` is required. The KCN binary will create a new one for you if you do not have it. If you have one, you need to put your `nodekey` into the CN data directory. The way to create a `nodekey` is described in the '[Before You Install](./before-you-install)' section. The following command line copies the `nodekey` into the CN data directory.\n\n```bash\n$ cp nodekey /var/kcnd/data\n```\n\n### Update the Configuration File <a id=\"update-the-configuration-file\"></a>\n\nConfiguration File Location:\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/kcn-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kcnd/conf/`.\n\n#### Add Data Directory  <a id=\"add-data-directory\"></a>\n\nYou should update the the data directory environment variable `$DATA_DIR` on the configuration file `kcnd.conf`.\n\n```text\n...\nDATA_DIR=/var/kcnd/data\n...\n```\n\n#### Setup Rewardbase <a id=\"setup-rewardbase\"></a>\n\nAs a reward of participating in the consensus of the Kaia network, CN operator will receive KAIA. For this reason, it is required to set an address on the configuration file `kcnd.conf`.\n\nThe ways to create a new account are various, but the `kcn` also provides the functionality. You can check the help message with the following command.\n\n```bash\n$ kcn account new --help\n```\n\nOne of the example of doing this procedure is as follows. First of all, you need to create a new account which the reward KAIA will be sent to.\n\n```bash\n$ kcn account new --datadir ~/kcnd_home\nINFO[03/15,09:04:43 +09] [17] Setting connection type                   nodetype=cn conntype=-0\nINFO[03/15,09:04:43 +09] [17] Maximum peer count                        KAIA=25 LES=0 total=25\nINFO[03/15,09:04:43 +09] [17] SBN is disabled.\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassphrase:\nRepeat passphrase:\nAddress: {d13f7da0032b1204f77029dc1ecbf4dae2f04241}\n```\n\nAs a result of this, it will create the associated keystore on the path that you define. Next, you need to put the created address in the file `kcnd.conf` file as follows.\n\n```text\n...\nREWARDBASE=\"d13f7da0032b1204f77029dc1ecbf4dae2f04241\"\n...\n```\n\nKeep in mind that the keystore and the password that you created is significantly important, so you must be careful to manage them. See more details about `kcnd.conf` on the [Configuration File](../../../misc/operation/configuration) section.\n\n### (Optional) Download Chaindata Snapshot\n\nSynching from the genesis block is time-consuming. You may use [Chaindata Snapshot](../../../misc/operation/chaindata-snapshot) to skip the [Full Sync](../../../learn/storage/block-sync#full-sync) process.\n\n## Startup the CN <a id=\"startup-the-cn\"></a>\n\n### CN Start/Stop  <a id=\"cn-start-stop\"></a>\n\nYou can start/stop the Kaia service with the following `systemctl` command.\n\n**Note**: This requires root privileges.\n\n**start**\n\n```bash\n$ systemctl start kcnd.service\n\n```\n\n**stop**\n\n```bash\n$ systemctl stop kcnd.service\n\n```\n\n**status**\n\n```bash\n$ systemctl status kcnd.service\n\n```\n\n### Troubleshooting <a id=\"troubleshooting\"></a>\n\nIf you meet the following error,\n\n```bash\nFailed to start kcnd.service: Unit not found.\n```\n\nreload the systemd manager configuration with the following command.\n\n```bash\n$ systemctl daemon-reload\n```\n\n### Export BLS public key info <a id=\"export-bls-public-key-info\"></a>\n\nIf the network has activated or will activate the Randao hardfork, each CN maintainer must submit its BLS public key info to the [KIP-113 smart contract](https://kips.kaia.io/KIPs/kip-113).\n\nThe BLS public key info can be calculated from the nodekey. To extract it, first start the node. Then use the command:\n\n```\n$ kcn account bls-info --datadir /var/kcnd/data\n```\n\nAs a result, `bls-publicinfo-NODEID.json` file will be created.\n\n## Testing the Core Cell <a id=\"testing-the-core-cell\"></a>\n\nIt is time to check that Core Cell is successfully installed and it is working as expected after installation.\n\n### Process Status <a id=\"process-status\"></a>\n\nIt is possible to check the status of CN's process using the status commands `systemctl` and `kcnd`.\n\n#### systemctl <a id=\"systemctl\"></a>\n\n`systemctl` is installed along with the RPM and the status of CN can be checked as follows.\n\n```bash\n$ systemctl status kcnd.service\n● kcnd.service - (null)\n   Loaded: loaded (/etc/rc.d/init.d/kcnd; bad; vendor preset: disabled)\n   Active: active (running) since Wed 2019-01-09 11:42:39 UTC; 1 months 4 days ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 29636 ExecStart=/etc/rc.d/init.d/kcnd start (code=exited, status=0/SUCCESS)\n Main PID: 29641 (kcn)\n   CGroup: /system.slice/kcnd.service\n           └─29641 /usr/local/bin/kcn --networkid 1000 --datadir /kcnd_home --port 32323 --srvtype fasthttp --metrics --prometheus --verbosity 3 --txpool.global...\n\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Starting (null)...\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal kcnd[29636]: Starting kcnd: [  OK  ]\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Started (null).\n```\n\nYou can check the current status such as `Active: active (running)` in the above example.\n\n#### kcnd <a id=\"kcnd-kpnd\"></a>\n\n`kcnd` is installed along with the package and the status of CN can be checked as follows.\n\n```bash\n$ kcnd status\nkcnd is running\n```\n\n### Logs <a id=\"logs\"></a>\n\nThe log is stored in `kcnd.out` file located in the path defined in the `LOG_DIR` field of the `kcnd.conf` file. When the node works properly, you can see that each block is created per second as follows.\n\nExample:\n\n```bash\n$ tail kcnd.out\nINFO[02/13,07:02:24 Z] [35] Commit new mining work                    number=11572924 txs=0 elapsed=488.336µs\nINFO[02/13,07:02:25 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.800ms   mgasps=0.000       number=11572924 hash=f46d09…ffb2dc cache=1.59mB\nINFO[02/13,07:02:25 Z] [35] Commit new mining work                    number=11572925 txs=0 elapsed=460.485µs\nINFO[02/13,07:02:25 Z] [35] 🔗 block reached canonical chain           number=11572919 hash=01e889…524f02\nINFO[02/13,07:02:26 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=1fabd3…af66fe number=11572925\nINFO[02/13,07:02:26 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.777ms   mgasps=0.000       number=11572925 hash=1fabd3…af66fe cache=1.59mB\nINFO[02/13,07:02:26 Z] [35] Commit new mining work                    number=11572926 txs=0 elapsed=458.665µs\nINFO[02/13,07:02:27 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=60b9aa…94f648 number=11572926\nINFO[02/13,07:02:27 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.783ms   mgasps=0.000       number=11572926 hash=60b9aa…94f648 cache=1.59mB\nINFO[02/13,07:02:27 Z] [35] Commit new mining work                    number=11572927 txs=0 elapsed=483.436µs\n```\n\n### kcn console <a id=\"kcn-console-kpn-console\"></a>\n\nKaia provides a CLI client: `kcn console`. However, a CN may disable the RPC interface for the client due to the security reason. Another way of using the client is to connect to the process via IPC (inter-process communication).\n\nThe IPC file `klay.ipc` is located in the `DATA_DIR` path on a CN.\n\nPlease execute the following command and check out the result.\n\n```bash\n$ ken attach --datadir /var/kend/data\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: /var/kend/data\n modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n >\n```\n\nYou can check the usable commands on [API Document](../../../../references/json-rpc/klay/account-created)\n\nThe useful APIs to check the status of a CN:\n\n* `kaia.blockNumber` (to get the latest block number)\n* `net.peerCount` (to get the number of the connected Kaia nodes currently)\n\n#### kaia.blockNumber  <a id=\"kaia-blocknumber\"></a>\n\nYou can get the latest block number to see if blocks are created (for CNs) or propagated (for CNs and PNs) properly based on your node type.\n\n```javascript\n> kaia.blockNumber\n11573819\n```\n\n#### net.peerCount  <a id=\"net-peercount\"></a>\n\n```javascript\n> net.peerCount\n14\n```\n\nThe above command line returns a different value based on the node type.\n\n* CN: the number of connected CNs + the number of connected PNs.\n* PN: the number of connected CNs + the number of connected PNs + the number of connected ENs.",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/install/install-proxy-nodes. # Install Proxy Nodes\n\n## Download\n\nYou can download the latest version of the `kpn`  on [Download](../../downloads/downloads) page.\n\n## Installation <a id=\"installation\"></a>\n\n### Linux Archive Distribution <a id=\"linux-archive-distribution\"></a>\n\nThe archive file consists of the executable binary and the configuration file structured as follows.\n\n**Note**: Do NOT alter the file structure or file name. If you change it, the node may not function correctly.\n\n```text\n- bin\n  |- kpn\n  |- kpnd\n- conf\n  |- kpnd.conf\n```\n\n| File Name | File Description |\n| :--- | :--- |\n| bin/kpn | PN executable file |\n| bin/kpnd | PN start/termination script file |\n| conf/kpnd.conf | PN configuration file |\n\nThe installation is the uncompression of the downloaded package where you want to install the package.\n\n```bash\n$ tar zxf kpn-vX.X.X-linux-amd64.tar.gz\n```\n\nOr,\n\n```bash\n$ tar zxf kpn-baobab-vX.X.X-linux-amd64.tar.gz\n```\n\n**Note**: it is recommended that the uncompressed directory `kpn-linux-amd64/bin` path should be added to the environment variable `$PATH` to run the `kpn` and `kpnd` globally. As an example,\n\n```bash\n$ export PATH=$PATH:~/downloaded/path/kpn-linux-amd64/bin\n```\n\nThe other sections assume that the path is added to the variable.\n\n### RPM Distribution \\(RHEL/CentOS/Fedora\\) <a id=\"rpm-rhel-centos-fedora\"></a>\n\nYou can install the downloaded RPM file with the following `yum` command.\n\n```bash\n$ yum install kpnd-vX.X.X.el7.x86_64.rpm\n```\n\nOr,\n\n```bash\n$ yum install kpnd-baobab-vX.X.X.el7.x86_64.rpm\n```\n\n### Install from Kaia Yum Repo <a id=\"install-from-kaia-yum-repo\"></a>\n\nAlternatively, you can install `kpnd` from the Kaia Yum repo, run:\n\n```bash\n$ sudo curl -o /etc/yum.repos.d/kaia.repo https://packages.kaia.io/config/rhel/7/kaia.repo && sudo yum install kpnd\n```\n\n### Installed Location <a id=\"installed-location\"></a>\n\nThe installed files are located as follows.\n\n| File Name | Location |\n| :--- | :--- |\n| kpn | /usr/bin/kpn |\n| kpnd.conf | /etc/kpnd/conf/kpnd.conf |\n\n## Configuration <a id=\"configuration\"></a>\n\nThe PN configuration is to create a data directory and set up several values in the configuration file `kpnd.conf`.\n\n1. Create a PN Data Directory\n2. Install node key\n3. Install `static-node.json` \n4. Configure the PN with `kpnd.conf`.\n\n### PN Data Directory Creation <a id=\"pn-data-directory-creation\"></a>\n\nConsidering the fact that the size of Kaia blockchain data is always increased, it is recommended to use a big enough storage. You may need to create the directory on your desired path.\n\n```bash\n$ mkdir -p /var/kpnd/data\n```\n\n### Install Node Key <a id=\"install-node-key\"></a>\n\nIn order to operate a PN, a `nodekey` is required. The KPN binary will create a new one for you if you do not have it. If you have one, you need to put your `nodekey` into the PN data directory. The way to create a `nodekey` is in the \"[Before You Install](./before-you-install)\" section. The following command line copies the `nodekey` into the PN data directory.\n\n```bash\n$ cp nodekey /var/kpnd/data\n```\n\n### Install `static-nodes.json` <a id=\"install-static-nodes-json\"></a>\n\nThe `static-nodes.json` should be created from the PN operator. It contains the addresses that your PN is connected to. It is recommended to add the addresses including your CN and a PN from another Core Cell. Please contact to the Kaia official email for more details \\(`bootstrap@klaytn.com` for Mainnet or `baobab@klaytn.com` for Kairos\\).\n\n**static-nodes.json**\n\n```text\n[\n  \"kni://4f2f47f3bf35a2c576d3345e6e9c49b147d510c05832d2458709f63c3c90c76ead205975d944ed65e77dd4c6f63ebe1ef21d60da95952bc1e200e7487f4d9e1b@10.11.2.101:32323?discport=0&ntype=cn\",\n  \"kni://8dee912aeda2ccfaa4fe421f015d4d75c2e3fd4aab75fa399b42767caad33531e57f3356b4a4af374593e33ec4320e1325aa2390a7be2489fa6b5724894680eb@10.11.2.102:32323?discport=0&ntype=pn\"\n]\n```\n\nThe node URI of the PN is in the \"[Before You Install](./before-you-install)\" section. \\(Note: This IP address is different from CN public IP.\\) The following command line copies the `static-nodes.json` file into the PN data directory.\n\n```bash\n$ cp static-nodes.json /var/kpnd/data\n```\n\n### Update the Configuration File <a id=\"update-the-configuration-file\"></a>\n\nConfiguration File Location:\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/kpn-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kpnd/conf/`.\n\n#### Add Data Directory  <a id=\"add-data-directory\"></a>\n\nYou should update the the data directory environment variable `$DATA_DIR` on the configuration file `kpnd.conf`.\n\n```text\n...\nDATA_DIR=/var/kpnd/data\n...\n```\n\n### (Optional) Download Chaindata Snapshot\n\nSynching from the genesis block is time-consuming. You may use [Chaindata Snapshot](../../../misc/operation/chaindata-snapshot) to skip the [Full Sync](../../../learn/storage/block-sync#full-sync) process.\n\n## Startup the PN <a id=\"startup-the-pn\"></a>\n\n### PN Start/Stop  <a id=\"pn-start-stop\"></a>\n\nYou can start/stop the Kaia service with the following `systemctl` command.\n\n**Note**: This requires root privileges.\n\n**start**\n\n```bash\n$ systemctl start kpnd.service\n\n```\n\n**stop**\n\n```bash\n$ systemctl stop kpnd.service\n\n```\n\n**status**\n\n```bash\n$ systemctl status kpnd.service\n\n```\n\n### Troubleshooting <a id=\"troubleshooting\"></a>\n\nIf you meet the following error,\n\n```bash\nFailed to start kpnd.service: Unit not found.\n```\n\nreload the systemd manager configuration with the following command.\n\n```bash\n$ systemctl daemon-reload\n```\n\n## Testing the Core Cell <a id=\"testing-the-core-cell\"></a>\n\nIt is time to check that Core Cell is successfully installed and it is working as expected after installation.\n\n### Process Status <a id=\"process-status\"></a>\n\nIt is possible to check the status of PN's process using the status commands `systemctl` and `kpnd`.\n\n#### systemctl <a id=\"systemctl\"></a>\n\n`systemctl` is installed along with the RPM and the status of PN can be checked as follows.\n\n```bash\n$ systemctl status kpnd.service\n● kpnd.service - (null)\n   Loaded: loaded (/etc/rc.d/init.d/kpnd; bad; vendor preset: disabled)\n   Active: active (running) since Wed 2019-01-09 11:42:39 UTC; 1 months 4 days ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 29636 ExecStart=/etc/rc.d/init.d/kpnd start (code=exited, status=0/SUCCESS)\n Main PID: 29641 (kpn)\n   CGroup: /system.slice/kpnd.service\n           └─29641 /usr/local/bin/kpn --networkid 1000 --datadir /kpnd_home --port 32323 --srvtype fasthttp --metrics --prometheus --verbosity 3 --txpool.global...\n\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Starting (null)...\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal kpnd[29636]: Starting kpnd: [  OK  ]\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Started (null).\n```\n\nYou can check the current status such as `Active: active (running)` in the above example.\n\n#### kpnd <a id=\"kcnd-kpnd\"></a>\n\n`kpnd` is installed along with the package and the status of PN can be checked as follows.\n\n```bash\n$ kpnd status\nkpnd is running\n```\n\n### Logs <a id=\"logs\"></a>\n\nThe log is stored in `kpnd.out` file located in the path defined in the `LOG_DIR` field of the `kpnd.conf` file. When the node works properly, you can see that each block is created per second as follows.\n\nExample:\n\n```bash\n$ tail kpnd.out\nINFO[02/13,07:02:24 Z] [35] Commit new mining work                    number=11572924 txs=0 elapsed=488.336µs\nINFO[02/13,07:02:25 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.800ms   mgasps=0.000       number=11572924 hash=f46d09…ffb2dc cache=1.59mB\nINFO[02/13,07:02:25 Z] [35] Commit new mining work                    number=11572925 txs=0 elapsed=460.485µs\nINFO[02/13,07:02:25 Z] [35] 🔗 block reached canonical chain           number=11572919 hash=01e889…524f02\nINFO[02/13,07:02:26 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=1fabd3…af66fe number=11572925\nINFO[02/13,07:02:26 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.777ms   mgasps=0.000       number=11572925 hash=1fabd3…af66fe cache=1.59mB\nINFO[02/13,07:02:26 Z] [35] Commit new mining work                    number=11572926 txs=0 elapsed=458.665µs\nINFO[02/13,07:02:27 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=60b9aa…94f648 number=11572926\nINFO[02/13,07:02:27 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.783ms   mgasps=0.000       number=11572926 hash=60b9aa…94f648 cache=1.59mB\nINFO[02/13,07:02:27 Z] [35] Commit new mining work                    number=11572927 txs=0 elapsed=483.436µs\n```\n\n### kpn console <a id=\"kcn-console-kpn-console\"></a>\n\nKaia provides a CLI client: `kpn console`. However, a PN may disable the RPC interface for the client due to the security reason. Another way of using the client is to connect to the process via IPC (inter-process communication).\n\nThe IPC file `klay.ipc` is located in the `DATA_DIR` path on a PN.\n\nPlease execute the following command and check out the result.\n\n```bash\n $ kpn attach --datadir /var/kpnd/data\n Welcome to the Kaia JavaScript console!\n\n instance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n coinbase: 0x67f68fdd9740fd7a1ac366294f05a3fd8df0ed40\n at block: 11573551 (Wed, 13 Feb 2019 07:12:52 UTC)\n  datadir: /var/kpnd/data\n  modules: admin:1.0 debug:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n  >\n```\n\nYou can check the usable commands on [API Document](../../../references/json-rpc/klay/account-created)\n\nThe useful APIs to check the status of a PN:\n\n* `kaia.blockNumber` (to get the latest block number)\n* `net.peerCount` (to get the number of the connected Kaia nodes currently)\n\n#### kaia.blockNumber  <a id=\"kaia-blocknumber\"></a>\n\nYou can get the latest block number to see if blocks are created (for CNs) or propagated (for CNs and PNs) properly based on your node type.\n\n```javascript\n> kaia.blockNumber\n11573819\n```\n\n#### net.peerCount  <a id=\"net-peercount\"></a>\n\n```javascript\n> net.peerCount\n14\n```\n\nThe above command line returns a different value based on the node type.\n\n* CN: the number of connected CNs + the number of connected PNs.\n* PN: the number of connected CNs + the number of connected PNs + the number of connected ENs.",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/install/install. # Install Core Cell\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/monitoring-setup. # Monitor Core Cell\n\n## Overview <a id=\"overview\"></a>\n\nThe Kaia team provides a site for monitoring the Kaia CCN at [http://node.kaia.io:3000](http://node.kaia.io:3000). The `telegraf` monitoring agent is installed in each CN/PN of the CC to collect metrics and send them to the monitoring server. Once installed, you may visit the monitoring site to view the metrics of the Kaia CCs.\n\nThe installation process is as follows:\n\n1. Install `telegraf` in the CN/PNs\n2. Configure `telegraf`\n3. Start `telegraf`\n\n## Telegraf Installation <a id=\"telegraf-installation\"></a>\n\nTelegraf Installation Guide \\(Amazon Linux 2 users, see below\\): [https://docs.influxdata.com/telegraf/latest/introduction/installation/](https://docs.influxdata.com/telegraf/latest/introduction/installation/)\n\n**Note for Amazon Linux 2**\n\nTo install Telegraph on Amazon Linux 2, you may use InfluxData's RHEL 7 yum repo as follows:\n\n```text\ncat <<EOF | sudo tee /etc/yum.repos.d/influxdb.repo\n[influxdb]\nname = InfluxData Repository - Stable\nbaseurl = https://repos.influxdata.com/stable/\\$basearch/main\nenabled = 1\ngpgcheck = 1\ngpgkey = https://repos.influxdata.com/influxdata-archive_compat.key\nEOF\n```\n\n## Telegraf Setup <a id=\"telegraf-setup\"></a>\n\n### Enable monitoring in kcnd/kpnd <a id=\"enable-monitoring-in-kcnd-kpnd\"></a>\n\n/etc/kcnd/conf/kcnd.conf\n\n```text\n...\nMETRICS=1\nPROMETHEUS=1\n...\n```\n\n**Check**\n\nYou may confirm that the above two options are enabled by checking that port 61001 is open.\n\n```text\n$ netstat -ntap | grep 61001\ntcp        0      0 :::61001        :::*       LISTEN      8989/kcn\n```\n\n**Configure Telegraf service**\n\nCopy the following file to the `telegraf` configuration directory \\(`/etc/telegraf/telegraf.d/`\\), and edit `nodetype`, `instance`, and `hostname` appropriately for each node:\n\n```text\n[global_tags]\n  # Change \"cn\" to \"pn\" for PN installation\n  nodetype = \"cn\"\n\n  # The CN/PN name (e.g. `example-cn`, `example-pn`)\n  instance = \"<hostname>\"\n\n[agent]\n  # The CN/PN name (e.g. `example-cn`, `example-pn`)\n  hostname = \"<hostname>\"\n\n[[outputs.influxdb]]\n  urls = [ \"http://localhost:\" ]\n  database = \"klaytn_mainnet\"\n\n[[inputs.prometheus]]\n  urls = [ \"http://localhost:61001/metrics\" ]\n```\n\nChange the following in `/etc/telegraf/telegraf.conf`:\n\n* Comment out the `[[outputs.influxdb]]` section\n\n**Start Telegraf**\n\n```text\n$ systemctl restart telegraf\n```\n\n## Grafana <a id=\"grafana\"></a>\n\nIf each CN/PN has the above configuration and agent, you can check the metrics at the following URL:\n\n[http://node.kaia.io:3000](http://node.kaia.io:3000)\n\nAs a CC operator, you may request an account by providing your company name and email address in the Slack channel. Please note that only CC operators are allowed to request a Grafana account.\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/network-configuration. # Network Configuration\n\nA Core Cell can be made up of:\n\n* multiple subnets (recommended)\n* a single subnet\n\n## A Core Cell with Multiple Subnets <a id=\"a-core-cell-with-multiple-subnets\"></a>\n\nIt is recommended to have a two-layer subnet which is used in general web services such as DB + AppServer and Proxy Web Servers. This design of the subnet has more advantages on the security.\n\nSince monitoring servers are also required for managing all servers as another layer, the following section describes how to setup a Core Cell with a three-layer subnet.\n\nThe three-layer subnet consists of the following:\n\n* CN Subnet\n* PN Subnet\n* Management (Mgmt) Subnet\n\n### CN Subnet <a id=\"cn-subnet\"></a>\n\nA CN Subnet consists of CN servers in Core Cells. The working CN in a Core Cell is only one, but spare one should be prepared for high availability. IP/Port of all CNs within the Core Cell Network (CCN) must be opened to each other because they try to connect to the others from the outside of the Core Cell. (This connection information can be received from Kairos operators.) The internal communication with other subnets in the Core Cell requires to open default port (32323: default Kaia P2P port number) in order to connect to PNs of the PN Subnet. Furthermore, it is necessary to open other ports such as the CN monitoring port (61001) for the monitoring server and the SSH port (22) for the management purpose. If the multichannel feature is used, another port (32324: default multichannel port) should be opened as well.\n\n![CN Subnet](/img/nodes/cn_subnet.png)\n\n| Origin Subnet | Target Subnet | Ingress | Egress |\n| :--- | :--- | :--- | :--- |\n| CN Subnet | PN Subnet | P2P: 32323 (32324 for multichannel) | All |\n| CN Subnet | Mgmt Subnet | SSH: 22, Monitoring: 61001 | All |\n| CN Subnet | Public (Internet) | each CN's IP and P2P port | All |\n\n### PN Subnet <a id=\"pn-subnet\"></a>\n\nA PN Subnet consists of the PN servers to provide services in order to connect to the external ENs.\n\nA PN subnet is connected to the following nodes:\n\n* CNs in Core Cells\n* Some PNs of other Core Cells\n* Core Cell Management Servers (Mgmt, Monitoring)\n* EN nodes\n\n![PN Subnet](/img/nodes/pn_subnet.png)\n\n| Origin Subnet | Target Subnet | Ingress | Egress |\n| :--- | :--- | :--- | :--- |\n| PN Subnet | CN Subnet | P2P: 32323 (32324 for multichannel) | All |\n| PN Subnet | Mgmt Subnet | SSH: 22, Monitoring: 61001 | All |\n| PN Subnet | Public (Internet) | P2P: 32323 | All |\n\n### Mgmt Subnet <a id=\"mgmt-subnet\"></a>\n\nA Mgmt Subnet is a gateway subnet for the operator to enter into the Core Cell nodes through ssh. A VPN server may be necessary to make the connection together with a monitoring server and a management server installed with a tool to manage the Core Cell nodes.\n\n![Management Subnet](/img/nodes/admin_subnet.png)\n\n| Origin Subnet | Target Subnet | Ingress | Egress |\n| :--- | :--- | :--- | :--- |\n| Mgmt Subnet | CN Subnet | All | All |\n| Mgmt Subnet | PN Subnet | All | All |\n| Mgmt Subnet | Public (Internet) | VPN (tcp): 443, VPN (udp): 1194 | All |\n\n## A Core Cell with a Single Subnet <a id=\"a-core-cell-with-a-single-subnet\"></a>\n\nA single subnet of a Core Cell is built for the development/test purpose or under the difficult circumstances to create multiple subnets.\n\nAll nodes are setup under a single CC subnet. Firewall setup is also necessary for the CN to connect to other CNs within the CNN using P2P port (32323, 32324 for multichannel option). The P2P port of the PN is opened to connect with ENs in Endpoint Node Network (ENN) and PNs in the Core Cell Network (CNN). Additionally, an optional VPN and monitoring servers are required to be managed remotely.\n\n![CC with a Single Subnet](/img/nodes/cc_single_subnet.png)\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/node-security. # Node Security\n\nNode security is a critical aspect of a secure blockchain network. Depending on the type of node, the operator needs to pay attention to security.\n\n- Consensus Node (CN): CNs are responsible for proposing and validating new blocks. A compromised CN can create malicious blocks or disrupt the blockchain. Certainly, the misbehaviour of a few nodes is blocked by the BFT consensus. However, they can still cause bad blocks or round changes that degrade the stability of the network. Therefore, core cell operators should maintain their nodes responsibly.\n- Proxy Node (PN): PNs communicate with nodes on the Internet on behalf of CNs. While a PN does not sign blocks by itself, a security breach of a PN can damage the network. Its p2p key can be used to connect to the CN's restrictive network. A compromised PN can also neutralise the transaction filtering such as the spam filter.\n- Endpoint Node (EN): ENs provide public access to the network for the applications. While an EN has no authority to manipulate the blocks, a security breach of an EN can pose trust issues. A compromised EN can serve false information including block data and account states. It can drop or censor incoming transactions if the app is directly connected to the EN.\n\n## Operation security\n\nFollow the security best practices whenever possible. To list a few:\n\n- Keep the operating systems and installed software up-to-date.\n- Enhance SSH security by disabling remote root login, switching off password-based login, and opting for public-key authentication.\n- Always operate nodes on dedicated machines. To reduce the risk of malware via supply chain attacks, refrain from installing other software, especially the ones that connect to the Internet. The machine or virtual machine must be used for node operation purposes only.\n- Install firewalls. Keep the open ports minimal and whitelist the maintenance and operator IP addresses. Be careful when opening the SSH, RPC, or debug ports. For CNs and PNs, the p2p port should be restricted to an explicit list of peer CN and PN IPs. Even if the p2p stack has a vulnerability the attack opportunity is effectively blocked or restricted to the known nodes.\n- Prioritize cloud security. When the node is operating on cloud virtual machines, properly manage the cloud accounts (e.g. AWS IAM roles) according to the cloud provider's best practices. The cloud accounts may not have access to SSH, but they can copy the disk contents or open a serial console.\n\n## Key security\n\nThere are two major cryptographic keys managed by a node.\n\n- Node key or p2p key: A 32-byte secp256k1 ECDSA private key. It's used in the p2p rlpx communication as well as signing the blocks.\n- BLS node key: A 32-byte BLS12-381 private key. It's used to sign the RANDAO field in the blocks.\n\nBecause the signing must happen automatically unattended, those keys have to be stored on the disk or entered via the command line. At this point, node security is critical in protecting the keys from theft.\n\nIn the future, the nodes could support storing the keys in an external provider such as key management systems (KMS) or hardware security modules (HSM). Note that node security is still important even with these key management mechanisms. Although the keys cannot be copied, a compromised node can still initiate the signing of malicious payloads.\nOn top of key theft, key loss is also a risk to manage. It is recommended to backup the node keys in an encrypted keystore file, and preserve in an offline storage.\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/core-cell/system-requirements. # System Requirements\n\n## H/W Specification <a id=\"h-w-specification\"></a>\n\nThe network performance is measured based on the worst hardware specification within the network. According to the blockchain network structure, it is only possible to be scaled up vertically \\(increasing hardware capacity\\). Hence, it is recommended that all the nodes within the network should have the best hardwares having the similar specifications with each other at least.\n\nIf you're curious about the rationale of this hardware spec, the medium article [Determining optimal hardware specs for Kaia node operators](https://klaytn.foundation/node-operator-optimal-specs/) would help you understand.\n\nThe following sections show the recommended specifications for both CNs and PNs.\n\n### Bare-metal Server <a id=\"bare-metal-server\"></a>\n\n| Category | Specification |\n| :--- | :--- |\n| Server | Intel® Server System [M50CYP1UR212](https://www.intel.sg/content/www/xa/en/products/sku/214842/intel-server-system-m50cyp1ur212/specifications.html) |\n| CPU | Intel® Xeon 8358 2.60 GHz \\(32-core/64-thread\\) |\n| Memory | 128GB \\(32GB \\* 4\\) |\n| Storage | 4TB (or larger size) SSD (The preferred storage size and configuration could differ depending on the chain data size. Please consult the Kaia Team for more information.) |\n\nNote that this is a recommended hardware specification for CNs and PNs, not an exact requirement. Any physical machine with similar hardware configurations would be sufficient to operate a CN or a PN.\n\nYou can use and apply a live-pruning option to use live-pruning DB. For more details, please refer https://docs.kaia.io/learn/storage/live-pruning/. However, note that live-pruning spec is not recommended for CNs but this may change in the future.\n\n### Cloud VM <a id=\"cloud-vm\"></a>\n\n#### Recommended Specification for AWS<a id=\"recommended-specification-for-aws\"></a>\n\n| Node Type | Model | vCPU | Memory \\(GiB\\) | Storage size \\(GiB\\) | Storage speed \\(IOPS\\) | Price \\(Seoul region, USD/h\\) |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| CN | m6i.8xlarge  | 32 | 128 | 4,000 (Minimum) | 9,000 | 1.888 |\n| PN | m6i.4xlarge  | 16 | 64 | 4,000 (Minimum) | 9,000 | 0.944 |\n| PN (with Live Pruning DB) | m6i.2xlarge  | 8 | 32 | 3,500 (Minimum) | 9,000 | 0.472 |\n\n\nThis storage specification is derived from AWS EBS SSD (gp3) specification. \n\nThe information above is from [https://aws.amazon.com/ec2/instance-types/](https://aws.amazon.com/ec2/instance-types/) and [https://aws.amazon.com/ec2/pricing/on-demand/](https://aws.amazon.com/ec2/pricing/on-demand/) and may be changed by AWS.\n\n#### Recommended Specification for Azure<a id=\"recommended-specification-for-azure\"></a>\n\n| Node Type | Model | vCPU | Memory \\(GiB\\) | Storage type \\(GiB\\) | Storage speed \\(IOPS\\) | Price \\(Korea Central, USD/h\\) |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| CN | D32s v5 | 32 | 128 | P50 (4096) | 7500 | 1.888 |\n| PN | D16s v5 | 16 | 64 | P50 (4096) | 7500 | 0.944 |\n| PN (with Live Pruning DB) | D8s v5 | 8 | 32 | P50 (4096) | 7500 | 0.472 |\n\nThis storage specification is derived from Azure Premium Disk specification. \n\nThe information above is from [https://azure.microsoft.com/en-us/pricing/details/virtual-machines/series/](https://azure.microsoft.com/en-us/pricing/details/virtual-machines/series/) and [https://azure.microsoft.com/en-us/pricing/details/managed-disks/#pricing](https://azure.microsoft.com/en-us/pricing/details/managed-disks/#pricing) and may be changed by Microsoft.\n\n#### Recommended Specification for GCP<a id=\"recommended-specification-for-gcp\"></a>\n\n| Node Type | Model | vCPU | Memory \\(GiB\\) | Storage type \\(GiB\\) | Storage speed \\(IOPS\\) | Price \\(asia-northeast3, USD/h\\) |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| CN | n2-standard-32 | 32 | 128 | 4,000 (Minimum) | 7500 | 2.032486 |\n| PN | n2-standard-16 | 16 | 64 | 4,000 (Minimum) | 7500 | 1.016243 |\n| PN (with Live Pruning DB) | n2-standard-8 | 8 | 32 | 3,500 (Minimum) | 7500 | 0.508121 |\n\nThe information above is from [https://cloud.google.com/compute/vm-instance-pricing#general-purpose_machine_type_family/](https://cloud.google.com/compute/vm-instance-pricing#general-purpose_machine_type_family/) and [https://cloud.google.com/storage/pricing#asia](https://cloud.google.com/storage/pricing#asia) and may be changed by Google.\n\n## Storage Requirements <a id=\"storage-requirements\"></a>\n\nAssuming 100 TPS in average, 300 bytes average transaction size, and 1-second block latency, the expected daily storage requirement is about 2.5 GB/day \\(=300x100x86400\\).\n\n## Operating System <a id=\"operating-system\"></a>\n\nRecommended environment is compatible with RHEL (7.8 or later).\nKaia binaries are fully tested on Amazon Linux 2, but they should work on other linux-based environments as well. macOS binaries are also provided for development purpose.\n",
    "Current Website Url is https://docs.kaia.io/nodes/downloads. ---\nsidebar_label: Node Package Downloads\n---\n\n#\n<NodePackageDownloads></NodePackageDownloads>\n\n## Get the Sources <a id=\"get-the-sources\"></a>\nYou can retrieve the source code through Git. Documentation is hosted on GoDoc.\n\n- [github/kaia](https://github.com/kaiachain/kaia)\n- [godoc/kaia](https://godoc.org/github.com/kaiachain/kaia)\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node/docker-setup. # Run EN using docker\n\n## Download the image\n\nChoose an image tag from https://hub.docker.com/r/kaiachain/kaia/tags. `kaiachain/kaia:latest` is the recent release version. But you can choose a specific version. Currently, only linux/amd64 platform is supported. The container might not work correctly in Windows or Mac hosts.\n\n```sh\ndocker pull kaiachain/kaia:latest  # Latest release\ndocker pull kaiachain/kaia:v1.0.2  # Specific version\n```\n\n## Prepare configuration file\n\nYou can start from the existing configuration file. To obtain the template `kend.conf` configuration file,\n\n```sh\nmkdir -p conf\ndocker run --rm kaiachain/kaia:latest cat /klaytn-docker-pkg/conf/kend.conf > conf/kend.conf\n```\n\nThen edit the configuration. At least the `DATA_DIR` and `LOG_DIR` has to be specified. This guide will assume `/var/kend/data`.\n\n```sh\necho \"DATA_DIR=/var/kend/data\" >> conf/kend.conf\necho \"LOG_DIR=/var/kend/logs\" >> conf/kend.conf\n```\n\n### (Optional) Download Chaindata Snapshot\n\nSynching from the genesis block is time-consuming. You may use [Chaindata Snapshot](../../misc/operation/chaindata-snapshot) to skip the [Full Sync](../../learn/storage/block-sync#full-sync) process. Download and decompress the chaindata snapshot. Then mount the decompressed directory to the container.\n\n## Start the container\n\nExpose the RPC port, which is 8551 unless you have modified in the `kend.conf`. Mount the configuration directory `conf/` and chaindata directory `data/`. Then run `kend start` to start the daemon and `tail -f` to print the logs.\n\n```sh\nmkdir -p data\ndocker run -d --name ken \\\n  -p 8551:8551 \\\n  -v $(pwd)/conf:/klaytn-docker-pkg/conf \\\n  -v $(pwd)/data:/var/kend/data \\\n  kaiachain/kaia:latest \\\n  /bin/bash -c \"kend start && touch /var/kend/logs/kend.out && tail -f /var/kend/logs/kend.out\"\n```\n\n## Attaching to the console\n\n```\ndocker exec -it ken ken attach --datadir /var/kend/data\n```\n\n## Stopping the container\n\nTo prevent chaindata corruption, gracefully shut down the `ken`.\n\n```\ndocker exec -it ken kend stop\ndocker stop ken\ndocker rm ken\n```",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node. # Endpoint Node\n\n## Intended Audience <a id=\"intended-audience\"></a>\n\n- Anyone who wants to send transactions or query the state of Kaia network using [Kaia APIs](../../references/json-rpc/klay/account-created) needs to do so via an Endpoint Node.\n- Endpoint Nodes are the interface to the Kaia Network.  \n\n## Endpoint Node Overview <a id=\"endpoint-node-overview\"></a>\n\nAn Endpoint Node has the following roles and functions.\n\n- Synchronize the blockchain data. \n- Validate the blocks newly received.\n- Handles query requests.\n- Transmits transaction requests to the Proxy Nodes.\n\nThe Endpoint Node install binary comes with the following interfaces and utilities.\n\n- JSON-RPC APIs: JSON-RPC server runs inside the node, and it exposes [APIs](../../references/json-rpc/klay/account-created) for Blockchain Application development. It has several node management APIs as well.\n- Command-line Interface: Provides account management and node configuration functions. An interactive JavaScript console is also provided, that is attached to the node. JavaScript console implements most of the [caver-js APIs](../../references/sdk/caver-js/caver-js). \n\n\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node/install-endpoint-nodes. # Install Endpoint Nodes\n\n## Download <a id=\"download\"></a>\n\nYou can download the latest version of the EN on [Download](../downloads/downloads) page.\n\n## Installation\n\n### Linux Archive Distribution <a id=\"linux-archive-distribution\"></a>\n\nThe archive file consists of the executable binary and the configuration file structured as follows.\n\n**Note**: Do NOT alter the file structure or file name. If you change it, the node may not function correctly.\n\n```text\n- bin\n  |- ken\n  |- kend\n- conf\n  |- kend.conf\n```\n\n| File Name | File Description |\n| :--- | :--- |\n| bin/ken | EN executable file |\n| bin/kend | EN start/termination script file |\n| conf/kend.conf | EN configuration file |\n\nThe installation is the uncompression of the downloaded package where you want to install the package.\n\n```text\n$ tar zxf ken-vX.X.X-linux-amd64.tar.gz\n```\n\nOr,\n\n```text\n$ tar zxf ken-baobab-vX.X.X-linux-amd64.tar.gz\n```\n\n**Note**: it is recommended that the uncompressed directory `ken-linux-amd64/bin` path should be added to the environment variable `$PATH` to run the `ken` and `kend` globally. As an example,\n\n```text\n$ export PATH=$PATH:~/downloaded/path/ken-linux-amd64/bin\n```\n\nThe other sections assume that the path is added to the variable.\n\n### RPM Distribution \\(RHEL/CentOS/Fedora\\) <a id=\"rpm-rhel-centos-fedora\"></a>\n\nYou can install the downloaded RPM file with the following `yum` command.\n\n```text\n$ yum install kend-vX.X.X.el7.x86_64.rpm\n```\n\nOr,\n\n```text\n$ yum install kend-baobab-vX.X.X.el7.x86_64.rpm\n```\n\n### Install from Kaia Yum Repo <a id=\"install-from-kaia-yum-repo\"></a>\n\nAlternatively, you can install `kend` from the Kaia Yum repo, run:\n\n```bash\n$ sudo curl -o /etc/yum.repos.d/kaia.repo https://packages.kaia.io/config/rhel/7/kaia.repo && sudo yum install kend\n```\n\n### Installed Location <a id=\"installed-location\"></a>\n\nThe installed files are located as follows.\n\n| File Name | Location |\n| :--- | :--- |\n| ken | /usr/bin/ken |\n| kend.conf | /etc/kend/conf/kend.conf |\n\n## Configuration <a id=\"configuration\"></a>\n\nThe EN configuration is to create a data directory and to set up the environment variables on the configuration file `kend.conf`.\n\n1. Create the EN data directory.\n2. Configure the EN with `kend.conf`.\n\n### EN Data Directory Creation <a id=\"en-data-directory-creation\"></a>\n\nConsidering the fact that the size of Kaia blockchain data keeps increasing, it is recommended to use a big enough storage. You need to create the directory on your desired path.\n\n```text\n$ sudo mkdir -p /var/kend/data\n```\n\n### Update the Configuration File <a id=\"update-the-configuration-file\"></a>\n\nConfiguration File Location:\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/ken-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kend/conf/`.\n\n#### Add Data Directory  <a id=\"add-data-directory\"></a>\n\nYou should update the the data directory environment variable `$DATA_DIR` on the configuration file `kend.conf`.\n\n```text\nDATA_DIR=/var/kend/data\n```\n\n### (Optional) Download Chaindata Snapshot\n\nSynching from the genesis block is time-consuming. You may use [Chaindata Snapshot](../../misc/operation/chaindata-snapshot) to skip the [Full Sync](../../learn/storage/block-sync#full-sync) process.\n\n## Startup the EN <a id=\"startup-the-en\"></a>\n\nYou can start or stop the Endpoint Node using the following commands.\n\n**start**\n\n```bash\n$ kend start\nStarting kend: OK\n```\n\n**stop**\n\n```bash\n$ kend stop\nShutting down kend: Killed\n```\n\n**status**\n\n```bash\n$ kend status\nkend is running\n```\n\n## Testing the Installation <a id=\"testing-the-installation\"></a>\n\nIt is time to check that Endpoint Node is successfully installed and it is working as expected after installation.\n\n### Process Status <a id=\"process-status\"></a>\n\nIt is possible to check the status of EN's process using the status commands `systemctl` and `kend`.\n\n#### systemctl <a id=\"systemctl\"></a>\n\n`systemctl` is installed along with the RPM, and the status of EN can be checked as follows.\n\n```bash\n$ systemctl status kend.service\n● kend.service - (null)\n   Loaded: loaded (/etc/rc.d/init.d/kend; bad; vendor preset: disabled)\n   Active: active (running) since Wed 2019-01-09 11:42:39 UTC; 1 months 4 days ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 29636 ExecStart=/etc/rc.d/init.d/kend start (code=exited, status=0/SUCCESS)\n Main PID: 29641 (ken)\n   CGroup: /system.slice/kend.service\n           └─29641 /usr/local/bin/ken --networkid 1000 --datadir /kend_home --port 32323 --srvtype fasthttp --metrics --prometheus --verbosity 3 --txpool.global...\n\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Starting (null)...\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal kend[29636]: Starting kend: [  OK  ]\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Started (null).\n```\n\nYou can check the current status such as `Active: active (running)` in the example above.\n\n#### kend <a id=\"kend\"></a>\n\n`kend` is installed along with the package, and the status of EN can be checked as follows.\n\n```bash\n$ kend status\nkend is running\n```\n\n### Logs <a id=\"logs\"></a>\n\nThe log is stored in `kend.out` file located in the path defined in the `LOG_DIR` field of the `kend.conf` file. When the node works properly, you can see that each block is imported per second as follows.\n\nExample:\n\n```bash\n$ tail kend.out\nINFO[02/13,07:02:24 Z] [35] Commit new mining work                    number=11572924 txs=0 elapsed=488.336µs\nINFO[02/13,07:02:25 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.800ms   mgasps=0.000       number=11572924 hash=f46d09…ffb2dc cache=1.59mB\nINFO[02/13,07:02:25 Z] [35] Commit new mining work                    number=11572925 txs=0 elapsed=460.485µs\nINFO[02/13,07:02:25 Z] [35] 🔗 block reached canonical chain           number=11572919 hash=01e889…524f02\nINFO[02/13,07:02:26 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=1fabd3…af66fe number=11572925\nINFO[02/13,07:02:26 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.777ms   mgasps=0.000       number=11572925 hash=1fabd3…af66fe cache=1.59mB\nINFO[02/13,07:02:26 Z] [35] Commit new mining work                    number=11572926 txs=0 elapsed=458.665µs\nINFO[02/13,07:02:27 Z] [14] Committed                                 address=0x1d4E05BB72677cB8fa576149c945b57d13F855e4 hash=60b9aa…94f648 number=11572926\nINFO[02/13,07:02:27 Z] [5] Imported new chain segment                blocks=1 txs=0 mgas=0.000     elapsed=1.783ms   mgasps=0.000       number=11572926 hash=60b9aa…94f648 cache=1.59mB\nINFO[02/13,07:02:27 Z] [35] Commit new mining work      \n```\n\n### Queries <a id=\"queries\"></a>\n\n#### ken console <a id=\"ken-console\"></a>\n\nKaia provides a CLI client: `ken console`. Another way of using the client is to connect to the process via IPC (inter-process communication). The IPC file `klay.ipc` is located in the `DATA_DIR` path on an EN.\n\nPlease execute the following command and check out the result.\n\n```text\n$ ken attach --datadir /var/kend/data\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: /var/kend/data\n modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n >\n```\n\nYou can check the usable commands on [API Document](../../../references/json-rpc/klay/account-created)\n\nThe useful APIs to check the status of EN:\n\n* `kaia.blockNumber` (to get the latest block number)\n* `net.peerCount` (to get the number of the connected Kaia nodes currently)\n\n#### kaia.blockNumber <a id=\"kaia-blocknumber\"></a>\n\nYou can get the latest block number to see if blocks are propagated properly.\n\n```text\n> kaia.blockNumber\n11573819\n```\n\n#### net.peerCount <a id=\"net-peercount\"></a>\n\n```text\n> net.peerCount\n14\n```\n\nThe above command line returns the number of nodes that the EN connects to.\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node/json-rpc-apis. # JSON-RPC APIs\n\nEndpoint Node exposes JSON-RPC APIs. You can enable/disable APIs as follows. For the detailed API specification, please refer to the [JSON-RPC APIs](../../../references/json-rpc/klay/account-created). \n\n**NOTE**: Offering an API over the HTTP (`rpc`) or WebSocket (`ws`) interfaces will give everyone\naccess to the APIs who can access this interface (DApps, browser tabs, etc). Be careful about which APIs\nyou enable. By default, Kaia enables all APIs over the IPC (`ipc`) interface but for `rpc` and `ws` required modules have to be explicitly enabled.\n\n## Enabling APIs  <a id=\"enabling-apis\"></a>\n\n### From Commandline <a id=\"from-commandline\"></a>\n\nTo offer the APIs over the Kaia RPC endpoints, please specify them with the `--${interface}api`\ncommand-line argument where `${interface}` can be `rpc` for the HTTP endpoint or `ws` for the WebSocket endpoint.\n\n`ipc` offers all APIs over the unix socket (Unix) or named pipe (Windows) endpoint without any flag.\n\nYou can launch a Kaia node with specific APIs you want to add like the example below. But keep in mind that you can't change APIs once you launch the node.\n\nExample) launching a Kaia node with `kaia` and `net` modules enabled:\n\n```shell\n$ ken --rpcapi klay,net --rpc --{other options}\n```\n\nThe HTTP RPC interface must be explicitly enabled using the `--rpc` flag.\n\n### Using Configuration <a id=\"using-configuration\"></a>\n\nPlease update the `RPC_ENABLE`, `RPC_API`, `WS_ENABLE` and  `WS_API` properties in the [Configuration File](../../misc/operation/configuration).\n\n## Querying Enabled APIs <a id=\"querying-enabled-apis\"></a>\n\nTo determine which APIs an interface provides, the `modules` JSON-RPC method can be invoked. For\nexample over an `rpc` interface:\n\n**IPC**\n\n```javascript\n$ ken attach --datadir <DATA_DIR>\nWelcome to the Kaia JavaScript console!\n\n instance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n  datadir: /var/kend/data\n  modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n\n>\n```\n\nwill list all enabled modules in the console output.\n\n```\n  modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n```\n\n**HTTP**\n\n```shell\n$ curl -H \"Content-Type: application/json\" --data '{\"jsonrpc\":\"2.0\",\"method\":\"rpc_modules\",\"params\":[],\"id\":1}' https://public-en-kairos.node.kaia.io\n```\n\nwill give all enabled modules including the version number:\n\n```\n{\n   \"jsonrpc\":\"2.0\",\n   \"id\":1,\n   \"result\":{\n      \"admin\":\"1.0\",\n      \"debug\":\"1.0\",\n      \"klay\":\"1.0\",\n      \"miner\":\"1.0\",\n      \"net\":\"1.0\",\n      \"personal\":\"1.0\",\n      \"rpc\":\"1.0\",\n      \"txpool\":\"1.0\",\n      \"web3\":\"1.0\"\n   }\n}\n```\n\n## Disabling unsafe debug APIs <a id=\"disabling-unsafe-debug-apis\"></a>\n\nSome debug namespace APIs are unsafe/unappropriate to be opened to public.\nWe recommend you to provide the debug namespace APIs to authorized users only.\nHowever, if you want to maintain a public EN and provide debug namespace APIs to the public,\nwe strongly recommend you to set the `rpc.unsafe-debug.disable` flag which will disable APIs\nthat are unsafe/unappropriate to be opened to the public and enable only a subset of the debug namespace APIs.\n\nThe enabled APIs are as follows:\n\n- [VM Tracing](../../../references/json-rpc/debug/trace-bad-block) APIs, however with limited functionality (only [pre-defined tracers](../../../references/json-rpc/debug/trace-bad-block) are allowed. See params/tracingOptions)\n- debug_dumpBlock, debug_dumpStateTrie, debug_getBlockRlp, debug_getModifiedAccountsByHash, debug_getModifiedAccountsByNumber, debug_getBadBlocks, debug_getModifiedStorageNodesByNumber\n- debug_metrics\n\nTo set the `rpc.unsafe-debug.disable` flag, append the following line in the `kend.conf` file.\n\n```\nADDITIONAL=\"$ADDITIONAL --rpc.unsafe-debug.disable\"\n```\n",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node/ken-cli-commands. # ken CLI Commands\n\n```bash\nUSAGE:\n   ken [options] command [command options] [arguments...]\n```\n\n## Commands\n\n`ken`has the following commands.\n\n```bash\nCOMMANDS:\n   account     Manage accounts\n   attach      Start an interactive JavaScript environment (connect to node)\n   console     Start an interactive JavaScript environment\n   dumpconfig  Show configuration values\n   dumpgenesis Dump genesis block JSON configuration to stdout (This command is supoported from Kaia v1.7.0.)\n   init        Bootstrap and initialize a new genesis block\n   snapshot    A set of commands based on the snapshot\n   version     Show version number\n   help, h     Shows a list of commands or help for one command\n```\n\nTo get a detailed usage guideline for each command, give -h option.\n\n```bash\n$ ken account -h\nManage accounts, list all existing accounts, import a private key into a new\naccount, create a new account or update an existing account.\n ...\nKeys are stored under <DATADIR>/keystore.\nIt is safe to transfer the entire directory or the individual keys therein\nbetween kaia nodes by simply copying.\n\nMake sure you backup your keys regularly.\n\nUSAGE:\n   ken account command [command options] [arguments...]\n\nCOMMANDS:\n     list    Print summary of existing accounts\n     new     Create a new account\n     update  Update an existing account\n     import  Import a private key into a new account\n```\n\n```bash\n$ ken init -h\ninit [command options] [arguments...]\n\nThe init command initializes a new genesis block and definition for the network.\nThis is a destructive action and changes the network in which you will be\nparticipating.\n ...\n```\n\n## JavaScript Console\n\nKaia Endpoint Node comes with JavaScript console. From the console command line, you can initiate part of Kaia API calls to your EN. To attach to the JavaScript console, execute the following command.\n\n```bash\n$ ken attach --datadir ~/kend_home\nWelcome to the Kaia JavaScript console\n\n!instance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kend_home\n modules: admin:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n\n >\n```\n\nattach command connects to the running node, while console command launches a node and connects to it.\n\n```bash\n   attach      Start an interactive JavaScript environment (connect to node)\n   console     Start an interactive JavaScript environment\n```\n\n### Module APIs\n\nIf you type the module name on the console prompt, you will see the available properties and functions of the module. For the details of functions, please see [Kaia API](../../../references/json-rpc/klay/account-created).\n\n```javascript\n> personal\n{\n  listAccounts: [...],\n  listWallets: [...],\n  deriveAccount: function(),\n  ecRecover: function(),\n  getListAccounts: function(callback),\n  getListWallets: function(callback),\n  importRawKey: function(),\n  lockAccount: function(),\n  ...\n}\n\n> personal.listAccounts\n[\"0x960dba2500ab529693ef8e299210768aa0d55ec8\", \"0x09a04dc9ac3cd92de5ff0d45ae50ff1b618305d9\", \"0x36662211c072dadbf5fc1e087ddebd36df986abd\", \"0xbf9683cf04520eeba6d936a3478de29437c5d048\"]\n> \n```",
    "Current Website Url is https://docs.kaia.io/nodes/endpoint-node/system-requirements. # System Requirements\n\nRunning an Endpoint Node (EN) requires relatively higher hardware specifications compared to the ones for Ethereum or other blockchains, because EN has to validate blocks generated by the full-fledged Consensus Nodes equipped with enterprise-grade hardware.\n\nFor the ENs, the following specifications are recommended.\n\n## H/W Specification <a id=\"h-w-specification\"></a>\n\n### Cloud VM <a id=\"cloud-vm\"></a>\n\n#### Recommended Specification <a id=\"recommended-specification-based-on-aws\"></a>\n\n| vCPU | Memory (GiB) | Storage (GiB) | Disk Bandwidth (Mbps) | Network Bandwidth (Gbps) |\n| :--- | :--- | :--- | :--- | :--- |\n| 8 | 64 | > 4,000 | 3,500 | Up to 10 |\n\n### Bare-metal Machine <a id=\"bare-metal-machine\"></a>\n\nWe do not specify the exact physical machine specification for EN, but any physical machine having hardware configuration similar to the one in the Cloud VM section would be sufficient to operate an EN.\n\n## Storage Requirements <a id=\"storage-requirements\"></a>\n\nAssuming 100 TPS in average,  300 bytes average transaction size, and 1-second block latency, the expected EN daily storage requirement is 2.5 GB/day (=300x100x86400).\n\n## Operating System <a id=\"operating-system\"></a>\n\nRecommended environment is [Amazon Linux 2](https://aws.amazon.com/ko/about-aws/whats-new/2017/12/introducing-amazon-linux-2/).\nKaia binaries are fully tested on Amazon Linux 2, but they should work on other linux-based environments as well. \nmacOS binaries are also provided for development purpose. \n\n",
    "Current Website Url is https://docs.kaia.io/nodes. # About Kaia Nodes\n\nThe Kaia network is comprised of three types of nodes:\n\n- Consensus Node (CN): CNs are responsible for validating transactions and producing new blocks.\n- Proxy Node (PN): PNs relay transactions between CNs and ENs.\n- Endpoint Node (EN): ENs provide public access to the Kaia network.\n\nTo participate in consensus and governance, you are required to run a CN. CNs must meet certain hardware and software requirements, and they must stake KAIA tokens.\n\nYou can also run a PN or EN to support the Kaia network. PNs and ENs do not require staking, but they do require some technical expertise and resources.\n\nThis section provides all the necessary information to set up and operate an Endpoint Node, and contribute to the Kaia network or configure and run a Consensus Node to participation in Kaia's network governance.",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/anchoring. # Use Data Anchoring\n\nAs explained in the design section, Service Chain supports the data anchoring feature.\nThis page shows how to enable the anchoring function.\nIf it is enabled, SCN anchors periodically the child chain block data to the parent chain as proof of existence and immutability. \nThis ensures the security and credibility of the service chain.\n\n## Enable Anchoring <a id=\"enable-anchoring\"></a>\n\n### Check Parent Operator of SCN <a id=\"check-parent-operator-of-scn\"></a>\nIf you have installed and run an SCN successfully, the parent chain operator account should be generated. \nYou can provide a keystore file that you want to use as a parent operator, or if not provided, the SCN will generate the key for you. \nYou can check the parent operator address via RPC API, `subbridge_parentOperator`.\n\n```\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 servicechain:1.0 txpool:1.0\n > subbridge.parentOperator\n \"0x726e5C8705892989DAB1E9982FBE0B0A92eC84Bf\"\n\n```\n*This parent operator account address is derived from a keystore file in `$dataDIR/parent_bridge_account` directory.*\n\n\n### Add KAIA to Parent Operator account<a id=\"add-kaia-to-parent-operator-account\"></a>\nWhen SCN anchors the block data, SCN makes an anchoring transaction as a parent operator.\nTherefore the account needs KAIA to pay the transaction fee. You should add enough KAIA to the parent operator account.\n\n### Enable Anchoring <a id=\"enable-anchoring\"></a>\nAfter sending KAIA, you can check the balance like below.\n```javascript\n> subbridge.parentOperatorBalance\n1e+50\n```\n\nThen you can enable anchoring via RPC API, `subbridge.anchoring`, like below.\nYou can refer to [subbridge APIs](../../../references/json-rpc/subbridge/anchoring) for more details.\n```\n> subbridge.anchoring(true)\ntrue\n```\n\n## Check Anchoring Data <a id=\"check-anchoring-data\"></a>\nIf the anchoring feature is enabled, SCN will periodically anchor the block data to the main chain.\nYou can check the anchored data like below.\n\n### Sub-Bridge <a id=\"sub-bridge\"></a>\nIn Sub-Bridge, You can check the latest anchored block number like below.\nYou can refer to [subbridge APIs](../../../references/json-rpc/subbridge/latest-anchored-block-number) for more details.\n```javascript\n> subbridge.latestAnchoredBlockNumber\n71025\n```\n\nAlso, you can find the anchoring transaction hash by the service chain block number like below.\n```javascript\n> subbridge.getAnchoringTxHashByBlockNumber(1055)\n\"0x9a68591c0faa138707a90a7506840c562328aeb7621ac0561467c371b0322d51\"\n```\n\n### Main-Bridge <a id=\"sub-bridge\"></a>\nIn Main-Bridge, if chain indexing option is enabled, you can find the anchoring tx hash by a service chain block hash like below.\nYou can refer to [mainbridge APIs](../../../references/json-rpc/mainbridge/convert-child-chain-block-hash-to-parent-chain-tx-hash) for more details.\n\n```javascript\n> mainbridge.convertChildChainBlockHashToParentChainTxHash(\"0xeadc6a3a29a20c13824b5df1ba05cca1ed248d046382a4f2792aac8a6e0d1880\")\n\"0x9a68591c0faa138707a90a7506840c562328aeb7621ac0561467c371b0322d51\"\n```\n\nYou can get the decoded anchoring data by anchoring transaction hash like below.\n```javascript\n> kaia.getDecodedAnchoringTransactionByHash(\"0x9a68591c0faa138707a90a7506840c562328aeb7621ac0561467c371b0322d51\")\n{\n  BlockCount: 1,\n  BlockHash: \"0xcf5f591836d70a1da8e6bb8e5b2c5739329ca0e535b91e239b332af2e1b7f1f4\",\n  BlockNumber: 1055,\n  ParentHash: \"0x70f6115a5b597f29791d3b5e3f129df54778f69ae669842cc81ec8c432fee37c\",\n  ReceiptHash: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n  StateRootHash: \"0x654773348f77a6788c76c93946340323c9b39399d0aa173f6b23fe082848d056\",\n  TxCount: 0,\n  TxHash: \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\"\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/bridge-configuration. # Connect to main chain \n\nIn this page, we will describe the steps of connecting a Service Chain to the Main Chain. \n\n## EN Configuration - Enable Main-bridge <a id=\"en-configuration-enable-main-bridge\"></a>\n\nYou should enable main-bridge by configuring `kend.conf`.\n\n### Update the Configuration File <a id=\"update-the-configuration-file\"></a>\n\nThe `kend.conf` contains the following main-bridge properties.\n\n| Name | Description |\n| :--- | :--- |\n| MAIN_BRIDGE | Enable bridge service as main bridge for service chain. 1 to enable. |\n| MAIN_BRIDGE_PORT | Bridge listen port. Default: 50505 |\n| MAIN_BRIDGE_INDEXING | Enable indexing of service chain transaction hash for fast access to the service chain data. 1 to enable. |\n\nTo enable main-bridge on EN, you should do like below.\n\n* define `MAIN_BRIDGE`\n* enable RPC/WS.\n* add `mainbridge` API for RPC like the below example.\n\n```text\n# Configuration file for the kend\n\n...\n\n# rpc options setting\nRPC_ENABLE=1 # if this is set, the following options will be used\nRPC_API=\"klay,mainbridge\" # available apis: admin,debug,klay,miner,net,personal,rpc,txpool,web3,mainbridge,subbridge\nRPC_PORT=8551\nRPC_ADDR=\"0.0.0.0\"\nRPC_CORSDOMAIN=\"*\"\nRPC_VHOSTS=\"*\"\n\n# ws options setting\nWS_ENABLE=1 # if this is set, the following options will be used\nWS_API=\"klay\" \nWS_ADDR=\"0.0.0.0\"\nWS_PORT=8552\nWS_ORIGINS=\"*\"\n\n...\n\n# service chain options setting\nMAIN_BRIDGE=1\nMAIN_BRIDGE_PORT=50505\nMAIN_BRIDGE_INDEXING=1\n\n...\n```\n\n## Connect SCN to the Main Chain <a id=\"connect-scn-to-the-main-chain\"></a>\n\nYou need to run an EN of the main chain as a main-bridge. And also you should determine which SCN (Service Chain Consensus Node) as a sub-bridge will connect with the EN.\n\n### Check EN (Main-Bridge) information <a id=\"check-en-(main-bridge)-information\"></a>\n\n#### Open EN Console <a id=\"open-en-console\"></a>\n\nThere are different ways to attach to the EN process. You can check the usable commands on [ken CLI commands](../../../nodes/endpoint-node/ken-cli-commands). This page explains the way to attach to the process via IPC (inter-process communication). The IPC file `klay.ipc` is located in the `DATA_DIR` path on the node.\n\nPlease execute the following command and check out the result. (If you added `mainbridge` API for RPC, you can check the bridge API like below. If there is no `mainbridge` API, you should check [EN Configuration - Enable Main-bridge](#en-configuration-enable-main-bridge) again. )\n\n```bash\n$ ken attach --datadir ~/kend_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\nat block: 11573551 (Wed, 13 Feb 2019 07:12:52 UTC)\n datadir: ~/kend_home\n modules: admin:1.0 mainbridge:1.0 debug:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n >\n```\n\n#### Get the EN's KNI <a id=\"get-the-ens-kni\"></a>\n\nAfter attaching to the process via IPC, you can check the EN's main-bridge KNI like below. You can refer to [Service Chain API](../../../references/json-rpc/subbridge/add-peer).\n\n```javascript\n> mainbridge.nodeInfo\n{\n  kni: \"kni://08b99d2297e0a27ddeb33f3a81b59ea1c065b9adbaff9fefab0d16f65b1a8db22939a104c24447e9aca521c158922ca912476b544baf48995a382d88886e0a37@[::]:50505?discport=0\",\n  id: \"08b99d2297e0a27ddeb33f3a81b59ea1c065b9adbaff9fefab0d16f65b1a8db22939a104c24447e9aca521c158922ca912476b544baf48995a382d88886e0a37\",\n  ip: \"::\",\n  listenAddr: \"[::]:50505\",\n  name: \"-2\",\n  ports: {\n    discovery: 0,\n    listener: 50505\n  },\n  protocols: {\n    servicechain: {\n      config: {\n        chainId: 2018,\n        deriveShaImpl: 0,\n        isBFT: true,\n        istanbul: {...},\n        unitPrice: 0\n      },\n      difficulty: 87860,\n      genesis: \"0x711ce9865492659977abb2758d29f68c2b0c82862d9376f25953579f64f95b58\",\n      head: \"0x0d4b130731f1e7560e4531ac73d55ac8c6daccb178abd86af0d96b7aafded7c5\",\n      network: 1\n    }\n  }\n}\n```\n\nYou should take note of the main-bridge `kni`.\n\n### Connect to the Main Chain <a id=\"connect-to-the-main-chain\"></a>\n\n#### Open SCN Console <a id=\"open-scn-console\"></a>\n\nAttach to the SCN process like below. You should have enabled `subbridge` API for RPC, you can find the subbridge module in the output. If there is no `subbridge` API, you should check [Configuration of the SCN](../install-service-chain#configuration-of-the-scn) again.\n\n```bash\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 servicechain:1.0 txpool:1.0\n >\n```\n\n#### Connect SCN with EN <a id=\"connect-scn-with-en\"></a>\n\nYou can add the EN peer on SCN via IPC like below. The kni is EN's KNI which you noted previously.\n\n```javascript\n > subbridge.addPeer(\"kni://08b99d2297e0a27ddeb33f3a81b59ea1c065b9adbaff9fefab0d16f65b1a8db22939a104c24447e9aca521c158922ca912476b544baf48995a382d88886e0a37@[::]:50505?discport=0\")\n true\n```\n\nAnd then you can check the connected peers like below.\n\n```javascript\n > subbridge.peers\n [{\n     caps: [\"servicechain/1\"],\n     id: \"08b99d2297e0a27ddeb33f3a81b59ea1c065b9adbaff9fefab0d16f65b1a8db22939a104c24447e9aca521c158922ca912476b544baf48995a382d88886e0a37\",\n     name: \"-1\",\n     networks: [{\n         inbound: false,\n         localAddress: \"[::1]:56834\",\n         remoteAddress: \"[::1]:50505\",\n         static: true,\n         trusted: false\n     }],\n     protocols: {\n       servicechain: {\n         head: \"0x47be444be87daaee2989998559049ee8a859540807824dd1db4a80ea6cb42293\",\n         version: 1\n       }\n     }\n }]\n```\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/configuration-files. # Configuration Files\n\nThis document explains the configurable properties of the node. Kaia node package ships with good defaults and requires very little configuration. If you changed any settings of a running node, you must restart the node to reflect the changes.\n\n## SCN Configuration File location <a id=\"scn-configuration-file-location\"></a>\n\n* `kscnd.conf` for configuring the Service Chain Consensus Node\n\nThe configuration file is located in the `conf` directory, whose default location depends on whether or not the installation is from an archive distribution \\(`tar.gz`\\) or a package distribution \\(RPM\\).\n\n* For the archive distribution, the config directory location defaults to `$INSTALL_PATH/kscn-linux-amd64/conf/`.\n* For the package distribution, the config directory defaults to `/etc/kscnd/conf/`.\n\n## Configuration File Format  <a id=\"configuration-file-format\"></a>\n\nBelow is a sample configuration file for the SCN that stores the blockchain data in the default location, which is `~/kscnd_home` with the archive distribution, `/var/kscnd/data` with the package distribution.\n\n```text\n# Configuration file for the kcnd\n\nNETWORK=\n# if you specify NETWORK_ID, a private network is created.\nNETWORK_ID=\nPORT=32323\nSERVER_TYPE=\"fasthttp\"\nSYNCMODE=\"full\"\nVERBOSITY=3\nMAXCONNECTIONS=100\n# LDBCACHESIZE=10240\nREWARDBASE=\"0x0\"\n\n...\n\nDATA_DIR=\nLOG_DIR=$DATA_DIR/logs\n```\n\nThe recommended txpool sizes for SCN are as follows.\n\n```text\nTXPOOL_EXEC_SLOTS_ALL=16384\nTXPOOL_NONEXEC_SLOTS_ALL=16384\nTXPOOL_EXEC_SLOTS_ACCOUNT=16384\nTXPOOL_NONEXEC_SLOTS_ACCOUNT=16384\n```\n\n## Properties <a id=\"properties\"></a>\n\nThe configuration file has the following configurable properties. SCN, SPN and SEN configuration files have the same properties.\n\n| Name | Description |\n| --- | --- |\n| NETWORK | Network name that this node will join.  This value is used when NETWORK_ID is not defined.  (\"mainnet\", \"kairos\") |\n| NETWORK_ID | Kaia network ID.  If you create a local private network, you will define the network ID for your own.  Following IDs are reserved for pre-configured networks.  <br/>8217 : Mainnet <br/>1000 : Aspen test network <br/>1001 : Kairos test network |\n| PORT | P2P port. (Default: \"32323\") |\n| SERVER_TYPE | JSON RPC server type.  (\"http\", \"fasthttp\") |\n| SYNCMODE | Blockchain sync mode.  (\"fast\", \"full\") |\n| VERBOSITY | Logging verbosity.  (0=silent, 1=error, 2=warn, 3=info, 4=debug, 5=detail) |\n| MAXCONNECTIONS | Maximum number of physical connections.  All single-channel peers can have up to MAXCONNECTIONS peers.  All multi-channel peers can have up to MAXCONNECTIONS/2 peers.  Network connection is disabled if it is set to 0. (Default: 10) |\n| LDBCACHESIZE | Size of in-memory cache in LevelDB (MiB). (Default : 768) |\n| REWARDBASE | Account address that will receive block consensus rewards. This property only applies to CN. |\n| TXPOOL_EXEC_SLOTS_ALL | Maximum number of executable transaction slots for all accounts. (Default: 4096) |\n| TXPOOL_NONEXEC_SLOTS_ALL | Maximum number of non-executable transaction slots for all accounts. (Default: 1024) |\n| TXPOOL_EXEC_SLOTS_ACCOUNT | Number of executable transaction slots guaranteed per account. (Default: 16) |\n| TXPOOL_NONEXEC_SLOTS_ACCOUNT | Maximum number of non-executable transaction slots guaranteed per account. (Default: 64) |\n| TXPOOL_LIFE_TIME | Maximum amount of time non-executable transactions is queued. (Default : 30m for SEN, 5m for SCN/SPN) |\n| RPC_ENABLE | Enable the HTTP-RPC server if it is set to 1. |\n| RPC_API | Comma-separated list of APIs offered over the HTTP-RPC interface.  (admin, debug, klay, miner, net, personal, rpc, txpool, web3) |\n| RPC_PORT | HTTP-RPC server listening port. (Default: \"8551\") |\n| RPC_ADDR | HTTP-RPC server listening interface. (Default: \"localhost\") |\n| RPC_CORSDOMAIN | Comma-separated list of domains from which to accept cross-origin requests (browser enforced) |\n| RPC_VHOSTS | Comma-separated list of virtual hostnames from which to accept requests (server enforced). Accepts '*' wildcard. (Default: {\"localhost\"}) |\n| WS_ENABLE | Enable the WS-RPC server if it is set to 1. |\n| WS_API | APIs offered over the WS-RPC interface.  (admin, debug, klay, miner, net, personal, rpc, txpool, web3) |\n| WS_ADDR | WS-RPC server listening interface. |\n| WS_PORT | WS-RPC server listening port. (Default : \"8552\") |\n| WS_ORIGINS | Origins from which to accept websockets requests. (Default: \"localhost\") |\n| SC_MAIN_BRIDGE | Enable main bridge service if it is set to 1. Used for service chain configuration. |\n| SC_MAIN_BRIDGE_PORT | Main bridge listens on this port. (Default : \"50505\") |\n| SC_MAIN_BRIDGE_INDEXING | Enable storing transaction hash of child chain transactions for fast access to child chain data if it is set to 1. |\n| METRICS | Enable metrics collection and reporting if it is set to 1. |\n| PROMETHEUS | Enable prometheus exporter if it is set to 1. |\n| DB_NO_PARALLEL_WRITE | Disable parallel writes of block data to persistent database if it is set to 1. |\n| MULTICHANNEL | Create a dedicated channel for block propagation if it is set to 1. |\n| SUBPORT | Listening sub port number if multichannel option is enabled. (Default : \"32324\") |\n| NO_DISCOVER | Turn off the discovery option if it is set to 1. |\n| BOOTNODES | Comma-separated kni addresses of bootstrap nodes. |\n| ADDITIONAL | For additional command-line options. e.g) --txpool.nolocals |\n| DATA_DIR | Kaia blockchain data folder path. |\n| LOG_DIR | Log folder path. |\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure. # Configure Service Chain\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/genesis. # Genesis File\n\nThis page describes the details of `genesis.json` file.\n\n## Genesis JSON File Structure <a id=\"genesis-json-file-structure\"></a>\n\nThe `genesis.json` file structure is described in the following table.\n\n|             Field Name         |         Description           |\n| ------------------------------ | ----------------------------- |\n| config                         | The blokchain configuration. See the section [Config](#config). |\n| nonce                          | (deprecated) This field is derived from the Ethereum, but not used in Kaia. |\n| timestamp                      | The unix time when a block is created. |\n| extraData                      | The data combined field for signer vanity and RLP-encoded istanbul extra data that contains validator list, proposer seal, and commit seals. |\n| gasLimit                       | The maximum gas amount that used in a block. |\n| difficulty                     | (deprecated) This field is derived from the Ethereum, but not used in Kaia. |\n| mixhash                        | (deprecated) This field is derived from the Ethereum, but not used in Kaia. |\n| coinbase                       | An address to which miner receives the reward. This field is only used for Clique consensus engine. |\n| alloc                          | The predefined accounts. |\n| number                         | The block number field. |\n| gasUsed                        | The amount of the gas which used for a block. |\n| parentHash                     | The hash value of the previous block. |\n\n### Config <a id=\"config\"></a>\n\nThe `config` field stores the information related to the chain.\n\n|           Field Name           |         Description           |\n| ------------------------------ | ----------------------------- |\n| chainId                        | It identifies the current chain and is used for prevention from the replay attack. |\n| istanbulCompatibleBlock        | A block number to which istanbul change is applied. |\n| istanbul, clique               | The type of consensus engine. |\n| unitPrice                      | Unit price. |\n| deriveShaImpl                  | Defines a method to generate transaction hash and receipt hash. |\n| governance                     | Governance information of the network. See the section [Governance](#governance) |\n\n\n### extraData <a id=\"extradata\"></a>\n\nThe field `extraData` is a concatenation of the proposer vanity and the RLP-encoded istanbul extra data:\n\n  - The proposer vanity is 32-byte data which contains arbitrary proposer vanity data.\n  - The rest of the data is RLP-encoded istanbul extra data containing:\n     - Validators: the list of validators in ascending order.\n     - Seal: the proposer signature of the header. For `genesis.json`, it is a byte array initialized with 65 `0x0`.\n     - CommittedSeal: the list of commitment signature seals as consensus proof. For `genesis.json`, it is an empty array.\n\n**Example**\n| Field | Type | Value |\n| ----- | ---- | ----- |\n| Vanity | 32-byte hex string | 0x0000000000000000000000000000000000000000000000000000000000000000 |\n| Validators | []address | [0x48009b4e20ec72aadf306577cbe2eaf54b0ebb16,0x089fcc42fd83baeee4831319375413b8bae3aceb] |\n| Seal | byte array of 65 elements | [0x0,...,0x0] |\n| CommittedSeal | [][]byte  | [] |\n\n`extraData` with the above data is created by\n```\nconcat('0x',Vanity,RLPEncode({Validators,Seal,CommittedSeal}))\n```\nwhere `concat` is a string concatenation function, and `RLPEncode` is a function to convert a given structure to an RLP-encoded string.\n\nWith this function, the output `extraData` for this example is 0x0000000000000000000000000000000000000000000000000000000000000000f86fea9448009b4e20ec72aadf306577cbe2eaf54b0ebb1694089fcc42fd83baeee4831319375413b8bae3acebb8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0.\n\n\n## Consensus Engine <a id=\"consensus-engine\"></a>\n\nThe available consensus engines for Kaia network are Clique and Istanbul. Each engine is explained as follows.\n\n### Clique <a id=\"clique\"></a>\n\nThe `clique` field stores the configuration for Proof-Of-Authority (POA) based sealing.\n\n|          Fields         |          Description         |\n| ----------------------- | ---------------------------- |\n| period                  | The minimum time interval between the consecutive blocks (unit: second). |\n| epoch                   | The number of blocks to reset votes and marked as a checkpoint. |\n\n### Istanbul <a id=\"istanbul\"></a>\n\nThe `istanbul` field stores the configuration for Istanbul based sealing.\n\n|          Fields         |           Description         |\n| ----------------------- | ----------------------------- |\n| epoch                   | The number of blocks to reset votes to be a checkpoint. |\n| policy                  | The block proposer selection policy. [0: Round Robin, 1: Sticky, 2: Weighted Random] |\n| sub                     | Committee size. |\n\n## Governance <a id=\"governance\"></a>\n\nThe `governance` field stores governance information for a network.\n\n|          Fields         |       Description             |\n| ----------------------- | ----------------------------- |\n| governanceMode           | One of three governance modes. [`none`, `single`, `ballot`] |\n| governingNode          | Designated governing node's address. It only works if the governance mode is `single`.  |\n| reward                  | It stores the reward configuration. See the section [Reward](#reward).  |\n\n### Reward <a id=\"reward\"></a>\n\nThe `reward` field stores the information about the network's token economy.\n\n|          Fields         |       Description             |\n| ----------------------- | ----------------------------- |\n| mintingAmount           | Amount of kei minted when a block is generated. Double quotation marks are needed for a value. |\n| ratio                   | Distribution rate for a `CN/KIR/PoC` separated by `/`. The sum of all values has to be 100.  |\n| useGiniCoeff            | Use GINI coefficient or not. |\n| deferredTxFee           | A way to distribute TX fee for a block. |\n| stakingUpdateInterval   | Time interval in block height to update staking information. |\n| proposerUpdateInterval  | Time interval in block height to update proposer information. |\n| minimumStake            | Minimum amount of kei to join Core Cell Operators. |\n\n## Example <a id=\"example\"></a>\n\n```\n{\n    \"config\": {\n        \"chainId\": 2019,\n        \"istanbulCompatibleBlock\": 0,\n        \"istanbul\": {\n            \"epoch\": 604800,\n            \"policy\": 2,\n            \"sub\": 13\n        },\n        \"unitPrice\": 25000000000,\n        \"deriveShaImpl\": 2,\n        \"governance\": {\n            \"governingNode\": \"0x46b0bd6380005952759f605d02a6365552c776f3\",\n            \"governanceMode\": \"single\",\n            \"reward\": {\n                \"mintingAmount\": 6400000000000000000,\n                \"ratio\": \"50/40/10\",\n                \"useGiniCoeff\": true,\n                \"deferredTxFee\": true,\n                \"stakingUpdateInterval\": 86400,\n                \"proposerUpdateInterval\": 3600,\n                \"minimumStake\": 5000000\n            }\n        }\n    },\n    \"nonce\": \"0x0\",\n    \"timestamp\": \"0x5c9af60e\",\n    \"extraData\": \"0x0000000000000000000000000000000000000000000000000000000000000000f89af85494aeae0ab623d4118ac62a2decc386949b5ce67ce29446b0bd6380005952759f605d02a6365552c776f394699b607851c878e29499672f42a769b71f74be8e94e67598eb5831164574c876994d53f63eab4f36d7b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0\",\n    \"gasLimit\": \"0xe8d4a50fff\",\n    \"difficulty\": \"0x1\",\n    \"mixHash\": \"0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365\",\n    \"coinbase\": \"0x0000000000000000000000000000000000000000\",\n    \"alloc\": {\n        \"0000000000000000000000000000000000000400\": {\n            \"code\": \"0x6080604052600436106101505763ffffffff60e00a165627a7a7230582093756fe617053766b158f7c64998c746eb38f0d5431cc50231cc9fb2cd1fd9950029\",\n            \"balance\": \"0x0\"\n        },\n        \"46b0bd6380005952759f605d02a6365552c776f3\": {\n            \"balance\": \"0x446c3b15f9926687d2c40534fdb564000000000000\"\n        },\n        \"699b607851c878e29499672f42a769b71f74be8e\": {\n            \"balance\": \"0x446c3b15f9926687d2c40534fdb564000000000000\"\n        },\n        \"aeae0ab623d4118ac62a2decc386949b5ce67ce2\": {\n            \"balance\": \"0x446c3b15f9926687d2c40534fdb564000000000000\"\n        },\n        \"e67598eb5831164574c876994d53f63eab4f36d7\": {\n            \"balance\": \"0x446c3b15f9926687d2c40534fdb564000000000000\"\n        }\n    },\n    \"number\": \"0x0\",\n    \"gasUsed\": \"0x0\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}\n```\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/kas-anchoring. # Use Data Anchoring with KAS\n\nAs explained in the design section, you can anchor your service chain data to Kaia main chain.\nThis page introduces how to enable data anchoring via [KAS (Kaia API Service)](https://www.klaytnapi.com).\n\nOnce it is turned on, a node in your service chain can periodically anchor its chain data (block data) to Mainnet or Kairos as a proof of existence and immutability of the service chain. \nThis ensures the security and credibility of the service chain.\n\n## Preparation for Using KAS <a id=\"preparation-with-kas\"></a>\nThis section introduces the pre-requisites to use KAS for data anchoring.\n\n### Sign Up KAS (Kaia API Service) <a id=\"sign-up-kas\"></a>\nFirst, you need to sign up KAS on the [KAS console website](https://www.klaytnapi.com) to get a KAS account.\nPlease visit the website above and sign up in KAS.\n\n[![main page](/img/nodes/kas-main-en.png)](https://www.klaytnapi.com)\n\n[![sign up](/img/nodes/kas-signup-en.png)](https://www.klaytnapi.com)\n\n### Create Credential <a id=\"check-credential\"></a>\nAfter login, you can create your credential like below.\nThe `AccessKey ID` and `Secret AccessKey`, or `Authorization` will be used to call KAS APIs.\n\n![credential](/img/nodes/kas-credential-en.png)\n\n## Anchor API <a id=\"anchor-api\"></a>\nKAS provides Anchor API, which is designed for data anchoring and surely it is the one that you are going to use for anchoring task.\n\n![anchor api](/img/nodes/kas-anchor-api-en.png)\n\n## Create Operator Address <a id=\"create-kas-credential\"></a>\nTo anchor service chain data via KAS, there should be a Kaia address, enrolled in KAS, that actually send anchoring transaction to Kaia. So, before you set up your service node, you need to create an Kaia account called \"operator\" via KAS. Please, use KAS console to create this account. \n\nIt is important to be noticed that you must **first select the chain** in Kaia to which you want to anchor your data on **the top right corner of the KAS console page**. You should create an operator for each chain (Mainnet/Kairos). \n\n\n\n![select chain](/img/nodes/kas-select-chain-en.png)\n\nCreate an operator as below.\n\n![create operator](/img/nodes/kas-create-operator-en.png)\n\nThen, you can check your operator list like below.\nPlease note that the address of an operator is required for setting your service chain node.\n\n![create operator](/img/nodes/kas-operator-list-en.png)\n\n## Configure Service Chain Node <a id=\"configure-service-chain-node\"></a>\nAfter obtaining API credentials, Anchor API information (API endpoint and parameters), and an operator account in KAS, then It is time to set up your service chain node.\nYou need to edit the configuration file (`kscnd.conf`, `kspnd.conf`, `ksend.conf`) of your service chain node like below.\n\nYou should set `SC_SUB_BRIDGE=1` and all `SC_KAS_` prefix items.\n\n```bash\n...\n# service chain options setting\n...\nSC_SUB_BRIDGE=1\n...\n\nSC_KAS_ANCHOR=1                                                         # 1: enable, 0: disable\nSC_KAS_ANCHOR_PERIOD=10                                                 # Anchoring block period\nSC_KAS_ANCHOR_URL=\"https://anchor-api.klaytn.com/v1/anchor\"             # Anchor API URL\nSC_KAS_ANCHOR_OPERATOR=\"0x6A3D565C4a2a4cd0Fb3df8EDfb63a151717EA1D7\"     # Operator address\nSC_KAS_ANCHOR_ACCESS_KEY=\"KAJM4BEIR9SKJKAW1G3TT8GX\"                     # Credential Access key\nSC_KAS_ANCHOR_SECRET_KEY=\"KyD5w9ZlZQ7ejj6lDF6elb61u8JH/mXdKqhgr3yF\"     # Credential Secret key\nSC_KAS_ANCHOR_X_CHAIN_ID=1001                                           # Mainnet: 8217, Kairos: 1001\n...\n```\n\n## Run Service Chain Node <a id=\"run-service-chain-node\"></a>\nNow you are good to go. You can run your service chain node.\nYou will see the log message related with KAS Anchor API like below.\n\n```bash\n...\nINFO[09/10,18:09:28 +09] [5] Imported new chain segment                number=86495 hash=5a20d6…cbca1b blocks=1  txs=3 elapsed=2.387ms  trieDBSize=5.10kB mgas=0.063 mgasps=26.383\nINFO[09/10,18:09:28 +09] [53] Anchored a block via KAS                  blkNum=86495\nINFO[09/10,18:09:29 +09] [5] Imported new chain segment                number=86496 hash=8897bc…4ea7e7 blocks=1  txs=3 elapsed=2.158ms  trieDBSize=5.10kB mgas=0.063 mgasps=29.188\nINFO[09/10,18:09:29 +09] [53] Anchored a block via KAS                  blkNum=86496\nINFO[09/10,18:09:30 +09] [5] Imported new chain segment                number=86497 hash=44b319…7d4247 blocks=1  txs=3 elapsed=2.346ms  trieDBSize=5.43kB mgas=0.063 mgasps=26.848\nINFO[09/10,18:09:30 +09] [53] Anchored a block via KAS                  blkNum=86497\nINFO[09/10,18:09:31 +09] [5] Imported new chain segment                number=86498 hash=0b98ba…73d654 blocks=1  txs=3 elapsed=2.235ms  trieDBSize=5.61kB mgas=0.063 mgasps=28.186\nINFO[09/10,18:09:31 +09] [53] Anchored a block via KAS                  blkNum=86498\nINFO[09/10,18:09:32 +09] [5] Imported new chain segment                number=86499 hash=4f01ab…3bc334 blocks=1  txs=3 elapsed=3.319ms  trieDBSize=5.61kB mgas=0.063 mgasps=18.977\nINFO[09/10,18:09:32 +09] [53] Anchored a block via KAS                  blkNum=86499\n...\n```\n\n## List of Transaction <a id=\"list-of-transaction\"></a>\nIn KAS console website, you can see the list of anchoring transactions that the operator of your service chain has sent at \"KAS Console - Service - Anchor - Operators\" menu like below.\n\n![anchoring transaction list](/img/nodes/kas-tx-list-en.png)\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/configure/value-transfer. # Transfer Value\n\nAs explained in the Kaia design section, Service Chain supports value (KAIA, ERC-20, and ERC-721) transfer between parent chain & child chain.\nThis page shows how to enable the value-transfer feature in SCN.\n\nAfter setting up the EN and SCN, the following procedure is required to enable value-transfer between chains.\n\n1. Check the addresses of the bridge operator accounts and add KAIA to the bridge operator accounts.\n2. Deploy the bridge contract to the parent/child chains.\n3. Deploy a token (ERC-20 or 721) contract to the parent/child chains. (If you just need KAIA-transfer, you can skip step 3 & 4.)\n4. Register the token contracts with the bridge contracts on the parent/child chains.\n5. Subscribe to the bridge contracts on the parent/child chains.\n\nBefore we follow the steps, let's take a look at the high-level system architecture to understand the behind of the mechanism.\n\n## System Architecture <a id=\"system-architecture\"></a>\nFigure 1 shows the system architecture of the Service Chain with bridge/token contracts and bridge nodes.\n\nBelow contracts communicate with each other via main/sub-bridge to process user's value transfer requests.\n- Bridge contract\n- ERC-20 contract (if needed)\n- ERC-721 contract (if needed)\n\n![Figure 1. Service chain architecture](/img/nodes/sc_arch.png)\n\n## Bridge Operator Account <a id=\"bridge-operator-account\"></a>\nFor ServiceChain, there are two operator accounts: parent chain bridge operator account, service chain bridge operator account. Each operator account is used to sign transactions.\nIf the transaction moves the value to the parent chain, the parent chain bridge operator account signs the transaction. To the child chain, the child chain bridge operator account is used.\nIf a user submits a \"request value transfer\" transaction, the Sub-bridge creates a \"handle value transfer\" transaction signed by the bridge operator account.\nTherefore, the parent chain bridge operator needs enough KAIA in their balance to pay the transaction fee to the parent chain.\nIf the service chain's gas price is set to non-zero, the service chain bridge operator should have KAIA in their balance as well.\n\n### Keystore and Password file <a id=\"keystore-and-password-file\"></a>\nWhen SCN is booted, the keystore files and password files for the parent/child operators are automatically generated if their keys don't exist.\nIf you want to use a specific account as an operator, you can provide the key. Place the below files in the designated path before booting the SCN.\nThe password file should have a password string of the keystore file.\nThe password file name should be the account address of the corresponding keystore file.\n\n**files**\n- keystore file : ```UTC--2019-10-21T04-05-41.493850000Z--2ed72a9d7fe5da7672fd21567e07302431649b0b```\n- password file : ```0x2eD72a9D7fe5da7672fD21567e07302431649B0B```\n\n**file path**\n- Parent chain bridge operator : $datadir/parent_bridge_account\n- Child chain bridge operator : $datadir/child_bridge_account\n\n```javascript\n> pwd\n/$dataDIR/child_bridge_account\n\n> ls\n0x2eD72a9D7fe5da7672fD21567e07302431649B0B\nUTC--2019-10-21T04-05-41.493850000Z--2ed72a9d7fe5da7672fd21567e07302431649b0b\n\n> cat 0x2eD72a9D7fe5da7672fD21567e07302431649B0B\n%S~f5qqM38cB47jL%\n\n> cat UTC--2019-10-21T04-05-41.493850000Z--2ed72a9d7fe5da7672fd21567e07302431649b0b\n{\"address\":\"2ed72a9d7fe5da7672fd21567e07302431649b0b\",\"crypto\":{\"cipher\":\"aes-128-ctr\",\"ciphertext\":\"6486509e8158bf4984608cbc5562cf2c9a27cd988a98e543731b39251144e633\",\"cipherparams\":{\"iv\":\"96d7e5b6a936278c0797faae6cb3d903\"},\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"n\":262144,\"p\":1,\"r\":8,\"salt\":\"8928ba41b8228af19390ec881c51452fa3ea973ad2c253ca0f5bc9197a8b24c4\"},\"mac\":\"9c8ec63694c20a473e0ea33840e7d16e9f1a20afc52b3244b703a3ac0a66cfa3\"},\"id\":\"9ae10527-7fd3-4aae-a4eb-316af211494e\",\"version\":3}\n```\n\n### Check Bridge Operator Addresses <a id=\"check-bridge-operator-addresses\"></a>\nIf you run SCN successfully, you can check the parent/child chain bridge operator address using RPC API like the following.\n\n```\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vvX.X.X/XXXX-XXXX/goX.X.X\n\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 servicechain:1.0 txpool:1.0\n\n> subbridge.parentOperator\n\"0xA057995175B93Ee0D1bdfA54f078Ad0F0116130b\"\n> subbridge.childOperator\n\"0x5C1C757a6Cb6c6FcEFE398674D8209FDA2A74Df4\"\n```\n\nYou can refer to the [subbridge API](../../../references/json-rpc/subbridge/parent-operator) for more details.\n\n### Send KAIA to Bridge Operators <a id=\"send-kaia-to-bridge-operators\"></a>\nLike anchoring, the parent chain bridge operator needs KAIA to make a value-transfer transaction.\nIf the service chain's gas price is set to non-zero, the service chain bridge operator should have KAIA in their balance as well.\n\nAfter topping up the operator accounts, you can check their balances like below.\n\n**Parent chain bridge operator**\n```\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\n instance: Kaia/vvX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n> subbridge.parentOperatorBalance\n1e+50\n```\n\n**Child chain bridge operator**\n```\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\n instance: Kaia/vvX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n> subbridge.childOperatorBalance\n1e+50\n```\n\n## Bridge Contract <a id=\"bridge-contract\"></a>\n\nFor the cross-chain value transfer, a bridge contract should be deployed to the parent/child chains.\nUsers can request a KAIA transfer to the bridge contract to send their KAIA to the other chain.\nAdditionally, if token contracts are registered in the bridge contracts, bridge contracts can handle the token transfer between parent and child chains.\n\n### Deployment <a id=\"deployment\"></a>\n\nSub-bridge provides a bridge contract deployment API. You can deploy bridge contracts to both chains using a single RPC call as below.\nBefore doing this, you should have connected main-bridge and sub-bridge. Please refer to [Bridge Configuration](bridge-configuration) to get detailed guideline.\n\n```javascript\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vvX.X.X/XXXX-XXXX/goX.X.X\n\n datadir: ~/kscnd_home\n modules: admin:1.0 subbridge:1.0 debug:1.0 governance:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 servicechain:1.0 txpool:1.0\n\n> subbridge.deployBridge()\n[\"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\", \"0x22c41ae528627b790233d2e59ea520be12350eb5\"]\n\n> subbridge.listBridge\n[{\n    localAddress: \"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\",\n    remoteAddress: \"0x22c41ae528627b790233d2e59ea520be12350eb5\",\n    subscribed: false\n}]\n```\n\nYou can refer to the [subbridge API](../../..references/json-rpc/subbridge/deploy-bridge) for more details.\n\n`subbridge_listBridge` shows the bridge contract addresses and their subscription status.\nSub-bridge saves the list of bridge contract addresses in a file. On reboot, sub-bridge reloads the bridge contract list from the file.\n\n### Subscribing <a id=\"subscribing\"></a>\nAfter deploying the bridge contract, you should make the sub-bridge subscribe to the deployed bridge contracts to enable value transfer. This can be done using another RPC API call, `subbridge_subscribeBridge`.\n\n```javascript\n> subbridge.subscribeBridge(\"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\", \"0x22c41ae528627b790233d2e59ea520be12350eb5\")\nnull\n\n> subbridge.listBridge\n[{\n    localAddress: \"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\",\n    remoteAddress: \"0x22c41ae528627b790233d2e59ea520be12350eb5\",\n    subscribed: true\n}]\n```\n\n### Checking Status <a id=\"checking-status\"></a>\nOnce subscribed, SCN processes users' \"request value transfer\" transactions automatically.\nThis section explains how to check the bridge contract status.\n\nIn a bridge contact, there are two nonces, `requestNonce` and `handleNonce`.\nUnlike in-chain transactions, the sub-bridge can handle a higher nonce request before the lower ones.\n- requestNonce : the number of user's \"cross-chain value transfer\" requests made to this bridge contract.\n- handleNonce : the highest nonce that the sub-bridge handled.\n- lowerHandleNonce : the lowest nonce that the sub-bridge should handle.\n\nTherefore, if nonces are updated as follows, we can say the cross-chain value-transfers are processed correctly.\n- \"handleNonce\" and \"lowerHandleNonce\" of the parent chain bridge contract keep approaching to the \"requestNonce\" of the child chain bridge contract.\n- \"handleNonce\" and \"lowerHandleNonce\" keep approaching to the \"requestNonce\" of the parent chain bridge contract.\n\nIf \"handleNonce\" equals to the \"requestNonce\" of the counterpart bridge contract, and the \"lowerHandleNonce\" is greater than \"handleNonce\" by 1, then users' requests were all processed.\n\n### Log <a id=\"log\"></a>\nBelow is a typical log output from a SCN during normal operation.\nEvery 1 second, the status of bridge contracts are printed.\n```\nINFO[10/16,19:37:40 +09] [45] VT : Parent -> Child Chain                request=8699 handle=4826 lowerHandle=4826 pending=3873\nINFO[10/16,19:37:40 +09] [45] VT : Child -> Parent Chain                request=7894 handle=4207 lowerHandle=4207 pending=3687\n```\nThis log shows the request, handle, lowerHandle, and pending nonces.\nEach value means like below\n\n- request : the sum of value-transfer request nonce(s) of all subscribed bridge contract(s).\n- handle : the sum of upper handle nonce(s) of all subscribed bridge contract(s).\n- lowerHandle : the sum of lower handle nonce(s) of all subscribed bridge contract(s).\n- pending : the difference between `request` and `lowerHandle`.\n\n### RPC API <a id=\"rpc-api\"></a>\nYou can check the status of a bridge contract like below.\nYou can refer to the [subbridge API](../../../references/json-rpc/subbridge/get-bridge-information) for more details.\n\n```javascript\n> subbridge.getBridgeInformation(\"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\")\n{\n  counterPart: \"0x22c41ae528627b790233d2e59ea520be12350eb5\",\n  handleNonce: 0,\n  lowerHandleNonce: 0,\n  isRunning: true,\n  isSubscribed: true,\n  onServiceChain: true,\n  pendingEventSize: 0,\n  requestNonce: 0\n}\n```\n\n## Token Contract (ERC-20/721) <a id=\"token-contract-erc-20-721\"></a>\nService Chain supports ERC-20/721 value transfer as well.\nTo support them, service chain compatible ERC-20/721 token contracts should be deployed on both parent and child chains.\nFor the ERC-20/721 token contract code,\nyou can refer to the [Token standard](../../../build/smart-contracts/token-standard).\n\n### Deployment  <a id=\"deployment\"></a>\nSCN does not support an API to deploy ERC-20/721 tokens yet. You need to deploy the tokens via caver-js.\nWhen you deploy an ERC-20/721 contract, you should use the correct bridge operator account. Use the parent operator account for the main chain deploy, and the child operator for the service chain deploy.\nIf a token contract was deployed with a wrong account, value transferring will not work and you need to deploy the token contract again with the correct account.\n\n### Register  <a id=\"register\"></a>\nAfter deploying token contracts, you should register the token contracts with the bridge contracts on the parent/child chains like below.\n```javascript\n> subbridge.registerToken(\"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\", \"0x22c41ae528627b790233d2e59ea520be12350eb5\", \"0x376b72abe1b29cace831bd3f5acdfa967814c9cd\", \"0x53160735f7cc6ff75e48619f368bb94daff66a1b\")\nnull\n```\n\nThis command registers the child chain token (\"0x376b72abe1b29cace831bd3f5acdfa967814c9cd\") with the child chain bridge contract (\"0x27caeba831d98b5fbb1d81ce0ed20801702f443a\"). And the parent chain token (\"0x53160735f7cc6ff75e48619f368bb94daff66a1b\") with the parent chain bridge contract (\"0x22c41ae528627b790233d2e59ea520be12350eb5\").\n\nYou can refer to the [Service Chain API](../../../references/json-rpc/subbridge/register-token) for more details.\n\n## Request Value Transfer <a id=\"request-value-transfer\"></a>\nThis section explains the contract methods that will be invoked by a user to request a value transfer.\nRequest transaction does not allow zero value (KAIA/ERC-20).\n\n### KAIA transfer <a id=\"kaia-transfer\"></a>\nUsers can make a \"request value transfer\" transaction to the **bridge contract** using the below methods.\n\n#### fallback <a id=\"fallback\"></a>\n\nIf a user calls the fallback function of the bridge, this requests a KAIA transfer to the same account address as the requesting user in the counterpart chain.\n\n```solidity\nfunction () external payable;\n```\n\n#### requestKAIATransfer <a id=\"requestklaytransfer\"></a>\n\nIf a user calls this function with `_to`, this requests a KAIA transfer to `_to` address in the counterpart chain.\n\n```solidity\nfunction requestKAIATransfer(address _to, uint256 _value, bytes calldata _extraData) external payable\n```\n\n### ERC-20 transfer <a id=\"erc-20-transfer\"></a>\n\n#### 2-Step request via Bridge contract <a id=\"2-step-request-via-bridge-contract\"></a>\nUsers can make a \"request value transfer\" transaction to the Bridge contract using the below method after [approving](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20#approve) the token to the Bridge contract.\n\n```solidity\nfunction requestERC20Transfer(address _tokenAddress, address _to, uint256 _value,uint256 _feeLimit,bytes memory _extraData) external\n```\n\n#### 1-Step request via ERC-20 contract <a id=\"1-step-request-via-erc-20-contract\"></a>\nUsers can make a \"request value transfer\" transaction directly to the **ERC-20 contract** using the below method without approving.\nThe ERC-20 contract should implement the function, then.\n\n```solidity\nfunction requestValueTransfer(uint256 _amount, address _to, uint256 _feeLimit, bytes calldata _extraData) external\n```\n\n### ERC-721 transfer <a id=\"erc-721-transfer\"></a>\n\n#### 2-Step request via Bridge contract <a id=\"2-step-request-via-bridge-contract\"></a>\nUsers can make a \"request value transfer\" transaction to the Bridge contract using the below method after [approving](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20#approve) the token to the Bridge contract.\n\n```solidity\nfunction requestERC721Transfer(address _tokenAddress, address _to, uint256 _tokenId, bytes memory _extraData) external\n```\n\n#### 1-Step request via ERC-721 contract <a id=\"1-step-request-via-erc-721-contract\"></a>\nUsers can make a \"request value transfer\" transaction directly to the **ERC-721 contract** using the below method without approving.\nThe ERC-721 contract should implement the function, then.\n\n```solidity\nfunction requestValueTransfer(uint256 _uid, address _to) external\n```\n\n### onERC721Received() <a id=\"unsupported-onERC721Received\"></a>\n\nThe ERC-721 standard has the [onERC721Received](https://eips.ethereum.org/EIPS/eip-721) callback function.\nThe `onERC721Received()` works with `safeTransferFrom()` function, but the current bridge contract implementation uses `transferFrom()`, which means the `onERC721Recieved()` is not expected to be called.\n\nAlternatively, a further action like `onERC721Recieved()` should be implemented in another way such as event listening (e.g., `event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId)`).\n\n## Value Transfer Recovery\nValue transfer request may be fail for a number of reasons. Say you requested KAIA transfer from subbridge to mainbridge or from mainbridge to subbridge.\nIn that case, the bridge contract on the receiver side must have enough KAIA than the requested amount of KAIA. If not, the transfer would fail without error notification in the return value.\nA feature of value transfer recovery finds unhandled events and insert them into event pool again in a given interval, which means the failed transaction can be succeed again when the counterpart bridge can successfully handle that event.\nIn case of the above example, the failed transaction would be eventually handled by value transfer recovery when the counterpart bridge has enough KAIA.\nIn order to set the value transfer recovery as default, you need to set two properties:\n```\nSC_VTRECOVERY=1\nSC_VTRECOVERY_INTERVAL=5\n```\nThe value transfer recovery runs automatically by set `SC_VTRECOVERY=1`. `SC_VTRECOVERY_INTERVAL` means an interval how often the value transfer recovery is executed.\n\n## Collecting Fee for KAIA/ERC-20 transfer <a id=\"collecting-fee-for-kaia-erc-20-transfer\"></a>\nIn ServiceChain, there is a fee collecting feature for KAIA/ERC-20 transfers.\n\n**To be updated soon.**\n\n## Customizing your Bridge Contract  <a id=\"customizing-your-bridge-contract\"></a>\nIn ServiceChain, you can use your own customized Bridge contract that inherits from the original Bridge contract for your own unique service.\nThis section explains how to customize the Bridge contract and presents the example code.\n\n**It will be updated soon.**\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/install-service-chain. # Install Service Chain\n\n## Intended Audience <a id=\"intended-audience\"></a>\n\n- Companies that want to build blockchains for Metaverse, GameFi, and NFTs\n- dApp developers who need high TPS, minimal transaction fees, and data privacy.  \n- Anyone who wants to build a local private network or a ledger database for testing.\n\n## ServiceChain Overview <a id=\"service-chain-overview\"></a>\n\nServiceChain is an enterprise-level blockchain to meet companies' requirements such as value transfer, security, high performance, and customization. Kaia ServiceChain provides the following features:\n\n- Immediate finality\n- Token transfer between Kaia chains\n- Data anchoring to the main chain for data integrity\n- Multi-sig bridge contract to meet enterprise-level security requirements\n\n![](/img/nodes/sc-overview.png)\n\n\nRead the [Kaia Scaling Solution](../../learn/scaling-solutions) for more details about the ServiceChain. And the following videos will help you understand Kaia ServiceChain.\n\n- [Horizontal Scaling through Service Chain in Kaia | TXGX 2019](https://www.youtube.com/watch?v=8yQc5FQysJc)\n- [High Availability Architecture of Kaia Service Chain | TXGX 2019](https://www.youtube.com/watch?v=HcdhWtXPuR0)\n\n\n## Download <a id=\"download\"></a>\n\nYou can get packages for SCN, SPN, and SEN in the [download page](../downloads/downloads).\n\n## Installation <a id=\"installation-guide\"></a>\n\nThis chapter explains the **Service Chain Consensus Node \\(SCN\\)** installation.\n\n### Linux Archive Distribution <a id=\"linux-archive-distribution\"></a>\n\nThe archive file for Service Chain Consensus Node has the following directory layout.\n\n| File Name | File Description |\n| :--- | :--- |\n| bin/kscn | SCN executable file |\n| bin/kscnd | SCN start/termination script file |\n| conf/kscnd.conf | SCN configuration file |\n\nThe archive file for homi binary has the following directory layout.\n\n| File Name | File Description |\n| :--- | :--- |\n| bin/homi | HOMI executable file |\n\nThe installation is the uncompression of the downloaded package.\n\n```text\n$ tar zxf kscn-vX.X.X-XXXXX-amd64.tar.gz\n$ tar zxf homi-vX.X.X-XXXXX-amd64.tar.gz\n```\n\n### RPM Distribution \\(RHEL/CentOS/Fedora\\) <a id=\"rpm-rhel-centos-fedora\"></a>\n\nYou can install the downloaded RPM file with the following `yum` command.\n\n```text\n$ yum install kscnd-vX.X.X.el7.x86_64.rpm\n$ yum install homi-vX.X.X.el7.x86_64.rpm\n```\n\n### Installed Location <a id=\"scn-configuration\"></a>\n\nThe Kaia Linux package consists of the executable binary and the configuration file structured as follows.\n\n| File Name | Location |\n| :--- | :--- |\n| kscn | /usr/bin/kscn |\n| kscnd.conf | /etc/kscnd/conf/kscnd.conf |\n| homi | /usr/bin/homi |\n\n## Configuration <a id=\"configuration\"></a>\n\nThis page explains the configuration of SCNs to form a consensus network.\n\nIf you installed archive distribution, you can find the binaries and the config file in the directories you extracted the archives. Below is an example of command execution.\n```bash\n$ homi-darwin-amd64/bin/homi setup ...\n$ kscn-darwin-amd64/bin/kscnd start\n$ vi kscn-darwin-amd64/conf/kscnd.conf\n```\n\nIn this tutorial, we will not always specify the full path to the command.\n \n### Creation of a Genesis File <a id=\"creation-of-a-genesis-file\"></a>\n\nFirst, you should create a genesis file and a nodekey file for your own service chain. You can create them using homi like below.\n```bash\n$ homi setup --gen-type local --cn-num 1 --servicechain -o ./homi-output\nCreated :  homi-output/keys/passwd1\nCreated :  homi-output/scripts/genesis.json\nCreated :  homi-output/keys/nodekey1\nCreated :  homi-output/keys/validator1\nCreated :  homi-output/scripts/static-nodes.json\nCreated :  homi-output/Kaia.json\nCreated :  homi-output/Kaia_txpool.json\n```\n \nBelow are examples of genesis file and nodekey file.\n```bash\n$ cat homi-output/scripts/genesis.json\n{\n    \"config\": {\n        \"chainId\": 1000,\n        \"istanbul\": {\n            \"epoch\": 3600,\n            \"policy\": 0,\n            \"sub\": 22\n        },\n        \"unitPrice\": 0,\n        \"deriveShaImpl\": 2,\n        \"governance\": null\n    },\n    \"timestamp\": \"0x5dca0732\",\n    \"extraData\": \"0x0000000000000000000000000000000000000000000000000000000000000000f85ad594f8690562c0839c44b17af421f7aaaa9f12dcc62bb8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0\",\n    \"governanceData\": null,\n    \"blockScore\": \"0x1\",\n    \"alloc\": {\n        \"f8690562c0839c44b17af421f7aaaa9f12dcc62b\": {\n            \"balance\": \"0x2540be400\"\n        }\n    },\n    \"number\": \"0x0\",\n    \"gasUsed\": \"0x0\",\n    \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}   \n```\n\n```bash      \n$ cat homi-output/keys/nodekey1                                                                                                                                 \n0c28c77ce5c2ca9e495b860f190ed7dfe7bd5c1a2e5f816587eb4d3d9566df44\n```\n\nPlease change the chainID in the genesis file. Use your own number to prevent a replay attack.\n(Do not use the same chainID with Kaia Mainnet (8217) and Kairos (1001))\n\nIf you want, you can change the pre-funded addresses by editing `\"alloc\"` in the genesis file.\n(You can find more details in [Genesis JSON](../service-chain/configure/genesis).)\n\n### SCN Data Directory Creation <a id=\"scn-data-directory-creation\"></a>\n\nConsidering the fact that the size of Kaia blockchain data keeps increasing, it is recommended to use a big enough storage. \nYou can create the data directory on your desired path.\nIn this document, we create `~/kscnd_home` as a data directory. \n\n```bash\n$ mkdir -p ~/kscnd_home\n```\n\n#### Initialization of a Genesis Block <a id=\"initialization-of-a-genesis-block\"></a>\nAfter that, you can initialize the data directory with the genesis file.\nBefore starting a service chain node, it is necessary to initialize the genesis block of the service chain network using `kscn` and `genesis.json`.\n\n```bash\n$ kscn init --datadir ~/kscnd_home homi-output/scripts/genesis.json\n  WARN[11/12,10:13:58 +09] [19] Some input value of genesis.json have been set to default or changed\n  INFO[11/12,10:13:58 +09] [18] Setting connection type                   nodetype=cn conntype=0\n    ...\n  INFO[11/12,10:13:59 +09] [5] Using DeriveShaConcat!\n  INFO[11/12,10:13:59 +09] [5] Writing custom genesis block\n  INFO[11/12,10:13:59 +09] [5] Using DeriveShaConcat!\n  INFO[11/12,10:13:59 +09] [47] Persisted trie from memory database       updated nodes=1 updated nodes size=80.00B time=304.931µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B\n  INFO[11/12,10:13:59 +09] [19] Successfully wrote genesis state          database=lightchaindata hash=0xc269669079fc8c06ac37435a563b8ed8ef273c1c835f3d823d2e586315319aa8\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/header\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/body\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/receipts\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/statetrie/0\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/statetrie/1\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/statetrie/2\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/statetrie/3\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/txlookup\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/misc\n  INFO[11/12,10:13:59 +09] [46] Database closed                           path=/Users/ethan/kscnd_home/klay/lightchaindata/bridgeservice\n```\n\n#### Install nodekey <a id=\"install_nodekey\"></a>\nCopy `homi-output/keys/nodekey1` to the `kaia` directory in the SCN's data directory like below. \n\n```bash\n$ cp homi-output/keys/nodekey1  ~/kscnd_home/klay/nodekey\n```\n\n### Configuration of the SCN <a id=\"configuration-of-the-scn\"></a>\n\n`kscnd.conf` is the configuration file for the SCN.\n\nAssume that the SCN uses the default port and mounts a large-scale partition onto `~/kscnd_home`.\nIn the default `kscnd.conf` file, `SC_SUB_BRIDGE` option is disabled and `DATA_DIR` is empty.\n```\n# Configuration file for the kscnd\n...\nSC_SUB_BRIDGE=0\n...\nDATA_DIR=\n...\n```\n  \nYou can enable `SC_SUB_BRIDGE` to use the Anchoring/Value transfer feature.\nAlso you should set the DATA_DIR like below. \n\n```\n# Configuration file for the kscnd\n...\nSC_SUB_BRIDGE=1\n...\nDATA_DIR=~/kscnd_home\n...\n```\n\nIf you want, you can further modify other options to customize your Service Chain.\nOtherwise, now you can finish the configuration and you are ready to run the service chain using the default configuration.\n\n## Starting/Stopping SCN <a id=\"starting-stopping-scn\"></a>\n\nDepending on your installation type, you can start/stop the Kaia service with the following `systemctl`  or `kscnd` command.\n\n**start**\n\n```bash\n## when installed from rpm distribution \n$ systemctl start kscnd.service\n\n## when installed using linux archive\n$ kscnd start\n\n```\n\n**stop**\n\n```bash\n## when installed from rpm distribution \n$ systemctl stop kscnd.service\n\n## when installed using linux archive\n$ kscnd stop\n\n```\n\n**status**\n\n```bash\n## when installed from rpm distribution \n$ systemctl status kscnd.service\n\n## when installed using linux archive\n$ kscnd status\n\n```\n\n## Checking Node Status <a id=\"checking-node-status\"></a>\n\n### Process Status <a id=\"process-status\"></a>\n\nIt is possible to check the status of SCN's process using the status commands `systemctl` and `kscnd`.\n\n#### systemctl <a id=\"systemctl\"></a>\n\n`systemctl` is installed along with the RPM, and the status of SCN can be checked as follows.\n\n```bash\n$ systemctl status kscnd.service\n● kscnd.service - (null)\n   Loaded: loaded (/etc/rc.d/init.d/kscnd; bad; vendor preset: disabled)\n   Active: active (running) since Wed 2019-01-09 11:42:39 UTC; 1 months 4 days ago\n     Docs: man:systemd-sysv-generator(8)\n  Process: 29636 ExecStart=/etc/rc.d/init.d/kscnd start (code=exited, status=0/SUCCESS)\n Main PID: 29641 (kscn)\n   CGroup: /system.slice/kscnd.service\n           └─29641 /usr/local/bin/kscn --networkid 1000 --datadir ~/kscnd_home --port 32323 --srvtype fasthttp --metrics --prometheus --verbosity 3 --txpool.global...\n\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Starting (null)...\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal kscnd[29636]: Starting kscnd: [  OK  ]\nJan 09 11:42:39 ip-10-11-2-101.ap-northeast-2.compute.internal systemd[1]: Started (null).\n```\n\nYou can check the current status such as `Active: active (running)` in the example above.\n\n#### kscnd <a id=\"kscnd\"></a>\n\n`kscnd` is installed along with the package, and the status of SCN can be checked as follows.\n\n```bash\n$ kscnd status\nkscnd is running\n```\n\n### Logs <a id=\"logs\"></a>\n\nThe log is stored in `kscnd.out` file located in the path defined in the `LOG_DIR` field of the `kscnd.conf` file. When the node works properly, you can see that each block is imported per second as follows.\n\nExample:\n\n```bash\n$ tail -F ~/kscnd_home/logs/kscnd.out\n  INFO[11/12,10:19:09 +09] [49] Successfully wrote mined block            num=11 hash=03da06…f194b0 txs=0\n  INFO[11/12,10:19:09 +09] [49] Commit new mining work                    number=12 txs=0 elapsed=236.972µs\n  INFO[11/12,10:19:10 +09] [24] Committed                                 number=12 hash=470aca…be4fdf address=0xf8690562c0839C44B17AF421F7AaaA9F12dCc62b\n  INFO[11/12,10:19:10 +09] [49] Successfully sealed new block             number=12 hash=470aca…be4fdf\n  INFO[11/12,10:19:10 +09] [49] Successfully wrote mined block            num=12 hash=470aca…be4fdf txs=0\n  INFO[11/12,10:19:10 +09] [49] Commit new mining work                    number=13 txs=0 elapsed=198.221µs\n  INFO[11/12,10:19:11 +09] [24] Committed                                 number=13 hash=95e4a3…14e50f address=0xf8690562c0839C44B17AF421F7AaaA9F12dCc62b\n  INFO[11/12,10:19:11 +09] [49] Successfully sealed new block             number=13 hash=95e4a3…14e50f\n  INFO[11/12,10:19:11 +09] [49] Successfully wrote mined block            num=13 hash=95e4a3…14e50f txs=0\n  INFO[11/12,10:19:11 +09] [49] Commit new mining work                    number=14 txs=0 elapsed=220.004µs\n  INFO[11/12,10:19:12 +09] [24] Committed                                 number=14 hash=dcd2bc…b2aec0 address=0xf8690562c0839C44B17AF421F7AaaA9F12dCc62b\n```\n\n### Queries <a id=\"queries\"></a>\n\n#### kscn console <a id=\"kscn-console\"></a>\n\nKaia provides a CLI client: `kscn console`. Another way of using the client is to connect to the process via IPC (inter-process communication). The IPC file `klay.ipc` is located in the `DATA_DIR` path on an SCN.\n\nPlease execute the following command and check out the result.\n\n```text\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\nat block: 11573551 (Wed, 13 Feb 2019 07:12:52 UTC)\n datadir: ~/kscnd_home\n modules: admin:1.0 debug:1.0 istanbul:1.0 klay:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0\n >\n```\n\nYou can check the usable commands on [API Document](../../../references/json-rpc/klay/account-created)\n\nThe useful APIs to check the status of SCN:\n\n* `kaia.blockNumber` (to get the latest block number)\n* `net.peerCount` (to get the number of the connected Kaia nodes currently)\n\n#### kaia.blockNumber <a id=\"kaia-blocknumber\"></a>\n\nYou can get the latest block number to see if blocks are propagated properly.\n\n```text\n> kaia.blockNumber\n11573819\n```\n\n#### net.peerCount <a id=\"net-peercount\"></a>\n\n```text\n> net.peerCount\n4\n```\n\nThe above command line returns the number of nodes that the SCN connects to except the EN in the main chain.\n\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/4nodes-setup-guide. # Install a 4-node service chain\n\nThis section covers how to set up a multi-node ServiceChain. We will set up a 4-consensus-node ServiceChain with `chainID` 1002, as you can see in the blue border box in the figure below.\n\n![](/img/nodes/sc-4scn-arch.png)\n\n\n## Prerequisites <a id=\"prerequisites\"></a>\n - Download packages for `kscn`, `homi` binary from [Download](../../downloads/downloads).\n - 4 Linux or MacOS servers\n - Minimum hardware requirements\n   - CPU: 4-core (Intel Xeon or equivalent), RAM: 16GB, HDD: 50GB\n   - Please refer to [System Requirements](../system-requirements) for more explanation.\n\n## Step 0: Install SCN on all nodes <a id=\"install-scn\"></a>\nThe installation is the uncompression of the downloaded package. Extract the SCN archive on each server.\n\n```console\n$ tar xvf kscn-vX.X.X-XXXXX-amd64.tar.gz\nx kscn-XXXXX-amd64/\nx kscn-XXXXX-amd64/conf/\nx kscn-XXXXX-amd64/conf/kscnd.conf\nx kscn-XXXXX-amd64/bin/\nx kscn-XXXXX-amd64/bin/kscnd\nx kscn-XXXXX-amd64/bin/kscn\n```\n\nFor the convenience, we will add the binary path to $PATH. Use the actual path on your node.\n```console\n$ export PATH=$PATH:~/path/to/kscn-XXXXX-amd64/bin\n```\n\nSCN also provides various RPM distributions like RHEL, CentOS, and Fedora. For more information, please refer to [Installation](../install-service-chain#installation).\n\n```console\n$ curl -o /etc/yum.repos.d/kaia.repo https://packages.kaia.io/config/rhel/7/prod.repo\n  % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed\n     100 118 100 118 0 0 1113 0 --:--:-- --:--:-- --:--:-- 1102 \n\n$ yum list | grep kaia \npackages-klaytn-prod 31 kB/s | 2.9 kB 00:00 \nhomi.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkbnd.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkcnd.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkcnd-baobab.x86_64    v1.8.0-0.el7      packages-klaytn-prod \nkend.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkend-baobab.x86_64    v1.8.0-0.el7      packages-klaytn-prod \nkgen.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkpnd.x86_64           v1.8.0-0.el7      packages-klaytn-prod \nkpnd-baobab.x86_64    v1.8.0-0.el7      packages-klaytn-prod \nkscnd.x86_64          v1.8.0-0.el7      packages-klaytn-prod \nksend.x86_64          v1.8.0-0.el7      packages-klaytn-prod \nkspnd.x86_64          v1.8.0-0.el7      packages-klaytn-prod \n\n$ yum install kscnd\n```\n\n## Step 1: Create genesis.json and nodekeys <a id=\"step-1-create-genesis-json-and-a-key\"></a>\n\nWe will use homi utility to generate the needful files.\n`homi` is a utility that automatically generates scripts, configuration files, and private keys necessary to configure the Kaia blockchain.\nYou can execute homi from any Linux/Mac PC.\n\nFirst, extract the homi archive you downloaded.\n\n```console\n$ tar xvf homi-vX.X.X-XXXXX-amd64.tar.gz\nx homi-XXXXX-amd64/\nx homi-XXXXX-amd64/bin/\nx homi-XXXXX-amd64/bin/homi\n```\n\nGo to the `bin` folder and execute `homi` with following options to generate the files.\n`homi setup --gen-type local --cn-num 4 --test-num 1 --servicechain --chainID 1002 --p2p-port 22323 -o homi-output`\nSince Kairos's `chainID` is 1001, for convenience, the `chainID` of the ServiceChain constructed in this example is set to 1002. When operating a blockchain by launching an actual service, it is recommended to use it after registering a new chainID value at https://chainlist.defillama.com/ so that chainID does not overlap with other ServiceChains. The ServiceChain port is set to 22323, which is the default port.\n\n```console\n$ ./homi setup --gen-type local --cn-num 4 --test-num 1 --servicechain --chainID 1002 --p2p-port 22323 -o homi-output\nCreated :  homi-output/keys/passwd1\nCreated :  homi-output/keys/passwd2\nCreated :  homi-output/keys/passwd3\nCreated :  homi-output/keys/passwd4\nCreated :  homi-output/scripts/genesis.json\nCreated :  homi-output/keys/nodekey1\nCreated :  homi-output/keys/validator1\nCreated :  homi-output/keys/nodekey2\nCreated :  homi-output/keys/validator2\nCreated :  homi-output/keys/nodekey3\nCreated :  homi-output/keys/validator3\nCreated :  homi-output/keys/nodekey4\nCreated :  homi-output/keys/validator4\nCreated :  homi-output/scripts/static-nodes.json\nCreated :  homi-output/keys_test/testkey1\nCreated :  homi-output/keys_test/keystore1/0xdC7218621513f71d609653d22C39d79d558d9CDC\nCreated :  homi-output/Kaia.json\nCreated :  homi-output/Kaia_txpool.json\n```\n\nAmong the outputs, we will use `nodekey*`, `genesis.json` and `static-nodes.json` in the subsequent steps.\n\n\n## Step 2: Customize static-nodes.json <a id=\"step-2-customize-static-nodes-json\"></a>\n\nOpen `homi-output/scripts/static-nodes.json` in a text editor then update the IP addresses and ports with the actual values of your nodes.\nIn this example, it is assumed that the IP of each SCN node in the ServiceChain is as shown in the figure below. Remember the port you assigned here, as it will be used later in step 4.\n\n![](/img/nodes/sc-4scn-ip.png)\n\n```json\n[\n     \"kni://38693ad4b17ff77...23153@192.168.0.1:22323?discport=0\\u0026ntype=cn\",\n     \"kni://f36d969b16f7337...1329b@192.168.0.2:22323?discport=0\\u0026ntype=cn\",\n     \"kni://16e55d8921ab034...b2bec@192.168.0.3:22323?discport=0\\u0026ntype=cn\",\n     \"kni://0973e792a421c1d...bbd71@192.168.0.4:22323?discport=0\\u0026ntype=cn\"\n]\n```\n\nAfter you update `static-nodes.json`, upload the output folders(`homi-output`) to all SCNs, i.e. SCN-L2-01, SCN-L2-02, SCN-L2-03, SCN-L2-04 nodes in this example.\n\n```console\n$ scp -r path/to/homi-output/ user@192.168.0.1:~/\n$ scp -r path/to/homi-output/ user@192.168.0.2:~/\n$ scp -r path/to/homi-output/ user@192.168.0.3:~/\n$ scp -r path/to/homi-output/ user@192.168.0.4:~/\n```\n\n## Step 3: Node initialization <a id=\"step-3-node-initialization\"></a>\nNow, we will initialize each node using the genesis file. On each node, execute the following command.\nIt will create the data folder storing the chain data and logs on your home directory.\nYou can change the data folder using the `--datadir` directive.\nIn this example, we set the data folder to `\\~/data`.\n\n```console\n$ kscn --datadir ~/data init ~/homi-output/scripts/genesis.json\n\n$ ls ~/data\nkeystore\tklay\t\tkscn\n```\n\n\n## Step 4: Install `nodekey` and `static-nodes.json` <a id=\"step-4-install-nodekey\"></a>\n\nOn every SCNs, copy `static-nodes.json` to the data folder.\n```console\n$ cp ~/homi-output/scripts/static-nodes.json ~/data/\n```\n\nIn step 1, we generated 4 nodekeys.\nAssign each node key to the SCN and copy the matching `nodekey` to each SCN's data folder.\nFor example, use `nodekey1` for SCN-L2-01(192.168.0.1) node and use `nodekey2`, `nodekey3` and `nodekey4` for SCN-L2-02(192.168.0.2), SCN-L2-03(192.168.0.3) and SCN-L2-04(192.168.0.4) respectively.\n```console\n$ cp ~/homi-output/keys/nodekey{1..4} ~/data/klay/nodekey\n```\n\n![](/img/nodes/sc-4scn-nodekey.png)\n\n## Step 5: Configure nodes <a id=\"step-5-configure-nodes\"></a>\n\nOn every SCNs, go to the kscn installation folder and edit `conf/kscnd.conf` as follows. `PORT` is the port used to set up `homi`, and `SC_SUB_BRIDGE` is required for connecting bridges in the next section. For now, just set it to 0. In `DATA_DIR`, enter the data folder used in step 3.\n```\n...\nPORT=22323\n...\nSC_SUB_BRIDGE=0\n...\nDATA_DIR=~/data\n...\n```\n\n## Step 6: Start nodes <a id=\"step-6-start-nodes\"></a>\nExecute the following command on all SCN nodes.\n```console\n$ kscnd start\nStarting kscnd: OK\n```\nYou can check block generation status by watching `kaia.blockNumber`. If this number is not 0, the node is working fine.\n```console\n$ kscn attach --datadir ~/data\n> kaia.blockNumber\n10\n```\nIf you want to stop a node, you can use the command `kscnd stop`\n\n## (Example) Creation and confirmation of a value transfer transaction <a id=\"example-creation-and-confirmation-of-a-value-transfer-transaction\"></a>\nNow the 4-node ServiceChain is up and running. We will execute a value transfer transaction in the ServiceChain to confirm the installation.\n\n![](/img/nodes/sc-4scn-test.png)\n\n### Step 1: Import the test account <a id=\"step-1-import-the-test-account\"></a>\n`testkey1` was automatically generated by `homi` in step 1. KAIA is allocated to the test account as described in the `genesis.json` which was also generated by `homi`.\n\n\n```console\n$ kscn account import --datadir ~/data ~/homi-output/keys_test/testkey1\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassphrase:\nRepeat passphrase:\nAddress: {80119c31cdae67c42c8296929bb4f89b2a52cec4}\n```\n\n### Step 2: Unlock the account <a id=\"step-2-unlock-the-account\"></a>\nUnlocking the account is possible only through the console of the SCN node that imported `testkey1`.\n\n```console\n$ kscn attach --datadir ~/data\n> personal.unlockAccount(\"80119c31cdae67c42c8296929bb4f89b2a52cec4\")\nUnlock account 80119c31cdae67c42c8296929bb4f89b2a52cec4\nPassphrase:\ntrue\n```\n\n### Step 3: Send a transaction and check the balance <a id=\"step-3-send-a-transaction-and-check-the-balance\"></a>\n\n```console\n> kaia.sendTransaction({from: \"80119c31cdae67c42c8296929bb4f89b2a52cec4\", to: \"305c6cc464d5fe1e624679695a20d641a01688e1\", value: 10})\n\"0xa0e7102e8f14200cec8d964aacc1c9ed7c22271078b2b213170c64333cbca8a3\"\n> kaia.getBalance(\"305c6cc464d5fe1e624679695a20d641a01688e1\")\n10\n```\n\n:::note\n\nThe simplest form of ServiceChain is having one SCN.\nThe ServiceChain illustrated in this tutorial is a 4-node ServiceChain. You can, however, set up a single-node ServiceChain if you wish.\nSimply pass `--cn-num 1` instead of `--cn-num 4` to homi in 'Step 1:Create genesis.json and nodekeys'.\n\nAt least 4 nodes are required to tolerate byzantine faults. Therefore, the minimum number of SCNs to achieve high availability under the BFT algorithm is 4. Having 2 SCN nodes is not enough, because if one SCN fails, the other one cannot reach a consensus on its own.\n\n:::\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/en-scn-connection. # Connect to Kairos\n\nThis section covers how to connect your 4-node ServiceChain network to the Kairos network.\nYou will set up a Kairos EN and connect the EN with one of your SCNs. Then you will enable the anchoring feature to put ServiceChain block information onto the Kairos network.\n\n![](/img/nodes/sc-en-scn-arch.png)\n\n## Prerequisites <a id=\"prerequisites\"></a>\n - 1 Linux or MacOS server for EN\n - Minimum hardware requirements for testing\n   - CPU: 4-core (Intel Xeon or equivalent), RAM: 16GB, HDD: 50GB\n   - Please refer to the [System Requirements](../system-requirements) for more explanation.\n - Download the Kairos EN executable. For the full list of downloadable binaries, see [Download](../../downloads/downloads).\n - Assumptions and Limitations\n   - A ServiceChain network is installed and running. Please refer to [Setting up a 4-node Service Chain](4nodes-setup-guide) to setup a network.\n   - A Kairos EN.\n   - One EN can only connect to one SCN since only one-to-one connection is supported.\n   - Every SCN does not have to connect to the EN.\n\n## Step 0: Install Kairos EN <a id=\"install-kairos-en\"></a>\nThe installation is the uncompression of the downloaded package. Extract the archive on the EN server.\n\n```bash\nEN-01$ tar xvf ken-baobab-vX.X.X-XXXXX-amd64.tar.gz\n```\n\n## Step 1: Preparing genesis.json <a id=\"step-1-preparing-genesis-json\"></a>\nFrom the EN server, download the `genesis.json` for `Kairos` network.\n```\nEN-01$ curl -X GET https://packages.kaia.io/kairos/genesis.json -o ~/genesis.json\n```\n\n## Step 2: EN Node Initialization <a id=\"step-2-en-node-initialization\"></a>\nNow, we will initialize the EN node using the genesis file. Execute the following command.\nIt will create the data folder storing the chain data and logs on your home directory.\nYou can change the data folder using the `--datadir` directive.\n\n```\nEN-01$ ken init --datadir ~/data ~/genesis.json\n```\n\n## Step 3: Configure the EN Node <a id=\"step-3-configure-the-en-node\"></a>\nGo to the ken installation folder and rename `mv kend_baobab.conf kend.conf`, then edit `conf/kend.conf` as follows.\n\n```\n...\nNETWORK=\"baobab\"\n...\nSC_MAIN_BRIDGE=1\n...\nDATA_DIR=~/data\n...\n```\n\n## Step 4: Start the EN Node <a id=\"step-4-start-the-en-node\"></a>\n```\nEN-01$ kend start\nStarting kscnd: OK\n```\nYou can check block sync status by watching `kaia.blockNumber`. If this number is not 0, the node is working fine. Downloading all blocks on the Kairos network may take a long time depending on network conditions and hardware performance, so we recommend using [Fast Sync](../../endpoint-node/install-endpoint-nodes#fast-sync-optional) to synchronize blocks. \n```\nEN-01$ ken attach --datadir ~/data\n> kaia.blockNumber\n21073\n```\nIf you want to stop a node, you can use the command `kend stop`\n\n## Step 5: Check KNI of EN Node <a id=\"step-5-check-kni-of-en-node\"></a>\nTake note of EN-01's KNI which is the information used to connect from an SCN-L2-01 node. This value will be used in the next step when generating `main-bridges.json`.\n```\nEN-01$ ken attach --datadir ~/data\n> mainbridge.nodeInfo.kni\n\"kni://0f7aa6499553...25bae@[::]:50505?discport=0\"\n```\n\n![](/img/nodes/sc-en-scn-nodeInfo.png)\n\n## Step 6: Create main-bridges.json <a id=\"step-6-create-main-bridges-json\"></a>\nLog on to an SCN-L2-01 (note: not the EN-01 node) and create `main-bridges.json` on `~/data`. Replace `[::]` located after `@` letter with EN-01 node's IP address.\n```\nSCN-L2-01$ echo '[\"kni://0f7aa6499553...25bae@192.168.1.1:50505?discport=0\"]' > ~/data/main-bridges.json\n```\n\n## Step 7: Configure SCN then Restart kscn <a id=\"step-7-configure-scn-then-restart-kscn\"></a>\nFrom the SCN-L2-01 node's shell, edit `kscn-XXXXX-amd64/conf/kscnd.conf`.\nIf `SC_SUB_BRIDGE` is set to 1, data anchoring starts automatically when the SCN-L2-01 node starts. In this example, `SC_PARENT_CHAIN_ID` is set to 1001 because the `chainID` of the parent chain, Kairos, is 1001.\n`SC_ANCHORING_PERIOD` is the parameter that decides the period to send an anchoring tx to the main chain. By setting the value to 10, you configure the node to perform anchoring every 10 blocks. The default value is 1.\n```\n...\nSC_SUB_BRIDGE=1\n...\nSC_PARENT_CHAIN_ID=1001\n...\nSC_ANCHORING_PERIOD=10\n...\n```\n\nRestart kscn by executing the following command:\n```\nSCN-L2-01$ kscnd stop\nShutting down kscnd: Killed\nSCN-L2-01$ kscnd start\nStarting kscnd: OK\n```\n\nCheck if the SCN-L2-01 is connected to the EN-01 by checking `subbridge.peers.length`\n```\nSCN-L2-01$ kscn attach --datadir ~/data\n> subbridge.peers.length\n1\n```\n\n## Anchoring  <a id=\"anchoring\"></a>\nAfter finishing the EN-01 and SCN-L2-01 connection, you can log ServiceChain block information on the parent chain via Anchoring.\nIn this section, you will top up a parent operator account, enable Anchoring, and check the anchored block number.\n\n### Step 1: Get KAIA to test anchoring <a id=\"step-1-get-kaia-to-test-anchoring\"></a>\nAnchoring requires SCN-L2-01 to make an anchoring transaction to Kairos. So `subbridge.parentOperator` account should have enough KAIA to pay the transaction fee. Get some KAIA from [Kairos Faucet](https://faucet.kaia.io/) and transfer some KAIA to the `parentOperator`. For data anchoring in real service, `parentOperator` needs to have enough KAIA for transaction fee.\n\n```\nSCN-L2-01$ kscn attach --datadir ~/data\n> subbridge.parentOperator\n\"0x3ce216beeafc62d20547376396e89528e1d778ca\"\n```\n![](/img/nodes/sc-en-scn-faucet.png)\n\n### Step 2: Start Anchoring <a id=\"step-2-start-anchoring\"></a>\nTo start anchoring, execute the following command:\n```\nSCN-L2-01$ kscn attach --datadir ~/data\n> subbridge.anchoring(true)\ntrue\n```\nAfter anchoring starts, you can check the latest block anchored to Kairos by using `subbridge.latestAnchoredBlockNumber`. Please note that this only works after the EN already followed up on the latest block of Kairos. By default, SCN-L2-01 tries anchoring on every block from the block on which anchoring is turned on. The anchoring period can be set by changing `SC_ANCHORING_PERIOD`. If the value is set to 10, the node tries anchoring when the block number is a multiple of 10.\n```\nSCN-L2-01$ kscn attach --datadir ~/data\n> subbridge.latestAnchoredBlockNumber\n100\n```\n![](/img/nodes/sc-en-scn-anchoring.png)\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/ha-for-sc. # Configure high availability\n\nIf only one bridge is used in the ServiceChain, that bridge can become a single point of failure. To solve this, we describe how you can build an HA system with two or more bridges. As shown in the figure below, configure the bridges to be connected in at least two pairs, so that even if there is a problem in one bridge connection, data anchoring and value transfer between chains can still work normally through the other bridge.\n\n![](/img/nodes/sc-ha-arch.png)\n\n\n## Prerequisites <a id=\"prerequisites\"></a>\n - The main bridge of the EN and the sub bridge of the SCN are connected. If it's not, please refer to [Kairos connection](en-scn-connection) to establish the connection.\n - This section describes how to add an extra bridge between Kairos and a ServiceChain. In the same way, you can also set up HA by adding another bridge.\n\n## Step 1: Adding another Bridge between EN-SCN <a id=\"step-1-adding-another-bridge-between-en-scn\"></a>\n\nIn [Connecting to Kairos](en-scn-connection), we assume that the EN and the SCN connected by a bridge as EN-01 and SCN-L2-01, respectively. In this section, we will add another bridge between EN-02 and SCN-L2-02. \nSince it follows the same procedure, we will briefly explain.\n\n\n![](/img/nodes/sc-ha-add-bridge.png)\n\nAfter building EN-02, set `SC_MAIN_BRIDGE` to 1 in `conf/kend.conf` and restart ken on EN-02.\n\n```console\nSC_MAIN_BRIDGE=1\n```\n\nCheck the KNI information of EN-02 by the following command: \n\n\n```console\nEN-02$ ken attach --datadir ~/data\n> mainbridge.nodeInfo.kni\n\"kni://eb8f21df10c6562...25bae@[::]:50505?discport=0\"\n```\n\nLog in to SCN-L2-02, and create `main-bridges.json` with the KNI of EN-02. Please make sure that it should be in the JSON array format with a square bracket.\n\n\n```console\nSCN-L2-02$ echo '[\"kni://eb8f21df10c6562...25bae@192.168.0.5:50505?discport=0\"]' > ~/data/main-bridges.json\n```\n\nOn the shell of SCN-L2-02, edit `kscn-XXXXX-amd64/conf/kscnd.conf` as described below.\nTo connect a bridge, set `SC_SUB_BRIDGE` to 1.\n`SC_PARENT_CHAIN_ID` is set to Kairos's `chainID` 1001. \n`SC_ANCHORING_PERIOD` is the parameter that decides the period to send an anchoring transaction to the parent chain. In this example, an anchor transaction is submitted to the parent chain (Kairos) for every 10 child blocks.\n```\n...\nSC_SUB_BRIDGE=1\n...\nSC_PARENT_CHAIN_ID=1001\n...\nSC_ANCHORING_PERIOD=10\n...\n```\n\n\nIf you restart ken on EN-02, a bridge will be connected automatically between the EN-02 and the SCN-L2-02 and data anchoring will start from the point where the connection is made as shown in the figure below.\n\nAfter adding the bridge between EN-02 and SCN-L2-02, you can now see the connection between the nodes are established as shown in below.\n\n![](/img/nodes/sc-ha-before-register.png)\n\n## Step 2: Registering and Subscribing the Bridge Contract <a id=\"step-2-registering-and-subscribing-the-bridge-contract\"></a>\n\nAs shown in the figure above, the bridge contract is registered only in EN-01 and SCN-L2-01.\n\nConnect to the SCN-L2-02 console and run the APIs for bridge registration, bridge subscription, and token registration. The bridge and token contract were created while deploying the bridge contract with EN-01 and SCN-L2-01 in step 2 of [Cross-Chain Value Transfer](value-transfer).\n\n```\n$ kscn attach --datadir ~/data\n> subbridge.registerBridge(\"0xCHILD_BRIDGE_ADDR\", \"0xPARENT_BRIDGE_ADDR\")\nnull\n> subbridge.subscribeBridge(\"0xCHILD_BRIDGE_ADDR\", \"0xPARENT_BRIDGE_ADDR\")\nnull\n> subbridge.registerToken(\"0xCHILD_BRIDGE_ADDR\", \"0xPARENT_BRIDGE_ADDR\", \"0xCHILD_TOKEN_ADDR\", \"0XPARENT_TOKEN_ADDR\")\nnull\n```\n\n![](/img/nodes/sc-ha-before-register2.png)\n\nIn the bridge contract, information about adding an extra bridge should be updated. Write the child operator and parent operator information of the added extra bridge in the `erc20/erc20-addOperator4HA.js` file of [service-chain-value-transfer-example](https://github.com/klaytn/servicechain-value-transfer-examples) and execute `node erc20-addOperator4HA.js`.\n\n```\n// register operator\nawait conf.child.newInstanceBridge.methods.registerOperator(\"0xCHILD_BRIDGE_ADDR\").send({ from: conf.child.sender, gas: 100000000, value: 0 });\nawait conf.parent.newInstanceBridge.methods.registerOperator(\"0xPARENT_BRIDGE_ADDR\").send({ from: conf.parent.sender, gas: 100000000, value: 0 });\n```\n\nWhen there are multiple bridges, value transfer can be provided more safely by setting a threshold. Value transfer can be enabled only when an operator above the threshold normally requests value transfer. For example, as in the current example, if there are two bridge pairs and the threshold is set to 2, value transfer can be provided only when both are normally requested. That is, even if one bridge is attacked and sends an abnormal request, it can be prevented. The default value of threshold is 1. In the `erc20/erc20-addOperator4HA.js` file of [service-chain-value-transfer-example](https://github.com/klaytn/servicechain-value-transfer-examples), uncomment the code below and set the threshold value and then run it to change the threshold for the bridge contract.\n\n```\n// // set threshold\n// await conf.child.newInstanceBridge.methods.setOperatorThreshold(0, \"your threshold number\").send({ from: conf.child.sender, gas: 100000000, value: 0 });\n// await conf.parent.newInstanceBridge.methods.setOperatorThreshold(0, \"your threshold number\").send({ from: conf.parent.sender, gas: 100000000, value: 0 });\n```\n\n\nWhen registration is completed, a bridge contract is registered in both EN-02 and SCN-L2-02 as shown in the figure below to configure HA.\n\n![](/img/nodes/sc-ha-after-register.png)\n\n\nWhen two or more bridge pairs are connected for HA, data anchoring transactions for the same block occur more than once, and value transfer transactions can also occur multiple times. That is, additional fees are required.",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/nested-sc. # Create nested service chain\n\nThis chapter explains how to build ServiceChain networks in a hierarchical structure by adding a new ServiceChain network to the ServiceChain network built in the previous chapter. The ServiceChain network to be added also consists of 4 SCNs in this example. The ServiceChain network constructed in the previous chapter is defined as L2, and the ServiceChain network to be newly constructed is defined as L3. We are going to connect a bridge between L2 and L3 to create a hierarchical structure. The overall structure of the ServiceChain network to be constructed in this chapter is shown in the figure below.\n\n![](/img/nodes/sc-nestedsc-arch.png)\n\n\n## Prerequisites <a id=\"prerequisites\"></a>\n - Assume that you have progressed to the ServiceChain configuration and Kairos EN described in [Nested ServiceChain](nested-sc). So we will briefly explain what was explained in the previous section.\n - Assumptions and Limitations\n   - One EN can bridge one-to-one to one of the SCNs of the ServiceChain L2. Similarly, one SCN in L2 of the ServiceChain can bridge one-to-one to one of the SCNs in L3.\n   - An SCN node can have a main bridge and a sub bridge at the same time. However, the port numbers of the main bridge and the sub bridge must be set differently. (eg main-bridge: 50505, sub-bridge:50506)\n   - Not all SCNs in L2 need to be bridged to EN, and likewise SCNs in L3 need not all be bridged to L2. However, for high availability, it is recommended that there are two or more main-bridge and sub-bridge pairs between chains. In this chapter, only one pair will be connected between L2 and L3, and the high availability between L2 and L3 is same to the HA between Kairos and L2. \n\n## Step 1: Create and update Homi data for L3 <a id=\"step-1-create-and-update-homi\"></a>\nAs when configuring ServiceChain L2, execute the `homi` command to create scripts and configuration files for building L3. You can run `homi` on any Linux/Mac PC. Kairos's `chainID` is `1001`, and L2's `chainID` was set to `1002` in the previous example, so for convenience, L3's `chainID` is set to `1003`. When operating a blockchain for an actual service, you must register a new `chainID` value at https://chainlist.defillama.com/ to avoid the `chainID` conflict with other ServiceChains and EVM chains.\n\n\n```console\n$ ./homi setup --gen-type local --cn-num 4 --test-num 1 --servicechain --chainID 1003 --p2p-port 22323 -o homi-output\nCreated :  homi-output/keys/passwd1\nCreated :  homi-output/keys/passwd2\nCreated :  homi-output/keys/passwd3\nCreated :  homi-output/keys/passwd4\nCreated :  homi-output/scripts/genesis.json\nCreated :  homi-output/keys/nodekey1\nCreated :  homi-output/keys/validator1\nCreated :  homi-output/keys/nodekey2\nCreated :  homi-output/keys/validator2\nCreated :  homi-output/keys/nodekey3\nCreated :  homi-output/keys/validator3\nCreated :  homi-output/keys/nodekey4\nCreated :  homi-output/keys/validator4\nCreated :  homi-output/scripts/static-nodes.json\nCreated :  homi-output/keys_test/testkey1\nCreated :  homi-output/keys_test/keystore1/0xdC7218621513f71d609653d22C39d79d558d9CDC\nCreated :  homi-output/Kaia.json\nCreated :  homi-output/Kaia_txpool.json\n```\n\n![](/img/nodes/sc-nestedsc-ip.png)\n\nUpdate `IP address` and `port` information of ServiceChain L3 nodes in `homi-output/scripts/static-nodes.json`.\n\n\n```json\n[\n     \"kni://358235ccbf97a1f...787f7@192.168.0.21:22323?discport=0&type=cn\",\n     \"kni://14ac4e3d53de5c7...6c91d@192.168.0.22:22323?discport=0&type=cn\",\n     \"kni://5f36a456d93da09...8e216@192.168.0.23:22323?discport=0&type=cn\",\n     \"kni://d62fd0928b9b6e5...6badf@192.168.0.24:22323?discport=0&type=cn\"\n]\n```\n\nCopy `homi-output` to all SCN nodes (SCN-L3-01, SCN-L3-02, SCN-L3-03, SCN-L3-04) of ServiceChain L3.\n\n```console\n$ scp -r path/to/homi-output user@192.168.0.21:~/ \n$ scp -r path/to/homi-output user@192.168.0.22:~/ \n$ scp -r path/to/homi-output user@192.168.0.23:~/ \n$ scp -r path/to/homi-output user@192.168.0.24:~/ \n```\n\nInitialize all nodes.\n\n```console\n$ kscn --datadir ~/data init ~/homi-output/scripts/genesis.json\n$ ls ~/data\nkeystore\tklay\t\tkscn\n```\n\nConnect to all SCNs (SCN-L3-01, SCN-L3-02, SCN-L3-03, and SCN-L3-04), copy `static-nodes.json` to the data folder `~/data`, and copy `nodekeys` one by one.\n\n```console\n$ cp   ~/homi-output/scripts/static-nodes.json   ~/data/\n$ cp   ~/homi-output/keys/nodekey{1..4}   ~/data/klay/nodekey\n```\n\n\n## Step 2: SCN configuration in L3 <a id=\"step-2-scn-configuration\"></a>\n\n\nEdit `conf/kscnd.conf` on all SCNs in ServiceChain L3 as follows: The `PORT` uses 22323, the default port of the ServiceChain. `DATA_DIR` is `~/data`. \n\n```\n...\nPORT=22323\n...\nDATA_DIR=~/data\n...\n```\n\nRun the ServiceChain on all SCN nodes in L3 and check if it works properly.\n\n\n```console\n$ kscnd start\nStarting kscnd: OK\n$ kscn attach --datadir ~/data\n> kaia.blockNumber\n10\n```\n\n## Step 3: Restart after setting L2 main bridge <a id=\"step-3-restart-after-setting-L2-main-bridge\"></a>\n\nConnect to the console of SCN-L2-03 node, (Note: this is not in L3 but in L2) that will act as the main bridge in the ServiceChain L2. \n\n![](/img/nodes/sc-nestedsc-id.png)\n\nEdit the kscn configuration file `conf/kscnd.conf` of SCN-L2-03 as follows.\n\n```console\nSC_MAIN_BRIDGE=1\n```\n\nRestart kscnd on SCN-L2-03.\n\n```console\nSCN-L2-03$ kscnd stop\nSCN-L2-03$ kscnd start\n```\n\n## Step 4: Check KNI of Main Bridge Node <a id=\"step-4-check-kni-of-main-bridge-node\"></a>\n\nCheck the KNI information of SCN-L2-03 node. This value will be used to create the `main-bridges.json` file of SCN-L2-03 node, which will be set up the subbridge in the ServiceChain L3.\n\n![](/img/nodes/sc-nestedsc-nodeinfo.png)\n\n\n```console\nSCN-L2-03$ kscn   attach   --datadir   ~/data\n> mainbridge.nodeInfo.kni\n\"kni://87989a5a5dcc165...85b16b@[::]:50505?discport=0\"\n```\n\n\n\n## Step 5: Configure L3 sub-bridge <a id=\"step-5-configure-l3-sub-bridge\"></a>\n\nConnect to SCN-L3-01 node that will have a subbridge of the ServiceChain L3 (Note: this is not L2). Create `main-bridges.json` under `~/data` folder. Replace \\[::\\] after @ with the IP address of the node you checked in step 4.\n\n```console\nSCN-L3-01$ echo '[\"kni://87989a5a5dcc165...85b16b@192.168.0.13:50505?discport=0\"]' > ~/data/main-bridges.json\n```\n\nEdit the configuration file `conf/kscnd.conf` of the SCN-L3-01 node with subbridge as follows. set `SC_SUB_BRIDGE`to 1 for activating the bridge connection, and `SC_PARENT_CHAIN_ID` is `1002`, `chainID` of L2, Set `SC_ANCHORING` to 1 to automatically anchor data upon restart. You can also access the SCN-L3-01 shell and turn on data anchoring with the `subbridge.anchoring(true)` command or turn it off with the `subbridge.anchoring(false)` command. `SC_ANCHORING_PERIOD` is a parameter that determines how often anchoring transactions are sent to the parent chain. Set the node to anchor every 10 blocks by specifying a value of 10. Default is 1.\n\n```console\nSC_SUB_BRIDGE=1\n…\nSC_PARENT_CHAIN_ID=1002\n…\nSC_ANCHORING=1\nSC_ANCHORING_PERIOD=10\n```\n\nRestart kscnd on SCN-L3-01 after completing the setup.\n\n```console\nSCN-L3-01$ kscnd stop\nShutting down kscnd: Killed\nSCN-L3-01$ kscnd start\nStarting kscnd: OK\n```\n\nCheck `subbridge.peers.length` to see if SCN-L3-01 is connected to SCN-L2-03, check `subbridge.latestAnchoredBlockNumber` to check the latest anchored block number to see if anchoring is in progress.\n\n```console\nSCN-L3-01$ kscn attach --datadir ~/data\n> subbridge.peers.length\n1\n> subbridge.latestAnchoredBlockNumber\n5010\n```\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start. # Quick Start\n\nThis tutorial provides a step-by-step guide for setting up a ServiceChain network and connecting it to the Kaia Kairos network.\nYou will also learn how to enable periodic anchoring and cross-chain value transfer.\nIn order to operate the actual blockchain services with the ServiceChain, we will explain High Availability, building a ServiceChain hierarchically, and value transfer between sibling ServiceChains.\n\n- [Setting up a 4-node ServiceChain](./4nodes-setup-guide)\n- [Connecting to Kairos](./en-scn-connection)\n- [Cross-chain Value Transfer](./value-transfer)\n- [HA for ServiceChain](./ha-for-sc)\n- [Nested ServiceChain](./nested-sc)\n- [Value Transfer between Sibling ServiceChains](./value-transfer-between-sibling)",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/value-transfer-between-sibling. # Transfer value between sibling service chains\n\nThis section will explain how to enable value transfer between ServiceChain networks.\nThe main features provided by ServiceChain, data anchoring and value transfer, can be used independently. That is, you can use only data anchoring or only value transfer, regardless of whether you use the other feature. \n\nAs shown in the figure below, if there are two ServiceChains (chainID 1002 and 1004) connected to Kairos, since each servicechain performs data anchoring with Kairos, data anchoring is not required between each other, only value transfer is required.\n\nTo transfer value when there is no bridge between two ServiceChains, first transfer value from the ServiceChain (chainID 1002) to kairos (chainID 1001), and then transfer value from kairos (chainID 1001) to the ServiceChain (chainID 1004) again. This is inefficient than providing value transfer directly from the ServiceChain (chainID 1002) to the ServiceChain (chainID 1004) at once. Therefore, by creating a bridge between ServiceChains directly, we can transfer value efficiently . \n\n![](/img/nodes/sc-vt-between-sibling-arch.png)\n\n## Prerequisites <a id=\"prerequisites\"></a>\n- We assume that you installed two ServiceChains, Each servicechain is connected to the kairos EN. Refer to [Connecting to Kairos](en-scn-connection).\n- We also assume that you have experienced value transfer through [Cross-Chain Value Transfer](value-transfer). \n\nRepeat [Connecting to Kairos](en-scn-connection) as shown in the picture above to additionally install ServiceChain (chianID 1004).\n\nA node can have only one main-bridge and one sub-bridge each. In this example, for convenience of explanation, we are going to connect a bridge to SCN-L2-03 and SCN-L2-07, which are nodes that do not have both main-bridge and sub-bridge yet.\n\n![](/img/nodes/sc-vt-between-sibling-bridge.png)\n\n## Step 1: Check KNI of SCN-L2-03 Node <a id=\"step-1-check-kni-of-scn-node\"></a>\nTake note of SCN-L2-03's KNI which is the information used to connect from an SCN node. This value will be used in the next step when generating `main-bridges.json`\n\n```\nSCN-L2-03$ kscn attach --datadir ~/data\n> mainbridge.nodeInfo.kni\n\"kni://...39047242eb86278689...@[::]:50505?discport=0\"\n```\n\n## Step 2: Create main-bridges.json <a id=\"step-2-create-main-bridges-json\"></a>\nLog on to an SCN-L2-07 (note: chianID 1004) and create `main-bridges.json` on `~/data`. Replace `[::]` located after `@` letter with EN node's IP address.\n```\n$ echo '[\"kni://...39047242eb86278689...@192.168.0.3:50505?discport=0\"]' > ~/data/main-bridges.json\n```\n\n## Step 3: Configure SCN then Restart <a id=\"step-3-configure-scn-then-restart\"></a>\nFrom the SCN-L2-07 node's shell, edit `kscn-XXXXX-amd64/conf/kscnd.conf`. Since each ServiceChain already anchored with the Kairos EN, data anchoring between sibling is not required. So we set `SC_ANCHORING` to 0. \n\n```\n...\nSC_SUB_BRIDGE=1\n...\nSC_PARENT_CHAIN_ID=1002\n...\nSC_ANCHORING=0\n...\n```\n\nRestart kscnd on SCN-L2-07 node\n```\nSCN-L2-07$ kscnd stop\nShutting down kscnd: Killed\nSCN-L2-07$ kscnd start\nStarting kscnd: OK\n```\n\nCheck if the SCN-L2-07 is connected to the SCN-L2-03 by checking `subbridge.peers.length`\n```\nSCN-L2-07$ kscn attach --datadir ~/data\n> subbridge.peers.length\n1\n```\n\nIn the case of value transfer, if the information corresponding to chainID 1002 is used as the mainbridge information and the information corresponding to chainID 1004 is set as a subbridge, value transfer is possible between siblings as in [Cross-Chain Value Transfer](value-transfer).\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/quick-start/value-transfer. # Transfer cross-chain value\n\nThis section will explain how to enable ERC-20 value transfer between Kairos network and your ServiceChain with the provided test code.\nYou will add KAIA to the operator account and deploy bridge and ERC-20 contracts.\nThen you will register the contract address on SCN. And you will test an ERC-20 value transferring.\n\n\n## Prerequisites <a id=\"prerequisites\"></a>\n- We assume that you installed the ServiceChain, and connected the ServiceChain to the Kairos EN by the instructions in [Connecting to Kairos](en-scn-connection).\n- Clone the repository [servicechain-value-transfer-examples](https://github.com/klaytn/servicechain-value-transfer-examples).\n- Install `Node.js` (v14) and `npm` ([How to install](https://nodejs.org/en/download/package-manager/))\n    - This example leverages two packages, axios and caver-js, which both support v14.\n\n\n## ERC-20 Token Transfer (one-step) <a id=\"erc-20-token-transfer-onestep\"></a>\n\n### Step 1: Add KAIA to the operator accounts. <a id=\"step-1-add-kaia-to-the-operator-accounts\"></a>\nConnect to the SCN and check the account addresses by executing `subbridge.parentOperator` and `subbridge.childOperator`.\n```\n$ kscn attach --datadir ~/data\n> subbridge.childOperator\n\"0x10221f7f9355017cd0c11444e7eecb99621bacce\"\n> subbridge.parentOperator\n\"0x3ce216beeafc62d20547376396e89528e1d778ca\"\n```\n\n![](/img/nodes/sc-vt-add-klay.png)\n\n`subbridge.parentOperator` and `subbridge.childOperator` must have enough KAIA to send a transaction. Note that `subbridge.parentOperator` is an account on the Kairos network, and `subbridge.childOperator` is an account on the ServiceChain network. \nCreate a test account at [https://toolkit.kaia.io/account/accountKeyLegacy](https://toolkit.kaia.io/account/accountKeyLegacy) and get test KAIA from [the faucet](https://faucet.kaia.io/). Then send some KAIA to the `parentOperator`. `childOperator` has to get KAIA from the test account generated by `homi` ([Refer to EN Setup and SCN Connection Guide](en-scn-connection)).\n\n```\n$ kscn account import ~/homi-output/keys_test/testkey1\nYour new account is locked with a password. Please give a password. Do not forget this password.\nPassphrase:\nRepeat passphrase:\nAddress: {80119c31cdae67c42c8296929bb4f89b2a52cec4}\n```\n```\n$ kscn attach --datadir ~/data\n> personal.unlockAccount(\"80119c31cdae67c42c8296929bb4f89b2a52cec4\")\nUnlock account 80119c31cdae67c42c8296929bb4f89b2a52cec4\nPassphrase:\nTrue\n> kaia.sendTransaction({from:\"80119c31cdae67c42c8296929bb4f89b2a52cec4\", to:subbridge.childOperator, value: web3.toPeb(1000, \"KAIA\")})\n\"0x84caab84ebf0c4bb4ecf0a7849f1de3e479f1863a95f70c51047a7ca7bc64b33\"\n```\nCheck if the operator accounts have enough balance. You can query from the console of the SCN node where the subbridge is installed as follows:\n```\n> kaia.getBalance(subbridge.childOperator)\n1e+21\n> subbridge.childOperatorBalance\n1e+21\n> subbridge.parentOperatorBalance\n1e+18\n```\n\n### Step 2: Deploy Contracts <a id=\"step-2-deploy-contracts\"></a>\n- Connect to the SCN and prepare the node environment for contract deployment.\nClone the repository [servicechain-value-transfer-examples](https://github.com/klaytn/servicechain-value-transfer-examples).\n\n![](/img/nodes/sc-vt-deploy.png)\n\nIn this step, we would deploy both the bridge contract and token contract in the parent as well as the child chain.\nToken contracts are for mint/transfer test and bridge contracts are used to listen/handle value transfer requests.\n\n```bash\n$ git clone https://github.com/klaytn/servicechain-value-transfer-examples\n$ cd servicechain-value-transfer-examples\n$ npm install\n$ cd erc20\n```\n\nOn a text editor, edit the `bridge_info.json` as below.\n- Replace `url` in the `child` section (SCN node on ServiceChain network) with your SCN node IP and the proper port number from `RPC_PORT` in `kscnd.conf`.\n- Replace `child.key` with `testkey1` that was generated by `homi`.\n- Set `child.operator` to the `subbridge.childOperator` address that we examined in the previous step.\n- Replace `url` in the `parent` section (EN node on Kairos network) with your EN node IP and the proper port number from `RPC_PORT` in `kend.conf`.\n- Replace `parent.key` with the private key of the test account created from [https://toolkit.kaia.io/account/accountKeyLegacy](https://toolkit.kaia.io/account/accountKeyLegacy) in the previous step.\n- Set `parent.operator` as the `subbridge.parentOperator` of the previous step.\n\n```\n{\n     \"child\" : {\n         \"url\": \"http://192.168.0.1:7551\",\n         \"key\": \"0x66cb283353589a10866b58d388e9d956e5a9c873a8c78fa4411d460c19c494ea\",\n         \"operator\": \"0x10221f7f9355017cd0c11444e7eecb99621bacce\"\n     },\n     \"parent\" : {\n         \"url\": \"http://192.168.0.5:8551\",\n         \"key\": \"0x26f4b5ac42ceabcfd3b23a991fdbfc792d10ce700a99582fdf9185a8f163b790\",\n         \"operator\": \"0x3ce216beeafc62d20547376396e89528e1d778ca\"\n     }\n }\n```\n\nPerform the token deployment by running the command `node erc20-deploy.js`. This script deploys both the bridge contract and the token contract, and it outputs API usage to initialize bridge pair.\n```\n$ node erc20-deploy.js\n------------------------- erc20-deploy START -------------------------\n> info.bridge: 0xEa024d8101E112330f2d7B1a7e7932034E206721\n> info.token: 0xbE641028610F628835C36F12bE62d54d74308D70\n> info.bridge: 0xA5af6Ffe13b367626B5AdF827DdE7438E3Db4463\n> info.token: 0x52F8Fa79Fa6D37b18b7AC8f9Ca835373f3C9270f\n> subbridge.registerBridge(\"0xEa024d8101E112330f2d7B1a7e7932034E206721\", \"0xA5af6Ffe13b367626B5AdF827DdE7438E3Db4463\")\n> subbridge.subscribeBridge(\"0xEa024d8101E112330f2d7B1a7e7932034E206721\", \"0xA5af6Ffe13b367626B5AdF827DdE7438E3Db4463\")\n> subbridge.registerToken(\"0xEa024d8101E112330f2d7B1a7e7932034E206721\", \"0xA5af6Ffe13b367626B5AdF827DdE7438E3Db4463\", \"0xbE641028610F628835C36F12bE62d54d74308D70\", \"0x52F8Fa79Fa6D37b18b7AC8f9Ca835373f3C9270f\")\n------------------------- erc20-deploy END -------------------------\n```\n\n### Step 3: Token transfer <a id=\"step-3-token-transfer\"></a>\n\n![](/img/nodes/sc-vt-transfer.png)\n\nPerform token transfer with the command `node erc20-transfer-1step.js`. This one-step token transfer requires modification of an ERC-20 token implementation. If you don't want to modify the token contract or you have a token contract that is already deployed, please refer to [ERC-20 Token Transfer (two-step)](#erc-20-token-transfer-twostep).\n\n```\n$ node erc20-transfer-1step.js\n------------------------- erc20-transfer-1step START -------------------------\nalice balance: 0\nrequestValueTransfer..\nalice balance: 100\n------------------------- erc20-transfer-1step END -------------------------\n```\n\nIf the result is `alice balance: 100`, then it has been executed successfully.\n\n## ERC-20 Token Transfer (two-step) <a id=\"erc-20-token-transfer-twostep\"></a>\nRun erc20-transfer-2step.js for the two-step transfer example. With this two-step token transfer example, unmodified ERC-20 token contracts can be used.\nThe two-step transfer consists of two function calls: (1) approve the bridge contract first, and then (2) call the contract function `requestERC20Transfer()`.\nWe do not deploy contracts in this section since we already deployed both bridge and token contracts. You must deploy first if you didn't deploy them. You can deploy the contract using `node erc20-deploy.js`.\n```\n$ node erc20-transfer-2step.js\n> ------------------------- erc20-transfer-2step START -------------------------\n> alice balance: 100\n> requestValueTransfer..\n> alice balance: 200\n------------------------- erc20-transfer-2step END -------------------------\n```\n\n\n\n## KIP-7 Token Transfer via ERC-20 Interface (two-step) <a id=\"kip-7-token-transfer-via-erc-20-interface-two-step\"></a>\n[KIP-7](https://kips.kaia.io/KIPs/kip-7) is a token standard compatible with ERC-20. We can call `requestERC20Transfer()` function to a KIP-7 token contract to transfer KIP-7 tokens between a parent chain and a child chain.\nIn the case of sending KIP-7 tokens via the ERC-20 interface, we call the `approve()` function to allow the bridge to send the tokens on behalf of the transaction sender. Then call the `requestERC20Transfer()` function.\nThe below command deploys the bridge contract and a KIP-7 contract.\n```\n$ node kip7-deploy.js\n> ------------------------- kip7-deploy START -------------------------\n> info.bridge: 0x04e929Cd2A08acd28a210369407D8Ca237Edd8FE\n> info.token: 0xE0E2fC6C7d1eB069153E0c12a4C87B01586b39e7\n> info.bridge: 0xEb502159A4B4E876B1cb423f250DCC0d276e01b6\n> info.token: 0xd4f02Ca1d49674056A9ec78fbBDc9e1e97726A4F\n> subbridge.registerBridge(\"0x04e929Cd2A08acd28a210369407D8Ca237Edd8FE\", \"0xEb502159A4B4E876B1cb423f250DCC0d276e01b6\")\n> subbridge.subscribeBridge(\"0x04e929Cd2A08acd28a210369407D8Ca237Edd8FE\", \"0xEb502159A4B4E876B1cb423f250DCC0d276e01b6\")\n> subbridge.registerToken(\"0x04e929Cd2A08acd28a210369407D8Ca237Edd8FE\", \"0xEb502159A4B4E876B1cb423f250DCC0d276e01b6\", \"0xE0E2fC6C7d1eB069153E0c12a4C87B01586b39e7\", \"0xd4f02Ca1d49674056A9ec78fbBDc9e1e97726A4F\")\n------------------------- kip7-deploy END -------------------------\n```\nThe below command is an example of sending KIP-7 tokens using the ERC-20 interface with `requestERC20Transfer()`.\n\n```\n$ node kip7-transfer-2step-erc20-interface.js\n> ------------------------- kip7-transfer-2step-erc20-interface START -------------------------\n> alice balance: 0\n> requestValueTransfer..\n> alice balance: 100\n> ------------------------- kip7-transfer-2step-erc20-interface END -------------------------\n```\n\nPlease refer [service-chain-value-transfer-example](https://github.com/klaytn/servicechain-value-transfer-examples) for the other cases.\n\n## Native Support for KIP-7 and KIP-17 (To Be Implemented) <a id=\"native-support-for-kip-7-and-kip-17-to-be-implemented\"></a>\nCurrently, the bridge contract provided by the Kaia team supports only `requestERC20Transfer()` and `requestERC721Transfer()` for token transfer. The corresponding request functions for KIP-7 and KIP-17 will be supported soon. Before the implementation is done, as you can see above, you can transfer KIP-7 tokens using ERC-20 interfaces.\n\n## Value Transfer for ERC-721, KIP-17, and KAIA <a id=\"value-transfer-for-erc721-kip17-and-klay\"></a>\nThe workflow for ERC-721, KIP-17, and KAIA is the same as above. [`erc721`](https://github.com/klaytn/servicechain-value-transfer-examples/tree/main/erc721), [`kip17`](https://github.com/klaytn/servicechain-value-transfer-examples/tree/main/kip17), and [`kaia`](https://github.com/klaytn/servicechain-value-transfer-examples/tree/main/klay) directories contain corresponding example source code.\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain. # Service Chain\n\n## Intended Audience <a id=\"intended-audience\"></a>\n\n- dApp developers who need high TPS, minimal transaction fees, or data privacy.  \n- Anyone who wants to build a local private network or a ledger database for testing.\n\n## Service Chain Overview <a id=\"service-chain-overview\"></a>\n\nKaia Service Chain provides the following features.\n\n- Immediate finality. \n- Cross-chain token transfer.\n- Data anchoring to the main chain.\n- Multi-sig bridge contract to meet enterprise security requirements.\n\n![](/img/nodes/sc_connection.png)\n\n\nRead the [Kaia Scaling Solution](../../learn/scaling-solutions) for more details about the Service Chain.\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/system-requirements. # System Requirements\n\nThe system requirements depend on the performance your need.\nFor the commercial use, you can refer to the recommended specifications of the Endpoint Node and the Core Cell. \n\n- [Endpoint Node System Requirements](../endpoint-node/system-requirements)\n- [Core Cell System Requirements](../core-cell/system-requirements)\n\n",
    "Current Website Url is https://docs.kaia.io/nodes/service-chain/upgrade-and-hard-fork. # Upgrade Service Chain\n\nKaia and its ServiceChain have constantly released new versions to develop new features and fix bugs. This page is a guide to upgrade ServiceChain binaries and setting hard fork block numbers for your ServiceChain.\n\n## Upgrade <a href=\"#upgrade\" id=\"upgrade\"></a>\n\nThis section shows how to upgrade the ServiceChain binary.\n\n**NOTE** Upgrading ServiceChain binaries may be irreversible and backward-incompatible, meaning you cannot downgrade to an older version. Refer to the release notes for more details. For example, the [Kaia v1.9.0 release note](https://medium.com/klaytn/klaytn-v1-9-0-release-notes-medium-58e4644f7544) says:\n\n> NOTE: This version updates the version of the database to support snapshot sync. You cannot downgrade to the older versions with existing data after updating to v1.9.0.\n\nYou can get the latest version of Kaia and ServiceChain binaries in one of the below links:\n\n* [Kaia Docs](../downloads/downloads)\n* [Kaia Github Repository](https://github.com/kaiachain/kaia/releases)\n\nTo upgrade the ServiceChain binary, stop the ServiceChain node and replace the binary. For example, you can use below commands to stop an SCN node and replace the binary with a newer one.\n\n```bash\n$ kscnd stop\nShutting down kscnd: OK\n$ cp /path/to/new/kscn /path/to/original/kscn\n```\n\nYou may restart the ServiceChain node after the upgrade. However, if you are planning to activate hard fork in the ServiceChain, you have to keep the ServiceChain nodes down. Refer to the [Hard Fork](#hard-fork) for instructions of ServiceChain hard fork.\n\n```bash\n$ kscnd start\n```\n\n## Hard Fork <a href=\"#hard-fork\" id=\"hard-fork\"></a>\n\nThis section describes the steps for applying Kaia [hard forks](../../misc/klaytn-history) to ServiceChain.\n\nTo apply the hard fork to the ServiceChain, you need to:\n\n1. Pick an appropriate block number for the hard fork\n2. Upgrade the ServiceChain binary to a version that supports the hard fork\n3. Set the hard fork block number in the ServiceChain\n\n### 1. Pick an appropriate block number for the hard fork <a href=\"#1-pick-an-appropriate-block-number-for-the-hard-fork\" id=\"1-pick-an-appropriate-block-number-for-the-hard-fork\"></a>\n\nIn the Javascript console of the ServiceChain, you can check the current block number as shown below.\n\n```bash\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kscnd_home\n modules: admin:1.0 debug:1.0 eth:1.0 governance:1.0 istanbul:1.0 klay:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n> kaia.blockNumber\n1234\n```\n\nNow, you have to choose an appropriate block number to activate the hard fork. Make sure to have enough number of blocks (which is produced every second) between the current block and the block of hard fork.\n\n### 2. Upgrade the ServiceChain binary <a href=\"#2-upgrade-the-servicechain-binary\" id=\"2-upgrade-the-servicechain-binary\"></a>\n\nRefer to the [Upgrade](#upgrade) section in this page for instructions on upgrading the ServiceChain binaries. Make sure to keep the ServiceChain nodes down (or stopped) for now. You will restart them after you have set the hard fork block number.\n\n### 3. Set the Hard Fork Block Number <a href=\"#3-set-the-hard-fork-block-number\" id=\"3-set-the-hard-fork-block-number\"></a>\n\nIf you have upgraded the ServiceChain binaries with a version that supports the desired hard fork, you can set the hard fork block number in the ServiceChain by re-initializing the chain config with updated genesis.\n\n#### Update genesis and re-initialize chain config for all ServiceChain nodes <a href=\"#update-genesis-and-re-initialize-chain-config-for-all-servicechain-nodes\" id=\"update-genesis-and-re-initialize-chain-config-for-all-servicechain-nodes\"></a>\n\nFirst, specify the hard fork number in the `config` field of `genesis.json`. For example, if you are trying to activate the Magma hard fork in your ServiceChain, you should specify the `magmaCompatibleBlock` in `config` field of the genesis, like below.\n\n```json\n{\n  \"config\": {\n    \"chainId\": 1000,\n    \"istanbulCompatibleBlock\": 0,\n    ...\n    \"magmaCompatibleBlock\": 1500,\n    ...\n  },\n  ...\n}\n```\n\nTo enable a hard fork in the chain config, previous hard forks should be enabled. That is, to enable Magma hard fork, the EthTxType hard fork should be already enabled. If there are missing fields for the compatible block numbers of preceding hard forks in the chain config, you have to add them too.\n\nFor example, if you want to set Magma hard fork block number and if your `genesis.json` does not have `ethTxTypeCompatibleBlock` in its `config` field like below:\n\n```json\n{\n  \"config\": {\n    \"chainId\": 1000,\n    \"istanbulCompatibleBlock\": 0,\n    \"londonCompatibleBlock\": 0,\n    \"istanbul\": {\n      \"epoch\": 3600,\n      \"policy\":0,\n      \"sub\":21\n    },\n    ...\n  }\n}\n```\n\nYou have to add `ethTxTypeCompatibleBlock` too, when you add `magmaCompatibleBlock` in the `config` field, like below.\n\n```json\n{\n  \"config\": {\n    \"chainId\": 1000,\n    \"istanbulCompatibleBlock\": 0,\n    \"londonCompatibleBlock\": 0,\n    \"ethTxTypeCompatibleBlock\": 1500,\n    \"magmaCompatibleBlock\": 1500,\n    \"istanbul\": {\n      \"epoch\": 3600,\n      \"policy\":0,\n      \"sub\":21\n    },\n    ...\n  }\n}\n```\n\nYou can find the history of Kaia hard forks in the [Kaia Docs](../../misc/klaytn-history).\n\nIf you have updated your `genesis.json` with desired hard forks, re-initialize the chain config and apply your change.\n\n```bash\n$ kscn --datadir /path/to/data/directory init /path/to/genesis.json\n```\n\n**NOTE** It is normal that the following error log is printed when you re-initialize the chain config.\n\n```\nERROR[08/02,09:12:39 Z] [48] The same or more recent governance index exist. Skip writing governance index  newIdx=0 govIdxes=[0]\n```\n\n#### Confirm the updated chain config <a href=\"#confirm-the-updated-chain-config\" id=\"confirm-the-updated-chain-config\"></a>\n\nNow, restart the ServiceChain node. For example, you can restart a SCN node with the following command.\n\n```bash\n$ kscnd start\n```\n\nThen, in the Javascript console of SCN, you can check the updated chain config.\n\n```bash\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kscnd_home\n modules: admin:1.0 debug:1.0 eth:1.0 governance:1.0 istanbul:1.0 klay:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n> governance.chainConfig.magmaCompatibleBlock\n1500\n```\n\n## Some Hard Fork specifics <a href=\"#some-hard-fork-specifics\" id=\"some-hard-fork-specifics\"></a>\n\nThis section describes some details for a specific hard fork.\n\n### Magma <a href=\"#magma\" id=\"magma\"></a>\n\nThe Magma hard fork introduces the KIP-71, dynamic gas fee. It includes the upper and lower bound of the gas price.\n\nBy default, the upper bound is set to `750000000000` and the lower bound is set to `25000000000`. You can change those bounds in the Javascript console of SCN nodes using the [governance APIs](../../../references/json-rpc/governance/chain-config). Obviously, lower bound cannot exceed the upper bound.\n\nTo set the gas price to a static value, you have to set the upper and lower bound of the gas price to the same value. For example, you can set gas price to `0`, using `governance.vote` API in the Javascript console of the SCN nodes.\n\n```bash\n$ kscn attach --datadir ~/kscnd_home\nWelcome to the Kaia JavaScript console!\n\ninstance: Kaia/vX.X.X/XXXX-XXXX/goX.X.X\n datadir: ~/kscnd_home\n modules: admin:1.0 debug:1.0 eth:1.0 governance:1.0 istanbul:1.0 klay:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n\n> governance.vote(\"kip71.lowerboundbasefee\", 0)\n\"Your vote is prepared. It will be put into the block header or applied when your node generates a block as a proposer. Note that your vote may be duplicate.\"\n> governance.vote(\"kip71.upperboundbasefee\", 0)\n\"Your vote is prepared. It will be put into the block header or applied when your node generates a block as a proposer. Note that your vote may be duplicate.\"\n```\n\n**NOTE** The governance voting and its update are available regardless of the activation of the Magma hard fork. That is, the governance voting can be also done prior to the Magma hard fork activation.\n\nIf the votes for updating the upper and lower bound of the gas price were successful, those changes will take effect after 2 istanbul epochs (An epoch has the value in block numbers).\n\nFor example, if the epoch is 3600, and the votes for updating the upper and lower bounds of gas price has been placed in the block #4000, those changes will take effect starting from the block #10800. In detail, the votes will be finalized when their first epoch was reached at the block #7200, and the changes are applied at the second epoch (block #10800).\n\nTo check the epoch, you can use the `governanace.itemsAt` API, like below.\n\n```javascript\n> governance.itemsAt(kaia.blockNumber)\n{\n  governance.governancemode: \"none\",\n  governance.governingnode: \"0x05ad406f31e22b74f18c9ed65ed1ccd349bbbee0\",\n  governance.unitprice: 0,\n  istanbul.committeesize: 21,\n  istanbul.epoch: 3600,\n  istanbul.policy: 0,\n  kip71.basefeedenominator: 20,\n  kip71.gastarget: 30000000,\n  kip71.lowerboundbasefee: 25000000000,\n  kip71.maxblockgasusedforbasefee: 60000000,\n  kip71.upperboundbasefee: 750000000000,\n  reward.deferredtxfee: false,\n  reward.minimumstake: \"2000000\",\n  reward.mintingamount: \"9600000000000000000\",\n  reward.proposerupdateinterval: 3600,\n  reward.useginicoeff: false\n}\n```\n\nYou can see that the `istanbul.epoch` has a value of 3600 blocks, which would normally take an hour to pass.\n\nYou can change the epoch too, using the `governance.vote` API.\n\n```javascript\n> governance.vote(\"istanbul.epoch\", 60)\n\"Your vote is prepared. It will be put into the block header or applied when your node generates a block as a proposer. Note that your vote may be duplicate.\"\n```\n",
    "Current Website Url is https://docs.kaia.io/references/contract-addresses. # Contract addresses\n\nThis page lists the deployed addresses of notable system contracts. You can see the contract code and transactions in the [Block Explorers](../../build/tools/block-explorers).\n\nSome Kaia features rely on the special smart contracts called *system contracts*. They hold critical information such as validators and staking. A Kaia node reads the storage states of system contracts as part of its block processing job. Users and developers can interact with these contracts to query information and build applications such as staking services.\n\n| Contract                    | Mainnet                                    | Kairos                                     |\n| ---                         | ---                                        | ---                                        |\n| AddressBook                 | 0x0000000000000000000000000000000000000400 | 0x0000000000000000000000000000000000000400 |\n| CypressCredit               | 0x0000000000000000000000000000000000000000 | n/a                                        |\n| KIP-81 GovParam             | 0x362976Cc2Ef6751DE6bf6008e3E90e1e02deCa51 | 0x84214cec245d752a9f2faf355b59ddf7f58a6edb |\n| KIP-103 TreasuryRebalance   | 0xD5ad6D61Dd87EdabE2332607C328f5cc96aeCB95 | 0xD5ad6D61Dd87EdabE2332607C328f5cc96aeCB95 |\n| KIP-160 TreasuryRebalanceV2 | 0xa4df15717Da40077C0aD528296AdBBd046579Ee9 | 0x3D478E73c9dBebB72332712D7265961B1868d193 |\n| KIP-149 Registry            | 0x0000000000000000000000000000000000000401 | 0x0000000000000000000000000000000000000401 |\n| KIP-113 SimpleBlsRegistry   | proxy 0x3e80e75975bdb8e04B800485DD28BebeC6d97679 <br/> logic 0xb5ed8d6edd437a0d6ae828580c0aef5678d87f1a | proxy 0x4BEed0651C46aE5a7CB3b7737345d2ee733789e6 <br/> logic 0x6751096fe72d835307d7e635aed51296948b93c5 |\n\nSome contracts are not directly read by Kaia nodes but play crucial roles in operating the Kaia blockchain and its ecosystem. They include treasury, governance, and KAIA token bridge contracts.\n\n| Contract                        | Mainnet                                    | Kairos                                     |\n| ---                             | ---                                        | ---                                        |\n| KIP-81 StakingTracker           | 0x9b8688d616D3D5180d29520c6a0E28582E82BF4d | 0x8Fe0f06DF2C95B8D5D9D4232405614E505Ab04C0 |\n| KIP-81 Voting                   | 0xca4ef926634a530f12e55a0aee87f195a7b22aa3 | 0x2C41DdBF0239cEaa75325D66809d0199F368188b |\n| KIP-103 KVC                     | 0x4f04251064274252D27D4af55BC85b68B3adD992 | 0xaa8d19a5e17e9e1bA693f13aB0E079d274a7e51E |\n| KIP-103 KFF                     | 0x85D82D811743b4B8F3c48F3e48A1664d1FfC2C10 | 0x8B537f5BC7d176a94D7bF63BeFB81586EB3D1c0E |\n| KIP-103 KCF                     | 0xdd4C8d805fC110369D3B148a6692F283ffBDCcd3 | 0x47E3DbB8c1602BdB0DAeeE89Ce59452c4746CA1C |\n| KIP-160 KIF                     | 0x440372e3cE41a85b7B5A6091c232470d186367D5 | 0x8436e5BD1A6D622c278c946E2F8988a26136A16F |\n| KIP-160 KEF                     | 0x2D493DC06B73CF8Dede958FABBC9d62C31fA0926 | 0x819d4b7245164e6A94341F4b5C2ae587372BB669 |\n| LINE NEXT Delegation            | 0xc8c5dd35e77b9e2dd7f4c2eb7f436d34d04a059b | 0x8436e5BD1A6D622c278c946E2F8988a26136A16F |\n| Kaiabridge Bridge               | 0x5Ff2AD57C15f7Dacb5D098d1fC82DAF482884f99 | 0x4cE2b3dC804B35aC43F96B266B50Bc9fE69A97C2 |\n| Kaiabridge Operator             | 0xB390AaEf82Af9F8392Ed90768DABF91164c59619 | 0x8afe7C44C0293fd69baF444743e224Da1886760A |\n| Kaiabridge Judge                | 0x64c91d6517b8f2fd7f4157c32DE4acfe1AeA2611 | 0x3735Ba95cca5DEd47Fa5b202a2Bbda4c63c0B1DD |\n| Kaiabridge Guardian             | 0xE49D152E5FA576caFC18D2775AF4E58C135a6851 | 0xc9e8342C1da4c89A423258d9030414331b4761Cf |\n| KIP-163 PublicDelegationFactory | 0x29C8cc53d22F79D4024ecB67DB1a09b37bCdE415 | 0x98c47c2cda854cbb025d47de72149a7ec238ec33 |\n\n",
    "Current Website Url is https://docs.kaia.io/references/json-rpc/admin/README. This RPC API docs will be automatically generated in the Kaia-docs official site.\nPlease follow the steps below if you also want to build the RPC API documentation\n```shell\n> git clone -b dev https://github.com/kaiachain/kaia-sdk.git\n\n> cd ./kaia-sdk/documentation && RPC_SPEC_DIR=../../web3rpc/yaml ./generate-docs.sh split\n\n> cd ../../web3rpc && ./web3rpc.sh\n```",
    "Current Website Url is https://docs.kaia.io/references/public-en. # Public JSON RPC Endpoints\n\nPublicly exposed JSON-RPC endpoints allow you to test and run your blockchain products by providing interaction with the Kaia network without running your own node.\n\nRunning your own Kaia Endpoint Node (EN) is not simple, it requires technical expertise, monitoring and computing resources. It comes with a cost of maintaining storage, network bandwidth as well as having to divert engineering time and resources; nodes must be kept up to date and health checked regularly.\n\nHence, the main benefit of using an existing Public EN is that it allows you to solely focus on building and testing your blockchain product without the distraction of maintaining infrastructure to connect and interact with the Kaia network.\n \n## Things to Consider\n\n- The node providers are not responsible for any damage or losses caused in relation to traffic or interaction with the nodes.\n- If traffic is concentrated on certain nodes, you may experience service delay.\n- To prevent too many requests, rate limits may apply on a per-node basis, which are subject to change without prior notification.\n\n## Public JSON-RPC Endpoints\n\nBelow is the list of the network domains offered by Kaia’s Public Node Providers.\n\n:::info[Outdated Endpoints Stopped Working]\n\nPlease note that the following URLs was discontinued at the end of September 2024. We encourage you to update your configurations accordingly to ensure uninterrupted service:\n\n**Mainnet**\n\n- `https://public-en-cypress.klaytn.net` (replaced by `https://public-en.node.kaia.io`)\n- `https://archive-en.cypress.klaytn.net` (replaced by `https://archive-en.node.kaia.io`)\n\n**Testnet**\n\n- `https://public-en-baobab.klaytn.net` (replaced by `https://public-en-kairos.node.kaia.io`)\n- `https://archive-en.baobab.klaytn.net` (replaced by `https://archive-en-kairos.node.kaia.io`)\n\n:::\n\n### Mainnet Public JSON-RPC Endpoints\n\nPlease keep in mind that these endpoints are provided to the community for testing and development purposes.\nSince we cannot guarantee uptime and stability of the endpoints, do not use them for commercial purposes.\n\n**HTTPS**\n\n|Service Provider|Endpoints|Namespaces|Type|\n|---|---|---|---|\n|[Kaia Foundation](https://www.kaia.io)|`https://public-en.node.kaia.io`|kaia,klay,eth,net|Full|\n||`https://archive-en.node.kaia.io`|kaia,klay,eth,net|Archive|\n|[QuickNode](https://quicknode.com/)|`https://alpha-hardworking-orb.kaia-mainnet.quiknode.pro/`|kaia,klay,eth,net|Full|\n|[BlockPI Network](https://blockpi.io/)|`https://kaia.blockpi.network/v1/rpc/public`|kaia,klay,eth,net|Full|\n|[BlockJoy](https://blockjoy.com/)|`http://freely-inspired-ram.n0des.xyz`|kaia,klay,eth,net|Archive|\n|[OnFinality](https://onfinality.io/)|`https://klaytn.api.onfinality.io/public`|kaia,klay,eth,net|Full|\n|[Pokt Network](https://pokt.network/)|`https://kaia-mainnet.rpc.grove.city/v1/803ceedf`|kaia,klay,eth,net|Full|\n|[GetBlock](https://getblock.io/)|`https://go.getblock.io/d7094dbd80ab474ba7042603fe912332`|kaia,klay,eth,net|Full|\n\n**WebSocket** \n\n|Service Provider|Endpoints|Namespaces|Type|\n|---|---|---|---|\n|[Kaia Foundation](https://www.kaia.io)|`wss://public-en.node.kaia.io/ws`|kaia,klay,eth,net|Full|\n||`wss://archive-en.node.kaia.io/ws`|kaia,klay,eth,net|Archive|\n|[QuickNode](https://quicknode.com/)|`wss://alpha-hardworking-orb.kaia-mainnet.quiknode.pro/`|kaia,klay,eth,net|Full|\n|[OnFinality](https://onfinality.io/)|`wss://klaytn.api.onfinality.io/public-ws`|kaia,klay,eth,net|Full|\n\n### Testnet (Kairos) Public JSON-RPC Endpoints\n\n**HTTPS**\n\n|Service Provider|Endpoints|Namespaces|Type|\n|---|---|---|---|\n|[Kaia Foundation](https://www.kaia.io)|`https://public-en-kairos.node.kaia.io`|kaia,klay,eth,net|Full|\n||`https://archive-en-kairos.node.kaia.io/`|kaia,klay,eth,net|Archive|\n|[QuickNode](https://quicknode.com/)|`https://responsive-green-emerald.kaia-kairos.quiknode.pro/`|kaia,klay,eth,net|Full|\n|[BlockPI Network](https://blockpi.io/)|`https://kaia-kairos.blockpi.network/v1/rpc/public`|kaia,klay,eth,net|Full|\n\n**WebSocket** \n\n|Service Provider|Endpoints|Namespaces|Type|\n|---|---|---|---|\n|[Kaia Foundation](https://www.kaia.io)|`wss://public-en-kairos.node.kaia.io/ws`|kaia,klay,eth,net|Full|\n||`wss://archive-en-kairos.node.kaia.io/ws`|kaia,klay,eth,net|Archive|\n|[QuickNode](https://quicknode.com/)|`wss://responsive-green-emerald.kaia-kairos.quiknode.pro/`|kaia,klay,eth,net|Full|\n\n## RPC Service Providers\n\nBelow is the list of Kaia’s Public Node Providers.\n\n### Kaia API Service (KAS)\n\nKAS provides various APIs to support easier and quicker blockchain application development. You can dramatically reduce development time, operate a stable service, and save costs.\n\n#### Features\n\n* 10,000 requests per day (100 requests per second) for the free plan\n* Community support for the free plan, and ticket support for paid plans (Starter, Pro, and Pro Plus)\n* Kaia Node API, Token History API, Wallet API, Anchor API, KIP-7, 17, 37 API and Metadata API\n\n#### References\n\n* [Docs](https://www.klaytnapi.com/en/resource/docs/readme)\n* [Subscription](https://www.klaytnapi.com/en/landing/pricings)\n* [Website](https://www.klaytnapi.com/en/landing/main)\n\n### All That Node\n\nAll That Node aims to become trusty gateway to Web3 infrastructure allowing builders not to distracted by issues regarding blockchain network. All That Node guarantees fast and robust connection to RPC nodes with the lowest latency performance.\n\n#### Features\n\n- Public Nodes & Faucets for the Ecosystem\n- Pay-As-You-Go-plan supported if you need more\n- Dedicated Nodes\n- 24+ Blockchains Supported\n- Archival Data Available\n- Websocket API Available\n- Trace/Debug API Available\n- Uptime 99.9%+\n- Load-Balancing implemented\n- Infinite Scalability\n- 24/7 Support with the Discord Community\n\n#### References\n\n- [Docs](https://docs.allthatnode.com/)\n- [Subscription](https://www.allthatnode.com/pricing.dsrv)\n- [Website](https://www.allthatnode.com/main.dsrv)\n\n### Tatum\n\nTatum is the fastest way to build, test and run blockchain apps. We offer the most flexible platform for developers to turn their blockchain ideas into reality fast.\n\n#### Features\n\n* 5 requests per second for the free plan, and 200 requests per second for the paid plans (Start, Basic)\n* Community support\n\n#### References\n\n* [Docs](https://apidoc.tatum.io/tag/Kaia?_gl=1\\*1dhfv8u\\*_ga\\*MzY5NDMyNzg5LjE2NDQ1NTk1MzA.\\*_ga_BH6F6RKJW6\\*MTY2MjAxNDQ0OS4xNy4xLjE2NjIwMTQ2MTQuMjQuMC4w)\n* [Pricing](https://tatum.io/pricing)\n* [Website](https://tatum.io/)\n\n### BlockPI\n\nBlockPI Network aims to provide high-quality, robust, and efficient RPC service. To avoid the single-point failure and limitation of scalability, the network is designed to be a distributed structure with expandable RPC nodes.\n\nBlockPI provides free public endpoints to the Kaia community and advanced features to paid users.  BlockPI designed two paid packages, and support Pay As You Go to fulfill flexible user needs. You can check the pricing details for each package (https://docs.blockpi.io/documentations/pricing) and the individual method cost for Kaia  (https://docs.blockpi.io/documentations/request-unit-ru)\n\n#### Features\n\n* 20 requests per second on free services, and unlimited for paid packages.\n* Choice of Kaia archive node and endpoint node\n* Whitelisting possible for endpoint nodes\n* WSS available and subscription coming soon\n* Supports tracing\n\n#### References\n\n* [Docs](https://docs.blockpi.io/)\n* [Subscription](https://dashboard.blockpi.io/wallet/overview)\n* [Website](https://blockpi.io/)\n\n### Pocket Network\n\nPocket Network is the TCP/IP of Web3 node infrastructure – a multi-chain relay protocol that incentivizes RPC nodes to provide DApps and their users with unstoppable Web3 access.\n\nPocket supports dozens of blockchains, with more being added all the time.\n\n#### Features\n\n* Decentralized RPC Protocol and Marketplace\n* 250,000 Requests Per Day Free Tier (up to two applications, with unlimited endpoints)\n* Public Endpoints\n* Pay-As-You-Go-plan (if you need more than 250,000 requests per day)\n* 30+ Blockchains Supported\n* 25,000 + Nodes earning POKT for serving applications\n* Archival Node, Archival Node w/ Tracing, & Testnet Node Support\n* No Single Point of Failure\n* Zero Downtime\n* Cost-Effective Near-Zero Tokenomics (stake POKT once for network bandwidth)\n* No monthly sunk costs, turn your infrastructure into an asset\n* Load-Balancing built into the Protocol\n* Infinitely scale the number of requests per day and nodes per hour as you go\n* The most private, censorship-resistant option\n* Hands-on developer support\n\n#### References\n\n* [Docs](https://docs.pokt.network/api-docs/klaytn-evm/#/)\n* [Website](https://docs.pokt.network/)\n* [Pocket Portal](https://bit.ly/ETHorg_POKTportal) dashboard and analytics\n\n### ANKR\n\nAnkr's distributed node network creates a powerful synergy, allowing developers to connect easily and securely to public endpoints. With fine-tuned caching that optimizes resource usage, Ankr guarantees fast RPC requests together with low latency performance for superior efficiency when building decentralized applications.\n\n#### Features\n\n* 500 requests per second on the free plan, and 1,500 on the premium. It is upgradable on request.\n* Discord and Support Portal for the free plan, and dedicated support for the premium.\n* WebSocket is available for the premium plan.\n\n#### References\n\n* [Docs](https://www.ankr.com/docs/build-blockchain/overview)\n* [Subscription](https://www.ankr.com/rpc/pricing/)\n* [Website](https://www.ankr.com/rpc/)\n\n### NodeReal\n\nNodeReal is a blockchain infrastructure and services provider. NodeReal helps developers and investors to explore blockchains with the most reliable solutions.\n\n#### Features\n\n- Free Tier, 3 API keys, 350 Million Compute Units(CU) monthly , 300 Compute Units Per Seconds(CUPS) monthly, Archive data\n- Growth Tier, 15 API keys, 500 Million Compute Units(CU) monthly , 700 Compute Units Per Seconds(CUPS) monthly, Archive data, Debug & Trace API\n- Enterprise Tier, Custom number of API Keys, Custom monthly usage, Dedicated support, Service-Level Agreement(SLA) and other requirements\n- 50 Queries Per Seconds (QPS)/method\n\n#### References\n\n* [Docs](https://docs.nodereal.io/docs/getting-started)\n* [Subscription](https://nodereal.io/api-marketplace/klaytn-rpc)\n* [Website](https://nodereal.io)\n\n### Nodit\n\nNodit aims to provide enterprise-grade Web3 infrastructure accessible to everyone. By offering robust node infrastructure with 99.9% uptime and reliable ready-to-query blockchain data at an affordable price, we are facilitating developers’ entry into the Web3 world.\n\n#### Features\n\n- Official Faucet for Kaia Testnet [https://kaiafaucet.com](https://kaiafaucet.com)\n- 99.9%+ Uptime\n- FREE access to indexed archival data in Datasquare - Dashboards and SQL supported\n- Data pipeline integration support\n- Auto-scaling supported in the upper Developer Tier\n- 100+ Web3 Data APIs for NFTs, Tokens, Statistics, and more\n- Webhook and Stream(WebSocket) Available\n- Dedicated Nodes\n- 350,000,000 Compute Units(CU) monthly with Free Tier\n- Log Monitoring Dashboard\n\n#### References\n\n* [Website](https://nodit.io)\n* [Datasquare Website](https://datasquare.nodit.io)\n* [Docs](https://developer.nodit.io)\n* [Blog](https://blog.nodit.io)\n\n### GetBlock\n\nGetBlock provides fast, reliable API access to full RPC nodes for over 50 major blockchain networks, including Kaia. By handling node maintenance, GetBlock allows developers and enterprises to focus on building dApps and blockchain solutions without infrastructure headaches.\n\n#### Features\n\n- 40k requests daily on free trail with upto 60 RPS. It also has starter and unlimited plan for better performances and support.\n- 99.9%+ Uptime\n- FREE access to 50+ blockchain protocols with RPC nodes\n- Advanced monitoring & statistics\n- Dedicated Nodes\n\n#### References\n\n* [Website](https://getblock.io/)\n* [Docs](https://getblock.io/docs/getblock-explorer/get-started/)\n\n### BlockJoy\n\nBlockJoy provides dedicated unmetered blockchain nodes on any bare metal infrastructure. Its provides Node infrastructure for various services like Nodes, Staking, APIs, Indexers, Blockchain developers etc.\n\n#### Features\n\n- Run nodes at max performance on bare metal servers.\n- Cut operating costs by up to 80%.\n- Enjoy platform's streamlined UI and cloud-like experience built exclusively for Web3 Infrastructure.\n\n#### References\n\n* [Website](https://blockjoy.com/)\n* [Blog](https://blockjoy.com/blog)\n\n### QuickNode\n\nQuicknode offers blockchain infrastructure powering secure, decentralized innovation. They provide all the tools and resources builders need to create incredible products — all backed by unparalleled, globally-balanced infrastructure, guaranteed reliability and security, a user-friendly interface, and end-to-end customer support.\n\n#### Features\n\n- 15 request/second with 10M API credits on Free plan.\n- Providers starter, Growth and Business plan for more credits and IPFS storage. \n- Battle-tested RPC & API infrastructure providing performance and reliability at-scale.\n- Has dozens of add-ons that make building super-powered dApps easier than ever.\n- Provides streams, the most powerful real-time data pipelines.\n- Event alerts.\n\n#### References\n\n* [Website](https://www.quicknode.com/)\n* [Docs](https://www.quicknode.com/docs/welcome)\n\n### dRPC\n\nDecentralized RPC node provider to Kaia, Ethereum, Polygon, Arbitrum and others. Your trusted Web3 infrastructure partner.\n\n#### Features\n\n- No request limits on Public nodes with General support.\n- Growth and Enterprise plan are also available for High performance nodes.\n- 50+ blockchains across 100+ networks\n- AI-driven load balancer\n- Insightful analytics.\n\n#### References\n\n* [Website](https://drpc.org/)\n* [Docs](https://drpc.org/docs)\n\n## Useful Resources \n\n- Wallet: [Kaia Wallet](../build/tools/wallets/kaia-wallet) is a browser extension wallet for the Kaia Network.\n\n- Faucet: You can obtain test KAIA for the Kairos test network from [KAIA Faucet](https://faucet.kaia.io).\n\n- Explorer: [Kaiascope](../build/tools/block-explorers/kaiascope) is the block explorer for the Kaia Network.\n\n- ChainID : Kairos: 1001 (0x3E9), Mainnet: 8217 (0x2019)\n\n- Gas price: dynamically adjusted within the range [25, 750]. The range can be changed via on-chain governance. For more information, refer to [governance](https://docs.kaia.io/references/json-rpc/governance/chain-config/) and\n[Transaction Fees](../learn/transaction-fees/transaction-fees)",
    "Current Website Url is https://docs.kaia.io/references. # Introduction\n\nThis section serves as a comprehensive resource for dApp (decentralized application) development, providing essential referential information crucial to both frontend and backend development. Here, you will find detailed documentation on API endpoints, SDK libraries, and other vital components that empower developers to create and integrate blockchain-based applications seamlessly. Whether you're building the user interface or crafting the backend logic, this section will be your go-to reference for all technical specifications and functionality details.\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/getting-started. # Ethers.js Extension for Kaia\n\nEthers.js Extension for Kaia offers:\n\n- Drop-in replacement to `ethers.Wallet` that handles both Ethereum and Kaia transaction types\n  involving AccountKey and TxTypes.\n- Drop-in replacement to `ethers.providers.JsonRpcProvider` that provides accesses to both Ethereum RPCs and\n  Kaia-specific RPCs.\n- Drop-in replacement to `ethers.Web3Provider` to work with both MetaMask (`window.ethereum`) and Kaia Wallet (`window.klaytn`)\n\n## Note for ethers v6\n\n`@kaiachain/ethers-ext` supports both ethers v5 and v6. However, you need to use the right packages which are specified for each `ethers` version. So ethers v5 must be used with packages from `@kaiachain/ethers-ext/v5` and ethers v6 is only compatible with `@kaiachain/ethers-ext/v6`.\n\n> **_NOTE:_**\n> If the import path has no version sub-path (`@kaiachain/ethers-ext`), ethers v5 will be used by default.\n\n- **Don't**: Mixing ethers v6 and ethers-ext for ethers v5\n\n  ```js\n  const ethers = require(\"ethers\"); // ethers v6\n  const { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\n  const provider = new ethers.JsonRpcProvider(\n    \"https://public-en-kairos.node.kaia.io\"\n  );\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n- **Do**: Using with ethers v5\n\n  ```js\n  const ethers = require(\"ethers\"); // ethers v5\n  const { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\n  const provider = new ethers.providers.JsonRpcProvider(\n    \"https://public-en-kairos.node.kaia.io\"\n  );\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n- **Do**: Using with ethers v6\n\n  ```js\n  const ethers = require(\"ethers\"); // ethers v6\n  const { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\n  const provider = new ethers.JsonRpcProvider(\n    \"https://public-en-kairos.node.kaia.io\"\n  );\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n- **Do**: Using ethers-ext only\n\n  ```js\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext/v5\");\n  // or\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext/v6\");\n\n  const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n## Install\n\n### Node.js\n\n- Install\n  ```sh\n  npm install --save @kaiachain/ethers-ext ethers@5 # or ethers@6\n  ```\n- ESM or TypeScript\n\n  ```ts\n  import { Wallet, JsonRpcProvider } from \"@kaiachain/ethers-ext\";\n\n  // esm\n  // v5\n  import { v5 } from \"@kaiachain/ethers-ext\";\n  const { Wallet, JsonRpcProvider } = v5;\n  // v6 \n  import { v6 } from \"@kaiachain/ethers-ext\";\n  const { Wallet, JsonRpcProvider } = v6;\n\n  // esm subpath import. If using typescript, add \"moduleResolution\": \"nodenext\" to tsconfig.json\n  // v5\n  import { Wallet, JsonRpcProvider } from \"@kaiachain/ethers-ext/v5\";\n  // v6\n  import { Wallet, JsonRpcProvider } from \"@kaiachain/ethers-ext/v6\";\n\n  const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n- CommonJS\n\n  ```js\n  // v5\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\");\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\").v5;\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext/v5\");\n  // v6\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\").v6;\n  const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext/v6\");\n\n  const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const wallet = new Wallet(\"<private key>\", provider);\n  ```\n\n### Browser\n\nIt is not recommended to use CDNs in production, But you can use below for quick prototyping. using `ethers-ext.buldle.js` for ethers v5 and `ethers-ext.v6.bundle.js` for ethers v6\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@kaiachain/ethers-ext@latest/dist/ethers-ext.bundle.js\"></script>\n<script>\n  const provider = new ethers_ext.providers.Web3Provider(window.klaytn);\n</script>\n```\n\n## Usage\n\nSee [example](./example) and [test](./test).",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithLegacy.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithLegacy.js\npub 0x026e63942bece2c9c346fba11c493dc0d7ae0ab14b7b75c6d988619228cbb4e996\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithLegacy.js focus=1:3\n\n```\n\n---\n\nDefine sender **address** and **private key**\n\n```js AccountUpdateWithLegacy.js focus=7:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithLegacy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithLegacy.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithLegacy.js focus=11\n\n```\n\n---\n\nDeclare a transaction in the **key** field with the value `AccountKeyType.Legacy`\n\n```js AccountUpdateWithLegacy.js focus=14:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=22:23\n\n````\n---\n\n```zsh output\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.utils.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.utils.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithMultiSigExample.js\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **muti-sig private keys** to be changed\n\n```js AccountUpdateWithMultiSigExample.js focus=5:10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.utils.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.utils.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate three sender's wallets with the **private keys** and **provider**\n\n```js AccountUpdateWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCompute the **public keys** from the new private keys\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=18:21\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has the **keys** field with the computed **public keys** and theirs **weight**, specify the **type** as **WeightedMultiSig**\n\n```js AccountUpdateWithMultiSigExample.js focus=23:36\n\n```\n\n---\n\nSign the transaction with the first wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=41:44\n\n````\n---\n\n```zsh output\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the second wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=46:48\n\n````\n---\n\n```zsh output\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the third wallet and send it to kaia network\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=50:52\n\n````\n---\n\n```zsh output\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=54:55\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithPubKey.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithPubKey.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithPubKey.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and **new private key** to be changed\n\n```js AccountUpdateWithPubKey.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithPubKey.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithPubKey.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithPubKey.js focus=12\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=15:16\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has type **AccountKeyType.Public** and **key** field with the new computed **public key**\n\n```js AccountUpdateWithPubKey.js focus=18:25\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=27:28\n\n````\n---\n\n```zsh output\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=30:31\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.utils.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.utils.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithRoleBased.js\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **role-based private keys** to be changed\n\n```js AccountUpdateWithRoleBased.js focus=5:11\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithRoleBased.js focus=13\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithRoleBased.js focus=13\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.utils.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.utils.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **updater role** private key and provider\n\n```js AccountUpdateWithRoleBased.js focus=14\n\n```\n\n---\n\nCompute the **public keys** from the new **role-based** private keys\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=17:20\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **keys** field with the computed **role-based public keys**\n\n```js AccountUpdateWithRoleBased.js focus=22:34\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=36:37\n\n````\n---\n\n```zsh output\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=39:40\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/keystore/keystoreV3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV3.js\nconst { Wallet } = require('@kaiachain/ethers-ext/v5')\n\n// Eth V3. ethers.Wallet.createRandom().encrypt(\"password\")\nconst encryptedKey = {\n  address: '029e786304c1531af3ac7db24a02448e543a099e',\n  id: '9d492c95-b9e3-42e3-af73-5c77e932208d',\n  version: 3,\n  crypto: {\n    cipher: 'aes-128-ctr',\n    cipherparams: { iv: 'bfcb88a1501e2bb1e6694c03da18953d' },\n    ciphertext:\n      '076510b4e25d5cfc31239bffcad6036fe543cbbb04b9f3ec719bf4f61b58fc05',\n    kdf: 'scrypt',\n    kdfparams: {\n      salt: '79124f05995aae98b3088d8365f59a6dfadd1c9ed249abae3c07733f4cbbee53',\n      n: 131072,\n      dklen: 32,\n      p: 1,\n      r: 8,\n    },\n    mac: 'd70f83824c2c30dc5cd3a244d87147b6aa713a6000165789a82a467651284ac7',\n  },\n}\n// const address = \"0x029e786304c1531aF3aC7db24A02448e543A099E\";\n// const key = \"0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\";\n\nconst password = 'password'\nconst password2 = 'password2'\n\nasync function main() {\n  const account = Wallet.fromEncryptedJsonSync(encryptedKey, password)\n\n  console.log('\\ndecrypted address')\n  console.log(account.address)\n\n  console.log('\\ndecrypted privateKey')\n  console.log(account.privateKey)\n\n  account.encrypt(password2).then((encryptedKey2) => {\n    const account2 = Wallet.fromEncryptedJsonSync(encryptedKey2, password2)\n\n    console.log('\\ndecrypted address with new password')\n    console.log(account2.address)\n\n    console.log('\\ndecrypted privateKey with new password')\n    console.log(account2.privateKey)\n  })\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node keystoreV3.js\n\ndecrypted address\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n\ndecrypted address with new password\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey with new password\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext/v5** package.\n\n```js keystoreV3.js focus=1\n\n```\n\n---\n\n**Encrypted key** and **password** information are declared.\n\n```js keystoreV3.js focus=3:25\n\n```\n\n---\n\nYou can also create a encrypted key with the **ethers.Wallet.createRandom().encrypt()** function.\n\n```js keystoreV3.js focus=3\n\n```\n\n---\n\nDecrypt **account** from the **encryptedKey** with the **password**.\n\n```js keystoreV3.js focus=31\n\n```\n\n---\n\nYou can check address and privateKey of the **account**.\n\n```js keystoreV3.js focus=33:37\n\n```\n\n---\n\nEncrypt the **account** with another password **password2**. And it will make another **encryptedKey2**.\n\n```js keystoreV3.js focus=39\n\n```\n\n---\n\nRe-decrypt the **account2** from **encryptedKey2** with **password2** and check if the address and privateKey of the **account2** are same with the info of the **account** from **encryptedKey**.\n\n```js keystoreV3.js focus=40:46\n\n```\n\n---\n\nExecute the main function.\n\n```js keystoreV3.js focus=50\n\n```\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/keystore/keystoreV4-multi. # V4 keystore multi\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 multi**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-multi.js\nconst {\n  Wallet\n} = require(\"@kaiachain/ethers-ext/v5\");\n\n// Klaytn V4 with multiple role-based keys. https://toolkit.klaytn.foundation/misc/generateKeystore\nconst encryptedKey = `{\n  \"version\": 4,\n  \"id\":\"2d7ad5c1-880f-4920-9b8e-51f852c4802c\",\n  \"address\":\"0x17226c9b4e130551c258eb7b1cdc927c13998cd6\",\n  \"keyring\":[\n    [\n      {\n        \"ciphertext\":\"eb9bd884ac3cc8bf92e6b0082e9d07198bfc4c1223ccc6e5edf7452ad612b2b5\",\n        \"cipherparams\":{\"iv\":\"47faf7b0991a051eef698c73fc246f78\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"ba0a3e8dc49a04f8e590f8df5a590bc6e134b031ce10f46d73d4c459aa4c08f8\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"4978d7325e1b9b3ec9fdfd1ec709a5a86fdfade0297ea9ddeeb8c3a7a62ae898\"\n      }\n    ],\n    [\n      {\n        \"ciphertext\":\"1a80c8666bea1a8dfa3082b001ff64c818fb14cf4e02017785e0edcc7a277af4\",\n        \"cipherparams\":{\"iv\":\"eafbecc65ccc177a5579bf56d5f4ed31\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"6472845219e11e4de094cac8c32a6a4d13e69cd4507780a7a37f5e411e1d895d\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"86379236d2fd6e9bb3f99f7eebaa3325b51e9fa5ec150ade7a461555c0a14ca3\"\n      },\n      {\n        \"ciphertext\":\"0071c41d2956b12be5ebc08a9a5b3a9684b9e410fe2de91d614be977fb2a0bdb\",\n        \"cipherparams\":{\"iv\":\"1492dfb771030d3d9c9d996c193c03e5\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"f8145aa907a649866e0fbff86011244584ddc86559cf4901f8f69b670c234fd7\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"eacc58c1ad717ca375697c9fcc80f463a26600f5da1b21327715bf3efa047be5\"\n      }\n    ],\n    [\n      {\n        \"ciphertext\":\"68ffc1e2800a7288ba7baba0f0f8049daeed05379fabfdd3bc017fa85c49ab50\",\n        \"cipherparams\":{\"iv\":\"17f22d7b8aa1a8a2948fd3629f0b89ed\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"ff5e577ec8294320cfe59ef7b1b01ee44d4c9f19c8fbc31f333059c74eb8c6d2\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"de65d669be044df5e39e678b099424a8692a2da6f3746832862cf2e5d6ada612\"\n      },\n      {\n        \"ciphertext\":\"fd4810ee850f0aa5f61a2eafbfc5ca36cfebb42df5c2465cc8ae5188029b188b\",\n        \"cipherparams\":{\"iv\":\"b00ead13b38e449c268d09fced80ce49\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"af5dbbfb7383045dc7f8a3bfc56cccfc22a5150a1f87e454d40893a4b6fea9a1\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"6234352852eb18246b94f28f3c3454103289ecf2faaa91115927c53729bb0805\"\n      },\n      {\n        \"ciphertext\":\"03b758de6372aa6bedde513ccb282bf8af32bca227c258f3e0fc85ce454d72a4\",\n        \"cipherparams\":{\"iv\":\"5c20f3e96d0802eaf56670e57fbe3e98\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"b5ec4e40f5a09a59e90317ce45eb7bcd73a2a9afe70f6f2e32548fd38ed2da3b\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"99b7f59855f0aa04531cc4a24c7923f75ed8052084de9ec49a2794e3899c3274\"\n      }\n    ]\n  ]\n}`;\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\n// Be sure that decrypted Keystore v4 object is not supported to encrypt keystore v4 again. \n// so this example shows only decrypting Keystore v4 and encrypting it as keysotre v3.\n// Be sure that klaytn address is lost when each account of keystore v4 is encrypted as keysotre v3,\n// because keystore v3 does not support klaytn account system.\nasync function main() {\n  const accounts = Wallet.fromEncryptedJsonListSync(encryptedKey, password);\n\n  console.log(\"decrypted (address, privateKey)\");\n  for (const account of accounts) {\n    console.log(account.klaytnAddr, \", \", account.privateKey);\n  }\n\n  console.log(\"\\ndecrypted (address, privateKey) with new password\");\n  for (const account of accounts) {\n    const v3encryptedKey = await account.encrypt(newPassword);\n    const newAccount = Wallet.fromEncryptedJsonSync(v3encryptedKey, newPassword);\n\n    console.log(newAccount.address, \", \", newAccount.privateKey);\n  }\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-multi.js\ndecrypted (address, privateKey)\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext/v5** package.\n\n```js keystoreV4-multi.js focus=1:3\n\n```\n---\nDefine an encrypted multi keystore version 4\n\n```js keystoreV4-multi.js focus=6:66\n\n```\n---\nSpecify the current **password** of the keystore and a **new password**.\n\n```js keystoreV4-multi.js focus=67:68\n\n```\n---\n**Decrypt** the keystore with its **current password**\n\n```js keystoreV4-multi.js focus=77:80\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-multi.js focus=79\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey)\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n---\nYou can generate a **new keystore** using the **descrypted key** and a **new password**. Note that the new encrypted key will be keystore v3.\n\n```js keystoreV4-multi.js focus=70:73,82:88\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n\n<CH.Code>\n```js keystoreV4-multi.js focus=85:87\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/keystore/keystoreV4-single. # V4 keystore single\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 single**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-single.js\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Klaytn V4 with one key. kcn account new --lightkdf\nconst encryptedKey = `{\n  \"address\":\"ec5eaa07b4d3cbafe7bf437a1ea9a898209f617c\",\n  \"keyring\":[\n    [\n      {\n        \"cipher\":\"aes-128-ctr\",\n        \"ciphertext\":\"0a5aa3749b9e83c2a4238445aeb66f59355c0363a54c163e34e454f76e061e47\",\n        \"cipherparams\":{\"iv\":\"2a0b2e02a61e0f721bd800ea6e23a588\"},\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"n\":4096,\"p\":6,\"r\":8,\"salt\":\"538ead57745bcd946b05fe294de08256628d9a0a393fd29ced933ba5fc045b07\"},\n        \"mac\":\"30b5488bc97165bc7ecac8ff8dfec65a75a8ad206450aecff0ac2dfea6f79b08\"\n      }\n    ]\n  ],\n  \"id\":\"362c0766-f5e3-4b4d-af22-7e89d5fb613a\",\n  \"version\":4\n}`;\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\nasync function main() {\n  const account = Wallet.fromEncryptedJsonSync(encryptedKey, password);\n\n  console.log(\"decrypted (address, privateKey)\");\n  console.log(account.klaytnAddr, \", \", account.privateKey);\n\n  const v3encryptedKey = await account.encrypt(newPassword);\n\n  const newAccount = Wallet.fromEncryptedJsonSync(v3encryptedKey, newPassword);\n\n  console.log(\"\\ndecrypted (address, privateKey) with new password\");\n  console.log(newAccount.address, \", \", newAccount.privateKey);\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-single.js\ndecrypted (address, privateKey)\n0xec5eaa07b4d3cbafe7bf437a1ea9a898209f617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n\ndecrypted (address, privateKey) with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext/v5** package.\n\n```js keystoreV4-single.js focus=1\n\n```\n---\nDefine an encrypted keystore **version 4**\n\n```js keystoreV4-single.js focus=4:20\n\n```\n---\nSpecify the **current password** of the keystore and a **new password**.\n\n```js keystoreV4-single.js focus=21:22\n\n```\n---\nLoad the keystore with its **current password**\n\n```js keystoreV4-single.js focus=25\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-single.js focus=27:28\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey)\n0xec5eaa07b4d3cbafe7bf437a1ea9a898209f617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n---\nYou can generate a new keystore using the descrypted key and a new password.  Note that the new encrypted key will be keystore v3. \n\n```js keystoreV4-single.js focus=30\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n\n<CH.Code>\n```js keystoreV4-single.js focus=32:35\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey) with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithLegacyExample.js\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignTxWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithLegacyExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithLegacyExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithLegacyExample.js focus=9\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithLegacyExample.js focus=10\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithLegacyExample.js focus=13:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=31:32\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithMultiSigExample.js\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **weighted multi-sig** private keys\n\n```js SignTxWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithMultiSigExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 different wallets with the **weighted multi-sig** private keys and provider\n\n```js SignTxWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithMultiSigExample.js focus=18:24\n\n```\n\n---\n\nSign the transaction with **first** wallet, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=29:32\n\n````\n---\n\n```zsh output\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **second** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=34:36\n\n````\n---\n\n```zsh output\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the **third** wallet and send the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=38:40\n\n````\n---\n\n```zsh output\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=42:43\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=45:46\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithPubkeyExample.js\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private keys**\n\n```js SignTxWithPubkeyExample.js focus=5:7\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithPubkeyExample.js focus=8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithPubkeyExample.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithPubkeyExample.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithPubkeyExample.js focus=11\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithPubkeyExample.js focus=14:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=31:34\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithRoleBasedExample.js\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithRoleBasedExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and role-based **private keys**\n\n```js SignTxWithRoleBasedExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithRoleBasedExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithRoleBasedExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithRoleBasedExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's **wallet** with the private key and provider\n\n```js SignTxWithRoleBasedExample.js focus=13\n\n```\n\n---\n\nCreate a **value transfer** transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithRoleBasedExample.js focus=16:22\n\n```\n\n---\n\nSign the transaction with the wallet that has role **sending transaction**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js focus=24:26\n\n```\n\n---\n\n```zsh output\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\n```\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=28:29\n\n````\n---\n\n```zsh output\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=31:32\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=34:35\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithLegacyExample.js\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithLegacyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithLegacyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithLegacyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithLegacyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=17:18\n\n````\n\n---\n```zsh output\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithMultiSigExample.js\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key** and all **weighted multi-sig** private keys\n\n```js SignMsgWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithMultiSigExample.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithMultiSigExample.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 wallets with the **weight multi-sig** private keys and provider\n\n```js SignMsgWithMultiSigExample.js focus=12:14\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithMultiSigExample.js focus=17\n\n```\n\n---\n\nSign the message with sender's **wallet3**\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=18:20\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=22:23\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=25:26\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithPubkeyExample.js\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithPubkeyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithPubkeyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithPubkeyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithPubkeyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithPubkeyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=17:18\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **role-based** private keys\n\n```js SignMsgWithRoleBased.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithRoleBased.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithRoleBased.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithRoleBased.js focus=12\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithRoleBased.js focus=15\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=16:18\n\n````\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=20:21\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=23:24\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeAccountUpdate.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x38d57979b2f8b4c00d29a95e7996f676d05a00e1bf784697896fbf093a9465fa',\n  transactionHash: '0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd',\n  logs: [],\n  blockNumber: 148720836,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeAccountUpdate.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and new private key** to be changed\n\n```js TxTypeAccountUpdate.js focus=6:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeAccountUpdate.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeAccountUpdate.js focus=10\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeAccountUpdate.js focus=11\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=14:15\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **key** field with the computed **public key**\n\n```js TxTypeAccountUpdate.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=26:27\n\n````\n---\n\n```zsh output\nsentTx 0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=29:30\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe6efea4fbe6806bf3a3f967e950a3ba8e510b669931844ac17e07aa5146b1c0e',\n  transactionHash: '0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0',\n  logs: [],\n  blockNumber: 146754601,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxCancelType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxCancelType.js\nsentTx 0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xd3a04d1d6629bb49f1b778e779f20e83a256b5c22d840f43382a82d3f5352016',\n  transactionHash: '0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a',\n  logs: [],\n  blockNumber: 148720874,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxCancelType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxCancelType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxCancelType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxCancelType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the private key and the provider\n\n```js TxCancelType.js focus=8\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.Cancel**.\n\n```js TxCancelType.js focus=11:14\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxCancelType.js focus=16:17\n\n````\n\n\n---\n\n```zsh output\nsentTx 0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxCancelType.js focus=19:20\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2189f4fe71717d3e3585d29599c7a0ff4668b5501d5a2602408e4ba5306b377d',\n  transactionHash: '0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20',\n  logs: [],\n  blockNumber: 146753209,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js txTypeLegacyTransaction.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsentTx 0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xceca715c25ad13f55c4cba62a1c758b2f6731187cbf61d691e84b615dad263ea',\n  transactionHash: '0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8',\n  logs: [],\n  blockNumber: 148720917,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x055f7b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** package that can interact with the Ethereum Blockchain and its ecosystem.\n\n```js txTypeLegacyTransaction.js focus=1\n\n```\n\n---\n\nImport **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeLegacyTransaction.js focus=3\n\n```\n\n---\n\nDefine sender address, sender private key and reciever address\n\n```js txTypeLegacyTransaction.js focus=5:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeLegacyTransaction.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeLegacyTransaction.js focus=9\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js txTypeLegacyTransaction.js focus=10\n\n```\n\n---\n\nDeclare a transaction with the fields such as **from, to, value**.\n\n```js txTypeLegacyTransaction.js focus=13:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=22:23\n\n````\n---\n```zsh output\nsentTx 0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xa0f3212cd274776dbc6cf8dca1afbee4b9e8c807a3ee20b41f1fbb340ab5acc2',\n  transactionHash: '0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95',\n  logs: [],\n  blockNumber: 146837229,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x028d76', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeSmartContractDeploy.js\nsentTx 0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x028016AE0996097bB329a91f3D0C44C0Ee700f34',\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x07a0f27ebddc4c4633c5ea70125e6e09ecc460b19f0e83ff8b271ad34aa868ec',\n  transactionHash: '0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d',\n  logs: [],\n  blockNumber: 148720946,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x04387b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeSmartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxTypeSmartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeSmartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeSmartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js TxTypeSmartContractDeploy.js focus=8\n\n```\n\n---\n\nDeclare a transaction object\n\n```js TxTypeSmartContractDeploy.js focus=11:20\n\n```\n\n---\n\nSpecify the transaction type as SmartContractDeploy\n\n```js TxTypeSmartContractDeploy.js focus=12\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js TxTypeSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeSmartContractDeploy.js focus=21:22\n\n````\n---\n```zsh output\nsentTx 0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js focus=24:25\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x3e6647a6f2a1B217323Bf6b7793036A092Eb2796',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2d6235e99116f98ec0af262ac1bf8aa4d2178b98ad56254a18eadb2e395bace6',\n  transactionHash: '0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55',\n  logs: [],\n  blockNumber: 146753080,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractExecution.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractExecution.js\nsentTx 0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x6f49', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c',\n  transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 148721006,\n      transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 9,\n      blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c'\n    }\n  ],\n  blockNumber: 148721006,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x094000', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractExecution.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js smartContractExecution.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractExecution.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractExecution.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js smartContractExecution.js focus=8\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js smartContractExecution.js focus=10:11\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractExecution.js focus=14\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js smartContractExecution.js focus=15\n\n```\n\n---\n\nDeclare a transaction object\n\n```js smartContractExecution.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js smartContractExecution.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\nsentTx 0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractExecution.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x7a39', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44',\n  transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 146752711,\n      transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 6,\n      blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44'\n    }\n  ],\n  blockNumber: 146752711,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x06a8cd', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeValueTransferMemo.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xf223ef09cb8c9bc50f9ec0463a22ffb8a79c179e6ee5d1dccc0467aa23de7fe2',\n  transactionHash: '0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85',\n  logs: [],\n  blockNumber: 148721333,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x056a2f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeValueTransferMemo.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeValueTransferMemo.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeValueTransferMemo.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeValueTransferMemo.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value, data**.\n\n```js TxTypeValueTransferMemo.js focus=12:18\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=19:21\n\n```\n\n---\n\n```zsh output\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=22:24\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xef816e6444ce19135dfc64803eea5beb9966804ca0869043e287129145ff41ee',\n  transactionHash: '0x2ab415b5e4c354d74cb40c8c2054f9ec139ac629f233674abd40cca5697d53b3',\n  logs: [],\n  blockNumber: 143450915,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/basic-transaction/value-transfer. # Value Transfer\n\n**TxTypeValueTransfer** is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.js\n\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeValueTransferTransaction.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js txTypeValueTransferTransaction.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeValueTransferTransaction.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeValueTransferTransaction.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js txTypeValueTransferTransaction.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value**.\n\n```js txTypeValueTransferTransaction.js focus=11:16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeValueTransferTransaction.js focus=18:20\n\n````\n\n---\n\n```zsh output\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js focus=21:23\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/account-update. # Account Update\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedAccountUpdate.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsenderTxHashRLP 0x21f88c73850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0b1671119941dc92cde038dfe10284b7a41d5ab7fadef6be3480e919c63138dc0a06f1097e05153a83f1353efb579c191070caf5824929fbb7e7b79a266c1746b61\nsentTx 0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x5db31996350447e3aee600ef259f7a381c16a40ecdc0d7e6b3ac4125e86ff400',\n  transactionHash: '0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb',\n  logs: [],\n  blockNumber: 148732537,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x05d4ab', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=1:3\n\n```\n\n---\n\nDeclaring **sender** , **fee payer** address and private keys.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=7:11\n\n```\n\n---\n\n**senderNewPriv** is the private key to be updated\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=9\n\n```\n\n---\n\nCreating a JSON-RPC provider instance with the specified URL\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v5\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCompute new public key from new private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=18:19\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nCreating a transaction object to update new publickey\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=21:28\n\n```\n\n---\n\nPopulate the transaction with sender's wallet.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=31\n\n```\n\n---\n\nSign the transaction with **senderWallet**\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=32:33\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x21f88c67850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f6a0d6754f250d0f0cb631ea5574dbdfd749ef67213570b4c5105cec45595f99a962a066872e325455e7351dbb0861f23c89c1fdba9e15cc18319adf0907fa42025d81\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=35:37\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=39:40\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe15fb511fc02d00e680ffd085857bad9b02efe4dc58384aaa56a4fac3a70f675',\n  transactionHash: '0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b',\n  logs: [],\n  blockNumber: 146817255,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x041899', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxFeeDelegatedCancelType.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a8203af850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a06c639b8828bb27b36b2575636b4ec9dd4c7de4820327fe158746d03b28b90d8ba0332b43ec974ecb3ea16593760cb6e139a95d4ce03847681fb053a00143eb91a1\nsentTx 0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x02d655e716e1a5c8d497f66a6d80683c633d3e4002a9e26026f101983d951c1a',\n  transactionHash: '0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c',\n  logs: [],\n  blockNumber: 148732476,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxFeeDelegatedCancelType.js focus=1:3\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js TxFeeDelegatedCancelType.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxFeeDelegatedCancelType.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxFeeDelegatedCancelType.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=11\n\n```\n\n---\n\nCreate a **fee payer**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=12\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.FeeDelegatedCancel**\n\n```js TxFeeDelegatedCancelType.js focus=15:18\n\n```\n\n---\n\nSign the transaction with **sender** wallet and print out the **senderTxHashRLP**\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=20:23\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a820356850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0ec92eaed1a4b88de5645122b78f1f060aa44e9a6f35d1804ed624dbf74e0c59fa01a9b1e1a4bc35fdb4d1d71ead6be57a15fd06945cf486cf3d0f10f11099db878\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=25:27\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsentTx 0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=29:30\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfe9f4c67ac858fc9dc534612649c89aee502771e5c19c10575874cfc48ef6f18',\n  transactionHash: '0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68',\n  logs: [],\n  blockNumber: 146759527,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x063f86', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f901888203ae850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f6a0ba7429346994b62a646f74f05f5cf1bc8ed28040edf5b6bcd753efab516e5c22a07730efae99c9d0c0f3d7d845452f55a22ed368ade14eb6af7dfdbfdc748ae1ff\nsentTx 0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x7915deAD26C71540fC48384f35bd0744349BABf7',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x43dcff9990b1236a508d514806cdf7c0257a18329a7ff5b81f4fabb28dd174af',\n  transactionHash: '0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0',\n  logs: [],\n  blockNumber: 148732426,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=1:3\n\n```\n\n---\n\nDefine **sender**'s and **fee payer**'s addresses and private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate wallets for the sender and fee payer using their private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=11:12\n\n```\n\n---\n\nDefine the transaction object for a fee-delegated smart contract deployment\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=15:23\n\n```\n\n---\n\nSpecify the transaction type as **FeeDelegatedSmartContractDeploy**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSpecify the **contract bytecode**, you can retreive it from block explorer\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=20\n\n```\n\n---\n\nPopulate the transaction with additional details (e.g., gas limit)\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=26\n\n```\n\n---\n\nSign the transaction with the **sender**'s private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=27:28\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f9018882035b850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f5a014863b7cd821e9b10ff34d0990527c4b8c168641250498729dc1c6d43eba6327a05d54b77915e503c25ab6b9385e961c54a3f96380c42a70c9d5db561dfa694eea\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=30:32\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=34:35\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0xF06D0c870A2745b08d44a9d732771F241b7d2678',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x0436af44d434e1f3b193454f359d2863e4b9ea760140edbaf048bc96904bcbb3',\n  transactionHash: '0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230',\n  logs: [],\n  blockNumber: 146816835,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a68203ad850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f6a0f23531b148298b6b686af71c9722702732bed89202dd2a22adf9880b716ed205a074c31ec53da203c1421ae71e36e3b720f9550a00771784562b68c1cfa23e19e8\nsentTx 0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4',\n  transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n  logs: [\n    {\n      transactionIndex: 4,\n      blockNumber: 148732388,\n      transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 14,\n      blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4'\n    }\n  ],\n  blockNumber: 148732388,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x0b61a0', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js FeeDelegatedSmartContractExecution.js focus=1:3\n\n```\n\n---\n\nDefine **sender** and **fee payer** addresses and private keys\n\n```js FeeDelegatedSmartContractExecution.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js FeeDelegatedSmartContractExecution.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js FeeDelegatedSmartContractExecution.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=11\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=12\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js FeeDelegatedSmartContractExecution.js focus=14:15\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js FeeDelegatedSmartContractExecution.js focus=18\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js FeeDelegatedSmartContractExecution.js focus=19\n\n```\n\n---\n\nBuild the transaction object with type **FeeDelegatedSmartContractExecution**\n\n```js FeeDelegatedSmartContractExecution.js focus=19:27\n\n```\n\n---\n\nPopulate the transaction with necessary details\n\n```js FeeDelegatedSmartContractExecution.js focus=30\n\n```\n\n---\n\nSign the transaction by the **sender's wallet**\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=31:32\n\n````\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a6820355850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f5a0831b71d0a0e4c9f14f6d59fda140f15e5f77738d58466e0e3b11baf67a3a9bd4a03f16a7e78d82ee96ebaafa0bbc691b78e7cc63a294e499c48c16f057f3f8a0d9\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=34:36\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsentTx 0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js focus=38:39\n\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb',\n  transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146757423,\n      transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 0,\n      blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb'\n    }\n  ],\n  blockNumber: 146757423,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n# Fee Delegation\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8203ac850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0bf499bb98ac755430724cb9cf8deb3e2d43baa0f4dc97036d06bd66c91e74f2ca0092f32dbabd626964eeccfe7a1cfc0d14088ece28f7efde952c341428a531785\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xbc02b7afb16657cd1ec45bb6b7445767eb265702ae766dfc8bda3503f74d81a7',\n  transactionHash: '0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae',\n  logs: [],\n  blockNumber: 148732018,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key, fee payer address, fee payer private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=12\n\n```\n\n---\n\nCreate fee payer's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value, input**.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=15:21\n\n```\n\n---\n\nPopulating transaction with additional information using **senderWallet.populateTransaction**\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=23:24\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\n{\n  type: 17,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  input: '0x1234567890',\n  nonce: 762,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n```\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=26:27\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8202fa850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f6a055c20733cb08839d352e8ccbfd9f977ea8ba6cdf1dfad117931a5ca2a6e0b58aa06a777f842b4f23f4ad24309408c78b315f788bcca60826bd68083827f070ee49\n```\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=29:30\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=32:33\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x599e1d0b915bd00eac2a80ddaa1bf7bd91c8b21c9223aaaed1f5f3cb2d5d446c',\n  transactionHash: '0xfa2ae54df3314cdeb3c0fcf6ef970634a06e7d976d5a4e7146b03471e972f851',\n  logs: [],\n  blockNumber: 143462707,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x034d11', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878203ab850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06b4fdf5a4769285549e3bdfec4ba6db98f3439e8a148df1f55b7387a7c207947a0705b7c07749ab7aadab88a6e412a66f1985d821d56104b75d5a5ee6c03924e42\nsentTx 0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfa10dadd1783e0fa65729336cd14bc8197ae0e15c3e42c3cc505b9fce85ebcac',\n  transactionHash: '0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33',\n  logs: [],\n  blockNumber: 148722215,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v5\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate sender and fee payer wallets from private keys.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=12:13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value**.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=15:20\n\n```\n\n---\n\nPopulating transaction with additional information with **senderWallet.populateTransaction**\n\n  <CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=22:23\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\n{\n  type: 9,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  nonce: 760,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n\n\n\nreceipt 123\n````\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878202f8850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6a0427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=28:29\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsentTx {\n  hash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  type: 0,\n  accessList: null,\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  blockNumber: 143450182,\n  transactionIndex: 0,\n  confirmations: 4,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 760,\n  data: '0x',\n  r: '0x6021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6',\n  s: '0x427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c',\n  v: 2038,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=31:32\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  transactionHash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  logs: [],\n  blockNumber: 143450182,\n  confirmations: 4,\n  cumulativeGasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD',\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xda84dd69d31a19882525cb5eed2cdb5bc9693bea69eed76d3190810c86a395d0',\n  transactionHash: '0x87e5b9de87f680e88a484a4525edd56ef5baf2b52a229ad35869f63fc53d3058',\n  logs: [],\n  blockNumber: 148740597,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x0f1c25', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\ndeployed address 0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js smartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine sender address, sender private key\n\n```js smartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js smartContractDeploy.js focus=8\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js smartContractDeploy.js focus=33\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractDeploy.js focus=34\n\n```\n\n---\n\nCreate a contract factory which deploys a contract instance with the Abi and byte code\n\n```js smartContractDeploy.js focus=37\n\n```\n\n---\n\nDeploy the contract with initialize number value equal to 100\n\n```js smartContractDeploy.js focus=38\n\n```\n\n---\n\nSend the transaction to the blockchain and wait for the receipt\n\n<CH.Code>\n```js smartContractDeploy.js focus=40:42\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288',\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc0f8e7d6058aee71eac5736dab4a47b61ede1608d210d592d7a5ad8d443e6ca1',\n  transactionHash: '0xaf4a924f66bb402b0c3fa2fa3b59c5e33a323f2eec870a3683fae495c8263343',\n  logs: [],\n  blockNumber: 146817953,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x0a0eb2', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\n````\n\n</CH.Code>\n\n---\n\nGet the address of the new contract\n\n<CH.Code>\n```js smartContractDeploy.js focus=43\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\ndeployed address 0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SmartContractView.js\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js SmartContractView.js\nnumber 291\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js SmartContractView.js focus=1\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SmartContractView.js focus=3\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SmartContractView.js focus=3\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js SmartContractView.js focus=28\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js SmartContractView.js focus=29\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js SmartContractView.js focus=32\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js SmartContractView.js focus=33:34\n\n````\n---\n```zsh output\n❯ node SmartContractView.js\nnumber 291\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/smart-contract/write-txtype. <CH.Spotlight>\n<CH.Code>\n\n```js writeTxType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeTxType.js\nnumber before 292\nsentTx 0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74',\n  transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740675,\n      transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 0,\n      blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74'\n    }\n  ],\n  blockNumber: 148740675,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 293\n\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeTxType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js writeTxType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeTxType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeTxType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js writeTxType.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeTxType.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeTxType.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeTxType.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=39\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber before 291\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeTxType.js focus=41\n\n```\n\n---\n\nCreate a transaction object with data from previous step with type **SmartContractExecution**\n\n```js writeTxType.js focus=42:48\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js writeTxType.js focus=50:51\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nsentTx 0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js writeTxType.js focus=53:54\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b',\n  transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146818446,\n      transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b'\n    }\n  ],\n  blockNumber: 146818446,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=56\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber after 292\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js writeWithFeeDelegation.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeWithFeeDelegation.js\nnumber before 293\nsenderTxHashRLP 0x31f88447850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f6a0d9d8ebf8d1c2665cf27903234536edc078bf2857a42941a140a8617b2ca1cb7aa05006695b49733abd7dbbb4e5192d81b1f1e84efb1cf919dee6f2d4687aa32fe2\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0x00000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000001200000002',\n  blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a',\n  transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740703,\n      transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a'\n    }\n  ],\n  blockNumber: 148740703,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 294\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeWithFeeDelegation.js focus=1:2\n\n```\n\n---\n\nDefine **sender, fee payer address and sender private key**\n\n```js writeWithFeeDelegation.js focus=4:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeWithFeeDelegation.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeWithFeeDelegation.js focus=9\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=10\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=11\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeWithFeeDelegation.js focus=36\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeWithFeeDelegation.js focus=37\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeWithFeeDelegation.js focus=40\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=42\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber before 292\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeWithFeeDelegation.js focus=44\n\n```\n\n---\n\nCreate a transaction object with data from previous step\n\n```js writeWithFeeDelegation.js focus=42:48\n\n```\n\n---\n\nSign the transaction with sender's wallet\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=53:56\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x31f8843a850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f5a014ebdbabc74b5b93770f1f0980b67af59fa47a1bf450d0c27928a5f3f831219aa0027c3a6262e28dfad9166ec8d7a5d77da55272d18a3c1b656024764f8cb3379a\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=58:61\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5',\n  transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146818590,\n      transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 6,\n      blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5'\n    }\n  ],\n  blockNumber: 146818590,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x068840', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=63\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber after 293\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWrite.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber before 291\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n  transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac'\n    }\n  ],\n  blockNumber: 148740640,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\nnumber after 292\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractWrite.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js smartContractWrite.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractWrite.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWrite.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v5\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js smartContractWrite.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractWrite.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js smartContractWrite.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractWrite.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=39\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber before 293\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js smartContractWrite.js focus=41\n\n```\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractWrite.js focus=42:43\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n  transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a'\n    }\n  ],\n  blockNumber: 146819181,\n  confirmations: 8,\n  cumulativeGasUsed: BigNumber { _hex: '0x026fa8', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=45\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber after 294\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/utils/address. # Address\n\nUtils for compressing public key.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js addressUtils.js\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nImport the **getCompressedPublicKey** from **@kaiachain/ethers-ext** packages\n\n```js addressUtils.js focus=1\n\n```\n\n---\n\nTo compress a public key from `{x, y}` format to hexadecimal, use `getCompressedPublicKey` with the **public key object** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:11\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nOtherwise if you want to compress the **public key** from **uncompressed hexadecimal**, use `getCompressedPublicKey` with the **uncompress public key** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:9\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node addressUtils.js\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/utils/signature. # Signature\nConvert signature into tuple format from object, compact signatures.\n<CH.Spotlight>\n<CH.Code>\n\n```js signatureUtils.js\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n```\n\n</CH.Code>\n\n---\nImport the **getSignatureTuple** from **@kaiachain/ethers-ext** packages\n\n```js signatureUtils.js focus=1\n\n```\n---\nTo compress a public key from `{r, s, v}` format to tuple, use `getSignatureTuple` with the **signature object** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:11\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n---\nTo compress a public key from compact 65 bytes format to tuple, use `getSignatureTuple` with the **compact signature** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:9\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v5/utils/unit. # Units\nFor units conversion, Kaia-sdk supports utils for converting `kaia`, `Gkei` and `kei`. See [supported units](https://docs.kaia.io/learn/kaia-native-token/#units-of-kaia-) .\n<CH.Spotlight>\n<CH.Code>\n\n```js unitUtils.js\nconst {\n  formatKlay,\n  parseKlay,\n  formatKlayUnits,\n} = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'example basefee in ston =',\n    formatKlayUnits('0x5d21dba00', 'ston')\n  )\n  console.log('transfer amount in klay =', formatKlay('1230000000000000000'))\n  console.log(\n    'example gas price in peb =',\n    parseKlayUnits('50', 'ston').toString()\n  )\n  console.log('transfer amount in peb =', parseKlay('9.87').toString())\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node unitUtils.js\nexample basefee in ston = 25.0\ntransfer amount in klay = 1.23\nexample gas price in peb = 50000000000\ntransfer amount in peb = 9870000000000000000\n```\n\n</CH.Code>\n\n---\n\nImport the `formatKlay`, `parseKlay`, `formatKlayUnits`, from **@kaiachain/ethers-ext** packages\n\n```js unitUtils.js focus=1\n\n```\n---\nTo convert **peb** to other units, use `formatKlayUnits`. For example, using `formatKlayUnits` converting **peb** to **ston**\n\n```js unitUtils.js focus=8:11\n\n```\n---\nUsing `formatKlay` converts **peb** to **klay**\n\n```js unitUtils.js focus=12\n\n```\n---\nUsing `parseKlayUnits` to convert value from one unit to **peb**. The first param is the **value**, the second param is the unit to **be converted**\n\n```js unitUtils.js focus=13:16\n\n```\n---\nUsing `parseKlay` to convert **klay** to **peb**\n\n```js unitUtils.js focus=17\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithLegacy.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithLegacy.js\npub 0x026e63942bece2c9c346fba11c493dc0d7ae0ab14b7b75c6d988619228cbb4e996\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithLegacy.js focus=1:3\n\n```\n\n---\n\nDefine sender **address** and **private key**\n\n```js AccountUpdateWithLegacy.js focus=7:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithLegacy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithLegacy.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithLegacy.js focus=11\n\n```\n\n---\n\nDeclare a transaction in the **key** field with the value `AccountKeyType.Legacy`\n\n```js AccountUpdateWithLegacy.js focus=14:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=22:23\n\n````\n---\n\n```zsh output\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.SigningKey.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.SigningKey.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.SigningKey.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithMultiSigExample.js\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **muti-sig private keys** to be changed\n\n```js AccountUpdateWithMultiSigExample.js focus=5:10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.SigningKey.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.SigningKey.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.SigningKey.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate three sender's wallets with the **private keys** and **provider**\n\n```js AccountUpdateWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCompute the **public keys** from the new private keys\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=18:21\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has the **keys** field with the computed **public keys** and theirs **weight**, specify the **type** as **WeightedMultiSig**\n\n```js AccountUpdateWithMultiSigExample.js focus=23:36\n\n```\n\n---\n\nSign the transaction with the first wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=41:44\n\n````\n---\n\n```zsh output\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the second wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=46:48\n\n````\n---\n\n```zsh output\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the third wallet and send it to kaia network\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=50:52\n\n````\n---\n\n```zsh output\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=54:55\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithPubKey.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithPubKey.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithPubKey.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and **new private key** to be changed\n\n```js AccountUpdateWithPubKey.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithPubKey.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithPubKey.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithPubKey.js focus=12\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=15:16\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has type **AccountKeyType.Public** and **key** field with the new computed **public key**\n\n```js AccountUpdateWithPubKey.js focus=18:25\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=27:28\n\n````\n---\n\n```zsh output\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=30:31\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.SigningKey.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.SigningKey.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.SigningKey.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithRoleBased.js\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **role-based private keys** to be changed\n\n```js AccountUpdateWithRoleBased.js focus=5:11\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithRoleBased.js focus=13\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithRoleBased.js focus=13\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.SigningKey.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.SigningKey.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.SigningKey.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **updater role** private key and provider\n\n```js AccountUpdateWithRoleBased.js focus=14\n\n```\n\n---\n\nCompute the **public keys** from the new **role-based** private keys\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=17:20\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **keys** field with the computed **role-based public keys**\n\n```js AccountUpdateWithRoleBased.js focus=22:34\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=36:37\n\n````\n---\n\n```zsh output\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=39:40\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/keystore/keystoreV3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV3.js\nconst { Wallet } = require('@kaiachain/ethers-ext/v6')\n\n// Eth V3. ethers.Wallet.createRandom().encrypt(\"password\")\nconst encryptedKey = {\n  address: '029e786304c1531af3ac7db24a02448e543a099e',\n  id: '9d492c95-b9e3-42e3-af73-5c77e932208d',\n  version: 3,\n  crypto: {\n    cipher: 'aes-128-ctr',\n    cipherparams: { iv: 'bfcb88a1501e2bb1e6694c03da18953d' },\n    ciphertext:\n      '076510b4e25d5cfc31239bffcad6036fe543cbbb04b9f3ec719bf4f61b58fc05',\n    kdf: 'scrypt',\n    kdfparams: {\n      salt: '79124f05995aae98b3088d8365f59a6dfadd1c9ed249abae3c07733f4cbbee53',\n      n: 131072,\n      dklen: 32,\n      p: 1,\n      r: 8,\n    },\n    mac: 'd70f83824c2c30dc5cd3a244d87147b6aa713a6000165789a82a467651284ac7',\n  },\n}\n// const address = \"0x029e786304c1531aF3aC7db24A02448e543A099E\";\n// const key = \"0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\";\n\nconst password = 'password'\nconst password2 = 'password2'\n\nasync function main() {\n  const account = Wallet.fromEncryptedJsonSync(encryptedKey, password)\n\n  console.log('\\ndecrypted address')\n  console.log(account.address)\n\n  console.log('\\ndecrypted privateKey')\n  console.log(account.privateKey)\n\n  account.encrypt(password2).then((encryptedKey2) => {\n    const account2 = Wallet.fromEncryptedJsonSync(encryptedKey2, password2)\n\n    console.log('\\ndecrypted address with new password')\n    console.log(account2.address)\n\n    console.log('\\ndecrypted privateKey with new password')\n    console.log(account2.privateKey)\n  })\n}\n\nmain()\n```\n---\n\n```zsh output\n❯ node keystoreV3.js\n\ndecrypted address\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n\ndecrypted address with new password\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey with new password\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext/v6** package.\n\n```js keystoreV3.js focus=1\n\n```\n\n---\n\n**Encrypted key** and **password** information are declared.\n\n```js keystoreV3.js focus=3:25\n\n```\n\n---\n\nYou can also create a encrypted key with the **ethers.Wallet.createRandom().encrypt()** function.\n\n```js keystoreV3.js focus=3\n\n```\n\n---\n\nDecrypt **account** from the **encryptedKey** with the **password**.\n\n```js keystoreV3.js focus=31\n\n```\n\n---\n\nYou can check address and privateKey of the **account**.\n\n```js keystoreV3.js focus=33:37\n\n```\n\n---\n\nEncrypt the **account** with another password **password2**. And it will make another **encryptedKey2**.\n\n```js keystoreV3.js focus=39\n\n```\n\n---\n\nRe-decrypt the **account2** from **encryptedKey2** with **password2** and check if the address and privateKey of the **account2** are same with the info of the **account** from **encryptedKey**.\n\n```js keystoreV3.js focus=40:46\n\n```\n\n---\n\nExecute the main function.\n\n```js keystoreV3.js focus=50\n\n```\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/keystore/keystoreV4-multi. # V4 keystore multi\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 multi**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-multi.js\nconst {\n  Wallet\n} = require(\"@kaiachain/ethers-ext/v6\");\n\n// Klaytn V4 with multiple role-based keys. https://toolkit.klaytn.foundation/misc/generateKeystore\nconst encryptedKey = `{\n  \"version\": 4,\n  \"id\":\"2d7ad5c1-880f-4920-9b8e-51f852c4802c\",\n  \"address\":\"0x17226c9b4e130551c258eb7b1cdc927c13998cd6\",\n  \"keyring\":[\n    [\n      {\n        \"ciphertext\":\"eb9bd884ac3cc8bf92e6b0082e9d07198bfc4c1223ccc6e5edf7452ad612b2b5\",\n        \"cipherparams\":{\"iv\":\"47faf7b0991a051eef698c73fc246f78\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"ba0a3e8dc49a04f8e590f8df5a590bc6e134b031ce10f46d73d4c459aa4c08f8\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"4978d7325e1b9b3ec9fdfd1ec709a5a86fdfade0297ea9ddeeb8c3a7a62ae898\"\n      }\n    ],\n    [\n      {\n        \"ciphertext\":\"1a80c8666bea1a8dfa3082b001ff64c818fb14cf4e02017785e0edcc7a277af4\",\n        \"cipherparams\":{\"iv\":\"eafbecc65ccc177a5579bf56d5f4ed31\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"6472845219e11e4de094cac8c32a6a4d13e69cd4507780a7a37f5e411e1d895d\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"86379236d2fd6e9bb3f99f7eebaa3325b51e9fa5ec150ade7a461555c0a14ca3\"\n      },\n      {\n        \"ciphertext\":\"0071c41d2956b12be5ebc08a9a5b3a9684b9e410fe2de91d614be977fb2a0bdb\",\n        \"cipherparams\":{\"iv\":\"1492dfb771030d3d9c9d996c193c03e5\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"f8145aa907a649866e0fbff86011244584ddc86559cf4901f8f69b670c234fd7\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"eacc58c1ad717ca375697c9fcc80f463a26600f5da1b21327715bf3efa047be5\"\n      }\n    ],\n    [\n      {\n        \"ciphertext\":\"68ffc1e2800a7288ba7baba0f0f8049daeed05379fabfdd3bc017fa85c49ab50\",\n        \"cipherparams\":{\"iv\":\"17f22d7b8aa1a8a2948fd3629f0b89ed\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"ff5e577ec8294320cfe59ef7b1b01ee44d4c9f19c8fbc31f333059c74eb8c6d2\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"de65d669be044df5e39e678b099424a8692a2da6f3746832862cf2e5d6ada612\"\n      },\n      {\n        \"ciphertext\":\"fd4810ee850f0aa5f61a2eafbfc5ca36cfebb42df5c2465cc8ae5188029b188b\",\n        \"cipherparams\":{\"iv\":\"b00ead13b38e449c268d09fced80ce49\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"af5dbbfb7383045dc7f8a3bfc56cccfc22a5150a1f87e454d40893a4b6fea9a1\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"6234352852eb18246b94f28f3c3454103289ecf2faaa91115927c53729bb0805\"\n      },\n      {\n        \"ciphertext\":\"03b758de6372aa6bedde513ccb282bf8af32bca227c258f3e0fc85ce454d72a4\",\n        \"cipherparams\":{\"iv\":\"5c20f3e96d0802eaf56670e57fbe3e98\"},\n        \"cipher\":\"aes-128-ctr\",\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"salt\":\"b5ec4e40f5a09a59e90317ce45eb7bcd73a2a9afe70f6f2e32548fd38ed2da3b\",\"n\":4096,\"r\":8,\"p\":1},\n        \"mac\":\"99b7f59855f0aa04531cc4a24c7923f75ed8052084de9ec49a2794e3899c3274\"\n      }\n    ]\n  ]\n}`;\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\n// Be sure that decrypted Keystore v4 object is not supported to encrypt keystore v4 again. \n// so this example shows only decrypting Keystore v4 and encrypting it as keysotre v3.\n// Be sure that klaytn address is lost when each account of keystore v4 is encrypted as keysotre v3,\n// because keystore v3 does not support klaytn account system.\nasync function main() {\n  const accounts = Wallet.fromEncryptedJsonListSync(encryptedKey, password);\n\n  console.log(\"decrypted (address, privateKey)\");\n  for (const account of accounts) {\n    console.log(account.klaytnAddr, \", \", account.privateKey);\n  }\n\n  console.log(\"\\ndecrypted (address, privateKey) with new password\");\n  for (const account of accounts) {\n    const v3encryptedKey = await account.encrypt(newPassword);\n    const newAccount = Wallet.fromEncryptedJsonSync(v3encryptedKey, newPassword);\n\n    console.log(newAccount.address, \", \", newAccount.privateKey);\n  }\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-multi.js\ndecrypted (address, privateKey)\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext** package.\n\n```js keystoreV4-multi.js focus=1:3\n\n```\n---\nDefine an encrypted multi keystore version 4\n\n```js keystoreV4-multi.js focus=6:66\n\n```\n---\nSpecify the current **password** of the keystore and a **new password**.\n\n```js keystoreV4-multi.js focus=67:68\n\n```\n---\n**Decrypt** the keystore with its **current password**\n\n```js keystoreV4-multi.js focus=77:80\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-multi.js focus=79\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey)\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9b4e130551c258eb7b1cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n---\nYou can generate a **new keystore** using the **descrypted key** and a **new password**. Note that the new encrypted key will be keystore v3.\n\n```js keystoreV4-multi.js focus=70:73,82:88\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n\n<CH.Code>\n```js keystoreV4-multi.js focus=85:87\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/keystore/keystoreV4-single. # V4 keystore single\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 single**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-single.js\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Klaytn V4 with one key. kcn account new --lightkdf\nconst encryptedKey = `{\n  \"address\":\"ec5eaa07b4d3cbafe7bf437a1ea9a898209f617c\",\n  \"keyring\":[\n    [\n      {\n        \"cipher\":\"aes-128-ctr\",\n        \"ciphertext\":\"0a5aa3749b9e83c2a4238445aeb66f59355c0363a54c163e34e454f76e061e47\",\n        \"cipherparams\":{\"iv\":\"2a0b2e02a61e0f721bd800ea6e23a588\"},\n        \"kdf\":\"scrypt\",\n        \"kdfparams\":{\"dklen\":32,\"n\":4096,\"p\":6,\"r\":8,\"salt\":\"538ead57745bcd946b05fe294de08256628d9a0a393fd29ced933ba5fc045b07\"},\n        \"mac\":\"30b5488bc97165bc7ecac8ff8dfec65a75a8ad206450aecff0ac2dfea6f79b08\"\n      }\n    ]\n  ],\n  \"id\":\"362c0766-f5e3-4b4d-af22-7e89d5fb613a\",\n  \"version\":4\n}`;\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\nasync function main() {\n  const account = Wallet.fromEncryptedJsonSync(encryptedKey, password);\n\n  console.log(\"decrypted (address, privateKey)\");\n  console.log(account.klaytnAddr, \", \", account.privateKey);\n\n  const v3encryptedKey = await account.encrypt(newPassword);\n\n  const newAccount = Wallet.fromEncryptedJsonSync(v3encryptedKey, newPassword);\n\n  console.log(\"\\ndecrypted (address, privateKey) with new password\");\n  console.log(newAccount.address, \", \", newAccount.privateKey);\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-single.js\ndecrypted (address, privateKey)\n0xec5eaa07b4d3cbafe7bf437a1ea9a898209f617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n\ndecrypted (address, privateKey) with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext/v6** package.\n\n```js keystoreV4-single.js focus=1\n\n```\n---\nDefine an encrypted keystore **version 4**\n\n```js keystoreV4-single.js focus=4:20\n\n```\n---\nSpecify the **current password** of the keystore and a **new password**.\n\n```js keystoreV4-single.js focus=21:22\n\n```\n---\nLoad the keystore with its **current password**\n\n```js keystoreV4-single.js focus=25\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-single.js focus=27:28\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey)\n0xec5eaa07b4d3cbafe7bf437a1ea9a898209f617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n---\nYou can generate a new keystore using the descrypted key and a new password.  Note that the new encrypted key will be keystore v3. \n\n```js keystoreV4-single.js focus=30\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n\n<CH.Code>\n```js keystoreV4-single.js focus=32:35\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey) with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c ,  0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithLegacyExample.js\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignTxWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithLegacyExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithLegacyExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithLegacyExample.js focus=9\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithLegacyExample.js focus=10\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithLegacyExample.js focus=13:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=31:32\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithMultiSigExample.js\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **weighted multi-sig** private keys\n\n```js SignTxWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithMultiSigExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 different wallets with the **weighted multi-sig** private keys and provider\n\n```js SignTxWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithMultiSigExample.js focus=18:24\n\n```\n\n---\n\nSign the transaction with **first** wallet, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=29:32\n\n````\n---\n\n```zsh output\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **second** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=34:36\n\n````\n---\n\n```zsh output\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the **third** wallet and send the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=38:40\n\n````\n---\n\n```zsh output\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=42:43\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=45:46\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithPubkeyExample.js\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private keys**\n\n```js SignTxWithPubkeyExample.js focus=5:7\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithPubkeyExample.js focus=8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithPubkeyExample.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithPubkeyExample.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithPubkeyExample.js focus=11\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithPubkeyExample.js focus=14:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=31:34\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithRoleBasedExample.js\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithRoleBasedExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and role-based **private keys**\n\n```js SignTxWithRoleBasedExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithRoleBasedExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithRoleBasedExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithRoleBasedExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's **wallet** with the private key and provider\n\n```js SignTxWithRoleBasedExample.js focus=13\n\n```\n\n---\n\nCreate a **value transfer** transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithRoleBasedExample.js focus=16:22\n\n```\n\n---\n\nSign the transaction with the wallet that has role **sending transaction**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js focus=24:26\n\n```\n\n---\n\n```zsh output\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\n```\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=28:29\n\n````\n---\n\n```zsh output\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=31:32\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=34:35\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithLegacyExample.js\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithLegacyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithLegacyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithLegacyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithLegacyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=17:18\n\n````\n\n---\n```zsh output\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithMultiSigExample.js\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key** and all **weighted multi-sig** private keys\n\n```js SignMsgWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithMultiSigExample.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithMultiSigExample.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 wallets with the **weight multi-sig** private keys and provider\n\n```js SignMsgWithMultiSigExample.js focus=12:14\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithMultiSigExample.js focus=17\n\n```\n\n---\n\nSign the message with sender's **wallet3**\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=18:20\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=22:23\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=25:26\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithPubkeyExample.js\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithPubkeyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithPubkeyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithPubkeyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithPubkeyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithPubkeyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=17:18\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **role-based** private keys\n\n```js SignMsgWithRoleBased.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithRoleBased.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithRoleBased.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.hexlify(ethers.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithRoleBased.js focus=12\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithRoleBased.js focus=15\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=16:18\n\n````\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=20:21\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=23:24\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeAccountUpdate.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x38d57979b2f8b4c00d29a95e7996f676d05a00e1bf784697896fbf093a9465fa',\n  transactionHash: '0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd',\n  logs: [],\n  blockNumber: 148720836,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeAccountUpdate.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and new private key** to be changed\n\n```js TxTypeAccountUpdate.js focus=6:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeAccountUpdate.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeAccountUpdate.js focus=10\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeAccountUpdate.js focus=11\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=14:15\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **key** field with the computed **public key**\n\n```js TxTypeAccountUpdate.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=26:27\n\n````\n---\n\n```zsh output\nsentTx 0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=29:30\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe6efea4fbe6806bf3a3f967e950a3ba8e510b669931844ac17e07aa5146b1c0e',\n  transactionHash: '0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0',\n  logs: [],\n  blockNumber: 146754601,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxCancelType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxCancelType.js\nsentTx 0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xd3a04d1d6629bb49f1b778e779f20e83a256b5c22d840f43382a82d3f5352016',\n  transactionHash: '0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a',\n  logs: [],\n  blockNumber: 148720874,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxCancelType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxCancelType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxCancelType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxCancelType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the private key and the provider\n\n```js TxCancelType.js focus=8\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.Cancel**.\n\n```js TxCancelType.js focus=11:14\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxCancelType.js focus=16:17\n\n````\n\n\n---\n\n```zsh output\nsentTx 0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxCancelType.js focus=19:20\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2189f4fe71717d3e3585d29599c7a0ff4668b5501d5a2602408e4ba5306b377d',\n  transactionHash: '0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20',\n  logs: [],\n  blockNumber: 146753209,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js txTypeLegacyTransaction.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsentTx 0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xceca715c25ad13f55c4cba62a1c758b2f6731187cbf61d691e84b615dad263ea',\n  transactionHash: '0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8',\n  logs: [],\n  blockNumber: 148720917,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x055f7b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** package that can interact with the Ethereum Blockchain and its ecosystem.\n\n```js txTypeLegacyTransaction.js focus=1\n\n```\n\n---\n\nImport **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeLegacyTransaction.js focus=3\n\n```\n\n---\n\nDefine sender address, sender private key and reciever address\n\n```js txTypeLegacyTransaction.js focus=5:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeLegacyTransaction.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeLegacyTransaction.js focus=9\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js txTypeLegacyTransaction.js focus=10\n\n```\n\n---\n\nDeclare a transaction with the fields such as **from, to, value**.\n\n```js txTypeLegacyTransaction.js focus=13:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=22:23\n\n````\n---\n```zsh output\nsentTx 0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xa0f3212cd274776dbc6cf8dca1afbee4b9e8c807a3ee20b41f1fbb340ab5acc2',\n  transactionHash: '0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95',\n  logs: [],\n  blockNumber: 146837229,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x028d76', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeSmartContractDeploy.js\nsentTx 0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x028016AE0996097bB329a91f3D0C44C0Ee700f34',\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x07a0f27ebddc4c4633c5ea70125e6e09ecc460b19f0e83ff8b271ad34aa868ec',\n  transactionHash: '0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d',\n  logs: [],\n  blockNumber: 148720946,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x04387b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeSmartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxTypeSmartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeSmartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeSmartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js TxTypeSmartContractDeploy.js focus=8\n\n```\n\n---\n\nDeclare a transaction object\n\n```js TxTypeSmartContractDeploy.js focus=11:20\n\n```\n\n---\n\nSpecify the transaction type as SmartContractDeploy\n\n```js TxTypeSmartContractDeploy.js focus=12\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js TxTypeSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeSmartContractDeploy.js focus=21:22\n\n````\n---\n```zsh output\nsentTx 0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js focus=24:25\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x3e6647a6f2a1B217323Bf6b7793036A092Eb2796',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2d6235e99116f98ec0af262ac1bf8aa4d2178b98ad56254a18eadb2e395bace6',\n  transactionHash: '0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55',\n  logs: [],\n  blockNumber: 146753080,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractExecution.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractExecution.js\nsentTx 0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x6f49', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c',\n  transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 148721006,\n      transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 9,\n      blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c'\n    }\n  ],\n  blockNumber: 148721006,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x094000', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractExecution.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js smartContractExecution.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractExecution.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractExecution.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js smartContractExecution.js focus=8\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js smartContractExecution.js focus=10:11\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractExecution.js focus=14\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js smartContractExecution.js focus=15\n\n```\n\n---\n\nDeclare a transaction object\n\n```js smartContractExecution.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js smartContractExecution.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\nsentTx 0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractExecution.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x7a39', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44',\n  transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 146752711,\n      transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 6,\n      blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44'\n    }\n  ],\n  blockNumber: 146752711,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x06a8cd', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeValueTransferMemo.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xf223ef09cb8c9bc50f9ec0463a22ffb8a79c179e6ee5d1dccc0467aa23de7fe2',\n  transactionHash: '0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85',\n  logs: [],\n  blockNumber: 148721333,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x056a2f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeValueTransferMemo.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeValueTransferMemo.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeValueTransferMemo.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeValueTransferMemo.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value, data**.\n\n```js TxTypeValueTransferMemo.js focus=12:18\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=19:21\n\n```\n\n---\n\n```zsh output\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=22:24\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xef816e6444ce19135dfc64803eea5beb9966804ca0869043e287129145ff41ee',\n  transactionHash: '0x2ab415b5e4c354d74cb40c8c2054f9ec139ac629f233674abd40cca5697d53b3',\n  logs: [],\n  blockNumber: 143450915,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/basic-transaction/value-transfer. # Value Transfer\n\n**TxTypeValueTransfer** is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.js\n\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeValueTransferTransaction.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js txTypeValueTransferTransaction.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeValueTransferTransaction.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeValueTransferTransaction.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js txTypeValueTransferTransaction.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value**.\n\n```js txTypeValueTransferTransaction.js focus=11:16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeValueTransferTransaction.js focus=18:20\n\n````\n\n---\n\n```zsh output\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js focus=21:23\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/account-update. # Account Update\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedAccountUpdate.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsenderTxHashRLP 0x21f88c73850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0b1671119941dc92cde038dfe10284b7a41d5ab7fadef6be3480e919c63138dc0a06f1097e05153a83f1353efb579c191070caf5824929fbb7e7b79a266c1746b61\nsentTx 0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x5db31996350447e3aee600ef259f7a381c16a40ecdc0d7e6b3ac4125e86ff400',\n  transactionHash: '0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb',\n  logs: [],\n  blockNumber: 148732537,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x05d4ab', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=1:3\n\n```\n\n---\n\nDeclaring **sender** , **fee payer** address and private keys.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=7:11\n\n```\n\n---\n\n**senderNewPriv** is the private key to be updated\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=9\n\n```\n\n---\n\nCreating a JSON-RPC provider instance with the specified URL\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext/v6\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.SigningKey.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCompute new public key from new private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=18:19\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nCreating a transaction object to update new publickey\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=21:28\n\n```\n\n---\n\nPopulate the transaction with sender's wallet.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=31\n\n```\n\n---\n\nSign the transaction with **senderWallet**\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=32:33\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x21f88c67850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f6a0d6754f250d0f0cb631ea5574dbdfd749ef67213570b4c5105cec45595f99a962a066872e325455e7351dbb0861f23c89c1fdba9e15cc18319adf0907fa42025d81\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=35:37\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=39:40\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe15fb511fc02d00e680ffd085857bad9b02efe4dc58384aaa56a4fac3a70f675',\n  transactionHash: '0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b',\n  logs: [],\n  blockNumber: 146817255,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x041899', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxFeeDelegatedCancelType.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a8203af850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a06c639b8828bb27b36b2575636b4ec9dd4c7de4820327fe158746d03b28b90d8ba0332b43ec974ecb3ea16593760cb6e139a95d4ce03847681fb053a00143eb91a1\nsentTx 0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x02d655e716e1a5c8d497f66a6d80683c633d3e4002a9e26026f101983d951c1a',\n  transactionHash: '0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c',\n  logs: [],\n  blockNumber: 148732476,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxFeeDelegatedCancelType.js focus=1:3\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js TxFeeDelegatedCancelType.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxFeeDelegatedCancelType.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxFeeDelegatedCancelType.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=11\n\n```\n\n---\n\nCreate a **fee payer**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=12\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.FeeDelegatedCancel**\n\n```js TxFeeDelegatedCancelType.js focus=15:18\n\n```\n\n---\n\nSign the transaction with **sender** wallet and print out the **senderTxHashRLP**\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=20:23\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a820356850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0ec92eaed1a4b88de5645122b78f1f060aa44e9a6f35d1804ed624dbf74e0c59fa01a9b1e1a4bc35fdb4d1d71ead6be57a15fd06945cf486cf3d0f10f11099db878\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=25:27\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsentTx 0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=29:30\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfe9f4c67ac858fc9dc534612649c89aee502771e5c19c10575874cfc48ef6f18',\n  transactionHash: '0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68',\n  logs: [],\n  blockNumber: 146759527,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x063f86', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f901888203ae850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f6a0ba7429346994b62a646f74f05f5cf1bc8ed28040edf5b6bcd753efab516e5c22a07730efae99c9d0c0f3d7d845452f55a22ed368ade14eb6af7dfdbfdc748ae1ff\nsentTx 0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x7915deAD26C71540fC48384f35bd0744349BABf7',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x43dcff9990b1236a508d514806cdf7c0257a18329a7ff5b81f4fabb28dd174af',\n  transactionHash: '0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0',\n  logs: [],\n  blockNumber: 148732426,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=1:3\n\n```\n\n---\n\nDefine **sender**'s and **fee payer**'s addresses and private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate wallets for the sender and fee payer using their private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=11:12\n\n```\n\n---\n\nDefine the transaction object for a fee-delegated smart contract deployment\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=15:23\n\n```\n\n---\n\nSpecify the transaction type as **FeeDelegatedSmartContractDeploy**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSpecify the **contract bytecode**, you can retreive it from block explorer\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=20\n\n```\n\n---\n\nPopulate the transaction with additional details (e.g., gas limit)\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=26\n\n```\n\n---\n\nSign the transaction with the **sender**'s private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=27:28\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f9018882035b850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f5a014863b7cd821e9b10ff34d0990527c4b8c168641250498729dc1c6d43eba6327a05d54b77915e503c25ab6b9385e961c54a3f96380c42a70c9d5db561dfa694eea\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=30:32\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=34:35\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0xF06D0c870A2745b08d44a9d732771F241b7d2678',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x0436af44d434e1f3b193454f359d2863e4b9ea760140edbaf048bc96904bcbb3',\n  transactionHash: '0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230',\n  logs: [],\n  blockNumber: 146816835,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a68203ad850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f6a0f23531b148298b6b686af71c9722702732bed89202dd2a22adf9880b716ed205a074c31ec53da203c1421ae71e36e3b720f9550a00771784562b68c1cfa23e19e8\nsentTx 0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4',\n  transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n  logs: [\n    {\n      transactionIndex: 4,\n      blockNumber: 148732388,\n      transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 14,\n      blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4'\n    }\n  ],\n  blockNumber: 148732388,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x0b61a0', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js FeeDelegatedSmartContractExecution.js focus=1:3\n\n```\n\n---\n\nDefine **sender** and **fee payer** addresses and private keys\n\n```js FeeDelegatedSmartContractExecution.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js FeeDelegatedSmartContractExecution.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js FeeDelegatedSmartContractExecution.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=11\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=12\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js FeeDelegatedSmartContractExecution.js focus=14:15\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js FeeDelegatedSmartContractExecution.js focus=18\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js FeeDelegatedSmartContractExecution.js focus=19\n\n```\n\n---\n\nBuild the transaction object with type **FeeDelegatedSmartContractExecution**\n\n```js FeeDelegatedSmartContractExecution.js focus=19:27\n\n```\n\n---\n\nPopulate the transaction with necessary details\n\n```js FeeDelegatedSmartContractExecution.js focus=30\n\n```\n\n---\n\nSign the transaction by the **sender's wallet**\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=31:32\n\n````\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a6820355850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f5a0831b71d0a0e4c9f14f6d59fda140f15e5f77738d58466e0e3b11baf67a3a9bd4a03f16a7e78d82ee96ebaafa0bbc691b78e7cc63a294e499c48c16f057f3f8a0d9\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=34:36\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsentTx 0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js focus=38:39\n\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb',\n  transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146757423,\n      transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 0,\n      blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb'\n    }\n  ],\n  blockNumber: 146757423,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n# Fee Delegation\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8203ac850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0bf499bb98ac755430724cb9cf8deb3e2d43baa0f4dc97036d06bd66c91e74f2ca0092f32dbabd626964eeccfe7a1cfc0d14088ece28f7efde952c341428a531785\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xbc02b7afb16657cd1ec45bb6b7445767eb265702ae766dfc8bda3503f74d81a7',\n  transactionHash: '0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae',\n  logs: [],\n  blockNumber: 148732018,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key, fee payer address, fee payer private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=12\n\n```\n\n---\n\nCreate fee payer's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value, input**.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=15:21\n\n```\n\n---\n\nPopulating transaction with additional information using **senderWallet.populateTransaction**\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=23:24\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\n{\n  type: 17,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  input: '0x1234567890',\n  nonce: 762,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n```\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=26:27\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8202fa850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f6a055c20733cb08839d352e8ccbfd9f977ea8ba6cdf1dfad117931a5ca2a6e0b58aa06a777f842b4f23f4ad24309408c78b315f788bcca60826bd68083827f070ee49\n```\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=29:30\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=32:33\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x599e1d0b915bd00eac2a80ddaa1bf7bd91c8b21c9223aaaed1f5f3cb2d5d446c',\n  transactionHash: '0xfa2ae54df3314cdeb3c0fcf6ef970634a06e7d976d5a4e7146b03471e972f851',\n  logs: [],\n  blockNumber: 143462707,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x034d11', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878203ab850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06b4fdf5a4769285549e3bdfec4ba6db98f3439e8a148df1f55b7387a7c207947a0705b7c07749ab7aadab88a6e412a66f1985d821d56104b75d5a5ee6c03924e42\nsentTx 0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfa10dadd1783e0fa65729336cd14bc8197ae0e15c3e42c3cc505b9fce85ebcac',\n  transactionHash: '0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33',\n  logs: [],\n  blockNumber: 148722215,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext/v6\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate sender and fee payer wallets from private keys.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=12:13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value**.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=15:20\n\n```\n\n---\n\nPopulating transaction with additional information with **senderWallet.populateTransaction**\n\n  <CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=22:23\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\n{\n  type: 9,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  nonce: 760,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n\n\n\nreceipt 123\n````\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878202f8850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6a0427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=28:29\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsentTx {\n  hash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  type: 0,\n  accessList: null,\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  blockNumber: 143450182,\n  transactionIndex: 0,\n  confirmations: 4,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 760,\n  data: '0x',\n  r: '0x6021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6',\n  s: '0x427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c',\n  v: 2038,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=31:32\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  transactionHash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  logs: [],\n  blockNumber: 143450182,\n  confirmations: 4,\n  cumulativeGasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD',\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xda84dd69d31a19882525cb5eed2cdb5bc9693bea69eed76d3190810c86a395d0',\n  transactionHash: '0x87e5b9de87f680e88a484a4525edd56ef5baf2b52a229ad35869f63fc53d3058',\n  logs: [],\n  blockNumber: 148740597,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x0f1c25', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\ndeployed address 0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js smartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine sender address, sender private key\n\n```js smartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js smartContractDeploy.js focus=8\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js smartContractDeploy.js focus=33\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractDeploy.js focus=34\n\n```\n\n---\n\nCreate a contract factory which deploys a contract instance with the Abi and byte code\n\n```js smartContractDeploy.js focus=37\n\n```\n\n---\n\nDeploy the contract with initialize number value equal to 100\n\n```js smartContractDeploy.js focus=38\n\n```\n\n---\n\nSend the transaction to the blockchain and wait for the receipt\n\n<CH.Code>\n```js smartContractDeploy.js focus=40:42\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288',\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc0f8e7d6058aee71eac5736dab4a47b61ede1608d210d592d7a5ad8d443e6ca1',\n  transactionHash: '0xaf4a924f66bb402b0c3fa2fa3b59c5e33a323f2eec870a3683fae495c8263343',\n  logs: [],\n  blockNumber: 146817953,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x0a0eb2', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\n````\n\n</CH.Code>\n\n---\n\nGet the address of the new contract\n\n<CH.Code>\n```js smartContractDeploy.js focus=43\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\ndeployed address 0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SmartContractView.js\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js SmartContractView.js\nnumber 291\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js SmartContractView.js focus=1\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SmartContractView.js focus=3\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SmartContractView.js focus=3\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js SmartContractView.js focus=28\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js SmartContractView.js focus=29\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js SmartContractView.js focus=32\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js SmartContractView.js focus=33:34\n\n````\n---\n```zsh output\n❯ node SmartContractView.js\nnumber 291\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/smart-contract/write-txtype. <CH.Spotlight>\n<CH.Code>\n\n```js writeTxType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeTxType.js\nnumber before 292\nsentTx 0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74',\n  transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740675,\n      transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 0,\n      blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74'\n    }\n  ],\n  blockNumber: 148740675,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 293\n\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeTxType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js writeTxType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeTxType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeTxType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js writeTxType.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeTxType.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeTxType.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeTxType.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=39\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber before 291\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeTxType.js focus=41\n\n```\n\n---\n\nCreate a transaction object with data from previous step with type **SmartContractExecution**\n\n```js writeTxType.js focus=42:48\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js writeTxType.js focus=50:51\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nsentTx 0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js writeTxType.js focus=53:54\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b',\n  transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146818446,\n      transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b'\n    }\n  ],\n  blockNumber: 146818446,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=56\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber after 292\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js writeWithFeeDelegation.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeWithFeeDelegation.js\nnumber before 293\nsenderTxHashRLP 0x31f88447850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f6a0d9d8ebf8d1c2665cf27903234536edc078bf2857a42941a140a8617b2ca1cb7aa05006695b49733abd7dbbb4e5192d81b1f1e84efb1cf919dee6f2d4687aa32fe2\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a',\n  transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740703,\n      transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a'\n    }\n  ],\n  blockNumber: 148740703,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 294\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeWithFeeDelegation.js focus=1:2\n\n```\n\n---\n\nDefine **sender, fee payer address and sender private key**\n\n```js writeWithFeeDelegation.js focus=4:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeWithFeeDelegation.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeWithFeeDelegation.js focus=9\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=10\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=11\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeWithFeeDelegation.js focus=36\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeWithFeeDelegation.js focus=37\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeWithFeeDelegation.js focus=40\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=42\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber before 292\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeWithFeeDelegation.js focus=44\n\n```\n\n---\n\nCreate a transaction object with data from previous step\n\n```js writeWithFeeDelegation.js focus=42:48\n\n```\n\n---\n\nSign the transaction with sender's wallet\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=53:56\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x31f8843a850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f5a014ebdbabc74b5b93770f1f0980b67af59fa47a1bf450d0c27928a5f3f831219aa0027c3a6262e28dfad9166ec8d7a5d77da55272d18a3c1b656024764f8cb3379a\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=58:61\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5',\n  transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146818590,\n      transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 6,\n      blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5'\n    }\n  ],\n  blockNumber: 146818590,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x068840', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=63\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber after 293\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWrite.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber before 291\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n  transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac'\n    }\n  ],\n  blockNumber: 148740640,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\nnumber after 292\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractWrite.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js smartContractWrite.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractWrite.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWrite.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext/v6\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js smartContractWrite.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractWrite.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js smartContractWrite.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractWrite.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=39\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber before 293\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js smartContractWrite.js focus=41\n\n```\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractWrite.js focus=42:43\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n  transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a'\n    }\n  ],\n  blockNumber: 146819181,\n  confirmations: 8,\n  cumulativeGasUsed: BigNumber { _hex: '0x026fa8', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=45\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber after 294\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/utils/address. # Address\n\nUtils for compressing public key.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js addressUtils.js\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nImport the **getCompressedPublicKey** from **@kaiachain/ethers-ext** packages\n\n```js addressUtils.js focus=1\n\n```\n\n---\n\nTo compress a public key from `{x, y}` format to hexadecimal, use `getCompressedPublicKey` with the **public key object** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:11\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nOtherwise if you want to compress the **public key** from **uncompressed hexadecimal**, use `getCompressedPublicKey` with the **uncompress public key** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:9\nconst { getCompressedPublicKey } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node addressUtils.js\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/utils/signature. # Signature\nConvert signature into tuple format from object, compact signatures.\n<CH.Spotlight>\n<CH.Code>\n\n```js signatureUtils.js\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n```\n\n</CH.Code>\n\n---\nImport the **getSignatureTuple** from **@kaiachain/ethers-ext** packages\n\n```js signatureUtils.js focus=1\n\n```\n---\nTo compress a public key from `{r, s, v}` format to tuple, use `getSignatureTuple` with the **signature object** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:11\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n---\nTo compress a public key from compact 65 bytes format to tuple, use `getSignatureTuple` with the **compact signature** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:9\nconst { getSignatureTuple } = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext/v6/utils/unit. # Units\nFor units conversion, Kaia-sdk supports utils for converting `kaia`, `Gkei` and `kei`. See [supported units](https://docs.kaia.io/learn/kaia-native-token/#units-of-kaia-) .\n<CH.Spotlight>\n<CH.Code>\n\n```js unitUtils.js\nconst {\n  formatKlay,\n  parseKlay,\n  formatKlayUnits,\n} = require('@kaiachain/ethers-ext/v5')\n\nasync function main() {\n  console.log(\n    'example basefee in ston =',\n    formatKlayUnits('0x5d21dba00', 'ston')\n  )\n  console.log('transfer amount in klay =', formatKlay('1230000000000000000'))\n  console.log(\n    'example gas price in peb =',\n    parseKlayUnits('50', 'ston').toString()\n  )\n  console.log('transfer amount in peb =', parseKlay('9.87').toString())\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node unitUtils.js\nexample basefee in ston = 25.0\ntransfer amount in klay = 1.23\nexample gas price in peb = 50000000000\ntransfer amount in peb = 9870000000000000000\n```\n\n</CH.Code>\n\n---\n\nImport the `formatKlay`, `parseKlay`, `formatKlayUnits`, from **@kaiachain/ethers-ext** packages\n\n```js unitUtils.js focus=1\n\n```\n---\nTo convert **peb** to other units, use `formatKlayUnits`. For example, using `formatKlayUnits` converting **peb** to **ston**\n\n```js unitUtils.js focus=8:11\n\n```\n---\nUsing `formatKlay` converts **peb** to **klay**\n\n```js unitUtils.js focus=12\n\n```\n---\nUsing `parseKlayUnits` to convert value from one unit to **peb**. The first param is the **value**, the second param is the unit to **be converted**\n\n```js unitUtils.js focus=13:16\n\n```\n---\nUsing `parseKlay` to convert **klay** to **peb**\n\n```js unitUtils.js focus=17\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithLegacy.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithLegacy.js\npub 0x026e63942bece2c9c346fba11c493dc0d7ae0ab14b7b75c6d988619228cbb4e996\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithLegacy.js focus=1:3\n\n```\n\n---\n\nDefine sender **address** and **private key**\n\n```js AccountUpdateWithLegacy.js focus=7:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithLegacy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithLegacy.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType} = require(\"@kaiachain/ethers-ext\");\n\n// Using legacy AccountKey to execute this example repeatedly.\n// But you might want to register a different Accountkey.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithLegacy.js focus=11\n\n```\n\n---\n\nDeclare a transaction in the **key** field with the value `AccountKeyType.Legacy`\n\n```js AccountUpdateWithLegacy.js focus=14:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=22:23\n\n````\n---\n\n```zsh output\nsentTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.utils.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.utils.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithMultiSigExample.js\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **muti-sig private keys** to be changed\n\n```js AccountUpdateWithMultiSigExample.js focus=5:10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using same senderNewPriv keys to execute this example repeatedly.\n// But you might want to register the different private keys.\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderNewPriv1, true);\n  const pub2 = ethers.utils.computePublicKey(senderNewPriv2, true);\n  const pub3 = ethers.utils.computePublicKey(senderNewPriv3, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate three sender's wallets with the **private keys** and **provider**\n\n```js AccountUpdateWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCompute the **public keys** from the new private keys\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=18:21\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has the **keys** field with the computed **public keys** and theirs **weight**, specify the **type** as **WeightedMultiSig**\n\n```js AccountUpdateWithMultiSigExample.js focus=23:36\n\n```\n\n---\n\nSign the transaction with the first wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=41:44\n\n````\n---\n\n```zsh output\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the second wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=46:48\n\n````\n---\n\n```zsh output\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the third wallet and send it to kaia network\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=50:52\n\n````\n---\n\n```zsh output\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=54:55\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithPubKey.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithPubKey.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithPubKey.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and **new private key** to be changed\n\n```js AccountUpdateWithPubKey.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithPubKey.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithPubKey.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you should use AccountKeyPublic to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const senderNewPub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", senderNewPub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithPubKey.js focus=12\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=15:16\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has type **AccountKeyType.Public** and **key** field with the new computed **public key**\n\n```js AccountUpdateWithPubKey.js focus=18:25\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=27:28\n\n````\n---\n\n```zsh output\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=30:31\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.utils.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.utils.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithRoleBased.js\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js AccountUpdateWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **role-based private keys** to be changed\n\n```js AccountUpdateWithRoleBased.js focus=5:11\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithRoleBased.js focus=13\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithRoleBased.js focus=13\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderRoleAccountUpdatePriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst updaterWallet = new Wallet(senderAddr, senderRoleAccountUpdatePriv, provider);\n\nasync function main() {\n  const pub1 = ethers.utils.computePublicKey(senderRoleTransactionPriv, true);\n  const pub2 = ethers.utils.computePublicKey(senderRoleAccountUpdatePriv, true);\n  const pub3 = ethers.utils.computePublicKey(senderRoleFeePayerPriv, true);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1000000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const sentTx = await updaterWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **updater role** private key and provider\n\n```js AccountUpdateWithRoleBased.js focus=14\n\n```\n\n---\n\nCompute the **public keys** from the new **role-based** private keys\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=17:20\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **keys** field with the computed **role-based public keys**\n\n```js AccountUpdateWithRoleBased.js focus=22:34\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=36:37\n\n````\n---\n\n```zsh output\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=39:40\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/keystore/keystoreV3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV3.js\nconst { Wallet } = require('@kaiachain/ethers-ext')\n\n// Eth V3. ethers.Wallet.createRandom().encrypt(\"password\")\nconst encryptedKey = {\n  address: '029e786304c1531af3ac7db24a02448e543a099e',\n  id: '9d492c95-b9e3-42e3-af73-5c77e932208d',\n  version: 3,\n  crypto: {\n    cipher: 'aes-128-ctr',\n    cipherparams: { iv: 'bfcb88a1501e2bb1e6694c03da18953d' },\n    ciphertext:\n      '076510b4e25d5cfc31239bffcad6036fe543cbbb04b9f3ec719bf4f61b58fc05',\n    kdf: 'scrypt',\n    kdfparams: {\n      salt: '79124f05995aae98b3088d8365f59a6dfadd1c9ed249abae3c07733f4cbbee53',\n      n: 131072,\n      dklen: 32,\n      p: 1,\n      r: 8,\n    },\n    mac: 'd70f83824c2c30dc5cd3a244d87147b6aa713a6000165789a82a467651284ac7',\n  },\n}\n// const address = \"0x029e786304c1531aF3aC7db24A02448e543A099E\";\n// const key = \"0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\";\n\nconst password = 'password'\nconst password2 = 'password2'\n\nasync function main() {\n  const account = Wallet.fromEncryptedJsonSync(encryptedKey, password)\n\n  console.log('\\ndecrypted address')\n  console.log(account.address)\n\n  console.log('\\ndecrypted privateKey')\n  console.log(account.privateKey)\n\n  account.encrypt(password2).then((encryptedKey2) => {\n    const account2 = Wallet.fromEncryptedJsonSync(encryptedKey2, password2)\n\n    console.log('\\ndecrypted address with new password')\n    console.log(account2.address)\n\n    console.log('\\ndecrypted privateKey with new password')\n    console.log(account2.privateKey)\n  })\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node keystoreV3.js\n\ndecrypted address\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n\ndecrypted address with new password\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey with new password\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n```\n\n</CH.Code>\n\n---\n\nImport the Wallet class from the **@kaiachain/ethers-ext** package.\n\n```js keystoreV3.js focus=1\n\n```\n\n---\n\n**Encrypted key** and **password** information are declared.\n\n```js keystoreV3.js focus=3:25\n\n```\n\n---\n\nYou can also create a encrypted key with the **ethers.Wallet.createRandom().encrypt()** function.\n\n```js keystoreV3.js focus=3\n\n```\n\n---\n\nDecrypt **account** from the **encryptedKey** with the **password**.\n\n```js keystoreV3.js focus=31\n\n```\n\n---\n\nYou can check address and privateKey of the **account**.\n\n```js keystoreV3.js focus=33:37\n\n```\n\n---\n\nEncrypt the **account** with another password **password2**. And it will make another **encryptedKey2**.\n\n```js keystoreV3.js focus=39\n\n```\n\n---\n\nRe-decrypt the **account2** from **encryptedKey2** with **password2** and check if the address and privateKey of the **account2** are same with the info of the **account** from **encryptedKey**.\n\n```js keystoreV3.js focus=40:46\n\n```\n\n---\n\nExecute the main function.\n\n```js keystoreV3.js focus=50\n\n```\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithLegacyExample.js\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignTxWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithLegacyExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithLegacyExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithLegacyExample.js focus=9\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // for should not be called by a legacy transaction for calling klay_recoverFromTransaction\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: 0,\n  };\n\n  const populatedTx = await wallet.populateTransaction(tx);\n  const rawTx = await wallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithLegacyExample.js focus=10\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithLegacyExample.js focus=13:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=31:32\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithMultiSigExample.js\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **weighted multi-sig** private keys\n\n```js SignTxWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithMultiSigExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **Kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithMultiSigExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithMultiSigExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature (threshold = 2),\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const populatedTx = await wallet1.populateTransaction(tx);\n  const rawTx1 = await wallet1.signTransaction(populatedTx);\n  console.log(\"rawTx1\", rawTx1);\n\n  // sign 2: Middle signer sign from the rawTx\n  const rawTx2 = await wallet2.signTransaction(rawTx1);\n  console.log(\"rawTx2\", rawTx2);\n\n  // sign 3: Last signer sign and send from the rawTx\n  const sentTx3 = await wallet3.sendTransaction(rawTx2);\n  console.log(\"sentTx3\", sentTx3.hash);\n\n  const receipt = await sentTx3.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx2, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 different wallets with the **weighted multi-sig** private keys and provider\n\n```js SignTxWithMultiSigExample.js focus=13:15\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithMultiSigExample.js focus=18:24\n\n```\n\n---\n\nSign the transaction with **first** wallet, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=29:32\n\n````\n---\n\n```zsh output\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **second** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=34:36\n\n````\n---\n\n```zsh output\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the **third** wallet and send the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=38:40\n\n````\n---\n\n```zsh output\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=42:43\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=45:46\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithPubkeyExample.js\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private keys**\n\n```js SignTxWithPubkeyExample.js focus=5:7\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithPubkeyExample.js focus=8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithPubkeyExample.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithPubkeyExample.js focus=10\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst newWallet = new Wallet(senderAddr, senderNewPriv, provider); // decoupled account\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const populatedTx = await newWallet.populateTransaction(tx);\n  const rawTx = await newWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await newWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithPubkeyExample.js focus=11\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithPubkeyExample.js focus=14:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=21:23\n\n````\n---\n\n```zsh output\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=25:26\n\n````\n---\n\n```zsh output\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=31:34\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithRoleBasedExample.js\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignTxWithRoleBasedExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and role-based **private keys**\n\n```js SignTxWithRoleBasedExample.js focus=5:9\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithRoleBasedExample.js focus=10\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithRoleBasedExample.js focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithRoleBasedExample.js focus=12\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderRoleTransactionPriv, provider);\n\nasync function main() {\n  let tx = { // use Klaytn TxType to send transaction from Klaytn typed account\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    gasLimit: 100000,\n  };\n\n  const populatedTx = await txWallet.populateTransaction(tx);\n  const rawTx = await txWallet.signTransaction(populatedTx);\n  console.log(\"rawTx\", rawTx);\n\n  const sentTx = await txWallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  const addr = await provider.send(\"klay_recoverFromTransaction\", [rawTx, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr, addr.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's **wallet** with the private key and provider\n\n```js SignTxWithRoleBasedExample.js focus=13\n\n```\n\n---\n\nCreate a **value transfer** transaction with `type: TxType.ValueTransfer` so that it can be recovered later with `klay_recoverFromTransaction`\n\n```js SignTxWithRoleBasedExample.js focus=16:22\n\n```\n\n---\n\nSign the transaction with the wallet that has role **sending transaction**, the `populateTransaction` method add more params to the transaction object such as gas, nonce...\n\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js focus=24:26\n\n```\n\n---\n\n```zsh output\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\n```\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=28:29\n\n````\n---\n\n```zsh output\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be **completed** and print the **receipt**\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=31:32\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=34:35\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithLegacyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithLegacyExample.js\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithLegacyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithLegacyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithLegacyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithLegacyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithLegacyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithLegacyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=17:18\n\n````\n\n---\n```zsh output\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithMultiSigExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithMultiSigExample.js\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithMultiSigExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key** and all **weighted multi-sig** private keys\n\n```js SignMsgWithMultiSigExample.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithMultiSigExample.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithMultiSigExample.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\";\nconst senderPriv = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv1 = \"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\";\nconst senderNewPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet1 = new Wallet(senderAddr, senderNewPriv1, provider);\nconst wallet2 = new Wallet(senderAddr, senderNewPriv2, provider);\nconst wallet3 = new Wallet(senderAddr, senderNewPriv3, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet3.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet3.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet3.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate 3 wallets with the **weight multi-sig** private keys and provider\n\n```js SignMsgWithMultiSigExample.js focus=12:14\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithMultiSigExample.js focus=17\n\n```\n\n---\n\nSign the message with sender's **wallet3**\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=18:20\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=22:23\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=25:26\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithPubkeyExample.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithPubkeyExample.js\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithPubkeyExample.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithPubkeyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithPubkeyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithPubkeyExample.js focus=8\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await wallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === wallet.address.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === wallet.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithPubkeyExample.js focus=9\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithPubkeyExample.js focus=12\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=13:15\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=17:18\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=20:21\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithRoleBased.js\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js SignMsgWithRoleBased.js focus=1:3\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **role-based** private keys\n\n```js SignMsgWithRoleBased.js focus=5:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithRoleBased.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithRoleBased.js focus=11\nconst { ethers } = require(\"ethers\");\n\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\";\nconst senderPriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst txWallet = new Wallet(senderAddr, senderPriv, provider);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(msg));\n  const sig = await txWallet.signMessage(msg);\n  console.log({ senderAddr, msg, msghex, sig });\n\n  const addr1 = ethers.utils.verifyMessage(msg, sig);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr.toLowerCase());\n\n  const addr2 = await provider.send(\"klay_recoverFromMessage\", [senderAddr, msghex, sig, \"latest\"]);\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithRoleBased.js focus=12\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithRoleBased.js focus=15\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=16:18\n\n````\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `ethers.utils.verifyMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=20:21\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `klay_recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=23:24\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeAccountUpdate.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x38d57979b2f8b4c00d29a95e7996f676d05a00e1bf784697896fbf093a9465fa',\n  transactionHash: '0xd830186f231d4793ddd190a098ee5a121d13dd8e512085cdbdecb4f03ff6e2bd',\n  logs: [],\n  blockNumber: 148720836,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeAccountUpdate.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and new private key** to be changed\n\n```js TxTypeAccountUpdate.js focus=6:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeAccountUpdate.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeAccountUpdate.js focus=10\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeAccountUpdate.js focus=11\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=14:15\n\n````\n---\n\n```zsh output\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **key** field with the computed **public key**\n\n```js TxTypeAccountUpdate.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=26:27\n\n````\n---\n\n```zsh output\nsentTx 0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=29:30\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe6efea4fbe6806bf3a3f967e950a3ba8e510b669931844ac17e07aa5146b1c0e',\n  transactionHash: '0xb803b60ec33633910e4a4d2238c1d1acf1fcca4123b78c2bd252d6c0c1416ca0',\n  logs: [],\n  blockNumber: 146754601,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxCancelType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxCancelType.js\nsentTx 0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xd3a04d1d6629bb49f1b778e779f20e83a256b5c22d840f43382a82d3f5352016',\n  transactionHash: '0xf03972d188605e7311885cafeaabda6dd67b2c679a509a7a3b924933de816e6a',\n  logs: [],\n  blockNumber: 148720874,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxCancelType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxCancelType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxCancelType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxCancelType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the private key and the provider\n\n```js TxCancelType.js focus=8\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.Cancel**.\n\n```js TxCancelType.js focus=11:14\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxCancelType.js focus=16:17\n\n````\n\n\n---\n\n```zsh output\nsentTx 0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxCancelType.js focus=19:20\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2189f4fe71717d3e3585d29599c7a0ff4668b5501d5a2602408e4ba5306b377d',\n  transactionHash: '0x700631932d73747459fe941f7b9a4464a42dd40092d91668638b2e73a2a85f20',\n  logs: [],\n  blockNumber: 146753209,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js txTypeLegacyTransaction.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsentTx 0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xceca715c25ad13f55c4cba62a1c758b2f6731187cbf61d691e84b615dad263ea',\n  transactionHash: '0x0693a5398133e80ae462ed957c2f590d4643d8c5fadf3aa6bc4de33b0c3d0da8',\n  logs: [],\n  blockNumber: 148720917,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x055f7b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** package that can interact with the Ethereum Blockchain and its ecosystem.\n\n```js txTypeLegacyTransaction.js focus=1\n\n```\n\n---\n\nImport **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeLegacyTransaction.js focus=3\n\n```\n\n---\n\nDefine sender address, sender private key and reciever address\n\n```js txTypeLegacyTransaction.js focus=5:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeLegacyTransaction.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeLegacyTransaction.js focus=9\nconst ethers = require(\"ethers\");\n\nconst { Wallet, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    // when type is empty it will be automatically set to type 0 or 2\n    // depending on the gasPrice, maxFeePerGas, maxPriorityFeePerGas fields.\n    // here, type will be 2 because no gas-related fields are set.\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js txTypeLegacyTransaction.js focus=10\n\n```\n\n---\n\nDeclare a transaction with the fields such as **from, to, value**.\n\n```js txTypeLegacyTransaction.js focus=13:20\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=22:23\n\n````\n---\n```zsh output\nsentTx 0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=25:26\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xa0f3212cd274776dbc6cf8dca1afbee4b9e8c807a3ee20b41f1fbb340ab5acc2',\n  transactionHash: '0xf4f0cac1985c2880fa170b650e23148f7a2c93d46bf2193603e4fc15ec5eca95',\n  logs: [],\n  blockNumber: 146837229,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x028d76', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeSmartContractDeploy.js\nsentTx 0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x028016AE0996097bB329a91f3D0C44C0Ee700f34',\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x07a0f27ebddc4c4633c5ea70125e6e09ecc460b19f0e83ff8b271ad34aa868ec',\n  transactionHash: '0xeff15464362194155acfb4e0eb0cedc470320d3d12fc504dbab9f918cf57452d',\n  logs: [],\n  blockNumber: 148720946,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x04387b', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeSmartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxTypeSmartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeSmartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeSmartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js TxTypeSmartContractDeploy.js focus=8\n\n```\n\n---\n\nDeclare a transaction object\n\n```js TxTypeSmartContractDeploy.js focus=11:20\n\n```\n\n---\n\nSpecify the transaction type as SmartContractDeploy\n\n```js TxTypeSmartContractDeploy.js focus=12\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js TxTypeSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeSmartContractDeploy.js focus=21:22\n\n````\n---\n```zsh output\nsentTx 0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeSmartContractDeploy.js focus=24:25\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x3e6647a6f2a1B217323Bf6b7793036A092Eb2796',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x2d6235e99116f98ec0af262ac1bf8aa4d2178b98ad56254a18eadb2e395bace6',\n  transactionHash: '0x609538b72ced9bf103ae69032155cdf5a34e8458d389ce38cdec21b4aa107b55',\n  logs: [],\n  blockNumber: 146753080,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x01fd0d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractExecution.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractExecution.js\nsentTx 0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x6f49', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c',\n  transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 148721006,\n      transactionHash: '0x6ee58de9d1fd46da6f595112cc6ce060ef560796f78650e8a18fb32f20ec5343',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 9,\n      blockHash: '0xb71bcb74a6772501913302fb30d754bdf82cf2996ba9418b509bfd48b275bb0c'\n    }\n  ],\n  blockNumber: 148721006,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x094000', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractExecution.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js smartContractExecution.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractExecution.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractExecution.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js smartContractExecution.js focus=8\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js smartContractExecution.js focus=10:11\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractExecution.js focus=14\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js smartContractExecution.js focus=15\n\n```\n\n---\n\nDeclare a transaction object\n\n```js smartContractExecution.js focus=17:24\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js smartContractExecution.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\nsentTx 0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractExecution.js focus=28:29\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 3,\n  gasUsed: BigNumber { _hex: '0x7a39', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44',\n  transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n  logs: [\n    {\n      transactionIndex: 3,\n      blockNumber: 146752711,\n      transactionHash: '0xc0443ebef5f43edab8e76663d22bc7411720ec9b63af14301305718448881ee4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 6,\n      blockHash: '0xcfc960b12b9014b2b894ae6183813b2cb7fa0b1d428157af02a54425d411bf44'\n    }\n  ],\n  blockNumber: 146752711,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x06a8cd', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeValueTransferMemo.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xf223ef09cb8c9bc50f9ec0463a22ffb8a79c179e6ee5d1dccc0467aa23de7fe2',\n  transactionHash: '0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85',\n  logs: [],\n  blockNumber: 148721333,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x056a2f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeValueTransferMemo.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeValueTransferMemo.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeValueTransferMemo.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeValueTransferMemo.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value, data**.\n\n```js TxTypeValueTransferMemo.js focus=12:18\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=19:21\n\n```\n\n---\n\n```zsh output\nsentTx 0x57fdd7fec672b9e66e9bef766aca109babbfbb3c71b62544f10bd9bd3dceee85\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js focus=22:24\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xef816e6444ce19135dfc64803eea5beb9966804ca0869043e287129145ff41ee',\n  transactionHash: '0x2ab415b5e4c354d74cb40c8c2054f9ec139ac629f233674abd40cca5697d53b3',\n  logs: [],\n  blockNumber: 143450915,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x53fc', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/basic-transaction/value-transfer. # Value Transfer\n\n**TxTypeValueTransfer** is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.js\n\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js txTypeValueTransferTransaction.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js txTypeValueTransferTransaction.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js txTypeValueTransferTransaction.js focus=8:8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeValueTransferTransaction.js focus=8:8\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new ethers.providers.JsonRpcProvider('https://public-en-kairos.node.kaia.io')\nconst wallet = new Wallet(senderPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js txTypeValueTransferTransaction.js focus=9\n\n```\n\n---\n\nDeclare a transaction with the fields such as **type, from, to, value**.\n\n```js txTypeValueTransferTransaction.js focus=11:16\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js txTypeValueTransferTransaction.js focus=18:20\n\n````\n\n---\n\n```zsh output\nsentTx {\n  hash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  type: 0,\n  accessList: null,\n  blockHash: null,\n  blockNumber: null,\n  transactionIndex: null,\n  confirmations: 0,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 759,\n  data: '0x',\n  r: '0xd49028d36e64df5ad7e00e5163740cb734133dde320fb7e5fde1c75df38b6bb8',\n  s: '0x4a7a7a7950dd6c2d905217cd6cb61948dbdeb5842c13b8376d9e3a231f266667',\n  v: 2037,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js focus=21:23\n\n```\n\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x9831848ad564cb4c165bc48b3fa76b38ea08314b1fbf28fa388bec888acd50ed',\n  transactionHash: '0x7b6c638d8dba310d348ad80d55fbbf6024b286b982fd68b08bdb85004cace46b',\n  logs: [],\n  blockNumber: 143449789,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x03240d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/account-update. # Account Update\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedAccountUpdate.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsenderTxHashRLP 0x21f88c73850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0b1671119941dc92cde038dfe10284b7a41d5ab7fadef6be3480e919c63138dc0a06f1097e05153a83f1353efb579c191070caf5824929fbb7e7b79a266c1746b61\nsentTx 0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x5db31996350447e3aee600ef259f7a381c16a40ecdc0d7e6b3ac4125e86ff400',\n  transactionHash: '0xaf6c1121ce8d7d43cfd229b7f026d73049b6982c8f9e24cc3b0f958d1c4d75bb',\n  logs: [],\n  blockNumber: 148732537,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x05d4ab', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=1:3\n\n```\n\n---\n\nDeclaring **sender** , **fee payer** address and private keys.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=7:11\n\n```\n\n---\n\n**senderNewPriv** is the private key to be updated\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=9\n\n```\n\n---\n\nCreating a JSON-RPC provider instance with the specified URL\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, AccountKeyType } = require(\"@kaiachain/ethers-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderAddr, senderPriv, provider); // decoupled account\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const pub = ethers.utils.computePublicKey(senderNewPriv, true);\n  console.log(\"pub\", pub);\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: pub,\n    }\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCompute new public key from new private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=18:19\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nCreating a transaction object to update new publickey\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=21:28\n\n```\n\n---\n\nPopulate the transaction with sender's wallet.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=31\n\n```\n\n---\n\nSign the transaction with **senderWallet**\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=32:33\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x21f88c67850ba43b740082cd1494e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f6a0d6754f250d0f0cb631ea5574dbdfd749ef67213570b4c5105cec45595f99a962a066872e325455e7351dbb0861f23c89c1fdba9e15cc18319adf0907fa42025d81\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=35:37\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=39:40\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xe15fb511fc02d00e680ffd085857bad9b02efe4dc58384aaa56a4fac3a70f675',\n  transactionHash: '0x7530c3309220e8d86a216694c3809de6f6d437da22ee54a60f5ba701856e467b',\n  logs: [],\n  blockNumber: 146817255,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x041899', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxFeeDelegatedCancelType.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a8203af850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a06c639b8828bb27b36b2575636b4ec9dd4c7de4820327fe158746d03b28b90d8ba0332b43ec974ecb3ea16593760cb6e139a95d4ce03847681fb053a00143eb91a1\nsentTx 0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x02d655e716e1a5c8d497f66a6d80683c633d3e4002a9e26026f101983d951c1a',\n  transactionHash: '0xd81cd9190f2fd40f6b2e6472f91b95a1e09e2ad3dfc41a6b3458274eb5c9175c',\n  logs: [],\n  blockNumber: 148732476,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxFeeDelegatedCancelType.js focus=1:3\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js TxFeeDelegatedCancelType.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxFeeDelegatedCancelType.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxFeeDelegatedCancelType.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=11\n\n```\n\n---\n\nCreate a **fee payer**'s wallet with the private key and the provider\n\n```js TxFeeDelegatedCancelType.js focus=12\n\n```\n\n---\n\nDeclare a transaction with the **from** field as **sender address** and the **type** field as **TxType.FeeDelegatedCancel**\n\n```js TxFeeDelegatedCancelType.js focus=15:18\n\n```\n\n---\n\nSign the transaction with **sender** wallet and print out the **senderTxHashRLP**\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=20:23\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsenderTxHashRLP 0x39f86a820356850ba43b740082cd1494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0ec92eaed1a4b88de5645122b78f1f060aa44e9a6f35d1804ed624dbf74e0c59fa01a9b1e1a4bc35fdb4d1d71ead6be57a15fd06945cf486cf3d0f10f11099db878\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=25:27\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nsentTx 0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js TxFeeDelegatedCancelType.js focus=29:30\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancelType.js\nreceipt {\n  to: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfe9f4c67ac858fc9dc534612649c89aee502771e5c19c10575874cfc48ef6f18',\n  transactionHash: '0x88f96c02abd305e5395cfdc87515ba3a4f6139568a48ddeca66be286acf5be68',\n  logs: [],\n  blockNumber: 146759527,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x063f86', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f901888203ae850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f6a0ba7429346994b62a646f74f05f5cf1bc8ed28040edf5b6bcd753efab516e5c22a07730efae99c9d0c0f3d7d845452f55a22ed368ade14eb6af7dfdbfdc748ae1ff\nsentTx 0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0x7915deAD26C71540fC48384f35bd0744349BABf7',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x43dcff9990b1236a508d514806cdf7c0257a18329a7ff5b81f4fabb28dd174af',\n  transactionHash: '0x58431572e2dc795b9f33f42278c9611da7f95db4548b6b252e6782b272f7a1d0',\n  logs: [],\n  blockNumber: 148732426,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=1:3\n\n```\n\n---\n\nDefine **sender**'s and **fee payer**'s addresses and private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    value: 0,\n    gasLimit: 1_000_000,\n    input: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate wallets for the sender and fee payer using their private keys\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=11:12\n\n```\n\n---\n\nDefine the transaction object for a fee-delegated smart contract deployment\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=15:23\n\n```\n\n---\n\nSpecify the transaction type as **FeeDelegatedSmartContractDeploy**\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=16\n\n```\n\n---\n\nSpecify the **contract bytecode**, you can retreive it from block explorer\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=20\n\n```\n\n---\n\nPopulate the transaction with additional details (e.g., gas limit)\n\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=26\n\n```\n\n---\n\nSign the transaction with the **sender**'s private key\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=27:28\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsenderTxHashRLP 0x29f9018882035b850ba43b7400830f4240808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f5a014863b7cd821e9b10ff34d0990527c4b8c168641250498729dc1c6d43eba6327a05d54b77915e503c25ab6b9385e961c54a3f96380c42a70c9d5db561dfa694eea\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=30:32\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nsentTx 0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n```js TxTypeFeeDelegatedSmartContractDeploy.js focus=34:35\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedSmartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: '0xF06D0c870A2745b08d44a9d732771F241b7d2678',\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x0436af44d434e1f3b193454f359d2863e4b9ea760140edbaf048bc96904bcbb3',\n  transactionHash: '0x5083949a04fd3f48b85b6e46fd076c69776732b38a2723a39b5bf35327bbd230',\n  logs: [],\n  blockNumber: 146816835,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02241d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a68203ad850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f6a0f23531b148298b6b686af71c9722702732bed89202dd2a22adf9880b716ed205a074c31ec53da203c1421ae71e36e3b720f9550a00771784562b68c1cfa23e19e8\nsentTx 0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4',\n  transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n  logs: [\n    {\n      transactionIndex: 4,\n      blockNumber: 148732388,\n      transactionHash: '0x8ddf463d1e2d5745b9ba71abce52eb02b6680d9699298c463c72180a7dd2c539',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 14,\n      blockHash: '0xa466ec90d778b7ea3e2c2cd3ec2a707fcf31a8c5f44d29d1e85f4c690af8ddb4'\n    }\n  ],\n  blockNumber: 148732388,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x0b61a0', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js FeeDelegatedSmartContractExecution.js focus=1:3\n\n```\n\n---\n\nDefine **sender** and **fee payer** addresses and private keys\n\n```js FeeDelegatedSmartContractExecution.js focus=5:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js FeeDelegatedSmartContractExecution.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js FeeDelegatedSmartContractExecution.js focus=10\nconst ethers = require(\"ethers\");\n\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\nconst abi = [\"function setNumber(uint256 newNumber)\"];\n\nasync function main() {\n  const contract = new ethers.Contract(contractAddr, abi, provider);\n  const data = contract.interface.encodeFunctionData(\"setNumber\", [\"0x123\"]);\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=11\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js FeeDelegatedSmartContractExecution.js focus=12\n\n```\n\n---\n\nSet the **contract address** you want to execute into the to field and set **ABI**\n\n```js FeeDelegatedSmartContractExecution.js focus=14:15\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js FeeDelegatedSmartContractExecution.js focus=18\n\n```\n\n---\n\nEncode the function name and parameter with the **encodeFunctionData** function\n\n```js FeeDelegatedSmartContractExecution.js focus=19\n\n```\n\n---\n\nBuild the transaction object with type **FeeDelegatedSmartContractExecution**\n\n```js FeeDelegatedSmartContractExecution.js focus=19:27\n\n```\n\n---\n\nPopulate the transaction with necessary details\n\n```js FeeDelegatedSmartContractExecution.js focus=30\n\n```\n\n---\n\nSign the transaction by the **sender's wallet**\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=31:32\n\n````\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a6820355850ba43b7400830116379495be48607498109030592c08adc9577c7c2dd5058094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f5a0831b71d0a0e4c9f14f6d59fda140f15e5f77738d58466e0e3b11baf67a3a9bd4a03f16a7e78d82ee96ebaafa0bbc691b78e7cc63a294e499c48c16f057f3f8a0d9\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=34:36\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsentTx 0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js focus=38:39\n\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb',\n  transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146757423,\n      transactionHash: '0x4147867b19c609e85c2349a78429eaa9d5e6c96e1893b44c5a1159801672119b',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000123',\n      logIndex: 0,\n      blockHash: '0x79534bab10fc2af347aa3164959825a0dd587471e2f864102cae3f6167202dcb'\n    }\n  ],\n  blockNumber: 146757423,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x9659', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/value-transfer-memo. # Value Transfer With Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n# Fee Delegation\n\n<CH.Spotlight>\n    <CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8203ac850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0bf499bb98ac755430724cb9cf8deb3e2d43baa0f4dc97036d06bd66c91e74f2ca0092f32dbabd626964eeccfe7a1cfc0d14088ece28f7efde952c341428a531785\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xbc02b7afb16657cd1ec45bb6b7445767eb265702ae766dfc8bda3503f74d81a7',\n  transactionHash: '0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae',\n  logs: [],\n  blockNumber: 148732018,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key, fee payer address, fee payer private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n    input: \"0x1234567890\",\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=12\n\n```\n\n---\n\nCreate fee payer's wallet from private key\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value, input**.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=15:21\n\n```\n\n---\n\nPopulating transaction with additional information using **senderWallet.populateTransaction**\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=23:24\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\n{\n  type: 17,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  input: '0x1234567890',\n  nonce: 762,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n```\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=26:27\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8202fa850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f6a055c20733cb08839d352e8ccbfd9f977ea8ba6cdf1dfad117931a5ca2a6e0b58aa06a777f842b4f23f4ad24309408c78b315f788bcca60826bd68083827f070ee49\n```\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=29:30\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsentTx 0xac225ead53297c95b747abd84e7224ecbc1b40f459a532fd22a67143aa83b4ae\n```\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if the tx was sent to the blockchain successfully.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=32:33\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7b0c', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x599e1d0b915bd00eac2a80ddaa1bf7bd91c8b21c9223aaaed1f5f3cb2d5d446c',\n  transactionHash: '0xfa2ae54df3314cdeb3c0fcf6ef970634a06e7d976d5a4e7146b03471e972f851',\n  logs: [],\n  blockNumber: 143462707,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x034d11', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878203ab850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06b4fdf5a4769285549e3bdfec4ba6db98f3439e8a148df1f55b7387a7c207947a0705b7c07749ab7aadab88a6e412a66f1985d821d56104b75d5a5ee6c03924e42\nsentTx 0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfa10dadd1783e0fa65729336cd14bc8197ae0e15c3e42c3cc505b9fce85ebcac',\n  transactionHash: '0xbd5ca6525bc3364b68846b314e5d621333dd7df4054cbb76f67e5ea9c2aaef33',\n  logs: [],\n  blockNumber: 148722215,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x034b1d', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and reciever address**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=4:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11:11\nconst { Wallet, TxType, parseKlay } = require(\"@kaiachain/ethers-ext\");\nconst ethers = require(\"ethers\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nasync function main() {\n  const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n  const senderWallet = new Wallet(senderPriv, provider);\n  const feePayerWallet = new Wallet(feePayerPriv, provider);\n\n  let tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    to: recieverAddr,\n    value: parseKlay(\"0.01\"),\n    from: senderAddr,\n  };\n\n  tx = await senderWallet.populateTransaction(tx);\n  console.log(tx);\n\n  const senderTxHashRLP = await senderWallet.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  console.log(\"sentTx\", sentTx);\n\n  const rc = await sentTx.wait();\n  console.log(\"receipt\", rc);\n}\n\nmain();\n```\n\n---\n\nCreate sender and fee payer wallets from private keys.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=12:13\n\n```\n\n---\n\nDeclare transaction with the fields such as **type, from, to, value**.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=15:20\n\n```\n\n---\n\nPopulating transaction with additional information with **senderWallet.populateTransaction**\n\n  <CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=22:23\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\n{\n  type: 9,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  nonce: 760,\n  gasLimit: 52500,\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  chainId: 1001\n}\n\n\n\nreceipt 123\n````\n\n</CH.Code>\n\n---\n\nSigning the transaction with the **sender's private key**\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878202f8850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a06021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6a0427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=28:29\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsentTx {\n  hash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  type: 0,\n  accessList: null,\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  blockNumber: 143450182,\n  transactionIndex: 0,\n  confirmations: 4,\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  gasPrice: BigNumber { _hex: '0x0ba43b7400', _isBigNumber: true },\n  gasLimit: BigNumber { _hex: '0xcd14', _isBigNumber: true },\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  value: BigNumber { _hex: '0x2386f26fc10000', _isBigNumber: true },\n  nonce: 760,\n  data: '0x',\n  r: '0x6021c9de1bd99691fbb97161b63ed11cb15a5729fd9ba5cdee1611884700b1f6',\n  s: '0x427b48381bbeb437a63fcfe0f7ba4d641f9ab8fa8dd3e25ade4c83944b3f2c2c',\n  v: 2038,\n  creates: null,\n  chainId: 1001,\n}\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction receipt.\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=31:32\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xA2a8854b1802D8Cd5De631E690817c253d6a9153',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xfd8873a0fca6593be1e92a385c11671545066d0771dc50a6b96576758b321a4c',\n  transactionHash: '0xd582e192640512cefd402cde32d05ba54a34b8087b77c77ee3db1d1aa43548f7',\n  logs: [],\n  blockNumber: 143450182,\n  confirmations: 4,\n  cumulativeGasUsed: BigNumber { _hex: '0x7918', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/getting-started. > **_NOTE:_**\n> This version is going to be temporary.\n> Please upgrade the version more than v1.0.1. You can use the ethers-ext with ethers v5 or v6, look at [view](/references/sdk/ethers-ext/getting-started/).\n# Ethers.js Extension for kaia\n\nEthers.js Extension for kaia offers:\n\n- Drop-in replacement to `ethers.Wallet` that handles both Ethereum and kaia transaction types\n  involving AccountKey and TxTypes.\n- Drop-in replacement to `ethers.providers.JsonRpcProvider` that provides accesses to both Ethereum RPCs and\n  kaia-specific RPCs.\n- Drop-in replacement to `ethers.Web3Provider` to work with both MetaMask (`window.ethereum`) and Kaia Wallet (`window.klaytn`)\n\n## Note for ethers v6\n\n`@kaiachain/ethers-ext` was developed based on ethers v5. As a result, ethers v6 classes are incompatible with ethers-ext classes. If you are using ethers v6 in your codebase, do not mix ethers v6 classes and ethers-ext classes. e.g. ethers v6 JsonRpcProvider cannot be supplied to ethers-ext Wallet.\n\n- **Don't**: mix ethers v6 and ethers-ext\n    ```js\n    const ethers = require(\"ethers\");\n    const { Wallet } = require(\"@kaiachain/ethers-ext\");\n\n    const provider = new ethers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n    const wallet = new Wallet(\"<private key>\", provider);\n    ```\n- **Do**: mix ethers v5 and ethers-ext\n    ```js\n    const ethers = require(\"ethers\");\n    const { Wallet } = require(\"@kaiachain/ethers-ext\");\n\n    const provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n    const wallet = new Wallet(\"<private key>\", provider);\n    ```\n- **Do**: ethers-ext only\n    ```js\n    const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\");\n\n    const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n    const wallet = new Wallet(\"<private key>\", provider);\n    ```\n\n## Install\n\n### Node.js\n\n- Install\n    ```sh\n    npm install --save @kaiachain/ethers-ext ethers@5\n    ```\n- ESM or TypeScript\n    ```ts\n    import { Wallet, JsonRpcProvider } from \"@kaiachain/ethers-ext\";\n    const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n    const wallet = new Wallet(\"<private key>\", provider);\n    ```\n- CommonJS\n    ```js\n    const { Wallet, JsonRpcProvider } = require(\"@kaiachain/ethers-ext\");\n    const provider = new JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n    const wallet = new Wallet(\"<private key>\", provider);\n    ```\n\n### Browser\n\nIt is not recommended to use CDNs in production, But you can use below for quick prototyping.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@kaiachain/ethers-ext@latest/dist/ethers-ext.bundle.js\"></script>\n<script>\nconst provider = new ethers_ext.providers.Web3Provider(window.klaytn);\n</script>\n```\n\n## Usage\n\nSee [example](./example) and [test](./test).",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractDeploy.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD',\n  transactionIndex: 4,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xda84dd69d31a19882525cb5eed2cdb5bc9693bea69eed76d3190810c86a395d0',\n  transactionHash: '0x87e5b9de87f680e88a484a4525edd56ef5baf2b52a229ad35869f63fc53d3058',\n  logs: [],\n  blockNumber: 148740597,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x0f1c25', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\ndeployed address 0xb2F078a8Caed54322dDe974bf48fc11f04e6DdcD\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** packages to add kaia features on ethers.js\n\n```js smartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine sender address, sender private key\n\n```js smartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractDeploy.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractDeploy.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\n\nasync function main() {\n  const factory = new ethers.ContractFactory(abi, bytecode, wallet);\n  const contract = await factory.deploy(100);\n\n  const sentTx = contract.deployTransaction;\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n  console.log(\"deployed address\", receipt.contractAddress);\n}\n\nmain();\n```\n\n---\n\nInit Wallet instance with the private key and provider.\n\n```js smartContractDeploy.js focus=8\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```js smartContractDeploy.js focus=33\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractDeploy.js focus=34\n\n```\n\n---\n\nCreate a contract factory which deploys a contract instance with the Abi and byte code\n\n```js smartContractDeploy.js focus=37\n\n```\n\n---\n\nDeploy the contract with initialize number value equal to 100\n\n```js smartContractDeploy.js focus=38\n\n```\n\n---\n\nSend the transaction to the blockchain and wait for the receipt\n\n<CH.Code>\n```js smartContractDeploy.js focus=40:42\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  to: null,\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: '0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288',\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x044844', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc0f8e7d6058aee71eac5736dab4a47b61ede1608d210d592d7a5ad8d443e6ca1',\n  transactionHash: '0xaf4a924f66bb402b0c3fa2fa3b59c5e33a323f2eec870a3683fae495c8263343',\n  logs: [],\n  blockNumber: 146817953,\n  confirmations: 7,\n  cumulativeGasUsed: BigNumber { _hex: '0x0a0eb2', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: []\n}\n````\n\n</CH.Code>\n\n---\n\nGet the address of the new contract\n\n<CH.Code>\n```js smartContractDeploy.js focus=43\n\n````\n---\n```zsh output\n❯ node smartContractDeploy.js\ndeployed address 0x9C28fD38a94145fEb0E24F2d188540D7FDDbE288\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SmartContractView.js\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js SmartContractView.js\nnumber 291\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js SmartContractView.js focus=1\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js SmartContractView.js focus=3\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SmartContractView.js focus=3\nconst ethers = require(\"ethers\");\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, provider);\n  const number = await counter.number();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js SmartContractView.js focus=28\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js SmartContractView.js focus=29\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js SmartContractView.js focus=32\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js SmartContractView.js focus=33:34\n\n````\n---\n```zsh output\n❯ node SmartContractView.js\nnumber 291\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/smart-contract/write-txtype. <CH.Spotlight>\n<CH.Code>\n\n```js writeTxType.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeTxType.js\nnumber before 292\nsentTx 0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74',\n  transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740675,\n      transactionHash: '0x2af4d70ac12b5bedd960200e1791cd06c5ea110acb196c8156837570a158452e',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 0,\n      blockHash: '0x91742c5e371cb44f335f2e7e944d0a340bd4bc0f2004197b689020431d72cf74'\n    }\n  ],\n  blockNumber: 148740675,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 293\n\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeTxType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js writeTxType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeTxType.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeTxType.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  const sentTx = await wallet.sendTransaction(tx);\n  console.log(\"sentTx\", sentTx.hash);\n\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js writeTxType.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeTxType.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeTxType.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeTxType.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=39\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber before 291\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeTxType.js focus=41\n\n```\n\n---\n\nCreate a transaction object with data from previous step with type **SmartContractExecution**\n\n```js writeTxType.js focus=42:48\n\n```\n\n---\n\nSend the tx to the blockchain. Function `sendTransaction` internally signs with the private key of the account and then transmits it to the blockchain network.\n\n<CH.Code>\n```js writeTxType.js focus=50:51\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nsentTx 0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306\n````\n\n</CH.Code>\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js writeTxType.js focus=53:54\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b',\n  transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 146818446,\n      transactionHash: '0xcb9554737ebef23f181303f99b2a6f7ed942d00cd6cf9966f1dedcdf8720d306',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0x56d4b7567811196525ef2704060210c1a908b245ae6ac8b296c30ecb2ff76f3b'\n    }\n  ],\n  blockNumber: 146818446,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeTxType.js focus=56\n\n````\n---\n```zsh output\n❯ node writeTxType.js\nnumber after 292\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js writeWithFeeDelegation.js\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node writeWithFeeDelegation.js\nnumber before 293\nsenderTxHashRLP 0x31f88447850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f6a0d9d8ebf8d1c2665cf27903234536edc078bf2857a42941a140a8617b2ca1cb7aa05006695b49733abd7dbbb4e5192d81b1f1e84efb1cf919dee6f2d4687aa32fe2\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a',\n  transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740703,\n      transactionHash: '0xa4ea502904b63b098e650d82c69999c1537ff2426b9f391f2f16b027f00656d4',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0x9ab3f98ef92495c3a6c4b7f353ae60459d2d96cf8d3270c3285c398fd3ee912a'\n    }\n  ],\n  blockNumber: 148740703,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nnumber after 294\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js writeWithFeeDelegation.js focus=1:2\n\n```\n\n---\n\nDefine **sender, fee payer address and sender private key**\n\n```js writeWithFeeDelegation.js focus=4:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js writeWithFeeDelegation.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js writeWithFeeDelegation.js focus=9\nconst ethers = require(\"ethers\");\nconst { Wallet, TxType } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst senderWallet = new Wallet(senderPriv, provider);\nconst feePayerWallet = new Wallet(feePayerPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, senderWallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const data = (await counter.populateTransaction.increment()).data;\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    value: 0,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const populatedTx = await senderWallet.populateTransaction(tx);\n  const senderTxHashRLP = await senderWallet.signTransaction(populatedTx);\n  console.log(\"senderTxHashRLP\", senderTxHashRLP);\n\n  // Sign and send transaction by fee payer\n  const sentTx = await feePayerWallet.sendTransactionAsFeePayer(senderTxHashRLP);\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a sender's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=10\n\n```\n\n---\n\nCreate a fee payer's wallet using the sender's private key and the provider\n\n```js writeWithFeeDelegation.js focus=11\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js writeWithFeeDelegation.js focus=36\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js writeWithFeeDelegation.js focus=37\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js writeWithFeeDelegation.js focus=40\n\n```\n\n---\n\nGet the value of **number** from contract by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=42\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber before 292\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js writeWithFeeDelegation.js focus=44\n\n```\n\n---\n\nCreate a transaction object with data from previous step\n\n```js writeWithFeeDelegation.js focus=42:48\n\n```\n\n---\n\nSign the transaction with sender's wallet\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=53:56\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x31f8843a850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f5a014ebdbabc74b5b93770f1f0980b67af59fa47a1bf450d0c27928a5f3f831219aa0027c3a6262e28dfad9166ec8d7a5d77da55272d18a3c1b656024764f8cb3379a\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain using fee payer's wallet. Function `sendTransactionAsFeePayer` adds a signature with FeePayer’s private key to the sender’s signature and transmits it to the blockchain network.\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=58:61\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x947e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5',\n  transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146818590,\n      transactionHash: '0xef1cac0795274ff93126ceb8becc7ac40bbc6696869e62bece4a72346e6a5cae',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000125',\n      logIndex: 6,\n      blockHash: '0x16897be3c935485da0472467e075033d22799983ec79b23c6913c24ad63397c5'\n    }\n  ],\n  blockNumber: 146818590,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x068840', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js writeWithFeeDelegation.js focus=63\n\n````\n---\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nnumber after 293\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/ethers-ext-prior-v1-0-1/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWrite.js\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber before 291\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n  transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n  logs: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac'\n    }\n  ],\n  blockNumber: 148740640,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 0,\n      blockNumber: 148740640,\n      transactionHash: '0x07c87084001218f66e260cb63c207c676eae3bb4a338b7384457f6a4fdebd5da',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000124',\n      logIndex: 0,\n      blockHash: '0xbc6486ec825cf2388917f6c5c250af3f811bc838ea3f83382c1786d31b1eaaac',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\nnumber after 292\n```\n\n</CH.Code>\n\n---\n\nImport the **ethers** and **@kaiachain/ethers-ext** modules to add kaia features on ethers.js.\n\n```js smartContractWrite.js focus=1:2\n\n```\n\n---\n\nDefine **sender address** and **private key**\n\n```js smartContractWrite.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in ethers is a read-only abstraction to access the blockchain data.\n\n```js smartContractWrite.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWrite.js focus=7\nconst ethers = require(\"ethers\");\nconst { Wallet } = require(\"@kaiachain/ethers-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new ethers.providers.JsonRpcProvider(\"https://public-en-kairos.node.kaia.io\");\nconst wallet = new Wallet(senderPriv, provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst abi = '[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]';\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const counter = new ethers.Contract(contractAddr, abi, wallet);\n\n  console.log(\"number before\", (await counter.number()).toString());\n\n  const sentTx = await counter.increment();\n  const receipt = await sentTx.wait();\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await counter.number()).toString());\n}\n\nmain();\n```\n\n---\n\ncreate a wallet from sender **private key** and **web3 provider**\n\n```js smartContractWrite.js focus=8\n\n```\n\n---\n\nSet the **Abi** generated from solidity code\n\n```js smartContractWrite.js focus=33\n\n```\n\n---\n\nDefine **contract address** to interact with\n\n```js smartContractWrite.js focus=34\n\n```\n\n---\n\nCreate a contract instance with **ethers.Contract**, fill in params **contractAddr**, **abi**, **provider**. You can read and write the contract through this instance\n\n```js smartContractWrite.js focus=37\n\n```\n\n---\n\nGet the **number** value before updated by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=39\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber before 293\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction data to update the **number** value\n\n```js smartContractWrite.js focus=41\n\n```\n\n---\n\nThe **wait** function returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js smartContractWrite.js focus=42:43\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nreceipt {\n  to: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x6d6e', _isBigNumber: true },\n  logsBloom: '0xn  blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n  transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n  logs: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a'\n    }\n  ],\n  blockNumber: 146819181,\n  confirmations: 8,\n  cumulativeGasUsed: BigNumber { _hex: '0x026fa8', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 2,\n  byzantium: true,\n  events: [\n    {\n      transactionIndex: 2,\n      blockNumber: 146819181,\n      transactionHash: '0x3bc3042d157a877af42b9a4a60a719e9523f1c901c4aefa3c6ded12f946f7317',\n      address: '0x95Be48607498109030592C08aDC9577c7C2dD505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000126',\n      logIndex: 0,\n      blockHash: '0xc17dbcfb8c5582dc0646a01138fda179ee05a1134e167dfd5edafe46977f008a',\n      args: [Array],\n      decode: [Function (anonymous)],\n      event: 'SetNumber',\n      eventSignature: 'SetNumber(uint256)',\n      removeListener: [Function (anonymous)],\n      getBlock: [Function (anonymous)],\n      getTransaction: [Function (anonymous)],\n      getTransactionReceipt: [Function (anonymous)]\n    }\n  ]\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value **number** by using method **counter.number()**\n\n<CH.Code>\n```js smartContractWrite.js focus=45\n\n````\n---\n```zsh output\n❯ node smartContractWrite.js\nnumber after 294\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk. # SDKs and Libraries\n\nThis section gives the API references of the libraries for interacting with kaia nodes and some tutorials on how to use them to send a transaction, read data from the blockchain, and communicate with an existing contract on the kaia Network.\n\n```mdx-code-block\nimport DocCardList from '@theme/DocCardList';\n\n<DocCardList />\n```",
    "Current Website Url is https://docs.kaia.io/references/sdk/viem. # viem\n\n![](/img/references/kaiaXviem.png)\n\n[Viem](https://viem.sh/) is a typescript interface for Ethereum that provides low-level primitives for interacting with Ethereum and other EVM-Compatible blockchain. With kaia supporting features for [Ethereum Equivalence](https://medium.com/klaytn/using-ethereum-tools-in-klaytn-dc068d48de04), Ethereum tools such as viem can be used on kaia without any significant modifications. \n\nFor that reason, developers can leverage this compatibility and use the viem library to interact with a kaia node.\n\nIn this guide, you'll learn how to use the viem library to read data from the blockchain, send a transaction, and interact with an existing contract on the kaia Network.\n\n## Prerequisites\n\n* Code-Editor: a source-code editor such as [VS Code](https://code.visualstudio.com/download).\n* [Metamask](../../../build/tutorials/connecting-metamaskx#install-metamask): used to deploy the contracts, sign transactions and interact with the contracts.\n* RPC Endpoint: you can get this from one of the supported [Endpoint Providers](../../public-en).\n* Test KAIA from [Faucet](https://faucet.kaia.io): fund your account with sufficient KAIA.\n* [NodeJS and NPM](https://nodejs.org/en/)\n* [TS-node](https://www.npmjs.com/package/ts-node): used for running TypeScript scripts.\n\n\n## Setup Project\n\nTo get started, you need to create a project directory to house the files to be created in this guide.\n\n```bash\nmkdir viem-example\ncd viem-example\n```\n\n### 1. Install viem\n\nTo install viem run the following command in your terminal:\n\n```bash\nnpm i viem\n```\n\nIn this tutorial, we will create a bunch of scripts file to read data from the blockchain, send transactions, and also interact with existing smart contract. To get started, you need to know how to set up viem for each of your script files.\n\n### 2. Set up Public Client & Transport\n\nFirstly, you need to set up your Public [Client](https://viem.sh/docs/clients/intro) with a desired [Transport](https://viem.sh/docs/clients/intro) & [Chain](https://viem.sh/docs/chains/introduction). A Public Client is an interface to **public** [JSON-RPC API](https://docs.kaia.io/references/public-en/) methods such as retrieving block numbers, transactions, reading from smart contracts, etc through [Public Actions](https://viem.sh/docs/actions/public/introduction).\n\n```ts\nimport { createPublicClient, http } from 'viem'\nimport { klaytnBaobab } from 'viem/chains'\n \nconst client = createPublicClient({ \n  chain: klaytnBaobab, \n  transport: http(\"https://public-en-kairos.node.kaia.io\"), \n}) \n\n```\n\n### 3. Set up Wallet Client and account\n\nSecondly, you need to set a wallet client to interact with an account. With wallet client, you can perform actions such as retrieving accounts, executing transactions, signing messages, etc through [Wallet Actions](https://viem.sh/docs/actions/wallet/introduction).\n\n```ts\nimport { createWalletClient } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\n \nconst walletClient = createWalletClient({\n  chain: klaytnBaobab,\n  transport: http(\"https://public-en-kairos.node.kaia.io\")\n})\n \nconst account = privateKeyToAccount(\"PASTE PRIVATE KEY HERE\");\n```\n\n\n## Reading data from the blockchain\n\nTo read data from the blockchain, create a new `read.ts` file in your project folder by running this command:\n\n```bash\ntouch read.ts\n```\n\nAfter creating this file, set up your public client as done in the **set up section** above. In this section, you will learn how to read data from the blockchain (e.g., blockNumber, KAIA balance).\n\nTo see this in action, paste the following code in your `read.ts`.\n\n\n```ts\nimport { createPublicClient, http, formatEther } from 'viem'\nimport { klaytnBaobab } from 'viem/chains'\n \nconst client = createPublicClient({ \n  chain: klaytnBaobab, \n  transport: http(\"https://public-en-kairos.node.kaia.io\"), \n}) \n\n\nasync function getBlockNumber() {\n    const blockNumber = await client.getBlockNumber() \n    console.log(`Current block number is: ${blockNumber}`);\n}\n\nasync function getKlayBalance() {\n  const balance = await client.getBalance({ \n    address: '0x75Bc50a5664657c869Edc0E058d192EeEfD570eb',\n  })\n  const formatBal = formatEther(balance);\n  console.log(`Current KAIA balance is ${formatBal}`);  \n}\n\n\ngetBlockNumber();\ngetKlayBalance();\n```\n\n**Output**\n\nTo run the script and read data from the blockchain, paste the following command in your terminal:\n\n```\nnpx ts-node read.ts\n```\n\nIf the transaction was successful, you'll see the block number and user’s KAIA balance in your terminal.\n\n![](/img/references/viem-read.png)\n\n\n## Sending a transaction to the blockchain\nTo send a transaction to the blockchain, create a new `send.ts` file in your project folder by running this command:\n\n```bash\ntouch send.ts \n```\n\nAfter creating this file, set up your wallet client as done in the **set up section** above. In this section, you will learn how to send a transaction to the blockchain (for example, send KAIA to an address).\n\nTo see this in action, paste the following code in your `send.ts`.\n\n```ts\nimport { createWalletClient, http, parseEther } from 'viem'\nimport { klaytnBaobab } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\n\nconst walletClient = createWalletClient({\n  chain: klaytnBaobab,\n  transport: http(\"https://public-en-kairos.node.kaia.io\")\n})\n \nconst account = privateKeyToAccount(\"PASTE PRIVATE KEY\");\n\n\nasync function sendKlayToRecipient() {\n  const hash = await walletClient.sendTransaction({ \n    account,\n    to: \"PASTE RECIPIENT ADDRESS\",\n    value: parseEther('0.01')\n  })\n\n  console.log(`Send KAIA tx hash is: ${hash}`);\n}\n\nsendKlayToRecipient();\n\n```\n\n\n**Output**\n\nTo run the script and send transaction to the blockchain, paste the following command in your terminal:\n\n```\nnpx ts-node send.ts\n```\n\nIf the transaction was successful, you'll see the transaction hash logged in your terminal.\n\n![](/img/references/viem-send.png)\n\n\n## Interacting with smart contracts\n\nTo interact with an existing smart contract on kaia, create a new `interact.ts` file in your project folder by running this command:\n\n```bash\ntouch interact.ts\n```\n\nAfter creating this file, set up your public and wallet client as done in the **set up section** above. In this section, you will use viem to both:\n\n* Read from the contract; and\n* Write to a contract.\n\nFor the purpose of this guide, a simple_storage contract was compiled and deployed on [Remix IDE](https://remix.ethereum.org/). For that reason, we will read from this contract by calling the `retrieve` function, and also send a transaction to this contract by calling the `store` function.\n\n### 1. Read from contract \n\nTo read from the contract, we used [readContract](https://viem.sh/docs/contract/readContract#readcontract) method which Internally  uses a [Public Client](https://viem.sh/docs/clients/public) to call the [call action](https://viem.sh/docs/actions/public/call) with [ABI-encoded data](https://viem.sh/docs/contract/encodeFunctionData). To see this in action, paste the following code in your `interact.js`.\n\n```ts\nimport { createPublicClient, http } from 'viem'\nimport { klaytnBaobab } from 'viem/chains'\n \nconst client = createPublicClient({ \n  chain: klaytnBaobab, \n  transport: http(\"https://public-en-kairos.node.kaia.io\"), \n}) \n\n\nconst abi =  [\n    {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"num\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n]\n\n\nasync function readFromContract() {\n  const retrieve = await client.readContract({\n    address: \"0x472a1226796b6a0918DC78d40b87d750881fdbDC\",  // Contract Address\n    abi: abi,\n    functionName: 'retrieve'\n  })\n\n  console.log(`Value read from contract is: ${retrieve}`);\n}\n\n```\n\n\n### 2. Write to contract\n\nTo write to the contract, we used [writeContract](https://viem.sh/docs/contract/writeContract#writecontract) method which Internally uses a [Wallet Client](https://viem.sh/docs/clients/wallet) to call the [sendTransaction action](https://viem.sh/docs/actions/wallet/sendTransaction) with [ABI-encoded data](https://viem.sh/docs/contract/encodeFunctionData). To see this in action, paste the following code in your `interact.js`.\n\n\n\n```ts\nimport { createWalletClient, http } from 'viem'\nimport { klaytnBaobab } from 'viem/chains'\nimport { privateKeyToAccount } from 'viem/accounts'\n \nconst walletClient = createWalletClient({\n  chain: klaytnBaobab,\n  transport: http(\"https://public-en-kairos.node.kaia.io\")\n})\n \nconst account = privateKeyToAccount(\"PASTE PRIVATE KEY\");\n\nconst abi =  [\n    {\n        \"inputs\": [],\n        \"name\": \"retrieve\",\n        \"outputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"stateMutability\": \"view\",\n        \"type\": \"function\"\n    },\n    {\n        \"inputs\": [\n            {\n                \"internalType\": \"uint256\",\n                \"name\": \"num\",\n                \"type\": \"uint256\"\n            }\n        ],\n        \"name\": \"store\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n    }\n]\n\n\nasync function writeToContract() {\n\n  const { request } = await client.simulateContract({\n    address: \"0x472a1226796b6a0918DC78d40b87d750881fdbDC\",  // Contract Address\n    abi: abi,\n    functionName: \"store\",\n    account: account,\n    args: [694n],\n  })\n\n  const hash = await walletClient.writeContract(request)\n\n  console.log(`Hash from writing to a contract: ${hash}`);\n}\n\n\nwriteToContract();\n```\n\n**Output**\n\nTo run the script and interact with smart contracts, paste the following command in your terminal: \n\n```bash\nnpx ts-node interact.ts\n```\n\n\nIf the transaction was successful, you'll see the transaction hash and the value stored in your terminal. \n\n![](/img/references/viem-interact.png)\n\nFor more in-depth guide on viem, please refer to [viem docs](https://viem.sh/docs/getting-started). Also, you can find the full implementation of the code for this guide on [GitHub](https://github.com/kaiachain/kaia-dapp-mono/tree/main/examples/tools/sdk-and-libraries-for-interacting-with-klaytn-node/viem).\n\n\n\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```java AccountUpdateWithLegacyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyLegacy;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithLegacyExample {\n\n        public static void run() throws Exception {\n\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                AccountKeyLegacy accountkey = AccountKeyLegacy.create();\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateWithLegacyExample.java\nTxHash :\n 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2', transactionIndex='0x1', blockHash='0xc1d491e001410664e0a1e68c20d69890a587dede6beae43c20fa1899935425ba', blockNumber='0x90e59b5', cumulativeGasUsed='0x3240d', gasUsed='0x5208', contractAddress='null', root='null', status='0x1', from='0xa2a8854b1802d8cd5de631e690817c253d6a9153', to='0xa2a8854b1802d8cd5de631e690817c253d6a9153', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0xc1d491e001410664e0a1e68c20d69890a587dede6beae43c20fa1899935425ba\n    blockNumber: 0x90e59b5\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: 0x01c0\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3e8\n    senderTxHash: 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\n    transactionIndex: 0x1\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\nTxType : ACCOUNT_UPDATE\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java AccountUpdateWithLegacyExample.java focus=1:21\n\n```\n\n---\n\nCreate a **credentials** from private key\n\n```java AccountUpdateWithLegacyExample.java focus=27\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java AccountUpdateWithLegacyExample.java focus=28\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java AccountUpdateWithLegacyExample.java focus=28\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyLegacy;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithLegacyExample {\n\n        public static void run() throws Exception {\n\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                AccountKeyLegacy accountkey = AccountKeyLegacy.create();\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java AccountUpdateWithLegacyExample.java focus=30:31\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java AccountUpdateWithLegacyExample.java focus=33:34\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java AccountUpdateWithLegacyExample.java focus=35:36\n\n```\n\n---\n\nGenerate a **new account key** for account update\n\n```java AccountUpdateWithLegacyExample.java focus=38\n\n```\n\n---\n\nSet transaction type as **ACCOUNT_UPDATE**\n\n```java AccountUpdateWithLegacyExample.java focus=40\n\n```\n\n---\n\nCreate a **raw transaction** for account update\n\n```java AccountUpdateWithLegacyExample.java focus=42:48\n\n```\n\n---\n\nSign the transaction\n\n```java AccountUpdateWithLegacyExample.java focus=50\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java AccountUpdateWithLegacyExample.java focus=51:54\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithLegacyExample.java\nTxHash :\n 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be completed and get the transaction receipt\n\n<CH.Code>\n```java AccountUpdateWithLegacyExample.java focus=56:65\n\n````\n---\n\n```zsh output\n❯ java AccountUpdateWithLegacyExample.java\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2', transactionIndex='0x1', blockHash='0xc1d491e001410664e0a1e68c20d69890a587dede6beae43c20fa1899935425ba', blockNumber='0x90e59b5', cumulativeGasUsed='0x3240d', gasUsed='0x5208', contractAddress='null', root='null', status='0x1', from='0xa2a8854b1802d8cd5de631e690817c253d6a9153', to='0xa2a8854b1802d8cd5de631e690817c253d6a9153', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0xc1d491e001410664e0a1e68c20d69890a587dede6beae43c20fa1899935425ba\n    blockNumber: 0x90e59b5\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: 0x01c0\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3e8\n    senderTxHash: 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x7b435e127119d8ee2edf8d49377ed150e4579cc3c991e0272a519a5d7f3f17b2\n    transactionIndex: 0x1\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java AccountUpdateWithLegacyExample.java focus=66\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java AccountUpdateWithLegacyExample.java focus=68:70\n\n````\n---\n\n```zsh output\n❯ java AccountUpdateWithLegacyExample.java\nTxType : ACCOUNT_UPDATE\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java AccountUpdateWithMultiSigExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.List;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig.WeightedPublicKey;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithMultiSigExample {\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credential1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1, keySample.MULTI_KEY_address);\n                KlayCredentials credential2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2, keySample.MULTI_KEY_address);\n                KlayCredentials credential3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3, keySample.MULTI_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credential1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey1 = credential1.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey1 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey1));\n                BigInteger newPubkey2 = credential2.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey2 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey2));\n                BigInteger newPubkey3 = credential3.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey3 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey3));\n\n                // make list with weightedAccountKey1, weightedAccountKey2, weightedAccountKey3\n                List<WeightedPublicKey> weightedAccountKeyList = List.of(weightedAccountKey1, weightedAccountKey2,\n                                weightedAccountKey3);\n\n                AccountKeyWeightedMultiSig accountkey = AccountKeyWeightedMultiSig.create(BigInteger.TWO,\n                                weightedAccountKeyList);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential1);\n                signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential2);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateWithMultiSigExample.java\nTxHash :\n 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442', transactionIndex='0x3', blockHash='0x4e8c4f1b795ca48c9a60788786481b72df1e2eb16d83ffc9d89e1e2708962378', blockNumber='0x90e5807', cumulativeGasUsed='0x983cc', gasUsed='0x17700', contractAddress='null', root='null', status='0x1', from='0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e', to='0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0x4e8c4f1b795ca48c9a60788786481b72df1e2eb16d83ffc9d89e1e2708962378\n    blockNumber: 0x90e5807\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x17700\n    humanReadable: null\n    key: 0x04f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x73\n    senderTxHash: 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\n    transactionIndex: 0x3\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\nTxType : ACCOUNT_UPDATE\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java AccountUpdateWithMultiSigExample.java focus=1:25\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java AccountUpdateWithMultiSigExample.java focus=31\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java AccountUpdateWithMultiSigExample.java focus=31\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.List;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig.WeightedPublicKey;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithMultiSigExample {\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credential1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1, keySample.MULTI_KEY_address);\n                KlayCredentials credential2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2, keySample.MULTI_KEY_address);\n                KlayCredentials credential3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3, keySample.MULTI_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credential1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey1 = credential1.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey1 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey1));\n                BigInteger newPubkey2 = credential2.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey2 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey2));\n                BigInteger newPubkey3 = credential3.getEcKeyPair().getPublicKey();\n                WeightedPublicKey weightedAccountKey3 = WeightedPublicKey.create(BigInteger.ONE,\n                                AccountKeyPublic.create(newPubkey3));\n\n                // make list with weightedAccountKey1, weightedAccountKey2, weightedAccountKey3\n                List<WeightedPublicKey> weightedAccountKeyList = List.of(weightedAccountKey1, weightedAccountKey2,\n                                weightedAccountKey3);\n\n                AccountKeyWeightedMultiSig accountkey = AccountKeyWeightedMultiSig.create(BigInteger.TWO,\n                                weightedAccountKeyList);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential1);\n                signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential2);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\nCreate 3 different **credentials** from private keys\n\n```java AccountUpdateWithMultiSigExample.java focus=32:34\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java AccountUpdateWithMultiSigExample.java focus=36:37\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java AccountUpdateWithMultiSigExample.java focus=39:40\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java AccountUpdateWithMultiSigExample.java focus=41:42\n\n```\n\n---\n\nGenerate new **account keys** and theirs weights for account update\n\n```java AccountUpdateWithMultiSigExample.java focus=44:52\n\n```\n\n---\n\nCombine generated **weighted account keys** into a list\n\n```java AccountUpdateWithMultiSigExample.java focus=54:59\n\n```\n\n---\n\nSet transaction type as **ACCOUNT_UPDATE**\n\n```java AccountUpdateWithMultiSigExample.java focus=61\n\n```\n\n---\n\nCreate a **raw transaction** for account update\n\n```java AccountUpdateWithMultiSigExample.java focus=63:69\n\n```\n\n---\n\nSign the transaction\n\n```java AccountUpdateWithMultiSigExample.java focus=71\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java AccountUpdateWithMultiSigExample.java focus=72:76\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithMultiSigExample.java\nTxHash :\n 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be completed and get the transaction receipt\n\n<CH.Code>\n```java AccountUpdateWithMultiSigExample.java focus=78:87\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithMultiSigExample.java\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442', transactionIndex='0x3', blockHash='0x4e8c4f1b795ca48c9a60788786481b72df1e2eb16d83ffc9d89e1e2708962378', blockNumber='0x90e5807', cumulativeGasUsed='0x983cc', gasUsed='0x17700', contractAddress='null', root='null', status='0x1', from='0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e', to='0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0x4e8c4f1b795ca48c9a60788786481b72df1e2eb16d83ffc9d89e1e2708962378\n    blockNumber: 0x90e5807\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x17700\n    humanReadable: null\n    key: 0x04f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x73\n    senderTxHash: 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xfffe87a710a452a8457f80a8a5bdce48e2e50cac53663dbc72cfc104926fd442\n    transactionIndex: 0x3\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java AccountUpdateWithMultiSigExample.java focus=88\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java AccountUpdateWithMultiSigExample.java focus=90:92\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithMultiSigExample.java\nTxType : ACCOUNT_UPDATE\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java AccountUpdateWithPubKeyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithPubKeyExample {\n\n        public static void run() throws Exception {\n\n                KlayCredentials credentials = KlayCredentials.create(keySample.PUBLIC_KEY_privkey, keySample.PUBLIC_KEY_address);\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey = credentials.getEcKeyPair().getPublicKey();\n\n                AccountKeyPublic accountkey = AccountKeyPublic.create(newPubkey);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateWithPubKeyExample.java\nTxHash :\n 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d', transactionIndex='0x2', blockHash='0x2cf21f03340bb37ce103d692cfe9bba51046c061a9d4474369cdcac1b338e13d', blockNumber='0x908fa16', cumulativeGasUsed='0x5daef', gasUsed='0xa028', contractAddress='null', root='null', status='0x1', from='0xa2a8854b1802d8cd5de631e690817c253d6a9153', to='0xa2a8854b1802d8cd5de631e690817c253d6a9153', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0x2cf21f03340bb37ce103d692cfe9bba51046c061a9d4474369cdcac1b338e13d\n    blockNumber: 0x908fa16\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xa028\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3e3\n    senderTxHash: 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\n    transactionIndex: 0x2\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\nTxType : ACCOUNT_UPDATE\n\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java AccountUpdateWithPubKeyExample.java focus=1:21\n\n```\n\n---\n\nCreate a new **credentials** from **PUBLIC_KEY** key pairs\n\n```java AccountUpdateWithPubKeyExample.java focus=27\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java AccountUpdateWithPubKeyExample.java focus=28\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java AccountUpdateWithPubKeyExample.java focus=28\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithPubKeyExample {\n\n        public static void run() throws Exception {\n\n                KlayCredentials credentials = KlayCredentials.create(keySample.PUBLIC_KEY_privkey, keySample.PUBLIC_KEY_address);\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey = credentials.getEcKeyPair().getPublicKey();\n\n                AccountKeyPublic accountkey = AccountKeyPublic.create(newPubkey);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java AccountUpdateWithPubKeyExample.java focus=30:31\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java AccountUpdateWithPubKeyExample.java focus=33:34\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java AccountUpdateWithPubKeyExample.java focus=35:36\n\n```\n\n---\n\nGenerate a new **account key** for account update from created **public key**\n\n```java AccountUpdateWithPubKeyExample.java focus=38:40\n\n```\n\n---\n\nSet transaction type as **ACCOUNT_UPDATE**\n\n```java AccountUpdateWithPubKeyExample.java focus=42\n\n```\n\n---\n\nCreate a **raw transaction** for account update\n\n```java AccountUpdateWithPubKeyExample.java focus=44:50\n\n```\n\n---\n\nSign the transaction\n\n```java AccountUpdateWithPubKeyExample.java focus=52\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n\n```java AccountUpdateWithPubKeyExample.java focus=53:56\n\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateWithPubKeyExample.java\nTxHash :\n 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\n```\n\n</CH.Code>\n\n---\n\nWait for the transaction to be completed and get the transaction receipt\n\n<CH.Code>\n```java AccountUpdateWithPubKeyExample.java focus=58:67\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithPubKeyExample.java\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d', transactionIndex='0x2', blockHash='0x2cf21f03340bb37ce103d692cfe9bba51046c061a9d4474369cdcac1b338e13d', blockNumber='0x908fa16', cumulativeGasUsed='0x5daef', gasUsed='0xa028', contractAddress='null', root='null', status='0x1', from='0xa2a8854b1802d8cd5de631e690817c253d6a9153', to='0xa2a8854b1802d8cd5de631e690817c253d6a9153', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0x2cf21f03340bb37ce103d692cfe9bba51046c061a9d4474369cdcac1b338e13d\n    blockNumber: 0x908fa16\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xa028\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3e3\n    senderTxHash: 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x45737947e3cd5812a426150ec35b687239e2444baac3b26173c98295bdde318d\n    transactionIndex: 0x2\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java AccountUpdateWithPubKeyExample.java focus=68\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java AccountUpdateWithPubKeyExample.java focus=70:72\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithPubKeyExample.java\nTxType : ACCOUNT_UPDATE\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java AccountUpdateWithRoleBasedExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.List;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKey;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.account.AccountKeyRoleBased;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig.WeightedPublicKey;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithRoleBasedExample {\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credential1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey, keySample.ROLEBASED_KEY_address);\n                KlayCredentials credential2 = KlayCredentials.create(keySample.ROLEBASED_KEY_updatekey, keySample.ROLEBASED_KEY_address);\n                KlayCredentials credential3 = KlayCredentials.create(keySample.ROLEBASED_KEY_feepayer, keySample.ROLEBASED_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credential1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey1 = credential1.getEcKeyPair().getPublicKey();\n                BigInteger newPubkey2 = credential2.getEcKeyPair().getPublicKey();\n                BigInteger newPubkey3 = credential3.getEcKeyPair().getPublicKey();\n\n                AccountKeyPublic accountTransactionkey = AccountKeyPublic.create(newPubkey1);\n                AccountKeyPublic accountUpdateKey = AccountKeyPublic.create(newPubkey2);\n                AccountKeyPublic accountFeePayerKey = AccountKeyPublic.create(newPubkey3);\n\n                List<AccountKey> accountKeys = List.of(accountTransactionkey, accountUpdateKey, accountFeePayerKey);\n                AccountKeyRoleBased accountkey = AccountKeyRoleBased.create(accountKeys);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential2);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateWithRoleBasedExample.java\nTxHash :\n 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c', transactionIndex='0x1', blockHash='0xaff11b719196dc64d161fabce82d74f0dc91f8d6d9aa0bcbb721f9006d0029f4', blockNumber='0x90e5932', cumulativeGasUsed='0x377d6', gasUsed='0x13c68', contractAddress='null', root='null', status='0x1', from='0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea', to='0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea', logs=[], logsBloom='0xrevertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0xaff11b719196dc64d161fabce82d74f0dc91f8d6d9aa0bcbb721f9006d0029f4\n    blockNumber: 0x90e5932\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x13c68\n    humanReadable: null\n    key: 0x05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3e\n    senderTxHash: 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\n    transactionIndex: 0x1\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\nTxType : ACCOUNT_UPDATE\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java AccountUpdateWithRoleBasedExample.java focus=1:27\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java AccountUpdateWithRoleBasedExample.java focus=33\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java AccountUpdateWithRoleBasedExample.java focus=33\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.List;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKey;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.account.AccountKeyRoleBased;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig;\nimport org.web3j.crypto.transaction.account.AccountKeyWeightedMultiSig.WeightedPublicKey;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class AccountUpdateWithRoleBasedExample {\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credential1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey, keySample.ROLEBASED_KEY_address);\n                KlayCredentials credential2 = KlayCredentials.create(keySample.ROLEBASED_KEY_updatekey, keySample.ROLEBASED_KEY_address);\n                KlayCredentials credential3 = KlayCredentials.create(keySample.ROLEBASED_KEY_feepayer, keySample.ROLEBASED_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credential1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey1 = credential1.getEcKeyPair().getPublicKey();\n                BigInteger newPubkey2 = credential2.getEcKeyPair().getPublicKey();\n                BigInteger newPubkey3 = credential3.getEcKeyPair().getPublicKey();\n\n                AccountKeyPublic accountTransactionkey = AccountKeyPublic.create(newPubkey1);\n                AccountKeyPublic accountUpdateKey = AccountKeyPublic.create(newPubkey2);\n                AccountKeyPublic accountFeePayerKey = AccountKeyPublic.create(newPubkey3);\n\n                List<AccountKey> accountKeys = List.of(accountTransactionkey, accountUpdateKey, accountFeePayerKey);\n                AccountKeyRoleBased accountkey = AccountKeyRoleBased.create(accountKeys);\n\n                TxType.Type type = Type.ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credential2);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\nCreate 3 diffent **credentials** from private keys\n\n```java AccountUpdateWithRoleBasedExample.java focus=34:36\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java AccountUpdateWithRoleBasedExample.java focus=38:39\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java AccountUpdateWithRoleBasedExample.java focus=41:42\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java AccountUpdateWithRoleBasedExample.java focus=43:44\n\n```\n\n---\n\nGenerate **new account keys** and theirs **weight** for account update\n\n```java AccountUpdateWithRoleBasedExample.java focus=46:54\n\n```\n\n---\n\nCombine generated **weight account keys** into a list\n\n```java AccountUpdateWithRoleBasedExample.java focus=56:58\n\n```\n\n---\n\nSpecify the **role** for each key, the possible role are transaction, update, fee payer.\n\n```java AccountUpdateWithRoleBasedExample.java focus=60:63\n\n```\n\n---\n\nCombine **generated role key** into a list\n\n```java AccountUpdateWithRoleBasedExample.java focus=65:67\n\n```\n\n---\n\nSet transaction type as **ACCOUNT_UPDATE**\n\n```java AccountUpdateWithRoleBasedExample.java focus=69\n\n```\n\n---\n\nCreate a **raw transaction** for account update\n\n```java AccountUpdateWithRoleBasedExample.java focus=71:77\n\n```\n\n---\n\nSign the transaction\n\n```java AccountUpdateWithRoleBasedExample.java focus=79\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java AccountUpdateWithRoleBasedExample.java focus=80:83\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithRoleBasedExample.java\nTxHash :\n 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\n````\n\n</CH.Code>\n\n---\n\nWait for the transaction to be completed and get the transaction receipt\n\n<CH.Code>\n```java AccountUpdateWithRoleBasedExample.java focus=85:94\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithRoleBasedExample.java\nReceipt from eth_getTransactionReceipt :\nTransactionReceipt{transactionHash='0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c', transactionIndex='0x1', blockHash='0xaff11b719196dc64d161fabce82d74f0dc91f8d6d9aa0bcbb721f9006d0029f4', blockNumber='0x90e5932', cumulativeGasUsed='0x377d6', gasUsed='0x13c68', contractAddress='null', root='null', status='0x1', from='0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea', to='0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea', logs=[], logsBloom='0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000', revertReason='null', type='0x0', effectiveGasPrice='0x5d21dba00'}\nReceipt from klay_getTransactionReceipt :\nclass TransactionReceipt {\n    blockHash: 0xaff11b719196dc64d161fabce82d74f0dc91f8d6d9aa0bcbb721f9006d0029f4\n    blockNumber: 0x90e5932\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x13c68\n    humanReadable: null\n    key: 0x05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    nonce: 0x3e\n    senderTxHash: 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xefdaed1bdfdaa26b7f4512d2d3cf413735e3ed56d3510a7a9101d2cee1d0181c\n    transactionIndex: 0x1\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java AccountUpdateWithRoleBasedExample.java focus=95\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java AccountUpdateWithRoleBasedExample.java focus=97:99\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateWithRoleBasedExample.java\nTxType : ACCOUNT_UPDATE\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/keystore/keystoreV3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```java keystoreV3.java\npackage org.web3j.example.utils;\n\nimport java.io.InputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\nimport org.web3j.crypto.KaiaWelletUtils;\nimport org.web3j.crypto.KaiaCredentials;\nimport java.io.IOException;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\npublic class DecryptKeystoreV3Example implements keySample {\n\n    public static void run() throws Exception {\n        String password = \"Ilovekaia\";\n\n        String[] keyFiles = { \"/Legacy_V3.json\", \"/Public_V3.json\" };\n        for (String keyFile : keyFiles) {\n\n            String json = getResourceJSON(keyFile);\n\n            // Convert keystore to list of KaiaCredentials\n            KaiaCredentials credentials = KaiaWelletUtils.loadJsonKaiaCredentials(password, json);\n\n            System.out.println(\"Load KaiaCredentials from keystore file: \" + keyFile);\n            String address = credentials.getAddress();\n            String privateKey = credentials.getEcKeyPair().getPrivateKey().toString(16);\n            System.out.println(\"\\tKaiaCredential : \" + \"Address: \" + address + \", Private Key: 0x\" + privateKey);\n        }\n\n    }\n\n    static String getResourceJSON(String resourcePath) throws IOException {\n        InputStream inputStream = DecryptKeystoreV3Example.class.getResourceAsStream(resourcePath);\n        if (inputStream == null) {\n            throw new IllegalArgumentException(\"resource not found: \" + resourcePath);\n        }\n\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n            // String value for keystore JSON\n            return reader.lines().collect(Collectors.joining(System.lineSeparator()));\n\n        } catch (IOException e) {\n            throw e;\n        }\n    }\n}\n```\n---\n\n```zsh output\n❯ java keystoreV3.java\nLoad KaiaCredentials from keystore file: /Legacy_V3.json\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\nLoad KaiaCredentials from keystore file: /Public_V3.json\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n```\n\n</CH.Code>\n\n---\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java keystoreV3.java focus=3:13\n\n```\n---\nDefine the keystore **password**, this **password** is used for decrypting the keystores\n\n```java keystoreV3.java focus=18\n\n```\n---\nRead keystores from json files, for example we have a list of different accounts: **\"RoleBased_V4.json\"**, **\"Multi_V4.json\"** and **\"Public_V4.json\"**\n```java keystoreV3.java focus=20:23,36:50\n\n```\n---\nDecrypt the keystore with its **password**.\n\n```java keystoreV3.java focus=25:26\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```java keystoreV3.java focus=28:31\n\n```\n---\n\n```zsh output\nLoad KaiaCredentials from keystore file: /Legacy_V3.json\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\nLoad KaiaCredentials from keystore file: /Public_V3.json\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/keystore/keystoreV4. # V4 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V4**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```java keystoreV4.java\npackage org.web3j.example.utils;\n\nimport java.io.InputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.stream.Collectors;\nimport org.web3j.crypto.KaiaWelletUtils;\nimport org.web3j.crypto.KaiaCredentials;\nimport java.io.IOException;\nimport java.util.List;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\npublic class DecryptKeystoreV4Example implements keySample {\n\n    public static void run() throws Exception {\n        String password = \"Ilovekaia\";\n\n        String[] keyFiles = { \"/RoleBased_V4.json\", \"/Multi_V4.json\", \"/Public_V4.json\" };\n        for (String keyFile : keyFiles) {\n\n            String json = getResourceJSON(keyFile);\n\n            // Convert keystore to list of KaiaCredentials\n            List<List<KaiaCredentials>> credentialsLists = KaiaWelletUtils.loadJsonKaiaCredentialsFromV4(password,\n                    json);\n\n            System.out.println(\"Load KaiaCredentials from keystore file: \" + keyFile);\n            // Print KaiaCredentials\n            for (int i = 0; i < credentialsLists.size(); i++) {\n                List<KaiaCredentials> credentialsList = credentialsLists.get(i);\n\n                System.out.println(\"Array \" + (i + 1) + \":\");\n                for (KaiaCredentials credentials : credentialsList) {\n                    String address = credentials.getAddress();\n                    String privateKey = credentials.getEcKeyPair().getPrivateKey().toString(16);\n                    System.out\n                            .println(\"\\tKaiaCredential : \" + \"Address: \" + address + \", Private Key: 0x\" + privateKey);\n                }\n            }\n        }\n\n    }\n\n    static String getResourceJSON(String resourcePath) throws IOException {\n        InputStream inputStream = DecryptKeystoreV4Example.class.getResourceAsStream(resourcePath);\n        if (inputStream == null) {\n            throw new IllegalArgumentException(\"resource not found: \" + resourcePath);\n        }\n\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n            // String value for keystore JSON\n            return reader.lines().collect(Collectors.joining(System.lineSeparator()));\n\n        } catch (IOException e) {\n            throw e;\n        }\n    }\n}\n```\n---\n\n```zsh output\n❯ java keystoreV4.java\nLoad KaiaCredentials from keystore file: /RoleBased_V4.json\nArray 1:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\nArray 2:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\nArray 3:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\nLoad KaiaCredentials from keystore file: /Multi_V4.json\nArray 1:\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\nLoad KaiaCredentials from keystore file: /Public_V4.json\nArray 1:\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n```\n\n</CH.Code>\n\n---\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java keystoreV4.java focus=3:14\n\n```\n---\nDefine the keystore **password**, this **password** is used for decrypting the keystores\n\n```java keystoreV4.java focus=19\n\n```\n---\nRead keystores from json files, for example we have a list of different accounts: **\"RoleBased_V4.json\"**, **\"Multi_V4.json\"** and **\"Public_V4.json\"**\n```java keystoreV4.java focus=21:24,47:60\n\n```\n---\nDecrypte the keystore with its **password**.\n\n```java keystoreV4.java focus=27:28\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```java keystoreV4.java focus=30:42\n\n```\n---\n\n```zsh output\nLoad KaiaCredentials from keystore file: /RoleBased_V4.json\nArray 1:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\nArray 2:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\nArray 3:\n\tKaiaCredential : Address: 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\nLoad KaiaCredentials from keystore file: /Multi_V4.json\nArray 1:\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n\tKaiaCredential : Address: 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e, Private Key: 0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\nLoad KaiaCredentials from keystore file: /Public_V4.json\nArray 1:\n\tKaiaCredential : Address: 0xa2a8854b1802d8cd5de631e690817c253d6a9153, Private Key: 0xe4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignTxWithLegacyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithLegacyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials1.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        TxType.Type type = Type.VALUE_TRANSFER;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n        String blockNumber = \"latest\";\n        KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber).send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignTxWithLegacyExample.java\nTxHash :\n 0x957734684be8f79a21cef4de1842709b84c92e3920d656165ddb951981987b5a\nOriginal address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignTxWithLegacyExample.java focus=1:19\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignTxWithLegacyExample.java focus=30\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignTxWithLegacyExample.java focus=30\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithLegacyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials1.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        TxType.Type type = Type.VALUE_TRANSFER;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n        String blockNumber = \"latest\";\n        KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber).send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\nCreate a **credential** from private key\n\n```java SignTxWithLegacyExample.java focus=31\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java SignTxWithLegacyExample.java focus=33:34\n\n```\n\n---\n\nSet the **sender** address equal to the loaded credential's address\n\n```java SignTxWithLegacyExample.java focus=35\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java SignTxWithLegacyExample.java focus=36:37\n\n```\n\n---\n\nSet the **receiver** address equal to any valid address\n\n```java SignTxWithLegacyExample.java focus=38\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java SignTxWithLegacyExample.java focus=39:40\n\n```\n\n---\n\nSet the value to transfer\n\n```java SignTxWithLegacyExample.java focus=41\n\n```\n\n---\n\nSet transaction type as **VALUE_TRANSFER**\n\n```java SignTxWithLegacyExample.java focus=43\n\n```\n\n---\n\nCreate a raw transaction for value transfer\n\n```java SignTxWithLegacyExample.java focus=45:52\n\n```\n\n---\n\nSign the transaction\n\n```java SignTxWithLegacyExample.java focus=54\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java SignTxWithLegacyExample.java focus=55:57\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithLegacyExample.java\nTxHash :\n 0x957734684be8f79a21cef4de1842709b84c92e3920d656165ddb951981987b5a\n\n````\n\n</CH.Code>\n\n---\n\nRecover the sender address from signed transaction and compare it to the **from** address\n\n<CH.Code>\n```java SignTxWithLegacyExample.java focus=59:62\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithLegacyExample.java\nOriginal address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignTxWithLegacyExample.java focus=64\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignTxWithMultiSigExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithMultiSigExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3,\n                                keySample.MULTI_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                signedMessage = KlayTransactionEncoder.signMessage(signedMessage, chainId, credentials2);\n                signedMessage = KlayTransactionEncoder.signMessage(signedMessage, chainId, credentials3);\n\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignTxWithMultiSigExample.java\nTxHash :\n 0x957734684be8f79a21cef4de1842709b84c92e3920d656165ddb951981987b5a\nOriginal address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignTxWithMultiSigExample.java focus=1:19\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignTxWithMultiSigExample.java focus=30\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignTxWithMultiSigExample.java focus=30\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithMultiSigExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3,\n                                keySample.MULTI_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                signedMessage = KlayTransactionEncoder.signMessage(signedMessage, chainId, credentials2);\n                signedMessage = KlayTransactionEncoder.signMessage(signedMessage, chainId, credentials3);\n\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\nCreate 3 **multi-sig credentials** from theirs key pairs\n\n```java SignTxWithMultiSigExample.java focus=31:36\n\n```\n\n---\n\n**Gas price** and **gas limit** settings\n\n```java SignTxWithMultiSigExample.java focus=38:39\n\n```\n\n---\n\nSet the **sender** address equal to the loaded credential's address\n\n```java SignTxWithMultiSigExample.java focus=40\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java SignTxWithMultiSigExample.java focus=41:42\n\n```\n\n---\n\nSet the **receiver** address equal to any valid address\n\n```java SignTxWithMultiSigExample.java focus=43\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java SignTxWithMultiSigExample.java focus=44:45\n\n```\n\n---\n\nSet the **value** to transfer\n\n```java SignTxWithMultiSigExample.java focus=46\n\n```\n\n---\n\nSet transaction type as **VALUE_TRANSFER**\n\n```java SignTxWithMultiSigExample.java focus=48\n\n```\n\n---\n\nCreate a raw transaction for value transfer\n\n```java SignTxWithMultiSigExample.java focus=50:57\n\n```\n\n---\n\nSign the transaction in order with **3 credentials**\n\n```java SignTxWithMultiSigExample.java focus=59:61\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java SignTxWithMultiSigExample.java focus=63:65\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithMultiSigExample.java\nTxHash :\n 0x957734684be8f79a21cef4de1842709b84c92e3920d656165ddb951981987b5a\n\n````\n\n</CH.Code>\n\n---\n\nRecover the **sender address** from signed transaction and compare it to the **from** address\n\n<CH.Code>\n```java SignTxWithMultiSigExample.java focus=67:71\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithMultiSigExample.java\nOriginal address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignTxWithMultiSigExample.java focus=73\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignTxWithPubkeyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithPubkeyExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.PUBLIC_KEY_privkey,\n                                keySample.PUBLIC_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignTxWithPubkeyExample.java\nTxHash :\n 0xcb3c9869bdb600e6fdb74fe06a727900f8beb3126b5a8e899e29d5fbba7873f6\nOriginal address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignTxWithPubkeyExample.java focus=1:19\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignTxWithPubkeyExample.java focus=30\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignTxWithPubkeyExample.java focus=30\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithPubkeyExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.PUBLIC_KEY_privkey,\n                                keySample.PUBLIC_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\nCreate a **credential** from a key pair which is a **public** key type\n\n```java SignTxWithPubkeyExample.java focus=31:32\n\n```\n\n---\n\n**Gas price** and **gas limit** settings\n\n```java SignTxWithPubkeyExample.java focus=34:35\n\n```\n\n---\n\nSet the **sender** address equal to the loaded credential's address\n\n```java SignTxWithPubkeyExample.java focus=36\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java SignTxWithPubkeyExample.java focus=37:38\n\n```\n\n---\n\nSet the **receiver** address equal to any valid address\n\n```java SignTxWithPubkeyExample.java focus=39\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java SignTxWithPubkeyExample.java focus=40:41\n\n```\n\n---\n\nSet the value to transfer\n\n```java SignTxWithPubkeyExample.java focus=42\n\n```\n\n---\n\nSet transaction type as **VALUE_TRANSFER**\n\n```java SignTxWithPubkeyExample.java focus=44\n\n```\n\n---\n\nCreate a raw transaction for value transfer\n\n```java SignTxWithPubkeyExample.java focus=46:53\n\n```\n\n---\n\nSign the transaction\n\n```java SignTxWithPubkeyExample.java focus=55\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```java SignTxWithPubkeyExample.java focus=56:58\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithPubkeyExample.java\nTxHash :\n 0xcb3c9869bdb600e6fdb74fe06a727900f8beb3126b5a8e899e29d5fbba7873f6\n````\n\n</CH.Code>\n\n---\n\nRecover the sender address from signed transaction and compare it to the **from** address\n\n<CH.Code>\n```java SignTxWithPubkeyExample.java focus=60:64\n\n````\n\n\n---\n\n```zsh output\n❯ java SignTxWithPubkeyExample.java\nOriginal address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignTxWithPubkeyExample.java focus=66\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignTxWithRoleBasedExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithRoleBasedExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey,\n                                keySample.ROLEBASED_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignTxWithRoleBasedExample.java\nTxHash :\n 0x75b1fbfcaeb0c3fa7a0738e628a010b85b6514394ed08d25df4b055aef7d0e58\nOriginal address : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\nResult address : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignTxWithRoleBasedExample.java focus=1:19\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignTxWithRoleBasedExample.java focus=30\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignTxWithRoleBasedExample.java focus=30\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromTransactionResponse;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\n\n/**\n *\n */\npublic class SignTxWithRoleBasedExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey,\n                                keySample.ROLEBASED_KEY_address);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials1.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                TxType.Type type = Type.VALUE_TRANSFER;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials1);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\n                String blockNumber = \"latest\";\n                KlayRecoverFromTransactionResponse response = web3j.klayRecoverFromTransaction(hexValue, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address : \" + response.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\nCreate a **credential** from private key which is the **transaction** role key\n\n```java SignTxWithRoleBasedExample.java focus=31:32\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java SignTxWithRoleBasedExample.java focus=34:35\n\n```\n\n---\n\nSet the **sender** address equal to the loaded credential's address\n\n```java SignTxWithRoleBasedExample.java focus=36\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java SignTxWithRoleBasedExample.java focus=37:38\n\n```\n\n---\n\nSet the **receiver** address equal to any valid address\n\n```java SignTxWithRoleBasedExample.java focus=39\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java SignTxWithRoleBasedExample.java focus=40:41\n\n```\n\n---\n\nSet the value to transfer\n\n```java SignTxWithRoleBasedExample.java focus=42\n\n```\n\n---\n\nSet transaction type as **VALUE_TRANSFER**\n\n```java SignTxWithRoleBasedExample.java focus=44\n\n```\n\n---\n\nCreate a raw transaction for value transfer\n\n```java SignTxWithRoleBasedExample.java focus=46:53\n\n```\n\n---\n\nSign the transaction\n\n```java SignTxWithRoleBasedExample.java focus=55\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n```java SignTxWithRoleBasedExample.java focus=56:58\n\n```\n\n---\n\nRecover the sender address from signed transaction and compare it to the **from** address\n\n```java SignTxWithRoleBasedExample.java focus=60:64\n\n```\n\n---\n\nShut down the Web3j instance\n\n```java SignTxWithRoleBasedExample.java focus=66\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignMsgWithLegacyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithLegacyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        String from = credentials1.getAddress();\n        String message = \"0xdeadbeef\";\n        String blockNumber = \"latest\";\n\n        SignatureData signature = KlaySignatureData.signPrefixedMessage(message, credentials1);\n        String result = KlaySignatureData.getSignatureString(signature);\n\n        KlayRecoverFromMessageResponse response = web3j.klayRecoverFromMessage(from, message, result, blockNumber)\n                .send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignMsgWithLegacyExample.java\nOriginal address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignMsgWithLegacyExample.java focus=1:12\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignMsgWithLegacyExample.java focus=23\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignMsgWithLegacyExample.java focus=23\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithLegacyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        String from = credentials1.getAddress();\n        String message = \"0xdeadbeef\";\n        String blockNumber = \"latest\";\n\n        SignatureData signature = KlaySignatureData.signPrefixedMessage(message, credentials1);\n        String result = KlaySignatureData.getSignatureString(signature);\n\n        KlayRecoverFromMessageResponse response = web3j.klayRecoverFromMessage(from, message, result, blockNumber)\n                .send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\nLoad a **credential** from private key and get its address\n\n```java SignMsgWithLegacyExample.java focus=24:25\n\n```\n\n---\n\nDefine any message to sign\n\n```java SignMsgWithLegacyExample.java focus=26\n\n```\n\n---\n\nSet the **block number** to be the latest block in the kaia network\n\n```java SignMsgWithLegacyExample.java focus=27\n\n```\n\n---\n\nSign the **message** and convert the signature to string\n\n```java SignMsgWithLegacyExample.java focus=29:30\n\n```\n\n---\n\nRecover the **address** and compare it to the original address\n\n<CH.Code>\n```java SignMsgWithLegacyExample.java focus=32:35\n\n````\n\n\n---\n\n```zsh output\n❯ java SignMsgWithLegacyExample.java\nOriginal address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignMsgWithLegacyExample.java focus=37\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignMsgWithMultiSigExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithMultiSigExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3,\n                                keySample.MULTI_KEY_address);\n                String from = credentials1.getAddress();\n                String message = \"0xdeadbeef\";\n                String blockNumber = \"latest\";\n\n                SignatureData signature1 = KlaySignatureData.signPrefixedMessage(message, credentials1);\n                String result1 = KlaySignatureData.getSignatureString(signature1);\n\n                SignatureData signature2 = KlaySignatureData.signPrefixedMessage(message, credentials2);\n                String result2 = KlaySignatureData.getSignatureString(signature2);\n\n                SignatureData signature3 = KlaySignatureData.signPrefixedMessage(message, credentials3);\n                String result3 = KlaySignatureData.getSignatureString(signature3);\n\n                KlayRecoverFromMessageResponse response1 = web3j\n                                .klayRecoverFromMessage(from, message, result1, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response2 = web3j\n                                .klayRecoverFromMessage(from, message, result2, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response3 = web3j\n                                .klayRecoverFromMessage(from, message, result3, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address for key 1 : \" + response1.getResult());\n                System.out.println(\"Result address for key 2 : \" + response2.getResult());\n                System.out.println(\"Result address for key 3 : \" + response3.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignMsgWithMultiSigExample.java\nOriginal address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address for key 1 : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address for key 2 : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address for key 3 : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignMsgWithMultiSigExample.java focus=1:12\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignMsgWithMultiSigExample.java focus=23\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignMsgWithMultiSigExample.java focus=23\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithMultiSigExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.MULTI_KEY_privkey1,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.MULTI_KEY_privkey2,\n                                keySample.MULTI_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.MULTI_KEY_privkey3,\n                                keySample.MULTI_KEY_address);\n                String from = credentials1.getAddress();\n                String message = \"0xdeadbeef\";\n                String blockNumber = \"latest\";\n\n                SignatureData signature1 = KlaySignatureData.signPrefixedMessage(message, credentials1);\n                String result1 = KlaySignatureData.getSignatureString(signature1);\n\n                SignatureData signature2 = KlaySignatureData.signPrefixedMessage(message, credentials2);\n                String result2 = KlaySignatureData.getSignatureString(signature2);\n\n                SignatureData signature3 = KlaySignatureData.signPrefixedMessage(message, credentials3);\n                String result3 = KlaySignatureData.getSignatureString(signature3);\n\n                KlayRecoverFromMessageResponse response1 = web3j\n                                .klayRecoverFromMessage(from, message, result1, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response2 = web3j\n                                .klayRecoverFromMessage(from, message, result2, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response3 = web3j\n                                .klayRecoverFromMessage(from, message, result3, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address for key 1 : \" + response1.getResult());\n                System.out.println(\"Result address for key 2 : \" + response2.getResult());\n                System.out.println(\"Result address for key 3 : \" + response3.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\nLoad 3 **multi-sig credentials** from private keys\n\n```java SignMsgWithMultiSigExample.java focus=24:29\n\n```\n\n---\n\nGet the **address** of **credentials1**. This address will be used to verify the recovered address\n\n```java SignMsgWithMultiSigExample.java focus=30\n\n```\n\n---\n\nDefine any message to sign\n\n```java SignMsgWithMultiSigExample.java focus=31\n\n```\n\n---\n\nSet the **block number** to be the latest block in the kaia network\n\n```java SignMsgWithMultiSigExample.java focus=32\n\n```\n\n---\n\nSign the **message** with all 3 multi-sig credentials in order and get the signature outputs as string\n\n```java SignMsgWithMultiSigExample.java focus=34:41\n\n```\n\n---\n\nRecover the **addresses** from 3 message responses and compare them to the original **from** address\n\n<CH.Code>\n```java SignMsgWithMultiSigExample.java focus=43:57\n\n````\n\n\n---\n\n```zsh output\n❯ java SignMsgWithMultiSigExample.java\nOriginal address : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address for key 1 : 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\nResult address for key 2 : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nResult address for key 3 : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignMsgWithMultiSigExample.java focus=37\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignMsgWithPubkeyExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithPubkeyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.PUBLIC_KEY_privkey,\n                keySample.PUBLIC_KEY_address);\n        String from = credentials1.getAddress();\n        String message = \"0xdeadbeef\";\n        String blockNumber = \"latest\";\n\n        SignatureData signature = KlaySignatureData.signPrefixedMessage(message, credentials1);\n        String result = KlaySignatureData.getSignatureString(signature);\n\n        KlayRecoverFromMessageResponse response = web3j.klayRecoverFromMessage(from, message, result, blockNumber)\n                .send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignMsgWithPubkeyExample.java\nOriginal address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignMsgWithPubkeyExample.java focus=1:12\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignMsgWithPubkeyExample.java focus=23\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignMsgWithPubkeyExample.java focus=23\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithPubkeyExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials1 = KlayCredentials.create(keySample.PUBLIC_KEY_privkey,\n                keySample.PUBLIC_KEY_address);\n        String from = credentials1.getAddress();\n        String message = \"0xdeadbeef\";\n        String blockNumber = \"latest\";\n\n        SignatureData signature = KlaySignatureData.signPrefixedMessage(message, credentials1);\n        String result = KlaySignatureData.getSignatureString(signature);\n\n        KlayRecoverFromMessageResponse response = web3j.klayRecoverFromMessage(from, message, result, blockNumber)\n                .send();\n        System.out.println(\"Original address : \" + from);\n        System.out.println(\"Result address : \" + response.getResult());\n\n        web3j.shutdown();\n\n    }\n\n}\n```\n\n---\n\nLoad a **credential** from the **public key's** key pair and get its address\n\n```java SignMsgWithPubkeyExample.java focus=24:26\n\n```\n\n---\n\nDefine any message to sign\n\n```java SignMsgWithPubkeyExample.java focus=27\n\n```\n\n---\n\nSet the **block number** to be the latest block in the kaia network\n\n```java SignMsgWithPubkeyExample.java focus=28\n\n```\n\n---\n\nSign the **message** with using `KlaySignatureData.signPrefixedMessage`\n\n```java SignMsgWithPubkeyExample.java focus=30:31\n\n```\n\n---\n\nRecover the **address** and compare it to the original address\n\n<CH.Code>\n```java SignMsgWithPubkeyExample.java focus=33:36\n\n````\n\n\n---\n\n```zsh output\n❯ java SignMsgWithPubkeyExample.java\nOriginal address : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignMsgWithPubkeyExample.java focus=38\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SignMsgWithRoleBasedExample.java\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithRoleBasedExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey,\n                                keySample.ROLEBASED_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.ROLEBASED_KEY_updatekey,\n                                keySample.ROLEBASED_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.ROLEBASED_KEY_feepayer,\n                                keySample.ROLEBASED_KEY_address);\n                String from = credentials1.getAddress();\n                String message = \"0xdeadbeef\";\n                String blockNumber = \"latest\";\n\n                SignatureData signature1 = KlaySignatureData.signPrefixedMessage(message, credentials1);\n                String result1 = KlaySignatureData.getSignatureString(signature1);\n\n                SignatureData signature2 = KlaySignatureData.signPrefixedMessage(message, credentials2);\n                String result2 = KlaySignatureData.getSignatureString(signature2);\n\n                SignatureData signature3 = KlaySignatureData.signPrefixedMessage(message, credentials3);\n                String result3 = KlaySignatureData.getSignatureString(signature3);\n\n                KlayRecoverFromMessageResponse response1 = web3j\n                                .klayRecoverFromMessage(from, message, result1, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response2 = web3j\n                                .klayRecoverFromMessage(from, message, result2, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response3 = web3j\n                                .klayRecoverFromMessage(from, message, result3, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address for transaction key : \" + response1.getResult());\n                System.out.println(\"Result address for update key : \" + response2.getResult());\n                System.out.println(\"Result address for feepayer key : \" + response3.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SignMsgWithRoleBasedExample.java\nOriginal address : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\nResult address for transaction key : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address for update key : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\nResult address for feepayer key : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SignMsgWithRoleBasedExample.java focus=1:12\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java SignMsgWithRoleBasedExample.java focus=23\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java SignMsgWithRoleBasedExample.java focus=23\npackage org.web3j.example.accountKey;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlaySignatureData;\nimport org.web3j.crypto.Sign.SignatureData;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.kaia.core.method.response.KlayRecoverFromMessageResponse;\n\n/**\n *\n */\npublic class SignMsgWithRoleBasedExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials1 = KlayCredentials.create(keySample.ROLEBASED_KEY_transactionkey,\n                                keySample.ROLEBASED_KEY_address);\n                KlayCredentials credentials2 = KlayCredentials.create(keySample.ROLEBASED_KEY_updatekey,\n                                keySample.ROLEBASED_KEY_address);\n                KlayCredentials credentials3 = KlayCredentials.create(keySample.ROLEBASED_KEY_feepayer,\n                                keySample.ROLEBASED_KEY_address);\n                String from = credentials1.getAddress();\n                String message = \"0xdeadbeef\";\n                String blockNumber = \"latest\";\n\n                SignatureData signature1 = KlaySignatureData.signPrefixedMessage(message, credentials1);\n                String result1 = KlaySignatureData.getSignatureString(signature1);\n\n                SignatureData signature2 = KlaySignatureData.signPrefixedMessage(message, credentials2);\n                String result2 = KlaySignatureData.getSignatureString(signature2);\n\n                SignatureData signature3 = KlaySignatureData.signPrefixedMessage(message, credentials3);\n                String result3 = KlaySignatureData.getSignatureString(signature3);\n\n                KlayRecoverFromMessageResponse response1 = web3j\n                                .klayRecoverFromMessage(from, message, result1, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response2 = web3j\n                                .klayRecoverFromMessage(from, message, result2, blockNumber)\n                                .send();\n\n                KlayRecoverFromMessageResponse response3 = web3j\n                                .klayRecoverFromMessage(from, message, result3, blockNumber)\n                                .send();\n                System.out.println(\"Original address : \" + from);\n                System.out.println(\"Result address for transaction key : \" + response1.getResult());\n                System.out.println(\"Result address for update key : \" + response2.getResult());\n                System.out.println(\"Result address for feepayer key : \" + response3.getResult());\n\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\nLoad different **role-based credentials** from theirs key pairs\n\n```java SignMsgWithRoleBasedExample.java focus=24:29\n\n```\n\n---\n\nGet the first credential **address**\n\n```java SignMsgWithRoleBasedExample.java focus=30\n\n```\n\n---\n\nDefine any message to sign\n\n```java SignMsgWithRoleBasedExample.java focus=31\n\n```\n\n---\n\nSet the **block number** to be the latest block in the kaia network\n\n```java SignMsgWithRoleBasedExample.java focus=32\n\n```\n\n---\n\nSign the **message** with all 3 role-based credentials in order and get the signature outputs as string\n\n```java SignMsgWithRoleBasedExample.java focus=34:41\n\n```\n\n---\n\nRecover the **addresses** from 3 message responses and compare them to the original **from** address\n\n<CH.Code>\n```java SignMsgWithRoleBasedExample.java focus=43:57\n\n````\n\n\n---\n\n```zsh output\n❯ java SignMsgWithRoleBasedExample.java\nOriginal address : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\nResult address for transaction key : 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\nResult address for update key : 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\nResult address for feepayer key : 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j instance\n\n```java SignMsgWithRoleBasedExample.java focus=59\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```java AccountUpdateExample.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class AccountUpdateExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run(KlayCredentials credentials) throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials new_credentials = KlayCredentials.create(PUBLIC_KEY_privkey, PUBLIC_KEY_address);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n\n        BigInteger newPubkey = new_credentials.getEcKeyPair().getPublicKey();\n\n        AccountKeyPublic accountkey = AccountKeyPublic.create(newPubkey);\n\n        TxType.Type type = Type.ACCOUNT_UPDATE;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                from,\n                accountkey);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n    }\n\n}\n\n\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateExample.java\nTxHash :\n 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xbc9def91ea0b147a9a587ec767a9442085699cfc19508fa1fe1de917d6558154\n    blockNumber: 0x8dea85e\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xa028\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bc\n    senderTxHash: 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\n    transactionIndex: 0x0\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\nTxType : ACCOUNT_UPDATE\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`)\n\n```java AccountUpdateExample.java focus=1:21\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java AccountUpdateExample.java focus=33\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```java AccountUpdateExample.java focus=33\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class AccountUpdateExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run(KlayCredentials credentials) throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials new_credentials = KlayCredentials.create(PUBLIC_KEY_privkey, PUBLIC_KEY_address);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n\n        BigInteger newPubkey = new_credentials.getEcKeyPair().getPublicKey();\n\n        AccountKeyPublic accountkey = AccountKeyPublic.create(newPubkey);\n\n        TxType.Type type = Type.ACCOUNT_UPDATE;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                from,\n                accountkey);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeAccountUpdate rawTransaction = TxTypeAccountUpdate.decodeFromRawTransaction(signedMessage);\n\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n    }\n\n}\n\n```\n\n---\n\nCreating new credentials using PUBLIC_KEY_privkey and PUBLIC_KEY_address\n\n```java AccountUpdateExample.java focus=34\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java AccountUpdateExample.java focus=36:37\n\n```\n\n---\n\nGet **chain ID** from the network\n\n```java AccountUpdateExample.java focus=39:40\n\n```\n\n---\n\nGet the **nonce** for the sender's address\n\n```java AccountUpdateExample.java focus=41:42\n\n```\n\n---\n\nGenerate a **new account key** for account update\n\n```java AccountUpdateExample.java focus=44:46\n\n```\n\n---\n\nCreate a **raw transaction** for account update\n\n```java AccountUpdateExample.java focus=50:56\n\n```\n\n---\n\nSign the transaction\n\n```java AccountUpdateExample.java focus=58\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n\n```java AccountUpdateExample.java focus=59:62\n\n```\n\n---\n\n```zsh output\n❯ java AccountUpdateExample.java\nTxHash :\n 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\n\n```\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n```java AccountUpdateExample.java focus=64:73\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xbc9def91ea0b147a9a587ec767a9442085699cfc19508fa1fe1de917d6558154\n    blockNumber: 0x8dea85e\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xa028\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bc\n    senderTxHash: 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x3518b0ba53160e39741d151fef3813230ea8793e12499bc21a08bd8b75adab1c\n    transactionIndex: 0x0\n    type: TxTypeAccountUpdate\n    typeInt: 32\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java AccountUpdateExample.java focus=74\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java AccountUpdateExample.java focus=76:78\n\n````\n\n\n---\n\n```zsh output\n❯ java AccountUpdateExample.java\nTxType : ACCOUNT_UPDATE\n\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java cancelTransactionExample.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeCancel;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class CancelExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = keySample.LEGACY_KEY_address;\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                TxType.Type type = Type.CANCEL;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeCancel rawTransaction = TxTypeCancel.decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java cancelTransactionExample.java\nTxHash :\n 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x05402b8b900d619380a723f417ec56de8843e92078f7160c13ede20f98cfd8a5\n    blockNumber: 0x8dea897\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bd\n    senderTxHash: 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\n    transactionIndex: 0x1\n    type: TxTypeCancel\n    typeInt: 56\n    value: null\n}\nTxType : CANCEL\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java cancelTransactionExample.java focus=1:20\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java cancelTransactionExample.java focus=32\n\n```\n\n---\n\nCreating new credentials using **LEGACY_KEY_privkey**\n\n```java cancelTransactionExample.java focus=33\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java cancelTransactionExample.java focus=35:36\n\n```\n\n---\n\nSet the sender's **from** address\n\n```java cancelTransactionExample.java focus=37\n\n```\n\n---\n\nGet the **chain ID** from the network\n\n```java cancelTransactionExample.java focus=38:39\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java cancelTransactionExample.java focus=40:41\n\n```\n\n---\n\nSet the transaction type to **CANCEL**\n\n```java cancelTransactionExample.java focus=43\n\n```\n\n---\n\nCreate a raw transaction for canceling **pending transaction**\n\n```java cancelTransactionExample.java focus=45:50\n\n```\n\n---\n\nSign the raw transaction with pre-defined **credentials**\n\n```java cancelTransactionExample.java focus=52\n\n```\n\n---\n\nSend the raw transaction to the blockchain. It will return the transaction hash\n\n<CH.Code>\n\n```java cancelTransactionExample.java focus=53:56\n\n```\n\n---\n\n```zsh output\n❯ java cancelTransactionExample.java\nTxHash :\n 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\n```\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n\n```java cancelTransactionExample.java focus=58:67\n\n```\n\n---\n\n```zsh output\n❯ java cancelTransactionExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x05402b8b900d619380a723f417ec56de8843e92078f7160c13ede20f98cfd8a5\n    blockNumber: 0x8dea897\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bd\n    senderTxHash: 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x3b739ef7094ff05af24322dc0d0547aecaaea0bad69c89129f159c7f03e38b3d\n    transactionIndex: 0x1\n    type: TxTypeCancel\n    typeInt: 56\n    value: null\n}\n```\n\n</CH.Code>\n\n---\n\nShutdown the web3j instance\n\n```java cancelTransactionExample.java focus=68\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n\n```java cancelTransactionExample.java focus=70:72\n\n```\n\n---\n\n```zsh output\n❯ java cancelTransactionExample.java\nTxType : CANCEL\n\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```java txTypeLegacyTransaction.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.Credentials;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.RawTransaction;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\npublic class LegacyExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials klaycredentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                Credentials credentials = Credentials.create(LEGACY_KEY_privkey);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                String to = \"0x000000000000000000000000000000000000dead\";\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                BigInteger value = BigInteger.valueOf(100);\n\n                // send legacy transaction with web3j-credentials\n                RawTransaction raw = KlayRawTransaction.createEtherTransaction(\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(transactionResponse.getResult());\n\n                // send legacy transaction with web3j-ext klaycredentials\n                raw = KlayRawTransaction.createEtherTransaction(\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value);\n\n                signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, klaycredentials);\n                hexValue = Numeric.toHexString(signedMessage);\n                transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java txTypeLegacyTransaction.java\n3.523785565427238379\n0xa02e0i90faef4323cb542312de9aac0\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java txTypeLegacyTransaction.java focus=1:20\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java txTypeLegacyTransaction.java focus=27\n\n```\n\n---\n\nCreating new credentials using the private key\n\n```java txTypeLegacyTransaction.java focus=28:29\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java txTypeLegacyTransaction.java focus=31:32\n\n```\n\n---\n\nSet the sender's **from** and receiver's **to** address\n\n```java txTypeLegacyTransaction.java focus=33,34\n\n```\n\n---\n\nGet the **chain ID** from the network\n\n```java txTypeLegacyTransaction.java focus=35:36\n\n```\n\n---\n\nGet the user's **nonce** from the network\n\n```java txTypeLegacyTransaction.java focus=37:38\n\n```\n\n---\n\nDefine the **value** to transfer from sender to receiver\n\n```java txTypeLegacyTransaction.java focus=39\n\n```\n\n---\n\nCreate a raw **transaction** using above params\n\n```java txTypeLegacyTransaction.java focus=42:47\n\n```\n\n---\n\nFor **web3j-credentials**, sign transaction with with `KlayTransactionEncoder.signMessage` and encode to Hex string using `Numeric.toHexString`.\n\n```java txTypeLegacyTransaction.java focus=49:50\n\n```\n\n---\n\nUsing `ethSendRawTransaction` method to send the signed transaction to the blockchain.\n\n```java txTypeLegacyTransaction.java focus=51:52\n\n```\n\n---\n\nFor **web3j-ext klaycredentials**, create raw transaction with `KlayRawTransaction.createEtherTransaction`, sign it with `KlayTransactionEncoder.signMessage` and encode to Hex string using `Numeric.toHexString`.\n\n```java txTypeLegacyTransaction.java focus=54:63\n\n```\n\n---\n\nUsing `ethSendRawTransaction` method to send the signed transaction to the blockchain.\n\n```java txTypeLegacyTransaction.java focus=64:66\n\n```\n\n---\n\nGet the receipt hash returned.\n\n<CH.Code>\n\n```java txTypeLegacyTransaction.java focus=67:76\n\n```\n\n---\n\n```zsh output\n❯ java txTypeLegacyTransaction.java\n0xa02e0i90faef4323cb542312de9aac0\n```\n\n</CH.Code>\n\n---\n\nFinally, Shut down web3j instance\n\n```java txTypeLegacyTransaction.java focus=77\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SmartContractDeployExample.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeSmartContractDeploy;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\n/**\n *\n */\npublic class SmartContractDeployExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        String data = \"0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\";\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = null;\n        byte[] payload = Numeric.hexStringToByteArray(data);\n\n        BigInteger value = BigInteger.ZERO;\n        BigInteger codeFormat = BigInteger.ZERO;\n        TxType.Type type = Type.SMART_CONTRACT_DEPLOY;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from,\n                payload,\n                codeFormat);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeSmartContractDeploy rawTransaction = TxTypeSmartContractDeploy.decodeFromRawTransaction(signedMessage);\n\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SmartContractDeployExample.java\n\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SmartContractDeployExample.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java SmartContractDeployExample.java focus=31\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java SmartContractDeployExample.java focus=31\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java SmartContractDeployExample.java focus=34:35\n\n```\n\n---\n\nGet the sender's **address** and current **nonce**\n\n```java SmartContractDeployExample.java focus=36:38\n\n```\n\n---\n\nDefine **contract bytecode**, you can get it from compiled solidity code\n\n```java SmartContractDeployExample.java focus=39\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java SmartContractDeployExample.java focus=40:41\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java SmartContractDeployExample.java focus=42:47\n\n```\n\n---\n\nCreate a raw transaction\n\n```java SmartContractDeployExample.java focus=49:58\n\n```\n\n---\n\nSign the raw transaction using `KlayRawTransaction.createTransaction`\n\n```java SmartContractDeployExample.java focus=60\n\n```\n\n---\n\nSend the transaction to kaia network\n\n<CH.Code>\n\n```java SmartContractDeployExample.java focus=61:64\n\n```\n\n---\n\n```zsh output\n❯ java SmartContractDeployExample.java\nTxHash :\n 0x8a06f66bf8edad14dc578732ba941f37553bb959a90f225ad6ffee99e0656e12\n```\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n```java SmartContractDeployExample.java focus=66:75\n\n````\n\n\n\n---\n\n```zsh output\n❯ java SmartContractDeployExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xe7e317718cc427fbf27f531b4cb7d7a3b8d9228b6b48d377aede5a74c02afb76\n    blockNumber: 0x8dea6d3\n    codeFormat: 0x0\n    contractAddress: 0x45e7905b4a12ed4b5caffb8a2c8e426056ccceb6\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x3af17\n    humanReadable: false\n    key: null\n    input: 0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bb\n    senderTxHash: 0x8a06f66bf8edad14dc578732ba941f37553bb959a90f225ad6ffee99e0656e12\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x8a06f66bf8edad14dc578732ba941f37553bb959a90f225ad6ffee99e0656e12\n    transactionIndex: 0x4\n    type: TxTypeSmartContractDeploy\n    typeInt: 40\n    value: 0x0\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j connection\n\n```java SmartContractDeployExample.java focus=76\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java SmartContractDeployExample.java focus=78:80\n\n````\n\n\n\n---\n\n```zsh output\n❯ java SmartContractDeployExample.java\nTxType : SMART_CONTRACT_DEPLOY\n\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java SmartContractExecutionExample.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeSmartContractExecution;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\n/**\n *\n */\npublic class SmartContractExecutionExample implements keySample {\n        /**\n         *\n         */\n\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                String data = \"0xcfae3217\";\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0xc58294ecde8fdb288fd845e7a43a56564b597bdb\";\n                byte[] payload = Numeric.hexStringToByteArray(data);\n\n                BigInteger value = BigInteger.ZERO;\n\n                TxType.Type type = Type.SMART_CONTRACT_EXECUTION;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from,\n                                payload);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeSmartContractExecution rawTransaction = TxTypeSmartContractExecution\n                                .decodeFromRawTransaction(signedMessage);\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java SmartContractExecutionExample.java\nTxHash :\n 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x8aee92edc199854646f999e094047da3a127d15473716c8dd40f42985a93be52\n    blockNumber: 0x8dea9cd\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5fe3\n    humanReadable: null\n    key: null\n    input: 0xcfae3217\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c2\n    senderTxHash: 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0xc58294ecde8fdb288fd845e7a43a56564b597bdb\n    transactionHash: 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\n    transactionIndex: 0x1\n    type: TxTypeSmartContractExecution\n    typeInt: 48\n    value: 0x0\n}\nTxType : SMART_CONTRACT_EXECUTION\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java SmartContractExecutionExample.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java SmartContractExecutionExample.java focus=32\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java SmartContractExecutionExample.java focus=33\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java SmartContractExecutionExample.java focus=35:36\n\n```\n\n---\n\nGet the sender's **address** and **nonce**\n\n```java SmartContractExecutionExample.java focus=37:39\n\n```\n\n---\n\nDefine the **contract data** that will be sent to blockchain\n\n```java SmartContractExecutionExample.java focus=40\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java SmartContractExecutionExample.java focus=41:42\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java SmartContractExecutionExample.java focus=43:48\n\n```\n\n---\n\nCreate a raw transaction\n\n```java SmartContractExecutionExample.java focus=50:58\n\n```\n\n---\n\nSign the raw transaction\n\n```java SmartContractExecutionExample.java focus=60\n\n```\n\n---\n\nSend the transaction to kaia network.\n\n<CH.Code>\n```java SmartContractExecutionExample.java focus=61:64\n\n````\n\n\n---\n\n```zsh output\n❯ java SmartContractExecutionExample.java\nTxHash :\n 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\n````\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n```java SmartContractExecutionExample.java focus=65:74\n\n````\n\n\n---\n\n```zsh output\n❯ java SmartContractExecutionExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x8aee92edc199854646f999e094047da3a127d15473716c8dd40f42985a93be52\n    blockNumber: 0x8dea9cd\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5fe3\n    humanReadable: null\n    key: null\n    input: 0xcfae3217\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c2\n    senderTxHash: 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0xc58294ecde8fdb288fd845e7a43a56564b597bdb\n    transactionHash: 0xb04136d9704df78a49e54e9f9ae61df4d39dc5c249aba84bc1a4e4cdc64b00eb\n    transactionIndex: 0x1\n    type: TxTypeSmartContractExecution\n    typeInt: 48\n    value: 0x0\n}\n````\n\n</CH.Code>\n\n---\n\nShutdown the Web3j instance\n\n```java SmartContractExecutionExample.java focus=75\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java SmartContractExecutionExample.java focus=77:79\n\n````\n\n\n---\n\n```zsh output\n❯ java SmartContractExecutionExample.java\nTxType : SMART_CONTRACT_EXECUTION\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java ValueTransferMemo.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeValueTransferMemo;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\n/**\n *\n */\npublic class ValueTransferMemoExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        String data = \"Kaia Web3j\";\n        byte[] payload = data.getBytes();\n\n        TxType.Type type = Type.VALUE_TRANSFER_MEMO;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from,\n                payload);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeValueTransferMemo rawTransaction = TxTypeValueTransferMemo.decodeFromRawTransaction(signedMessage);\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java ValueTransferMemo.java\noutput\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java ValueTransferMemo.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java ValueTransferMemo.java focus=32\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java ValueTransferMemo.java focus=33\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java ValueTransferMemo.java focus=35:36\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java ValueTransferMemo.java focus=37\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java ValueTransferMemo.java focus=38:39\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java ValueTransferMemo.java focus=40:48\n\n```\n\n---\n\nCreate a raw transaction object.\n\n```java ValueTransferMemo.java focus=50:58\n\n```\n\n---\n\nSign the raw transaction\n\n```java ValueTransferMemo.java focus=60\n\n```\n\n---\n\nSend the transaction to kaia network.\n\n <CH.Code>\n```java ValueTransferMemo.java focus=61:64\n\n````\n\n---\n\n```zsh output\n❯ java ValueTransferMemo.java\nTxHash :\n 0xacd91fd0ab27fddfe7e68f32eb7e87285ea3ad58f04bbb49fc30e20093930c30\n````\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n```java ValueTransferMemo.java focus=66:75\n\n````\n---\n\n```zsh output\n❯ java ValueTransferMemo.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xfe2bade86f8cf8fb894d3f1935b59aaa3022f3332437a9797d6877735cbcd4ad\n    blockNumber: 0x89285f8\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n\tat org.example.ToRun.run(ToRun.java:78)\n    gas: 0x66919e\n\tat org.example.Main.main(Main.java:10)\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x56b8\n    humanReadable: null\n    key: null\n    input: 0x4b6c6179746e20576562336a\n    logs: []\n    logsBloom: 0xn    nonce: 0x30b\n    senderTxHash: 0xacd91fd0ab27fddfe7e68f32eb7e87285ea3ad58f04bbb49fc30e20093930c30\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0x000000000000000000000000000000000000dead\n    transactionHash: 0xacd91fd0ab27fddfe7e68f32eb7e87285ea3ad58f04bbb49fc30e20093930c30\n    transactionIndex: 0x1\n    type: TxTypeValueTransferMemo\n    typeInt: 16\n    value: 0x64\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j connection\n\n```java ValueTransferMemo.java focus=76\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java ValueTransferMemo.java focus=78:79\n\n````\n\n\n---\n\n```zsh output\n❯ java ValueTransferMemo.java\nTxType: VALUE_TRANSFER_MEMO\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/basic-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```java txTypeValueTransferTransaction.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeValueTransfer;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\n/**\n *\n */\npublic class ValueTransferExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        TxType.Type type = Type.VALUE_TRANSFER;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from);\n\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeValueTransfer rawTransaction = TxTypeValueTransfer.decodeFromRawTransaction(signedMessage);\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.java\nTxHash :\n 0x0b9af696b2fdd08d26466c76a5fd8c80dfd30ca35d15f3cdf3e986275a111930\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xdc63be2bda24c16da08d69879d3223afaed92a03e3e4e8bf92bdd725d7f160fb\n    blockNumber: 0x8dea925\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3bf\n    senderTxHash: 0x0b9af696b2fdd08d26466c76a5fd8c80dfd30ca35d15f3cdf3e986275a111930\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0x000000000000000000000000000000000000dead\n    transactionHash: 0x0b9af696b2fdd08d26466c76a5fd8c80dfd30ca35d15f3cdf3e986275a111930\n    transactionIndex: 0x2\n    type: TxTypeValueTransfer\n    typeInt: 8\n    value: 0x64\n}\nTxType : VALUE_TRANSFER\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java txTypeValueTransferTransaction.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java txTypeValueTransferTransaction.java focus=31\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java txTypeValueTransferTransaction.java focus=32\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java txTypeValueTransferTransaction.java focus=34:35\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java txTypeValueTransferTransaction.java focus=36\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java txTypeValueTransferTransaction.java focus=37:38\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java txTypeValueTransferTransaction.java focus=39:44\n\n```\n\n---\n\nCreate a raw transaction object using above parameters\n\n```java txTypeValueTransferTransaction.java focus=46:53\n\n```\n\n---\n\nSign the raw transaction\n\n```java txTypeValueTransferTransaction.java focus=55\n\n```\n\n---\n\nSend the transaction to kaia network.\n\n<CH.Code>\n\n```java txTypeValueTransferTransaction.java focus=56:59\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\n0x78a87f014fd4f7a2fb606c3b133c1d3e8bf9b100e3b28f10b71ac440ec3f4da4\n```\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n\n```java txTypeValueTransferTransaction.java focus=61:70\n\n```\n\n---\n\n```zsh output\n❯ java txTypeValueTransferTransaction.java\nclass TransactionReceipt {\n    blockHash: 0x3532a49b7ee37f4ddec71210d8d5e79075092c33f7ed44cc3d1d9ba50cc50b94\n    blockNumber: 0x891424d\n    codeFormat: null\n    contractAddress: null\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x5208\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x309\n    senderTxHash: 0x78a87f014fd4f7a2fb606c3b133c1d3e8bf9b100e3b28f10b71ac440ec3f4da4\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0x000000000000000000000000000000000000dead\n    transactionHash: 0x78a87f014fd4f7a2fb606c3b133c1d3e8bf9b100e3b28f10b71ac440ec3f4da4\n    transactionIndex: 0x2\n    type: TxTypeValueTransfer\n    typeInt: 8\n    value: 0x64\n}\n```\n\n</CH.Code>\n\n---\n\nShut down the Web3j connection\n\n```java txTypeValueTransferTransaction.java focus=71\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java txTypeValueTransferTransaction.java focus=73:74\n\n````\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nTxType : VALUE_TRANSFER\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/account-update. # Account Update\n\n# Fee Delegation\n\n<CH.Spotlight>\n<CH.Code>\n\n```java FeeDelegatedAccountUpdateExample.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedAccountUpdate;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class FeeDelegatedAccountUpdateExample implements keySample {\n\n        public static void run(KlayCredentials credentials) throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials new_credentials = KlayCredentials.create(PUBLIC_KEY_privkey, PUBLIC_KEY_address);\n                KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n\n                BigInteger newPubkey = new_credentials.getEcKeyPair().getPublicKey();\n\n                AccountKeyPublic accountkey = AccountKeyPublic.create(newPubkey);\n\n                TxType.Type type = Type.FEE_DELEGATED_ACCOUNT_UPDATE;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                from,\n                                accountkey);\n\n                // Sign as sender\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n                // Sign same message as Fee payer\n                signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeFeeDelegatedAccountUpdate rawTransaction = TxTypeFeeDelegatedAccountUpdate\n                                .decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedAccountUpdateExample.java\nTxHash :\n 0xdc81bb3ae59a0fdbb9a6616aeaf1b05f7252681edcf71b121ebc0d43d7dde024\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x350799aaabe33fa8e1ee69a680aca014deb7b2d75562a3181342aafd5a477905\n    blockNumber: 0x8def123\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0x2d805d33598b288d17fea47d2610a0ae16d9ad8cdd21d348366c51b8b3fa4d4f\n        S: 0x99ac39df17853a3d267040c2701616be38bc3c19d328c12bb74cf2f53268646\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xc738\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    nonce: 0x3c7\n    senderTxHash: 0xae469dc5bd4ae1eddcabebc9a15d523025aaeab4c95fbdf94e744f9965222bb0\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xdc81bb3ae59a0fdbb9a6616aeaf1b05f7252681edcf71b121ebc0d43d7dde024\n    transactionIndex: 0x3\n    type: TxTypeFeeDelegatedAccountUpdate\n    typeInt: 33\n    value: null\n}\nTxType : FEE_DELEGATED_ACCOUNT_UPDATE\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java FeeDelegatedAccountUpdateExample.java focus=1:21\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java FeeDelegatedAccountUpdateExample.java focus=30\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java FeeDelegatedAccountUpdateExample.java focus=31:32\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java FeeDelegatedAccountUpdateExample.java focus=33:34\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java FeeDelegatedAccountUpdateExample.java focus=35\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java FeeDelegatedAccountUpdateExample.java focus=36:37\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java FeeDelegatedAccountUpdateExample.java focus=38:39\n\n```\n\n---\n\nGenerating a new account key for account update\n\n```java FeeDelegatedAccountUpdateExample.java focus=41\n\n```\n\n---\n\nCreating a raw transaction for account update\n\n```java FeeDelegatedAccountUpdateExample.java focus=47:53\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java FeeDelegatedAccountUpdateExample.java focus=55:56\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java FeeDelegatedAccountUpdateExample.java focus=58:59\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n```java FeeDelegatedAccountUpdateExample.java focus=61:64\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedAccountUpdateExample.java\nTxHash :\n 0xdc81bb3ae59a0fdbb9a6616aeaf1b05f7252681edcf71b121ebc0d43d7dde024\nreceipt :\n````\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n```java FeeDelegatedAccountUpdateExample.java focus=65:74\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedAccountUpdateExample.java\nclass TransactionReceipt {\n    blockHash: 0x350799aaabe33fa8e1ee69a680aca014deb7b2d75562a3181342aafd5a477905\n    blockNumber: 0x8def123\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0x2d805d33598b288d17fea47d2610a0ae16d9ad8cdd21d348366c51b8b3fa4d4f\n        S: 0x99ac39df17853a3d267040c2701616be38bc3c19d328c12bb74cf2f53268646\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0xc738\n    humanReadable: null\n    key: 0x02a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c7\n    senderTxHash: 0xae469dc5bd4ae1eddcabebc9a15d523025aaeab4c95fbdf94e744f9965222bb0\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xdc81bb3ae59a0fdbb9a6616aeaf1b05f7252681edcf71b121ebc0d43d7dde024\n    transactionIndex: 0x3\n    type: TxTypeFeeDelegatedAccountUpdate\n    typeInt: 33\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java FeeDelegatedAccountUpdateExample.java focus=75\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java FeeDelegatedAccountUpdateExample.java focus=77:80\n\n````\n\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedAccountUpdateExample.java\nTxType : FEE_DELEGATED_ACCOUNT_UPDATE\n\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java FeeDelegatedCancel.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedCancel;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class FeeDelegatedCancelExample implements keySample {\n    /**\n     *\n     */\n\n    public static void run() throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n\n        TxType.Type type = Type.FEE_DELEGATED_CANCEL;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                from);\n\n        // Sign as sender\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n        // Sign same message as Fee payer\n        signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeFeeDelegatedCancel rawTransaction = TxTypeFeeDelegatedCancel.decodeFromRawTransaction(signedMessage);\n\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedCancel.java\nTxHash :\n 0x2e9abcc9d23fc32e3a2afb55172e5925b9543b445f1a8fbdb8b7aa50d9bad812\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xa1985b9c6a7cd8d58ef511915a677e33c5d6029d95f9223fec3febed65500051\n    blockNumber: 0x8def165\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0xed71b68bca8a44a6de168c51d312ea4815d742f779f2a7aaa66f9102a5d03d54\n        S: 0x16d7e9f7dc05d2a510cfb34a967ea6cb025b793973d116fce51ed83922a8812b\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x7918\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c8\n    senderTxHash: 0x8800b74af76967feb1229a827416896b1856be65d4178d58b57e247f6b4238c2\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x2e9abcc9d23fc32e3a2afb55172e5925b9543b445f1a8fbdb8b7aa50d9bad812\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedCancel\n    typeInt: 57\n    value: null\n}\nTxType : FEE_DELEGATED_CANCEL\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java FeeDelegatedCancel.java focus=1:20\n\n```\n\n---\n\nCreate a Web3j instance with the specified BAOBAB_URL\n\n```java FeeDelegatedCancel.java focus=32\n\n```\n\n---\n\nLoad credentials for **sender** and **fee payer**\n\n```java FeeDelegatedCancel.java focus=33:34\n\n```\n\n---\n\nGas **price** and **gas limit** settings\n\n```java FeeDelegatedCancel.java focus=36:37\n\n```\n\n---\n\nSet the sender's **from** address using `credentials.getAddress`\n\n```java FeeDelegatedCancel.java focus=38\n\n```\n\n---\n\nGet the **chain ID** from the network\n\n```java FeeDelegatedCancel.java focus=39:40\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java FeeDelegatedCancel.java focus=41:42\n\n```\n\n---\n\nSet the transaction type to **FEE_DELEGATED_CANCEL**\n\n```java FeeDelegatedCancel.java focus=44\n\n```\n\n---\n\nCreate a raw transaction for canceling **pending transaction**\n\n```java FeeDelegatedCancel.java focus=46:51\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java FeeDelegatedCancel.java focus=53:54\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java FeeDelegatedCancel.java focus=56:57\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n\n```java FeeDelegatedCancel.java focus=59:62\n\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedCancel.java\nTxHash :\n 0x2e9abcc9d23fc32e3a2afb55172e5925b9543b445f1a8fbdb8b7aa50d9bad812\n```\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n```java FeeDelegatedCancel.java focus=64:73\n\n````\n---\n\n```zsh output\n❯ java FeeDelegatedCancel.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xa1985b9c6a7cd8d58ef511915a677e33c5d6029d95f9223fec3febed65500051\n    blockNumber: 0x8def165\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0xed71b68bca8a44a6de168c51d312ea4815d742f779f2a7aaa66f9102a5d03d54\n        S: 0x16d7e9f7dc05d2a510cfb34a967ea6cb025b793973d116fce51ed83922a8812b\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x7918\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c8\n    senderTxHash: 0x8800b74af76967feb1229a827416896b1856be65d4178d58b57e247f6b4238c2\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x2e9abcc9d23fc32e3a2afb55172e5925b9543b445f1a8fbdb8b7aa50d9bad812\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedCancel\n    typeInt: 57\n    value: null\n}\n````\n\n</CH.Code>\n\n---\n\nShutdown the web3j instance\n\n```java FeeDelegatedCancel.java focus=74\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java FeeDelegatedCancel.java focus=76:78\n\n````\n---\n\n```zsh output\n❯ java FeeDelegatedCancel.java\nTxType : FEE_DELEGATED_CANCEL\n\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java FeeDelegatedSmartContractDeployExample.java\npackage org.web3j.example.transactions;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeSmartContractDeploy;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class FeeDelegatedSmartContractDeployExample implements keySample {\n    /**\n     *\n     */\n    public static void run() throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        String data = \"0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\";\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = null;\n        byte[] payload = Numeric.hexStringToByteArray(data);\n\n        BigInteger value = BigInteger.ZERO;\n        BigInteger codeFormat = BigInteger.ZERO;\n\n        TxType.Type type = Type.FEE_DELEGATED_SMART_CONTRACT_DEPLOY;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from,\n                payload,\n                codeFormat);\n\n        // Sign as sender\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n        // Sign same message as Fee payer\n        signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeSmartContractDeploy rawTransaction = TxTypeSmartContractDeploy.decodeFromRawTransaction(signedMessage);\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractDeployExample.java\n\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java FeeDelegatedSmartContractDeployExample.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java FeeDelegatedSmartContractDeployExample.java focus=31\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java FeeDelegatedSmartContractDeployExample.java focus=32:33\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java FeeDelegatedSmartContractDeployExample.java focus=35:36\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java FeeDelegatedSmartContractDeployExample.java focus=37\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java FeeDelegatedSmartContractDeployExample.java focus=38:39\n\n```\n\n---\n\nDefine **contract bytecode**, you can get it from compiled solidity code\n\n```java FeeDelegatedSmartContractDeployExample.java focus=40\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java FeeDelegatedSmartContractDeployExample.java focus=41:42\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java FeeDelegatedSmartContractDeployExample.java focus=43:49\n\n```\n\n---\n\nCreate a raw transaction\n\n```java FeeDelegatedSmartContractDeployExample.java focus=51:60\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java FeeDelegatedSmartContractDeployExample.java focus=62:63\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java FeeDelegatedSmartContractDeployExample.java focus=65:66\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n```java FeeDelegatedSmartContractDeployExample.java focus=68:71\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractDeployExample.java\nTxHash :\n 0x104c9b6d8c325e49000a9f108d451456a5c147fd5ab863f9746286549202978d\n````\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n```java FeeDelegatedSmartContractDeployExample.java focus=73:82\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractDeployExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x448c2466eb20cc45891434790a14c129a0e4acec656d3e0a34adc995be961bc1\n    blockNumber: 0x8def1ae\n    codeFormat: 0x0\n    contractAddress: 0x32266d78288d847dbe66cb76965879d88e30880d\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f6\n        R: 0x9bb0e38bbc0d4fffcfcd257ea9d4878af90df0ae71bf75693811924f49831ee7\n        S: 0x5098524c559a8b95b0bcef107e8a1e1e4c4b604247ffaab079d45c72c092f260\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x3d627\n    humanReadable: false\n    key: null\n    input: 0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\n    logs: []\n    logsBloom: 0xn    nonce: 0x3ca\n    senderTxHash: 0x7839589f05f4e1e54e48294ec68cda655f33daeac5d8404ee455d0c1d656d6c8\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0x104c9b6d8c325e49000a9f108d451456a5c147fd5ab863f9746286549202978d\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedSmartContractDeploy\n    typeInt: 41\n    value: 0x0\n}\n````\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java FeeDelegatedSmartContractDeployExample.java focus=83\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java FeeDelegatedSmartContractDeployExample.java focus=85:86\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractDeployExample.java\nTxType : SMART_CONTRACT_DEPLOY\n\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java FeeDelegatedSmartContractExecutionExample.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedSmartContractExecution;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n/**\n *\n */\npublic class FeeDelegatedSmartContractExecutionExample implements keySample {\n        /**\n         *\n         */\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                String data = \"0xcfae3217\";\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = \"0xc58294ecde8fdb288fd845e7a43a56564b597bdb\";\n                byte[] payload = Numeric.hexStringToByteArray(data);\n\n                BigInteger value = BigInteger.ZERO;\n\n                TxType.Type type = Type.FEE_DELEGATED_SMART_CONTRACT_EXECUTION;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from,\n                                payload);\n\n                // Sign as sender\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n                // Sign same message as Fee payer\n                signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeFeeDelegatedSmartContractExecution rawTransaction = TxTypeFeeDelegatedSmartContractExecution\n                                .decodeFromRawTransaction(signedMessage);\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractExecutionExample.java\nTxHash :\n 0x43419d6dd268fd246f82f69174b46e4b599e030feca5de4542a1b524559c0879\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x33376f94093970fcf54d9c87669a04046b245c59c68431afef3b3444ceada0d3\n    blockNumber: 0x8def1f0\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0x934223d90aa3ca87b17ad1b8b9914512a58e54e337bdd28e746321b35da43b91\n        S: 0x2cf45437c26f6a849c142d69e5382ce142d8c1bf3115203d482e8d22eb83c164\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x86f3\n    humanReadable: null\n    key: null\n    input: 0xcfae3217\n    logs: []\n    logsBloom: 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n    nonce: 0x3cb\n    senderTxHash: 0x7c67092dcae6ba99682d0cac6ece60388099c198c0481c3f1cc03a6294303b61\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0xc58294ecde8fdb288fd845e7a43a56564b597bdb\n    transactionHash: 0x43419d6dd268fd246f82f69174b46e4b599e030feca5de4542a1b524559c0879\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedSmartContractExecution\n    typeInt: 49\n    value: 0x0\n}\nTxType : FEE_DELEGATED_SMART_CONTRACT_EXECUTION\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=31\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=32:33\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=35:36\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=37\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=38:39\n\n```\n\n---\n\nDefine smart contract data\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=40\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=41:42\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=43:48\n\n```\n\n---\n\nCreate a raw transaction\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=50:58\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=60:61\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=63:64\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n```java FeeDelegatedSmartContractExecutionExample.java focus=66:69\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractExecutionExample.java\nTxHash :\n 0x43419d6dd268fd246f82f69174b46e4b599e030feca5de4542a1b524559c0879\n````\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n```java FeeDelegatedSmartContractExecutionExample.java focus=70:79\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractExecutionExample.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x33376f94093970fcf54d9c87669a04046b245c59c68431afef3b3444ceada0d3\n    blockNumber: 0x8def1f0\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f5\n        R: 0x934223d90aa3ca87b17ad1b8b9914512a58e54e337bdd28e746321b35da43b91\n        S: 0x2cf45437c26f6a849c142d69e5382ce142d8c1bf3115203d482e8d22eb83c164\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x86f3\n    humanReadable: null\n    key: null\n    input: 0xcfae3217\n    logs: []\n    logsBloom: 0xn    nonce: 0x3cb\n    senderTxHash: 0x7c67092dcae6ba99682d0cac6ece60388099c198c0481c3f1cc03a6294303b61\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0xc58294ecde8fdb288fd845e7a43a56564b597bdb\n    transactionHash: 0x43419d6dd268fd246f82f69174b46e4b599e030feca5de4542a1b524559c0879\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedSmartContractExecution\n    typeInt: 49\n    value: 0x0\n}\n````\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java FeeDelegatedSmartContractExecutionExample.java focus=80\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java FeeDelegatedSmartContractExecutionExample.java focus=82:84\n\n````\n\n\n---\n\n```zsh output\n❯ java FeeDelegatedSmartContractExecutionExample.java\nTxType : FEE_DELEGATED_SMART_CONTRACT_EXECUTION\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java FeeDelegatedValueTransferMemo.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedValueTransferMemo;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class FeeDelegatedValueTransferMemoExample {\n\n\tpublic static void run() throws Exception {\n\t\tWeb3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n\t\tKlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\t\tKlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n\t\tBigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n\t\tBigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n\t\tString from = credentials.getAddress();\n\t\tEthChainId EthchainId = web3j.ethChainId().send();\n\t\tlong chainId = EthchainId.getChainId().longValue();\n\t\tString to = \"0x000000000000000000000000000000000000dead\";\n\t\tBigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n\t\t\t\t.getTransactionCount();\n\t\tBigInteger value = BigInteger.valueOf(100);\n\t\tString data = \"Kaia Web3j\";\n\t\tbyte[] payload = data.getBytes();\n\n\t\tTxType.Type type = Type.FEE_DELEGATED_VALUE_TRANSFER_MEMO;\n\n\t\tKlayRawTransaction raw = KlayRawTransaction.createTransaction(\n\t\t\t\ttype,\n\t\t\t\tnonce,\n\t\t\t\tGAS_PRICE,\n\t\t\t\tGAS_LIMIT,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tfrom,\n\t\t\t\tpayload);\n\n\t\t// Sign as sender\n\t\tbyte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n\t\t// Sign same message as Fee payer\n\t\tsignedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n\t\tString hexValue = Numeric.toHexString(signedMessage);\n\t\tEthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n\t\tSystem.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n\t\tString txHash = transactionResponse.getResult();\n\t\ttry {\n\t\t\tThread.sleep(2000);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tTransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n\t\tSystem.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n\t\tweb3j.shutdown();\n\n\t\tTxTypeFeeDelegatedValueTransferMemo rawTransaction = TxTypeFeeDelegatedValueTransferMemo\n\t\t\t\t.decodeFromRawTransaction(hexValue);\n\t\tSystem.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n\t}\n\n}\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedValueTransferMemo.java\noutput\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java FeeDelegatedValueTransferMemo.java focus=1:21s\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java FeeDelegatedValueTransferMemo.java focus=26\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java FeeDelegatedValueTransferMemo.java focus=27:28\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java FeeDelegatedValueTransferMemo.java focus=30:31\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java FeeDelegatedValueTransferMemo.java focus=32\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java FeeDelegatedValueTransferMemo.java focus=33:34\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java FeeDelegatedValueTransferMemo.java focus=35:42\n\n```\n\n---\n\nCreate a raw transaction object.\n\n```java FeeDelegatedValueTransferMemo.java focus=44:52\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java FeeDelegatedValueTransferMemo.java focus=54:55\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java FeeDelegatedValueTransferMemo.java focus=57:58\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n\n```java FeeDelegatedValueTransferMemo.java focus=60:63\n\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedValueTransferMemo.java\nTxHash :\n 0x3daa6c374bcd7407ff7dbd1403e9644d3551de8968601e5ab6fb779baf8caf19\n```\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n\n```java FeeDelegatedValueTransferMemo.java focus=64:70\n\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedValueTransferMemo.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0x986bc12a221e2cdd6d646675986821212249cdb537386c5efb575559bb45cfd1\n    blockNumber: 0x89286a8\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f6\n        R: 0x1f7027dcdd5a646d80e2684fca72ec2c000636925c2c0b81c2f07eba767296c8\n        S: 0x3d53dd1f3322d474c5386e149cfbba7e0d141e5c903a0dfe5b306f610691e5f2\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    gasPrice: 0xba43b7400\n    gasUsed: 0x7dc8\n    key: null\n    input: 0x4b6c6179746e20576562336a\n    logs: []\n    logsBloom: 0xn    nonce: 0x30c\n    senderTxHash: 0x121add23a85c6871d48bc097ad70d6bd0e4f65537a725c5030c13b17f31f2912\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0x000000000000000000000000000000000000dead\n    transactionHash: 0x3daa6c374bcd7407ff7dbd1403e9644d3551de8968601e5ab6fb779baf8caf19\n    transactionIndex: 0x0\n    type: TxTypeFeeDelegatedValueTransferMemo\n    typeInt: 17\n    value: 0x64\n}\n```\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java FeeDelegatedValueTransferMemo.java focus=71\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n\n```java FeeDelegatedValueTransferMemo.java focus=73:75\n\n```\n\n---\n\n```zsh output\n❯ java FeeDelegatedValueTransferMemo.java\ntxType: FEE_DELEGATED_VALUE_TRANSFER_MEMO\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```java TxTypeFeeDelegatedValueTransfer.java\npackage org.web3j.example.transactions;\n\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport java.io.IOException;\nimport java.math.BigInteger;\n\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedValueTransfer;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\npublic class FeeDelegatedValueTransferExample implements keySample {\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        TxType.Type type = Type.FEE_DELEGATED_VALUE_TRANSFER;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from);\n\n        // Sign as sender\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n        // Sign same message as Fee payer\n        signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeFeeDelegatedValueTransfer rawTransaction = TxTypeFeeDelegatedValueTransfer\n                .decodeFromRawTransaction(hexValue);\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n}\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.java\n3.523785565427238379\n0xa02e0i90faef4323cb542312de9aac0\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=1:21\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=26\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=27:28\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=30:31\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=32\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=33:34\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=36:37\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=38:40\n\n```\n\n---\n\nCreate a raw transaction object using above parameters\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=42:49\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=51:52\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=54:55\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n<CH.Code>\n```java TxTypeFeeDelegatedValueTransfer.java focus=57:60\n\n````\n---\n\n```zsh output\n❯ java TxTypeFeeDelegatedValueTransfer.java\n0x8bf9e4a253d5b22b02c04d38fbacd6c31b5605f21b782ad072c1ecd1c4aeee4a\n````\n\n</CH.Code>\n\n---\n\nGetting the transaction receipt\n\n<CH.Code>\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=62:71\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.java\nclass TransactionReceipt {\n    blockHash: 0xd290ba50996fe86305c07727e11a65e088d8e5d5d7853e3691004e4cc54ee437\n    blockNumber: 0x89142f4\n    codeFormat: null\n    contractAddress: null\n    feePayer: 0xcb0eb737dfda52756495a5e08a9b37aab3b271da\n    feePayerSignatures: [class TransactionReceiptFeePayerSignaturesInner {\n        V: 0x7f6\n        R: 0x9a02fad9a60c40637dc66f736008556a129b0215f99059b3d83a4a1c64822eb5\n        S: 0x44d1605e87ae3c8c25fce182c86373ae9f9774bc5641e45a826174a49ed38157\n    }]\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x7918\n    humanReadable: null\n    key: null\n    input: null\n    logs: []\n    logsBloom: 0xn    nonce: 0x30a\n    senderTxHash: 0xfbc98286fc9738a65020b4519d2f85b09d4460a0dc64cf1bb6e75b1fe7560116\n    signature: []\n    status: 0x1\n    txError: null\n    to: 0x000000000000000000000000000000000000dead\n    transactionHash: 0x8bf9e4a253d5b22b02c04d38fbacd6c31b5605f21b782ad072c1ecd1c4aeee4a\n    transactionIndex: 0x1\n    type: TxTypeFeeDelegatedValueTransfer\n    typeInt: 9\n    value: 0x64\n}\n```\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java TxTypeFeeDelegatedValueTransfer.java focus=72\n\n```\n\n---\n\nDecoding the raw transaction to get the transaction type\n\n<CH.Code>\n```java TxTypeFeeDelegatedValueTransfer.java focus=74:76\n\n````\n\n---\n\n```zsh output\n❯ java TxTypeFeeDelegatedValueTransfer.java\nTxType : VALUE_TRANSFER\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/getting-started. # Web3j extension for kaia\n\n## Requirements\n### Setting Java\n- Use java version: 11 `<=` v `<=` 18\n- Visit https://adoptopenjdk.net/ site\n- Download OpenJDK\n\n## Install Web3j kaia extension\n\nTo add the [Gradle Library](https://docs.gradle.org/current/userguide/getting_started.html) to your project:\n```shell\n\nrepositories { \n    mavenCentral() \n}\n\ndependencies {\n    implementation \"foundation.klaytn:web3j-ext:v0.9.3\"\n    implementation \"foundation.klaytn:web3rpc-java:v0.9.0\"\n    implementation \"org.web3j:core:4.9.8\"\n}\n````\n## Usage\nSee [example](./web3j-ext/src/main/java/org/web3j/example).\n\n## Quickstart\nFor basic web3j usage, you can learn through [Web3j tutorial](https://docs.web3j.io/4.10.0/quickstart/) .\n\n### Send Fee Delegated Transaction on Kairos Testnet\nIf you want to know more about the concept of fee delegated transaction supported by kaia network, please refer to [kaiadocs](https://docs.klaytn.foundation/content/klaytn/design/transactions).\n\nCheck FeeDelegatedValueTransferExample.java file in web3j-ext [examples](https://github.com/kaiachain/kaia-sdk/tree/dev/web3j-ext/web3j-ext/src/main/java/org/web3j/example).\n```file\npackage org.web3j.example;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeValueTransfer;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\n\n\npublic class FeeDelegatedValueTransferExample implements keySample {\n\n    public static void run() throws Exception {\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        KlayCredentials credentials_feepayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        String from = credentials.getAddress();\n        EthChainId EthchainId = web3j.ethChainId().send();\n        long chainId = EthchainId.getChainId().longValue();\n        String to = \"0x000000000000000000000000000000000000dead\";\n        BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                .getTransactionCount();\n        BigInteger value = BigInteger.valueOf(100);\n\n        TxType.Type type = Type.FEE_DELEGATED_VALUE_TRANSFER;\n\n        KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                type,\n                nonce,\n                GAS_PRICE,\n                GAS_LIMIT,\n                to,\n                value,\n                from);\n\n        // Sign as sender\n        byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n        // Sign same message as Fee payer\n        signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feepayer);\n\n        String hexValue = Numeric.toHexString(signedMessage);\n        EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n        System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n        String txHash = transactionResponse.getResult();\n\n        int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n        int DEFAULT_BLOCK_TIME = 1 * 1000;\n        long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n        TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n        org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                .waitForTransactionReceipt(txHash);\n        System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n        TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n        System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n        web3j.shutdown();\n\n        TxTypeFeeDelegatedValueTransfer rawTransaction = TxTypeFeeDelegatedValueTransfer\n                .decodeFromRawTransaction(hexValue);\n        System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n    }\n}\n````\n\nRun examples\n\n```file\nimport org.web3j.example.FeeDelegatedValueTransferExample;\n\npublic class quickstart {\n        public static void main(String[] args) throws Exception {\n            FeeDelegatedValueTransferExample.run();\n        }\n}\n````",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java smartContractDeploy.java\npackage org.web3j.example.contracts;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeSmartContractDeploy;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\n\n/**\n *\n */\npublic class DeployContractExample implements keySample {\n        /**\n        *\n        */\n\n        public static void run() throws Exception {\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                String data = \"0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\";\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                String to = null;\n                byte[] payload = Numeric.hexStringToByteArray(data);\n\n                BigInteger value = BigInteger.ZERO;\n                BigInteger codeFormat = BigInteger.ZERO;\n                TxType.Type type = Type.SMART_CONTRACT_DEPLOY;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                to,\n                                value,\n                                from,\n                                payload,\n                                codeFormat);\n\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                EthSendTransaction transactionResponse = web3j.ethSendRawTransaction(hexValue).send();\n                System.out.println(\"TxHash : \\n \" + transactionResponse.getResult());\n                String txHash = transactionResponse.getResult();\n\n                int DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH = 40;\n                int DEFAULT_BLOCK_TIME = 1 * 1000;\n                long DEFAULT_POLLING_FREQUENCY = DEFAULT_BLOCK_TIME;\n                TransactionReceiptProcessor transactionReceiptProcessor = new PollingTransactionReceiptProcessor(web3j,\n                                DEFAULT_POLLING_FREQUENCY, DEFAULT_POLLING_ATTEMPTS_PER_TX_HASH);\n                org.web3j.protocol.core.methods.response.TransactionReceipt ethReceipt = transactionReceiptProcessor\n                                .waitForTransactionReceipt(txHash);\n                System.out.println(\"Receipt from eth_getTransactionReceipt : \\n\" + ethReceipt);\n                TransactionReceipt receipt = web3j.klayGetTransactionReceipt(txHash).send().getResult();\n                System.out.println(\"Receipt from klay_getTransactionReceipt : \\n\" + receipt);\n                web3j.shutdown();\n\n                TxTypeSmartContractDeploy rawTransaction = TxTypeSmartContractDeploy\n                                .decodeFromRawTransaction(signedMessage);\n\n                System.out.println(\"TxType : \" + rawTransaction.getKlayType());\n\n        }\n\n}\n```\n\n---\n\n```zsh output\n❯ java smartContractDeploy.java\nTxHash :\n 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xf5d6fc86cc6dd1fab6e66e4436188b62302fe8ffd36fede94d42cf62a5f99e25\n    blockNumber: 0x8ded0a4\n    codeFormat: 0x0\n    contractAddress: 0x81fd08cfe4c37cc85fe7a33db9d493c99852dd55\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x3af17\n    humanReadable: false\n    key: null\n    input: 0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c3\n    senderTxHash: 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\n    transactionIndex: 0x1\n    type: TxTypeSmartContractDeploy\n    typeInt: 40\n    value: 0x0\n}\nTxType : SMART_CONTRACT_DEPLOY\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java smartContractDeploy.java focus=1:20\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java smartContractDeploy.java focus=31\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java smartContractDeploy.java focus=32\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java smartContractDeploy.java focus=34:35\n\n```\n\n---\n\nGet the sender's address and nonce\n\n```java smartContractDeploy.java focus=36:38\n\n```\n\n---\n\nDefine **contract bytecode**, you can get it from compiled solidity code\n\n```java smartContractDeploy.java focus=39\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java smartContractDeploy.java focus=40:41\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java smartContractDeploy.java focus=42:47\n\n```\n\n---\n\nCreate a raw transaction\n\n```java smartContractDeploy.java focus=49:58\n\n```\n\n---\n\nSign the raw transaction using `KlayRawTransaction.createTransaction`\n\n```java smartContractDeploy.java focus=60\n\n```\n\n---\n\nSend the transaction to kaia network\n\n<CH.Code>\n```java smartContractDeploy.java focus=61:64\n\n````\n\n\n---\n\n```zsh output\n❯ java smartContractDeploy.java\nTxHash :\n 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\n````\n\n</CH.Code>\n\n---\n\nGet the **transaction receipt** and using the transaction hash\n\n<CH.Code>\n```java smartContractDeploy.java focus=66:75\n\n````\n\n\n---\n\n```zsh output\n❯ java smartContractDeploy.java\nreceipt :\nclass TransactionReceipt {\n    blockHash: 0xf5d6fc86cc6dd1fab6e66e4436188b62302fe8ffd36fede94d42cf62a5f99e25\n    blockNumber: 0x8ded0a4\n    codeFormat: 0x0\n    contractAddress: 0x81fd08cfe4c37cc85fe7a33db9d493c99852dd55\n    feePayer: null\n    feePayerSignatures: []\n    feeRatio: null\n    from: 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n    gas: 0x66919e\n    effectiveGasPrice: 0x5d21dba00\n    gasPrice: 0xba43b7400\n    gasUsed: 0x3af17\n    humanReadable: false\n    key: null\n    input: 0x60c0604052600c60809081526b48656c6c6f20576f726c642160a01b60a05260009061002b90826100dd565b5034801561003857600080fd5b5061019c565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061006857607f821691505b60208210810361008857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156100d857600081815260208120601f850160051c810160208610156100b55750805b601f850160051c820191505b818110156100d4578281556001016100c1565b5050505b505050565b81516001600160401b038111156100f6576100f661003e565b61010a816101048454610054565b8461008e565b602080601f83116001811461013f57600084156101275750858301515b600019600386901b1c1916600185901b1785556100d4565b600085815260208120601f198616915b8281101561016e5788860151825594840194600190910190840161014f565b508582101561018c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61019a806101ab6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cfae321714610030575b600080fd5b61003861004e565b60405161004591906100dc565b60405180910390f35b6000805461005b9061012a565b80601f01602080910402602001604051908101604052809291908181526020018280546100879061012a565b80156100d45780601f106100a9576101008083540402835291602001916100d4565b820191906000526020600020905b8154815290600101906020018083116100b757829003601f168201915b505050505081565b600060208083528351808285015260005b81811015610109578581018301518582016040015282016100ed565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061013e57607f821691505b60208210810361015e57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122002272dad43feb87cde6d15be86d8d1af21672f2443deb524dce07ca0210d1cec64736f6c63430008120033\n    logs: []\n    logsBloom: 0xn    nonce: 0x3c3\n    senderTxHash: 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\n    signature: []\n    status: 0x1\n    txError: null\n    to: null\n    transactionHash: 0xd780119c1c48519b348a653045acf28314a6da2be43dcf76c443390f0ef32a2c\n    transactionIndex: 0x1\n    type: TxTypeSmartContractDeploy\n    typeInt: 40\n    value: 0x0\n}\n````\n\n</CH.Code>\n\n---\n\nShut down the Web3j connection\n\n```java smartContractDeploy.java focus=76\n\n```\n\n---\n\nDecode the raw transaction to get the transaction type\n\n<CH.Code>\n```java smartContractDeploy.java focus=78:81\n\n````\n\n\n---\n\n```zsh output\n❯ java smartContractDeploy.java\nTxType : SMART_CONTRACT_DEPLOY\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java ReadContractExample.java\npackage org.web3j.example.contracts;\n\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.tx.gas.StaticGasProvider;\n\npublic class ReadContractExample {\n    /**\n     * @throws Exception\n     *\n     */\n    public static void run() throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        String contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        StaticGasProvider gasProvider = new StaticGasProvider(GAS_PRICE, GAS_LIMIT);\n        Counter counter = Counter.load(contractAddr, web3j, credentials.convertToCredentials(), gasProvider);\n        System.out.println(\"Contract Call(number) Result : \" + counter.number().send());\n\n    }\n\n}\n\n```\n\n---\n\n```zsh output\n❯ java ReadContractExample.java\nContract Call(number) Result : 297\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java ReadContractExample.java focus=1:10\n\n```\n\n---\n\nConnect to the **Kaia** blockchain using **Web3j** and specify the URL\n\n```java ReadContractExample.java focus=19\n\n```\n\n---\n\nCreate **KlayCredentials** using the private key\n\n```java ReadContractExample.java focus=20\n\n```\n\n---\n\nSpecify the address of the **contract**\n\n```java ReadContractExample.java focus=21\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java ReadContractExample.java focus=22:23\n\n```\n\n---\n\nCreate a gas provider with static **gas price** and **gas limit**\n\n```java ReadContractExample.java focus=24\n\n```\n\n---\n\nLoad the contract using **contact address**, **Web3j instance**, **credentials**, and **gas provider**. You can read and write the contract through this instance\n\n```java ReadContractExample.java focus=25\n\n```\n\n---\n\nCall the `counter.number().send()` function of the contract to retrieve the stored value\n\n<CH.Code>\n```java ReadContractExample.java focus=26\n\n````\n\n\n---\n\n```zsh output\n❯ java ReadContractExample.java\nContract Call(number) Result : 297\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/smart-contract/write-txtype. # Write with TxType\n\n<CH.Spotlight>\n<CH.Code>\n\n```java WriteContractWithKlaytnTxTypeExample.java\npackage org.web3j.example.contracts;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedSmartContractExecution;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.request.Transaction;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.KlayCallResponse;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.gas.StaticGasProvider;\nimport org.web3j.abi.FunctionEncoder;\nimport org.web3j.abi.datatypes.Function;\nimport org.web3j.abi.datatypes.Uint;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class WriteContractWithKlaytnTxTypeExample {\n        /**\n         * @throws Exception\n         *\n         */\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                String contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger value = BigInteger.ZERO;\n                StaticGasProvider gasProvider = new StaticGasProvider(GAS_PRICE, GAS_LIMIT);\n                Counter counter = Counter.load(contractAddr, web3j, credentials.convertToCredentials(), gasProvider);\n\n                // Get number before Contract Write\n                System.out.println(\"number before : \" + counter.number().send());\n\n                // Contract Write (Set number with setNumber function)\n                Function function = new Function(\"setNumber\", // Function name\n                                Arrays.asList(new Uint(BigInteger.valueOf(50))), // Function input parameters\n                                Collections.emptyList()); // Function returned parameters\n                String txData = FunctionEncoder.encode(function);\n                byte[] payload = Numeric.hexStringToByteArray(txData);\n\n                TxType.Type type = Type.SMART_CONTRACT_EXECUTION;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                contractAddr,\n                                value,\n                                from,\n                                payload);\n\n                // Sign as sender\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n                String hexValue = Numeric.toHexString(signedMessage);\n                web3j.ethSendRawTransaction(hexValue).send();\n                try {\n                        Thread.sleep(2000);\n                } catch (Exception e) {\n                        System.out.println(e);\n                }\n                // Get number after Contract Write\n                System.out.println(\"number after : \" + counter.number().send());\n\n                web3j.shutdown();\n        }\n}\n\n```\n\n---\n\n```zsh output\n❯ java WriteContractWithKlaytnTxTypeExample.java\nnumber before : 298\nnumber after : 50\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=1:28\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=37\n\n```\n\n---\n\nCreate **KlayCredentials** using the private key\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=38\n\n```\n\n---\n\nDefine smart contract **address** to interact with\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=39\n\n```\n\n---\n\nDefine **gas price** and **gas limit** for contract transactions\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=40:41\n\n```\n\n---\n\nDefine **from** and get **chainId**, **nonce**\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=42:46\n\n```\n\n---\n\nCreate a **gas provider** with static gas price and gas limit\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=48\n\n```\n\n---\n\nLoad the contract using **contact address**, **Web3j instance**, **credentials**, and **gas provider**. You can read and write the contract through this instance\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=43\n\n```\n\n---\n\nGet the current number stored in the contract before writing\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=51:52\n\n```\n\n---\n\nSet params for calling method `setNumber` to the contract\n\n<CH.Code>\n```java WriteContractWithKlaytnTxTypeExample.java focus=54:59\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractWithKlaytnTxTypeExample.java\nnumber before : 298\n````\n\n</CH.Code>\n\n---\n\nSet the transaction type to **SMART_CONTRACT_EXECUTION**\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=61\n\n```\n\n---\n\nCreate a raw transaction object\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=63:71\n\n```\n\n---\n\nSign the transaction with `KlayTransactionEncoder.signMessage`\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=73:74\n\n```\n\n---\n\nSend the **signed transaction** to kaia network\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=75:76\n\n```\n\n---\n\nWait for the transaction to be completed\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=77:81\n\n```\n\n---\n\nGet the updated number stored in the contract after writing\n\n<CH.Code>\n```java WriteContractWithKlaytnTxTypeExample.java focus=82:83\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractWithKlaytnTxTypeExample.java\nnumber after : 50\n````\n\n</CH.Code>\n\n---\n\nShutdown the web3j instance\n\n```java WriteContractWithKlaytnTxTypeExample.java focus=85\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java WriteContractWithFeeDelegationExample.java\npackage org.web3j.example.contracts;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.crypto.KlayRawTransaction;\nimport org.web3j.crypto.KlayTransactionEncoder;\nimport org.web3j.crypto.transaction.type.TxType;\nimport org.web3j.crypto.transaction.type.TxTypeFeeDelegatedSmartContractExecution;\nimport org.web3j.crypto.transaction.type.TxType.Type;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.core.DefaultBlockParameterName;\nimport org.web3j.protocol.core.methods.request.Transaction;\nimport org.web3j.protocol.core.methods.response.EthChainId;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.utils.Numeric;\nimport org.web3j.protocol.kaia.core.method.response.KlayCallResponse;\nimport org.web3j.protocol.kaia.core.method.response.TransactionReceipt;\nimport org.web3j.tx.gas.StaticGasProvider;\nimport org.web3j.abi.FunctionEncoder;\nimport org.web3j.abi.datatypes.Function;\nimport org.web3j.abi.datatypes.Uint;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class WriteContractWithFeeDelegationExample {\n        /**\n         * @throws Exception\n         *\n         */\n        public static void run() throws Exception {\n\n                Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n                KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n                KlayCredentials credentials_feePayer = KlayCredentials.create(keySample.LEGACY_KEY_FEEPAYER_privkey);\n                String contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n                BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n                BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n                String from = credentials.getAddress();\n                BigInteger nonce = web3j.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).send()\n                                .getTransactionCount();\n                EthChainId EthchainId = web3j.ethChainId().send();\n                long chainId = EthchainId.getChainId().longValue();\n                BigInteger value = BigInteger.ZERO;\n                StaticGasProvider gasProvider = new StaticGasProvider(GAS_PRICE, GAS_LIMIT);\n                Counter counter = Counter.load(contractAddr, web3j, credentials.convertToCredentials(), gasProvider);\n\n                // Get number before Contract Write\n                System.out.println(\"number before : \" + counter.number().send());\n\n                // Contract Write (Set number with setNumber function)\n                Function function = new Function(\"setNumber\", // Function name\n                                Arrays.asList(new Uint(BigInteger.valueOf(50))), // Function input parameters\n                                Collections.emptyList()); // Function returned parameters\n                String txData = FunctionEncoder.encode(function);\n                byte[] payload = Numeric.hexStringToByteArray(txData);\n\n                TxType.Type type = Type.FEE_DELEGATED_SMART_CONTRACT_EXECUTION;\n\n                KlayRawTransaction raw = KlayRawTransaction.createTransaction(\n                                type,\n                                nonce,\n                                GAS_PRICE,\n                                GAS_LIMIT,\n                                contractAddr,\n                                value,\n                                from,\n                                payload);\n\n                // Sign as sender\n                byte[] signedMessage = KlayTransactionEncoder.signMessage(raw, chainId, credentials);\n\n                // Sign same message as Fee payer\n                signedMessage = KlayTransactionEncoder.signMessageAsFeePayer(raw, chainId, credentials_feePayer);\n                String hexValue = Numeric.toHexString(signedMessage);\n                web3j.ethSendRawTransaction(hexValue).send();\n                try {\n                        Thread.sleep(2000);\n                } catch (Exception e) {\n                        System.out.println(e);\n                }\n                // Get number after Contract Write\n                System.out.println(\"number after : \" + counter.number().send());\n\n                web3j.shutdown();\n        }\n}\n```\n\n---\n\n```zsh output\n❯ java WriteContractWithFeeDelegationExample.java\nnumber before : 298\nnumber after : 50\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java WriteContractWithFeeDelegationExample.java focus=1:28\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java WriteContractWithFeeDelegationExample.java focus=37\n\n```\n\n---\n\nCreating **sender** and **fee payer** credentials using private keys.\n\n```java WriteContractWithFeeDelegationExample.java focus=38:39\n\n```\n\n---\n\nSpecify the **address** of the deployed contract\n\n```java WriteContractWithFeeDelegationExample.java focus=38\n\n```\n\n---\n\nDefine gas price and gas limit for the transaction\n\n```java WriteContractWithFeeDelegationExample.java focus=41:42\n\n```\n\n---\n\nGet the sender's address from `credentials.getAddress()`\n\n```java WriteContractWithFeeDelegationExample.java focus=43\n\n```\n\n---\n\nGetting the **nonce** for the sender's address\n\n```java WriteContractWithFeeDelegationExample.java focus=44:45\n\n```\n\n---\n\nGet the chain ID from the **Kaia** network\n\n```java WriteContractWithFeeDelegationExample.java focus=46:47\n\n```\n\n---\n\nInitialize variables for transaction parameters\n\n```java WriteContractWithFeeDelegationExample.java focus=48\n\n```\n\n---\n\nCreate a gas provider with static gas price and gas limit\n\n```java WriteContractWithFeeDelegationExample.java focus=49\n\n```\n\n---\n\nLoad the contract using **contact address**, **Web3j instance**, **credentials**, and **gas provider**. You can read and write the contract through this instance\n\n```java WriteContractWithFeeDelegationExample.java focus=50\n\n```\n\n---\n\nGet the current **number** stored in the contract before writing\n\n<CH.Code>\n```java WriteContractWithFeeDelegationExample.java focus=52:53\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractWithFeeDelegationExample.java\nnumber before : 298\n\n````\n\n</CH.Code>\n\n---\n\nSet params for calling method `setNumber` to the contract\n\n```java WriteContractWithFeeDelegationExample.java focus=55:60\n\n```\n\n---\n\nDefine the transaction type as **FEE_DELEGATED_SMART_CONTRACT_EXECUTION**\n\n```java WriteContractWithFeeDelegationExample.java focus=62\n\n```\n\n---\n\nCreate a raw transaction\n\n```java WriteContractWithFeeDelegationExample.java focus=64:72\n\n```\n\n---\n\nSigning the transaction as **sender** using `KlayTransactionEncoder.signMessage`.\n\n```java WriteContractWithFeeDelegationExample.java focus=74:75\n\n```\n\n---\n\nSigning the transaction as fee payer using `KlayTransactionEncoder.signMessageAsFeePayer`.\n\n```java WriteContractWithFeeDelegationExample.java focus=77:78\n\n```\n\n---\n\nSending the signed transaction to kaia network\n\n```java WriteContractWithFeeDelegationExample.java focus=80\n\n```\n\n---\n\nDelay for a short time to ensure the transaction is completed\n\n```java WriteContractWithFeeDelegationExample.java focus=81:85\n\n```\n\n---\n\nGet the updated **number** stored in the contract after writing\n\n<CH.Code>\n```java WriteContractWithFeeDelegationExample.java focus=86:87\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractWithFeeDelegationExample.java\nnumber after : 50\n\n````\n\n</CH.Code>\n\n---\n\nShutting down the Web3j instance\n\n```java WriteContractWithFeeDelegationExample.java focus=89\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java WriteContractExample.java\npackage org.web3j.example.contracts;\n\nimport java.math.BigInteger;\nimport org.web3j.crypto.KlayCredentials;\nimport org.web3j.tx.response.PollingTransactionReceiptProcessor;\nimport org.web3j.tx.response.TransactionReceiptProcessor;\nimport org.web3j.example.keySample;\nimport org.web3j.protocol.http.HttpService;\nimport org.web3j.protocol.kaia.Web3j;\nimport org.web3j.tx.gas.StaticGasProvider;\n\npublic class WriteContractExample {\n    /**\n     * @throws Exception\n     *\n     */\n    public static void run() throws Exception {\n\n        Web3j web3j = Web3j.build(new HttpService(keySample.BAOBAB_URL));\n        KlayCredentials credentials = KlayCredentials.create(keySample.LEGACY_KEY_privkey);\n        String contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n        BigInteger GAS_PRICE = BigInteger.valueOf(50000000000L);\n        BigInteger GAS_LIMIT = BigInteger.valueOf(6721950);\n        StaticGasProvider gasProvider = new StaticGasProvider(GAS_PRICE, GAS_LIMIT);\n        Counter counter = Counter.load(contractAddr, web3j, credentials.convertToCredentials(), gasProvider);\n\n        // Get number before Contract Write\n        System.out.println(\"number before : \" + counter.number().send());\n\n        // Contract Write (increment function)\n        counter.increment().send();\n\n        // Get number after Contract Write\n        System.out.println(\"number after : \" + counter.number().send());\n    }\n\n}\n```\n\n---\n\n```zsh output\n❯ java WriteContractExample.java\nnumber before : 297\nnumber after : 298\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`).\n\n```java WriteContractExample.java focus=1:10\n\n```\n\n---\n\nConnect to the kaia blockchain using Web3j and specify the URL\n\n```java WriteContractExample.java focus=19\n\n```\n\n---\n\nCreate KlayCredentials using the private key\n\n```java WriteContractExample.java focus=20\n\n```\n\n---\n\nDefine smart contract address to interact with\n\n```java WriteContractExample.java focus=21\n\n```\n\n---\n\nDefine gas price and gas limit for contract transactions\n\n```java WriteContractExample.java focus=22:23\n\n```\n\n---\n\nCreate a gas provider with static gas price and gas limit\n\n```java WriteContractExample.java focus=24\n\n```\n\n---\n\nLoad the contract using **contact address**, **Web3j instance**, **credentials**, and **gas provider**. You can read and write the contract through this instance\n\n```java WriteContractExample.java focus=25\n\n```\n\n---\n\nGet the current **number** stored in the contract before writing\n\n<CH.Code>\n```java WriteContractExample.java focus=27:28\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractExample.java\nnumber before : 297\n\n````\n\n</CH.Code>\n\n---\n\nIncrement the **number** stored in the contract by calling `counter.increment().send()`\n\n```java WriteContractExample.java focus=30:31\n\n```\n\n---\n\nGet the updated **number** stored in the contract after writing\n\n<CH.Code>\n```java WriteContractExample.java focus=33:34\n\n````\n\n\n---\n\n```zsh output\n❯ java WriteContractExample.java\nnumber after : 298\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/utils/address. # Address\n\nUtils for compressing public key.\n\n<CH.Spotlight>\n<CH.Code>\n\n```java PublicKeyUtilsExample.java\npackage org.web3j.example.utils;\n\nimport org.web3j.crypto.transaction.account.AccountKeyPublic;\nimport org.web3j.utils.AccountKeyPublicUtils;\n\n\npublic class PublicKeyUtilsExample {\n    public static void main(String[] args) {\n\n        System.out.println(\"From compressed public key to AccountKeyPublic\");\n        System.out.println(AccountKeyPublicUtils.decompressKey(\"03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"));\n\n        System.out.println(\"From x,y to compressed public key\");\n        AccountKeyPublic publicKey= AccountKeyPublic.create(\"0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\",\"0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79\");\n        System.out.println(AccountKeyPublicUtils.toCompressedPublicKey(publicKey.getPublicKey()));\n    }\n}\n```\n\n---\n\n```zsh output\n❯ java PublicKeyUtilsExample.java\nFrom compressed public key to AccountKeyPublic\nAccountKeyPublic x : 0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd / y : 0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79\nFrom x,y to compressed public key\n03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`)\n\n```java PublicKeyUtilsExample.java focus=1:4\n\n```\n---\nFor convert from `compressed public key` to an `AccountPublicKey` with `{x, y}` format, use `AccountKeyPublicUtils.decompressKey`\n<CH.Code>\n```java PublicKeyUtilsExample.java focus=10:11\n\n```\n---\n```zsh output\n❯ java PublicKeyUtilsExample.java\nFrom compressed public key to AccountKeyPublic\nAccountKeyPublic x : 0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd / y : 0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79\n```\n\n</CH.Code>\n---\nFor compressing `AccountKeyPublic` to `compressed public key` string, uses `AccountKeyPublicUtils.toCompressedPublicKey`\n<CH.Code>\n```java PublicKeyUtilsExample.java focus=13:15\n\n```\n---\n```zsh output\n❯ java PublicKeyUtilsExample.java\nFrom x,y to compressed public key\n03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/utils/signature. # Signature\nConvert signature between `r, s, v` and `compressed string` format.\n<CH.Spotlight>\n<CH.Code>\n\n```java SignatureUtilsExample.java\npackage org.web3j.example.utils;\n\n\nimport org.web3j.crypto.KaiaSignatureData;\nimport org.web3j.crypto.Sign;\nimport org.web3j.utils.Numeric;\n\npublic class SignatureUtilsExample {\n    public static void main(String[] args) {\n        // convert from {r, s, v} signature to string\n        byte[] r = Numeric.hexStringToByteArray(\"0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed\");\n        byte[] s = Numeric.hexStringToByteArray(\"0x678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e6\");\n        byte[] v = Numeric.hexStringToByteArray(\"0x0\");\n        Sign.SignatureData obj = new Sign.SignatureData(v, r, s);\n        String signature = KaiaSignatureData.getSignatureString(obj);\n\n        System.out.println(\"From {r, s, v} to string \" + signature);\n\n        // convert from signature string to {r, s, v}\n        byte[] signatureBytes = Numeric.hexStringToByteArray(\"0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e600\");\n\n        byte[] convertedR = new byte[32];\n        byte[] convertedS = new byte[32];\n        byte[] convertedV= new byte[1];\n\n        // r is the first 32 bytes\n        System.arraycopy(signatureBytes, 0, convertedR, 0, 32);\n        // s is the next 32 bytes\n        System.arraycopy(signatureBytes, 32, convertedS, 0, 32);\n        // v is the last byte\n        convertedV[0] = signatureBytes[64];\n\n        System.out.println(\"Converted R \" + Numeric.toHexString(convertedR));\n        System.out.println(\"Converted S \" + Numeric.toHexString(convertedS));\n        System.out.println(\"Converted V \" + Numeric.toHexString(convertedV));\n    }\n}\n\n```\n\n---\n\n```zsh output\n❯ java SignatureUtilsExample.java\n0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e600\n```\n\n</CH.Code>\n\n---\nImport necessary classes from the Web3j and kaia libraries(`web3j-ext`)\n\n```java SignatureUtilsExample.java focus=1:6\n\n```\n---\nFor converting `{r ,s ,v}` signature to `string`, create a `Sign.SignatureData` object from params r, s ,v. Use `Numeric.hexStringToByteArray` to convert string to byte array\n```java SignatureUtilsExample.java focus=10:14,6\n\n```\n\n---\nTo compress `Sign.SignatureData` to `compressed signature string`, use `KaiaSignatureData.getSignatureString` with the **signature object** as param\n\n<CH.Code>\n```java SignatureUtilsExample.java focus=15:17\n\n```\n---\n```zsh output\n❯ java SignatureUtilsExample.java\n0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e600\n```\n\n</CH.Code>\n---\nFor converting `string` signature to `{r ,s ,v}`, First convert the string signature to byte array. Use `Numeric.hexStringToByteArray` to convert string to byte array\n```java SignatureUtilsExample.java focus=19:20\n\n```\n---\nExtract **r, s, v** components from the byte array. `R` is the first 32 indices, `S` is the next 32 indices and `V` is the last indice\n```java SignatureUtilsExample.java focus=22:31\n\n```\n---\nYou can use `Numeric.toHexString` to convert each components from `byte array` to `string`\n<CH.Code>\n```java SignatureUtilsExample.java focus=33:35\n\n```\n\n---\n```zsh output\n❯ java SignatureUtilsExample.java\nConverted R 0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed\nConverted S 0x678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e6\nConverted V 0x00\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3j-ext/utils/unit. # Units\nFor units conversion, Kaia-sdk supports utils for converting `kaia`, `Gkei` and `kei`. See [supported units](https://docs.kaia.io/learn/kaia-native-token/#units-of-kaia-) .\n<CH.Spotlight>\n<CH.Code>\n\n```java UnitConvertExample.java\npackage org.web3j.example.utils;\n\nimport org.web3j.utils.KaiaConvert;\n\npublic class UnitConvertExample {\n    public static void main(String[] args) {\n        System.out.println(\"Convert from kei to kaia \" + KaiaConvert.fromKei(\"1000000000000000000\", KaiaConvert.Unit.KAIA));\n        System.out.println(\"Convert from Gkei to kaia \" + KaiaConvert.fromKei(\"1000000000\", KaiaConvert.Unit.GKEI));\n\n        System.out.println(\"Convert from kaia to kei \" + KaiaConvert.toKei(\"1\", KaiaConvert.Unit.KAIA));\n        System.out.println(\"Convert from kaia to kei \" + KaiaConvert.toKei(\"1\", KaiaConvert.Unit.GKEI));\n    }\n}\n```\n\n---\n\n```zsh output\n❯ java UnitConvertExample.java\nConvert from kei to kaia 1\nConvert from Gkei to kaia 1\nConvert from kaia to kei 1000000000000000000\n```\n\n</CH.Code>\n\n---\n\nImport the `KaiaConvert` from **org.web3j.utils.KaiaConvert** packages\n\n```java UnitConvertExample.java focus=1:3\n\n```\n\n---\n\nTo convert other units to kaia, use `KaiaConvert.fromKei`. The first param is the value and the second param is the unit types of `kei/Gkei/kaia`\n\n<CH.Code>\n\n```java UnitConvertExample.java focus=7:8\n\n```\n\n---\n\n```zsh output\n❯ java UnitConvertExample.java\nConvert from kei to kaia 1\nConvert from Gkei to kaia 1\n```\n\n</CH.Code>\n---\nTo convert other units to kei, use `KaiaConvert.toKei`. The first param is the value and the second param is the unit types of `kei/Gkei/kaia`\n\n<CH.Code>\n```java UnitConvertExample.java focus=10:11\n\n```\n---\n```zsh output\n❯ java UnitConvertExample.java\nConvert from kaia to kei 1000000000000000000\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithLegacy.js\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithLegacy.js\nsignedTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js AccountUpdateWithLegacy.js focus=1\n\n```\n\n---\n\nDefine **sender address, sender private key and new private key** to be changed\n\n```js AccountUpdateWithLegacy.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithLegacy.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithLegacy.js focus=8\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xecbf243ac167a3b5097fef758e07881582a89027\";\nconst senderPriv = \"0xc696ccd259792f2ffb87e0012e4a37ae3526a3224686225af679e3aaa2aeab0d\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Legacy,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js AccountUpdateWithLegacy.js focus=9\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithLegacy.js focus=10\n\n```\n\n---\n\nDeclare a transaction in the **key** field with the type `AccountKeyType.Legacy`\n\n```js AccountUpdateWithLegacy.js focus=13:19\n\n```\n\n---\n\nSign the transaction with **sender's wallet**\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=21:22\n\n````\n---\n\n```zsh output\nsignedTx 0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90\n````\n\n</CH.Code>\n\n---\n\nSend the signed tx to the blockchain. It will return the **receipt** of the transaction\n\n<CH.Code>\n```js AccountUpdateWithLegacy.js focus=24:25\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  from: '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x114a80bfaf346ff14fc818f5053a6a94201684fc02316529d5d2cfdb68e7b98d',\n  transactionHash: '0x5fedabfb343f607fe0f0adfa9ef54d738312bbec98bfc02839cdae2e968f5f90',\n  logs: [],\n  blockNumber: 152203338,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithMultiSigExample.js\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount1 = web3.eth.accounts.privateKeyToAccount(senderPriv1);\nconst senderAccount2 = web3.eth.accounts.privateKeyToAccount(senderPriv2);\nconst senderAccount3 = web3.eth.accounts.privateKeyToAccount(senderPriv3);\n\nasync function main() {\n  const pub1 = getPublicKeyFromPrivate(senderPriv1);\n  const pub2 = getPublicKeyFromPrivate(senderPriv2);\n  const pub3 = getPublicKeyFromPrivate(senderPriv3);\n  console.log({ pub1, pub2, pub3 });\n\n  let tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1_000_000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature,\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const signResult1 = await senderAccount1.signTransaction(tx);\n  console.log(\"rawTx1\", signResult1.rawTransaction);\n\n  // sign 2: Rest of the signers sign from the rawTx\n  const signResult2 = await senderAccount2.signTransaction(signResult1.rawTransaction);\n  console.log(\"rawTx2\", signResult2.rawTransaction);\n\n  // sign 3: Last signer sign from the rawTx then send it\n  const signResult3 = await senderAccount3.signTransaction(signResult2.rawTransaction);\n  console.log(\"signedTx3\", signResult3.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult3.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithMultiSigExample.js\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\nsentTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js AccountUpdateWithMultiSigExample.js focus=1\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **muti-sig private keys** to be changed\n\n```js AccountUpdateWithMultiSigExample.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithMultiSigExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithMultiSigExample.js focus=8\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount1 = web3.eth.accounts.privateKeyToAccount(senderPriv1);\nconst senderAccount2 = web3.eth.accounts.privateKeyToAccount(senderPriv2);\nconst senderAccount3 = web3.eth.accounts.privateKeyToAccount(senderPriv3);\n\nasync function main() {\n  const pub1 = getPublicKeyFromPrivate(senderPriv1);\n  const pub2 = getPublicKeyFromPrivate(senderPriv2);\n  const pub3 = getPublicKeyFromPrivate(senderPriv3);\n  console.log({ pub1, pub2, pub3 });\n\n  let tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 1_000_000,\n    key: {\n      type: AccountKeyType.WeightedMultiSig,\n      threshold: 2,\n      keys: [\n        [1, pub1],\n        [1, pub2],\n        [1, pub3],\n      ]\n    }\n  };\n\n  // The example senderAddr actually requires only 2 signature,\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const signResult1 = await senderAccount1.signTransaction(tx);\n  console.log(\"rawTx1\", signResult1.rawTransaction);\n\n  // sign 2: Rest of the signers sign from the rawTx\n  const signResult2 = await senderAccount2.signTransaction(signResult1.rawTransaction);\n  console.log(\"rawTx2\", signResult2.rawTransaction);\n\n  // sign 3: Last signer sign from the rawTx then send it\n  const signResult3 = await senderAccount3.signTransaction(signResult2.rawTransaction);\n  console.log(\"signedTx3\", signResult3.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult3.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js AccountUpdateWithMultiSigExample.js focus=9\n\n```\n\n---\n\nCreate three sender's wallets with the **private keys** and **provider**\n\n```js AccountUpdateWithMultiSigExample.js focus=10:12\n\n```\n\n---\n\nCompute the **public keys** from the new private keys\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=15:18\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82',\n  pub2: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n  pub3: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has the **keys** field with the computed **public keys** and theirs **weight**, specify the **type** as **WeightedMultiSig**\n\n```js AccountUpdateWithMultiSigExample.js focus=20:33\n\n```\n\n---\n\nSign the transaction with the first wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=38:40\n\n````\n---\n\n```zsh output\nrawTx1 0x20f8dd74850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af847f8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3c\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the second wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=42:44\n\n````\n---\n\n```zsh output\nrawTx2 0x20f9012474850ba43b7400830f42409482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af88ef8458207f6a055fef1ed11853c582a281365fb4f381d2b895758a0436002b6fac3b292594e32a01681d4879eac18d27d20b2dd377cbba4ce723be992ec0fd5e6686645c75c1a3cf8458207f6a0b445954342f2a9d2b0973f8b36de46e633968c946a9dbbaa3add4f09c91bc0f7a00a72b483157a961d10ed57b6089ee8399018fe5a0f91881375f1b4a0b4fdcf54\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the third wallet\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=46:48\n\n````\n---\n\n```zsh output\nsignedTx3 0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to kaia network and returns the tx receipt if it is completed in the blockchain.\n\n<CH.Code>\n```js AccountUpdateWithMultiSigExample.js focus=50:51\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x01b198', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7e43df2efc735e7c47c163c6ac5ad50c10de542f48cfc5088dfec251b66298c2',\n  transactionHash: '0x722b434220cd61c80cf827672bc79006183629399a4f1ad0c98552a47cbb7e07',\n  logs: [],\n  blockNumber: 152203392,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x03ed06', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithPubKey.js\nconst { Web3, TxType, AccountKeyType, toPeb, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const senderNewPub = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ senderNewPub });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithPubKey.js\npub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nsentTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js AccountUpdateWithPubKey.js focus=1\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and **new private key** to be changed\n\n```js AccountUpdateWithPubKey.js focus=5:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithPubKey.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithPubKey.js focus=9\nconst { Web3, TxType, AccountKeyType, toPeb, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const senderNewPub = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ senderNewPub });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: senderNewPub,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js AccountUpdateWithPubKey.js focus=10\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js AccountUpdateWithPubKey.js focus=11\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=14:15\n\n````\n---\n\n```zsh output\nsenderNewPub 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction which has type **AccountKeyType.Public** and **key** field with the new computed **public key**\n\n```js AccountUpdateWithPubKey.js focus=17:24\n\n```\n\n---\n\nSign the transaction with **sender's wallet**\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=26:27\n\n````\n---\n\n```zsh output\nsignedTx 0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7\n````\n\n</CH.Code>\n\n---\n\nSend the signed tx to the blockchain. It will return the **receipt** of the transaction\n\n<CH.Code>\n```js AccountUpdateWithPubKey.js focus=29:30\n\n````\n---\n```zsh output\nreceipt {\n  to: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0xa028', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb385b18c2e96c36e7fbbeb121cf2a48c0bb15f1a7af2f2969b133236ff7a14ea',\n  transactionHash: '0x33a634875a49d8915bc6fde14f351b81d1fc470b64aef28bf95d3ea92f2dc4f7',\n  logs: [],\n  blockNumber: 152203491,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x02e456', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js AccountUpdateWithRoleBased.js\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst updaterAccount = web3.eth.accounts.privateKeyToAccount(senderRoleAccountUpdatePriv);\n\nasync function main() {\n  const pub1 = getPublicKeyFromPrivate(senderRoleTransactionPriv);\n  const pub2 = getPublicKeyFromPrivate(senderRoleAccountUpdatePriv);\n  const pub3 = getPublicKeyFromPrivate(senderRoleFeePayerPriv);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 100_000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const signResult = await updaterAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js AccountUpdateWithRoleBased.js\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\nsentTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js AccountUpdateWithRoleBased.js focus=1\n\n```\n\n---\n\nDefine sender **address**, sender **private key** and new **role-based private keys** to be changed\n\n```js AccountUpdateWithRoleBased.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js AccountUpdateWithRoleBased.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js AccountUpdateWithRoleBased.js focus=8\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst updaterAccount = web3.eth.accounts.privateKeyToAccount(senderRoleAccountUpdatePriv);\n\nasync function main() {\n  const pub1 = getPublicKeyFromPrivate(senderRoleTransactionPriv);\n  const pub2 = getPublicKeyFromPrivate(senderRoleAccountUpdatePriv);\n  const pub3 = getPublicKeyFromPrivate(senderRoleFeePayerPriv);\n  console.log({ pub1, pub2, pub3 });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    gasLimit: 100_000,\n    key: {\n      type: AccountKeyType.RoleBased,\n      keys: [\n        { type: AccountKeyType.Public, key: pub1 }, // RoleTransaction\n        { type: AccountKeyType.Public, key: pub2 }, // RoleAccountUpdate\n        { type: AccountKeyType.Public, key: pub3 }, // RoleFeePayer\n      ]\n    }\n  };\n\n  const signResult = await updaterAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js AccountUpdateWithRoleBased.js focus=9\n\n```\n\n---\n\nCreate a sender's wallet with the **updater role** private key and provider\n\n```js AccountUpdateWithRoleBased.js focus=10\n\n```\n\n---\n\nCompute the **public keys** from the new **role-based** private keys\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=13:16\n\n````\n---\n\n```zsh output\n{\n  pub1: '0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a',\n  pub2: '0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3',\n  pub3: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\n````\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **keys** field with the computed **role-based public keys**\n\n```js AccountUpdateWithRoleBased.js focus=18:30\n\n```\n\n---\n\nSign the transaction with **sender's wallet**\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=32:33\n\n````\n---\n\n```zsh output\nsignedTx 0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f\n````\n\n</CH.Code>\n\n---\n\nSend the signed tx to the blockchain. It will return the **receipt** of the transaction\n\n<CH.Code>\n```js AccountUpdateWithRoleBased.js focus=35:36\n\n````\n---\n```zsh output\nreceipt {\n  to: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x013c68', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xb9145a53ef85bc4b375de828d9c3387cadc6bcd8f81a8d8eaf4f0331a2d7a5c0',\n  transactionHash: '0xcb8e1fc03088f2a00d44c31ce1c5f4913d3cf11403d60014a245ae44aa4c2a2f',\n  logs: [],\n  blockNumber: 152203576,\n  confirmations: 2,\n  cumulativeGasUsed: BigNumber { _hex: '0x0377d6', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/keystore/keystoreV3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV3.js\nconst { Web3 } = require('@kaiachain/web3js-ext')\n\nconst provider = new Web3.providers.HttpProvider(\n  'https://public-en-kairos.node.kaia.io'\n)\nconst web3 = new Web3(provider)\n\n// Web3 V3. web3.eth.accounts.create(1).encrypt(\"password\")\nconst encryptedKey = `{\n    \"address\": \"029e786304c1531af3ac7db24a02448e543a099e\",\n    \"id\": \"9d492c95-b9e3-42e3-af73-5c77e932208d\",\n    \"version\": 3,\n    \"crypto\": {\n      \"cipher\": \"aes-128-ctr\",\n      \"cipherparams\": {\"iv\": \"bfcb88a1501e2bb1e6694c03da18953d\"},\n      \"ciphertext\": \"076510b4e25d5cfc31239bffcad6036fe543cbbb04b9f3ec719bf4f61b58fc05\",\n      \"kdf\": \"scrypt\",\n      \"kdfparams\": {\n        \"salt\": \"79124f05995aae98b3088d8365f59a6dfadd1c9ed249abae3c07733f4cbbee53\",\n        \"n\": 131072,\n        \"dklen\": 32,\n        \"p\": 1,\n        \"r\": 8\n      },\n      \"mac\": \"d70f83824c2c30dc5cd3a244d87147b6aa713a6000165789a82a467651284ac7\"\n    }\n  }`\n// const address = \"0x029e786304c1531aF3aC7db24A02448e543A099E\";\n// const key = \"0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\";\n\nconst password = 'password'\nconst password2 = 'password2'\n\nasync function main() {\n  web3.eth.accounts.wallet\n    .decrypt([JSON.parse(encryptedKey)], password)\n    .then((account) => {\n      console.log('\\ndecrypted address')\n      console.log(account[0].address)\n\n      console.log('\\ndecrypted privateKey')\n      console.log(account[0].privateKey)\n\n      web3.eth.accounts.wallet.encrypt(password2).then((encryptedKey2) => {\n        // Delete account before adding the same account already existing in the wallet.\n        web3.eth.accounts.wallet.remove(encryptedKey2[0].address)\n\n        web3.eth.accounts.wallet\n          .decrypt(encryptedKey2, password2)\n          .then((account2) => {\n            console.log('\\ndecrypted address with new password')\n            console.log(account2[0].address)\n\n            console.log('\\ndecrypted privateKey with new password')\n            console.log(account2[0].privateKey)\n          })\n      })\n    })\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node keystoreV3.js\n\ndecrypted address\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n\ndecrypted address with new password\n0x029e786304c1531af3ac7db24a02448e543a099e\n\ndecrypted privateKey with new password\n0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n```\n\n</CH.Code>\n\n---\n\nImport the Web3 class from the **@kaiachain/web3js-ext** package.\n\n```js keystoreV3.js focus=1\n\n```\n\n---\n\nSet up the **provider** and define a **web3** instance using the provider.\n\n```js keystoreV3.js focus=3:6\n\n```\n\n---\n\n**Encrypted key** and **password** information are declared.\n\n```js keystoreV3.js focus=8:29\n\n```\n\n---\n\nYou can also create a key with the **web3.eth.accounts.create().encrypt()** function.\n\n```js keystoreV3.js focus=8\n\n```\n\n---\n\nDecrypt **account** from the **encryptedKey** with the **password**.\n\n```js keystoreV3.js focus=35:36\n\n```\n\n---\n\nYou can check address and privateKey of the **account**.\n\n```js keystoreV3.js focus=38:42\n\n```\n\n---\n\nEncrypt the account with another **password2**. And it will make another **encryptedKey2**.\n\n```js keystoreV3.js focus=44\n\n```\n\n---\n\nRe-decrypt the **account2** from **encryptedKey2** with **password2** and check if the address and privateKey of the **account2** are same with the info of the **account** from **encryptedKey**.\n\n```js keystoreV3.js focus=45:56\n\n```\n\n---\n\nBecause the **account2** is same to **account** and already exists in the wallet, so we need to delete existing **account** with the **web3.eth.accounts.wallet.remove()** function before re-decrypting **account2**.\n\n```js keystoreV3.js focus=45:46\n\n```\n\n---\n\nExecute the main function.\n\n```js keystoreV3.js focus=61\n\n```\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/keystore/keystoreV4-multi. # V4 keystore multi\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 multi**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-multi.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\n// Klaytn V4 with multiple role-based keys. https://toolkit.kaia.io/misc/generateKeystore\nconst encryptedKey = `{\n    \"version\": 4,\n    \"id\":\"2d7ad5c1-880f-4920-9b8e-51f852c4802c\",\n    \"address\":\"0x17226c9b4e130551c258eb7b1cdc927c13998cd6\",\n    \"keyring\":[\n      [\n        {\n          \"ciphertext\":\"eb9bd884ac3cc8bf92e6b0082e9d07198bfc4c1223ccc6e5edf7452ad612b2b5\",\n          \"cipherparams\":{\"iv\":\"47faf7b0991a051eef698c73fc246f78\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"ba0a3e8dc49a04f8e590f8df5a590bc6e134b031ce10f46d73d4c459aa4c08f8\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"4978d7325e1b9b3ec9fdfd1ec709a5a86fdfade0297ea9ddeeb8c3a7a62ae898\"\n        }\n      ],\n      [\n        {\n          \"ciphertext\":\"1a80c8666bea1a8dfa3082b001ff64c818fb14cf4e02017785e0edcc7a277af4\",\n          \"cipherparams\":{\"iv\":\"eafbecc65ccc177a5579bf56d5f4ed31\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"6472845219e11e4de094cac8c32a6a4d13e69cd4507780a7a37f5e411e1d895d\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"86379236d2fd6e9bb3f99f7eebaa3325b51e9fa5ec150ade7a461555c0a14ca3\"\n        },\n        {\n          \"ciphertext\":\"0071c41d2956b12be5ebc08a9a5b3a9684b9e410fe2de91d614be977fb2a0bdb\",\n          \"cipherparams\":{\"iv\":\"1492dfb771030d3d9c9d996c193c03e5\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"f8145aa907a649866e0fbff86011244584ddc86559cf4901f8f69b670c234fd7\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"eacc58c1ad717ca375697c9fcc80f463a26600f5da1b21327715bf3efa047be5\"\n        }\n      ],\n      [\n        {\n          \"ciphertext\":\"68ffc1e2800a7288ba7baba0f0f8049daeed05379fabfdd3bc017fa85c49ab50\",\n          \"cipherparams\":{\"iv\":\"17f22d7b8aa1a8a2948fd3629f0b89ed\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"ff5e577ec8294320cfe59ef7b1b01ee44d4c9f19c8fbc31f333059c74eb8c6d2\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"de65d669be044df5e39e678b099424a8692a2da6f3746832862cf2e5d6ada612\"\n        },\n        {\n          \"ciphertext\":\"fd4810ee850f0aa5f61a2eafbfc5ca36cfebb42df5c2465cc8ae5188029b188b\",\n          \"cipherparams\":{\"iv\":\"b00ead13b38e449c268d09fced80ce49\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"af5dbbfb7383045dc7f8a3bfc56cccfc22a5150a1f87e454d40893a4b6fea9a1\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"6234352852eb18246b94f28f3c3454103289ecf2faaa91115927c53729bb0805\"\n        },\n        {\n          \"ciphertext\":\"03b758de6372aa6bedde513ccb282bf8af32bca227c258f3e0fc85ce454d72a4\",\n          \"cipherparams\":{\"iv\":\"5c20f3e96d0802eaf56670e57fbe3e98\"},\n          \"cipher\":\"aes-128-ctr\",\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"salt\":\"b5ec4e40f5a09a59e90317ce45eb7bcd73a2a9afe70f6f2e32548fd38ed2da3b\",\"n\":4096,\"r\":8,\"p\":1},\n          \"mac\":\"99b7f59855f0aa04531cc4a24c7923f75ed8052084de9ec49a2794e3899c3274\"\n        }\n      ]\n    ]\n  }`;\n// const address = \"0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6\";\n// const keys = [\n//   \"0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\",\n//   \"0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\", \"0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\",\n//   \"0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\", \"0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\", \"0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\"];\n\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\n// Be sure that decrypted Keystore v4 object is not supported to encrypt keystore v4 again.\n// so this example shows only decrypting Keystore v4 and encrypting it as keysotre v3.\n// Be sure the followings,\n//   1) klaytn address is lost when each account of keystore v4 is encrypted as keysotre v3,\n//      because keystore v3 does not support klaytn account system.\n//   2) web3.eth.accounts.decrypt & decryptList do not add account in web3.eth.accounts.wallet.\nasync function main() {\n  const accounts = await web3.eth.accounts.decryptList(encryptedKey, password);\n\n  console.log(\"decrypted (address, privateKey)\");\n  for (const account of accounts) {\n    console.log(account.address, \", \", account.privateKey);\n  }\n\n  console.log(\"\\ndecrypted (address, privateKey) with new password\");\n  for (const account of accounts) {\n    const v3encryptedKey = await account.encrypt(newPassword);\n    const newAccount = await web3.eth.accounts.decrypt(v3encryptedKey, newPassword);\n    console.log(newAccount.address, \", \", newAccount.privateKey);\n  }\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-multi.js\ndecrypted (address, privateKey)\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n```\n\n</CH.Code>\n\n---\n\nImport the Web3 class from the **@kaiachain/web3js-ext** package.\n\n```js keystoreV4-multi.js focus=1\n\n```\n---\n\nSet up the **provider** and define a **web3** instance using the provider.\n\n```js keystoreV4-multi.js focus=3:4\n\n```\n---\nDefine an encrypted multi keystore version 4\n\n```js keystoreV4-multi.js focus=7:67\n\n```\n---\nSpecify the current **password** of the keystore and a **new password**.\n\n```js keystoreV4-multi.js focus=74:75\n\n```\n---\n**Decrypt** the keystore with its **current password**\n\n```js keystoreV4-multi.js focus=84\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-multi.js focus=86:89\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey)\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n---\nYou can generate a **new keystore** using the **descrypted key** and a **new password**. Note that the new encrypted key will be keystore v3. Note that the ecrypted keystore has **version 3**\n\n```js keystoreV4-multi.js focus=91:96,77:82\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n<CH.Code>\n```js keystoreV4-multi.js focus=94:95\n\n```\n---\n\n```zsh output\ndecrypted (address, privateKey) with new password\n0x0cc57a3c4E276A37AB0A98ba6899CAf6037996fB ,  0x278c3d035328daf04ab2597da96dd2d8868fd61a8837030f7d8a85f27b7f1bad\n0x1F2f81B67d1A718c09221eBeb3F12a7192389663 ,  0xa06d13800719307ea7e2503ea441c2ea49279d0d600a2eec2887b50928869676\n0xF5D27139C99621859e8D1b0f6Be8BF3b8dAca609 ,  0xc32f4007ffad303db99dee0d79a720e1d70c4b2babf8e33cb28170a16bac467d\n0x7E39a9097C975E6A63f1e0ade4b7312cF2854F9c ,  0xc274d13302891d0d91a60891a48fde8c2860018f8dcb6293dcc0b28a238590b0\n0x09859661f2574E80C5a51EA3e0E29cA19D21f513 ,  0x83c127e5207b70086a702c93f1c9a041f15ce49ee5183ce848f35c64de196eff\n0x3AcFe8529FD4C2028f8A26805F9Bf9bAB2cc41eF ,  0x48f97204ac4886dfbd819ada04ea31a730c6fc43fcb08900566360ee7402f93b\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/keystore/keystoreV4-single. # V4 keystore single\n\nThis example demonstrates how to encrypt and decrypt **keystore V4 single**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js keystoreV4-single.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\n// Klaytn V4 with one key. kcn account new --lightkdf\nconst encryptedKey = `{\n    \"address\":\"ec5eaa07b4d3cbafe7bf437a1ea9a898209f617c\",\n    \"keyring\":[\n      [\n        {\n          \"cipher\":\"aes-128-ctr\",\n          \"ciphertext\":\"0a5aa3749b9e83c2a4238445aeb66f59355c0363a54c163e34e454f76e061e47\",\n          \"cipherparams\":{\"iv\":\"2a0b2e02a61e0f721bd800ea6e23a588\"},\n          \"kdf\":\"scrypt\",\n          \"kdfparams\":{\"dklen\":32,\"n\":4096,\"p\":6,\"r\":8,\"salt\":\"538ead57745bcd946b05fe294de08256628d9a0a393fd29ced933ba5fc045b07\"},\n          \"mac\":\"30b5488bc97165bc7ecac8ff8dfec65a75a8ad206450aecff0ac2dfea6f79b08\"\n        }\n      ]\n    ],\n    \"id\":\"362c0766-f5e3-4b4d-af22-7e89d5fb613a\",\n    \"version\":4\n  }`;\n// const address = \"0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c\";\n// const key = \"0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\";\n\nconst password = \"password\";\nconst newPassword = \"newPassword\";\n\nasync function main() {\n  const account = await web3.eth.accounts.decrypt(encryptedKey, password);\n\n  console.log(\"\\ndecrypted address\");\n  console.log(account.address);\n  console.log(\"decrypted privateKey\");\n  console.log(account.privateKey);\n\n  const encryptedKey2 = await account.encrypt(newPassword);\n  const account2 = await web3.eth.accounts.decrypt(encryptedKey2, newPassword);\n\n  console.log(\"\\ndecrypted address with new password\");\n  console.log(account2.address);\n  console.log(\"decrypted privateKey with new password\");\n  console.log(account2.privateKey);\n}\n\nmain();\n```\n---\n\n```zsh output\n❯ node keystoreV4-single.js\ndecrypted address\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c\ndecrypted privateKey\n0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n\ndecrypted address with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c\ndecrypted privateKey with new password\n0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n```\n\n</CH.Code>\n\n---\n\nImport the Web3 class from the **@kaiachain/web3js-ext** package.\n\n```js keystoreV4-single.js focus=1\n\n```\n---\n\nSet up the **provider** and define a **web3** instance using the provider.\n\n```js keystoreV4-single.js focus=3:4\n\n```\n---\nDefine an encrypted keystore **version 4**\n\n```js keystoreV4-single.js focus=7:23\n\n```\n---\nSpecify the **current password** of the keystore and a **new password**.\n\n```js keystoreV4-single.js focus=27:28\n\n```\n---\nLoad the keystore with its **current password**\n\n```js keystoreV4-single.js focus=31\n\n```\n---\nAfter decryped, you can access the **public** and **private** key.\n\n<CH.Code>\n```js keystoreV4-single.js focus=33:36\n\n```\n---\n\n```zsh output\ndecrypted address\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c\ndecrypted privateKey\n0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n---\nYou can generate a new keystore using the descrypted key and a new password.  Note that the new encrypted key will be a keystore v3. \n\n```js keystoreV4-single.js focus=38\n\n```\n---\nCheck the new keystore **public** and **private** key, it will differ from original one since keystore v3 **does not** support klaytn account system.\n\n<CH.Code>\n```js keystoreV4-single.js focus=39:44\n\n```\n---\n\n```zsh output\ndecrypted address with new password\n0xEc5eAa07b4d3CbAfe7bf437a1Ea9A898209F617c\ndecrypted privateKey with new password\n0x4062512193ef1dab8ccf3e3d7a4862e3c740bdf11d852954ed48bc73643e354f\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithLegacyExample.js\nconst { Web3, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  let tx = {\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithLegacyExample.js\nrawTx 0x08f87e05850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e98094b2ba72e1f84b7b8cb15487a2bf20328f2cf40c25f847f8458207f5a070d2c5f2dd52d6a3b7bba65594b2c875b8ce0473e16b06b43d5c2ec9ebfcd467a048af2fc51f75961a9cebfb1685b12d99db143bbd42a76f9c50970b807e1010b9\nsentTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignTxWithLegacyExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignTxWithLegacyExample.js focus=3:4\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithLegacyExample.js focus=5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithLegacyExample.js focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithLegacyExample.js focus=7\nconst { Web3, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25\";\nconst senderPriv = \"0xebceaca693ea3740231be94f38af6090d3aded336725d26a09b7d14e8e485e1e\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  let tx = {\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignTxWithLegacyExample.js focus=8\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithLegacyExample.js focus=9\n\n```\n\n---\n\nCreate a value transfer transaction, use `toPeb` helper to convert amount from **KLAY** to **Peb**\n\n```js SignTxWithLegacyExample.js focus=12:16\n\n```\n\n---\n\nSign the transaction with sender's **wallet**\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=18:19\n\n````\n---\n\n```zsh output\nsignedTx 0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=21:22\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xb2ba72e1f84b7B8Cb15487A2bf20328F2cF40c25',\n  contractAddress: null,\n  transactionIndex: 1,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x7eae10aa2fcd3c42ac1705b63ad025f972a222bb71d65feeb0000d92c2e73732',\n  transactionHash: '0xecb117338d7a0e7e9444886ebdab5d0e14fd1b02fa476fee839a2fc3b105f391',\n  logs: [],\n  blockNumber: 152256170,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x029636', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `web3.klay.recoverFromTransaction`\n\n<CH.Code>\n```js SignTxWithLegacyExample.js focus=24:26\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xb2ba72e1f84b7b8cb15487a2bf20328f2cf40c25 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithMultiSigExample.js\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst receiverAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount1 = web3.eth.accounts.privateKeyToAccount(senderPriv1);\nconst senderAccount2 = web3.eth.accounts.privateKeyToAccount(senderPriv2);\nconst senderAccount3 = web3.eth.accounts.privateKeyToAccount(senderPriv3);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature,\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const signResult1 = await senderAccount1.signTransaction(tx);\n  console.log(\"rawTx1\", signResult1.rawTransaction);\n\n  // sign 2: Rest of the signers sign from the rawTx\n  const signResult2 = await senderAccount2.signTransaction(signResult1.rawTransaction);\n  console.log(\"rawTx2\", signResult2.rawTransaction);\n\n  // sign 3: Last signer sign from the rawTx then send it\n  const signResult3 = await senderAccount3.signTransaction(signResult2.rawTransaction);\n  console.log(\"signedTx3\", signResult3.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult3.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult3.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithMultiSigExample.js\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\nsentTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignTxWithMultiSigExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **weighted multi-sig** private keys\n\n```js SignTxWithMultiSigExample.js focus=3:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithMultiSigExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithMultiSigExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithMultiSigExample.js focus=9\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst receiverAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount1 = web3.eth.accounts.privateKeyToAccount(senderPriv1);\nconst senderAccount2 = web3.eth.accounts.privateKeyToAccount(senderPriv2);\nconst senderAccount3 = web3.eth.accounts.privateKeyToAccount(senderPriv3);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    gasLimit: 100000,\n  };\n\n  // The example senderAddr actually requires only 2 signature,\n  // but we use 3 signatures to show different ways to sign a transaction.\n\n  // sign 1: First signer sign from the tx object\n  const signResult1 = await senderAccount1.signTransaction(tx);\n  console.log(\"rawTx1\", signResult1.rawTransaction);\n\n  // sign 2: Rest of the signers sign from the rawTx\n  const signResult2 = await senderAccount2.signTransaction(signResult1.rawTransaction);\n  console.log(\"rawTx2\", signResult2.rawTransaction);\n\n  // sign 3: Last signer sign from the rawTx then send it\n  const signResult3 = await senderAccount3.signTransaction(signResult2.rawTransaction);\n  console.log(\"signedTx3\", signResult3.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult3.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult3.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignTxWithMultiSigExample.js focus=10\n\n```\n\n---\n\nCreate 3 different wallets with the **weighted multi-sig** private keys and provider\n\n```js SignTxWithMultiSigExample.js focus=11:13\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer`\n\n```js SignTxWithMultiSigExample.js focus=16:22\n\n```\n\n---\n\nSign the transaction with **first** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=27:29\n\n````\n---\n\n```zsh output\nrawTx1 0x08f88676850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef847f8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **second** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=31:33\n\n````\n---\n\n```zsh output\nrawTx2 0x08f8cd76850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc100009482c6a8d94993d49cfd0c1d30f0f8caa65782cc7ef88ef8458207f6a008b987d8905dae51b856c478e6f7b49f01f5f2432a90c03d332e61d518100087a07bea2578790b7dabe9f2fe920d1f3183f48dc26d4ce752bf27964433317504e8f8458207f6a052dcb9cfd9edf75ea60aa7eafce1a984209722c81a6c17f4f26d4b79adcc2f03a03ef04d7793009b90f7af7831f834ad2892678f0f10f8d6e02d6d76b3e4671a1d\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with the **third** wallet\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=35:37\n\n````\n---\n\n```zsh output\nsignedTx3 0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network and print the **receipt**\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=39:40\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0xc738', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x6f5fca2355230874808c4fe1b8459c6d61cf7ba22b864aeba4c3cf61d7a49b99',\n  transactionHash: '0x1b3b4b8a177ead1602c5052d8c1145a2e9ffc53ac4ce208f4730177486726c6a',\n  logs: [],\n  blockNumber: 152258186,\n  confirmations: 6,\n  cumulativeGasUsed: BigNumber { _hex: '0x05f70f', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `web3.klay.recoverFromTransaction`\n\n<CH.Code>\n```js SignTxWithMultiSigExample.js focus=42:44\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e true\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithPubkeyExample.js\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    from: senderAddr,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithPubkeyExample.js\nrawTx 0x08f8868188850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094e15cd70a41dfb05e7214004d7d054801b2a2f06bf847f8458207f5a05e2299e8d947e8b39d3715ba3945535ad05da364ebc1fa168b3fea675cb27f60a05adf38401f83409216fd29aa6fb5b39f7113c0a49e2bb3e2003cb60baf2df7ac\nsentTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignTxWithPubkeyExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private keys**\n\n```js SignTxWithPubkeyExample.js focus=5:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithPubkeyExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithPubkeyExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithPubkeyExample.js focus=9\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    from: senderAddr,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignTxWithPubkeyExample.js focus=10\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignTxWithPubkeyExample.js focus=11\n\n```\n\n---\n\nCreate a value transfer transaction with `type: TxType.ValueTransfer`\n\n```js SignTxWithPubkeyExample.js focus=14:19\n\n```\n\n---\n\nSign the transaction with sender's **wallet**\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=21:22\n\n````\n---\n\n```zsh output\nsignedTx 0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e\n````\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network and print the **receipt**\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=24:25\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b',\n  contractAddress: null,\n  transactionIndex: 0,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0xc61b3f87368b60e95e061e991f2a51a238240a7e10dd746192e9f640395661e9',\n  transactionHash: '0x751ae9e74895cd899a51b5deab2d5e72103d06468cf1701d5925784808962d7e',\n  logs: [],\n  blockNumber: 152256785,\n  confirmations: 3,\n  cumulativeGasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `web3.klay.recoverFromTransaction`\n\n<CH.Code>\n```js SignTxWithPubkeyExample.js focus=27:29\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst txAccount = web3.eth.accounts.privateKeyToAccount(senderRoleTransactionPriv);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    gasLimit: 100000,\n  };\n\n  const signResult = await txAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignTxWithRoleBasedExample.js\nrawTx 0x08f88641850ba43b7400830186a094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc10000945bd2fb3c21564c023a4a735935a2b7a238c4cceaf847f8458207f6a04886eb1e6d8d5ee59fe4d125b40080409c3341fdc0a7e04b612e7d802edbeaeba0415c08f73a3789f6c27177bb5326579ffbe96f8e0db7090b08ce2fe059d949a9\nsentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignTxWithRoleBasedExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and role-based **private keys**\n\n```js SignTxWithRoleBasedExample.js focus=3:6\n\n```\n\n---\n\nDefine receiver's **address**\n\n```js SignTxWithRoleBasedExample.js focus=7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignTxWithRoleBasedExample.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignTxWithRoleBasedExample.js focus=9\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst txAccount = web3.eth.accounts.privateKeyToAccount(senderRoleTransactionPriv);\n\nasync function main() {\n  let tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    gasLimit: 100000,\n  };\n\n  const signResult = await txAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromTransaction(senderAddr, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignTxWithRoleBasedExample.js focus=10\n\n```\n\n---\n\nCreate a sender's **wallet** with the **transaction role** private key and provider\n\n```js SignTxWithRoleBasedExample.js focus=11\n\n```\n\n---\n\nCreate a **value transfer** transaction with `type: TxType.ValueTransfer`\n\n```js SignTxWithRoleBasedExample.js focus=14:20\n\n```\n\n---\n\nSign the transaction with the wallet that has role **sending transaction**\n\n<CH.Code>\n\n```js SignTxWithRoleBasedExample.js focus=22:23\n\n```\n\n---\n\n```zsh output\nsignedTx sentTx 0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477\n\n```\n\n</CH.Code>\n\n---\n\nSend the **signed transaction** to kaia network\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=25:26\n\n````\n---\n\n```zsh output\nreceipt {\n  to: '0xC40B6909EB7085590E1c26Cb3beCC25368e249E9',\n  from: '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA',\n  contractAddress: null,\n  transactionIndex: 2,\n  gasUsed: BigNumber { _hex: '0x5208', _isBigNumber: true },\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  blockHash: '0x74c7b258b81b75866cfa0b60a08be9aa23cdbd113eb314b2258b65f00475790e',\n  transactionHash: '0x3f7ee99c699ad2143bf0fac72dac1ff689c992e382e4705f7366aceaecc09477',\n  logs: [],\n  blockNumber: 152257043,\n  confirmations: 1,\n  cumulativeGasUsed: BigNumber { _hex: '0x062366', _isBigNumber: true },\n  effectiveGasPrice: BigNumber { _hex: '0x05d21dba00', _isBigNumber: true },\n  status: 1,\n  type: 0,\n  byzantium: true\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed transaction using `web3.klay.recoverFromTransaction`\n\n<CH.Code>\n```js SignTxWithRoleBasedExample.js focus=28:30\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithLegacyExample.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithLegacyExample.js\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignMsgWithLegacyExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithLegacyExample.js focus=3:4\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithLegacyExample.js focus=6\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithLegacyExample.js focus=6\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAddr);\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAddr);\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignMsgWithLegacyExample.js focus=7\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithLegacyExample.js focus=8\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithLegacyExample.js focus=11\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=12:14\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xcf6792ecd73ccc5efc1612f461bffa699e824a4ed64ec1073709c9d6b8c6daf608060326371544811e2015398f7e48ad839e1f3c551e8cb7c3c82f10d226bd671b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.eth.accounts.recover`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=16:18\n\n````\n\n---\n```zsh output\nrecoveredAddr lib 0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.klay.recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithLegacyExample.js focus=20:22\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithMultiSigExample.js\nconst { Web3, TxType, AccountKeyType, toPeb, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\nasync function main() {\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv1);\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAccount.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithMultiSigExample.js\n{\n  senderAddr: '0x2bf611d14d330fd3688d10f2201321eacc8aa2ce',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x514ad395399cb30533cd02f9681b44ed1452f5bb44289e5e2aa042fbc6ba6e2c393d7107e3f8341a240b30f481cc1fce0c66056ba8035c45fd66fcae086b409b1b'\n}\nrecoveredAddr lib 0x2bf611d14d330fD3688D10F2201321eACc8AA2Ce true\nrecoveredAddr rpc 0x2bf611d14d330fd3688d10f2201321eacc8aa2ce true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignMsgWithMultiSigExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key** and all **weighted multi-sig** private keys\n\n```js SignMsgWithMultiSigExample.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithMultiSigExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithMultiSigExample.js focus=8\nconst { Web3, TxType, AccountKeyType, toPeb, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x2bf611d14d330fd3688d10f2201321eacc8aa2ce\";\nconst senderPriv1 = \"0x31fadf868e68fd2e3f7a1c528023c9a86a45db850e9d6b82c1a82d4c75b469d1\";\nconst senderPriv2 = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderPriv3 = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\nasync function main() {\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv1);\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAccount.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignMsgWithMultiSigExample.js focus=9\n\n```\n\n---\n\nCreate a wallet with the first **weight multi-sig** private key and provider\n\n```js SignMsgWithMultiSigExample.js focus=12\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithMultiSigExample.js focus=13\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=14:16\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0x2bf611d14d330fd3688d10f2201321eacc8aa2ce',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x4bb3156dfd3349b974222b9ed754a3835802d920b63e8c07f41a75a174ce99d92a70d62e7a4b30d18599de61a882c59c0fd726883e3ce9955f8d5f60ce5b65211c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.eth.accounts.recover`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=18:20\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0x2bf611d14d330fd3688d10f2201321eacc8aa2ce true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.klay.recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithMultiSigExample.js focus=22:24\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0x2bf611d14d330fd3688d10f2201321eacc8aa2ce true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithPubkeyExample.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAccount.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithPubkeyExample.js\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignMsgWithPubkeyExample.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js SignMsgWithPubkeyExample.js focus=5:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithPubkeyExample.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithPubkeyExample.js focus=8\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xfb60ded0ae96fe04eed6450aead860aa9d57128e\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = senderAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === senderAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === senderAccount.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignMsgWithPubkeyExample.js focus=9\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js SignMsgWithPubkeyExample.js focus=10\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithPubkeyExample.js focus=13\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=14:16\n\n````\n---\n\n```zsh output\n{\n  senderAddr: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0xed55b92b3db953c4b4d928c99f93275d2590fe2ec95f2d8c069068d86d43ce0c0d1206f297351c6a0dfaba9c24d1a2ac293ac8f8a73d16c2b0c39ce90bc36ab71b'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.eth.accounts.recover`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=18:20\n\n````\n---\n\n```zsh output\nrecoveredAddr lib 0xA2a8854b1802D8Cd5De631E690817c253d6a9153 true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.klay.recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithPubkeyExample.js focus=22:24\n\n````\n---\n```zsh output\nrecoveredAddr rpc 0xa2a8854b1802d8cd5de631e690817c253d6a9153 true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SignMsgWithRoleBased.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst txAccount = web3.eth.accounts.privateKeyToAccount(senderRoleTransactionPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = txAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === txAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === txAccount.address.toLowerCase());\n}\n\nmain().catch(console.error);\n```\n\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n```\n\n</CH.Code>\n\n---\n\nImport the **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SignMsgWithRoleBased.js focus=1\n\n```\n\n---\n\nDefine sender's **address**, **private key** and others **role-based** private keys\n\n```js SignMsgWithRoleBased.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SignMsgWithRoleBased.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SignMsgWithRoleBased.js focus=8\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x334b4d3c775c45c59de54e9f0408cba25a1aece7\";\nconst senderRoleTransactionPriv = \"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\";\nconst senderRoleAccountUpdatePriv = \"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\";\nconst senderRoleFeePayerPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst txAccount = web3.eth.accounts.privateKeyToAccount(senderRoleTransactionPriv);\n\nasync function main() {\n  const msg = \"hello\";\n  const msghex = Web3.utils.utf8ToHex(msg);\n  const signResult = txAccount.sign(msg);\n  console.log({ senderAddr, msg, msghex, sig: signResult.signature });\n\n  const { v, r, s } = signResult;\n  const addr1 = web3.eth.accounts.recover(msg, v, r, s);\n  console.log(\"recoveredAddr lib\", addr1, addr1.toLowerCase() === txAccount.address.toLowerCase());\n\n  const sig = signResult.signature;\n  const addr2 = await web3.klay.recoverFromMessage(senderAddr, msghex, sig, \"latest\");\n  console.log(\"recoveredAddr rpc\", addr2, addr2.toLowerCase() === txAccount.address.toLowerCase());\n}\n\nmain().catch(console.error)\n```\n\n---\n\nDefine a **web3 instance** using the provider\n\n```js SignMsgWithRoleBased.js focus=9\n\n```\n\n---\n\nCreate a sender's wallet with the **transaction role** private key and **provider**\n\n```js SignMsgWithRoleBased.js focus=10\n\n```\n\n---\n\nDefine a message to be signed and recovered\n\n```js SignMsgWithRoleBased.js focus=13\n\n```\n\n---\n\nSign the message with sender's **wallet**\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=14:16\n\n````\n---\n\n```zsh output\n❯ js SignMsgWithRoleBased.js\n{\n  senderAddr: '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n  msg: 'hello',\n  msghex: '0x68656c6c6f',\n  sig: '0x736460622fcfab0fa7de0ca1cde05178f01b124294a640b5f5820c7271262c6c271f1ad15f0d7b974d68eaac60d5daa1e7dd65301bbfb814beecbca1238b64121c'\n}\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.eth.accounts.recover`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=18:20\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr lib 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA true\n````\n\n</CH.Code>\n\n---\n\nRecover the address from signed message using `web3.klay.recoverFromMessage`\n\n<CH.Code>\n```js SignMsgWithRoleBased.js focus=22:24\n\n````\n---\n```zsh output\n❯ js SignMsgWithRoleBasedExample.js\nrecoveredAddr rpc 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea true\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeAccountUpdate.js\nconst { KlaytnWeb3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const publicKey = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ publicKey });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: publicKey,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js TxTypeAccountUpdate.js\n{\n  publicKey: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\nsignedTx 0xb54dc3c351e9a1f9ce0a120344598482226a5646838d290e46d9704db521cb94\nreceipt {\n  blockHash: '0x8b729b293388e53e397fe00acbd84f449763743180df5dd51725962b540e0bda',\n  blockNumber: 148742746n,\n  cumulativeGasUsed: 41000n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  gasUsed: 41000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  transactionHash: '0xb54dc3c351e9a1f9ce0a120344598482226a5646838d290e46d9704db521cb94',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxTypeAccountUpdate.js focus=1:2\n\n```\n\n---\n\nDefine **sender address, sender private key and new private key** to be changed\n\n```js TxTypeAccountUpdate.js focus=6:8\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js TxTypeAccountUpdate.js focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeAccountUpdate.js focus=11\nconst { KlaytnWeb3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst senderNewPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const publicKey = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ publicKey });\n\n  const tx = {\n    type: TxType.AccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: publicKey,\n    }\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js TxTypeAccountUpdate.js focus=12\n\n```\n\n---\n\nCreate a sender's wallet with the **private key** and **provider**\n\n```js TxTypeAccountUpdate.js focus=13\n\n```\n\n---\n\nCompute the **public key** from the new private key\n\n<CH.Code>\n\n```js TxTypeAccountUpdate.js focus=15:16\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\n{\n  publicKey: '0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd'\n}\n```\n\n</CH.Code>\n\n---\n\nDeclare a transaction in the **key** field with the computed **public key**.\n\n```js TxTypeAccountUpdate.js focus=18:25\n\n```\n\n---\n\nSigning the transaction with the **sender**'s private key\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=27:28\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\nsignedTx 0xb54dc3c351e9a1f9ce0a120344598482226a5646838d290e46d9704db521cb94\n````\n\n</CH.Code>\n\n---\n\nSend the signed tx to the blockchain. It will return the **receipt** of the transaction\n\n<CH.Code>\n```js TxTypeAccountUpdate.js focus=30:31\n\n````\n\n---\n\n```zsh output\n❯ node TxTypeAccountUpdate.js\nreceipt {\n  blockHash: '0x8b729b293388e53e397fe00acbd84f449763743180df5dd51725962b540e0bda',\n  blockNumber: 148742746n,\n  cumulativeGasUsed: 41000n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  gasUsed: 41000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n  transactionHash: '0xb54dc3c351e9a1f9ce0a120344598482226a5646838d290e46d9704db521cb94',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxCancelType.js\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js TxCancelType.js\nsignedTx 0xe9a22708a547b5db4b1787603bdeed4b530b83ca2ba277dffba265061e675896\nreceipt {\n  blockHash: '0x8d3772ae12e4ef79b22631a10d02b2b731e3b099327fd58367e3374639aed4ca',\n  blockNumber: 148742706n,\n  cumulativeGasUsed: 21000n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  transactionHash: '0xe9a22708a547b5db4b1787603bdeed4b530b83ca2ba277dffba265061e675896',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxCancelType.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js TxCancelType.js focus=4:5\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js TxCancelType.js focus=8\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxCancelType.js focus=8\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.Cancel,\n    from: senderAddr,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js TxCancelType.js focus=9\n\n```\n\n---\n\nConvert the sender's private key to an account using **web3.eth.accounts.privateKeyToAccount**\n\n```js TxCancelType.js focus=10\n\n```\n\n---\n\nDefine a transaction object for the Cancel transaction, params `type: TxType.Cancel` and `from: senderAddr` are required\n\n```js TxCancelType.js focus=12:15\n\n```\n\n---\n\nSign the transaction with the **sender**'s account\n\n<CH.Code>\n```js TxCancelType.js focus=17:18\n\n````\n\n\n---\n\n```zsh output\n❯ node TxCancelType.js\nsignedTx 0xe9a22708a547b5db4b1787603bdeed4b530b83ca2ba277dffba265061e675896\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction to blockchain and print the **receipt**\n\n<CH.Code>\n```js TxCancelType.js focus=20:21\n\n````\n\n\n---\n\n```zsh output\n❯ node TxCancelType.js\nreceipt {\n  blockHash: '0x8d3772ae12e4ef79b22631a10d02b2b731e3b099327fd58367e3374639aed4ca',\n  blockNumber: 148742706n,\n  cumulativeGasUsed: 21000n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  transactionHash: '0xe9a22708a547b5db4b1787603bdeed4b530b83ca2ba277dffba265061e675896',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```js txTypeLegacyTransaction.js\nconst { Web3, KlaytnWeb3, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const tx = {\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    from: senderAddr,\n  };\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n  const senderTx = await web3.eth.accounts.signTransaction(tx, senderAccount.privateKey);\n  console.log(senderTx);\n  const sendResult = await web3.eth.sendSignedTransaction(senderTx.rawTransaction);\n  const receipt = await web3.eth.getTransactionReceipt(sendResult.transactionHash);\n  console.log({ receipt });\n}\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsignedTx 0x96b41f32f35f38ddd3e21aed8e8aa929ea6514ecf9f0b898014b00734056cc47\nreceipt {\n  blockHash: '0x5899dcdd7346e6b98872f93d9d74d39a118db628e8b75c08a5094b5ae2ef6314',\n  blockNumber: 148742598n,\n  cumulativeGasUsed: 205837n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x96b41f32f35f38ddd3e21aed8e8aa929ea6514ecf9f0b898014b00734056cc47',\n  transactionIndex: 1n,\n  type: 2n\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js txTypeLegacyTransaction.js focus=1\n\n```\n\n---\n\nDefine **sender, reciver address and sender private key**\n\n```js txTypeLegacyTransaction.js focus=2:4\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js txTypeLegacyTransaction.js focus=6\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js txTypeLegacyTransaction.js focus=6\nconst { Web3, KlaytnWeb3, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst receiverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const tx = {\n    to: receiverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n    from: senderAddr,\n  };\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n  const senderTx = await web3.eth.accounts.signTransaction(tx, senderAccount.privateKey);\n  console.log(senderTx);\n  const sendResult = await web3.eth.sendSignedTransaction(senderTx.rawTransaction);\n  const receipt = await web3.eth.getTransactionReceipt(sendResult.transactionHash);\n  console.log({ receipt });\n}\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js txTypeLegacyTransaction.js focus=7\n\n```\n\n---\n\nDefine transaction data with from (the sender address), to (receiver address), value (amount to transfer, use **toPeb** to set the value in Klay then it will be converted)\n\n```js txTypeLegacyTransaction.js focus=8:12\n\n```\n\n---\n\nThe **privateKeyToAccount** method create account instance from sender's private key.\n\n```js txTypeLegacyTransaction.js focus=13\n\n```\n\n---\n\nThe **signTransaction** method signs transaction with sender account.\n\n<CH.Code>\n```js txTypeLegacyTransaction.js focus=14:15\n\n````\n\n---\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsignedTx 0x96b41f32f35f38ddd3e21aed8e8aa929ea6514ecf9f0b898014b00734056cc47\n````\n\n</CH.Code>\n\n---\n\nThe **sendSignedTransaction** method send the signed transaction into blockchain.\n\n```js txTypeLegacyTransaction.js focus=16\n\n```\n\n---\n\nThe **getTransactionReceipt** method returns the receipt of transaction.\n\n```js txTypeLegacyTransaction.js focus=17\n\n```\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n\n```js txTypeLegacyTransaction.js focus=18\n\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nreceipt {\n  blockHash: '0x5899dcdd7346e6b98872f93d9d74d39a118db628e8b75c08a5094b5ae2ef6314',\n  blockNumber: 148742598n,\n  cumulativeGasUsed: 205837n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x96b41f32f35f38ddd3e21aed8e8aa929ea6514ecf9f0b898014b00734056cc47',\n  transactionIndex: 1n,\n  type: 2n\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SmartContractDeploy.js\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst bytecode = \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    data: bytecode, // both 'data' and 'input' works\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js SmartContractDeploy.js\nsignedTx 0x07b3209f1e56484f9a61885b25ddb398668b6d423ca98fea5004f1a1b87d1532\nreceipt {\n  blockHash: '0x8a5cde9fd5b5f8dba974b4d5207cdb728a7e07cc9f595ef8e6284f1681a45e8b',\n  blockNumber: 148742566n,\n  contractAddress: '0xbb1e6520d31d7d046e993a436e0f9c054ac37efb',\n  cumulativeGasUsed: 130317n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 130317n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x07b3209f1e56484f9a61885b25ddb398668b6d423ca98fea5004f1a1b87d1532',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SmartContractDeploy.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js SmartContractDeploy.js focus=4:5\n\n```\n\n---\n\nSmart contract **bytecode** to deploy, you can retreive it from compiled solidity code\n\n```js SmartContractDeploy.js focus=6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SmartContractDeploy.js focus=9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SmartContractDeploy.js focus=9\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst bytecode = \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.SmartContractDeploy,\n    from: senderAddr,\n    data: bytecode, // both 'data' and 'input' works\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js SmartContractDeploy.js focus=10\n\n```\n\n---\n\nConvert the sender's private key to an account using **web3.eth.accounts.privateKeyToAccount**\n\n```js SmartContractDeploy.js focus=11\n\n```\n\n---\n\nDefine a transaction object for the Cancel transaction\n\n```js SmartContractDeploy.js focus=13:19\n\n```\n\n---\n\nSet `type: TxType.SmartContractDeploy` for the transaction type of deploying contract\n\n```js SmartContractDeploy.js focus=14\n\n```\n\n---\n\nSet `data: bytecode` or `input: bytecode` for the source of the contract\n\n```js SmartContractDeploy.js focus=16\n\n```\n\n---\n\nSet params **from, humanReadable, codeFormat** as value in example\n\n```js SmartContractDeploy.js focus=15,17,18\n\n```\n\n---\n\nSign the transaction with the **sender**'s account\n\n<CH.Code>\n\n```js SmartContractDeploy.js focus=21:22\n\n```\n\n---\n\n```zsh output\n❯ node SmartContractDeploy.js\nsignedTx 0x07b3209f1e56484f9a61885b25ddb398668b6d423ca98fea5004f1a1b87d1532\n```\n\n</CH.Code>\n\n---\n\nSend the signed transaction to the kaia network. It will return the transaction receipt\n\n<CH.Code>\n```js SmartContractDeploy.js focus=24:25\n\n````\n\n\n---\n\n```zsh output\n❯ node SmartContractDeploy.js\nreceipt {\n  blockHash: '0x8a5cde9fd5b5f8dba974b4d5207cdb728a7e07cc9f595ef8e6284f1681a45e8b',\n  blockNumber: 148742566n,\n  contractAddress: '0xbb1e6520d31d7d046e993a436e0f9c054ac37efb',\n  cumulativeGasUsed: 130317n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 130317n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x07b3209f1e56484f9a61885b25ddb398668b6d423ca98fea5004f1a1b87d1532',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js SmartContractExecution.js\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst contractAddr = \"0xD7fA6634bDDe0B2A9d491388e2fdeD0fa25D2067\";\nconst contractAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"newNumber\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setNumber\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  // https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-encodeabi\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const data = contract.methods.setNumber(0x123).encodeABI();\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node SmartContractExecution.js\nsignedTx 0x6e3843d8fe5ef53b4642d82357d423dfb2741a96a9a74307df2bd7caee5659f0\nreceipt {\n  blockHash: '0x4670feb1301e6b726568e81ea084b2b1c7d281c8d989faec8522d67af0cc8870',\n  blockNumber: 148742541n,\n  cumulativeGasUsed: 26990n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 26990n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xd7fa6634bdde0b2a9d491388e2fded0fa25d2067',\n  transactionHash: '0x6e3843d8fe5ef53b4642d82357d423dfb2741a96a9a74307df2bd7caee5659f0',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js SmartContractExecution.js focus=1:2\n\n```\n\n---\n\nDefine **sender address and sender private key**\n\n```js SmartContractExecution.js focus=4:5\n\n```\n\n---\n\nDefine contract address and Abi, you can retreive it from block explorer and compiled solidity code\n\n```js SmartContractExecution.js focus=6:21\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js SmartContractExecution.js focus=24\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js SmartContractExecution.js focus=24\nconst { KlaytnWeb3, TxType } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst contractAddr = \"0xD7fA6634bDDe0B2A9d491388e2fdeD0fa25D2067\";\nconst contractAbi = [\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"newNumber\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"setNumber\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  // https://web3js.readthedocs.io/en/v1.2.11/web3-eth-contract.html#methods-mymethod-encodeabi\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const data = contract.methods.setNumber(0x123).encodeABI();\n\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js SmartContractExecution.js focus=25\n\n```\n\n---\n\nConvert the sender's private key to an account using **web3.eth.accounts.privateKeyToAccount**\n\n```js SmartContractExecution.js focus=26\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js SmartContractExecution.js focus=29\n\n```\n\n---\n\nEncode the function data for the \"setNumber\" function to convert the data to bytes\n\n```js SmartContractExecution.js focus=30\n\n```\n\n---\n\nDefine a transaction object for the contract execution, params `type: TxType.SmartContractExecution`, `from: senderAddr`, `to: contractAddr`, `data: data` are required\n\n```js SmartContractExecution.js focus=32:37\n\n```\n\n---\n\nSign the transaction with the **sender**'s private key\n\n<CH.Code>\n```js SmartContractExecution.js focus=39:40\n\n````\n\n\n---\n\n```zsh output\n❯ node SmartContractExecution.js\nsignedTx 0x6e3843d8fe5ef53b4642d82357d423dfb2741a96a9a74307df2bd7caee5659f0\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n```js SmartContractExecution.js focus=42:43\n\n````\n\n\n---\n\n```zsh output\n❯ node SmartContractExecution.js\nreceipt {\n  blockHash: '0x4670feb1301e6b726568e81ea084b2b1c7d281c8d989faec8522d67af0cc8870',\n  blockNumber: 148742541n,\n  cumulativeGasUsed: 26990n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 26990n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xd7fa6634bdde0b2a9d491388e2fded0fa25d2067',\n  transactionHash: '0x6e3843d8fe5ef53b4642d82357d423dfb2741a96a9a74307df2bd7caee5659f0',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeValueTransferMemo.js\nconst { KlaytnWeb3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n    gasLimit: 50000,\n    data: \"0x1234567890\",\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\nsignedTx 0x237f8d5598bb5235ba87b0e9fc8ded203c6dd270cc71f1add0ae47c63d13da5d\nreceipt {\n  blockHash: '0x90b6753c8fa1ee401775c57974318bb6c0746834170f4d0a132b8a9d10fb37f5',\n  blockNumber: 148742510n,\n  cumulativeGasUsed: 21500n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21500n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x237f8d5598bb5235ba87b0e9fc8ded203c6dd270cc71f1add0ae47c63d13da5d',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxTypeValueTransferMemo.js focus=1:2\n\n```\n\n---\n\nDefine **sender, receiver address and sender private key**\n\n```js TxTypeValueTransferMemo.js focus=4:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js TxTypeValueTransferMemo.js focus=9\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```js TxTypeValueTransferMemo.js focus=9\nconst { KlaytnWeb3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.ValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n    gasLimit: 50000,\n    data: \"0x1234567890\",\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js TxTypeValueTransferMemo.js focus=10\n\n```\n\n---\n\nDefine the transaction object.\n\n```js TxTypeValueTransferMemo.js focus=13:20\n\n```\n\n---\n\nSign the transaction with the sender's account.\n\n<CH.Code>\n```js TxTypeValueTransferMemo.js focus=22\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\n\nrawTx 0x10f88d8202fd852e69f6baec82c35094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f6a0f6bd0d0d26aab4b3a41e7f0229e807a0f1a288d27bdbb700824fbea1ef4f39d3a0235a52f266024657da87e8b1f8ebf7acfe10f7a7a3cf3f7b2c2e34b16b7c1bad\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction to the kaia network.\n\n<CH.Code>\n```node TxTypeValueTransferMemo.js focus=25:26\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeValueTransferMemo.js\n\nreceipt {\n  blockHash: '0x9cd046da67fe4b422533443687b0223fd0e9c0ddb575ad3b9f5e018022017e41',\n  blockNumber: 143464955n,\n  cumulativeGasUsed: 364363n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x5a445950d65a5c82d7ea22eaa4089d46a54bd814c4c801dffeeea727bfb149d9',\n  transactionIndex: 2n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/basic-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js\nconst { KlaytnWeb3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node txTypeLegacyTransaction.js\nsignedTx 0x9f7ef299e96a4648ccef2195897380ecd2bed589aac93d8711049e864dcdbca8\nreceipt {\n  blockHash: '0x07fa42d5461f851a38014ff9a1f0b042d7ea79de63c487cdef28f15db37e7328',\n  blockNumber: 148742320n,\n  cumulativeGasUsed: 205837n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x9f7ef299e96a4648ccef2195897380ecd2bed589aac93d8711049e864dcdbca8',\n  transactionIndex: 1n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js txTypeValueTransferTransaction.js focus=1:2\n\n```\n\n---\n\nDefine **sender, receiver address and sender private key**\n\n```js txTypeValueTransferTransaction.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js txTypeValueTransferTransaction.js focus=9\n\n```\n\n---\n\nAlso, you can change the default provider. For example, using the alchemy provider.\n\n```js txTypeValueTransferTransaction.js focus=9\nconst { KlaytnWeb3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.ValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\", \"KLAY\"),\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"rawTx\", signResult.rawTransaction);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **KlaytnWeb3** instance using the provider\n\n```js txTypeValueTransferTransaction.js focus=10\n\n```\n\n---\n\nDeclare transaction params such as **type, from, to, value**\n\n```js txTypeValueTransferTransaction.js focus=12:17\n\n```\n\n---\n\nSign the transaction with **sender** account\n\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js focus=19:21\n\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.js\nsignedTx 0x9f7ef299e96a4648ccef2195897380ecd2bed589aac93d8711049e864dcdbca8\n```\n\n</CH.Code>\n\n---\n\nSend the signed transaction to blockchain and print the **receipt**\n\n<CH.Code>\n\n```js txTypeValueTransferTransaction.js focus=22:24\n\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.js\nreceipt {\n  blockHash: '0x07fa42d5461f851a38014ff9a1f0b042d7ea79de63c487cdef28f15db37e7328',\n  blockNumber: 148742320n,\n  cumulativeGasUsed: 205837n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 21000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x9f7ef299e96a4648ccef2195897380ecd2bed589aac93d8711049e864dcdbca8',\n  transactionIndex: 1n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedAccountUpdate.js\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x30908464d76604420162a6c880c0e1c7e641bad7\";\nconst senderPriv = \"0xf8cc7c3813ad23817466b1802ee805ee417001fcce9376ab8728c92dd8ea0a6b\";\nconst senderNewPriv = \"0xf8cc7c3813ad23817466b1802ee805ee417001fcce9376ab8728c92dd8ea0a6b\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const publicKey = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ publicKey });\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: publicKey\n    },\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js TxTypeFeeDelegatedAccountUpdate.js\n{\n  publicKey: '0x02dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8'\n}\nsenderTxHashRLP 0x21f88d0c850ba43b7400830205949430908464d76604420162a6c880c0e1c7e641bad7a302a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8f847f8458207f6a06aa4e32d36dd96da8cb0f2404d81302d855defbaabf4fdbf176aabf415179564a02161361ff91f14ebccc265c55c6dff8f4fbba4b467da07c1283d8e5991051cb0\nsignedTx 0xbf72aae23989ca58eabfca9bd84b1ad9d60354e22b55102f5f5d4af18725a58e\nreceipt {\n  blockHash: '0x8d14709da1890fcefa545bdc4f4bccacbed948d799db2c34c9eb87deeb3b1e08',\n  blockNumber: 148744920n,\n  cumulativeGasUsed: 429478n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x30908464d76604420162a6c880c0e1c7e641bad7',\n  gasUsed: 51000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0x30908464d76604420162a6c880c0e1c7e641bad7',\n  transactionHash: '0xbf72aae23989ca58eabfca9bd84b1ad9d60354e22b55102f5f5d4af18725a58e',\n  transactionIndex: 2n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=1\n\n```\n\n---\n\nDefine **sender address**, **sender private key** and **new private key** to be changed\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=5:7\n\n```\n\n---\n\nDefine **fee payer address** and **private key**\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=8:9\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=11:12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=11\nconst { Web3, TxType, AccountKeyType, getPublicKeyFromPrivate } = require(\"@kaiachain/web3js-ext\");\n\n// Using senderPriv == senderNewPriv to execute this example repeatedly.\n// But you might want to register a different private key.\nconst senderAddr = \"0x30908464d76604420162a6c880c0e1c7e641bad7\";\nconst senderPriv = \"0xf8cc7c3813ad23817466b1802ee805ee417001fcce9376ab8728c92dd8ea0a6b\";\nconst senderNewPriv = \"0xf8cc7c3813ad23817466b1802ee805ee417001fcce9376ab8728c92dd8ea0a6b\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const publicKey = getPublicKeyFromPrivate(senderNewPriv);\n  console.log({ publicKey });\n\n  const tx = {\n    type: TxType.FeeDelegatedAccountUpdate,\n    from: senderAddr,\n    key: {\n      type: AccountKeyType.Public,\n      key: publicKey\n    },\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=13\n\n```\n\n---\n\nCreate a **fee payer's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=14\n\n```\n\n---\n\nGenerating the **public key** from the **new private key** using `getPublicKeyFromPrivate`\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=17:18\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\n{\n  publicKey: '0x02dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8'\n}\n````\n\n</CH.Code>\n\n---\n\nCreating a transaction object with `type: TxType.FeeDelegatedAccountUpdate` and `key` contains new public key\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=20:29\n\n```\n\n---\n\nSign the transaction with the **sender** account\n\n<CH.Code>\n\n```js TxTypeFeeDelegatedAccountUpdate.js focus=29:31\n\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\nsenderTxHashRLP 0x21f88d0c850ba43b7400830205949430908464d76604420162a6c880c0e1c7e641bad7a302a102dbac81e8486d68eac4e6ef9db617f7fbd79a04a3b323c982a09cdfc61f0ae0e8f847f8458207f6a06aa4e32d36dd96da8cb0f2404d81302d855defbaabf4fdbf176aabf415179564a02161361ff91f14ebccc265c55c6dff8f4fbba4b467da07c1283d8e5991051cb0\n```\n\n</CH.Code>\n\n---\n\nUse **fee payer** account to sign the transaction with `signTransactionAsFeePayer`\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=33:35\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\nsignedTx 0xbf72aae23989ca58eabfca9bd84b1ad9d60354e22b55102f5f5d4af18725a58e\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction to blockchain with `web3.eth.sendSignedTransaction`. It will return the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedAccountUpdate.js focus=37:38\n\n````\n\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedAccountUpdate.js\nreceipt {\n  blockHash: '0x8d14709da1890fcefa545bdc4f4bccacbed948d799db2c34c9eb87deeb3b1e08',\n  blockNumber: 148744920n,\n  cumulativeGasUsed: 429478n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x30908464d76604420162a6c880c0e1c7e641bad7',\n  gasUsed: 51000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0x30908464d76604420162a6c880c0e1c7e641bad7',\n  transactionHash: '0xbf72aae23989ca58eabfca9bd84b1ad9d60354e22b55102f5f5d4af18725a58e',\n  transactionIndex: 2n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxFeeDelegatedCancel.js\nconst { KlaytnWeb3, TxType, parseTransaction } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderRawTx\", signResult1.rawTransaction);\n  console.log(\"senderTx\", parseTransaction(signResult1.rawTransaction));\n\n  // Next step is usually done in the backend by the service provider.\n  // But for the sake of demonstration, feePayer signature is done here.\n\n  const feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"rawTx\", signResult2.rawTransaction);\n  console.log(\"tx\", parseTransaction(signResult2.rawTransaction));\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ js TxFeeDelegatedCancel.js\nsenderTxHashRLP 0x39f86b8203ba850ba43b74008302059494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a00a348d88278e74688124d4cd3996eed20fba6d5b3e10203d2d52395aab8abfbca031a4213782de0ccaed08a5b08e8e1294e2c8e85f4d758688f96c3e58373c3fed\nsignedTx 0x8b7fa96dd12a54c077020ddbfdb4114254312bfdbb361cf9479610afe1ba381c\nreceipt {\n  blockHash: '0xbb38361be83e6af540b71875824e05a8be986209c0c083eafee07ca35e811334',\n  blockNumber: 148744957n,\n  cumulativeGasUsed: 179526n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  transactionHash: '0x8b7fa96dd12a54c077020ddbfdb4114254312bfdbb361cf9479610afe1ba381c',\n  transactionIndex: 1n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxFeeDelegatedCancel.js focus=1:2\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses, and their \\*private keys\\*\\*\n\n```js TxFeeDelegatedCancel.js focus=4:7\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js TxFeeDelegatedCancel.js focus=10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxFeeDelegatedCancel.js focus=10\nconst { KlaytnWeb3, TxType, parseTransaction } = require(\"@kaiachain/web3js-ext\");\nconst { Web3 } = require(\"web3\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nasync function main() {\n  const provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\n  const web3 = new KlaytnWeb3(provider);\n  const senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n  const tx = {\n    type: TxType.FeeDelegatedCancel,\n    from: senderAddr,\n  };\n\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderRawTx\", signResult1.rawTransaction);\n  console.log(\"senderTx\", parseTransaction(signResult1.rawTransaction));\n\n  // Next step is usually done in the backend by the service provider.\n  // But for the sake of demonstration, feePayer signature is done here.\n\n  const feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"rawTx\", signResult2.rawTransaction);\n  console.log(\"tx\", parseTransaction(signResult2.rawTransaction));\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a `KlaytnWeb3` instance using the provider\n\n```js TxFeeDelegatedCancel.js focus=11\n\n```\n\n---\n\nConvert the sender's private key to an account with `privateKeyToAccount`\n\n```js TxFeeDelegatedCancel.js focus=12\n\n```\n\n---\n\nDefine a **FeeDelegatedCancel** transaction with params: `type: TxType.FeeDelegatedCancel`, `from: senderAddr`\n\n```js TxFeeDelegatedCancel.js focus=14:17\n\n```\n\n---\n\nSign the transaction with the **sender** account\n\n<CH.Code>\n```js TxFeeDelegatedCancel.js focus=19:21\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancel.js\nsenderTxHashRLP 0x39f86b8203ba850ba43b74008302059494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a00a348d88278e74688124d4cd3996eed20fba6d5b3e10203d2d52395aab8abfbca031a4213782de0ccaed08a5b08e8e1294e2c8e85f4d758688f96c3e58373c3fed\n````\n\n</CH.Code>\n\n---\n\nConvert the fee payer's private key to an account\n\n```js TxFeeDelegatedCancel.js focus=26\n\n```\n\n---\n\nSign the transaction as a fee payer\n\n<CH.Code>\n```js TxFeeDelegatedCancel.js focus=27:29\n\n````\n\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancel.js\nsignedTx 0x8b7fa96dd12a54c077020ddbfdb4114254312bfdbb361cf9479610afe1ba381c\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction and log the receipt\n\n<CH.Code>\n\n```js TxFeeDelegatedCancel.js focus=31:32\n\n```\n\n---\n\n```zsh output\n❯ node TxFeeDelegatedCancel.js\nreceipt {\n  blockHash: '0xbb38361be83e6af540b71875824e05a8be986209c0c083eafee07ca35e811334',\n  blockNumber: 148744957n,\n  cumulativeGasUsed: 179526n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  transactionHash: '0x8b7fa96dd12a54c077020ddbfdb4114254312bfdbb361cf9479610afe1ba381c',\n  transactionIndex: 1n,\n  type: 0n\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js FeeDelegatedSmartContractDeployExample.js\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    data: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractDeployExample.js\nsenderTxHashRLP 0x29f901888203b9850ba43b74008304f8a1808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f6a0a480e856acb96964dee71443f7c1cdae7681df5073c6a0a81b2651172bd227b3a0249072c7e4f0dfc54af5f1bfaae187dda4f9b8d5dde0a93172cd10a1f6617ca4\nsignedTx 0x57cf3bfddf3e72effc39e80b9cb6995273822e51d50f55da93a14574b5dae9d1\nreceipt {\n  blockHash: '0x84f6aefd1ee6425e03cd8571fbfb653cf5971c729e7b3864456bb36bfd212622',\n  blockNumber: 148744885n,\n  contractAddress: '0x661c557c1b7c2b1fbd6c4793d210cd1e421064e9',\n  cumulativeGasUsed: 333958n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 140317n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x57cf3bfddf3e72effc39e80b9cb6995273822e51d50f55da93a14574b5dae9d1',\n  transactionIndex: 1n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js FeeDelegatedSmartContractDeployExample.js focus=1:2\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js FeeDelegatedSmartContractDeployExample.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js FeeDelegatedSmartContractDeployExample.js focus=8:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js FeeDelegatedSmartContractDeployExample.js focus=8\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractDeploy,\n    from: senderAddr,\n    data: \"0x608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c63430008120033\",\n    humanReadable: false, // must be false\n    codeFormat: 0, // must be 0\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js FeeDelegatedSmartContractDeployExample.js focus=10\n\n```\n\n---\n\nCreate a **fee payer's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js FeeDelegatedSmartContractDeployExample.js focus=11\n\n```\n\n---\n\nDefine a transaction object\n\n```js FeeDelegatedSmartContractDeployExample.js focus=14:19\n\n```\n\n---\n\nSet `type: TxType.FeeDelegatedSmartContractDeploy` for transaction to deploy a new contract with a fee payer\n\n```js FeeDelegatedSmartContractDeployExample.js focus=15\n\n```\n\n---\n\nSet `data: \"0x60806040...` is the bytecode of the compile solidity source code\n\n```js FeeDelegatedSmartContractDeployExample.js focus=17\n\n```\n\n---\n\nSet others required parameters such as **senderAddr**, **humanReadable**, **codeFormat**\n\n```js FeeDelegatedSmartContractDeployExample.js focus=16,18,19\n\n```\n\n---\n\nSign the transaction with **sender** account using `signTransaction`\n\n<CH.Code>\n```js FeeDelegatedSmartContractDeployExample.js focus=22:24\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractDeployExample.js\nsenderTxHashRLP 0x29f901888203b9850ba43b74008304f8a1808094a2a8854b1802d8cd5de631e690817c253d6a9153b90116608060405234801561001057600080fd5b5060f78061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80633fb5c1cb1460415780638381f58a146053578063d09de08a14606d575b600080fd5b6051604c3660046083565b600055565b005b605b60005481565b60405190815260200160405180910390f35b6051600080549080607c83609b565b9190505550565b600060208284031215609457600080fd5b5035919050565b60006001820160ba57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e0f4e7861cb6d7acf0f61d34896310975b57b5bc109681dbbfb2e548ef7546b364736f6c634300081200338080f847f8458207f6a0a480e856acb96964dee71443f7c1cdae7681df5073c6a0a81b2651172bd227b3a0249072c7e4f0dfc54af5f1bfaae187dda4f9b8d5dde0a93172cd10a1f6617ca4\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **fee payer** account using `signTransactionAsFeePayer`\n\n<CH.Code>\n```js FeeDelegatedSmartContractDeployExample.js focus=26:28\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractDeployExample.js\nsignedTx 0x57cf3bfddf3e72effc39e80b9cb6995273822e51d50f55da93a14574b5dae9d1\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n\n```js FeeDelegatedSmartContractDeployExample.js focus=30:31\n\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractDeployExample.js\nreceipt {\n  blockHash: '0x84f6aefd1ee6425e03cd8571fbfb653cf5971c729e7b3864456bb36bfd212622',\n  blockNumber: 148744885n,\n  contractAddress: '0x661c557c1b7c2b1fbd6c4793d210cd1e421064e9',\n  cumulativeGasUsed: 333958n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 140317n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x57cf3bfddf3e72effc39e80b9cb6995273822e51d50f55da93a14574b5dae9d1',\n  transactionIndex: 1n,\n  type: 0n\n}\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js FeeDelegatedSmartContractExecution.js\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nconst contractAddr = \"0xD7fA6634bDDe0B2A9d491388e2fdeD0fa25D2067\";\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const data = contract.methods.setNumber(0x123).encodeABI();\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a68203b8850ba43b74008301087994d7fa6634bdde0b2a9d491388e2fded0fa25d20678094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f5a07d40391ae45f7d515becb1aff3b99e7d8b05299b268daa623fb045d981d89c44a0117c23ab37da35ce5206525852ce27f7edc9401e0ee8069a9a396daa64d0c85d\nsignedTx 0xfa69f712a8d748e294caa1b95df51f8974a0bcf620af6c1b8a7614999a20b447\nreceipt {\n  blockHash: '0x4f852e6a2d320287f20cf34c24546f51f53ebdbbc4a4cacee93525e678abf275',\n  blockNumber: 148744853n,\n  cumulativeGasUsed: 36990n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 36990n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xd7fa6634bdde0b2a9d491388e2fded0fa25d2067',\n  transactionHash: '0xfa69f712a8d748e294caa1b95df51f8974a0bcf620af6c1b8a7614999a20b447',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js FeeDelegatedSmartContractExecution.js focus=1\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js FeeDelegatedSmartContractExecution.js focus=3:6\n\n```\n\n---\n\nDefine contract address and abi\n\n```js FeeDelegatedSmartContractExecution.js focus=8:23\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js FeeDelegatedSmartContractExecution.js focus=8:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js FeeDelegatedSmartContractExecution.js focus=8\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nconst contractAddr = \"0xD7fA6634bDDe0B2A9d491388e2fdeD0fa25D2067\";\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const data = contract.methods.setNumber(0x123).encodeABI();\n\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js FeeDelegatedSmartContractExecution.js focus=10\n\n```\n\n---\n\nCreate a **fee payer's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js FeeDelegatedSmartContractExecution.js focus=11\n\n```\n\n---\n\nDefine **contractAddr** and **contractAbi**, you can get the contract address and Abi from compiled solidity code or blockchain explorer\n\n```js FeeDelegatedSmartContractExecution.js focus=13:14\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js FeeDelegatedSmartContractExecution.js focus=17\n\n```\n\n---\n\nEncode the function data for the `setNumber` function, `encodeABI` convert the data into bytecode\n\n```js FeeDelegatedSmartContractExecution.js focus=18\n\n```\n\n---\n\nCreate the transaction object to interact with the contract\n\n```js FeeDelegatedSmartContractExecution.js focus=20:25\n\n```\n\n---\n\nSet `type: TxType.FeeDelegatedSmartContractExecution` for transaction to change contract state with a fee payer\n\n```js FeeDelegatedSmartContractExecution.js focus=21\n\n```\n\n---\n\nSet `data: data` for earlier encoded function data\n\n```js FeeDelegatedSmartContractExecution.js focus=24\n\n```\n\n---\n\nSign the transaction with **sender** account using `signTransaction`\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=27:29\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsenderTxHashRLP 0x31f8a68203b8850ba43b74008301087994d7fa6634bdde0b2a9d491388e2fded0fa25d20678094a2a8854b1802d8cd5de631e690817c253d6a9153a43fb5c1cb0000000000000000000000000000000000000000000000000000000000000123f847f8458207f5a07d40391ae45f7d515becb1aff3b99e7d8b05299b268daa623fb045d981d89c44a0117c23ab37da35ce5206525852ce27f7edc9401e0ee8069a9a396daa64d0c85d\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **fee payer** account using `signTransactionAsFeePayer`\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=31:33\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nsignedTx 0xfa69f712a8d748e294caa1b95df51f8974a0bcf620af6c1b8a7614999a20b447\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n```js FeeDelegatedSmartContractExecution.js focus=35:36\n\n````\n\n\n---\n\n```zsh output\n❯ node FeeDelegatedSmartContractExecution.js\nreceipt {\n  blockHash: '0x4f852e6a2d320287f20cf34c24546f51f53ebdbbc4a4cacee93525e678abf275',\n  blockNumber: 148744853n,\n  cumulativeGasUsed: 36990n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 36990n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xd7fa6634bdde0b2a9d491388e2fded0fa25d2067',\n  transactionHash: '0xfa69f712a8d748e294caa1b95df51f8974a0bcf620af6c1b8a7614999a20b447',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransferMemo.js\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8203b7850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0fbd13725c0e913f564469d43e6e928514caca92ca5d5fcc18c493445d2bd3f00a065980c9c0ea0bcfa4324c23b21d45acaa8a64d1d47d45a6730774756be794e86\nsignedTx 0xb17d3bc44eb466cf0870926eb4b7a8e90a3ca348df1e32227ab1eaf2bd7f98c8\nreceipt {\n  blockHash: '0x51586607f9d282deede4a9325d6ecdb2abb675fca0350ac6778549f2e7bfed73',\n  blockNumber: 148744817n,\n  cumulativeGasUsed: 31500n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31500n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0xb17d3bc44eb466cf0870926eb4b7a8e90a3ca348df1e32227ab1eaf2bd7f98c8',\n  transactionIndex: 0n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=1\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=8:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=8\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedValueTransferMemo,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n    data: \"0x1234567890\",\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=10\n\n```\n\n---\n\nCreate a **fee payer's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=11\n\n```\n\n---\n\nDefine the transaction object.\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=14:20\n\n```\n\n---\n\nSet `type: TxType.FeeDelegatedValueTransferMemo` for transaction to send a memo value transfer with a fee payer\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=15\n\n```\n\n---\n\nSet `value: toPeb(\"0.01\")` to define the value to be transfered, use `toPeb` to convert Klay to Peb\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=18\n\n```\n\n---\n\nSet `data: \"0x1234567890\"` to define the memo value attached with the transaction\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=19\n\n```\n\n---\n\nSet others params like **from**, **to**\n\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=16:17\n\n```\n\n---\n\nSign the transaction with **sender** account using `signTransaction`\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=22:24\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nsenderTxHashRLP 0x11f88d8203b7850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0fbd13725c0e913f564469d43e6e928514caca92ca5d5fcc18c493445d2bd3f00a065980c9c0ea0bcfa4324c23b21d45acaa8a64d1d47d45a6730774756be794e86\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **fee payer** account using `signTransactionAsFeePayer`\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=26:28\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nrawTx 0x11f8eb8202ff85157d84a54c82c35094c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f6a0511ff7d73a04127fe98ac0f252d483003098d5292dbada733e9e9c82689553e4a04fa4c5ee25b33df478b6275a16113caa871664fcc368a309b58817264026c86f94cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f6a064c81774a80ff6e7720334307ba133ce83bdddad58cd3d258e57698830e2d19ba04711d72a9c070f5987fb130f268deee26ee919bc7c477ad645c5aba04ff0e6f0\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransferMemo.js focus=30:31\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransferMemo.js\nreceipt {\n  blockHash: '0xba296876b8efc3e242a849621d64a0a83062a61fd0ec3db1b07d135b54f0bde2',\n  blockNumber: 143465694n,\n  cumulativeGasUsed: 52500n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31500n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0x7e4b1448d2fbd3d1583b5b52387ba74a18ef9844e9f2e4bfcc6fdf3cf2b3d011',\n  transactionIndex: 1n,\n  type: 0n\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```js TxTypeFeeDelegatedValueTransfer.js\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x09f8878203b6850ba43b740082cd1494c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0119485c48b7587a7ba6358f759c0a31e7de94fea77ba28089e20135156af7d94a07c497057653e76b9646bf5cc2024aa6d58cba23d4b2fec932e61e288cb2513f9\nsignedTx 0xded94a15a62b6d24ac4d0a317f0ed37873d4105b0ff7500e577f6d282fdc4bae\nreceipt {\n  blockHash: '0x442774c57650ef18338bea13ad069428acf8a6c8da5e7eb104dd1d961972400a',\n  blockNumber: 148744776n,\n  cumulativeGasUsed: 177286n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0xded94a15a62b6d24ac4d0a317f0ed37873d4105b0ff7500e577f6d282fdc4bae',\n  transactionIndex: 1n,\n  type: 0n\n}\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=1\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=8:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=8\nconst { Web3, TxType, toPeb } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0xa2a8854b1802d8cd5de631e690817c253d6a9153\";\nconst senderPriv = \"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\nconst recieverAddr = \"0xc40b6909eb7085590e1c26cb3becc25368e249e9\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\nasync function main() {\n  const tx = {\n    type: TxType.FeeDelegatedValueTransfer,\n    from: senderAddr,\n    to: recieverAddr,\n    value: toPeb(\"0.01\"),\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nCreate a **sender's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=10\n\n```\n\n---\n\nCreate a **fee payer's wallet** with the private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=11\n\n```\n\n---\n\nDefine the transaction object.\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=14:20\n\n```\n\n---\n\nSet `type: TxType.FeeDelegatedValueTransfer` for transaction to send a value transfer with a fee payer\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=15\n\n```\n\n---\n\nSet `value: toPeb(\"0.01\")` to define the value to be transfered, use `toPeb` to convert Klay to Peb\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=18\n\n```\n\n---\n\nSet others params like **from**, **to**\n\n```js TxTypeFeeDelegatedValueTransfer.js focus=16:17\n\n```\n\n---\n\nSign the transaction with **sender** account using `signTransaction`\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=21:23\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsenderTxHashRLP 0x11f88d8203b7850ba43b740082d1f694c40b6909eb7085590e1c26cb3becc25368e249e9872386f26fc1000094a2a8854b1802d8cd5de631e690817c253d6a9153851234567890f847f8458207f5a0fbd13725c0e913f564469d43e6e928514caca92ca5d5fcc18c493445d2bd3f00a065980c9c0ea0bcfa4324c23b21d45acaa8a64d1d47d45a6730774756be794e86\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **fee payer** account using `signTransactionAsFeePayer`\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=25:27\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nsignedTx 0xded94a15a62b6d24ac4d0a317f0ed37873d4105b0ff7500e577f6d282fdc4bae\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n```js TxTypeFeeDelegatedValueTransfer.js focus=29:30\n\n````\n---\n\n```zsh output\n❯ node TxTypeFeeDelegatedValueTransfer.js\nreceipt {\n  blockHash: '0x442774c57650ef18338bea13ad069428acf8a6c8da5e7eb104dd1d961972400a',\n  blockNumber: 148744776n,\n  cumulativeGasUsed: 177286n,\n  effectiveGasPrice: 25000000000n,\n  from: '0xa2a8854b1802d8cd5de631e690817c253d6a9153',\n  gasUsed: 31000n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  to: '0xc40b6909eb7085590e1c26cb3becc25368e249e9',\n  transactionHash: '0xded94a15a62b6d24ac4d0a317f0ed37873d4105b0ff7500e577f6d282fdc4bae',\n  transactionIndex: 1n,\n  type: 0n\n}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/getting-started. # Web3.js Extension for kaia\n\nWeb3.js Extension for kaia offers:\n\n- Drop-in replacement to `new Web3(...)` that supports both Ethereum and kaia transaction types involving AccountKey and TxTypes. See [Modifications to the Web3 object](#modifications-to-the-web3-object) section for details\n\n## Install\n\n### Node.js\n\n- Install\n    ```sh\n    npm install --save @kaiachain/web3js-ext\n    ```\n- ESM or TypeScript\n    ```ts\n    import { Web3 } from \"@kaiachain/web3js-ext\";\n    const web3 = new Web3(\"https://public-en-kairos.node.kaia.io\");\n    ```\n- CommonJS\n    ```js\n    const { Web3 } = require(\"@kaiachain/web3js-ext\");\n    const web3 = new Web3(\"https://public-en-kairos.node.kaia.io\");\n    ```\n\n### Browser\n\nIt is not recommended to use CDNs in production, But you can use below for quick prototyping.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/@kaiachain/web3js-ext@latest/dist/web3js-ext.bundle.js\"></script>\n<script>\nconst web3 = new web3_ext.Web3(window.klaytn);\n</script>\n```\n\n### Accounts\n\n- Following functions can handle kaia TxTypes. See [src/account/index.ts](./src/account/index.ts)\n  ```js\n  // account independent functions\n  web3.eth.accounts.recoverTransaction(rlp)\n  web3.eth.accounts.signTransaction(obj or rlp)\n  web3.eth.accounts.signTransactionAsFeePayer(obj or rlp)\n\n  // account-bound functions\n  var account = web3.eth.accounts.create()\n  var account = web3.eth.accounts.privateKeyToAccount(priv)\n  var account = web3.eth.accounts.decrypt(keystore)\n  account.signTransaction(obj or rlp)\n  account.signTransactionAsFeePayer(obj or rlp)\n  ```\n- Following functions can handle the [KIP-3 kaia keystore format v4](https://kips.kaia.io/KIPs/kip-3)\n  ```js\n  web3.eth.accounts.decrypt(keystore)\n  web3.eth.accounts.decryptList(keystore)\n  ```\n\n### Eth RPC wrappers\n\n- Following functions calls different RPC, and handle kaia TxTypes. See [src/eth/index.ts](./src/eth/index.ts)\n  ```js\n  // Try klay_protocolVersion, falls back to eth_protocolVersion\n  web3.eth.getProtocolVersion()\n\n  // klay_sendTransaction if kaia TxType, otherwise eth_sendTransaction\n  // Additional treatment for Kaia Wallet compatibility\n  web3.eth.sendTransaction(obj)\n\n  // klay_sendRawTransaction if kaia TxType, otherwise eth_sendRawTransaction\n  web3.eth.sendSignedTransaction(rlp)\n\n  // klay_signTransaction if kaia TxType, otherwise eth_signTransaction\n  // Additional treatment for Kaia Wallet compatibility\n  web3.eth.signTransaction(obj)\n  ```\n\n### kaia RPCs\n\n- Following functions calls kaia RPCs. See [src/web3.ts](./src/web3.ts)\n  ```js\n  web3.klay.blockNumber() // klay_blockNumber\n  web3.net.networkID() // net_networkID\n  ```\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractDeploy.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi);\n  const data = contract.deploy({\n    data: bytecode,\n    arguments: [100],\n  }).encodeABI();\n\n  const tx = {\n    from: senderAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ java smartContractDeploy.java\nsignedTx 0x476a6257353fc48dfd1bad5090026f065345c5ef0dbce85434c372b6d5817e75\nreceipt {\n  blockHash: '0x476295f949db32245fa433878bef56b5e2282aee46c8c2ec72a90bca64a9864a',\n  blockNumber: 148743465n,\n  contractAddress: '0xa0ca0d72ce4be89ccdaf4f3ed18313392523f903',\n  cumulativeGasUsed: 673526n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 280644n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x476a6257353fc48dfd1bad5090026f065345c5ef0dbce85434c372b6d5817e75',\n  transactionIndex: 2n,\n  type: 2n\n}\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js smartContractDeploy.js focus=1\n\n```\n\n---\n\nDefine sender **address** and **private key**\n\n```js smartContractDeploy.js focus=3:4\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js smartContractDeploy.js focus=6:7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractDeploy.js focus=6\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\";\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi);\n  const data = contract.deploy({\n    data: bytecode,\n    arguments: [100],\n  }).encodeABI();\n\n  const tx = {\n    from: senderAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n}\n\nmain();\n```\n\n---\n\nConvert the sender's private key to an account using **web3.eth.accounts.privateKeyToAccount**\n\n```js smartContractDeploy.js focus=8\n\n```\n\n---\n\nDefine compiled contract bytecode to deploy\n\n```js smartContractDeploy.js focus=33\n\n```\n\n---\n\nDefine contract Abi, you can get it from compiled solidity code\n\n```js smartContractDeploy.js focus=34\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` and defined **contractAbi**\n\n```js smartContractDeploy.js focus=37\n\n```\n\n---\n\nEncode the data needed to deploy the contract\n\n```js smartContractDeploy.js focus=38:41\n\n```\n\n---\n\nCreate a transaction object with `data` is the encoded contract bytecode, `from: senderAddress` is sender's wallet address\n\n```js smartContractDeploy.js focus=43:46\n\n```\n\n---\n\nSign the transaction with the **sender**'s account using `signTransaction`\n\n<CH.Code>\n```js smartContractDeploy.js focus=48:49\n\n````\n\n\n---\n\n```zsh output\n❯ node smartContractDeploy.js\nsignedTx 0x476a6257353fc48dfd1bad5090026f065345c5ef0dbce85434c372b6d5817e75\n````\n\n</CH.Code>\n\n---\n\nSend the signed transaction to network and wait for the receipt\n\n<CH.Code>\n```js smartContractDeploy.js focus=51:52\n\n````\n\n\n---\n\n```zsh output\n❯ node smartContractDeploy.js\nreceipt {\n  blockHash: '0x476295f949db32245fa433878bef56b5e2282aee46c8c2ec72a90bca64a9864a',\n  blockNumber: 148743465n,\n  contractAddress: '0xa0ca0d72ce4be89ccdaf4f3ed18313392523f903',\n  cumulativeGasUsed: 673526n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 280644n,\n  logs: [],\n  logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  status: 1n,\n  transactionHash: '0x476a6257353fc48dfd1bad5090026f065345c5ef0dbce85434c372b6d5817e75',\n  transactionIndex: 2n,\n  type: 2n\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractRead.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const number = await contract.methods.number().call();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractRead.js\nnumber 294\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js smartContractRead.js focus=1\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3js is a read-only abstraction to access the blockchain data.\n\n```js smartContractRead.js focus=3:4\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractRead.js focus=3:4\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n  const number = await contract.methods.number().call();\n  console.log(\"number\", number.toString());\n}\n\nmain();\n```\n\n---\n\nDefine contract Abi and addreess, you can get it from compiled solidity code\n\n```js smartContractRead.js focus=29:30\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js smartContractRead.js focus=33\n\n```\n\n---\n\nCall function **number** of created contract and print the result\n\n<CH.Code>\n```js smartContractRead.js focus=34:35\n\n````\n\n\n---\n\n```zsh output\n❯ node smartContractRead.js\nnumber 294\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/smart-contract/write-txtype. # Write with TxType\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWriteWithTxType.js\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWriteWithTxType.js\nnumber before 295\nsignedTx 0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9\nreceipt {\n  blockHash: '0xdbf4c6d306da99f7c36500d0ec84d0064b34820f51e827a4f6662f1b734a27cf',\n  blockNumber: 148743668n,\n  cumulativeGasUsed: 28014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 28014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000128',\n      blockNumber: 148743668n,\n      transactionHash: '0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9',\n      transactionIndex: 0n,\n      blockHash: '0xdbf4c6d306da99f7c36500d0ec84d0064b34820f51e827a4f6662f1b734a27cf',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9',\n  transactionIndex: 0n,\n  type: 0n\n}\nnumber after 296\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js smartContractWriteWithTxType.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js smartContractWriteWithTxType.js focus=3:4\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js smartContractWriteWithTxType.js focus=6:7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWriteWithTxType.js focus=6\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    type: TxType.SmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a sender's account using `web3.eth.accounts.privateKeyToAccount`\n\n```js smartContractWriteWithTxType.js focus=8\n\n```\n\n---\n\nDefine contract **Abi** and **address** to interact with\n\n```js smartContractWriteWithTxType.js focus=33:34\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js smartContractWriteWithTxType.js focus=37\n\n```\n\n---\n\nGet the **number** before update\n\n<CH.Code>\n```js smartContractWriteWithTxType.js focus=39\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteWithTxType.js\nnumber before 295\n````\n\n</CH.Code>\n\n---\n\nEncoded the contract method data with `contract.methods.increment().encodeABI()`\n\n```js smartContractWriteWithTxType.js focus=41\n\n```\n\n---\n\nCreate a transaction to update the value **number** with `type: FeeDelegatedSmartContractExecution`\n\n```js smartContractWriteWithTxType.js focus=42:47\n\n```\n\n---\n\nSign the transaction with **sender** account\n\n<CH.Code>\n```js smartContractWriteWithTxType.js focus=49:50\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteWithTxType.js\nsignedTx 0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to network and wait for the receipt\n\n<CH.Code>\n```js smartContractWriteWithTxType.js focus=52:53\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteWithTxType.js\nreceipt {\n  blockHash: '0xdbf4c6d306da99f7c36500d0ec84d0064b34820f51e827a4f6662f1b734a27cf',\n  blockNumber: 148743668n,\n  cumulativeGasUsed: 28014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 28014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000128',\n      blockNumber: 148743668n,\n      transactionHash: '0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9',\n      transactionIndex: 0n,\n      blockHash: '0xdbf4c6d306da99f7c36500d0ec84d0064b34820f51e827a4f6662f1b734a27cf',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0xb4e2f9d3a6c3d24a318028ff904f2d21e79ca6f2adc41aa099cd1be70f7952b9',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n---\n\nGet the **number** after update\n\n<CH.Code>\n```js smartContractWriteWithTxType.js focus=55\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteWithTxType.js\nnumber after 296\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWriteFeeDelegated.js\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nnumber before 296\nsenderTxHashRLP 0x31f8844c850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f6a03a9ade9fb5c2e4e513c56341ab64ad0a70613d826479f2117b53d3b57cee5021a07612c8538ee5b895f44b50858164dd67da473e264c29d331437273e581652eea\nsignedTx 0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f\nreceipt {\n  blockHash: '0x6b2201b6bcc999395e247fc8b85062b1a9313cc0db53a50a746203c9995af8b9',\n  blockNumber: 148743711n,\n  cumulativeGasUsed: 38014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 38014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000129',\n      blockNumber: 148743711n,\n      transactionHash: '0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f',\n      transactionIndex: 0n,\n      blockHash: '0x6b2201b6bcc999395e247fc8b85062b1a9313cc0db53a50a746203c9995af8b9',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f',\n  transactionIndex: 0n,\n  type: 0n\n}\nnumber after 297\n\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js smartContractWriteFeeDelegated.js focus=1\n\n```\n\n---\n\nDefine **sender**, **fee payer** addresses and private keys\n\n```js smartContractWriteFeeDelegated.js focus=3:6\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js smartContractWriteFeeDelegated.js focus=8:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWriteFeeDelegated.js focus=8:9\nconst { Web3, TxType } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\nconst feePayerAddr = \"0xcb0eb737dfda52756495a5e08a9b37aab3b271da\";\nconst feePayerPriv = \"0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\nconst feePayerAccount = web3.eth.accounts.privateKeyToAccount(feePayerPriv);\n\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    type: TxType.FeeDelegatedSmartContractExecution,\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  // Sign transaction by sender\n  const signResult1 = await senderAccount.signTransaction(tx);\n  console.log(\"senderTxHashRLP\", signResult1.rawTransaction);\n\n  // Sign and send transaction by fee payer\n  const signResult2 = await feePayerAccount.signTransactionAsFeePayer(signResult1.rawTransaction);\n  console.log(\"signedTx\", signResult2.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult2.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a **sender** and **fee payer** account from defined private key using `web3.eth.accounts.privateKeyToAccount`\n\n```js smartContractWriteFeeDelegated.js focus=10:11\n\n```\n\n---\n\nDefine contract **Abi** and **contract address**\n\n```js smartContractWriteFeeDelegated.js focus=37:38\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js smartContractWriteFeeDelegated.js focus=41\n\n```\n\n---\n\nGet the value of **number** before update\n\n<CH.Code>\n```js smartContractWriteFeeDelegated.js focus=43\n\n````\n\n\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nnumber before 296\n````\n\n</CH.Code>\n\n---\n\nEncoded the contract method data with `contract.methods.increment().encodeABI()`\n\n```js smartContractWriteFeeDelegated.js focus=45\n\n```\n\n---\n\nCreate a transaction to update the value **number** with `type: FeeDelegatedSmartContractExecution`\n\n```js smartContractWriteFeeDelegated.js focus=46:51\n\n```\n\n---\n\nSign the transaction with **sender** account using `signTransaction`\n\n<CH.Code>\n```js smartContractWriteFeeDelegated.js focus=53:55\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nsenderTxHashRLP 0x31f8844c850ba43b7400830111939495be48607498109030592c08adc9577c7c2dd505809424e8efd18d65bcb6b3ba15a4698c0b0d69d13ff784d09de08af847f8458207f6a03a9ade9fb5c2e4e513c56341ab64ad0a70613d826479f2117b53d3b57cee5021a07612c8538ee5b895f44b50858164dd67da473e264c29d331437273e581652eea\n````\n\n</CH.Code>\n\n---\n\nSign the transaction with **fee payer** account using `signTransactionAsFeePayer`\n\n<CH.Code>\n```js smartContractWriteFeeDelegated.js focus=57:59\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nsignedTx 0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to blockchain. It will return the transaction receipt\n\n<CH.Code>\n```js smartContractWriteFeeDelegated.js focus=61:62\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nreceipt {\n  blockHash: '0x6b2201b6bcc999395e247fc8b85062b1a9313cc0db53a50a746203c9995af8b9',\n  blockNumber: 148743711n,\n  cumulativeGasUsed: 38014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 38014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000129',\n      blockNumber: 148743711n,\n      transactionHash: '0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f',\n      transactionIndex: 0n,\n      blockHash: '0x6b2201b6bcc999395e247fc8b85062b1a9313cc0db53a50a746203c9995af8b9',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0x66f7d99d2236145baa4bb84f66d283c508639bd6150c68b300323f7aa016676f',\n  transactionIndex: 0n,\n  type: 0n\n}\n````\n\n</CH.Code>\n\n---\n\nGet the updated value of **number**\n\n<CH.Code>\n```js smartContractWriteFeeDelegated.js focus=64\n\n````\n---\n\n```zsh output\n❯ node smartContractWriteFeeDelegated.js\nnumber after 297\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js smartContractWrite.js\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber before 294\nsignedTx 0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6\nreceipt {\n  blockHash: '0xa6e2b651bfd1f04ca7711f43eb650363a33fbd626314164bceb9e71ac6c709fa',\n  blockNumber: 148743520n,\n  cumulativeGasUsed: 28014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 28014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000127',\n      blockNumber: 148743520n,\n      transactionHash: '0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6',\n      transactionIndex: 0n,\n      blockHash: '0xa6e2b651bfd1f04ca7711f43eb650363a33fbd626314164bceb9e71ac6c709fa',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6',\n  transactionIndex: 0n,\n  type: 2n\n}\nnumber after 295\n```\n\n</CH.Code>\n\n---\n\nImport the **web3** and **@kaiachain/web3js-ext** packages to add kaia features on web3\n\n```js smartContractWrite.js focus=1\n\n```\n\n---\n\nDefine sender's **address** and **private key**\n\n```js smartContractWrite.js focus=3:4\n\n```\n\n---\n\nSet up the provider with the specified **kairos** testnet URL. A provider in web3 is a read-only abstraction to access the blockchain data.\n\n```js smartContractWrite.js focus=6:7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```js smartContractWrite.js focus=6\nconst { Web3 } = require(\"@kaiachain/web3js-ext\");\n\nconst senderAddr = \"0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7\";\nconst senderPriv = \"0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49\";\n\nconst provider = new Web3.providers.HttpProvider(\"https://public-en-kairos.node.kaia.io\");\nconst web3 = new Web3(provider);\nconst senderAccount = web3.eth.accounts.privateKeyToAccount(senderPriv);\n\n/* compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n    event SetNumber(uint256 number);\n\n    constructor(uint256 initNumber) {\n        number = initNumber;\n    }\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n        emit SetNumber(number);\n    }\n\n    function increment() public {\n        number++;\n        emit SetNumber(number);\n    }\n}\n*/\nconst contractAbi = JSON.parse('[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]');\nconst contractAddr = \"0x95Be48607498109030592C08aDC9577c7C2dD505\";\n\nasync function main() {\n  const contract = new web3.eth.Contract(contractAbi, contractAddr);\n\n  console.log(\"number before\", (await contract.methods.number().call()).toString());\n\n  const data = contract.methods.increment().encodeABI();\n  const tx = {\n    from: senderAddr,\n    to: contractAddr,\n    data: data,\n  };\n\n  const signResult = await senderAccount.signTransaction(tx);\n  console.log(\"signedTx\", signResult.transactionHash);\n\n  const receipt = await web3.eth.sendSignedTransaction(signResult.rawTransaction);\n  console.log(\"receipt\", receipt);\n\n  console.log(\"number after\", (await contract.methods.number().call()).toString());\n}\n\nmain();\n```\n\n---\n\nCreate a sender's account using `web3.eth.accounts.privateKeyToAccount`\n\n```js smartContractWrite.js focus=8\n\n```\n\n---\n\nDefine contract **Abi** and **address** to interact with\n\n```js smartContractWrite.js focus=33:34\n\n```\n\n---\n\nCreate a contract instance using `Web3.eth.Contract` with defined **contractAbi** and **address**. You can read and write the contract through this instance\n\n```js smartContractWrite.js focus=37\n\n```\n\n---\n\nGet the **number** before update\n\n<CH.Code>\n```js smartContractWrite.js focus=39\n\n````\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber before 294\n````\n\n</CH.Code>\n\n---\n\nCreate a transaction object that increment the **number**\n\n```js smartContractWrite.js focus=41:46\n\n```\n\n---\n\nSign the transaction with sender account\n\n<CH.Code>\n```js smartContractWrite.js focus=48:49\n\n````\n---\n\n```zsh output\n❯ node smartContractWrite.js\nsignedTx 0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6\n````\n\n</CH.Code>\n\n---\n\nSend the transaction to network and wait for the receipt\n\n<CH.Code>\n```js smartContractWrite.js focus=51:52\n\n````\n---\n\n```zsh output\n❯ node smartContractWrite.js\nreceipt {\n  blockHash: '0xa6e2b651bfd1f04ca7711f43eb650363a33fbd626314164bceb9e71ac6c709fa',\n  blockNumber: 148743520n,\n  cumulativeGasUsed: 28014n,\n  effectiveGasPrice: 25000000000n,\n  from: '0x24e8efd18d65bcb6b3ba15a4698c0b0d69d13ff7',\n  gasUsed: 28014n,\n  logs: [\n    {\n      address: '0x95be48607498109030592c08adc9577c7c2dd505',\n      topics: [Array],\n      data: '0x0000000000000000000000000000000000000000000000000000000000000127',\n      blockNumber: 148743520n,\n      transactionHash: '0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6',\n      transactionIndex: 0n,\n      blockHash: '0xa6e2b651bfd1f04ca7711f43eb650363a33fbd626314164bceb9e71ac6c709fa',\n      logIndex: 0n,\n      removed: false\n    }\n  ],\n  logsBloom: '0xn  status: 1n,\n  to: '0x95be48607498109030592c08adc9577c7c2dd505',\n  transactionHash: '0x842b7043b185e1e9506529f4562f27e70d6a4f1bd8fd0971e844f70a2d103eb6',\n  transactionIndex: 0n,\n  type: 2n\n}\n````\n\n</CH.Code>\n\n---\n\nGet the **number** after update\n\n<CH.Code>\n```js smartContractWrite.js focus=54\n\n````\n---\n\n```zsh output\n❯ node smartContractWrite.js\nnumber after 295\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/utils/address. # Address\n\nUtils for converting public address, public key.\n\n<CH.Spotlight>\n<CH.Code>\n\n```js addressUtils.js\nconst { getCompressedPublicKey } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nImport the **getCompressedPublicKey** from **@kaiachain/web3js-ext** packages\n\n```js addressUtils.js focus=1\n\n```\n\n---\n\nTo compress a public key from `{x, y}` format to hexadecimal, use `getCompressedPublicKey` with the **public key object** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:11\nconst { getCompressedPublicKey } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  const publicKeyObject = {\n    x: '0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd',\n    y: '0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79',\n  }\n  console.log(\n    'pubkey from { x, y } object =',\n    getCompressedPublicKey(publicKeyObject)\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node addressUtils.js\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\n\nOtherwise if you want to compress the **public key** from **uncompressed hexadecimal**, use `getCompressedPublicKey` with the **uncompress public key** as param\n\n<CH.Code>\n```js addressUtils.js focus=4:9\nconst { getCompressedPublicKey } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  const uncompressedPublicKeyString =\n    '0x04dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79'\n  console.log(\n    'pubkey from uncompressed format =',\n    getCompressedPublicKey(uncompressedPublicKeyString)\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node addressUtils.js\npubkey from uncompressed format = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/utils/signature. # Signature\nConvert signature into tuple format from object, compact signatures.\n<CH.Spotlight>\n<CH.Code>\n\n```js signatureUtils.js\nconst { getSignatureTuple } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n```\n\n</CH.Code>\n\n---\nImport the **getSignatureTuple** from **@kaiachain/web3js-ext** packages\n\n```js signatureUtils.js focus=1\n\n```\n---\nTo compress a public key from `{r, s, v}` format to tuple, use `getSignatureTuple` with the **signature object** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:11\nconst { getSignatureTuple } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  console.log(\n    'signature from { v, r, s } object =',\n    getSignatureTuple({\n      v: 27,\n      r: '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n      s: '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508',\n    })\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from { v, r, s } object = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n---\nTo compress a public key from compact 65 bytes format to tuple, use `getSignatureTuple` with the **compact signature** as param\n\n<CH.Code>\n```js signatureUtils.js focus=4:9\nconst { getSignatureTuple } = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  console.log(\n    'signature from compact 65 bytes =',\n    getSignatureTuple(\n      '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b'\n    )\n  )\n}\n\nmain()\n```\n\n---\n```zsh output\n❯ node signatureUtils.js\nsignature from compact 65 bytes = [\n  '0x1b',\n  '0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99',\n  '0x75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508'\n]\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3js-ext/utils/unit. # Units\nFor units conversion, Kaia-sdk supports utils for converting `kaia`, `Gkei` and `kei`. See [supported units](https://docs.kaia.io/learn/kaia-native-token/#units-of-kaia-) .\n<CH.Spotlight>\n<CH.Code>\n\n```js unitUtils.js\nconst {\n  formatKlay,\n  parseKlay,\n  formatKlayUnits,\n} = require('@kaiachain/web3js-ext')\n\nasync function main() {\n  console.log(\n    'example basefee in ston =',\n    formatKlayUnits('0x5d21dba00', 'ston')\n  )\n  console.log('transfer amount in klay =', formatKlay('1230000000000000000'))\n  console.log(\n    'example gas price in peb =',\n    parseKlayUnits('50', 'ston').toString()\n  )\n  console.log('transfer amount in peb =', parseKlay('9.87').toString())\n}\n\nmain()\n```\n\n---\n\n```zsh output\n❯ node unitUtils.js\nexample basefee in ston = 25.0\ntransfer amount in klay = 1.23\nexample gas price in peb = 50000000000\ntransfer amount in peb = 9870000000000000000\n```\n\n</CH.Code>\n\n---\n\nImport the `formatKlay`, `parseKlay`, `formatKlayUnits`, from **@kaiachain/web3js-ext** packages\n\n```js unitUtils.js focus=1\n\n```\n---\nTo convert **peb** to other units, use `formatKlayUnits`. For example, using `formatKlayUnits` converting **peb** to **ston**\n\n```js unitUtils.js focus=8:11\n\n```\n---\nUsing `formatKlay` converts **peb** to **klay**\n\n```js unitUtils.js focus=12\n\n```\n---\nUsing `parseKlayUnits` to convert value from one unit to **peb**. The first param is the **value**, the second param is the unit to **be converted**\n\n```js unitUtils.js focus=13:16\n\n```\n---\nUsing `parseKlay` to convert **klay** to **peb**\n\n```js unitUtils.js focus=17\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/account-key/legacy. # Legacy Account Key\n\n**AccountKeyLegacy**\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_account_update_legacy.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_legacy():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user.address,\n        'key' : {\n            'type': KeyType.LEGACY,\n            'key': {}\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_legacy()\n```\n\n---\n\n```zsh output\n❯ py web3_account_update_legacy.py\n# {\n#   \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n#   \"gas\": 159000,\n#   \"gasPrice\": 50000000000,\n#   \"nonce\": 990,\n#   \"chainId\": 1001,\n#   \"type\": 32,\n#   \"key\": {\n#     \"type\": 1,\n#     \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n#   }\n# }\n\n# rawTransaction: 20f86e8203de850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a91538201c0f847f8458207f5a0a37fa3b1882109cab6d565b869d217a80bae7ac6dd1b8361729f81925520d48ca0049b1ebfbe19a7b57d8ff0ea965581f6b02c4b5ac0c08b3c1925e030d05d1444\n# tx hash:  0x2e1b5ccc12057297db5bac624085532e302ff75b20fb36fe3728efe7a7904ef1 receipt:  AttributeDict({'blockHash': HexBytes('0xbb9fc21ef1793f4c03492e2293dfdcc6d4392cd40a781a33fbebf96bbf032490'), 'blockNumber': 150553739, 'contractAddress': None, 'cumulativeGasUsed': 21000, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x2e1b5ccc12057297db5bac624085532e302ff75b20fb36fe3728efe7a7904ef1'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_account_update_legacy.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytools**\n\n```py web3_account_update_legacy.py focus=3:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_account_update_legacy.py focus=18\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_account_update_legacy.py focus=18:20\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_legacy():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user.address,\n        'key' : {\n            'type': KeyType.LEGACY,\n            'key': {}\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_legacy()\n```\n\n---\n\nLoad an account from private key\n\n```py web3_account_update_legacy.py focus=22\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_account_update_legacy.py focus=6:7,10,24\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_account_update_legacy.py focus=15,25:31\n\n```\n\n---\n\nIn this case, the account key to update is the **legacy** key.\n\n```py web3_account_update_legacy.py focus=28\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_account_update_legacy.py focus=6,8,10,32\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n```py web3_account_update_legacy.py focus=11,12,14,33\n\n````\n\n---\n```zsh output\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 40,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n````\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You must sign it with the loaded account\n\n<CH.Code>\n```py web3_account_update_legacy.py focus=22,35:37\n\n````\n---\n```zsh output\nrawTransaction: 20f8da28850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0985bec3e261c26aae4753692e485df1f2610d15a49c6d1a211aa722ebe07f83aa030de040be157e4ba1ee085adfa104ad52e6c5be2133e08eba32c23e8fdcef2f3\n````\n\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_account_update_legacy.py focus=39:41\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/account-key/multisig. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_account_update_multisig.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_account_update_multisig():\n    user1 = Account.from_key(\"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\")\n    user2 = Account.from_key(\"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\")\n    user3 = Account.from_key(\"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\")\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user1.address, #0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n        'key' : {\n            'type': KeyType.MULTISIG,\n            'threshold': 2,\n            'keys': [\n                {\n                    'weight':1,\n                    'key': compressed_key(user1),\n                },\n                {\n                    'weight':1,\n                    'key': compressed_key(user2),\n                },\n                {\n                    'weight':1,\n                    'key': compressed_key(user3),\n                },\n            ]\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user1.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user2.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user3.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_multisig()\n```\n\n---\n\n```zsh output\n❯ py web3_account_update_multisig.py\n{\n  \"from\": \"0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 103,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 4,\n    \"threshold\": 2,\n    \"keys\": [\n      {\n        \"weight\": 1,\n        \"key\": \"0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82\"\n      },\n      {\n        \"weight\": 1,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      },\n      {\n        \"weight\": 1,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      }\n    ]\n  }\n}\n\nrawTransaction: 20f9016b67850ba43b740083026d189482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af8d5f8458207f6a0978b0c4dcfb9dfd4351842463519f7913a9653bb3954fde04e8c81b59c5f0138a04384e1e3436a43d165f4a03cac64f4a60fbd237d7473f58016bda5381c33a1d2f8458207f6a0431be32222e5dea7d4126254fea9784f9b55171948506477b876995cf04e8185a06d755a79656a7e32f179548e00e314bc37c78d67918b89abc7390083a64c91dcf8458207f5a0c4bc3a38652ede87c9c1f7057b63c9d4ae1bb694d722c36b6901b4ec0b258dbca02559cae1ebcf3baa23a9cbe6fddb81d652f44636534cc9214c26d6127be5b849\ntx hash:  0x0774fac9bc9f1b49b4fb4b7a9af87fef52f298e2cbdeb61491eab7bdc401758d receipt:  AttributeDict({'blockHash': HexBytes('0xd15a2095f70243121b427aeeebb507937c8bc808526bfa5990806a12df8a3d6f'), 'blockNumber': 150554112, 'contractAddress': None, 'cumulativeGasUsed': 111000, 'effectiveGasPrice': 25000000000, 'from': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'gasUsed': 111000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'transactionHash': HexBytes('0x0774fac9bc9f1b49b4fb4b7a9af87fef52f298e2cbdeb61491eab7bdc401758d'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_account_update_multisig.py focus=1\n\n```\n\n---\n\nImport necessary utils from **web3** and **web3py_ext**\n\n```py web3_account_update_multisig.py focus=3:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_account_update_multisig.py focus=17:19\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_account_update_multisig.py focus=17:19\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_account_update_multisig():\n    user1 = Account.from_key(\"0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a\")\n    user2 = Account.from_key(\"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\")\n    user3 = Account.from_key(\"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\")\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user1.address, #0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n        'key' : {\n            'type': KeyType.MULTISIG,\n            'threshold': 2,\n            'keys': [\n                {\n                    'weight':1,\n                    'key': compressed_key(user1),\n                },\n                {\n                    'weight':1,\n                    'key': compressed_key(user2),\n                },\n                {\n                    'weight':1,\n                    'key': compressed_key(user3),\n                },\n            ]\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user1.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user2.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user3.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_multisig()\n```\n\n---\n\nDefine 3 different accounts using `Account.from_key`\n\n```py web3_account_update_multisig.py focus=22:24\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_account_update_multisig.py focus=26\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_account_update_multisig.py focus=27:47\n\n```\n\n---\n\nIn this case, the account keys to update is the **mutisig** key and each key inside contains a compressed public key and its weight. The **compressed_key** util will extract the compressed public key from the key\n\n```py web3_account_update_multisig.py focus=34:35,38:39,42:43\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_account_update_multisig.py focus=8,48\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=12,49\n\n````\n\n\n---\n\n```zsh output\n❯\n{\n  \"from\": \"0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 103,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 4,\n    \"threshold\": 2,\n    \"keys\": [\n      {\n        \"weight\": 1,\n        \"key\": \"0x021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82\"\n      },\n      {\n        \"weight\": 1,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      },\n      {\n        \"weight\": 1,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      }\n    ]\n  }\n}\n\n````\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You must sign it with the all 3 loaded accounts\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=51:55\n\n````\n\n\n---\n\n```zsh output\n❯\nrawTransaction: 20f9016b67850ba43b740083026d189482c6a8d94993d49cfd0c1d30f0f8caa65782cc7eb87204f86f02f86ce301a1021473839f05083617d532325ce8aa40edffb2bc79f1ce17c77cc41f92f027dd82e301a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cde301a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2af8d5f8458207f6a0978b0c4dcfb9dfd4351842463519f7913a9653bb3954fde04e8c81b59c5f0138a04384e1e3436a43d165f4a03cac64f4a60fbd237d7473f58016bda5381c33a1d2f8458207f6a0431be32222e5dea7d4126254fea9784f9b55171948506477b876995cf04e8185a06d755a79656a7e32f179548e00e314bc37c78d67918b89abc7390083a64c91dcf8458207f5a0c4bc3a38652ede87c9c1f7057b63c9d4ae1bb694d722c36b6901b4ec0b258dbca02559cae1ebcf3baa23a9cbe6fddb81d652f44636534cc9214c26d6127be5b849\n\n````\n\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=57:59\n\n````\n\n\n---\n\n```zsh output\n❯\ntx hash:  0x0774fac9bc9f1b49b4fb4b7a9af87fef52f298e2cbdeb61491eab7bdc401758d receipt:  AttributeDict({'blockHash': HexBytes('0xd15a2095f70243121b427aeeebb507937c8bc808526bfa5990806a12df8a3d6f'), 'blockNumber': 150554112, 'contractAddress': None, 'cumulativeGasUsed': 111000, 'effectiveGasPrice': 25000000000, 'from': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'gasUsed': 111000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'transactionHash': HexBytes('0x0774fac9bc9f1b49b4fb4b7a9af87fef52f298e2cbdeb61491eab7bdc401758d'), 'transactionIndex': 0, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/account-key/public. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_account_update_pubkey.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_pubkey():\n    user1 = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    user2 = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user1.address,\n        'key' : {\n            'type': KeyType.PUBLIC,\n            'key' : compressed_key(user2)\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user2.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_pubkey()\n```\n\n---\n\n```zsh output\n❯ py web3_account_update_pubkey.py\n# {\n#   \"from\": \"0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b\",\n#   \"gas\": 159000,\n#   \"gasPrice\": 50000000000,\n#   \"nonce\": 123,\n#   \"chainId\": 1001,\n#   \"type\": 32,\n#   \"key\": {\n#     \"type\": 2,\n#     \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n#   }\n# }\n\n# rawTransaction: 20f88d7b850ba43b740083026d1894e15cd70a41dfb05e7214004d7d054801b2a2f06ba302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f6a0f75f66b00c25910bfa28b70bd9b84be7d992af41803b8127b70db8d277b0d916a055594b060f8efba08cdc9e103e47000f6f83f191ea25a2a49661cc01fc449f2c\n# tx hash:  0x300f72798b62b8ff59287d21f186735ec95edaaf90c78ee153a7ab7ad31311fd receipt:  AttributeDict({'blockHash': HexBytes('0xf76ff73748e352ae26e28dbd9485fc30f101999de67800acaa65e1b5b743e1ce'), 'blockNumber': 150554008, 'contractAddress': None, 'cumulativeGasUsed': 234641, 'effectiveGasPrice': 25000000000, 'from': '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b', 'gasUsed': 41000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b', 'transactionHash': HexBytes('0x300f72798b62b8ff59287d21f186735ec95edaaf90c78ee153a7ab7ad31311fd'), 'transactionIndex': 1, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_account_update_pubkey.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **web3py_ext**\n\n```py web3_account_update_pubkey.py focus=3:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_account_update_pubkey.py focus=18\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_account_update_pubkey.py focus=18:20\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n     'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_pubkey():\n    user1 = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    user2 = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : user1.address,\n        'key' : {\n            'type': KeyType.PUBLIC,\n            'key' : compressed_key(user2)\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, user2.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_pubkey()\n```\n\n---\n\nLoad two accounts from private key\n\n```py web3_account_update_pubkey.py focus=22:23\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_account_update_pubkey.py focus=6:7,10,25\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_account_update_pubkey.py focus=15,26:32\n\n```\n\n---\n\nIn this case, the account key to update is the **public** key.\n\n```py web3_account_update_pubkey.py focus=29\n\n```\n\n---\n\nYou can use the **compressed_key** util to set the key. It will extract the compressed public key from the key\n\n```py web3_account_update_pubkey.py focus=30\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_account_update_pubkey.py focus=6,8,10,33\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n```py web3_account_update_pubkey.py focus=11,12,14,34\n\n````\n\n---\n```zsh output\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 40,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n````\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You must sign it with the loaded account\n\n<CH.Code>\n```py web3_account_update_pubkey.py focus=22,36:38\n\n````\n---\n```zsh output\nrawTransaction: 20f8da28850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0985bec3e261c26aae4753692e485df1f2610d15a49c6d1a211aa722ebe07f83aa030de040be157e4ba1ee085adfa104ad52e6c5be2133e08eba32c23e8fdcef2f3\n````\n\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_account_update_pubkey.py focus=40:42\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/account-key/role-based. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_account_update_role_based.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_account_update_role_based():\n    # Just for testing, user1 and user2 have the same key\n    tx_role = Account.from_key(\"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\");\n    update_role = Account.from_key(\"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\");\n    fee_payer_role = Account.from_key(\"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\");\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : update_role.address, # 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n        'key' : {\n            'type': KeyType.ROLE_BASED,\n            'keys' : {\n                'roleTransactionKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(tx_role)\n                },\n                'roleAccountUpdateKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(update_role)\n                },\n                'roleFeePayerKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(fee_payer_role)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_role.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_role_based()\n```\n\n---\n\n```zsh output\n❯ py web3_account_update_role_based.py\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 52,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n\nrawTransaction: 20f8da34850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a089c7e842c90cb3639a929b4d012b13b68ea680543ec31a05b53863580e93de4ba05ad477c3edf141c7f88a87ba12249500eff7532a448f33a6325d95c831f51d47\ntx hash:  0x523877191b60450bf48ef29db40ee7191a0c5525af3255bea191c02970c088c7 receipt:  AttributeDict({'blockHash': HexBytes('0xf51f2bd1926578bf912353f6eea1b025271706eb83c438429184759dae902f5b'), 'blockNumber': 150554144, 'contractAddress': None, 'cumulativeGasUsed': 81000, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0x523877191b60450bf48ef29db40ee7191a0c5525af3255bea191c02970c088c7'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_account_update_role_based.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytools**\n\n```py web3_account_update_role_based.py focus=3:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_account_update_role_based.py focus=18\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_account_update_role_based.py focus=18:20\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_account_update_role_based():\n    # Just for testing, user1 and user2 have the same key\n    tx_role = Account.from_key(\"0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac\");\n    update_role = Account.from_key(\"0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda\");\n    fee_payer_role = Account.from_key(\"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\");\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : update_role.address, # 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n        'key' : {\n            'type': KeyType.ROLE_BASED,\n            'keys' : {\n                'roleTransactionKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(tx_role)\n                },\n                'roleAccountUpdateKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(update_role)\n                },\n                'roleFeePayerKey': {\n                    'type': KeyType.PUBLIC,\n                    'key': compressed_key(fee_payer_role)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_role.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_role_based()\n```\n\n---\n\nLoad 3 accounts from private key\n\n```py web3_account_update_role_based.py focus=22:25\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_account_update_role_based.py focus=6:7,10,27\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_account_update_role_based.py focus=15,28:47\n\n```\n\n---\n\nIn this case, the account key to update is the **role-based** key and the possible key type of each role is the legacy, public or multisig.\n\n```py web3_account_update_role_based.py focus=31,33,37,41\n\n```\n\n---\n\nYou can use the **compressed_key** util to set each role key. It will extract the compressed public key from the key\n\n```py web3_account_update_role_based.py focus=35,39,43\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_account_update_role_based.py focus=6,8,10,48\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n```py web3_account_update_role_based.py focus=11,12,14,49\n\n````\n\n---\n```zsh output\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 40,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n````\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You must sign it with the loaded **update_role** account\n\n<CH.Code>\n```py web3_account_update_role_based.py focus=22,51:53\n\n````\n---\n```zsh output\nrawTransaction: 20f8da28850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0985bec3e261c26aae4753692e485df1f2610d15a49c6d1a211aa722ebe07f83aa030de040be157e4ba1ee085adfa104ad52e6c5be2133e08eba32c23e8fdcef2f3\n````\n\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_account_update_role_based.py focus=55:57\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/keystore/keystore-v3. # V3 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V3**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```py keystoreV3.js\nfrom web3py_ext import extend\nfrom eth_account import Account\n\nv3_keystore_str = '''{\n  \"address\": \"029e786304c1531af3ac7db24a02448e543a099e\",\n  \"id\": \"9d492c95-b9e3-42e3-af73-5c77e932208d\",\n  \"version\": 3,\n  \"crypto\": {\n    \"cipher\": \"aes-128-ctr\",\n    \"cipherparams\": {\"iv\": \"bfcb88a1501e2bb1e6694c03da18953d\"},\n    \"ciphertext\": \"076510b4e25d5cfc31239bffcad6036fe543cbbb04b9f3ec719bf4f61b58fc05\",\n    \"kdf\": \"scrypt\",\n    \"kdfparams\": {\n      \"salt\": \"79124f05995aae98b3088d8365f59a6dfadd1c9ed249abae3c07733f4cbbee53\",\n      \"n\": 131072,\n      \"dklen\": 32,\n      \"p\": 1,\n      \"r\": 8\n    },\n    \"mac\": \"d70f83824c2c30dc5cd3a244d87147b6aa713a6000165789a82a467651284ac7\"\n  }\n}'''\n\nwith open('keystore', 'w') as f:\n    f.write(v3_keystore_str)\n\nwith open('keystore') as f:\n    pk = Account.decrypt(f.read(), 'password')\n    acc = Account.from_key(pk)\n    print(acc.address, acc.key.hex())\n    \n    # create a new keystore with other password\n    new_keystore=Account.encrypt(acc.key.hex(),'password1')\n\n    new_pk = Account.decrypt(new_keystore, 'password1')\n    acc = Account.from_key(pk)\n    print(\"New keystore\")\n    print(acc.address, acc.key.hex())\n```\n\n---\n\n```zsh output\n❯ python keystore-v3.py\n0x029e786304c1531aF3aC7db24A02448e543A099E 0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\nNew keystore\n0x029e786304c1531aF3aC7db24A02448e543A099E 0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py keystoreV3.js focus=1\n\n```\n---\n\nImport **Account** class from **eth_account** \n\n```py keystoreV3.js focus=2\n\n```\n---\nDefine a **keystore v3**, this step illustrates preparing a keystore from file\n\n```py keystoreV3.js focus=4:25\n\n```\n---\nRead the keystore from file and decrypt it with 'password'\n\n```py keystoreV3.js focus=27:28\n\n```\n---\nGet the **public** and **private** key of the keystore\n\n<CH.Code>\n```py keystoreV3.js focus=29:30\n\n```\n---\n\n```zsh output\n0x029e786304c1531aF3aC7db24A02448e543A099E 0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n````\n\n</CH.Code>\n---\nYou can create a new keystore with the same address and different password by using `Account.encrypt`\n\n```py keystoreV3.js focus=32:33\n\n```\n---\nCheck if the `new_keystore` has the same **public** and **private** key as `v3_keystore_str`. \n<CH.Code>\n```py keystoreV3.js focus=35:38\n\n```\n---\n\n```zsh output\nNew keystore\n0x029e786304c1531aF3aC7db24A02448e543A099E 0x1b33a48f58d8c85ab142a7375fcf18714d88271f6647cfa6b54f1be66b05a762\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/keystore/keystore-v4. # V4 keystore\n\nThis example demonstrates how to encrypt and decrypt **keystore V4**.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```py keystorev4.js\nfrom web3py_ext import extend\nfrom eth_account import Account\n\nv4_keystore_str = '''{\n  \"version\": 4,\n  \"id\": \"15f20a72-3719-4f10-b63d-2dbd2658a3ca\",\n  \"address\": \"0x17226c9b4e130551c258eb7b1cdc927c13998cd6\",\n  \"keyring\": [\n    {\n      \"ciphertext\": \"07162b797dcb32dd96686be249f9b3c357642bf5f5454d0fcbefedb265667f37\",\n      \"cipherparams\": {\n        \"iv\": \"8611384aaa8147ef54cbca175d2e818c\"\n      },\n      \"cipher\": \"aes-128-ctr\",\n      \"kdf\": \"scrypt\",\n      \"kdfparams\": {\n        \"dklen\": 32,\n        \"salt\": \"d7cb1f18d9fb7aa81042f61a61de9c456f829f2dc8b46cb6290d1bb9de89b791\",\n        \"n\": 4096,\n        \"r\": 8,\n        \"p\": 1\n      },\n      \"mac\": \"ed0a57bbb11d512f7e3c3025e6dc497c15a2fa3aad1fe558b4cad53f887e06d8\"\n    },\n    {\n      \"ciphertext\": \"394200b0c8abae159e7f19c3eee55409ec789ac77a970e4c3f6bc1839a4afbfc\",\n      \"cipherparams\": {\n        \"iv\": \"3013456d71996e32e231923f289f5c78\"\n      },\n      \"cipher\": \"aes-128-ctr\",\n      \"kdf\": \"scrypt\",\n      \"kdfparams\": {\n        \"dklen\": 32,\n        \"salt\": \"fca63eb0670a9bffcc67cb77f43525a8c93d49e0b24acbf7d2a98bff8a5a5cf1\",\n        \"n\": 4096,\n        \"r\": 8,\n        \"p\": 1\n      },\n      \"mac\": \"880fa7e1240c1deb18898edea28a2baeb57a0c250971c5fea333033a92a958f7\"\n    },\n    {\n      \"ciphertext\": \"e04e0c8c4eaf5a22a037c0771f41e5e3c6e09cf624832a340d1c962ac5aa03cb\",\n      \"cipherparams\": {\n        \"iv\": \"8777c8e5c244190b026c54b4a2474bf0\"\n      },\n      \"cipher\": \"aes-128-ctr\",\n      \"kdf\": \"scrypt\",\n      \"kdfparams\": {\n        \"dklen\": 32,\n        \"salt\": \"e4b4d5b664f6722a5ad41a1b46249204326c952b3a4ac255ae4a0b5128e4803a\",\n        \"n\": 4096,\n        \"r\": 8,\n        \"p\": 1\n      },\n      \"mac\": \"c618020675a344b3e13dfe9c605115faf32dc80a7d24081b264ebf04fe5db1dd\"\n    }\n  ]\n}'''\n\nwith open('keystore', 'w') as f:\n    f.write(v4_keystore_str)\n\nwith open('keystore') as f:\n    pk = Account.v4_decrypt(f.read(), \"Kaia\")\n    accs = list(map(lambda acc: Account.from_key_pair(acc['address'], acc['private_key']), pk))\n    print(\"Original Keystores\")\n    for acc in accs:\n        print(acc.address, acc.key.hex())\n    print(\"New Keystores\")\n    # kaia-sdk only supports encrypting keystore v3\n    for acc in accs:\n      new_keystore=Account.encrypt(acc.key.hex(),'password1')\n      new_pk = Account.decrypt(new_keystore, 'password1')\n      new_acc = Account.from_key(new_pk)\n      print(new_acc.address,new_acc.key.hex())\n```\n\n---\n\n```zsh output\n❯ python keystore-v4.py\nOriginal Keystores\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0xeaffa1321040c44cfb8ae21cab8377198ef6706fb7b6b2a09db292b5fe2a5e63\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0x3b0ac1c503373e1a8f4c35a71dbce404846d8a6173538680dea1d149fd5e494c\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0x21558e1796ad364d34a0ad618f8b086c9af2694083a3cb129a0af10dc6b6cc9e\nNew Keystores\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0xeaffa1321040c44cfb8ae21cab8377198ef6706fb7b6b2a09db292b5fe2a5e63\n0x354688C7A16eA109Da83e386A86945Abe395cDfC 0x3b0ac1c503373e1a8f4c35a71dbce404846d8a6173538680dea1d149fd5e494c\n0x4B53Df387Cb8d256D65a7385c9a5AEF8DbB12265 0x21558e1796ad364d34a0ad618f8b086c9af2694083a3cb129a0af10dc6b6cc9e\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py keystorev4.js focus=1\n\n```\n---\n\nImport **Account** class from **eth_account** \n\n```py keystorev4.js focus=2\n\n```\n---\nDefine a **keystore v4**, this step illustrates preparing a keystore from file\n\n```py keystorev4.js focus=4:61\n\n```\n---\nRead the keystore from file and **decrypt** it with '**Kaia**'\n\n```py keystorev4.js focus=63:64\n\n```\n---\nGet the **public** and **private** keys of the keystore\n\n<CH.Code>\n```py keystorev4.js focus=65:68\n\n```\n---\n\n```zsh output\nOriginal Keystores\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0xeaffa1321040c44cfb8ae21cab8377198ef6706fb7b6b2a09db292b5fe2a5e63\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0x3b0ac1c503373e1a8f4c35a71dbce404846d8a6173538680dea1d149fd5e494c\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0x21558e1796ad364d34a0ad618f8b086c9af2694083a3cb129a0af10dc6b6cc9e\n````\n\n</CH.Code>\n---\nYou can create a new keystore with the same address and different password by using `Account.encrypt`. Currently kaia-sdk only supports creating v3 keystore.\n\n```py keystorev4.js focus=71:72\n\n```\n---\nCheck if the `new_keystore` has the same **public** and **private** key as `v4_keystore_str`. \n<CH.Code>\n```py keystorev4.js focus=73:75\n\n```\n---\n\n```zsh output\nNew Keystores\n0x17226c9B4e130551c258Eb7B1Cdc927c13998cd6 0xeaffa1321040c44cfb8ae21cab8377198ef6706fb7b6b2a09db292b5fe2a5e63\n0x354688C7A16eA109Da83e386A86945Abe395cDfC 0x3b0ac1c503373e1a8f4c35a71dbce404846d8a6173538680dea1d149fd5e494c\n0x4B53Df387Cb8d256D65a7385c9a5AEF8DbB12265 0x21558e1796ad364d34a0ad618f8b086c9af2694083a3cb129a0af10dc6b6cc9e\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/send-transaction/legacy-recover-tx. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_legacy_value_transfer_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_tx_sign_recover_legacy():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    value_transfer_tx = {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    }\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered_tx)\n\nweb3_tx_sign_recover_legacy()\n```\n\n---\n\n```zsh output\n❯ py web3_legacy_value_transfer_sign_recover.py\ntx hash:  0x26e3137f5a44e64c7238367dc9d4270e63aaedd584ad7854509612fe82d24f74 receipt:  AttributeDict({'blockHash': HexBytes('0xfa5dc338557b4bb74ed640bb95f3249f258469e2ff805f38b437287dce4a5d73'), 'blockNumber': 150557816, 'contractAddress': None, 'cumulativeGasUsed': 21000, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x26e3137f5a44e64c7238367dc9d4270e63aaedd584ad7854509612fe82d24f74'), 'transactionIndex': 0, 'type': 2})\n\nsender 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\nrecovered 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_legacy_value_transfer_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py web3_legacy_value_transfer_sign_recover.py focus=3:6\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_legacy_value_transfer_sign_recover.py focus=8:10\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quickode**\n\n```py web3_legacy_value_transfer_sign_recover.py focus=8:10\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n))\n\ndef web3_legacy_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    value_transfer_tx = {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    }\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered_tx)\n\nweb3_legacy_value_transfer_sign_recover()\\\n```\n\n---\n\nDefine a sender's wallet from private key using **Account.from_key**\n\n```py web3_legacy_value_transfer_sign_recover.py focus=13\n\n```\n\n---\n\nCreate a **transaction** with **from**, **to** and **value** fields to transfer.\n\n```py web3_legacy_value_transfer_sign_recover.py focus=14:18\n\n```\n\n---\n\n**from**: the sender's address, **to**: target address to receive kaia.\n\n```py web3_legacy_value_transfer_sign_recover.py focus=15:16\n\n```\n\n---\n\n**value** field means how many kaia you want to send and you can use the **Web3.to_peb** utils to convert kaia to peb unit.\n\n```py web3_legacy_value_transfer_sign_recover.py focus=17\n\n```\n\n---\n\nUse **fill_transaction** to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py web3_legacy_value_transfer_sign_recover.py focus=4:6,19\n\n```\n\n---\n\nSign the transaction with **sender** private key\n\n```py web3_legacy_value_transfer_sign_recover.py focus=20\n\n```\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_legacy_value_transfer_sign_recover.py focus=22:24\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_transaction** from signed transaction\n\n<CH.Code>\n```py web3_legacy_value_transfer_sign_recover.py focus=26:27\n\n````\n---\n\n```zsh output\n❯ python txTypeLegacyTransaction.py\nsender 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\nrecovered 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/send-transaction/multisig-recover-tx. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_multisig_value_transfer_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_multisig():\n    user1 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a'\n    )\n    user2 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n    user3 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user1.address,\n        'to' : user1.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user1.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user2.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user3.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", user1.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_multisig()\n```\n\n---\n\n```zsh output\n❯ py web3_multisig_value_transfer_sign_recover.py\ntx hash:  0xe5c4f8b3bd90bf86660eff4f6e4b51dec84e49ac50adcfff7ca983dcfb2db31d receipt:  AttributeDict({'blockHash': HexBytes('0x8e0df2104f3f829e06a23808563b07b22c729e04285ebe76aad08f0fecfb4183'), 'blockNumber': 150557795, 'contractAddress': None, 'cumulativeGasUsed': 51000, 'effectiveGasPrice': 25000000000, 'from': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'gasUsed': 51000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E', 'transactionHash': HexBytes('0xe5c4f8b3bd90bf86660eff4f6e4b51dec84e49ac50adcfff7ca983dcfb2db31d'), 'transactionIndex': 0, 'type': 0})\n\nsender 0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\nrecovered 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_multisig_value_transfer_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py web3_multisig_value_transfer_sign_recover.py focus=3:8\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_multisig_value_transfer_sign_recover.py focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_multisig_value_transfer_sign_recover.py focus=11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_multisig():\n    user1 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0xa32c30608667d43be2d652bede413f12a649dd1be93440878e7f712d51a6768a'\n    )\n    user2 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n    user3 = Account.from_key_pair(\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user1.address,\n        'to' : user1.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user1.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user2.key)\n    signed_tx = Account.sign_transaction(signed_tx.rawTransaction, user3.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", user1.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_multisig()\n```\n\n---\n\nDefine 3 diffent wallet from addresses and private keys using **Account.from_key_pair**\n\n```py web3_multisig_value_transfer_sign_recover.py focus=14:25\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.VALUE_TRANSFER**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_multisig_value_transfer_sign_recover.py focus=27\n\n```\n\n---\n\nCreate a **transaction** with **from**, **to** and **value** fields to transfer.\n\n```py web3_multisig_value_transfer_sign_recover.py focus=28:32\n\n```\n\n---\n\n**from**: the sender's address, **to**: target address to receive kaia.\n\n```py web3_multisig_value_transfer_sign_recover.py focus=29:30\n\n```\n\n---\n\n**value** field means how many kaia you want to send and you can use the **Web3.to_peb** utils to convert kaia to peb unit.\n\n```py web3_multisig_value_transfer_sign_recover.py focus=31\n\n```\n\n---\n\nUse **fill_transaction** to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py web3_multisig_value_transfer_sign_recover.py focus=4:6,33\n\n```\n\n---\n\nSign the transaction with the **user1's private key**\n\n```py web3_multisig_value_transfer_sign_recover.py focus=34\n\n```\n\n---\n\nSign the **signed_tx** with the **user2** and **user3** private keys\n\n```py web3_multisig_value_transfer_sign_recover.py focus=35:36\n\n```\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_multisig_value_transfer_sign_recover.py focus=38:40\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nRecover user1 address with **Account.recover_transaction** from signed transaction from **user3**\n\n<CH.Code>\n```py web3_multisig_value_transfer_sign_recover.py focus=42:43\n\n````\n---\n\n```zsh output\n❯ python web3_multisig_value_transfer_sign_recover.py\nsender 0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\nrecovered 0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/send-transaction/public-recover-tx. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_public_value_transfer_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_pubkey():\n    user = Account.from_key_pair(\n        '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_pubkey()\n```\n\n---\n\n```zsh output\n❯ python txTypeLegacyTransaction.py\ntx hash:  0x26b8f66ac07e666163c65396fb24a5940ccc5bdc84a1de5301550f7fe096e2d3 receipt:  AttributeDict({'blockHash': HexBytes('0x1731103ca6b336d0b1f6731632e7339f710f2316b5efb63882108bd0a5207f45'), 'blockNumber': 150557786, 'contractAddress': None, 'cumulativeGasUsed': 21000, 'effectiveGasPrice': 25000000000, 'from': '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b', 'transactionHash': HexBytes('0x26b8f66ac07e666163c65396fb24a5940ccc5bdc84a1de5301550f7fe096e2d3'), 'transactionIndex': 0, 'type': 0})\n\nsender 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_public_value_transfer_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py web3_public_value_transfer_sign_recover.py focus=3:8\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_public_value_transfer_sign_recover.py focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_public_value_transfer_sign_recover.py focus=11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_pubkey():\n    user = Account.from_key_pair(\n        '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_pubkey()\n```\n\n---\n\nDefine a wallet from address and private key using **Account.from_key_pair**\n\n```py web3_public_value_transfer_sign_recover.py focus=14:17\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.VALUE_TRANSFER**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_public_value_transfer_sign_recover.py focus=19\n\n```\n\n---\n\nCreate a **transaction** with **from**, **to** and **value** fields to transfer.\n\n```py web3_public_value_transfer_sign_recover.py focus=20:24\n\n```\n\n---\n\n**from**: the sender's address, **to**: target address to receive kaia.\n\n```py web3_public_value_transfer_sign_recover.py focus=21:22\n\n```\n\n---\n\n**value** field means how many kaia you want to send and you can use the **Web3.to_peb** utils to convert kaia to peb unit.\n\n```py web3_public_value_transfer_sign_recover.py focus=23\n\n```\n\n---\n\nUse **fill_transaction** to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py web3_public_value_transfer_sign_recover.py focus=4:6,25\n\n```\n\n---\n\nSign the transaction with the defined account\n\n```py web3_public_value_transfer_sign_recover.py focus=26\n\n```\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_public_value_transfer_sign_recover.py focus=28:30\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_transaction** from signed transaction\n\n<CH.Code>\n```py web3_public_value_transfer_sign_recover.py focus=32:33\n\n````\n---\n\n```zsh output\n❯ python web3_public_value_transfer_sign_recover.py\nsender 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/send-transaction/role-based-recover-tx. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_role_based_value_transfer_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_role_based():\n    txRoleUser = Account.from_key_pair(\n        '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : txRoleUser.address,\n        'to' : txRoleUser.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, txRoleUser.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", txRoleUser.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_role_based()\n```\n\n---\n\n```zsh output\n❯ py web3_multisig_value_transfer_sign_recover.py\ntx hash:  0x63b7dc24acdea79fc3b63059072f744f43917a989b7aead7e69d54be9e338544 receipt:  AttributeDict({'blockHash': HexBytes('0x7a4ddd2165b84a8279333daaae641140bc8c64fa91d632828bcc0a7cf94e5aca'), 'blockNumber': 150557802, 'contractAddress': None, 'cumulativeGasUsed': 21000, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0x63b7dc24acdea79fc3b63059072f744f43917a989b7aead7e69d54be9e338544'), 'transactionIndex': 0, 'type': 0})\n\nsender 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\nrecovered 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_role_based_value_transfer_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py web3_role_based_value_transfer_sign_recover.py focus=3:9\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_role_based_value_transfer_sign_recover.py focus=11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_role_based_value_transfer_sign_recover.py focus=11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_tx_sign_recover_role_based():\n    txRoleUser = Account.from_key_pair(\n        '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : txRoleUser.address,\n        'to' : txRoleUser.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, txRoleUser.key)\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\n    recovered = w3.klay.recover_from_transaction(signed_tx.rawTransaction.hex(), \"latest\")\n    print(\"\\nsender\", txRoleUser.address, \"\\nrecovered\", recovered)\n\nweb3_tx_sign_recover_role_based()\n```\n\n---\n\nDefine a wallet from address and private key using **Account.from_key_pair** which has the role to send transaction\n\n```py web3_role_based_value_transfer_sign_recover.py focus=14:17\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.VALUE_TRANSFER**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_role_based_value_transfer_sign_recover.py focus=18\n\n```\n\n---\n\nCreate a **transaction** with **from**, **to** and **value** fields to transfer.\n\n```py web3_role_based_value_transfer_sign_recover.py focus=19:23\n\n```\n\n---\n\n**from**: the sender's address, **to**: target address to receive kaia.\n\n```py web3_role_based_value_transfer_sign_recover.py focus=20:21\n\n```\n\n---\n\n**value** field means how many kaia you want to send and you can use the **Web3.to_peb** utils to convert kaia to peb unit.\n\n```py web3_role_based_value_transfer_sign_recover.py focus=22\n\n```\n\n---\n\nUse **fill_transaction** to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py web3_role_based_value_transfer_sign_recover.py focus=4,6,24\n\n```\n\n---\n\nSign the transaction with the defined account\n\n```py web3_role_based_value_transfer_sign_recover.py focus=25\n\n```\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_role_based_value_transfer_sign_recover.py focus=27:29\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_transaction** from signed transaction\n\n<CH.Code>\n```py web3_role_based_value_transfer_sign_recover.py focus=27:28\n\n````\n---\n\n```zsh output\n❯ python web3_role_based_value_transfer_sign_recover.py\nsender 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\nrecovered 0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/sign-message/legacy-recover-msg. # Legacy Account Key\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_legacy_value_transfer_message_recover.py\nfrom eth_account import Account\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\ndef web3_legacy_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    message_text = \"I♥KLAYTN\"\n    msghash = encode_defunct(text=message_text)\n    signature = Account.sign_message(msghash, user.key)\n\n    recovered = Account.recover_message(msghash, signature=signature.signature)\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered)\n\nweb3_legacy_value_transfer_sign_recover()\n```\n\n---\n\n```zsh output\n❯ python web3_legacy_value_transfer_message_recover.py\nsender 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\nrecovered 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary utils from **eth_utils** and **eth_account**\n\n```py web3_legacy_value_transfer_message_recover.py focus=1:3\n\n```\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_legacy_value_transfer_message_recover.py focus=4\n\n```\n\n---\n\nDefine a wallet from private key using **Account.from_key**\n\n```py web3_legacy_value_transfer_message_recover.py focus=7\n\n```\n\n---\n\nDefine any message to sign\n\n```py web3_legacy_value_transfer_message_recover.py focus=8\n\n```\n\n---\n\nFormat the message using **encode_defunct** to make it compatible with EIP-191 standard.\n\n```py web3_legacy_value_transfer_message_recover.py focus=9\n\n```\n\n---\n\nSign the transaction with the created account\n\n```py web3_legacy_value_transfer_message_recover.py focus=10\n\n```\n\n---\n\nRecover sender address with **Account.recover_message** from signed message\n\n<CH.Code>\n```py web3_legacy_value_transfer_message_recover.py focus=12:13\n\n````\n---\n\n```zsh output\n❯ python web3_legacy_value_transfer_message_recover.py\nsender 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\nrecovered 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/sign-message/multisig-recover-msg. # Multisig Account Key\n\n**AccountKeyWeightedMultiSig** is an account key type containing a threshold and WeightedPublicKeys which contains a list consisting of a public key and its weight.\n\nIn order for a transaction to be valid for an account associated with **AccountKeyWeightedMultiSig**, the following conditions should be satisfied:\n_ The weighted sum of the signed public keys should be larger than the threshold.\n_ The invalid signature should not be included in the transaction. \\* The number of signed public keys should be less than the number of weightedPublicKeys.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_multisig_value_transfer_message_recover.py\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_multisig_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        # multisig account address\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        # a member key of multisig account\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered) # recovered is an original address of the member key\n\nweb3_multisig_value_transfer_sign_recover()\n```\n\n---\n\n```zsh output\n❯ python web3_multisig_value_transfer_message_recover.py\n0xb7057812498a0a6f740fb218ce5ef945dce3b8437e5662fc707dad72e096b7036f98e96d48dd10de502a1d0ce0ae91e048357721dc7502a9aa2018561c06a97d1b\n132\n\nsender 0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n```\n\n</CH.Code>\n\n---\n\nImport necessary utils from **eth_utils**, **web3** and **eth_account**\n\n```py web3_multisig_value_transfer_message_recover.py focus=1:4\n\n```\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_multisig_value_transfer_message_recover.py focus=5\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_multisig_value_transfer_message_recover.py focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_multisig_value_transfer_message_recover.py focus=7\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_multisig_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        # multisig account address\n        '0x82c6a8d94993d49cfd0c1d30f0f8caa65782cc7e',\n        # a member key of multisig account\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered) # recovered is an original address of the member key\n\nweb3_multisig_value_transfer_sign_recover()\n```\n\n---\n\nDefine a wallet from private key using **Account.from_key_pair** which is a member key of your multisig account\n\n```py web3_multisig_value_transfer_message_recover.py focus=10:15\n\n```\n\n---\n\nDefine any message to sign\n\n```py web3_multisig_value_transfer_message_recover.py focus=16\n\n```\n\n---\n\nFormat the message using **encode_defunct** to make it compatible with EIP-191 standard.\n\n```py web3_multisig_value_transfer_message_recover.py focus=17\n\n```\n\n---\n\nSign the transaction with the created account\n\n```py web3_multisig_value_transfer_message_recover.py focus=18\n\n```\n\n---\n\nPrint out the signature and its length\n\n<CH.Code>\n```py web3_multisig_value_transfer_message_recover.py focus=20:21\n\n````\n\n---\n\n```zsh output\n❯ python web3_multisig_value_transfer_message_recover.py\n0xb7057812498a0a6f740fb218ce5ef945dce3b8437e5662fc707dad72e096b7036f98e96d48dd10de502a1d0ce0ae91e048357721dc7502a9aa2018561c06a97d1b\n132\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_message** from signed message\n\n<CH.Code>\n```py web3_multisig_value_transfer_message_recover.py focus=22:23\n\n````\n---\n\n```zsh output\n❯ python web3_multisig_value_transfer_message_recover.py\nsender 0x82C6a8D94993d49cfd0c1D30F0F8Caa65782cc7E\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/sign-message/public-recover-msg. # Public Account Key\n\n**AccountKeyPublic** is used for accounts having one public key. If an account has an AccountKeyPublic object, the transaction validation process is done like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_public_value_transfer_message_recover.py\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_public_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered)\n\nweb3_public_value_transfer_message_recover()\n```\n\n---\n\n```zsh output\n❯ python web3_public_value_transfer_message_recover.py\n0x875445e2197ec28e913a1775a40ca8c5a0a9e1806c72e08e01a54caf2b65640d09ff852643df23277c46469ef7f5e84ed96c5553b6ad648a4255a0c5dca58bdc1c\n132\n\nsender 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b\nrecovered 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nImport necessary utils from **eth_utils**, **web3** and **eth_account**\n\n```py web3_public_value_transfer_message_recover.py focus=1:4\n\n```\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_public_value_transfer_message_recover.py focus=5\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_public_value_transfer_message_recover.py focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_public_value_transfer_message_recover.py focus=7\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_public_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        '0xe15cd70a41dfb05e7214004d7d054801b2a2f06b',\n        '0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered)\n\nweb3_public_value_transfer_message_recover()\n```\n\n---\n\nDefine a wallet from private key using **Account.from_key_pair** which is a member key of your multisig account\n\n```py web3_public_value_transfer_message_recover.py focus=10:13\n\n```\n\n---\n\nDefine any message to sign\n\n```py web3_public_value_transfer_message_recover.py focus=14\n\n```\n\n---\n\nFormat the message using **encode_defunct** to make it compatible with EIP-191 standard.\n\n```py web3_public_value_transfer_message_recover.py focus=15\n\n```\n\n---\n\nSign the transaction with the created account\n\n```py web3_public_value_transfer_message_recover.py focus=16\n\n```\n\n---\n\nPrint out the signature and its length\n\n<CH.Code>\n```py web3_public_value_transfer_message_recover.py focus=18:19\n\n````\n\n---\n\n```zsh output\n❯ python web3_public_value_transfer_message_recover.py\n0x875445e2197ec28e913a1775a40ca8c5a0a9e1806c72e08e01a54caf2b65640d09ff852643df23277c46469ef7f5e84ed96c5553b6ad648a4255a0c5dca58bdc1c\n132\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_message** from signed message\n\n<CH.Code>\n```py web3_public_value_transfer_message_recover.py focus=20:21\n\n````\n---\n\n```zsh output\n❯ python web3_public_value_transfer_message_recover.py\nsender 0xe15Cd70A41dfb05e7214004d7D054801b2a2f06b\nrecovered 0xa2a8854b1802d8cd5de631e690817c253d6a9153\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/account-management/sign-message/role-based-recover-msg. # Role-based Account Key\n\n**AccountKeyRoleBased** represents a role-based key. If an account has an **AccountKeyRoleBased** object and the transaction type is one **except account update**, the validation process is done according to each roles like below:\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_role_based_value_transfer_message_recover.py\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_role_based_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        # role-based account address\n        '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n        # transaction role key of role-based account\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered) # recovered is an original address of the member key\n\nweb3_role_based_value_transfer_message_recover()\n```\n\n---\n\n```zsh output\n❯ python web3_public_value_transfer_message_recover.py\n0xb7057812498a0a6f740fb218ce5ef945dce3b8437e5662fc707dad72e096b7036f98e96d48dd10de502a1d0ce0ae91e048357721dc7502a9aa2018561c06a97d1b\n132\n\nsender 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n```\n\n</CH.Code>\n\n---\n\nImport necessary utils from **eth_utils**, **web3** and **eth_account**\n\n```py web3_role_based_value_transfer_message_recover.py focus=1:4\n\n```\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_role_based_value_transfer_message_recover.py focus=5\n\n```\n\n---\n\nDefine a web3 connection using **Web3.HTTPProvider** and RPC endpoint\n\n```py web3_role_based_value_transfer_message_recover.py focus=7\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_role_based_value_transfer_message_recover.py focus=7\nfrom eth_account import Account\nfrom web3 import Web3\nfrom eth_account.messages import encode_defunct\nfrom eth_utils.curried import to_hex\nfrom web3py_ext import extend\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_role_based_value_transfer_message_recover():\n    user = Account.from_key_pair(\n        # role-based account address\n        '0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea',\n        # transaction role key of role-based account\n        '0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac'\n    )\n    message = to_hex(text=\"I♥KLAYTN\")\n    msghash = encode_defunct(hexstr=message)\n    signature = Account.sign_message(msghash, user.key)\n\n    print(signature.signature.hex())\n    print(len(signature.signature.hex()))\n    recovered = w3.klay.recover_from_message(user.address, message, signature.signature.hex(), \"latest\")\n    print(\"\\nsender\", user.address, \"\\nrecovered\", recovered) # recovered is an original address of the member key\n\nweb3_role_based_value_transfer_message_recover()\n```\n\n---\n\nDefine a wallet from private key using **Account.from_key_pair** which is a role key of role-based account\n\n```py web3_role_based_value_transfer_message_recover.py focus=10:13\n\n```\n\n---\n\nDefine any message to sign\n\n```py web3_role_based_value_transfer_message_recover.py focus=16\n\n```\n\n---\n\nFormat the message using **encode_defunct** to make it compatible with EIP-191 standard.\n\n```py web3_role_based_value_transfer_message_recover.py focus=17\n\n```\n\n---\n\nSign the transaction with the created account\n\n```py web3_role_based_value_transfer_message_recover.py focus=18\n\n```\n\n---\n\nPrint out the signature and its length\n\n<CH.Code>\n```py web3_role_based_value_transfer_message_recover.py focus=20:21\n\n````\n\n---\n\n```zsh output\n❯ python web3_role_based_value_transfer_message_recover.py\n0xb7057812498a0a6f740fb218ce5ef945dce3b8437e5662fc707dad72e096b7036f98e96d48dd10de502a1d0ce0ae91e048357721dc7502a9aa2018561c06a97d1b\n132\n````\n\n</CH.Code>\n\n---\n\nRecover sender address with **Account.recover_message** from signed message\n\n<CH.Code>\n```py web3_role_based_value_transfer_message_recover.py focus=20:21\n\n````\n---\n\n```zsh output\n❯ python web3_role_based_value_transfer_message_recover.py\nsender 0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\nrecovered 0xe15cd70a41dfb05e7214004d7d054801b2a2f06b\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/account-update. # Account Update\n\n# Basic\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_account_update_multisig.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\nfrom eth_utils.address import to_checksum_address\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_role_based():\n    transaction_key = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    update_key = Account.from_key('0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda')\n    fee_payer_key = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : to_checksum_address(\"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\"),\n        'key' : {\n            \"type\": KeyType.ROLE_BASED,\n            \"keys\": {\n                \"roleTransactionKey\": {\n                    \"type\":KeyType.PUBLIC,\n                    \"key\": compressed_key(transaction_key)\n                },\n                \"roleAccountUpdateKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(update_key)\n                },\n                \"roleFeePayerKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(fee_payer_key)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_key.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address: \", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_role_based()\n```\n\n---\n\n```zsh output\n❯ python 8-account_update_role_based.py\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 40,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n\nrawTransaction: 20f8da28850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0985bec3e261c26aae4753692e485df1f2610d15a49c6d1a211aa722ebe07f83aa030de040be157e4ba1ee085adfa104ad52e6c5be2133e08eba32c23e8fdcef2f3\n\nrecovered sender address:  0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\n\ndecoded transaction: {\n  \"type\": 32,\n  \"nonce\": 40,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 68913966555219307694792023212600507140724440249606323106025362523748232067130,\n      \"s\": 22103284707653811363718459097471289368017860785927799915329973403830188962547\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_account_update_multisig.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytools**\n\n```py web3_account_update_multisig.py focus=3:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_account_update_multisig.py focus=18:20\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_account_update_multisig.py focus=18:20\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\nfrom eth_utils.address import to_checksum_address\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_account_update_role_based():\n    transaction_key = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    update_key = Account.from_key('0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda')\n    fee_payer_key = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : to_checksum_address(\"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\"),\n        'key' : {\n            \"type\": KeyType.ROLE_BASED,\n            \"keys\": {\n                \"roleTransactionKey\": {\n                    \"type\":KeyType.PUBLIC,\n                    \"key\": compressed_key(transaction_key)\n                },\n                \"roleAccountUpdateKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(update_key)\n                },\n                \"roleFeePayerKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(fee_payer_key)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_key.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address: \", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_account_update_role_based()\n```\n\n---\n\nLoad **transaction** key from a private key to use it as **transaction role key**. You can use it to sign a transaction\n\n```py web3_account_update_multisig.py focus=23\n\n```\n\n---\n\nLoad **update** key from a private key to use it as **update role key**. You can use it to sign the account update transaction for this account. It means only a person who have this key can update this account.\n\n```py web3_account_update_multisig.py focus=24\n\n```\n\n---\n\nLoad **fee payer** key from a private key to use it as **fee payer role key**. You can use it to sign a transaction as a fee payer.\n\n```py web3_account_update_multisig.py focus=25\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_account_update_multisig.py focus=6:7,10,27\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_account_update_multisig.py focus=15,28:47\n\n```\n\n---\n\nIn this case, the account key to update is the **role-based** key and each role has **pubkey** type. Each role can have pubkey or multisig.\n\n```py web3_account_update_multisig.py focus=31,33:34,37:38,41:42\n\n```\n\n---\n\nYou can use the **compressed_key** util to set each role key. It will extract the compressed public key from the key\n\n```py web3_account_update_multisig.py focus=35,39,43\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_account_update_multisig.py focus=6,8,10,48\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=11,12,14,49\n\n````\n\n---\n```zsh output\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 40,\n  \"chainId\": 1001,\n  \"type\": 32,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n````\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You should sign it with **update role key** as the account \"0x5bd2...ccea\" is already role-based account to update this account\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=52:53\n\n````\n---\n```zsh output\nrawTransaction: 20f8da28850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a0985bec3e261c26aae4753692e485df1f2610d15a49c6d1a211aa722ebe07f83aa030de040be157e4ba1ee085adfa104ad52e6c5be2133e08eba32c23e8fdcef2f3\n````\n\n</CH.Code>\n\n---\n\n**Recovering** the sender's address from the signed transaction\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=55:56\n\n````\n---\n```zsh output\nrecovered sender address:  0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\n````\n\n</CH.Code>\n\n---\n\nIf you want to see the RLP-encoded signed tx, use the **decode_transaction** util\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=58:59\n```\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 32,\n  \"nonce\": 40,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 68913966555219307694792023212600507140724440249606323106025362523748232067130,\n      \"s\": 22103284707653811363718459097471289368017860785927799915329973403830188962547\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\n```\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_account_update_multisig.py focus=61:63\n\n````\n---\n```zsh output\ntx hash:  0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a receipt:  AttributeDict({'blockHash': HexBytes('0xcd0b362591ab28e4c5c423561ea525ad7f19e1fbc177aeef640aece7d53fc83d'), 'blockNumber': 147156811, 'contractAddress': None, 'cumulativeGasUsed': 271841, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 81000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0xd3315a9b59096514bb518a624effa314850f816e3b77633fd47660949518888a'), 'transactionIndex': 1, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py cancel_example.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_cancel_sign_recover():\n    user1 = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from':user1.address,\n        'to':user1.address,\n        'value':Web3.to_peb(10, \"klay\")\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user1.key)\n    w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\n    cancel_tx = empty_tx(TxType.CANCEL)\n    cancel_tx = merge(cancel_tx, {\n        'from' : user1.address,\n        'nonce' : value_transfer_tx['nonce']\n    })\n    cancel_tx = fill_transaction(cancel_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(cancel_tx, user1.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_cancel_sign_recover()\n\n```\n\n---\n\n```zsh output\n❯ py cancel_example.py\nraw transaction of signed tx: 0x38f86b82036f850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0a559852e977476bfa6ba263a9c1f1f4b60608b82752d73a3f1162e341e7b5f06a07f12a242ad1cdbc08966e62af4c8749fc438e058b1344a4f11ba206f207ddc84\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 56,\n  \"nonce\": 879,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 74789788593375966616662801192824717129914792416281096168085546212656613646086,\n      \"s\": 57476654897736400463186412232435765147976539862827431359170424955204316028036\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686 receipt:  AttributeDict({'blockHash': HexBytes('0x672deecd07b84c2b524f160fccc6ce0d20486bdde914a7c7065e2de0ed723635'), 'blockNumber': 147364137, 'contractAddress': None, 'cumulativeGasUsed': 349674, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686'), 'transactionIndex': 3, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py cancel_example.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py cancel_example.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py cancel_example.py focus=12:14\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python cancel_example.py focus=12:14\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_cancel_sign_recover():\n    user1 = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from':user1.address,\n        'to':user1.address,\n        'value':Web3.to_peb(10, \"klay\")\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n    signed_tx = Account.sign_transaction(value_transfer_tx, user1.key)\n    w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n\n    cancel_tx = empty_tx(TxType.CANCEL)\n    cancel_tx = merge(cancel_tx, {\n        'from' : user1.address,\n        'nonce' : value_transfer_tx['nonce']\n    })\n    cancel_tx = fill_transaction(cancel_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(cancel_tx, user1.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_cancel_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```python cancel_example.py focus=17\n\n```\n\n---\n\nSend a **value transfer tx**. It **will** be in the **tx pool** and **canceled** before execution. The cancel tx will be failed if it is already executed.\n\n```py cancel_example.py focus=19:27\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.CANCEL**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py cancel_example.py focus=4,5,8,29\n\n```\n\n---\n\nMerge the **from** and **nonce** fields into the empty tx by using the **merge** util.\n\n```py cancel_example.py focus=10,30:33\n\n```\n\n---\n\nMake the **nonce** to be **same** with previously sent **value transfer tx**. You need to set the **same tx nonce** you want to cancel\n\n```python cancel_example.py focus=4,6,8,32\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python cancel_example.py focus=4,6,8,34\n\n```\n\n---\n\nSign the **cancel tx** by user's private key\n\n<CH.Code>\n```python cancel_example.py focus=36:38\n\n````\n---\n```zsh output\nraw transaction of signed tx: 0x38f86b82036f850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0a559852e977476bfa6ba263a9c1f1f4b60608b82752d73a3f1162e341e7b5f06a07f12a242ad1cdbc08966e62af4c8749fc438e058b1344a4f11ba206f207ddc84\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python cancel_example.py focus=40:41\n\n````\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python cancel_example.py focus=43:44\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 56,\n  \"nonce\": 879,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 74789788593375966616662801192824717129914792416281096168085546212656613646086,\n      \"s\": 57476654897736400463186412232435765147976539862827431359170424955204316028036\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the **tx** to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python cancel_example.py focus=46\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python cancel_example.py focus=47:48\n\n````\n---\n```zsh output\ntx hash:  0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686 receipt:  AttributeDict({'blockHash': HexBytes('0x672deecd07b84c2b524f160fccc6ce0d20486bdde914a7c7065e2de0ed723635'), 'blockNumber': 147364137, 'contractAddress': None, 'cumulativeGasUsed': 349674, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686'), 'transactionIndex': 3, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python cancel_example.py focus=49\n\n````\n---\n```zsh output\n❯ node cancel_example.py\nraw transaction of signed tx: 0x38f86b82036f850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0a559852e977476bfa6ba263a9c1f1f4b60608b82752d73a3f1162e341e7b5f06a07f12a242ad1cdbc08966e62af4c8749fc438e058b1344a4f11ba206f207ddc84\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 56,\n  \"nonce\": 879,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 74789788593375966616662801192824717129914792416281096168085546212656613646086,\n      \"s\": 57476654897736400463186412232435765147976539862827431359170424955204316028036\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686 receipt:  AttributeDict({'blockHash': HexBytes('0x672deecd07b84c2b524f160fccc6ce0d20486bdde914a7c7065e2de0ed723635'), 'blockNumber': 147364137, 'contractAddress': None, 'cumulativeGasUsed': 349674, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x3b1278d3748b638a41ffc40ed4cffc6c789ceffbd924f9b00ae7b53f26815686'), 'transactionIndex': 3, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/legacy. TxTypeLegacyTransaction represents a type of transactions existed previously in kaia.\n\n\\*\\*This type of transaction can create an account, transfer tokens, deploy a smart contract, execute a smart contract, or perform a mix of aforementioned.\n\n<CH.Spotlight>\n\n<CH.Code>\n\n```python txTypeLegacyTransaction.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_legacy_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    value_transfer_tx = {\n        'from' : user.address,\n        'to' : user.address, # to self\n        'value' : Web3.to_peb(10, \"klay\"),\n    }\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_legacy_value_transfer_sign_recover()\n```\n\n---\n\n```zsh output\n❯ python txTypeLegacyTransaction.py\nraw transaction of signed tx: 0x02f8738203e982036480850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000080c080a0bf6b983904416f360b1563a92e162d15cd67efb22593873f63ccee150f4e1547a02fa3f5582c060e94b73b1cafdfa662fca93866484ef0953c06aa99d1aeceb491\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"chainId\": 1001,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"data\": \"0x\",\n  \"accessList\": [],\n  \"nonce\": 868,\n  \"maxPriorityFeePerGas\": 0,\n  \"maxFeePerGas\": 50000000000,\n  \"gas\": 63000,\n  \"v\": 0,\n  \"r\": 86581857317945006820941358514738363124805940633281219922143445788962711278919,\n  \"s\": 21548393259938899817541519708353317088336325701153952868361768013661633164433,\n  \"type\": 2\n}\ntx hash:  b'y\\xe4+\\xff\\x8b\\xed\\x11D\\xd9N\\x85\\xd4\\x0f3\\r\\x82+\\x8d\\xc4$3\\xaek\\xc0\\x0b\\x81\\x97\\x8f\\xd1\\xeb\\xb5\\xd1' receipt:  AttributeDict({'blockHash': HexBytes('0x53b38f1b5a53f67d34ab648581ae7425f1915e49ca3869ae14c56df405791a02'), 'blockNumber': 147332771, 'contractAddress': None, 'cumulativeGasUsed': 557368, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x79e42bff8bed1144d94e85d40f330d822b8dc42433ae6bc00b81978fd1ebb5d1'), 'transactionIndex': 3, 'type': 2})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3. In this case if you want to use **kaia specific** util like **Web3.to_peb**, you should extend\n\n```py txTypeLegacyTransaction.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext**\n\n```py txTypeLegacyTransaction.py focus=3:7\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py txTypeLegacyTransaction.py focus=9:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python txTypeLegacyTransaction.py focus=9:11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_legacy_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    value_transfer_tx = {\n        'from' : user.address,\n        'to' : user.address, # to self\n        'value' : Web3.to_peb(10, \"klay\"),\n    }\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_legacy_value_transfer_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```python txTypeLegacyTransaction.py focus=14\n\n```\n\n---\n\nDefine the **legacy tx** with only **from**, **to**, **value** fields. Use unit converter **Web3.to_peb**\n\n```python txTypeLegacyTransaction.py focus=15:19\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python txTypeLegacyTransaction.py focus=20\n\n```\n\n---\n\nSign the legacy tx by user's private key\n\n<CH.Code>\n```python txTypeLegacyTransaction.py focus=22:23\n\n````\n\n---\n```zsh output\nraw transaction of signed tx: 0x02f8738203e982036480850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000080c080a0bf6b983904416f360b1563a92e162d15cd67efb22593873f63ccee150f4e1547a02fa3f5582c060e94b73b1cafdfa662fca93866484ef0953c06aa99d1aeceb491\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python txTypeLegacyTransaction.py focus=25:26\n\n````\n\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python txTypeLegacyTransaction.py focus=28:29\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"chainId\": 1001,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"data\": \"0x\",\n  \"accessList\": [],\n  \"nonce\": 868,\n  \"maxPriorityFeePerGas\": 0,\n  \"maxFeePerGas\": 50000000000,\n  \"gas\": 63000,\n  \"v\": 0,\n  \"r\": 86581857317945006820941358514738363124805940633281219922143445788962711278919,\n  \"s\": 21548393259938899817541519708353317088336325701153952868361768013661633164433,\n  \"type\": 2\n}\n````\n\n</CH.Code>\n\n---\n\nSend the tx to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python txTypeLegacyTransaction.py focus=31\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python txTypeLegacyTransaction.py focus=32\n\n````\n---\n```zsh output\ntx hash:  b'y\\xe4+\\xff\\x8b\\xed\\x11D\\xd9N\\x85\\xd4\\x0f3\\r\\x82+\\x8d\\xc4$3\\xaek\\xc0\\x0b\\x81\\x97\\x8f\\xd1\\xeb\\xb5\\xd1' receipt:  AttributeDict({'blockHash': HexBytes('0x53b38f1b5a53f67d34ab648581ae7425f1915e49ca3869ae14c56df405791a02'), 'blockNumber': 147332771, 'contractAddress': None, 'cumulativeGasUsed': 557368, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x79e42bff8bed1144d94e85d40f330d822b8dc42433ae6bc00b81978fd1ebb5d1'), 'transactionIndex': 3, 'type': 2})\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python txTypeLegacyTransaction.py focus=35\n\n````\n---\n```zsh output\nraw transaction of signed tx: 0x02f8738203e982036480850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000080c080a0bf6b983904416f360b1563a92e162d15cd67efb22593873f63ccee150f4e1547a02fa3f5582c060e94b73b1cafdfa662fca93866484ef0953c06aa99d1aeceb491\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"chainId\": 1001,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"data\": \"0x\",\n  \"accessList\": [],\n  \"nonce\": 868,\n  \"maxPriorityFeePerGas\": 0,\n  \"maxFeePerGas\": 50000000000,\n  \"gas\": 63000,\n  \"v\": 0,\n  \"r\": 86581857317945006820941358514738363124805940633281219922143445788962711278919,\n  \"s\": 21548393259938899817541519708353317088336325701153952868361768013661633164433,\n  \"type\": 2\n}\ntx hash:  b'y\\xe4+\\xff\\x8b\\xed\\x11D\\xd9N\\x85\\xd4\\x0f3\\r\\x82+\\x8d\\xc4$3\\xaek\\xc0\\x0b\\x81\\x97\\x8f\\xd1\\xeb\\xb5\\xd1' receipt:  AttributeDict({'blockHash': HexBytes('0x53b38f1b5a53f67d34ab648581ae7425f1915e49ca3869ae14c56df405791a02'), 'blockNumber': 147332771, 'contractAddress': None, 'cumulativeGasUsed': 557368, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x79e42bff8bed1144d94e85d40f330d822b8dc42433ae6bc00b81978fd1ebb5d1'), 'transactionIndex': 3, 'type': 2})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py smart_contract_deploy_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_smart_contract_deploy_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    smart_contract_deploy_tx = empty_tx(TxType.SMART_CONTRACT_DEPLOY)\n    smart_contract_deploy_tx = merge(smart_contract_deploy_tx, {\n        'from' : user.address,\n        'data' : '0x60806040526040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250600090816200004a9190620002d9565b503480156200005857600080fd5b50620003c0565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000e157607f821691505b602082108103620000f757620000f662000099565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000122565b6200016d868362000122565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001ba620001b4620001ae8462000185565b6200018f565b62000185565b9050919050565b6000819050919050565b620001d68362000199565b620001ee620001e582620001c1565b8484546200012f565b825550505050565b600090565b62000205620001f6565b62000212818484620001cb565b505050565b5b818110156200023a576200022e600082620001fb565b60018101905062000218565b5050565b601f82111562000289576200025381620000fd565b6200025e8462000112565b810160208510156200026e578190505b620002866200027d8562000112565b83018262000217565b50505b505050565b600082821c905092915050565b6000620002ae600019846008026200028e565b1980831691505092915050565b6000620002c983836200029b565b9150826002028217905092915050565b620002e4826200005f565b67ffffffffffffffff8111156200030057620002ff6200006a565b5b6200030c8254620000c8565b620003198282856200023e565b600060209050601f8311600181146200035157600084156200033c578287015190505b620003488582620002bb565b865550620003b8565b601f1984166200036186620000fd565b60005b828110156200038b5784890151825560018201915060208501945060208101905062000364565b86831015620003ab5784890151620003a7601f8916826200029b565b8355505b6001600288020188555050505b505050505050565b6106e280620003d06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633d7403a31461004657806345773e4e14610062578063f6fb7c5d14610080575b600080fd5b610060600480360381019061005b91906102da565b61009e565b005b61006a6100b1565b60405161007791906103a2565b60405180910390f35b6100886100ee565b60405161009591906103a2565b60405180910390f35b80600090816100ad91906105da565b5050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6060600080546100fd906103f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610129906103f3565b80156101765780601f1061014b57610100808354040283529160200191610176565b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101e78261019e565b810181811067ffffffffffffffff82111715610206576102056101af565b5b80604052505050565b6000610219610180565b905061022582826101de565b919050565b600067ffffffffffffffff821115610245576102446101af565b5b61024e8261019e565b9050602081019050919050565b82818337600083830152505050565b600061027d6102788461022a565b61020f565b90508281526020810184848401111561029957610298610199565b5b6102a484828561025b565b509392505050565b600082601f8301126102c1576102c0610194565b5b81356102d184826020860161026a565b91505092915050565b6000602082840312156102f0576102ef61018a565b5b600082013567ffffffffffffffff81111561030e5761030d61018f565b5b61031a848285016102ac565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561035d578082015181840152602081019050610342565b60008484015250505050565b600061037482610323565b61037e818561032e565b935061038e81856020860161033f565b6103978161019e565b840191505092915050565b600060208201905081810360008301526103bc8184610369565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061040b57607f821691505b60208210810361041e5761041d6103c4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610449565b6104908683610449565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104d76104d26104cd846104a8565b6104b2565b6104a8565b9050919050565b6000819050919050565b6104f1836104bc565b6105056104fd826104de565b848454610456565b825550505050565b600090565b61051a61050d565b6105258184846104e8565b505050565b5b818110156105495761053e600082610512565b60018101905061052b565b5050565b601f82111561058e5761055f81610424565b61056884610439565b81016020851015610577578190505b61058b61058385610439565b83018261052a565b50505b505050565b600082821c905092915050565b60006105b160001984600802610593565b1980831691505092915050565b60006105ca83836105a0565b9150826002028217905092915050565b6105e382610323565b67ffffffffffffffff8111156105fc576105fb6101af565b5b61060682546103f3565b61061182828561054d565b600060209050601f8311600181146106445760008415610632578287015190505b61063c85826105be565b8655506106a4565b601f19841661065286610424565b60005b8281101561067a57848901518255600182019150602085019450602081019050610655565b868310156106975784890151610693601f8916826105a0565b8355505b6001600288020188555050505b50505050505056fea26469706673582212209ef3751f0d95c57e13f1dec8040231f2a3cade80906567043325556d3435f11c64736f6c63430008120033',\n    })\n    smart_contract_deploy_tx = fill_transaction(smart_contract_deploy_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_deploy_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_smart_contract_deploy_sign_recover()\n```\n\n---\n\n```zsh output\n❯ py smart_contract_deploy_sign_recover.py\nraw transaction of signed tx: 0x28f90b24820...d24781265ed459\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 40,\n  \"to\": \"\",\n  \"value\": 0,\n  \"nonce\": 871,\n  \"gasPrice\": 50000000000,\n  \"gas\": 2107632,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x60806040...30008120033\",\n  \"humanReadable\": false,\n  \"codeFormat\": 0,\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 73903598050814492355277494483128902867114805285273819818860543749250488120475,\n      \"s\": 22219672009687891619102517644078801140776801626643940180871071967441409987673\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x523337afd7e76ef4987054a9f4d3e6461496a81ef61cc46782f455e391f550cb receipt:  AttributeDict({'blockHash': HexBytes('0x3a55647e73f2212d924a65cf5f1290bc6d8f31f515654fbd2c34b43d0943e932'), 'blockNumber': 147341828, 'contractAddress': '0x5c16830351d6c9986B2eEf4f836280b6C6eF0c92', 'cumulativeGasUsed': 1045271, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 702544, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': None, 'transactionHash': HexBytes('0x523337afd7e76ef4987054a9f4d3e6461496a81ef61cc46782f455e391f550cb'), 'transactionIndex': 2, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py smart_contract_deploy_sign_recover.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py smart_contract_deploy_sign_recover.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py smart_contract_deploy_sign_recover.py focus=12:14\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python smart_contract_deploy_sign_recover.py focus=12:14\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_smart_contract_deploy_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    smart_contract_deploy_tx = empty_tx(TxType.SMART_CONTRACT_DEPLOY)\n    smart_contract_deploy_tx = merge(smart_contract_deploy_tx, {\n        'from' : user.address,\n        'data' : '0x60806040526040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250600090816200004a9190620002d9565b503480156200005857600080fd5b50620003c0565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620000e157607f821691505b602082108103620000f757620000f662000099565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001617fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000122565b6200016d868362000122565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001ba620001b4620001ae8462000185565b6200018f565b62000185565b9050919050565b6000819050919050565b620001d68362000199565b620001ee620001e582620001c1565b8484546200012f565b825550505050565b600090565b62000205620001f6565b62000212818484620001cb565b505050565b5b818110156200023a576200022e600082620001fb565b60018101905062000218565b5050565b601f82111562000289576200025381620000fd565b6200025e8462000112565b810160208510156200026e578190505b620002866200027d8562000112565b83018262000217565b50505b505050565b600082821c905092915050565b6000620002ae600019846008026200028e565b1980831691505092915050565b6000620002c983836200029b565b9150826002028217905092915050565b620002e4826200005f565b67ffffffffffffffff8111156200030057620002ff6200006a565b5b6200030c8254620000c8565b620003198282856200023e565b600060209050601f8311600181146200035157600084156200033c578287015190505b620003488582620002bb565b865550620003b8565b601f1984166200036186620000fd565b60005b828110156200038b5784890151825560018201915060208501945060208101905062000364565b86831015620003ab5784890151620003a7601f8916826200029b565b8355505b6001600288020188555050505b505050505050565b6106e280620003d06000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633d7403a31461004657806345773e4e14610062578063f6fb7c5d14610080575b600080fd5b610060600480360381019061005b91906102da565b61009e565b005b61006a6100b1565b60405161007791906103a2565b60405180910390f35b6100886100ee565b60405161009591906103a2565b60405180910390f35b80600090816100ad91906105da565b5050565b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b6060600080546100fd906103f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610129906103f3565b80156101765780601f1061014b57610100808354040283529160200191610176565b820191906000526020600020905b81548152906001019060200180831161015957829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101e78261019e565b810181811067ffffffffffffffff82111715610206576102056101af565b5b80604052505050565b6000610219610180565b905061022582826101de565b919050565b600067ffffffffffffffff821115610245576102446101af565b5b61024e8261019e565b9050602081019050919050565b82818337600083830152505050565b600061027d6102788461022a565b61020f565b90508281526020810184848401111561029957610298610199565b5b6102a484828561025b565b509392505050565b600082601f8301126102c1576102c0610194565b5b81356102d184826020860161026a565b91505092915050565b6000602082840312156102f0576102ef61018a565b5b600082013567ffffffffffffffff81111561030e5761030d61018f565b5b61031a848285016102ac565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561035d578082015181840152602081019050610342565b60008484015250505050565b600061037482610323565b61037e818561032e565b935061038e81856020860161033f565b6103978161019e565b840191505092915050565b600060208201905081810360008301526103bc8184610369565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061040b57607f821691505b60208210810361041e5761041d6103c4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610449565b6104908683610449565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104d76104d26104cd846104a8565b6104b2565b6104a8565b9050919050565b6000819050919050565b6104f1836104bc565b6105056104fd826104de565b848454610456565b825550505050565b600090565b61051a61050d565b6105258184846104e8565b505050565b5b818110156105495761053e600082610512565b60018101905061052b565b5050565b601f82111561058e5761055f81610424565b61056884610439565b81016020851015610577578190505b61058b61058385610439565b83018261052a565b50505b505050565b600082821c905092915050565b60006105b160001984600802610593565b1980831691505092915050565b60006105ca83836105a0565b9150826002028217905092915050565b6105e382610323565b67ffffffffffffffff8111156105fc576105fb6101af565b5b61060682546103f3565b61061182828561054d565b600060209050601f8311600181146106445760008415610632578287015190505b61063c85826105be565b8655506106a4565b601f19841661065286610424565b60005b8281101561067a57848901518255600182019150602085019450602081019050610655565b868310156106975784890151610693601f8916826105a0565b8355505b6001600288020188555050505b50505050505056fea26469706673582212209ef3751f0d95c57e13f1dec8040231f2a3cade80906567043325556d3435f11c64736f6c63430008120033',\n    })\n    smart_contract_deploy_tx = fill_transaction(smart_contract_deploy_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_deploy_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_smart_contract_deploy_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```python smart_contract_deploy_sign_recover.py focus=17\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.SMART_CONTRACT_DEPLOY**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py smart_contract_deploy_sign_recover.py focus=4,5,8,19\n\n```\n\n---\n\nMerge the **additional fields** like **from** and **data** into the empty tx by using the **merge** util.\n\n```py smart_contract_deploy_sign_recover.py focus=10,20:23\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```py smart_contract_deploy_sign_recover.py focus=22\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python smart_contract_deploy_sign_recover.py focus=4,6,8,24\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```python smart_contract_deploy_sign_recover.py focus=26:28\n\n````\n---\n```zsh output\nraw transaction of signed tx: 0x28f90b24820...d24781265ed459\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python smart_contract_deploy_sign_recover.py focus=30:31\n\n````\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python smart_contract_deploy_sign_recover.py focus=33:34\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 40,\n  \"to\": \"\",\n  \"value\": 0,\n  \"nonce\": 871,\n  \"gasPrice\": 50000000000,\n  \"gas\": 2107632,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x60806040...30008120033\",\n  \"humanReadable\": false,\n  \"codeFormat\": 0,\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 73903598050814492355277494483128902867114805285273819818860543749250488120475,\n      \"s\": 22219672009687891619102517644078801140776801626643940180871071967441409987673\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the **tx** to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python smart_contract_deploy_sign_recover.py focus=36\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python smart_contract_deploy_sign_recover.py focus=37:38\n\n````\n---\n```zsh output\ntx hash:  0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f receipt:  AttributeDict({'blockHash': HexBytes('0xe873b7f3bb39ce89131fbbfc727bca00f1998a4b617e89d1db20d55fc479e32d'), 'blockNumber': 147339314, 'contractAddress': None, 'cumulativeGasUsed': 352123, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f'), 'transactionIndex': 2, 'type': 0})```\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python smart_contract_deploy_sign_recover.py focus=40\n\n````\n---\n```zsh output\n❯ node smart_contract_deploy_sign_recover.py\nraw transaction of signed tx: 0x28f90b24820...d24781265ed459\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 40,\n  \"to\": \"\",\n  \"value\": 0,\n  \"nonce\": 871,\n  \"gasPrice\": 50000000000,\n  \"gas\": 2107632,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x60806040...30008120033\",\n  \"humanReadable\": false,\n  \"codeFormat\": 0,\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 73903598050814492355277494483128902867114805285273819818860543749250488120475,\n      \"s\": 22219672009687891619102517644078801140776801626643940180871071967441409987673\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x523337afd7e76ef4987054a9f4d3e6461496a81ef61cc46782f455e391f550cb receipt:  AttributeDict({'blockHash': HexBytes('0x3a55647e73f2212d924a65cf5f1290bc6d8f31f515654fbd2c34b43d0943e932'), 'blockNumber': 147341828, 'contractAddress': '0x5c16830351d6c9986B2eEf4f836280b6C6eF0c92', 'cumulativeGasUsed': 1045271, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 702544, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': None, 'transactionHash': HexBytes('0x523337afd7e76ef4987054a9f4d3e6461496a81ef61cc46782f455e391f550cb'), 'transactionIndex': 2, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py smart_contract_execution_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_smart_contract_execution_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    smart_contract_execution_tx = empty_tx(TxType.SMART_CONTRACT_EXECUTION)\n    smart_contract_execution_tx = merge(smart_contract_execution_tx, {\n        'from' : user.address,\n        'to' : '0x108bF12b50c9ef65525F0495C721aEc55015e111', # already deployed contract for test before\n        'data' : '0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000',\n    })\n    smart_contract_execution_tx = fill_transaction(smart_contract_execution_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_execution_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_smart_contract_execution_sign_recover()\n```\n\n---\n\n```zsh output\n❯ py smart_contract_execution_sign_recover.py\nraw transaction of signed tx: 0x30f8e7820368850ba43b740083023eda94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a076bb764f64faba013dd74d29c5d446324fc6ea3acfff334b2344c8270402ab86a0287e81224d8a2156894ee38fd2b03a4ce3555755341a4b7a5c304f85e5fc31ff\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 48,\n  \"value\": 0,\n  \"nonce\": 872,\n  \"gasPrice\": 50000000000,\n  \"gas\": 147162,\n  \"to\": \"0x108bF12b50c9ef65525F0495C721aEc55015e111\",\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 53704133080478071789069753996858108922624268560525338682079935754802299054982,\n      \"s\": 18316027923575524564170275051333963542245959777309578523749620923746446225919\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e receipt:  AttributeDict({'blockHash': HexBytes('0xeaa9de93191210426570cc0078448e104f1cf839d0833eae91382e7650f59ffd'), 'blockNumber': 147348464, 'contractAddress': None, 'cumulativeGasUsed': 39454, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 39454, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x108bF12b50c9ef65525F0495C721aEc55015e111', 'transactionHash': HexBytes('0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py smart_contract_execution_sign_recover.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py smart_contract_execution_sign_recover.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py smart_contract_execution_sign_recover.py focus=12:14\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python smart_contract_execution_sign_recover.py focus=12:14\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_smart_contract_execution_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    smart_contract_execution_tx = empty_tx(TxType.SMART_CONTRACT_EXECUTION)\n    smart_contract_execution_tx = merge(smart_contract_execution_tx, {\n        'from' : user.address,\n        'to' : '0x108bF12b50c9ef65525F0495C721aEc55015e111', # already deployed contract for test before\n        'data' : '0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000',\n    })\n    smart_contract_execution_tx = fill_transaction(smart_contract_execution_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_execution_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_smart_contract_execution_sign_recover()\n```\n\n---\n\nLoad an **account** from private key\n\n```python smart_contract_execution_sign_recover.py focus=17\n\n```\n\n---\n\nCreate an **empty transaction** of type **TxType.SMART_CONTRACT_EXECUTION**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py smart_contract_execution_sign_recover.py focus=4,5,8,19\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **data** into the empty tx by using the **merge** util.\n\n```py smart_contract_execution_sign_recover.py focus=10,20:24\n\n```\n\n---\n\nSet the **contract address** you want to execute into the **to** field\n\n```py smart_contract_execution_sign_recover.py focus=22\n\n```\n\n---\n\nIn this tutorial, the **data to call a function** of the contract is **encoded** into **bytes** stream. Please refer to the **write tutorial** in the **Smart Contract section** to make the encoded data\n\n```py smart_contract_execution_sign_recover.py focus=23\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python smart_contract_execution_sign_recover.py focus=4,6,8,25\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```python smart_contract_execution_sign_recover.py focus=27:29\n\n````\n---\n```zsh output\nraw transaction of signed tx: 0x30f8e7820368850ba43b740083023eda94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a076bb764f64faba013dd74d29c5d446324fc6ea3acfff334b2344c8270402ab86a0287e81224d8a2156894ee38fd2b03a4ce3555755341a4b7a5c304f85e5fc31ff\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python smart_contract_execution_sign_recover.py focus=31:32\n\n````\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python smart_contract_execution_sign_recover.py focus=34:35\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 48,\n  \"value\": 0,\n  \"nonce\": 872,\n  \"gasPrice\": 50000000000,\n  \"gas\": 147162,\n  \"to\": \"0x108bF12b50c9ef65525F0495C721aEc55015e111\",\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 53704133080478071789069753996858108922624268560525338682079935754802299054982,\n      \"s\": 18316027923575524564170275051333963542245959777309578523749620923746446225919\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the **tx** to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python smart_contract_execution_sign_recover.py focus=37\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python smart_contract_execution_sign_recover.py focus=38:39\n\n````\n---\n```zsh output\ntx hash:  0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e receipt:  AttributeDict({'blockHash': HexBytes('0xeaa9de93191210426570cc0078448e104f1cf839d0833eae91382e7650f59ffd'), 'blockNumber': 147348464, 'contractAddress': None, 'cumulativeGasUsed': 39454, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 39454, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x108bF12b50c9ef65525F0495C721aEc55015e111', 'transactionHash': HexBytes('0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e'), 'transactionIndex': 0, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python smart_contract_execution_sign_recover.py focus=40\n\n````\n---\n```zsh output\n❯ node smart_contract_execution_sign_recover.py\n❯ py smart_contract_execution_sign_recover.py\nraw transaction of signed tx: 0x30f8e7820368850ba43b740083023eda94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a076bb764f64faba013dd74d29c5d446324fc6ea3acfff334b2344c8270402ab86a0287e81224d8a2156894ee38fd2b03a4ce3555755341a4b7a5c304f85e5fc31ff\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 48,\n  \"value\": 0,\n  \"nonce\": 872,\n  \"gasPrice\": 50000000000,\n  \"gas\": 147162,\n  \"to\": \"0x108bF12b50c9ef65525F0495C721aEc55015e111\",\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 53704133080478071789069753996858108922624268560525338682079935754802299054982,\n      \"s\": 18316027923575524564170275051333963542245959777309578523749620923746446225919\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e receipt:  AttributeDict({'blockHash': HexBytes('0xeaa9de93191210426570cc0078448e104f1cf839d0833eae91382e7650f59ffd'), 'blockNumber': 147348464, 'contractAddress': None, 'cumulativeGasUsed': 39454, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 39454, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x108bF12b50c9ef65525F0495C721aEc55015e111', 'transactionHash': HexBytes('0xde228b907506204482ec8e82a7409c3ab887b4c0e586d8d85287ef46c3549b3e'), 'transactionIndex': 0, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py ValueTransferWithMemo.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_value_transfer_with_memo_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER_MEMO)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(0.1, 'klay'),\n        'data' : b'TestMemoData'\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_value_transfer_with_memo_sign_recover()\n```\n\n---\n\n````zsh output\n❯ node ValueTransferWithMemo.py\nraw transaction of signed tx: 0x10f896820366850ba43b74008301042894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a91538c546573744d656d6f44617461f847f8458207f6a00daff49a09fbb8382654be6461d75e67def4d26442bf7bc8014da04d9d3b6f6da044fb682a3cd21e94e4dcf97cde1e0416d96dad2f15d353529a5db85873192c5b\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 16,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 870,\n  \"gasPrice\": 50000000000,\n  \"gas\": 66600,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x546573744d656d6f44617461\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 6190953446910446010339588924128856456849311270962439470585054122192743919469,\n      \"s\": 31201471237264490747209103173489052293037646153294155398956746212102253390939\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28 receipt:  AttributeDict({'blockHash': HexBytes('0x2ff2f47d724ccd645010adde8cebdb88edc4a31ffa415b34230f620544ecea6c'), 'blockNumber': 147340972, 'contractAddress': None, 'cumulativeGasUsed': 22200, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 22200, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28'), 'transactionIndex': 0, 'type': 0})```\n````\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py ValueTransferWithMemo.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and cytoolz\n\n```py ValueTransferWithMemo.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py ValueTransferWithMemo.py focus=12:14\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python ValueTransferWithMemo.py focus=12:14\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef web3_value_transfer_with_memo_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER_MEMO)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(0.1, 'klay'),\n        'data' : b'TestMemoData'\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_value_transfer_with_memo_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```python ValueTransferWithMemo.py focus=17\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.VALUE_TRANSFER_MEMO**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py ValueTransferWithMemo.py focus=4,5,8,19\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **value** into the empty tx by using the **merge** util.\n\n```py ValueTransferWithMemo.py focus=10,20:24\n\n```\n\n---\n\nYou can use the **Web3.to_peb** util to convert decimal\n\n```py ValueTransferWithMemo.py focus=23\n\n```\n\n---\n\nEspecially **write down** what you want to record in the **data** field in a binary format\n\n```py ValueTransferWithMemo.py focus=24\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python ValueTransferWithMemo.py focus=4,6,8,26\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```python ValueTransferWithMemo.py focus=28:30\n\n````\n---\n```zsh output\nraw transaction of signed tx: 0x10f896820366850ba43b74008301042894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a91538c546573744d656d6f44617461f847f8458207f6a00daff49a09fbb8382654be6461d75e67def4d26442bf7bc8014da04d9d3b6f6da044fb682a3cd21e94e4dcf97cde1e0416d96dad2f15d353529a5db85873192c5b\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python ValueTransferWithMemo.py focus=32:33\n\n````\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python ValueTransferWithMemo.py focus=35:36\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 16,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 870,\n  \"gasPrice\": 50000000000,\n  \"gas\": 66600,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x546573744d656d6f44617461\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 6190953446910446010339588924128856456849311270962439470585054122192743919469,\n      \"s\": 31201471237264490747209103173489052293037646153294155398956746212102253390939\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the tx to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python ValueTransferWithMemo.py focus=38\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python ValueTransferWithMemo.py focus=39:40\n\n````\n---\n```zsh output\ntx hash:  0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28 receipt:  AttributeDict({'blockHash': HexBytes('0x2ff2f47d724ccd645010adde8cebdb88edc4a31ffa415b34230f620544ecea6c'), 'blockNumber': 147340972, 'contractAddress': None, 'cumulativeGasUsed': 22200, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 22200, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28'), 'transactionIndex': 0, 'type': 0})```\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python ValueTransferWithMemo.py focus=42\n\n```````\n---\n```zsh output\n❯ node ValueTransferWithMemo.py\nraw transaction of signed tx: 0x10f896820366850ba43b74008301042894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a91538c546573744d656d6f44617461f847f8458207f6a00daff49a09fbb8382654be6461d75e67def4d26442bf7bc8014da04d9d3b6f6da044fb682a3cd21e94e4dcf97cde1e0416d96dad2f15d353529a5db85873192c5b\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 16,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 870,\n  \"gasPrice\": 50000000000,\n  \"gas\": 66600,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x546573744d656d6f44617461\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 6190953446910446010339588924128856456849311270962439470585054122192743919469,\n      \"s\": 31201471237264490747209103173489052293037646153294155398956746212102253390939\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28 receipt:  AttributeDict({'blockHash': HexBytes('0x2ff2f47d724ccd645010adde8cebdb88edc4a31ffa415b34230f620544ecea6c'), 'blockNumber': 147340972, 'contractAddress': None, 'cumulativeGasUsed': 22200, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 22200, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x5b29f3dbc2f0d79dee4338a556eeb33c9d2dea9d0602882d44c307a2f25bce28'), 'transactionIndex': 0, 'type': 0})``````\n```````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/basic-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```py txTypeValueTransferTransaction.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_value_transfer_sign_recover()\n```\n\n---\n\n```zsh output\n❯ node txTypeValueTransferTransaction.py\nraw transaction of signed tx: 0x08f888820365850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a0fa9c7e720916e53b587bebc1b6dfdf3fa75c4390936353f4f9e9c446688be6a4a00ac3553e050f18a566541ffa15d6dd36566c077059514c90ad2570a36b29df2c\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 8,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"nonce\": 869,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 113354712982352869976369229827103350581481011848350586238649071308501699782308,\n      \"s\": 4868251983953391094440263137126339926417283017062042162724837386880119594796\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f receipt:  AttributeDict({'blockHash': HexBytes('0xe873b7f3bb39ce89131fbbfc727bca00f1998a4b617e89d1db20d55fc479e32d'), 'blockNumber': 147339314, 'contractAddress': None, 'cumulativeGasUsed': 352123, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f'), 'transactionIndex': 2, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py txTypeValueTransferTransaction.py focus=1,2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and cytoolz\n\n```py txTypeValueTransferTransaction.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py txTypeValueTransferTransaction.py focus=12:14\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```python txTypeValueTransferTransaction.py focus=12:14\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef web3_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    value_transfer_tx = empty_tx(TxType.VALUE_TRANSFER)\n    value_transfer_tx = merge(value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(10, \"klay\"),\n    })\n    value_transfer_tx = fill_transaction(value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_value_transfer_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```python txTypeValueTransferTransaction.py focus=17\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.VALUE_TRANSFER**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py txTypeValueTransferTransaction.py focus=4,5,8,19\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **value** into the empty tx by using the **merge** util.\n\n```py txTypeValueTransferTransaction.py focus=10,20:24\n\n```\n\n---\n\nYou can use the **Web3.to_peb** util to convert decimal\n\n```py txTypeValueTransferTransaction.py focus=23\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```python txTypeValueTransferTransaction.py focus=4,6,8,25\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```python txTypeValueTransferTransaction.py focus=27:29\n\n````\n\n---\n```zsh output\nraw transaction of signed tx: 0x08f888820365850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a0fa9c7e720916e53b587bebc1b6dfdf3fa75c4390936353f4f9e9c446688be6a4a00ac3553e050f18a566541ffa15d6dd36566c077059514c90ad2570a36b29df2c\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```python txTypeValueTransferTransaction.py focus=31:32\n\n````\n\n---\n```zsh output\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```python txTypeValueTransferTransaction.py focus=34:35\n\n````\n---\n```zsh output\ndecoded transaction: {\n  \"type\": 8,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"nonce\": 869,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 113354712982352869976369229827103350581481011848350586238649071308501699782308,\n      \"s\": 4868251983953391094440263137126339926417283017062042162724837386880119594796\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the tx to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```python txTypeValueTransferTransaction.py focus=37\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```python txTypeValueTransferTransaction.py focus=38:39\n\n````\n---\n```zsh output\ntx hash:  0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f receipt:  AttributeDict({'blockHash': HexBytes('0xe873b7f3bb39ce89131fbbfc727bca00f1998a4b617e89d1db20d55fc479e32d'), 'blockNumber': 147339314, 'contractAddress': None, 'cumulativeGasUsed': 352123, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f'), 'transactionIndex': 2, 'type': 0})```\n````\n\n</CH.Code>\n\n---\n\nFinally, get the result.\n\n<CH.Code>\n```python txTypeValueTransferTransaction.py focus=41\n\n````\n---\n```zsh output\n❯ node txTypeValueTransferTransaction.py\nraw transaction of signed tx: 0x08f888820365850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a9153888ac7230489e8000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a0fa9c7e720916e53b587bebc1b6dfdf3fa75c4390936353f4f9e9c446688be6a4a00ac3553e050f18a566541ffa15d6dd36566c077059514c90ad2570a36b29df2c\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\ndecoded transaction: {\n  \"type\": 8,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 10000000000000000000,\n  \"nonce\": 869,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 113354712982352869976369229827103350581481011848350586238649071308501699782308,\n      \"s\": 4868251983953391094440263137126339926417283017062042162724837386880119594796\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f receipt:  AttributeDict({'blockHash': HexBytes('0xe873b7f3bb39ce89131fbbfc727bca00f1998a4b617e89d1db20d55fc479e32d'), 'blockNumber': 147339314, 'contractAddress': None, 'cumulativeGasUsed': 352123, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 21000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xd47018a0bc908e18f980bc59ee454e6016317300e4f207341eaa77a8c841bc0f'), 'transactionIndex': 2, 'type': 0})```\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/account-update. # Account Update\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\nfrom eth_utils.address import to_checksum_address\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_account_update_role_based():\n    transaction_key = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    update_key = Account.from_key('0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda')\n    fee_payer_key = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.FEE_DELEGATED_ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : to_checksum_address(\"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\"),\n        'key' : {\n            \"type\": KeyType.ROLE_BASED,\n            \"keys\": {\n                \"roleTransactionKey\": {\n                    \"type\":KeyType.PUBLIC,\n                    \"key\": compressed_key(transaction_key)\n                },\n                \"roleAccountUpdateKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(update_key)\n                },\n                \"roleFeePayerKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(fee_payer_key)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_key.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address: \", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_account_update_role_based()\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\n{\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 41,\n  \"chainId\": 1001,\n  \"type\": 33,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n\nrawTransaction: 21f8da29850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a029674da4dd604844d0ba315984d03d5bed928d17e687a99d6daf8193e6c94e09a054aae388b9297d80186595a8c4e25a9a5317ab022965db737a1c10bf4dd6a974\n\nrecovered sender address:  0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\n\ndecoded transaction: {\n  \"type\": 33,\n  \"nonce\": 41,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 18727347918799676494996859755384456453784169075037049001717055518319697284617,\n      \"s\": 38296213664480012201573534359692265422031797825224297482338061132889882798452\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\n\nraw transaction of feePayer signed tx: 0x21f9013829850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a029674da4dd604844d0ba315984d03d5bed928d17e687a99d6daf8193e6c94e09a054aae388b9297d80186595a8c4e25a9a5317ab022965db737a1c10bf4dd6a97494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a093423ed669c0c0c76c53c17660b6644b3e6d4dd3b9ff79e2a0e806ed7f00f120a00e934491ed6b9caa974132ac5418cedbcc69fc4b1f0ba8967486b9d56a5ec4f2\nrecovered feepayer address: ['0xA2a8854b1802D8Cd5De631E690817c253d6a9153']\n\ndecoded transaction: {\n  \"type\": 33,\n  \"nonce\": 41,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"feePayer\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 18727347918799676494996859755384456453784169075037049001717055518319697284617,\n      \"s\": 38296213664480012201573534359692265422031797825224297482338061132889882798452\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 66607034336854704869676726256115158277487333092054504647329956124483114823968,\n      \"s\": 6592579651635282554362947641586686897275388037603811376489932442025345336562\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\ntx hash:  0x78dc150b70538beed168e5f673bd6a058287bb6177295e9117771ac3e9e31d69 receipt:  AttributeDict({'blockHash': HexBytes('0x2b85cd7babae3f2d49405da8f4d5500ae3bc2462bccf1c46b3a1e3b0cb7fb7c5'), 'blockNumber': 148223525, 'contractAddress': None, 'cumulativeGasUsed': 483882, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 91000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0x78dc150b70538beed168e5f673bd6a058287bb6177295e9117771ac3e9e31d69'), 'transactionIndex': 2, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_fee_delegated_account_update_role_based.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytools**\n\n```py web3_fee_delegated_account_update_role_based.py focus=2:16\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_fee_delegated_account_update_role_based.py focus=18\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py web3_fee_delegated_account_update_role_based.py focus=18\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key\nfrom web3py_ext.klaytn_account.account_key import KeyType\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import (\n    to_pretty,\n    bytes_to_hex_str\n)\nfrom cytoolz import merge\nfrom eth_utils.address import to_checksum_address\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_account_update_role_based():\n    transaction_key = Account.from_key('0xc9668ccd35fc20587aa37a48838b48ccc13cf14dd74c8999dd6a480212d5f7ac')\n    update_key = Account.from_key('0x9ba8cb8f60044058a9e6f815c5c42d3a216f47044c61a1750b6d29ddc7f34bda')\n    fee_payer_key = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n\n    account_update_tx = empty_tx(TxType.FEE_DELEGATED_ACCOUNT_UPDATE)\n    account_update_tx = merge(account_update_tx, {\n        'from' : to_checksum_address(\"0x5bd2fb3c21564c023a4a735935a2b7a238c4ccea\"),\n        'key' : {\n            \"type\": KeyType.ROLE_BASED,\n            \"keys\": {\n                \"roleTransactionKey\": {\n                    \"type\":KeyType.PUBLIC,\n                    \"key\": compressed_key(transaction_key)\n                },\n                \"roleAccountUpdateKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(update_key)\n                },\n                \"roleFeePayerKey\": {\n                    \"type\": KeyType.PUBLIC,\n                    \"key\": compressed_key(fee_payer_key)\n                }\n            }\n        }\n    })\n    account_update_tx = fill_transaction(account_update_tx, w3)\n    print(to_pretty(account_update_tx))\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(account_update_tx, update_key.key)\n    print('\\nrawTransaction:', bytes_to_hex_str(signed_tx.rawTransaction))\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address: \", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_account_update_role_based()\n```\n\n---\n\nLoad **transaction** key from a private key to use it as **transaction role key**. You can use it to sign a transaction\n\n```py web3_fee_delegated_account_update_role_based.py focus=21\n\n```\n\n---\n\nLoad **update** key from a private key to use it as **update role key**. You can use it to sign the account update transaction for this account. It means only a person who have this key can update this account.\nz\n\n```py web3_fee_delegated_account_update_role_based.py focus=22\n\n```\n\n---\n\nLoad **fee payer** key from a private key to use it as **fee payer role key**. You can use it to sign a transaction as a fee payer.\n\n```py web3_fee_delegated_account_update_role_based.py focus=23\n\n```\n\n---\n\nLoad **fee fee_delegator** key from a private key\n\n```py web3_fee_delegated_account_update_role_based.py focus=24\n\n```\n\n---\n\nCreating an empty transaction of type **TxType.FEE_DELEGATED_ACCOUNT_UPDATE**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_fee_delegated_account_update_role_based.py focus=26\n\n```\n\n---\n\nMerge **additional fields** like **sender** and **keys** into the empty tx by using the **merge** util.\n\n```py web3_fee_delegated_account_update_role_based.py focus=27:46\n\n```\n\n---\n\nIn this case, the account key to update is the **role-based** key and each role has **pubkey** type. Each role can have pubkey or multisig.\n\n```py web3_fee_delegated_account_update_role_based.py focus=30,32:33,36:37,40:41\n\n```\n\n---\n\nYou can use the **compressed_key** util to set each role key. It will extract the compressed public key from the key\n\n```py web3_fee_delegated_account_update_role_based.py focus=34,38,42\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_fee_delegated_account_update_role_based.py focus=47\n\n```\n\n---\n\nYou can use the **to_pretty** util to print the formatted tx.\n\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py focus=48\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\n {\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"gas\": 159000,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 41,\n  \"chainId\": 1001,\n  \"type\": 33,\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  }\n}\n```\n\n</CH.Code>\n\n---\n\nSign the account update tx type. You should sign it with **update role key** as the account \"0x5bd2...ccea\" is already role-based account to update this account\n\n<CH.Code>\n```py web3_fee_delegated_account_update_role_based.py focus=50:52\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\n\nrawTransaction: 21f8da29850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a029674da4dd604844d0ba315984d03d5bed928d17e687a99d6daf8193e6c94e09a054aae388b9297d80186595a8c4e25a9a5317ab022965db737a1c10bf4dd6a974\n````\n\n</CH.Code>\n\n---\n\n**Recovering** the sender's address from the signed transaction\n\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py focus=54:55\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\nrecovered sender address:  0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\n\n```\n\n</CH.Code>\n\n---\n\nIf you want to see the RLP-encoded signed tx, use the **decode_transaction** util\n\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py focus=57:58\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\ndecoded transaction: {\n  \"type\": 33,\n  \"nonce\": 41,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 18727347918799676494996859755384456453784169075037049001717055518319697284617,\n      \"s\": 38296213664480012201573534359692265422031797825224297482338061132889882798452\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\n```\n\n</CH.Code>\n\n---\n\nSign the **signed_tx.rawTransaction** with fee delegator account\n\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py focus=60:61\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\n\nraw transaction of feePayer signed tx: 0x21f9013829850ba43b740083026d18945bd2fb3c21564c023a4a735935a2b7a238c4cceab86f05f86ca302a103f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2aa302a10263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3a302a103dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cdf847f8458207f5a029674da4dd604844d0ba315984d03d5bed928d17e687a99d6daf8193e6c94e09a054aae388b9297d80186595a8c4e25a9a5317ab022965db737a1c10bf4dd6a97494a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a093423ed669c0c0c76c53c17660b6644b3e6d4dd3b9ff79e2a0e806ed7f00f120a00e934491ed6b9caa974132ac5418cedbcc69fc4b1f0ba8967486b9d56a5ec4f2\n```\n\n</CH.Code>\n\n---\n\n**Recovering** the fee delegator's address from the signed transaction\n\n<CH.Code>\n\n```py web3_fee_delegated_account_update_role_based.py focus=63:64\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\nrecovered feepayer address: ['0xA2a8854b1802D8Cd5De631E690817c253d6a9153']\n```\n\n</CH.Code>\n\n---\n\nIf you want to see the RLP-encoded signed tx, use the **decode_transaction** util\n\n<CH.Code>\n```py web3_fee_delegated_account_update_role_based.py focus=66:67\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\ndecoded transaction: {\n  \"type\": 33,\n  \"nonce\": 41,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA\",\n  \"feePayer\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 18727347918799676494996859755384456453784169075037049001717055518319697284617,\n      \"s\": 38296213664480012201573534359692265422031797825224297482338061132889882798452\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 66607034336854704869676726256115158277487333092054504647329956124483114823968,\n      \"s\": 6592579651635282554362947641586686897275388037603811376489932442025345336562\n    }\n  ],\n  \"key\": {\n    \"type\": 5,\n    \"keys\": {\n      \"roleTransactionKey\": {\n        \"type\": 2,\n        \"key\": \"0x03f26489914098c5da51f0f646e3000da4d6197217df082b4f7ce1530f0a0cbf2a\"\n      },\n      \"roleAccountUpdateKey\": {\n        \"type\": 2,\n        \"key\": \"0x0263021199702b9fefca617bdcb2a9ed4a810dfa8d270d4e804a1e778450e63ec3\"\n      },\n      \"roleFeePayerKey\": {\n        \"type\": 2,\n        \"key\": \"0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n      }\n    }\n  },\n  \"chainId\": 1001\n}\n\n\n````\n\n</CH.Code>\n\n---\n\n**Sending** the signed transaction to the network using fee delegator account and **waiting** receipt until it is completely executed in the blockchain\n\n<CH.Code>\n```py web3_fee_delegated_account_update_role_based.py focus=69:71\n\n````\n---\n\n```zsh output\n❯ py web3_fee_delegated_account_update_role_based.py\ntx hash:  0x78dc150b70538beed168e5f673bd6a058287bb6177295e9117771ac3e9e31d69 receipt:  AttributeDict({'blockHash': HexBytes('0x2b85cd7babae3f2d49405da8f4d5500ae3bc2462bccf1c46b3a1e3b0cb7fb7c5'), 'blockNumber': 148223525, 'contractAddress': None, 'cumulativeGasUsed': 483882, 'effectiveGasPrice': 25000000000, 'from': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'gasUsed': 91000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x5bD2fb3c21564C023A4A735935a2B7A238C4cCEA', 'transactionHash': HexBytes('0x78dc150b70538beed168e5f673bd6a058287bb6177295e9117771ac3e9e31d69'), 'transactionIndex': 2, 'type': 0})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/cancel-transaction. # Cancel\n\n**TxTypeCancel** cancels the execution of the transaction with the same nonce in the transaction pool. This transaction type is useful when a submitted transaction seems unprocessed for a certain amount of time.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py web3_fee_delegated_cancel_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TX_TYPE_FEE_DELEGATED_CANCEL\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_cancel_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    cancel_tx = empty_tx(TX_TYPE_FEE_DELEGATED_CANCEL)\n    cancel_tx = merge(cancel_tx, {\n        'from' : user.address,\n    })\n    cancel_tx = fill_transaction(cancel_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(cancel_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\nweb3_fee_delegated_cancel_sign_recover()\n\n```\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\n# raw transaction of signed tx: 0x39f86b8203a3850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a00eec532ebe17fade46561d3ff503c97e07d8d9ba611b6a7f8a1cc11621dfc03fa006e3ee9cf4f5bfd6674d656c571cfb80b0bfd99bebe87f017e288be7ea4fec21\n\n# recovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\n# decoded transaction: {\n#   \"type\": 57,\n#   \"nonce\": 931,\n#   \"gasPrice\": 50000000000,\n#   \"gas\": 159000,\n#   \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n#   \"signatures\": [\n#     {\n#       \"v\": 2037,\n#       \"r\": 6749929892576958642714739615979538685230067780127794094925331144130783330367,\n#       \"s\": 3116598222383802394999638931088885558560578183897443089888519072063383661601\n#     }\n#   ],\n#   \"chainId\": 1001\n# }\n\n# raw transaction of feePayer signed tx: 0x39f8c98203a3850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a00eec532ebe17fade46561d3ff503c97e07d8d9ba611b6a7f8a1cc11621dfc03fa006e3ee9cf4f5bfd6674d656c571cfb80b0bfd99bebe87f017e288be7ea4fec2194cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f6a06697d97df68a0c4a2c59b3d7a8c5c479a6b43e7a34394518b858ef908d10b76aa0492c8da32c77a71ce26650f9ac842496bb33f0f17877ce1b23e1763b7c87e28d\n# recovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\n# decoded transaction: {\n#   \"type\": 57,\n#   \"nonce\": 931,\n#   \"gasPrice\": 50000000000,\n#   \"gas\": 159000,\n#   \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n#   \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n#   \"signatures\": [\n#     {\n#       \"v\": 2037,\n#       \"r\": 6749929892576958642714739615979538685230067780127794094925331144130783330367,\n#       \"s\": 3116598222383802394999638931088885558560578183897443089888519072063383661601\n#     }\n#   ],\n#   \"feePayerSignatures\": [\n#     {\n#       \"v\": 2038,\n#       \"r\": 46404205537188908000560167654303187399733564148219565625489961916532872230762,\n#       \"s\": 33097556762817862610763009383178378013466927896867683158585566455859245474445\n#     }\n#   ],\n#   \"chainId\": 1001\n# }\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=2:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=12\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TX_TYPE_FEE_DELEGATED_CANCEL\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_cancel_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    cancel_tx = empty_tx(TX_TYPE_FEE_DELEGATED_CANCEL)\n    cancel_tx = merge(cancel_tx, {\n        'from' : user.address,\n    })\n    cancel_tx = fill_transaction(cancel_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(cancel_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    decoded_tx = Account.decode_transaction(signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\nweb3_fee_delegated_cancel_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=15\n\n```\n\n---\n\nLoad an fee payer account from private key to sign and send the transaction instead of above account\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=16\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.FEE_DELEGATED_CANCEL**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=18\n\n```\n\n---\n\nMerge the **from** and **nonce** fields into the empty tx by using the **merge** util.\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=19:21\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py web3_fee_delegated_cancel_sign_recover.py focus=22\n\n```\n\n---\n\nSign the **cancel tx** by user's private key\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=24:26\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\nraw transaction of signed tx: 0x39f86b8203a3850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a00eec532ebe17fade46561d3ff503c97e07d8d9ba611b6a7f8a1cc11621dfc03fa006e3ee9cf4f5bfd6674d656c571cfb80b0bfd99bebe87f017e288be7ea4fec21\n\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=28:29\n\n````\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=31:32\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\ndecoded transaction: {\n  \"type\": 57,\n  \"nonce\": 931,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 6749929892576958642714739615979538685230067780127794094925331144130783330367,\n      \"s\": 3116598222383802394999638931088885558560578183897443089888519072063383661601\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSign the raw transaction with the fee delegator's account\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=34:35\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\nraw transaction of feePayer signed tx: 0x39f8c98203a3850ba43b740083026d1894a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a00eec532ebe17fade46561d3ff503c97e07d8d9ba611b6a7f8a1cc11621dfc03fa006e3ee9cf4f5bfd6674d656c571cfb80b0bfd99bebe87f017e288be7ea4fec2194cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f6a06697d97df68a0c4a2c59b3d7a8c5c479a6b43e7a34394518b858ef908d10b76aa0492c8da32c77a71ce26650f9ac842496bb33f0f17877ce1b23e1763b7c87e28d\n\n````\n\n</CH.Code>\n\n---\n\nRecover the fee payer's address from the signed transaction\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=37:38\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```py web3_fee_delegated_cancel_sign_recover.py focus=40:41\n\n````\n\n\n---\n\n```zsh output\n❯ py web3_fee_delegated_cancel_sign_recover.py\ndecoded transaction: {\n  \"type\": 57,\n  \"nonce\": 931,\n  \"gasPrice\": 50000000000,\n  \"gas\": 159000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 6749929892576958642714739615979538685230067780127794094925331144130783330367,\n      \"s\": 3116598222383802394999638931088885558560578183897443089888519072063383661601\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 46404205537188908000560167654303187399733564148219565625489961916532872230762,\n      \"s\": 33097556762817862610763009383178378013466927896867683158585566455859245474445\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/smart-contract-deploy. # Smart Contract Deploy\n\n**TxTypeSmartContractDeploy** deploys a smart contract to the given address. The following changes will be made by this transaction type.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TX_TYPE_FEE_DELEGATED_SMART_CONTRACT_DEPLOY\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_smart_contract_deploy_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    smart_contract_deploy_tx = empty_tx(TX_TYPE_FEE_DELEGATED_SMART_CONTRACT_DEPLOY)\n    smart_contract_deploy_tx = merge(smart_contract_deploy_tx, {\n        'from' : user.address,\n        'data' : '0x608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806345773e4e14610030575b600080fd5b61003861004e565b604051610045919061011b565b60405180910390f35b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100c55780820151818401526020810190506100aa565b60008484015250505050565b6000601f19601f8301169050919050565b60006100ed8261008b565b6100f78185610096565b93506101078185602086016100a7565b610110816100d1565b840191505092915050565b6000602082019050818103600083015261013581846100e2565b90509291505056fea264697066735822122098dee729b2ae1c3fd3f534bf7d480c78ba0c9b62b15c7b5c578b29d70a747a5164736f6c63430008120033',\n    })\n    smart_contract_deploy_tx = fill_transaction(smart_contract_deploy_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_deploy_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_smart_contract_deploy_sign_recover()\n\n```\n\n---\n\n```zsh output\n❯ py fee_delegated_smart_contract_deploy_sign_recover.py\noutput\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=12\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TX_TYPE_FEE_DELEGATED_SMART_CONTRACT_DEPLOY\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_smart_contract_deploy_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    smart_contract_deploy_tx = empty_tx(TX_TYPE_FEE_DELEGATED_SMART_CONTRACT_DEPLOY)\n    smart_contract_deploy_tx = merge(smart_contract_deploy_tx, {\n        'from' : user.address,\n        'data' : '0x608060405234801561001057600080fd5b50610173806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806345773e4e14610030575b600080fd5b61003861004e565b604051610045919061011b565b60405180910390f35b60606040518060400160405280600b81526020017f48656c6c6f20576f726c64000000000000000000000000000000000000000000815250905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156100c55780820151818401526020810190506100aa565b60008484015250505050565b6000601f19601f8301169050919050565b60006100ed8261008b565b6100f78185610096565b93506101078185602086016100a7565b610110816100d1565b840191505092915050565b6000602082019050818103600083015261013581846100e2565b90509291505056fea264697066735822122098dee729b2ae1c3fd3f534bf7d480c78ba0c9b62b15c7b5c578b29d70a747a5164736f6c63430008120033',\n    })\n    smart_contract_deploy_tx = fill_transaction(smart_contract_deploy_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_deploy_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_smart_contract_deploy_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=15\n\n```\n\n---\n\nLoad a fee payer account from private key\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=16\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.TX_TYPE_FEE_DELEGATED_SMART_CONTRACT_DEPLOY**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=18\n\n```\n\n---\n\nMerge the **additional fields** like **from** and **data** into the empty tx by using the **merge** util.\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=19:22\n\n```\n\n---\n\nSet the **compiled bytecode** from the solidity code you want to deploy to the blockchain network\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=21\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=23\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=25:27\n\n```\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=29:30\n\n```\n\n---\n\nSign the last raw transaction with **fee payer's account**\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=32:33\n\n```\n\n---\n\nRecover the **fee payer's address** from the signature in signed tx\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=35:36\n\n```\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=38:39\n\n```\n\n---\n\nSend the **tx** to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=41\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n```py fee_delegated_smart_contract_deploy_sign_recover.py focus=42:43\n\n```\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/smart-contract-execution. # Smart Contract Execution\n\n**TxTypeSmartContractExecution** executes a smart contract with the given data. **TxTypeSmartContractExecution** is accepted only if \"to\" is a smart contract account.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py delegated_smart_contract_execution_sign_recover.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_smart_contract_execution_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    smart_contract_execution_tx = empty_tx(TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION)\n    smart_contract_execution_tx = merge(smart_contract_execution_tx, {\n        'from' : user.address,\n        'to' : '0x108bF12b50c9ef65525F0495C721aEc55015e111', # already deployed contract for test before\n        'data' : '0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000',\n    })\n    smart_contract_execution_tx = fill_transaction(smart_contract_execution_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_execution_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_smart_contract_execution_sign_recover()\n```\n\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\nraw transaction of signed tx: 0x31f8e78203a3850ba43b74008301b05d94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a00a3db2a6793df0b256e2a81bce7ae3780783fcf58cc8326a14371c3413f3075da05031fd033453cf9a7be888b1db3812193d00221e299b483aa4e80a850664618a\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\nraw transaction of feePayer signed tx: 0x31f901458203a3850ba43b74008301b05d94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a00a3db2a6793df0b256e2a81bce7ae3780783fcf58cc8326a14371c3413f3075da05031fd033453cf9a7be888b1db3812193d00221e299b483aa4e80a850664618a94cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f5a08275e838e70da6b1c590f6a8ee5a545ddf93963c5d62bc423835930b91295aa0a06bcd34e8a2a9114c15311e2d7b3004c041410cecb3452349a6e82e09b736b41c\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\ndecoded transaction: {\n  \"type\": 49,\n  \"value\": 0,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 931,\n  \"gas\": 110685,\n  \"to\": \"0x108bF12b50c9ef65525F0495C721aEc55015e111\",\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 4632139155753288816177914350449378738873058722929189649296670464490515662685,\n      \"s\": 36273349621051746908322095917532842606006460166655513683041721600219371823498\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 59008994161645925359182568890805662549212009998969311671295364669364719147680,\n      \"s\": 48760043609336873845154832650749116609475268552379125539006421213296675173404\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x3569f46bb885eb4c849e10009ec7096530fa44ef7ee1287df83820fcef8d0ebd receipt:  AttributeDict({'blockHash': HexBytes('0x83d5276dc3fec557740a2d25c8f076aba11c022e7021b71bd95a76318c4ff5c9'), 'blockNumber': 148225895, 'contractAddress': None, 'cumulativeGasUsed': 44742, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 44742, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x108bF12b50c9ef65525F0495C721aEc55015e111', 'transactionHash': HexBytes('0x3569f46bb885eb4c849e10009ec7096530fa44ef7ee1287df83820fcef8d0ebd'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py delegated_smart_contract_execution_sign_recover.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and **cytoolz**\n\n```py delegated_smart_contract_execution_sign_recover.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py delegated_smart_contract_execution_sign_recover.py focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py delegated_smart_contract_execution_sign_recover.py focus=12\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_smart_contract_execution_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    smart_contract_execution_tx = empty_tx(TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION)\n    smart_contract_execution_tx = merge(smart_contract_execution_tx, {\n        'from' : user.address,\n        'to' : '0x108bF12b50c9ef65525F0495C721aEc55015e111', # already deployed contract for test before\n        'data' : '0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000',\n    })\n    smart_contract_execution_tx = fill_transaction(smart_contract_execution_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(smart_contract_execution_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of feePayer signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_smart_contract_execution_sign_recover()\n```\n\n---\n\nLoad an **account** from private key\n\n```py delegated_smart_contract_execution_sign_recover.py focus=15\n\n```\n\n---\n\nLoad a **fee payer account** from private key\n\n```py delegated_smart_contract_execution_sign_recover.py focus=16\n\n```\n\n---\n\nCreate an **empty transaction** of type **TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py delegated_smart_contract_execution_sign_recover.py focus=18\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **data** into the empty tx by using the **merge** util.\n\n```py delegated_smart_contract_execution_sign_recover.py focus=19:23\n\n```\n\n---\n\nSet the **contract address** you want to execute into the **to** field\n\n```py delegated_smart_contract_execution_sign_recover.py focus=21\n\n```\n\n---\n\nIn this tutorial, the **data to call a function** of the contract is **encoded** into **bytes** stream. Please refer to the **write tutorial** in the **Smart Contract section** to make the encoded data\n\n```py delegated_smart_contract_execution_sign_recover.py focus=22\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py delegated_smart_contract_execution_sign_recover.py focus=24\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```py delegated_smart_contract_execution_sign_recover.py focus=26:28\n\n````\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\nraw transaction of signed tx: 0x31f8e78203a3850ba43b74008301b05d94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a00a3db2a6793df0b256e2a81bce7ae3780783fcf58cc8326a14371c3413f3075da05031fd033453cf9a7be888b1db3812193d00221e299b483aa4e80a850664618a\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n```py delegated_smart_contract_execution_sign_recover.py focus=30:31\n\n````\n\n\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n````\n\n</CH.Code>\n\n---\n\nSign the value transfer tx by fee payer's private key\n\n<CH.Code>\n```py delegated_smart_contract_execution_sign_recover.py focus=33:34\n\n````\n\n\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\nraw transaction of feePayer signed tx: 0x31f901458203a3850ba43b74008301b05d94108bf12b50c9ef65525f0495c721aec55015e1118094a2a8854b1802d8cd5de631e690817c253d6a9153b8643d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000f847f8458207f5a00a3db2a6793df0b256e2a81bce7ae3780783fcf58cc8326a14371c3413f3075da05031fd033453cf9a7be888b1db3812193d00221e299b483aa4e80a850664618a94cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f5a08275e838e70da6b1c590f6a8ee5a545ddf93963c5d62bc423835930b91295aa0a06bcd34e8a2a9114c15311e2d7b3004c041410cecb3452349a6e82e09b736b41c\n\n````\n\n</CH.Code>\n\n---\n\nRecover the **fee payer's address** from the signature in signed tx\n\n<CH.Code>\n```py delegated_smart_contract_execution_sign_recover.py focus=36:37\n\n````\n\n\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```py delegated_smart_contract_execution_sign_recover.py focus=39:40\n\n````\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\ndecoded transaction: {\n  \"type\": 49,\n  \"value\": 0,\n  \"gasPrice\": 50000000000,\n  \"nonce\": 931,\n  \"gas\": 110685,\n  \"to\": \"0x108bF12b50c9ef65525F0495C721aEc55015e111\",\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x3d7403a30000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000c48656c6c6f204b6c6179746e0000000000000000000000000000000000000000\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 4632139155753288816177914350449378738873058722929189649296670464490515662685,\n      \"s\": 36273349621051746908322095917532842606006460166655513683041721600219371823498\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 59008994161645925359182568890805662549212009998969311671295364669364719147680,\n      \"s\": 48760043609336873845154832650749116609475268552379125539006421213296675173404\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the **tx** to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```py delegated_smart_contract_execution_sign_recover.py focus=42\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n\n```py delegated_smart_contract_execution_sign_recover.py focus=43:44\n\n```\n\n---\n\n```zsh output\n❯ py delegated_smart_contract_execution_sign_recover.py\ntx hash:  0x3569f46bb885eb4c849e10009ec7096530fa44ef7ee1287df83820fcef8d0ebd receipt:  AttributeDict({'blockHash': HexBytes('0x83d5276dc3fec557740a2d25c8f076aba11c022e7021b71bd95a76318c4ff5c9'), 'blockNumber': 148225895, 'contractAddress': None, 'cumulativeGasUsed': 44742, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 44742, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0x108bF12b50c9ef65525F0495C721aEc55015e111', 'transactionHash': HexBytes('0x3569f46bb885eb4c849e10009ec7096530fa44ef7ee1287df83820fcef8d0ebd'), 'transactionIndex': 0, 'type': 0})\n\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/value-transfer-memo. # Value Transfer Memo\n\n**TxTypeValueTransferMemo** is used when a user wants to send KAIA with a specific message.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py FeeDelegatedValueTransferMemo.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_value_transfer_with_memo_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    fee_delegated_value_transfer_tx = empty_tx(TxType.FEE_DELEGATED_VALUE_TRANSFER_MEMO)\n    fee_delegated_value_transfer_tx = merge(fee_delegated_value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address,\n        'value' : Web3.to_peb(0.1, 'klay'),\n        'data' : 'memo'.encode(encoding='utf-8').hex(),\n    })\n    fee_delegated_value_transfer_tx = fill_transaction(fee_delegated_value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(fee_delegated_value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_value_transfer_with_memo_sign_recover()\n\n```\n\n---\n\n```zsh output\n❯ python FeeDelegatedValueTransferMemo.py\nraw transaction of signed tx: 0x11f88d8203a2850ba43b740082fac894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153846d656d6ff847f8458207f5a03d5781735b63e147a6cdb4c5f4d9371b87a776ed6b2460997799cf82a4c5dc6ca07beeefc1f5ccd72a994e65b8fa5cbafda79046383530d2d81c5e128bb6032c5c\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\nraw transaction of signed tx: 0x11f8eb8203a2850ba43b740082fac894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153846d656d6ff847f8458207f5a03d5781735b63e147a6cdb4c5f4d9371b87a776ed6b2460997799cf82a4c5dc6ca07beeefc1f5ccd72a994e65b8fa5cbafda79046383530d2d81c5e128bb6032c5c94cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f6a050f32b7e60dd18c6ff122f6bdc94f831b5912de7e1cfb6b291b8a2458ccdbe69a03153156ec7a8bbb51dbcb0d40a717cdc31173ef748f6803418af26b66e40e57f\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\ndecoded transaction: {\n  \"type\": 17,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 930,\n  \"gasPrice\": 50000000000,\n  \"gas\": 64200,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x6d656d6f\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 27745692893512078622955272339665478959198598054588520658281796167915765357676,\n      \"s\": 56056644723691388895475112662977851531398597373084653396908548095691232324700\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 36614671905649584459785163916244052559136997622248050659604331627579687419497,\n      \"s\": 22310125810250633785807423340835226393398279220715112280506580747244212905343\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0xe9d6214c30b433cd7bb3bc3a37afad86fba4b4153bbc08607a44b390fd015c36 receipt:  AttributeDict({'blockHash': HexBytes('0xdcc51fb57ca4d010ea14d46a18d1ad1eabf9fef90b2fe002902796f59ed3a4dc'), 'blockNumber': 148223370, 'contractAddress': None, 'cumulativeGasUsed': 31400, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 31400, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xe9d6214c30b433cd7bb3bc3a37afad86fba4b4153bbc08607a44b390fd015c36'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py FeeDelegatedValueTransferMemo.py focus=1:10\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and cytoolz\n\n```py FeeDelegatedValueTransferMemo.py focus=1:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py FeeDelegatedValueTransferMemo.py focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py FeeDelegatedValueTransferMemo.py focus=12\n\n```\n\n---\n\nLoad an account from private key\n\n```py FeeDelegatedValueTransferMemo.py focus=15\n\n```\n\n---\n\nLoad a fee payer account from private key\n\n```py FeeDelegatedValueTransferMemo.py focus=16\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py FeeDelegatedValueTransferMemo.py focus=18\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **value** into the empty tx by using the **merge** util.\n\n```py FeeDelegatedValueTransferMemo.py focus=10,19:24\n\n```\n\n---\n\nYou can use the **Web3.to_peb** util to convert decimal\n\n```py FeeDelegatedValueTransferMemo.py focus=22\n\n```\n\n---\n\nEspecially **write down** what you want to record in the **data** field in a binary format\n\n```py FeeDelegatedValueTransferMemo.py focus=23\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py FeeDelegatedValueTransferMemo.py focus=6,25\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```py FeeDelegatedValueTransferMemo.py focus=27:29\n\n````\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\nraw transaction of signed tx: 0x11f88d820310850ba43b740082fac894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153846d656d6ff847f8458207f5a0b059d2c393945c2eb1f84cf26a9de80296f0c6bf69636136216f349385666008a057865f61bdd164732e3c1496f5297a25fa209b7001f7a909b1b75ccd9a674166\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n\n```py FeeDelegatedValueTransferMemo.py focus=31:32\n\n```\n\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nSign the transaction as the fee payer.\n\n<CH.Code>\n\n```py FeeDelegatedValueTransferMemo.py focus=34:35\n\n```\n\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\nraw transaction of signed tx: 0x11f8eb820310850ba43b740082fac894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153846d656d6ff847f8458207f5a0b059d2c393945c2eb1f84cf26a9de80296f0c6bf69636136216f349385666008a057865f61bdd164732e3c1496f5297a25fa209b7001f7a909b1b75ccd9a67416694cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f6a09190406b5f98d7360987359321657e4f60b0a08f6bc738b5cb8cd3090e137874a039a1b50fa0ce862fc0d7a02b31d177d5e5285770f85217c3446dc92887966211\n```\n\n</CH.Code>\n\n---\n\nRecover the fee payer's address from the signed transaction.\n\n<CH.Code>\n```py FeeDelegatedValueTransferMemo.py focus=37:38\n\n````\n\n\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```py FeeDelegatedValueTransferMemo.py focus=40:41\n\n````\n\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\ndecoded transaction: {\n  \"type\": 17,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 784,\n  \"gasPrice\": 50000000000,\n  \"gas\": 64200,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"data\": \"0x6d656d6f\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 79765765378884525347117439494767970585353848507962619395042292641319159750664,\n      \"s\": 39588633634432413261097368236126956160135867590506495223010744602888371650918\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 65840233628449744351360629714820379842433770838641528262235209779182489008244,\n      \"s\": 26067544384098398894768894026591802452482694222720676372843625675853439328785\n    }\n  ],\n  \"chainId\": 1001\n}\n````\n\n</CH.Code>\n\n---\n\nSend the tx to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```py FeeDelegatedValueTransferMemo.py focus=43\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```py FeeDelegatedValueTransferMemo.py focus=44:45\n\n````\n\n\n---\n\n```zsh output\n❯ py FeeDelegatedValueTransferMemo.py\ntx hash:  0x9b0b3d455bc46986d059bd1b665732555d9a1e79ddd8caaeadf3a2dd50fa983c receipt:  {'blockHash': HexBytes('0x1335ff39b1a56a5e9338305a92b49e15aa487b39bc80e500906e1c5cf5d5f66a'), 'blockNumber': 143821917, 'contractAddress': None, 'cumulativeGasUsed': 213437, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 31400, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x9b0b3d455bc46986d059bd1b665732555d9a1e79ddd8caaeadf3a2dd50fa983c'), 'transactionIndex': 1, 'type': 0}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/fee-delegated-transaction/value-transfer. # Value Transfer\n\nTxTypeValueTransfer is used when a user wants to send KAIA.\n\n- As kaia provides multiple transaction types to make each transaction type serve a single purpose, TxTypeValueTransfer is limited to send KAIA to an externally owned account (EOA).\n\n<CH.Spotlight>\n<CH.Code>\n\n```py txTypeFeeDelegatedValueTransferTransaction.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    fee_delegated_value_transfer_tx = empty_tx(TxType.FEE_DELEGATED_VALUE_TRANSFER)\n    fee_delegated_value_transfer_tx = merge(fee_delegated_value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address, # to self\n        'value' : Web3.to_peb(0.1, 'klay'),\n    })\n    fee_delegated_value_transfer_tx = fill_transaction(fee_delegated_value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(fee_delegated_value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_value_transfer_sign_recover()\n\n```\n\n---\n\n```zsh output\n❯ python txTypeFeeDelegatedValueTransferTransaction.py\nraw transaction of signed tx: 0x09f8888203a1850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a07006976a09e86e21411150cd88e1fec86665e6f41fed2ff66a69ba9071703e60a0147322d15ebaa18232e7347fab53fb776580e8b03901b6f597be727cb927c2a7\n\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n\nraw transaction of signed tx: 0x09f8e68203a1850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f6a07006976a09e86e21411150cd88e1fec86665e6f41fed2ff66a69ba9071703e60a0147322d15ebaa18232e7347fab53fb776580e8b03901b6f597be727cb927c2a794cb0eb737dfda52756495a5e08a9b37aab3b271daf847f8458207f5a06de7be192af966e8790828854abe89e1d24a435e68c0e7ea6c715c5766d53535a06e0db3c509ac8cc7a7bb8e0fda203e9c27d24720b0dd977ac5ef2a88e2733d74\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n\ndecoded transaction: {\n  \"type\": 9,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 929,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 50670685146210644758155850867516770752523795105304292948335149879423302385248,\n      \"s\": 9249684688095617192077356690924587996686692201721973364886864134587743191719\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 49711554177870114274420139373315961015019733371259804520392461387625282221365,\n      \"s\": 49778623080725784202508291278316385863345609698048394072298591254748381527412\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x5234733f874f5c8a77d6628be9958166f039f82a278888c4a6acaab17c2509ab receipt:  AttributeDict({'blockHash': HexBytes('0x2704d8b059545722008a338a1678d1dced73e8a96fb456e7b4cde051b9b9bbc0'), 'blockNumber': 148222496, 'contractAddress': None, 'cumulativeGasUsed': 31000, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 31000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x5234733f874f5c8a77d6628be9958166f039f82a278888c4a6acaab17c2509ab'), 'transactionIndex': 0, 'type': 0})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **eth_account**, **web3py_ext** and cytoolz\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=3:10\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=12\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=12\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    empty_tx,\n    fill_transaction,\n    TxType\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\nfrom cytoolz import merge\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\n\ndef web3_fee_delegated_value_transfer_sign_recover():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    fee_delegated_value_transfer_tx = empty_tx(TxType.FEE_DELEGATED_VALUE_TRANSFER)\n    fee_delegated_value_transfer_tx = merge(fee_delegated_value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address, # to self\n        'value' : Web3.to_peb(0.1, 'klay'),\n    })\n    fee_delegated_value_transfer_tx = fill_transaction(fee_delegated_value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n    signed_tx = Account.sign_transaction(fee_delegated_value_transfer_tx, user.key)\n    print(\"\\nraw transaction of signed tx:\", signed_tx.rawTransaction.hex())\n    recovered_tx = Account.recover_transaction(signed_tx.rawTransaction)\n    print(\"\\nrecovered sender address\", recovered_tx)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n    print(\"\\nraw transaction of signed tx:\", feepayer_signed_tx.rawTransaction.hex())\n\n    feepayer_recovered_tx = Account.recover_transaction_as_feepayer(feepayer_signed_tx.rawTransaction)\n    print(\"recovered feepayer address:\", feepayer_recovered_tx)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\n\nweb3_fee_delegated_value_transfer_sign_recover()\n```\n\n---\n\nLoad an account from private key\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=15\n\n```\n\n---\n\nLoad an account from private key\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=16\n\n```\n\n---\n\nCreate an empty transaction of type **TxType.FEE_DELEGATED_VALUE_TRANSFER**. You can use **empty_tx** util to get a tx with default fields filled.\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=18\n\n```\n\n---\n\nMerge the **additional fields** like **from**, **to** and **value** into the empty tx by using the **merge** util.\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=10,19:23\n\n```\n\n---\n\nYou can use the **Web3.to_peb** util to convert decimal\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=22\n\n```\n\n---\n\nUse **fill_transaction** to add more params to transaction object like gas limit...\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=6,24\n\n```\n\n---\n\nSign the value transfer tx by user's private key\n\n<CH.Code>\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=26:28\n\n````\n\n\n---\n\n```zsh output\n❯ py txTypeFeeDelegatedValueTransferTransaction.py\nraw transaction of signed tx: 0x09f88882030e850ba43b740082f61894a2a8854b1802d8cd5de631e690817c253d6a915388016345785d8a000094a2a8854b1802d8cd5de631e690817c253d6a9153f847f8458207f5a0701261726a21b97f33d245940102ec1db848fa6f1015ce6dbf82f36fcdf70eb9a0514a9bd7a5f5f572fca20cf1bf884025e25508a59442d1f7cc433b0dae564dac\n````\n\n</CH.Code>\n\n---\n\nRecover the **signer's address** from the signature in signed tx\n\n<CH.Code>\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=29:30\n\n```\n\n---\n\n```zsh output\n❯ py txTypeFeeDelegatedValueTransferTransaction.py\nrecovered sender address 0xA2a8854b1802D8Cd5De631E690817c253d6a9153\n```\n\n</CH.Code>\n\n---\n\nSign the value transfer tx by fee payer's private key\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=32:33\n\n```\n\n---\n\nRecover the **fee payer's address** from the signature in signed tx\n\n<CH.Code>\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=35:36\n\n````\n\n\n---\n\n```zsh output\n❯ py txTypeFeeDelegatedValueTransferTransaction.py\nrecovered feepayer address: ['0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA']\n````\n\n</CH.Code>\n\n---\n\nYou can **decode** the RLP-encoded tx by the **Account.decode_transaction** util and if you want to make the output format pretty, use the **to_pretty** util\n\n<CH.Code>\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=38:39\n\n````\n\n---\n\n```zsh output\n❯ py txTypeFeeDelegatedValueTransferTransaction.py\ndecoded transaction: {\n  \"type\": 9,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 782,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 50691514842498381567070849504402583109757791219306486547462038310718807674553,\n      \"s\": 36769163002588173574455873574135523456290590785610097285006856943874380025260\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 60728158557991503180505493368021413772751916772408250238953062516885177405564,\n      \"s\": 49023092189116230171474387517244060616520232186821314097928587751775084593334\n    }\n  ],\n  \"chainId\": 1001\n}\n\n````\n\n</CH.Code>\n\n---\n\nSend the tx to the blockchain. It will return the tx hash, which will be used to wait the receipt\n\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=41\n\n```\n\n---\n\nThe **wait_for_transaction_receipt** method returns the tx receipt if it is completed in the blockchain\n\n<CH.Code>\n```py txTypeFeeDelegatedValueTransferTransaction.py focus=42:43\n\n````\n\n\n---\n\n```zsh output\n❯ py txTypeFeeDelegatedValueTransferTransaction.py\ntx hash:  0xad3e6e50ae5caceb6840e001a1aa65bb62e80532102aa7317500505e82283db7 receipt:  {'blockHash': HexBytes('0x71592bc1fa8a3a5b7d13e1f4f291eaf331dd70379e2f2e38914544d7112ad668'), 'blockNumber': 143821087, 'contractAddress': None, 'cumulativeGasUsed': 31000, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 31000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0xad3e6e50ae5caceb6840e001a1aa65bb62e80532102aa7317500505e82283db7'), 'transactionIndex': 0, 'type': 0}\n````\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/getting-started. # Getting-started\n\n## Install\nNeed to install [Python](https://www.python.org/downloads/) 3.7.2+ first\n\nMake example directory\n```\n> mkdir web3py-ext-examples & cd _$\n```\n\nSet python virtual environment (preferable but optional)\n```\n> python -m venv .venv\n> . ./.venv/bin/activate\n```\n\nInstall\n```\n> pip install web3py-ext\n```\n\n## Start\n\n### Create file\n```py fee-delegated-value-transfer.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n    TX_TYPE_FEE_DELEGATED_VALUE_TRANSFER\n)\nfrom web3py_ext.utils.klaytn_utils import to_pretty\n\nw3 = Web3(Web3.HTTPProvider('https://public-en-kairos.node.kaia.io'))\ndef web3_fee_delegated_value_transfer():\n    user = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n    fee_delegated_value_transfer_tx = empty_tx(TX_TYPE_FEE_DELEGATED_VALUE_TRANSFER)\n    fee_delegated_value_transfer_tx = merge(fee_delegated_value_transfer_tx, {\n        'from' : user.address,\n        'to' : user.address, # to feepayer\n        'value' : Web3.to_peb(0.1, 'klay'),\n    })\n\n    fee_delegated_value_transfer_tx = fill_transaction(fee_delegated_value_transfer_tx, w3)\n\n    # sign the kaia specific transaction type with web3py\n\n    signed_tx = Account.sign_transaction(fee_delegated_value_transfer_tx, user.key)\n\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(signed_tx.rawTransaction, fee_delegator.address, fee_delegator.key)\n\n    decoded_tx = Account.decode_transaction(feepayer_signed_tx.rawTransaction)\n    print(\"\\ndecoded transaction:\", to_pretty(decoded_tx))\n\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print('tx hash: ', tx_hash, 'receipt: ', tx_receipt)\nweb3_fee_delegated_value_transfer()\n```\n### Run\n\n```\n> python fee-delegated-value-transfer.py\n```\n\n### Output\n```\ndecoded transaction: {\n  \"type\": 9,\n  \"to\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"value\": 100000000000000000,\n  \"nonce\": 43,\n  \"gasPrice\": 50000000000,\n  \"gas\": 63000,\n  \"from\": \"0xA2a8854b1802D8Cd5De631E690817c253d6a9153\",\n  \"feePayer\": \"0xCb0eb737dfda52756495A5e08A9b37AAB3b271dA\",\n  \"signatures\": [\n    {\n      \"v\": 2037,\n      \"r\": 93578354654414740427739002022919644896409290347939533211703795054759757354902,\n      \"s\": 9134800547522066540800971891951614240623136207355204747806684032906366307747\n    }\n  ],\n  \"feePayerSignatures\": [\n    {\n      \"v\": 2038,\n      \"r\": 20302025172377290126887017758452014810405132492378310771239790273428447745777,\n      \"s\": 53258287859492498716919703834973997323471810974924373733878093996195872661689\n    }\n  ],\n  \"chainId\": 1001\n}\ntx hash:  0x205430ddd219681f4e1657b46aafa104609210d686554dfae8653eb22295d953 receipt:  AttributeDict({'blockHash': HexBytes('0x584ad0ac61625084509403db672087fac9e3967f09d5d4a7f96087f821848c77'), 'blockNumber': 126525583, 'contractAddress': None, 'cumulativeGasUsed': 31000, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 31000, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'transactionHash': HexBytes('0x205430ddd219681f4e1657b46aafa104609210d686554dfae8653eb22295d953'), 'transactionIndex': 0, 'type': 0})\n```",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/smart-contract/deploy. # Deploy\n\nWeb3 SDKs support to interact with Smart Contract via contract instance, not low-level transaction.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py smart_contract_deploy.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3.middleware import construct_sign_and_send_raw_middleware\n\nuser = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\nacc_list = [user]\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(acc_list))\n\ndef contract_deploy_with_legacy():\n    # compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n    # // SPDX-License-Identifier: UNLICENSED\n    # pragma solidity ^0.8.13;\n\n    # contract Counter {\n    #     uint256 public number;\n    #     event SetNumber(uint256 number);\n\n    #     constructor(uint256 initNumber) {\n    #         number = initNumber;\n    #     }\n\n    #     function setNumber(uint256 newNumber) public {\n    #         number = newNumber;\n    #         emit SetNumber(number);\n    #     }\n\n    #     function increment() public {\n    #         number++;\n    #         emit SetNumber(number);\n    #     }\n    # }\n    c = w3.eth.contract(\n        bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\",\n        abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    tx_hash = c.constructor(0).transact({\n        'from':user.address\n    })\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print(tx_receipt)\n\ncontract_deploy_with_legacy()\n```\n\n---\n\n```zsh output\n❯ py smart_contract_deploy.py\nAttributeDict({'blockHash': HexBytes('0xf990e2fcedc5e814c274b7582cfba6f9beae24f2314504a2ef7b9373397dd7a9'), 'blockNumber': 147171529, 'contractAddress': '0xc0F9ca7fC3D7bd3c0B302D8942dA398159520908', 'cumulativeGasUsed': 457185, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 260744, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': None, 'transactionHash': HexBytes('0x97b15a334ba0693f3a1780779555d6c9c13481d3cae9f70f32887fbdb81ce29b'), 'transactionIndex': 1, 'type': 2})\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py smart_contract_deploy.py focus=1:2\n\n```\n\n---\n\nImport necessary utils\n\n```py smart_contract_deploy.py focus=3:4\n\n```\n\n---\n\nLoad an account from private key\n\n```py smart_contract_deploy.py focus=6\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py smart_contract_deploy.py focus=7:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py smart_contract_deploy.py focus=7:9\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3.middleware import construct_sign_and_send_raw_middleware\n\nuser = Account.from_key('0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8')\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\nacc_list = [user]\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(acc_list))\n\ndef contract_deploy_with_legacy():\n    # compiled in remix.ethereum.org (compiler: 0.8.18, optimizer: false)\n    # // SPDX-License-Identifier: UNLICENSED\n    # pragma solidity ^0.8.13;\n\n    # contract Counter {\n    #     uint256 public number;\n    #     event SetNumber(uint256 number);\n\n    #     constructor(uint256 initNumber) {\n    #         number = initNumber;\n    #     }\n\n    #     function setNumber(uint256 newNumber) public {\n    #         number = newNumber;\n    #         emit SetNumber(number);\n    #     }\n\n    #     function increment() public {\n    #         number++;\n    #         emit SetNumber(number);\n    #     }\n    # }\n    c = w3.eth.contract(\n        bytecode = \"0x608060405234801561001057600080fd5b5060405161031a38038061031a8339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b610264806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fb5c1cb146100465780638381f58a14610062578063d09de08a14610080575b600080fd5b610060600480360381019061005b9190610160565b61008a565b005b61006a6100cd565b604051610077919061019c565b60405180910390f35b6100886100d3565b005b806000819055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d46000546040516100c2919061019c565b60405180910390a150565b60005481565b6000808154809291906100e5906101e6565b91905055507f331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d460005460405161011b919061019c565b60405180910390a1565b600080fd5b6000819050919050565b61013d8161012a565b811461014857600080fd5b50565b60008135905061015a81610134565b92915050565b60006020828403121561017657610175610125565b5b60006101848482850161014b565b91505092915050565b6101968161012a565b82525050565b60006020820190506101b1600083018461018d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101f18261012a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610223576102226101b7565b5b60018201905091905056fea264697066735822122012162749eb9714a6df7a34741c39edb78cf6e3d6d3e888872232594da5a1353164736f6c63430008120033\",\n        abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    tx_hash = c.constructor(0).transact({\n        'from':user.address\n    })\n    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)\n    print(tx_receipt)\n\ncontract_deploy_with_legacy()\n```\n\n---\n\nDefine an **account list** as a list type to use middleware\n\n```py smart_contract_deploy.py focus=10\n\n```\n\n---\n\nIf you want to automatically sign and send when using **transact** function, use **construct_sign_and_send_raw_middleware**\n\n```py smart_contract_deploy.py focus=11,40:42\n\n```\n\n---\n\nThese are the **contract** that is compiled into bytecode and will be deployed to the Kairos testnet\n\n```py smart_contract_deploy.py focus=18:35,37\n\n```\n\n---\n\nInitialize a Web3 contract instance with bytecode and ABI\n\n```py smart_contract_deploy.py focus=36:39\n\n```\n\n---\n\nSet the contract **bytebode** and **abi**. You can get the bytecode and abi after compiled in remix or solc compiler\n\n```py smart_contract_deploy.py focus=37,38\n\n```\n\n---\n\nDeploy the smart contract by sending a tx. This automatically sign and send the tx that include constructor call data\n\n```py smart_contract_deploy.py focus=40:42\n\n```\n\n---\n\nWait for the transaction **receipt**\n\n<CH.Code>\n```py smart_contract_deploy.py focus=43:44\n\n````\n---\n```zsh output\n❯ py smart_contract_deploy.py\nAttributeDict({'blockHash': HexBytes('0xf990e2fcedc5e814c274b7582cfba6f9beae24f2314504a2ef7b9373397dd7a9'), 'blockNumber': 147171529, 'contractAddress': '0xc0F9ca7fC3D7bd3c0B302D8942dA398159520908', 'cumulativeGasUsed': 457185, 'effectiveGasPrice': 25000000000, 'from': '0xA2a8854b1802D8Cd5De631E690817c253d6a9153', 'gasUsed': 260744, 'logs': [], 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'status': 1, 'to': None, 'transactionHash': HexBytes('0x97b15a334ba0693f3a1780779555d6c9c13481d3cae9f70f32887fbdb81ce29b'), 'transactionIndex': 1, 'type': 2})\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/smart-contract/read. # Read\n\nYou can call functions in Smart Contract via \"Call\" RPC API. What you can call here is limited to **view functions** that is not changing any states in the Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py smart_contract_interaction.py\nfrom web3py_ext import extend\nfrom web3 import Web3\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef contract_interaction():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    # call view function\n    print('\\nnumber : ', c.functions.number().call())\n\ncontract_interaction()\n\n```\n\n---\n\n```zsh output\n❯ py smart_contract_interaction.py\nnumber :  294\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py smart_contract_interaction.py focus=1:2\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py smart_contract_interaction.py focus=4:6\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py smart_contract_interaction.py focus=4:6\nfrom web3py_ext import extend\nfrom web3 import Web3\n\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\n\ndef contract_interaction():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    # call view function\n    print('\\nnumber : ', c.functions.number().call())\n\ncontract_interaction()\n```\n\n---\n\nCreate a contract instance with **contract address** and **abi**\n\n```py smart_contract_interaction.py focus=9:12\n\n```\n\n---\n\nSet the contract address that you deployed in the deploy tutorial (**Counter contract**). You can see the address in your deploy tx receipt\n\n```py smart_contract_interaction.py focus=10\n\n```\n\n---\n\nSet the contract abi. You can get the ABI after compiled in remix or solc compiler\n\n```py smart_contract_interaction.py focus=11\n\n```\n\n---\n\nCall the view function. It is just a RPC call to the blockchain node, not transaction\n\n<CH.Code>\n```py smart_contract_interaction.py focus=13:14\n\n````\n---\n```zsh output\n❯ py smart_contract_interaction.py\nnumber :  294\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/smart-contract/write-txtype. # Write with TxType\n\n<CH.Spotlight>\n<CH.Code>\n\n```py contract_interaction_with_kaia_type.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n    TxType\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\nuser = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\n\ndef contract_interaction_with_klaytn_type():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n\n    # view before write transaction\n    print('\\nnumber before: ', c.functions.number().call())\n\n    # with smart contract execution type\n    tx = c.functions.increment().build_transaction({\n        \"type\":TxType.SMART_CONTRACT_EXECUTION,\n        \"from\":user.address,\n    })\n    tx = fill_transaction(tx, w3)\n    signed_tx = Account.sign_transaction(tx, user.key)\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    print(\"receipt: \", w3.eth.wait_for_transaction_receipt(tx_hash))\n\n    # view after write transaction\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction_with_klaytn_type()\n```\n\n---\n\n```zsh output\n❯ py contract_interaction_with_kaia_type.py\nnumber before:  295\nreceipt:  AttributeDict({'blockHash': HexBytes('0xe12ce22f39c5104ceae275bd326e6aef8378ca4cf750bec87d28f5bc8416c09b'), 'blockNumber': 147325275, 'contractAddress': None, 'cumulativeGasUsed': 497423, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 28014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000128'), 'blockNumber': 147325275, 'transactionHash': HexBytes('0x1eff7f363dc48eb91fe825939097ee8795f4a080339a9173cfdba444de69e61e'), 'transactionIndex': 3, 'blockHash': HexBytes('0xe12ce22f39c5104ceae275bd326e6aef8378ca4cf750bec87d28f5bc8416c09b'), 'logIndex': 9, 'removed': False})], 'logsBloom': HexBytes('0x00000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000001200000002'), 'status': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0x1eff7f363dc48eb91fe825939097ee8795f4a080339a9173cfdba444de69e61e'), 'transactionIndex': 3, 'type': 0})\n\nnumber before:  296\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py contract_interaction_with_kaia_type.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py contract_interaction_with_kaia_type.py focus=3:7\n\n```\n\n---\n\nCreate a Web3 instance with the **kairos** testnet endpoint\n\n```py contract_interaction_with_kaia_type.py focus=9:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py contract_interaction_with_kaia_type.py focus=9:11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n    TxType\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\nuser = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\n\ndef contract_interaction_with_klaytn_type():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n\n    # view before write transaction\n    print('\\nnumber before: ', c.functions.number().call())\n\n    # with smart contract execution type\n    tx = c.functions.increment().build_transaction({\n        \"type\":TxType.SMART_CONTRACT_EXECUTION,\n        \"from\":user.address,\n    })\n    tx = fill_transaction(tx, w3)\n    signed_tx = Account.sign_transaction(tx, user.key)\n    tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)\n    print(\"receipt: \", w3.eth.wait_for_transaction_receipt(tx_hash))\n\n    # view after write transaction\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction_with_klaytn_type()\n```\n\n---\n\nLoad an account from private key\n\n```py contract_interaction_with_kaia_type.py focus=12\n\n```\n\n---\n\nCreate a **contract instance** with its address and ABI\n\n```py contract_interaction_with_kaia_type.py focus=15:18\n\n```\n\n---\n\nSet the **contract address** that you deployed in the deploy tutorial (**Counter contract**). You can see the address in your deploy tx receipt\n\n```py contract_interaction_with_kaia_type.py focus=16\n\n```\n\n---\n\nSet the contract abi. You can get the ABI after compiled in remix or solc compiler\n\n```py contract_interaction_with_kaia_type.py focus=17\n\n```\n\n---\n\nCall the view function of the contract and **print** the result before it is updated\n\n<CH.Code>\n```py contract_interaction_with_kaia_type.py focus=20:21\n\n````\n---\n```zsh output\nnumber before:  295\n````\n\n</CH.Code>\n\n---\n\nMake a tx with **build_transaction** that returns the tx instance along with the additional fields passed as parameter\n\n```py contract_interaction_with_kaia_type.py focus=23:27\n\n```\n\n---\n\nYou should pass **TxType.SMART_CONTRACT_EXECUTION** type to make a kaia tx contract execution type\n\n```py contract_interaction_with_kaia_type.py focus=25\n\n```\n\n---\n\nUse **fill_transaction** util to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py contract_interaction_with_kaia_type.py focus=5,28\n\n```\n\n---\n\nSign the tx with the user's private key\n\n```py contract_interaction_with_kaia_type.py focus=29\n\n```\n\n---\n\nSend the tx to the blockchain. It will return the tx hash\n\n```py contract_interaction_with_kaia_type.py focus=30\n\n```\n\n---\n\nWait the tx **receipt** from the blockchain and **print** after received the tx receipt\n\n<CH.Code>\n```py contract_interaction_with_kaia_type.py focus=31\n\n````\n---\n```zsh output\nreceipt:  AttributeDict({'blockHash': HexBytes('0xe12ce22f39c5104ceae275bd326e6aef8378ca4cf750bec87d28f5bc8416c09b'), 'blockNumber': 147325275, 'contractAddress': None, 'cumulativeGasUsed': 497423, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 28014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000128'), 'blockNumber': 147325275, 'transactionHash': HexBytes('0x1eff7f363dc48eb91fe825939097ee8795f4a080339a9173cfdba444de69e61e'), 'transactionIndex': 3, 'blockHash': HexBytes('0xe12ce22f39c5104ceae275bd326e6aef8378ca4cf750bec87d28f5bc8416c09b'), 'logIndex': 9, 'removed': False})], 'logsBloom': HexBytes('0xstatus': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0x1eff7f363dc48eb91fe825939097ee8795f4a080339a9173cfdba444de69e61e'), 'transactionIndex': 3, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nCall the view function again to see **what number** the counter have after the tx\n\n<CH.Code>\n```py contract_interaction_with_kaia_type.py focus=33:34\n\n````\n---\n```zsh output\nnumber before:  296\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/smart-contract/write-with-fee-delegation. # Write (Fee Delegation)\n\nYou can make a **\"transaction\"** that including **payment request** to feepayer when you want to execute the Smart Contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py contract_interaction_with_fee_delegation_kaia_type.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n    TxType\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef contract_interaction_with_fee_delegation_klaytn_type():\n    user = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n\n    # view before write transaction\n    print('\\nnumber before: ', c.functions.number().call())\n\n    # sender sign with fee delegated smart contract execution type\n    tx = c.functions.increment().build_transaction({\n        \"type\":TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION,\n        \"from\":user.address,\n    })\n    tx = fill_transaction(tx, w3)\n    user_signed_tx = Account.sign_transaction(tx, user.key)\n\n    # feePayer sign\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(\n        user_signed_tx.rawTransaction,\n        fee_delegator.address,\n        fee_delegator.key\n    )\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    print('receipt: ', w3.eth.wait_for_transaction_receipt(tx_hash))\n\n    # view after write transaction\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction_with_fee_delegation_klaytn_type()\n```\n\n---\n\n```zsh output\n❯ py contract_interaction_with_fee_delegation_kaia_type.py\n\nnumber before:  294\nreceipt:  AttributeDict({'blockHash': HexBytes('0xa1ecb35a068736c6257915f8a89dfeec30cace985dc244a1b82c887fd9360f3a'), 'blockNumber': 147174601, 'contractAddress': None, 'cumulativeGasUsed': 377941, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 38014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000127'), 'blockNumber': 147174601, 'transactionHash': HexBytes('0xded6817cb1c5112a2a4c8aebd0c74a56bfcdde10c393261b7e8212db67958743'), 'transactionIndex': 2, 'blockHash': HexBytes('0xa1ecb35a068736c6257915f8a89dfeec30cace985dc244a1b82c887fd9360f3a'), 'logIndex': 6, 'removed': False})], 'logsBloom': HexBytes('0xstatus': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0xded6817cb1c5112a2a4c8aebd0c74a56bfcdde10c393261b7e8212db67958743'), 'transactionIndex': 2, 'type': 0})\n\nnumber after:  295\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=1:2\n\n```\n\n---\n\nImport necessary utils from **web3** and **eth_account**\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=3:7\n\n```\n\n---\n\nCreate a Web3 instance with the **kairos** testnet endpoint\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=9:11\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=9:11\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3py_ext.transaction.transaction import (\n    fill_transaction,\n    TxType\n)\n\nw3 = Web3(Web3.HTTPProvider(\n    'https://public-en-kairos.node.kaia.io'\n    ))\n\ndef contract_interaction_with_fee_delegation_klaytn_type():\n    user = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\n    fee_delegator = Account.from_key('0x9435261ed483b6efa3886d6ad9f64c12078a0e28d8d80715c773e16fc000cff4')\n\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n\n    # view before write transaction\n    print('\\nnumber before: ', c.functions.number().call())\n\n    # sender sign with fee delegated smart contract execution type\n    tx = c.functions.increment().build_transaction({\n        \"type\":TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION,\n        \"from\":user.address,\n    })\n    tx = fill_transaction(tx, w3)\n    user_signed_tx = Account.sign_transaction(tx, user.key)\n\n    # feePayer sign\n    feepayer_signed_tx = Account.sign_transaction_as_feepayer(\n        user_signed_tx.rawTransaction,\n        fee_delegator.address,\n        fee_delegator.key\n    )\n    tx_hash = w3.eth.send_raw_transaction(feepayer_signed_tx.rawTransaction)\n    print('receipt: ', w3.eth.wait_for_transaction_receipt(tx_hash))\n\n    # view after write transaction\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction_with_fee_delegation_klaytn_type()\n```\n\n---\n\nLoad the **user** and **fee delegator** account from each private key\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=14:15\n\n```\n\n---\n\nCreate the **contract instance** with its address and ABI\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=17:20\n\n```\n\n---\n\nSet the contract address that you deployed in the deploy tutorial (**Counter contract**). You can see the address in your deploy tx receipt\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=18\n\n```\n\n---\n\nSet the contract abi. You can get the ABI after compiled in remix or solc compiler\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=19\n\n```\n\n---\n\nCall the view function of the contract and **print** the result\n\n<CH.Code>\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=22:23\n\n````\n---\n```zsh output\n\nnumber before:  294\n````\n\n</CH.Code>\n\n---\n\nMake a tx with **build_transaction** that returns the tx instance along with passed fields as parameter. You should set the **TxType.FEE_DELEGATED_SMART_CONTRACT_EXECUTION** type to request fee delegation to fee payer\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=26:29\n\n```\n\n---\n\n**increment()** automatically makes the function call data and set it to the **data** field\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=26\n\n```\n\n---\n\nUse **fill_transaction** to add **rest of the fields** of the transaction like **gas limit**, **Nonce**, etc. You can print all the fields after this line if you want to see\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=30\n\n```\n\n---\n\nSign the transaction with the **user's** private key\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=31\n\n```\n\n---\n\nSign the transaction as **fee payer** with the fee delegator's key. You need to pass the fee payer's address as well.\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=33:38\n\n```\n\n---\n\nSend the raw transaction and get the **transaction hash**\n\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=39\n\n```\n\n---\n\nWait for the transaction **receipt**\n\n<CH.Code>\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=40\n\n````\n---\n```zsh output\nreceipt:  AttributeDict({'blockHash': HexBytes('0xa1ecb35a068736c6257915f8a89dfeec30cace985dc244a1b82c887fd9360f3a'), 'blockNumber': 147174601, 'contractAddress': None, 'cumulativeGasUsed': 377941, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 38014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000127'), 'blockNumber': 147174601, 'transactionHash': HexBytes('0xded6817cb1c5112a2a4c8aebd0c74a56bfcdde10c393261b7e8212db67958743'), 'transactionIndex': 2, 'blockHash': HexBytes('0xa1ecb35a068736c6257915f8a89dfeec30cace985dc244a1b82c887fd9360f3a'), 'logIndex': 6, 'removed': False})], 'logsBloom': HexBytes('0xstatus': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0xded6817cb1c5112a2a4c8aebd0c74a56bfcdde10c393261b7e8212db67958743'), 'transactionIndex': 2, 'type': 0})\n````\n\n</CH.Code>\n\n---\n\nCheck if contract has **updated** the state\n\n<CH.Code>\n```py contract_interaction_with_fee_delegation_kaia_type.py focus=42:43\n\n````\n---\n```zsh output\nnumber after:  295\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/smart-contract/write. # Write\n\nYou can make a **\"transaction\"** interacting with a Smart Contract when you **need to update some state ** in the contract.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py smart_contract_write.py\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3.middleware import construct_sign_and_send_raw_middleware\n\nuser = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\nacc_list = [user]\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(acc_list))\n\ndef contract_interaction():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    # call view function\n    print('\\nnumber before: ', c.functions.number().call())\n    tx_hash = c.functions.increment().transact({\n        'from':user.address\n    })\n    print('receipt: ', w3.eth.wait_for_transaction_receipt(tx_hash))\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction()\n```\n\n---\n\n```zsh output\n❯ py smart_contract_write.py\nnumber before:  293\nreceipt:  AttributeDict({'blockHash': HexBytes('0x1025a3b580e904459af4a7a03adf8322cef2cd2e6e412abf04f6eee69f9ae877'), 'blockNumber': 147329610, 'contractAddress': None, 'cumulativeGasUsed': 361377, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 28014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000126'), 'blockNumber': 147329610, 'transactionHash': HexBytes('0xc04fd483bc3efe7ce61e65ded491eccb5f5401267f8e95bdae2bcc3356aab561'), 'transactionIndex': 2, 'blockHash': HexBytes('0x1025a3b580e904459af4a7a03adf8322cef2cd2e6e412abf04f6eee69f9ae877'), 'logIndex': 6, 'removed': False})], 'logsBloom': HexBytes('0xstatus': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0xc04fd483bc3efe7ce61e65ded491eccb5f5401267f8e95bdae2bcc3356aab561'), 'transactionIndex': 2, 'type': 2})\n\nnumber after:  294\n```\n\n</CH.Code>\n\n---\n\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py smart_contract_write.py focus=1:2\n\n```\n\n---\n\nImport necessary utils\n\n```py smart_contract_write.py focus=3:4\n\n```\n\n---\n\nLoad an account from private key\n\n```py smart_contract_write.py focus=6\n\n```\n\n---\n\nCreate a Web3 instance with the specified **kairos** testnet URL\n\n```py smart_contract_write.py focus=7:9\n\n```\n\n---\n\nAlso, you can change the provider URL from **kairos** to **quicknode**.\n\n```py smart_contract_write.py focus=7:9\nfrom web3py_ext import extend\nfrom web3 import Web3\nfrom eth_account import Account\nfrom web3.middleware import construct_sign_and_send_raw_middleware\n\nuser = Account.from_key('0x4a72b3d09c3d5e28e8652e0111f9c4ce252e8299aad95bb219a38eb0a3f4da49')\nw3 = Web3(Web3.HTTPProvider(\n  'https://public-en-kairos.node.kaia.io'\n  ))\nacc_list = [user]\nw3.middleware_onion.add(construct_sign_and_send_raw_middleware(acc_list))\n\ndef contract_interaction():\n    c = w3.eth.contract(\n      address=\"0x95Be48607498109030592C08aDC9577c7C2dD505\",\n      abi = [{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":False,\"inputs\":[{\"indexed\":False,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SetNumber\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n    )\n    # call view function\n    print('\\nnumber before: ', c.functions.number().call())\n    tx_hash = c.functions.increment().transact({\n        'from':user.address\n    })\n    print('receipt: ', w3.eth.wait_for_transaction_receipt(tx_hash))\n    print('\\nnumber after: ', c.functions.number().call())\n\ncontract_interaction()\n```\n\n---\n\nDefine an **account list** as a list type to use **middleware**\n\n```py smart_contract_write.py focus=8\n\n```\n\n---\n\nIf you want to automatically sign and send when using **transact** function, use **construct_sign_and_send_raw_middleware**\n\n```py smart_contract_write.py focus=4,11,20:22\n\n```\n\n---\n\nCreate a **contract instance** with its address and ABI\n\n```py smart_contract_write.py focus=14:17\n\n```\n\n---\n\nSet the **contract address** that you deployed in the deploy tutorial (**Counter contract**). You can see the address in your deploy tx receipt\n\n```py smart_contract_write.py focus=15\n\n```\n\n---\n\nSet the contract abi. You can get the ABI after compiled in remix or solc compiler\n\n```py smart_contract_write.py focus=16\n\n```\n\n---\n\nCall the view function of the contract and **print** the result before it is updated\n\n<CH.Code>\n```py smart_contract_write.py focus=18:19\n\n````\n---\n```zsh output\nnumber before:  293\n````\n\n</CH.Code>\n\n---\n\nSend a **tx** to **update** the contract **state**. This automatically sign and send the tx that includes the data **calling** the **increment function**\n\n```py smart_contract_write.py focus=20:22\n\n```\n\n---\n\nWait the tx **receipt** from the blockchain and **print** the receipt after received\n\n<CH.Code>\n```py smart_contract_write.py focus=23\n\n````\n\n---\n```zsh output\nreceipt:  AttributeDict({'blockHash': HexBytes('0x1025a3b580e904459af4a7a03adf8322cef2cd2e6e412abf04f6eee69f9ae877'), 'blockNumber': 147329610, 'contractAddress': None, 'cumulativeGasUsed': 361377, 'effectiveGasPrice': 25000000000, 'from': '0x24e8eFD18D65bCb6b3Ba15a4698c0b0d69d13fF7', 'gasUsed': 28014, 'logs': [AttributeDict({'address': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'topics': [HexBytes('0x331bb01bcf77ec721a35a558a7984e8e6ca33b507d3ee1dd13b76f64381e54d4')], 'data': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000126'), 'blockNumber': 147329610, 'transactionHash': HexBytes('0xc04fd483bc3efe7ce61e65ded491eccb5f5401267f8e95bdae2bcc3356aab561'), 'transactionIndex': 2, 'blockHash': HexBytes('0x1025a3b580e904459af4a7a03adf8322cef2cd2e6e412abf04f6eee69f9ae877'), 'logIndex': 6, 'removed': False})], 'logsBloom': HexBytes('0xstatus': 1, 'to': '0x95Be48607498109030592C08aDC9577c7C2dD505', 'transactionHash': HexBytes('0xc04fd483bc3efe7ce61e65ded491eccb5f5401267f8e95bdae2bcc3356aab561'), 'transactionIndex': 2, 'type': 2})\n````\n\n</CH.Code>\n\n---\n\nCall the view function again to see **what number** the counter have after the tx\n\n<CH.Code>\n```py smart_contract_write.py focus=24\n\n````\n---\n```zsh output\nnumber after:  294\n````\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/utils/address. # Address\nUtils for converting public address, public key.\n\n<CH.Spotlight>\n<CH.Code>\n\n```py address_utils.py\nfrom eth_account import Account\nfrom web3py_ext.klaytn_account.utils import compressed_key_from_xy, address_from_private_key, compressed_key, \\\n    compressed_key_and_address_from_xy\n\n\ndef main():\n    private_key=Account.from_key(\"0x0e4ca6d38096ad99324de0dde108587e5d7c600165ae4cd6c2462c597458c2b8\")\n    print(\"Public key from private key\",address_from_private_key(private_key))\n    print(\"Compress key from private key\",compressed_key(private_key))\n\n    x = \"0xdc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\"\n    y = \"0xaf06ca34ae8714cf3dae06bacdb78c7c2d4054bd38961d40853cd5f15955da79\"\n    print(\"Compress public key from x,y\", compressed_key_from_xy(x, y))\n    print(\"Compress public key and address from x,y\", compressed_key_and_address_from_xy(x, y))\n\nmain()\n```\n\n---\n\n```zsh output\n❯ python address_utils.py\nPublic key from private key 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nCompress key from private key 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nCompress key from x,y 03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\nCompress key and address from x,y ('0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd', '0xA2a8854b1802D8Cd5De631E690817c253d6a9153')\n\n```\n\n</CH.Code>\n\n---\n\nImport the **getCompressedPublicKey** from **@kaiachain/ethers-ext** packages\n\n```py address_utils.py focus=1:3\n\n```\n\n---\nFrom an `Account` object you can get the **public address** with `address_from_private_key` or get the **compressed public key** with `compressed_key`\n<CH.Code>\n```py address_utils.py focus=7:9\n\n```\n\n---\n\n```zsh output\n❯ python address_utils.py\npubkey from { x, y } object = 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n---\nFrom `x` and `y` coordinates of an uncompressed public key, you can get the public key and the address using `compressed_key_from_xy` and `compressed_key_and_address_from_xy`\n<CH.Code>\n```py address_utils.py focus=11:14\n\n```\n\n---\n```zsh output\n❯ python address_utils.py\nPublic key from private key 0xa2a8854b1802d8cd5de631e690817c253d6a9153\nCompress key from private key 0x03dc9dccbd788c00fa98f7f4082f2f714e799bc0c29d63f04d48b54fe6250453cd\n```\n\n</CH.Code>\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/utils/signature. # Signature\nConvert signature between `r, s, v` and `compressed string` format.\n<CH.Spotlight>\n<CH.Code>\n\n```py signature_convert.py\nfrom web3py_ext import bytes_to_hex_str, hex_str_to_bytes\n\ndef rsv_to_signature_string(r, s, v):\n    # Concatenate r, s, and v to form a 65-byte signature\n    signature = r + s + v\n    return bytes_to_hex_str(signature)\ndef signature_string_to_rsv(signature_str):\n    # Convert the signature string to bytes (remove '0x' if present)\n    signature = hex_str_to_bytes(signature_str)\n    # Extract r (first 32 bytes), s (next 32 bytes), and v (last byte)\n    r = signature[:32]\n    s = signature[32:64]\n    v = signature[64]\n    return bytes_to_hex_str(r), bytes_to_hex_str(s), hex(v)\n\ndef main():\n    # convert {r,s,v} signature to string\n    r = hex_str_to_bytes('0x678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e6')\n    s = hex_str_to_bytes('0xbaabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed')\n    v = hex_str_to_bytes(\"0x1b\")\n    print(\"From r,s,v to string\",rsv_to_signature_string(r,s,v))\n\n    # convert string sigature to rsv\n    signature_str=\"0x66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b9975c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c5081b\"\n    print(\"From string to r,s,v\",signature_string_to_rsv(signature_str))\nmain()\n```\n\n---\n\n```zsh output\n❯ py signature_convert.py\nFrom r,s,v to string 678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e6baabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed1b\nFrom string to r,s,v ('66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99', '75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508', '0x1b')\n```\n\n</CH.Code>\n\n---\nImport the `bytes_to_hex_str`, `hex_str_to_bytes` from **web3py_ext**\n\n```py signature_convert.py focus=1\n\n```\n---\nFor converting `{r,s,v}` signature to string, define a signature in `r,s,v` format, use `hex_str_to_bytes` to convert each components to `bytes`\n<CH.Code>\n```py signature_convert.py focus=17:20\n```\n---\n```zsh output\n❯ py signature_convert.py\n\n```\n\n</CH.Code>\n---\nConcatenate the components in order of `r + s + v` and convert the result bytes to `string`.\n<CH.Code>\n\n```py signature_convert.py focus=3:6,21\n\n```\n\n---\n```zsh output\n❯ py signature_convert.py\nFrom r,s,v to string 678f3a7b600169b800828065cda112aa28291311a5dbb729480444a2b905f6e6baabb5a43a047e75e41a77b88fa7a5bf89e5227f1c8e40bfdfbcceb8164521ed1b\n```\n\n\n</CH.Code>\n---\nFor converting `string` signature to `{r,s,v}`, define a signature in string format\n\n```py signature_convert.py focus=23:24\n```\n\n---\nConvert the string signature to `bytes` using `hex_str_to_bytes` \n<CH.Code>\n```py signature_convert.py focus=8:9\n```\n\n---\n```zsh output\n❯ py signature_convert.py\n\n```\n\n</CH.Code>\n---\nExtract `R first 32 indices`, `S next 32 indices`, `V last indice` from the signature bytes\n<CH.Code>\n```py signature_convert.py focus=10:13\n```\n\n---\n```zsh output\n❯ py signature_convert.py\n\n```\n\n</CH.Code>\n---\nYou can convert each components back to string using `bytes_to_hex_str()` and `hex()`\n<CH.Code>\n```py signature_convert.py focus=14,25\n```\n\n---\n```zsh output\n❯ py signature_convert.py\nFrom string to r,s,v ('66809fb130a6ea4ae4e823baa92573a5f1bfb4e88e64048aecfb18a2b4012b99', '75c2c3e5f7b0a182c767137c488649cd5104a5e747371fd922d618e328e5c508', '0x1b')\n```\n\n</CH.Code>\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/sdk/web3py-ext/utils/unit. # Units\nFor units conversion, Kaia-sdk supports utils for converting `kaia`, `Gkei` and `kei`. See [supported units](https://docs.kaia.io/learn/kaia-native-token/#units-of-kaia-) .\n<CH.Spotlight>\n<CH.Code>\n\n```py unit_utils.py\nfrom web3py_ext import extend\nfrom web3 import Web3\n\ndef main():\n    # convert from (kei/Gkei/kaia) to kei\n    print(\"From Kaia to Kei\", Web3.to_kei(1, 'Gkei'))\n\n    # convert from kei to (kei/Gkei/kaia)\n    print('From Kei to Kaia',Web3.from_kei(1000000000000000000,'kaia'))\n\nmain()\n```\n\n---\n\n```zsh output\n❯ py unit_utils.py\nFrom Kaia to Kei 1\nFrom Kei to Kaia 1\n```\n\n</CH.Code>\n\n---\nImport **extend** from **web3py_ext** to extend web3 to kaia web3\n\n```py unit_utils.py focus=1\n\n```\n---\nTo convert from `(Gkei/kaia)` to `kei`, use `Web3.to_kei(value, unit)`. \n<CH.Code>\n```py unit_utils.py focus=5:6\n\n```\n\n---\n```zsh output\n❯ py unit_utils.py\nFrom Kaia to Kei 1\n```\n\n</CH.Code>\n---\nTo convert from `kei` to `(kaia/Gkei)`, use `Web3.from_kei(value, unit)`. \n<CH.Code>\n\n```py unit_utils.py focus=8:9\n\n```\n\n---\n```zsh output\n❯ py unit_utils.py\nFrom Kei to Kaia 1\n```\n\n</CH.Code>\n\n\n</CH.Spotlight>\n",
    "Current Website Url is https://docs.kaia.io/references/signed-message. # Signed message standards\n\nWallet private keys are primarily used to sign transactions, but the same key can also be used to sign any application-specific messages. Users can use signed messages to cryptographically authorize actions. These off-chain signatures can save gas and reduce transaction count on the blockchain.\n\nThere are various technical methods, or standards, for message signing. Sure, digital signature is a fundamental function of ECDSA. Nevertheless, several standards were devised to separate message signature from transaction signature and to improve interoperability between applications. Without signature standards, message signing functions could sign arbitrary hashes so the user signs malicious transaction hashes disguised as messages. To prevent this from happening, message signing standards modify the message so the signature cannot be used for other purposes.\n\nDifferent wallets and SDKs support varying range of those standards, so you should choose an appropriate method suited for your application.\n\n## Signing raw message\n\nSigning the message as-is is the simplest approach. Because this is risky for the reasons mentioned above, it is rarely used today.\n\nAmong the ecosystem tools, MetaMask supports raw message signing via `eth_sign` method after explicit user consent. This feature is only maintained for backwards compatibility and must not be used in new projects. It's worth reading the article [What is 'eth sign' and why is it a risk?](https://support.metamask.io/privacy-and-security/what-is-eth_sign-and-why-is-it-a-risk/)\n\n```js\nwindow.ethereum.request({ method: \"eth_requestAccounts\" })\nwindow.ethereum.request({ method: \"eth_sign\", params: [\"0xbC7d1aBe33E6EC19cA873A3042A4DCF49149BC7A\", \"0x00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\"] }).then(console.log)\n```\n\n## KIP-97 Klaytn Signed Message\n\nSome Kaia nodes and SDKs have been providing a way to prefix messages with `\"\\x19Klaytn Signed Message:\\n\" + len(message)` before signing them. For details, please refer to [KIP-97](https://kips.kaia.io/KIPs/kip-97). Having the Klaytn- prefix can mitigate signature replay across chains, but the prefix alone cannot fully prevent replay attacks. Applications must employ replay protection mechanisms, including random challenges or timestamps, to defend against replay attacks within an application.\n\nKIP-97 signatures are supported by:\n- Kaia Wallet [`klay_sign`](https://docs.kaiawallet.io/api_reference/caver_methods#caverklaysign) method\n- caver-js [`keyring.signMessage`](../sdk/caver-js/api/caver-wallet/keyring) and [`utils.recover`](../sdk/caver-js/api/caver.utils) methods\n- caver-java [`AbstractKeyring.signMessage​`](https://javadoc.io/doc/com.klaytn.caver/core/latest/com/klaytn/caver/wallet/keyring/AbstractKeyring.html) and [`Utils.recover`](https://javadoc.io/doc/com.klaytn.caver/core/latest/com/klaytn/caver/utils/Utils.html) methods\n- In Kaia nodes until v1.0.0, [`eth_sign`](../json-rpc/eth/sign), [`kaia_sign`](../json-rpc/kaia/sign), [`personal_sign`](../json-rpc/personal/sign) [`personal_ecRecover`](../json-rpc/personal/ec-recover) RPCs\n- In Kaia nodes of all versions, [`kaia_recoverFromMessage`](../json-rpc/kaia/recover-from-message) RPC\n\nKaia Wallet example:\n\n```js\nwindow.klaytn.request({ method: \"eth_requestAccounts\" })\nwindow.klaytn.request({ method: \"klay_sign\", params: [\"0xbC7d1aBe33E6EC19cA873A3042A4DCF49149BC7A\", \"0x61626364\"] }).then(console.log)\n\n0x90824271750d7a09f90a76b6f8ec1e5e2afd31790fea9f43e26c120fef3152be46ad09c76f87bd6c495859fa37127754f1f0780180df53eda80034dac036b8d31b\n```\n\nRPC example:\n\n```js\nkaia.recoverFromMessage('0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a', '0x61626364', '0x90824271750d7a09f90a76b6f8ec1e5e2afd31790fea9f43e26c120fef3152be46ad09c76f87bd6c495859fa37127754f1f0780180df53eda80034dac036b8d31b', 'latest')\n\n\"0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a\"\n```\n\n## EIP-191 Ethereum Signed Message\n\nIn Ethereum and several EVM chains, it is widely used practice to prefix the messages with `\"\\x19Ethereum Signed Message:\\n\" + len(message)` before signing them. For details, please refer to [EIP-191](https://eips.ethereum.org/EIPS/eip-191). Kaia nodes and SDKs support this feature. Like KIP-97, EIP-191 requires applications to implement replay protection mechanisms. Nevertheless, using EIP-191 ensures compatibility with other ecosystem tools and streamlines the message handling logic, without the need for EIP/KIP branches.\n\nEIP-191 signatures are supported by:\n- Ethereum wallets (e.g. MetaMask)\n- Ethereum SDKs (ethers.js, web3.js, web3j, web3py, viem, etc)\n- [kaia-sdk](https://github.com/kaiachain/kaia-sdk) suite (ethers-ext, web3js-ext, web3j-ext, web3py-ext), as they inherit the message signing features from their respective Ethereum SDKs ([see docs](../sdk))\n- In Kaia nodes since v1.0.1, [`eth_sign`](../json-rpc/eth/sign), [`kaia_sign`](../json-rpc/kaia/sign), [`personal_sign`](../json-rpc/personal/sign) [`personal_ecRecover`](../json-rpc/personal/ec-recover) RPCs\n- In Kaia nodes of all versions, [`kaia_recoverFromMessage`](../json-rpc/kaia/recover-from-message) RPC\n\nethers.js example:\n\n```js\nconst wallet = new ethers.Wallet(\"0x6397f5bfcef382017268d21294aed3b82d479b67323f94f7065d92a43643f20f\");\nawait wallet.signMessage(\"abcd\");\n\n'0xe67ddbb12ad7c85a28b082bb3f159e637229454d34824bd96c0df38e49bf92d42167ffba7565855585de0c32407b0622b0b66fdfe7bd6566d4a19ca40b39ec631b'\n```\n\nRPC example:\n\n```js\npersonal.importRawKey('6397f5bfcef382017268d21294aed3b82d479b67323f94f7065d92a43643f20f', 'pass')\npersonal.unlockAccount('0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a', 'pass')\npersonal.sign('0x61626364', '0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a', 'pass')\n\n\"0xe67ddbb12ad7c85a28b082bb3f159e637229454d34824bd96c0df38e49bf92d42167ffba7565855585de0c32407b0622b0b66fdfe7bd6566d4a19ca40b39ec631b\"\n```\n\n```js\nkaia.recoverFromMessage('0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a', '0x61626364', '0xe67ddbb12ad7c85a28b082bb3f159e637229454d34824bd96c0df38e49bf92d42167ffba7565855585de0c32407b0622b0b66fdfe7bd6566d4a19ca40b39ec631b', 'latest')\n\n\"0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a\"\n```\n\n## EIP-712 Typed Structured Data\n\nWhile EIP-191 and KIP-97 were standards for signing a single string, EIP-712 is a standard for signing application data structured in JSON format. This format is more human-readable and efficient to process on EVM. For details, please refer to [EIP-712](https://eips.ethereum.org/EIPS/eip-712). Note that this standard cannot fully prevent replay attacks. As with other standards, applications must take care about replay protection mechanisms. You can find more about the APIs such as `eth_signTypedData_v1`, `eth_signTypedData_v3`, and `eth_signTypedData_v4` [here](https://docs.metamask.io/wallet/concepts/signing-methods/)\n\nEIP-712 signatures are supported by:\n- Ethereum wallets (e.g. MetaMask)\n- Kaia Wallet\n\nKaia Wallet example:\n\n```js\nconst data = '{\"domain\":{\"chainId\":1,\"name\":\"Ether Mail\",\"verifyingContract\":\"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\"version\":\"1\"},\"message\":{\"contents\":\"Hello, Bob!\",\"attachedMoneyInEth\":4.2,\"from\":{\"name\":\"Cow\",\"wallets\":[\"0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\",\"0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF\"]},\"to\":[{\"name\":\"Bob\",\"wallets\":[\"0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB\",\"0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57\",\"0xB0B0b0b0b0b0B000000000000000000000000000\"]}]},\"primaryType\":\"Mail\",\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}],\"Group\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"Person[]\"}],\"Mail\":[{\"name\":\"from\",\"type\":\"Person\"},{\"name\":\"to\",\"type\":\"Person[]\"},{\"name\":\"contents\",\"type\":\"string\"}],\"Person\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"wallets\",\"type\":\"address[]\"}]}}';\nwindow.klaytn.request({ method: \"eth_signTypedData_v4\", params: [\"0xbc7d1abe33e6ec19ca873a3042a4dcf49149bc7a\", data] })\n```\n\nSee [here](https://docs.metamask.io/wallet/how-to/sign-data/) to learn how the example was built.\n\n",
    "Current Website Url is https://docs.kaia.io/references/transaction-error-codes. # Transaction Error Codes\n\nKaia provides a field `txError` in the transaction receipt to give developers more information about the reason for the failed transaction execution. This field exists only if the transaction execution is failed. To save storage and network bandwidth, `txError` contains an integer value. The below table shows the meaning of the value in `txError`.\n\n| Error Code | Description |\n| :--- | :--- |\n| 0x02 | VM error occurs while running smart contract |\n| 0x03 | max call depth exceeded |\n| 0x04 | contract address collision |\n| 0x05 | contract creation code storage out of gas |\n| 0x06 | evm: max code size exceeded |\n| 0x07 | out of gas |\n| 0x08 | evm: write protection |\n| 0x09 | evm: execution reverted |\n| 0x0a | reached the opcode computation cost limit for tx |\n| 0x0b | account already exists |\n| 0x0c | not a program account \\(e.g., an account having code and storage\\) |\n| 0x0d | Human-readable address is not supported now |\n| 0x0e | fee ratio is out of range \\[1, 99\\] |\n| 0x0f | AccountKeyFail is not updatable |\n| 0x10 | different account key type |\n| 0x11 | AccountKeyNil cannot be initialized to an account |\n| 0x12 | public key is not on curve |\n| 0x13 | key weight is zero |\n| 0x14 | key is not serializable |\n| 0x15 | duplicated key |\n| 0x16 | weighted sum overflow |\n| 0x17 | unsatisfiable threshold. Weighted sum of keys is less than the threshold. |\n| 0x18 | length is zero |\n| 0x19 | length too long |\n| 0x1a | nested composite type |\n| 0x1b | a legacy transaction must be with a legacy account key |\n| 0x1c | deprecated feature |\n| 0x1d | not supported |\n| 0x1e | smart contract code format is invalid |\n\n"
 
  ]
}
