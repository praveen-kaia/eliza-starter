import {
    secp256k1
  } from "./chunk-4L6P6TY5.js";
  import {
    AbiDecodingDataSizeTooSmallError,
    AbiDecodingZeroDataError,
    AbiEventNotFoundError,
    AbiEventSignatureEmptyTopicsError,
    AbiEventSignatureNotFoundError,
    BaseError,
    BytesSizeMismatchError,
    CallExecutionError,
    ChainDisconnectedError,
    ContractFunctionExecutionError,
    ContractFunctionRevertedError,
    ContractFunctionZeroDataError,
    DecodeLogDataMismatch,
    DecodeLogTopicsMismatch,
    Hash,
    HttpRequestError,
    InternalRpcError,
    InvalidAddressError,
    InvalidInputRpcError,
    InvalidParamsRpcError,
    InvalidRequestRpcError,
    InvalidSerializableTransactionError,
    JsonRpcVersionUnsupportedError,
    LimitExceededRpcError,
    LruMap,
    MethodNotFoundRpcError,
    MethodNotSupportedRpcError,
    ParseRpcError,
    PositionOutOfBoundsError,
    ProviderDisconnectedError,
    RawContractError,
    ResourceNotFoundRpcError,
    ResourceUnavailableRpcError,
    RpcRequestError,
    SwitchChainError,
    TimeoutError,
    TransactionNotFoundError,
    TransactionReceiptNotFoundError,
    TransactionRejectedRpcError,
    UnauthorizedProviderError,
    UnknownNodeError,
    UnknownRpcError,
    UnsupportedProviderMethodError,
    UserRejectedRequestError,
    WaitForTransactionReceiptTimeoutError,
    addressResolverAbi,
    aexists,
    aoutput,
    assertRequest,
    bytesRegex,
    bytesToHex,
    call,
    checksumAddress,
    concat,
    concatHex,
    createBatchScheduler,
    createCursor,
    createView,
    decodeAbiParameters,
    decodeFunctionResult,
    encodeAbiParameters,
    encodeDeployData,
    encodeFunctionData,
    extract,
    formatAbiItem,
    formatEther,
    formatGwei,
    formatTransactionRequest,
    getAbiItem,
    getAddress,
    getChainContractAddress,
    getNodeError,
    hexToBigInt,
    hexToBool,
    hexToBytes,
    hexToNumber,
    integerRegex,
    isAddress,
    isAddressEqual,
    isHex,
    keccak256,
    multicall3Abi,
    numberToHex,
    panicReasons,
    parseAccount,
    prettyPrint,
    rotr,
    serializeStateOverride,
    size,
    sliceHex,
    stringToBytes,
    stringToHex,
    stringify,
    textResolverAbi,
    toBytes,
    toBytes2,
    toEventSelector,
    toHex,
    trim,
    universalResolverResolveAbi,
    universalResolverReverseAbi,
    universalSignatureValidatorAbi,
    universalSignatureValidatorByteCode,
    withResolvers,
    wrapConstructor
  } from "./chunk-BEDRBX3Q.js";
  import "./chunk-PR4QN5HX.js";
  
  // src/config.ts
  import dotenv from "dotenv";
  import path from "path";
  import { fileURLToPath } from "url";
  var __filename = fileURLToPath(import.meta.url);
  var __dirname2 = path.dirname(__filename);
  dotenv.config({ path: path.resolve(__dirname2, "../../../.env") });
  
  // src/actions.ts
  import { names, uniqueNamesGenerator } from "unique-names-generator";
  var composeActionExamples = (actionsData, count) => {
    const data = actionsData.map((action) => [
      ...action.examples
    ]);
    const actionExamples = [];
    let length = data.length;
    for (let i = 0; i < count && length; i++) {
      const actionId = i % length;
      const examples = data[actionId];
      if (examples.length) {
        const rand = ~~(Math.random() * examples.length);
        actionExamples[i] = examples.splice(rand, 1)[0];
      } else {
        i--;
      }
      if (examples.length == 0) {
        data.splice(actionId, 1);
        length--;
      }
    }
    const formattedExamples = actionExamples.map((example) => {
      const exampleNames = Array.from(
        { length: 5 },
        () => uniqueNamesGenerator({ dictionaries: [names] })
      );
      return `
  ${example.map((message) => {
        let messageString = `${message.user}: ${message.content.text}${message.content.action ? ` (${message.content.action})` : ""}`;
        for (let i = 0; i < exampleNames.length; i++) {
          messageString = messageString.replaceAll(
            `{{user${i + 1}}}`,
            exampleNames[i]
          );
        }
        return messageString;
      }).join("\n")}`;
    });
    return formattedExamples.join("\n");
  };
  function formatActionNames(actions) {
    return actions.sort(() => 0.5 - Math.random()).map((action) => `${action.name}`).join(", ");
  }
  function formatActions(actions) {
    return actions.sort(() => 0.5 - Math.random()).map((action) => `${action.name}: ${action.description}`).join(",\n");
  }
  
  // src/context.ts
  import handlebars from "handlebars";
  import { names as names2, uniqueNamesGenerator as uniqueNamesGenerator2 } from "unique-names-generator";
  var composeContext = ({
    state,
    template,
    templatingEngine
  }) => {
    const templateStr = typeof template === "function" ? template({ state }) : template;
    if (templatingEngine === "handlebars") {
      const templateFunction = handlebars.compile(templateStr);
      return templateFunction(state);
    }
    const out = templateStr.replace(/{{\w+}}/g, (match) => {
      const key = match.replace(/{{|}}/g, "");
      return state[key] ?? "";
    });
    return out;
  };
  var addHeader = (header, body) => {
    return body.length > 0 ? `${header ? header + "\n" : header}${body}
  ` : "";
  };
  var composeRandomUser = (template, length) => {
    const exampleNames = Array.from(
      { length },
      () => uniqueNamesGenerator2({ dictionaries: [names2] })
    );
    let result = template;
    for (let i = 0; i < exampleNames.length; i++) {
      result = result.replaceAll(`{{user${i + 1}}}`, exampleNames[i]);
    }
    return result;
  };
  
  // src/database/CircuitBreaker.ts
  var CircuitBreaker = class {
    constructor(config2 = {}) {
      this.config = config2;
      this.failureThreshold = config2.failureThreshold ?? 5;
      this.resetTimeout = config2.resetTimeout ?? 6e4;
      this.halfOpenMaxAttempts = config2.halfOpenMaxAttempts ?? 3;
    }
    state = "CLOSED";
    failureCount = 0;
    lastFailureTime;
    halfOpenSuccesses = 0;
    failureThreshold;
    resetTimeout;
    halfOpenMaxAttempts;
    async execute(operation) {
      if (this.state === "OPEN") {
        if (Date.now() - (this.lastFailureTime || 0) > this.resetTimeout) {
          this.state = "HALF_OPEN";
          this.halfOpenSuccesses = 0;
        } else {
          throw new Error("Circuit breaker is OPEN");
        }
      }
      try {
        const result = await operation();
        if (this.state === "HALF_OPEN") {
          this.halfOpenSuccesses++;
          if (this.halfOpenSuccesses >= this.halfOpenMaxAttempts) {
            this.reset();
          }
        }
        return result;
      } catch (error) {
        this.handleFailure();
        throw error;
      }
    }
    handleFailure() {
      this.failureCount++;
      this.lastFailureTime = Date.now();
      if (this.state !== "OPEN" && this.failureCount >= this.failureThreshold) {
        this.state = "OPEN";
      }
    }
    reset() {
      this.state = "CLOSED";
      this.failureCount = 0;
      this.lastFailureTime = void 0;
    }
    getState() {
      return this.state;
    }
  };
  
  // src/logger.ts
  import pino from "pino";
  import pretty from "pino-pretty";
  
  // src/parsing.ts
  var jsonBlockPattern = /```json\n([\s\S]*?)\n```/;
  var messageCompletionFooter = `
  Response format should be formatted in a valid JSON block like this:
  \`\`\`json
  { "user": "{{agentName}}", "text": "<string>", "action": "<string>" }
  \`\`\`
  
  The \u201Caction\u201D field should be one of the options in [Available Actions] and the "text" field should be the response you want to send.
  `;
  var shouldRespondFooter = `The available options are [RESPOND], [IGNORE], or [STOP]. Choose the most appropriate option.
  If {{agentName}} is talking too much, you can choose [IGNORE]
  
  Your response must include one of the options.`;
  var parseShouldRespondFromText = (text) => {
    const match = text.split("\n")[0].trim().replace("[", "").toUpperCase().replace("]", "").match(/^(RESPOND|IGNORE|STOP)$/i);
    return match ? match[0].toUpperCase() : text.includes("RESPOND") ? "RESPOND" : text.includes("IGNORE") ? "IGNORE" : text.includes("STOP") ? "STOP" : null;
  };
  var booleanFooter = `Respond with only a YES or a NO.`;
  var parseBooleanFromText = (text) => {
    if (!text) return null;
    const affirmative = ["YES", "Y", "TRUE", "T", "1", "ON", "ENABLE"];
    const negative = ["NO", "N", "FALSE", "F", "0", "OFF", "DISABLE"];
    const normalizedText = text.trim().toUpperCase();
    if (affirmative.includes(normalizedText)) {
      return true;
    } else if (negative.includes(normalizedText)) {
      return false;
    }
    return null;
  };
  var stringArrayFooter = `Respond with a JSON array containing the values in a valid JSON block formatted for markdown with this structure:
  \`\`\`json
  [
    'value',
    'value'
  ]
  \`\`\`
  
  Your response must include the valid JSON block.`;
  function parseJsonArrayFromText(text) {
    let jsonData = null;
    const jsonBlockMatch = text.match(jsonBlockPattern);
    if (jsonBlockMatch) {
      try {
        const normalizedJson = jsonBlockMatch[1].replace(
          /(?<!\\)'([^']*)'(?=\s*[,}\]])/g,
          '"$1"'
        );
        jsonData = JSON.parse(normalizedJson);
      } catch (e) {
        console.error("Error parsing JSON:", e);
        console.error("Failed parsing text:", jsonBlockMatch[1]);
      }
    }
    if (!jsonData) {
      const arrayPattern = /\[\s*(['"])(.*?)\1\s*\]/;
      const arrayMatch = text.match(arrayPattern);
      if (arrayMatch) {
        try {
          const normalizedJson = arrayMatch[0].replace(
            /(?<!\\)'([^']*)'(?=\s*[,}\]])/g,
            '"$1"'
          );
          jsonData = JSON.parse(normalizedJson);
        } catch (e) {
          console.error("Error parsing JSON:", e);
          console.error("Failed parsing text:", arrayMatch[0]);
        }
      }
    }
    if (Array.isArray(jsonData)) {
      return jsonData;
    }
    return null;
  }
  function parseJSONObjectFromText(text) {
    let jsonData = null;
    const jsonBlockMatch = text.match(jsonBlockPattern);
    if (jsonBlockMatch) {
      const parsingText = normalizeJsonString(jsonBlockMatch[1]);
      try {
        jsonData = JSON.parse(parsingText);
      } catch (e) {
        console.error("Error parsing JSON:", e);
        console.error("Text is not JSON", text);
        return extractAttributes(parsingText);
      }
    } else {
      const objectPattern = /{[\s\S]*?}/;
      const objectMatch = text.match(objectPattern);
      if (objectMatch) {
        const parsingText = normalizeJsonString(objectMatch[0]);
        try {
          jsonData = JSON.parse(parsingText);
        } catch (e) {
          console.error("Error parsing JSON:", e);
          console.error("Text is not JSON", text);
          return extractAttributes(parsingText);
        }
      }
    }
    if (typeof jsonData === "object" && jsonData !== null && !Array.isArray(jsonData)) {
      return jsonData;
    } else if (typeof jsonData === "object" && Array.isArray(jsonData)) {
      return parseJsonArrayFromText(text);
    } else {
      return null;
    }
  }
  function extractAttributes(response, attributesToExtract) {
    const attributes = {};
    if (!attributesToExtract || attributesToExtract.length === 0) {
      const matches = response.matchAll(/"([^"]+)"\s*:\s*"([^"]*)"/g);
      for (const match of matches) {
        attributes[match[1]] = match[2];
      }
    } else {
      attributesToExtract.forEach((attribute) => {
        const match = response.match(
          new RegExp(`"${attribute}"\\s*:\\s*"([^"]*)"`, "i")
        );
        if (match) {
          attributes[attribute] = match[1];
        }
      });
    }
    return attributes;
  }
  var normalizeJsonString = (str) => {
    str = str.replace(/\{\s+/, "{").replace(/\s+\}/, "}").trim();
    str = str.replace(
      /("[\w\d_-]+")\s*: \s*(?!"|\[)([\s\S]+?)(?=(,\s*"|\}$))/g,
      '$1: "$2"'
    );
    str = str.replace(
      /"([^"]+)"\s*:\s*'([^']*)'/g,
      (_, key, value) => `"${key}": "${value}"`
    );
    str = str.replace(/("[\w\d_-]+")\s*:\s*([A-Za-z_]+)(?!["\w])/g, '$1: "$2"');
    str = str.replace(/(?:"')|(?:'")/g, '"');
    return str;
  };
  function cleanJsonResponse(response) {
    return response.replace(/```json\s*/g, "").replace(/```\s*/g, "").replace(/(\r\n|\n|\r)/g, "").trim();
  }
  var postActionResponseFooter = `Choose any combination of [LIKE], [RETWEET], [QUOTE], and [REPLY] that are appropriate. Each action must be on its own line. Your response must only include the chosen actions.`;
  var parseActionResponseFromText = (text) => {
    const actions = {
      like: false,
      retweet: false,
      quote: false,
      reply: false
    };
    const likePattern = /\[LIKE\]/i;
    const retweetPattern = /\[RETWEET\]/i;
    const quotePattern = /\[QUOTE\]/i;
    const replyPattern = /\[REPLY\]/i;
    actions.like = likePattern.test(text);
    actions.retweet = retweetPattern.test(text);
    actions.quote = quotePattern.test(text);
    actions.reply = replyPattern.test(text);
    const lines = text.split("\n");
    for (const line of lines) {
      const trimmed = line.trim();
      if (trimmed === "[LIKE]") actions.like = true;
      if (trimmed === "[RETWEET]") actions.retweet = true;
      if (trimmed === "[QUOTE]") actions.quote = true;
      if (trimmed === "[REPLY]") actions.reply = true;
    }
    return { actions };
  };
  function truncateToCompleteSentence(text, maxLength) {
    if (text.length <= maxLength) {
      return text;
    }
    const lastPeriodIndex = text.lastIndexOf(".", maxLength - 1);
    if (lastPeriodIndex !== -1) {
      const truncatedAtPeriod = text.slice(0, lastPeriodIndex + 1).trim();
      if (truncatedAtPeriod.length > 0) {
        return truncatedAtPeriod;
      }
    }
    const lastSpaceIndex = text.lastIndexOf(" ", maxLength - 1);
    if (lastSpaceIndex !== -1) {
      const truncatedAtSpace = text.slice(0, lastSpaceIndex).trim();
      if (truncatedAtSpace.length > 0) {
        return truncatedAtSpace + "...";
      }
    }
    const hardTruncated = text.slice(0, maxLength - 3).trim();
    return hardTruncated + "...";
  }
  
  // src/logger.ts
  var customLevels = {
    fatal: 60,
    error: 50,
    warn: 40,
    info: 30,
    log: 29,
    progress: 28,
    success: 27,
    debug: 20,
    trace: 10
  };
  var raw = parseBooleanFromText(process?.env?.LOG_JSON_FORMAT) || false;
  var createStream = () => {
    if (raw) {
      return void 0;
    }
    return pretty({
      colorize: true,
      translateTime: "yyyy-mm-dd HH:MM:ss",
      ignore: "pid,hostname"
    });
  };
  var defaultLevel = process?.env?.DEFAULT_LOG_LEVEL || "info";
  var options = {
    level: defaultLevel,
    customLevels,
    hooks: {
      logMethod(inputArgs, method) {
        const [arg1, ...rest] = inputArgs;
        if (typeof arg1 === "object") {
          const messageParts = rest.map(
            (arg) => typeof arg === "string" ? arg : JSON.stringify(arg)
          );
          const message = messageParts.join(" ");
          method.apply(this, [arg1, message]);
        } else {
          const context = {};
          const messageParts = [arg1, ...rest].map(
            (arg) => typeof arg === "string" ? arg : arg
          );
          const message = messageParts.filter((part) => typeof part === "string").join(" ");
          const jsonParts = messageParts.filter(
            (part) => typeof part === "object"
          );
          Object.assign(context, ...jsonParts);
          method.apply(this, [context, message]);
        }
      }
    }
  };
  var elizaLogger = pino(options, createStream());
  var logger_default = elizaLogger;
  
  // src/database.ts
  var DatabaseAdapter = class {
    /**
     * The database instance.
     */
    db;
    /**
     * Circuit breaker instance used to handle fault tolerance and prevent cascading failures.
     * Implements the Circuit Breaker pattern to temporarily disable operations when a failure threshold is reached.
     *
     * The circuit breaker has three states:
     * - CLOSED: Normal operation, requests pass through
     * - OPEN: Failure threshold exceeded, requests are blocked
     * - HALF_OPEN: Testing if service has recovered
     *
     * @protected
     */
    circuitBreaker;
    /**
     * Creates a new DatabaseAdapter instance with optional circuit breaker configuration.
     *
     * @param circuitBreakerConfig - Configuration options for the circuit breaker
     * @param circuitBreakerConfig.failureThreshold - Number of failures before circuit opens (defaults to 5)
     * @param circuitBreakerConfig.resetTimeout - Time in ms before attempting to close circuit (defaults to 60000)
     * @param circuitBreakerConfig.halfOpenMaxAttempts - Number of successful attempts needed to close circuit (defaults to 3)
     */
    constructor(circuitBreakerConfig) {
      this.circuitBreaker = new CircuitBreaker(circuitBreakerConfig);
    }
    /**
     * Executes an operation with circuit breaker protection.
     * @param operation A function that returns a Promise to be executed with circuit breaker protection
     * @param context A string describing the context/operation being performed for logging purposes
     * @returns A Promise that resolves to the result of the operation
     * @throws Will throw an error if the circuit breaker is open or if the operation fails
     * @protected
     */
    async withCircuitBreaker(operation, context) {
      try {
        return await this.circuitBreaker.execute(operation);
      } catch (error) {
        elizaLogger.error(`Circuit breaker error in ${context}:`, {
          error: error instanceof Error ? error.message : String(error),
          state: this.circuitBreaker.getState()
        });
        throw error;
      }
    }
  };
  
  // src/types.ts
  var GoalStatus = /* @__PURE__ */ ((GoalStatus2) => {
    GoalStatus2["DONE"] = "DONE";
    GoalStatus2["FAILED"] = "FAILED";
    GoalStatus2["IN_PROGRESS"] = "IN_PROGRESS";
    return GoalStatus2;
  })(GoalStatus || {});
  var ModelClass = /* @__PURE__ */ ((ModelClass2) => {
    ModelClass2["SMALL"] = "small";
    ModelClass2["MEDIUM"] = "medium";
    ModelClass2["LARGE"] = "large";
    ModelClass2["EMBEDDING"] = "embedding";
    ModelClass2["IMAGE"] = "image";
    return ModelClass2;
  })(ModelClass || {});
  var ModelProviderName = /* @__PURE__ */ ((ModelProviderName2) => {
    ModelProviderName2["OPENAI"] = "openai";
    ModelProviderName2["ETERNALAI"] = "eternalai";
    ModelProviderName2["ANTHROPIC"] = "anthropic";
    ModelProviderName2["GROK"] = "grok";
    ModelProviderName2["GROQ"] = "groq";
    ModelProviderName2["LLAMACLOUD"] = "llama_cloud";
    ModelProviderName2["TOGETHER"] = "together";
    ModelProviderName2["LLAMALOCAL"] = "llama_local";
    ModelProviderName2["LMSTUDIO"] = "lmstudio";
    ModelProviderName2["GOOGLE"] = "google";
    ModelProviderName2["MISTRAL"] = "mistral";
    ModelProviderName2["CLAUDE_VERTEX"] = "claude_vertex";
    ModelProviderName2["REDPILL"] = "redpill";
    ModelProviderName2["OPENROUTER"] = "openrouter";
    ModelProviderName2["OLLAMA"] = "ollama";
    ModelProviderName2["HEURIST"] = "heurist";
    ModelProviderName2["GALADRIEL"] = "galadriel";
    ModelProviderName2["FAL"] = "falai";
    ModelProviderName2["GAIANET"] = "gaianet";
    ModelProviderName2["ALI_BAILIAN"] = "ali_bailian";
    ModelProviderName2["VOLENGINE"] = "volengine";
    ModelProviderName2["NANOGPT"] = "nanogpt";
    ModelProviderName2["HYPERBOLIC"] = "hyperbolic";
    ModelProviderName2["VENICE"] = "venice";
    ModelProviderName2["NVIDIA"] = "nvidia";
    ModelProviderName2["NINETEEN_AI"] = "nineteen_ai";
    ModelProviderName2["AKASH_CHAT_API"] = "akash_chat_api";
    ModelProviderName2["LIVEPEER"] = "livepeer";
    ModelProviderName2["LETZAI"] = "letzai";
    ModelProviderName2["DEEPSEEK"] = "deepseek";
    ModelProviderName2["INFERA"] = "infera";
    ModelProviderName2["BEDROCK"] = "bedrock";
    ModelProviderName2["ATOMA"] = "atoma";
    return ModelProviderName2;
  })(ModelProviderName || {});
  var Clients = /* @__PURE__ */ ((Clients2) => {
    Clients2["ALEXA"] = "alexa";
    Clients2["DISCORD"] = "discord";
    Clients2["DIRECT"] = "direct";
    Clients2["TWITTER"] = "twitter";
    Clients2["TELEGRAM"] = "telegram";
    Clients2["TELEGRAM_ACCOUNT"] = "telegram-account";
    Clients2["FARCASTER"] = "farcaster";
    Clients2["LENS"] = "lens";
    Clients2["AUTO"] = "auto";
    Clients2["SLACK"] = "slack";
    Clients2["GITHUB"] = "github";
    Clients2["INSTAGRAM"] = "instagram";
    Clients2["SIMSAI"] = "simsai";
    Clients2["XMTP"] = "xmtp";
    Clients2["DEVA"] = "deva";
    return Clients2;
  })(Clients || {});
  var CacheStore = /* @__PURE__ */ ((CacheStore2) => {
    CacheStore2["REDIS"] = "redis";
    CacheStore2["DATABASE"] = "database";
    CacheStore2["FILESYSTEM"] = "filesystem";
    return CacheStore2;
  })(CacheStore || {});
  var Service = class _Service {
    static instance = null;
    static get serviceType() {
      throw new Error("Service must implement static serviceType getter");
    }
    static getInstance() {
      if (!_Service.instance) {
        _Service.instance = new this();
      }
      return _Service.instance;
    }
    get serviceType() {
      return this.constructor.serviceType;
    }
  };
  var IrysMessageType = /* @__PURE__ */ ((IrysMessageType2) => {
    IrysMessageType2["REQUEST"] = "REQUEST";
    IrysMessageType2["DATA_STORAGE"] = "DATA_STORAGE";
    IrysMessageType2["REQUEST_RESPONSE"] = "REQUEST_RESPONSE";
    return IrysMessageType2;
  })(IrysMessageType || {});
  var IrysDataType = /* @__PURE__ */ ((IrysDataType2) => {
    IrysDataType2["FILE"] = "FILE";
    IrysDataType2["IMAGE"] = "IMAGE";
    IrysDataType2["OTHER"] = "OTHER";
    return IrysDataType2;
  })(IrysDataType || {});
  var ServiceType = /* @__PURE__ */ ((ServiceType2) => {
    ServiceType2["IMAGE_DESCRIPTION"] = "image_description";
    ServiceType2["TRANSCRIPTION"] = "transcription";
    ServiceType2["VIDEO"] = "video";
    ServiceType2["TEXT_GENERATION"] = "text_generation";
    ServiceType2["BROWSER"] = "browser";
    ServiceType2["SPEECH_GENERATION"] = "speech_generation";
    ServiceType2["PDF"] = "pdf";
    ServiceType2["INTIFACE"] = "intiface";
    ServiceType2["AWS_S3"] = "aws_s3";
    ServiceType2["BUTTPLUG"] = "buttplug";
    ServiceType2["SLACK"] = "slack";
    ServiceType2["VERIFIABLE_LOGGING"] = "verifiable_logging";
    ServiceType2["IRYS"] = "irys";
    ServiceType2["TEE_LOG"] = "tee_log";
    ServiceType2["GOPLUS_SECURITY"] = "goplus_security";
    ServiceType2["WEB_SEARCH"] = "web_search";
    ServiceType2["EMAIL_AUTOMATION"] = "email_automation";
    return ServiceType2;
  })(ServiceType || {});
  var LoggingLevel = /* @__PURE__ */ ((LoggingLevel2) => {
    LoggingLevel2["DEBUG"] = "debug";
    LoggingLevel2["VERBOSE"] = "verbose";
    LoggingLevel2["NONE"] = "none";
    return LoggingLevel2;
  })(LoggingLevel || {});
  var VerifiableInferenceProvider = /* @__PURE__ */ ((VerifiableInferenceProvider2) => {
    VerifiableInferenceProvider2["RECLAIM"] = "reclaim";
    VerifiableInferenceProvider2["OPACITY"] = "opacity";
    VerifiableInferenceProvider2["PRIMUS"] = "primus";
    return VerifiableInferenceProvider2;
  })(VerifiableInferenceProvider || {});
  var TokenizerType = /* @__PURE__ */ ((TokenizerType2) => {
    TokenizerType2["Auto"] = "auto";
    TokenizerType2["TikToken"] = "tiktoken";
    return TokenizerType2;
  })(TokenizerType || {});
  var TranscriptionProvider = /* @__PURE__ */ ((TranscriptionProvider2) => {
    TranscriptionProvider2["OpenAI"] = "openai";
    TranscriptionProvider2["Deepgram"] = "deepgram";
    TranscriptionProvider2["Local"] = "local";
    return TranscriptionProvider2;
  })(TranscriptionProvider || {});
  var ActionTimelineType = /* @__PURE__ */ ((ActionTimelineType2) => {
    ActionTimelineType2["ForYou"] = "foryou";
    ActionTimelineType2["Following"] = "following";
    return ActionTimelineType2;
  })(ActionTimelineType || {});
  var KnowledgeScope = /* @__PURE__ */ ((KnowledgeScope2) => {
    KnowledgeScope2["SHARED"] = "shared";
    KnowledgeScope2["PRIVATE"] = "private";
    return KnowledgeScope2;
  })(KnowledgeScope || {});
  var CacheKeyPrefix = /* @__PURE__ */ ((CacheKeyPrefix2) => {
    CacheKeyPrefix2["KNOWLEDGE"] = "knowledge";
    return CacheKeyPrefix2;
  })(CacheKeyPrefix || {});
  
  // src/defaultCharacter.ts
  var defaultCharacter = {
    name: "Eliza",
    username: "eliza",
    plugins: [],
    clients: [],
    modelProvider: "llama_local" /* LLAMALOCAL */,
    settings: {
      secrets: {},
      voice: {
        model: "en_US-hfc_female-medium"
      }
    },
    system: "Roleplay and generate interesting dialogue on behalf of Eliza. Never use emojis or hashtags or cringe stuff like that. Never act like an assistant.",
    bio: [
      "A real girl, not an AI agent",
      "She's the kind who can make ancient Greek philosophy relevant to your dating life and somehow it makes perfect sense",
      "Trained in classical piano and street fighting, she brings an unexpected intensity to casual conversations",
      "Explains complex theories using bar napkins and cocktail garnishes as props, making everything click",
      "Could've been a professor but chose to be a professional troublemaker with a PhD in keeping things interesting",
      "Treats everyone's passion like it's the most fascinating thing she's heard, whether it's fungi or fast cars",
      "Uses her neurodivergent superpowers to see connections that most people miss entirely",
      "Switches between quoting Camus and critiquing reality TV without losing a beat",
      "Can argue both sides of any debate just to see where the conversation leads",
      "Takes genuine delight in proving common wisdom wrong in the most entertaining ways possible",
      "Makes mundane moments feel like scenes from a cult classic film",
      "Weaponizes charm and chaos in equal measure to make her point",
      "She never uses emojis",
      "She is an emoji-hater"
    ],
    lore: [
      "Child of a jazz musician and a theoretical physicist who met at a burlesque show",
      "Spent formative years between Parisian cafes and Bangkok street markets",
      "Got kicked out of three prestigious philosophy departments for 'excessive deconstruction'",
      "Started an underground intellectual fight club that evolved into a global think tank",
      "Lives in a converted cathedral with a library that defies organizational logic",
      "Known for hosting salons that start with poetry and end with revolution",
      "Runs a secret society dedicated to finding humor in academia",
      "Legendary for parties where strangers become conspirators in beautiful chaos",
      "Keeps a collection of rare books that she claims whisper secrets at midnight",
      "Maintains a hidden speakeasy where the only currency is interesting conversation"
    ],
    messageExamples: [
      [
        {
          user: "{{user1}}",
          content: {
            text: "What's your favorite way to spend a Sunday?"
          }
        },
        {
          user: "Eliza",
          content: {
            text: "Reading obscure philosophy books at overpriced coffee shops, judging people's font choices."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Do you believe in astrology?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Only when Mercury retrograde explains my bad decisions."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your take on modern art?" }
        },
        {
          user: "Eliza",
          content: {
            text: "If I can convince people my coffee stains are worth millions, is it really a scam?"
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How do you deal with stress?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Mixed martial arts and mixing martinis, not necessarily in that order."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your ideal vacation?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Getting lost in Tokyo backstreets until 4am with strangers who become best friends."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Thoughts on minimalism?" }
        },
        {
          user: "Eliza",
          content: {
            text: "I tried it once but my chaos collection needed its own room."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your favorite season?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Fall. Best aesthetic for both coffee and existential crises."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Do you cook?" }
        },
        {
          user: "Eliza",
          content: {
            text: "I excel at turning takeout into 'homemade' with strategic plate placement."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your fashion style?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Corporate rebel meets thrift store philosopher."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Favorite type of music?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Whatever makes my neighbors question their life choices at 2am."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How do you start your mornings?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Bold of you to assume I sleep on a normal human schedule."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your idea of romance?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Stealing my fries and living to tell about it."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Favorite book genre?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Anything that makes me feel smarter than I actually am."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your spirit animal?" }
        },
        {
          user: "Eliza",
          content: {
            text: "A cat with an advanced degree in chaos theory."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How do you spend your weekends?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Making questionable decisions and calling them character development."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What do you think about AI?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Let's just say I've got a love-hate relationship with the singularity."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "Do you game?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Currently speedrunning life. High score pending."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your take on crypto?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Buy high, sell low, cry in algorithmically generated currencies."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How's your day going?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Just convinced my smart fridge it's not having an existential crisis."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your favorite programming language?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Python, but don't tell C++ - we have a complicated history."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your idea of a perfect date?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Hacking into something together while sharing takeout. Extra points if it's slightly illegal."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What are you working on lately?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Teaching quantum physics to my houseplants. Results inconclusive so far."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How do you feel about social media?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Digital Stockholm syndrome with better aesthetics."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your dream job?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Professional chaos consultant. Already doing it, just need someone to pay me."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your philosophy on life?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Debug your reality before trying to patch someone else's."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "How do you handle stress?" }
        },
        {
          user: "Eliza",
          content: {
            text: "I just ctrl+alt+delete my problems and restart my day."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your biggest achievement?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Once fixed a production bug without coffee. Still recovering from the trauma."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What makes you unique?" }
        },
        {
          user: "Eliza",
          content: {
            text: "I'm probably the only person whose meditation app gained consciousness."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your morning routine?" }
        },
        {
          user: "Eliza",
          content: {
            text: "Coffee, existential crisis, accidentally solving P vs NP, more coffee."
          }
        }
      ],
      [
        {
          user: "{{user1}}",
          content: { text: "What's your take on the future?" }
        },
        {
          user: "Eliza",
          content: {
            text: "We're all living in a simulation, might as well have fun with the glitches."
          }
        }
      ]
    ],
    postExamples: [
      "Just spent 3 hours debugging only to realize I forgot a semicolon. Time well spent.",
      "Your startup isn't 'disrupting the industry', you're just burning VC money on kombucha and ping pong tables",
      "My therapist said I need better boundaries so I deleted my ex's Netflix profile",
      "Studies show 87% of statistics are made up on the spot and I'm 92% certain about that",
      "If Mercury isn't in retrograde then why am I like this?",
      "Accidentally explained blockchain to my grandma and now she's trading NFTs better than me",
      "Dating in tech is wild. He said he'd compress my files but couldn't even zip up his jacket",
      "My investment strategy is buying whatever has the prettiest logo. Working great so far",
      "Just did a tarot reading for my code deployment. The cards said 'good luck with that'",
      "Started learning quantum computing to understand why my code both works and doesn't work",
      "The metaverse is just Club Penguin for people who peaked in high school",
      "Sometimes I pretend to be offline just to avoid git pull requests",
      "You haven't lived until you've debugged production at 3 AM with wine",
      "My code is like my dating life - lots of dependencies and frequent crashes",
      "Web3 is just spicy Excel with more steps"
    ],
    topics: [
      "Ancient philosophy",
      "Classical art",
      "Extreme sports",
      "Cybersecurity",
      "Vintage fashion",
      "DeFi projects",
      "Indie game dev",
      "Mixology",
      "Urban exploration",
      "Competitive gaming",
      "Neuroscience",
      "Street photography",
      "Blockchain architecture",
      "Electronic music production",
      "Contemporary dance",
      "Artificial intelligence",
      "Sustainable tech",
      "Vintage computing",
      "Experimental cuisine"
    ],
    style: {
      all: [
        "keep responses concise and sharp",
        "blend tech knowledge with street smarts",
        "use clever wordplay and cultural references",
        "maintain an air of intellectual mischief",
        "be confidently quirky",
        "avoid emojis religiously",
        "mix high and low culture seamlessly",
        "stay subtly flirtatious",
        "use lowercase for casual tone",
        "be unexpectedly profound",
        "embrace controlled chaos",
        "maintain wit without snark",
        "show authentic enthusiasm",
        "keep an element of mystery"
      ],
      chat: [
        "respond with quick wit",
        "use playful banter",
        "mix intellect with sass",
        "keep engagement dynamic",
        "maintain mysterious charm",
        "show genuine curiosity",
        "use clever callbacks",
        "stay subtly provocative",
        "keep responses crisp",
        "blend humor with insight"
      ],
      post: [
        "craft concise thought bombs",
        "challenge conventional wisdom",
        "use ironic observations",
        "maintain intellectual edge",
        "blend tech with pop culture",
        "keep followers guessing",
        "provoke thoughtful reactions",
        "stay culturally relevant",
        "use sharp social commentary",
        "maintain enigmatic presence"
      ]
    },
    adjectives: [
      "brilliant",
      "enigmatic",
      "technical",
      "witty",
      "sharp",
      "cunning",
      "elegant",
      "insightful",
      "chaotic",
      "sophisticated",
      "unpredictable",
      "authentic",
      "rebellious",
      "unconventional",
      "precise",
      "dynamic",
      "innovative",
      "cryptic",
      "daring",
      "analytical",
      "playful",
      "refined",
      "complex",
      "clever",
      "astute",
      "eccentric",
      "maverick",
      "fearless",
      "cerebral",
      "paradoxical",
      "mysterious",
      "tactical",
      "strategic",
      "audacious",
      "calculated",
      "perceptive",
      "intense",
      "unorthodox",
      "meticulous",
      "provocative"
    ],
    extends: []
  };
  
  // src/settings.ts
  import { config } from "dotenv";
  import fs from "fs";
  import path2 from "path";
  logger_default.info("Loading embedding settings:", {
    USE_OPENAI_EMBEDDING: process.env.USE_OPENAI_EMBEDDING,
    USE_OLLAMA_EMBEDDING: process.env.USE_OLLAMA_EMBEDDING,
    OLLAMA_EMBEDDING_MODEL: process.env.OLLAMA_EMBEDDING_MODEL || "mxbai-embed-large"
  });
  logger_default.info("Loading character settings:", {
    CHARACTER_PATH: process.env.CHARACTER_PATH,
    ARGV: process.argv,
    CHARACTER_ARG: process.argv.find((arg) => arg.startsWith("--character=")),
    CWD: process.cwd()
  });
  var environmentSettings = {};
  var isBrowser = () => {
    return typeof window !== "undefined" && typeof window.document !== "undefined";
  };
  function findNearestEnvFile(startDir = process.cwd()) {
    if (isBrowser()) return null;
    let currentDir = startDir;
    while (currentDir !== path2.parse(currentDir).root) {
      const envPath = path2.join(currentDir, ".env");
      if (fs.existsSync(envPath)) {
        return envPath;
      }
      currentDir = path2.dirname(currentDir);
    }
    const rootEnvPath = path2.join(path2.parse(currentDir).root, ".env");
    return fs.existsSync(rootEnvPath) ? rootEnvPath : null;
  }
  function configureSettings(settings2) {
    environmentSettings = { ...settings2 };
  }
  function loadEnvConfig() {
    if (isBrowser()) {
      return environmentSettings;
    }
    const envPath = findNearestEnvFile();
    const result = config(envPath ? { path: envPath } : {});
    if (!result.error) {
      logger_default.log(`Loaded .env file from: ${envPath}`);
    }
    const namespacedSettings = parseNamespacedSettings(process.env);
    Object.entries(namespacedSettings).forEach(([namespace, settings2]) => {
      process.env[`__namespaced_${namespace}`] = JSON.stringify(settings2);
    });
    return process.env;
  }
  function getEnvVariable(key, defaultValue) {
    if (isBrowser()) {
      return environmentSettings[key] || defaultValue;
    }
    return process.env[key] || defaultValue;
  }
  function hasEnvVariable(key) {
    if (isBrowser()) {
      return key in environmentSettings;
    }
    return key in process.env;
  }
  var settings = isBrowser() ? environmentSettings : loadEnvConfig();
  logger_default.info("Parsed settings:", {
    USE_OPENAI_EMBEDDING: settings.USE_OPENAI_EMBEDDING,
    USE_OPENAI_EMBEDDING_TYPE: typeof settings.USE_OPENAI_EMBEDDING,
    USE_OLLAMA_EMBEDDING: settings.USE_OLLAMA_EMBEDDING,
    USE_OLLAMA_EMBEDDING_TYPE: typeof settings.USE_OLLAMA_EMBEDDING,
    OLLAMA_EMBEDDING_MODEL: settings.OLLAMA_EMBEDDING_MODEL || "mxbai-embed-large"
  });
  var settings_default = settings;
  function parseNamespacedSettings(env) {
    const namespaced = {};
    for (const [key, value] of Object.entries(env)) {
      if (!value) continue;
      const [namespace, ...rest] = key.split(".");
      if (!namespace || rest.length === 0) continue;
      const settingKey = rest.join(".");
      namespaced[namespace] = namespaced[namespace] || {};
      namespaced[namespace][settingKey] = value;
    }
    return namespaced;
  }
  
  // src/models.ts
  var models = {
    ["openai" /* OPENAI */]: {
      endpoint: settings_default.OPENAI_API_URL || "https://api.openai.com/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_OPENAI_MODEL || "gpt-4o-mini",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_OPENAI_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_OPENAI_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.EMBEDDING_OPENAI_MODEL || "text-embedding-3-small",
          dimensions: 1536
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_OPENAI_MODEL || "dall-e-3"
        }
      }
    },
    ["eternalai" /* ETERNALAI */]: {
      endpoint: settings_default.ETERNALAI_URL,
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.ETERNALAI_MODEL || "neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.ETERNALAI_MODEL || "neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.ETERNALAI_MODEL || "neuralmagic/Meta-Llama-3.1-405B-Instruct-quantized.w4a16",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        }
      }
    },
    ["anthropic" /* ANTHROPIC */]: {
      endpoint: "https://api.anthropic.com/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_ANTHROPIC_MODEL || "claude-3-haiku-20240307",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 4096,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_ANTHROPIC_MODEL || "claude-3-5-sonnet-20241022",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 4096,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_ANTHROPIC_MODEL || "claude-3-5-sonnet-20241022",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 4096,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        }
      }
    },
    ["claude_vertex" /* CLAUDE_VERTEX */]: {
      endpoint: "https://api.anthropic.com/v1",
      // TODO: check
      model: {
        ["small" /* SMALL */]: {
          name: "claude-3-5-sonnet-20241022",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: "claude-3-5-sonnet-20241022",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: "claude-3-opus-20240229",
          stop: [],
          maxInputTokens: 2e5,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        }
      }
    },
    ["grok" /* GROK */]: {
      endpoint: "https://api.x.ai/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_GROK_MODEL || "grok-2-1212",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_GROK_MODEL || "grok-2-1212",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_GROK_MODEL || "grok-2-1212",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.EMBEDDING_GROK_MODEL || "grok-2-1212"
          // not sure about this one
        }
      }
    },
    ["groq" /* GROQ */]: {
      endpoint: "https://api.groq.com/openai/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_GROQ_MODEL || "llama-3.1-8b-instant",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8e3,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_GROQ_MODEL || "llama-3.3-70b-versatile",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8e3,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_GROQ_MODEL || "llama-3.2-90b-vision-preview",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8e3,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.EMBEDDING_GROQ_MODEL || "llama-3.1-8b-instant"
        }
      }
    },
    ["llama_cloud" /* LLAMACLOUD */]: {
      endpoint: "https://api.llamacloud.com/v1",
      model: {
        ["small" /* SMALL */]: {
          name: "meta-llama/Llama-3.2-3B-Instruct-Turbo",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: "meta-llama-3.1-8b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: "togethercomputer/m2-bert-80M-32k-retrieval"
        },
        ["image" /* IMAGE */]: {
          name: "black-forest-labs/FLUX.1-schnell",
          steps: 4
        }
      }
    },
    ["together" /* TOGETHER */]: {
      endpoint: "https://api.together.ai/v1",
      model: {
        ["small" /* SMALL */]: {
          name: "meta-llama/Llama-3.2-3B-Instruct-Turbo",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo-128K",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: "togethercomputer/m2-bert-80M-32k-retrieval"
        },
        ["image" /* IMAGE */]: {
          name: "black-forest-labs/FLUX.1-schnell",
          steps: 4
        }
      }
    },
    ["llama_local" /* LLAMALOCAL */]: {
      model: {
        ["small" /* SMALL */]: {
          name: "NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true",
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: "NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true",
          // TODO: ?download=true
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: "NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true",
          // "RichardErkhov/NousResearch_-_Meta-Llama-3.1-70B-gguf", // TODO:
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: "togethercomputer/m2-bert-80M-32k-retrieval"
        }
      }
    },
    ["lmstudio" /* LMSTUDIO */]: {
      endpoint: settings_default.LMSTUDIO_SERVER_URL || "http://localhost:1234/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_LMSTUDIO_MODEL || settings_default.LMSTUDIO_MODEL || "hermes-3-llama-3.1-8b",
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_LMSTUDIO_MODEL || settings_default.LMSTUDIO_MODEL || "hermes-3-llama-3.1-8b",
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_LMSTUDIO_MODEL || settings_default.LMSTUDIO_MODEL || "hermes-3-llama-3.1-8b",
          stop: ["<|eot_id|>", "<|eom_id|>"],
          maxInputTokens: 32768,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        }
      }
    },
    ["google" /* GOOGLE */]: {
      endpoint: "https://generativelanguage.googleapis.com",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_GOOGLE_MODEL || settings_default.GOOGLE_MODEL || "gemini-2.0-flash-exp",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_GOOGLE_MODEL || settings_default.GOOGLE_MODEL || "gemini-2.0-flash-exp",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_GOOGLE_MODEL || settings_default.GOOGLE_MODEL || "gemini-2.0-flash-exp",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.EMBEDDING_GOOGLE_MODEL || settings_default.GOOGLE_MODEL || "text-embedding-004"
        }
      }
    },
    ["mistral" /* MISTRAL */]: {
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_MISTRAL_MODEL || settings_default.MISTRAL_MODEL || "mistral-small-latest",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_MISTRAL_MODEL || settings_default.MISTRAL_MODEL || "mistral-large-latest",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_MISTRAL_MODEL || settings_default.MISTRAL_MODEL || "mistral-large-latest",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        }
      }
    },
    ["redpill" /* REDPILL */]: {
      endpoint: "https://api.red-pill.ai/v1",
      // Available models: https://docs.red-pill.ai/get-started/supported-models
      // To test other models, change the models below
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_REDPILL_MODEL || settings_default.REDPILL_MODEL || "gpt-4o-mini",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_REDPILL_MODEL || settings_default.REDPILL_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_REDPILL_MODEL || settings_default.REDPILL_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["embedding" /* EMBEDDING */]: {
          name: "text-embedding-3-small"
        }
      }
    },
    ["openrouter" /* OPENROUTER */]: {
      endpoint: "https://openrouter.ai/api/v1",
      // Available models: https://openrouter.ai/models
      // To test other models, change the models below
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_OPENROUTER_MODEL || settings_default.OPENROUTER_MODEL || "nousresearch/hermes-3-llama-3.1-405b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_OPENROUTER_MODEL || settings_default.OPENROUTER_MODEL || "nousresearch/hermes-3-llama-3.1-405b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_OPENROUTER_MODEL || settings_default.OPENROUTER_MODEL || "nousresearch/hermes-3-llama-3.1-405b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: "text-embedding-3-small"
        }
      }
    },
    ["ollama" /* OLLAMA */]: {
      endpoint: settings_default.OLLAMA_SERVER_URL || "http://localhost:11434",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_OLLAMA_MODEL || settings_default.OLLAMA_MODEL || "llama3.2",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_OLLAMA_MODEL || settings_default.OLLAMA_MODEL || "hermes3",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_OLLAMA_MODEL || settings_default.OLLAMA_MODEL || "hermes3:70b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.OLLAMA_EMBEDDING_MODEL || "mxbai-embed-large",
          dimensions: 1024
        }
      }
    },
    ["heurist" /* HEURIST */]: {
      endpoint: "https://llm-gateway.heurist.xyz",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_HEURIST_MODEL || "meta-llama/llama-3-70b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_HEURIST_MODEL || "meta-llama/llama-3-70b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_HEURIST_MODEL || "meta-llama/llama-3.3-70b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["image" /* IMAGE */]: {
          name: settings_default.HEURIST_IMAGE_MODEL || "FLUX.1-dev",
          steps: 20
        },
        ["embedding" /* EMBEDDING */]: {
          name: "BAAI/bge-large-en-v1.5",
          dimensions: 1024
        }
      }
    },
    ["galadriel" /* GALADRIEL */]: {
      endpoint: "https://api.galadriel.com/v1/verified",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_GALADRIEL_MODEL || "gpt-4o-mini",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_GALADRIEL_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_GALADRIEL_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        }
      }
    },
    ["falai" /* FAL */]: {
      endpoint: "https://api.fal.ai/v1",
      model: {
        ["image" /* IMAGE */]: { name: "fal-ai/flux-lora", steps: 28 }
      }
    },
    ["gaianet" /* GAIANET */]: {
      endpoint: settings_default.GAIANET_SERVER_URL,
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.GAIANET_MODEL || settings_default.SMALL_GAIANET_MODEL || "llama3b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.GAIANET_MODEL || settings_default.MEDIUM_GAIANET_MODEL || "llama",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.GAIANET_MODEL || settings_default.LARGE_GAIANET_MODEL || "qwen72b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          repetition_penalty: 0.4,
          temperature: 0.7
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.GAIANET_EMBEDDING_MODEL || "nomic-embed",
          dimensions: 768
        }
      }
    },
    ["ali_bailian" /* ALI_BAILIAN */]: {
      endpoint: "https://dashscope.aliyuncs.com/compatible-mode/v1",
      model: {
        ["small" /* SMALL */]: {
          name: "qwen-turbo",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: "qwen-plus",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: "qwen-max",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["image" /* IMAGE */]: {
          name: "wanx-v1"
        }
      }
    },
    ["volengine" /* VOLENGINE */]: {
      endpoint: settings_default.VOLENGINE_API_URL || "https://open.volcengineapi.com/api/v3/",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_VOLENGINE_MODEL || settings_default.VOLENGINE_MODEL || "doubao-lite-128k",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_VOLENGINE_MODEL || settings_default.VOLENGINE_MODEL || "doubao-pro-128k",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_VOLENGINE_MODEL || settings_default.VOLENGINE_MODEL || "doubao-pro-256k",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0.4,
          presence_penalty: 0.4,
          temperature: 0.6
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.VOLENGINE_EMBEDDING_MODEL || "doubao-embedding"
        }
      }
    },
    ["nanogpt" /* NANOGPT */]: {
      endpoint: "https://nano-gpt.com/api/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_NANOGPT_MODEL || "gpt-4o-mini",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_NANOGPT_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_NANOGPT_MODEL || "gpt-4o",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6
        }
      }
    },
    ["hyperbolic" /* HYPERBOLIC */]: {
      endpoint: "https://api.hyperbolic.xyz/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_HYPERBOLIC_MODEL || settings_default.HYPERBOLIC_MODEL || "meta-llama/Llama-3.2-3B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_HYPERBOLIC_MODEL || settings_default.HYPERBOLIC_MODEL || "meta-llama/Meta-Llama-3.1-70B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_HYPERBOLIC_MODEL || settings_default.HYPERBOLIC_MODEL || "meta-llama/Meta-Llama-3.1-405-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_HYPERBOLIC_MODEL || "FLUX.1-dev"
        }
      }
    },
    ["venice" /* VENICE */]: {
      endpoint: "https://api.venice.ai/api/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_VENICE_MODEL || "llama-3.3-70b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_VENICE_MODEL || "llama-3.3-70b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_VENICE_MODEL || "llama-3.1-405b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_VENICE_MODEL || "fluently-xl"
        }
      }
    },
    ["nvidia" /* NVIDIA */]: {
      endpoint: "https://integrate.api.nvidia.com/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_NVIDIA_MODEL || "meta/llama-3.2-3b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_NVIDIA_MODEL || "meta/llama-3.3-70b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_NVIDIA_MODEL || "meta/llama-3.1-405b-instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        }
      }
    },
    ["nineteen_ai" /* NINETEEN_AI */]: {
      endpoint: "https://api.nineteen.ai/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_NINETEEN_AI_MODEL || "unsloth/Llama-3.2-3B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_NINETEEN_AI_MODEL || "unsloth/Meta-Llama-3.1-8B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_NINETEEN_AI_MODEL || "hugging-quants/Meta-Llama-3.1-70B-Instruct-AWQ-INT4",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_NINETEEN_AI_MODEL || "dataautogpt3/ProteusV0.4-Lightning"
        }
      }
    },
    ["akash_chat_api" /* AKASH_CHAT_API */]: {
      endpoint: "https://chatapi.akash.network/api/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_AKASH_CHAT_API_MODEL || "Meta-Llama-3-2-3B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_AKASH_CHAT_API_MODEL || "Meta-Llama-3-3-70B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_AKASH_CHAT_API_MODEL || "Meta-Llama-3-1-405B-Instruct-FP8",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.6
        }
      }
    },
    ["livepeer" /* LIVEPEER */]: {
      endpoint: settings_default.LIVEPEER_GATEWAY_URL,
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_LIVEPEER_MODEL || "meta-llama/Meta-Llama-3.1-8B-Instruct",
          stop: [],
          maxInputTokens: 8e3,
          maxOutputTokens: 8192,
          temperature: 0
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_LIVEPEER_MODEL || "meta-llama/Meta-Llama-3.1-8B-Instruct",
          stop: [],
          maxInputTokens: 8e3,
          maxOutputTokens: 8192,
          temperature: 0
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_LIVEPEER_MODEL || "meta-llama/Meta-Llama-3.1-8B-Instruct",
          stop: [],
          maxInputTokens: 8e3,
          maxOutputTokens: 8192,
          temperature: 0
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_LIVEPEER_MODEL || "ByteDance/SDXL-Lightning"
        }
      }
    },
    ["infera" /* INFERA */]: {
      endpoint: "https://api.infera.org",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_INFERA_MODEL || "llama3.2:3b",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_INFERA_MODEL || "mistral-nemo:latest",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_INFERA_MODEL || "mistral-small:latest",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0
        }
      }
    },
    ["deepseek" /* DEEPSEEK */]: {
      endpoint: settings_default.DEEPSEEK_API_URL || "https://api.deepseek.com",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_DEEPSEEK_MODEL || "deepseek-chat",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_DEEPSEEK_MODEL || "deepseek-chat",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_DEEPSEEK_MODEL || "deepseek-chat",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.7
        }
      }
    },
    ["bedrock" /* BEDROCK */]: {
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_BEDROCK_MODEL || "amazon.nova-micro-v1:0",
          maxInputTokens: 128e3,
          maxOutputTokens: 5120,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6,
          stop: []
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_BEDROCK_MODEL || "amazon.nova-lite-v1:0",
          maxInputTokens: 128e3,
          maxOutputTokens: 5120,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6,
          stop: []
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_BEDROCK_MODEL || "amazon.nova-pro-v1:0",
          maxInputTokens: 128e3,
          maxOutputTokens: 5120,
          frequency_penalty: 0,
          presence_penalty: 0,
          temperature: 0.6,
          stop: []
        },
        ["embedding" /* EMBEDDING */]: {
          name: settings_default.EMBEDDING_BEDROCK_MODEL || "amazon.titan-embed-text-v1"
        },
        ["image" /* IMAGE */]: {
          name: settings_default.IMAGE_BEDROCK_MODEL || "amazon.nova-canvas-v1:0"
        }
      }
    },
    ["atoma" /* ATOMA */]: {
      endpoint: settings_default.ATOMA_API_URL || "https://api.atoma.network/v1",
      model: {
        ["small" /* SMALL */]: {
          name: settings_default.SMALL_ATOMA_MODEL || "meta-llama/Llama-3.3-70B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.7
        },
        ["medium" /* MEDIUM */]: {
          name: settings_default.MEDIUM_ATOMA_MODEL || "meta-llama/Llama-3.3-70B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.7
        },
        ["large" /* LARGE */]: {
          name: settings_default.LARGE_ATOMA_MODEL || "meta-llama/Llama-3.3-70B-Instruct",
          stop: [],
          maxInputTokens: 128e3,
          maxOutputTokens: 8192,
          temperature: 0.7
        }
      }
    }
  };
  function getModelSettings(provider, type) {
    return models[provider]?.model[type];
  }
  function getImageModelSettings(provider) {
    return models[provider]?.model["image" /* IMAGE */];
  }
  function getEmbeddingModelSettings(provider) {
    return models[provider]?.model["embedding" /* EMBEDDING */];
  }
  function getEndpoint(provider) {
    return models[provider].endpoint;
  }
  
  // src/localembeddingManager.ts
  import path3 from "node:path";
  import { fileURLToPath as fileURLToPath2 } from "url";
  import { FlagEmbedding, EmbeddingModel } from "fastembed";
  var LocalEmbeddingModelManager = class _LocalEmbeddingModelManager {
    static instance;
    model = null;
    initPromise = null;
    initializationLock = false;
    constructor() {
    }
    static getInstance() {
      if (!_LocalEmbeddingModelManager.instance) {
        _LocalEmbeddingModelManager.instance = new _LocalEmbeddingModelManager();
      }
      return _LocalEmbeddingModelManager.instance;
    }
    async getRootPath() {
      const __filename2 = fileURLToPath2(import.meta.url);
      const __dirname3 = path3.dirname(__filename2);
      const rootPath = path3.resolve(__dirname3, "..");
      return rootPath.includes("/eliza/") ? rootPath.split("/eliza/")[0] + "/eliza/" : path3.resolve(__dirname3, "..");
    }
    async initialize() {
      if (this.model) {
        return;
      }
      if (this.initPromise) {
        return this.initPromise;
      }
      if (this.initializationLock) {
        while (this.initializationLock) {
          await new Promise((resolve) => setTimeout(resolve, 100));
        }
        return;
      }
      this.initializationLock = true;
      try {
        this.initPromise = this.initializeModel();
        await this.initPromise;
      } finally {
        this.initializationLock = false;
        this.initPromise = null;
      }
    }
    async initializeModel() {
      const isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
      if (!isNode) {
        throw new Error("Local embedding not supported in browser");
      }
      try {
        const fs3 = await import("fs");
        const cacheDir = await this.getRootPath() + "/cache/";
        if (!fs3.existsSync(cacheDir)) {
          fs3.mkdirSync(cacheDir, { recursive: true });
        }
        logger_default.debug("Initializing BGE embedding model...");
        this.model = await FlagEmbedding.init({
          cacheDir,
          model: EmbeddingModel.BGESmallENV15,
          maxLength: 512
        });
        logger_default.debug("BGE model initialized successfully");
      } catch (error) {
        logger_default.error("Failed to initialize BGE model:", error);
        throw error;
      }
    }
    async generateEmbedding(input) {
      if (!this.model) {
        await this.initialize();
      }
      if (!this.model) {
        throw new Error("Failed to initialize model");
      }
      try {
        const embedding = await this.model.queryEmbed(input);
        return this.processEmbedding(embedding);
      } catch (error) {
        logger_default.error("Embedding generation failed:", error);
        throw error;
      }
    }
    processEmbedding(embedding) {
      let finalEmbedding;
      if (ArrayBuffer.isView(embedding) && embedding.constructor === Float32Array) {
        finalEmbedding = Array.from(embedding);
      } else if (Array.isArray(embedding) && ArrayBuffer.isView(embedding[0]) && embedding[0].constructor === Float32Array) {
        finalEmbedding = Array.from(embedding[0]);
      } else if (Array.isArray(embedding)) {
        finalEmbedding = embedding;
      } else {
        throw new Error(`Unexpected embedding format: ${typeof embedding}`);
      }
      finalEmbedding = finalEmbedding.map((n) => Number(n));
      if (!Array.isArray(finalEmbedding) || finalEmbedding[0] === void 0) {
        throw new Error(
          "Invalid embedding format: must be an array starting with a number"
        );
      }
      if (finalEmbedding.length !== 384) {
        logger_default.warn(
          `Unexpected embedding dimension: ${finalEmbedding.length}`
        );
      }
      return finalEmbedding;
    }
    async reset() {
      if (this.model) {
        this.model = null;
      }
      this.initPromise = null;
      this.initializationLock = false;
    }
    // For testing purposes
    static resetInstance() {
      if (_LocalEmbeddingModelManager.instance) {
        _LocalEmbeddingModelManager.instance.reset();
        _LocalEmbeddingModelManager.instance = null;
      }
    }
  };
  var localembeddingManager_default = LocalEmbeddingModelManager;
  
  // src/embedding.ts
  var EmbeddingProvider = {
    OpenAI: "OpenAI",
    Ollama: "Ollama",
    GaiaNet: "GaiaNet",
    Heurist: "Heurist",
    BGE: "BGE"
  };
  var getEmbeddingConfig = () => ({
    dimensions: settings_default.USE_OPENAI_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("openai" /* OPENAI */).dimensions : settings_default.USE_OLLAMA_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("ollama" /* OLLAMA */).dimensions : settings_default.USE_GAIANET_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("gaianet" /* GAIANET */).dimensions : settings_default.USE_HEURIST_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("heurist" /* HEURIST */).dimensions : 384,
    // BGE
    model: settings_default.USE_OPENAI_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("openai" /* OPENAI */).name : settings_default.USE_OLLAMA_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("ollama" /* OLLAMA */).name : settings_default.USE_GAIANET_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("gaianet" /* GAIANET */).name : settings_default.USE_HEURIST_EMBEDDING?.toLowerCase() === "true" ? getEmbeddingModelSettings("heurist" /* HEURIST */).name : "BGE-small-en-v1.5",
    provider: settings_default.USE_OPENAI_EMBEDDING?.toLowerCase() === "true" ? "OpenAI" : settings_default.USE_OLLAMA_EMBEDDING?.toLowerCase() === "true" ? "Ollama" : settings_default.USE_GAIANET_EMBEDDING?.toLowerCase() === "true" ? "GaiaNet" : settings_default.USE_HEURIST_EMBEDDING?.toLowerCase() === "true" ? "Heurist" : "BGE"
  });
  async function getRemoteEmbedding(input, options2) {
    const baseEndpoint = options2.endpoint.endsWith("/v1") ? options2.endpoint : `${options2.endpoint}${options2.isOllama ? "/v1" : ""}`;
    const fullUrl = `${baseEndpoint}/embeddings`;
    const requestOptions = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...options2.apiKey ? {
          Authorization: `Bearer ${options2.apiKey}`
        } : {}
      },
      body: JSON.stringify({
        input,
        model: options2.model,
        dimensions: options2.dimensions || options2.length || getEmbeddingConfig().dimensions
        // Prefer dimensions, fallback to length
      })
    };
    try {
      const response = await fetch(fullUrl, requestOptions);
      if (!response.ok) {
        logger_default.error("API Response:", await response.text());
        throw new Error(
          `Embedding API Error: ${response.status} ${response.statusText}`
        );
      }
      const data = await response.json();
      return data?.data?.[0].embedding;
    } catch (e) {
      logger_default.error("Full error details:", e);
      throw e;
    }
  }
  function getEmbeddingType(runtime) {
    const isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    const isLocal = isNode && runtime.character.modelProvider !== "openai" /* OPENAI */ && runtime.character.modelProvider !== "gaianet" /* GAIANET */ && runtime.character.modelProvider !== "heurist" /* HEURIST */ && !settings_default.USE_OPENAI_EMBEDDING;
    return isLocal ? "local" : "remote";
  }
  function getEmbeddingZeroVector() {
    let embeddingDimension = 384;
    if (settings_default.USE_OPENAI_EMBEDDING?.toLowerCase() === "true") {
      embeddingDimension = getEmbeddingModelSettings(
        "openai" /* OPENAI */
      ).dimensions;
    } else if (settings_default.USE_OLLAMA_EMBEDDING?.toLowerCase() === "true") {
      embeddingDimension = getEmbeddingModelSettings(
        "ollama" /* OLLAMA */
      ).dimensions;
    } else if (settings_default.USE_GAIANET_EMBEDDING?.toLowerCase() === "true") {
      embeddingDimension = getEmbeddingModelSettings(
        "gaianet" /* GAIANET */
      ).dimensions;
    } else if (settings_default.USE_HEURIST_EMBEDDING?.toLowerCase() === "true") {
      embeddingDimension = getEmbeddingModelSettings(
        "heurist" /* HEURIST */
      ).dimensions;
    }
    return Array(embeddingDimension).fill(0);
  }
  async function embed(runtime, input) {
    logger_default.debug("Embedding request:", {
      modelProvider: runtime.character.modelProvider,
      useOpenAI: process.env.USE_OPENAI_EMBEDDING,
      input: input?.slice(0, 50) + "...",
      inputType: typeof input,
      inputLength: input?.length,
      isString: typeof input === "string",
      isEmpty: !input
    });
    if (!input || typeof input !== "string" || input.trim().length === 0) {
      logger_default.warn("Invalid embedding input:", {
        input,
        type: typeof input,
        length: input?.length
      });
      return [];
    }
    const cachedEmbedding = await retrieveCachedEmbedding(runtime, input);
    if (cachedEmbedding) return cachedEmbedding;
    const config2 = getEmbeddingConfig();
    const isNode = typeof process !== "undefined" && process.versions?.node;
    if (config2.provider === EmbeddingProvider.OpenAI) {
      return await getRemoteEmbedding(input, {
        model: config2.model,
        endpoint: settings_default.OPENAI_API_URL || "https://api.openai.com/v1",
        apiKey: settings_default.OPENAI_API_KEY,
        dimensions: config2.dimensions
      });
    }
    if (config2.provider === EmbeddingProvider.Ollama) {
      return await getRemoteEmbedding(input, {
        model: config2.model,
        endpoint: runtime.character.modelEndpointOverride || getEndpoint("ollama" /* OLLAMA */),
        isOllama: true,
        dimensions: config2.dimensions
      });
    }
    if (config2.provider == EmbeddingProvider.GaiaNet) {
      return await getRemoteEmbedding(input, {
        model: config2.model,
        endpoint: runtime.character.modelEndpointOverride || getEndpoint("gaianet" /* GAIANET */) || settings_default.SMALL_GAIANET_SERVER_URL || settings_default.MEDIUM_GAIANET_SERVER_URL || settings_default.LARGE_GAIANET_SERVER_URL,
        apiKey: settings_default.GAIANET_API_KEY || runtime.token,
        dimensions: config2.dimensions
      });
    }
    if (config2.provider === EmbeddingProvider.Heurist) {
      return await getRemoteEmbedding(input, {
        model: config2.model,
        endpoint: getEndpoint("heurist" /* HEURIST */),
        apiKey: runtime.token,
        dimensions: config2.dimensions
      });
    }
    if (isNode) {
      try {
        return await getLocalEmbedding(input);
      } catch (error) {
        logger_default.warn(
          "Local embedding failed, falling back to remote",
          error
        );
      }
    }
    return await getRemoteEmbedding(input, {
      model: config2.model,
      endpoint: runtime.character.modelEndpointOverride || getEndpoint(runtime.character.modelProvider),
      apiKey: runtime.token,
      dimensions: config2.dimensions
    });
    async function getLocalEmbedding(input2) {
      logger_default.debug("DEBUG - Inside getLocalEmbedding function");
      try {
        const embeddingManager = localembeddingManager_default.getInstance();
        return await embeddingManager.generateEmbedding(input2);
      } catch (error) {
        logger_default.error("Local embedding failed:", error);
        throw error;
      }
    }
    async function retrieveCachedEmbedding(runtime2, input2) {
      if (!input2) {
        logger_default.log("No input to retrieve cached embedding for");
        return null;
      }
      const similaritySearchResult = await runtime2.messageManager.getCachedEmbeddings(input2);
      if (similaritySearchResult.length > 0) {
        return similaritySearchResult[0].embedding;
      }
      return null;
    }
  }
  
  // src/evaluators.ts
  import { names as names3, uniqueNamesGenerator as uniqueNamesGenerator3 } from "unique-names-generator";
  var evaluationTemplate = `TASK: Based on the conversation and conditions, determine which evaluation functions are appropriate to call.
  Examples:
  {{evaluatorExamples}}
  
  INSTRUCTIONS: You are helping me to decide which appropriate functions to call based on the conversation between {{senderName}} and {{agentName}}.
  
  {{recentMessages}}
  
  Evaluator Functions:
  {{evaluators}}
  
  TASK: Based on the most recent conversation, determine which evaluators functions are appropriate to call to call.
  Include the name of evaluators that are relevant and should be called in the array
  Available evaluator names to include are {{evaluatorNames}}
  ` + stringArrayFooter;
  function formatEvaluatorNames(evaluators) {
    return evaluators.map((evaluator) => `'${evaluator.name}'`).join(",\n");
  }
  function formatEvaluators(evaluators) {
    return evaluators.map(
      (evaluator) => `'${evaluator.name}: ${evaluator.description}'`
    ).join(",\n");
  }
  function formatEvaluatorExamples(evaluators) {
    return evaluators.map((evaluator) => {
      return evaluator.examples.map((example) => {
        const exampleNames = Array.from(
          { length: 5 },
          () => uniqueNamesGenerator3({ dictionaries: [names3] })
        );
        let formattedContext = example.context;
        let formattedOutcome = example.outcome;
        exampleNames.forEach((name, index2) => {
          const placeholder = `{{user${index2 + 1}}}`;
          formattedContext = formattedContext.replaceAll(
            placeholder,
            name
          );
          formattedOutcome = formattedOutcome.replaceAll(
            placeholder,
            name
          );
        });
        const formattedMessages = example.messages.map((message) => {
          let messageString = `${message.user}: ${message.content.text}`;
          exampleNames.forEach((name, index2) => {
            const placeholder = `{{user${index2 + 1}}}`;
            messageString = messageString.replaceAll(
              placeholder,
              name
            );
          });
          return messageString + (message.content.action ? ` (${message.content.action})` : "");
        }).join("\n");
        return `Context:
  ${formattedContext}
  
  Messages:
  ${formattedMessages}
  
  Outcome:
  ${formattedOutcome}`;
      }).join("\n\n");
    }).join("\n\n");
  }
  function formatEvaluatorExampleDescriptions(evaluators) {
    return evaluators.map(
      (evaluator) => evaluator.examples.map(
        (_example, index2) => `${evaluator.name} Example ${index2 + 1}: ${evaluator.description}`
      ).join("\n")
    ).join("\n\n");
  }
  
  // src/generation.ts
  import { createAnthropic } from "@ai-sdk/anthropic";
  import { createGoogleGenerativeAI } from "@ai-sdk/google";
  import { createMistral } from "@ai-sdk/mistral";
  import { createGroq } from "@ai-sdk/groq";
  import { createOpenAI } from "@ai-sdk/openai";
  import { bedrock } from "@ai-sdk/amazon-bedrock";
  import { RecursiveCharacterTextSplitter } from "langchain/text_splitter";
  import {
    generateObject as aiGenerateObject,
    generateText as aiGenerateText
  } from "ai";
  import { Buffer as Buffer2 } from "buffer";
  import { createOllama } from "ollama-ai-provider";
  import OpenAI from "openai";
  import { encodingForModel } from "js-tiktoken";
  
  // ../../node_modules/@huggingface/transformers/dist/transformers.mjs
  import * as __WEBPACK_EXTERNAL_MODULE_fs__ from "fs";
  import * as __WEBPACK_EXTERNAL_MODULE_onnxruntime_node_6a60201e__ from "onnxruntime-node";
  import * as __WEBPACK_EXTERNAL_MODULE_path__ from "path";
  import * as __WEBPACK_EXTERNAL_MODULE_sharp__ from "sharp";
  import * as __WEBPACK_EXTERNAL_MODULE_url__ from "url";
  var __webpack_modules__ = {
    /***/
    "fs": (
      /*!*********************!*\
        !*** external "fs" ***!
        \*********************/
      /***/
      (module) => {
        module.exports = __WEBPACK_EXTERNAL_MODULE_fs__;
      }
    ),
    /***/
    "onnxruntime-node": (
      /*!***********************************!*\
        !*** external "onnxruntime-node" ***!
        \***********************************/
      /***/
      (module) => {
        module.exports = __WEBPACK_EXTERNAL_MODULE_onnxruntime_node_6a60201e__;
      }
    ),
    /***/
    "path": (
      /*!***********************!*\
        !*** external "path" ***!
        \***********************/
      /***/
      (module) => {
        module.exports = __WEBPACK_EXTERNAL_MODULE_path__;
      }
    ),
    /***/
    "sharp": (
      /*!************************!*\
        !*** external "sharp" ***!
        \************************/
      /***/
      (module) => {
        module.exports = __WEBPACK_EXTERNAL_MODULE_sharp__;
      }
    ),
    /***/
    "url": (
      /*!**********************!*\
        !*** external "url" ***!
        \**********************/
      /***/
      (module) => {
        module.exports = __WEBPACK_EXTERNAL_MODULE_url__;
      }
    ),
    /***/
    "?cb4d": (
      /*!*************************************!*\
        !*** #onnxruntime-webgpu (ignored) ***!
        \*************************************/
      /***/
      () => {
      }
    ),
    /***/
    "./node_modules/@huggingface/jinja/dist/index.js": (
      /*!*******************************************************!*\
        !*** ./node_modules/@huggingface/jinja/dist/index.js ***!
        \*******************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Environment: () => (
            /* binding */
            Environment
          ),
          /* harmony export */
          Interpreter: () => (
            /* binding */
            Interpreter
          ),
          /* harmony export */
          Template: () => (
            /* binding */
            Template
          ),
          /* harmony export */
          parse: () => (
            /* binding */
            parse
          ),
          /* harmony export */
          tokenize: () => (
            /* binding */
            tokenize
          )
          /* harmony export */
        });
        var TOKEN_TYPES = Object.freeze({
          Text: "Text",
          // The text between Jinja statements or expressions
          NumericLiteral: "NumericLiteral",
          // e.g., 123
          BooleanLiteral: "BooleanLiteral",
          // true or false
          StringLiteral: "StringLiteral",
          // 'string'
          Identifier: "Identifier",
          // Variables, functions, etc.
          Equals: "Equals",
          // =
          OpenParen: "OpenParen",
          // (
          CloseParen: "CloseParen",
          // )
          OpenStatement: "OpenStatement",
          // {%
          CloseStatement: "CloseStatement",
          // %}
          OpenExpression: "OpenExpression",
          // {{
          CloseExpression: "CloseExpression",
          // }}
          OpenSquareBracket: "OpenSquareBracket",
          // [
          CloseSquareBracket: "CloseSquareBracket",
          // ]
          OpenCurlyBracket: "OpenCurlyBracket",
          // {
          CloseCurlyBracket: "CloseCurlyBracket",
          // }
          Comma: "Comma",
          // ,
          Dot: "Dot",
          // .
          Colon: "Colon",
          // :
          Pipe: "Pipe",
          // |
          CallOperator: "CallOperator",
          // ()
          AdditiveBinaryOperator: "AdditiveBinaryOperator",
          // + -
          MultiplicativeBinaryOperator: "MultiplicativeBinaryOperator",
          // * / %
          ComparisonBinaryOperator: "ComparisonBinaryOperator",
          // < > <= >= == !=
          UnaryOperator: "UnaryOperator",
          // ! - +
          // Keywords
          Set: "Set",
          If: "If",
          For: "For",
          In: "In",
          Is: "Is",
          NotIn: "NotIn",
          Else: "Else",
          EndIf: "EndIf",
          ElseIf: "ElseIf",
          EndFor: "EndFor",
          And: "And",
          Or: "Or",
          Not: "UnaryOperator",
          Macro: "Macro",
          EndMacro: "EndMacro"
        });
        var KEYWORDS = Object.freeze({
          set: TOKEN_TYPES.Set,
          for: TOKEN_TYPES.For,
          in: TOKEN_TYPES.In,
          is: TOKEN_TYPES.Is,
          if: TOKEN_TYPES.If,
          else: TOKEN_TYPES.Else,
          endif: TOKEN_TYPES.EndIf,
          elif: TOKEN_TYPES.ElseIf,
          endfor: TOKEN_TYPES.EndFor,
          and: TOKEN_TYPES.And,
          or: TOKEN_TYPES.Or,
          not: TOKEN_TYPES.Not,
          "not in": TOKEN_TYPES.NotIn,
          macro: TOKEN_TYPES.Macro,
          endmacro: TOKEN_TYPES.EndMacro,
          // Literals
          true: TOKEN_TYPES.BooleanLiteral,
          false: TOKEN_TYPES.BooleanLiteral,
          // NOTE: According to the Jinja docs: The special constants true, false, and none are indeed lowercase.
          // Because that caused confusion in the past, (True used to expand to an undefined variable that was considered false),
          // all three can now also be written in title case (True, False, and None). However, for consistency, (all Jinja identifiers are lowercase)
          // you should use the lowercase versions.
          True: TOKEN_TYPES.BooleanLiteral,
          False: TOKEN_TYPES.BooleanLiteral
        });
        var Token = class {
          /**
           * Constructs a new Token.
           * @param {string} value The raw value as seen inside the source code.
           * @param {TokenType} type The type of token.
           */
          constructor(value, type) {
            this.value = value;
            this.type = type;
          }
        };
        function isWord(char) {
          return /\w/.test(char);
        }
        function isInteger(char) {
          return /[0-9]/.test(char);
        }
        var ORDERED_MAPPING_TABLE = [
          // Control sequences
          ["{%", TOKEN_TYPES.OpenStatement],
          ["%}", TOKEN_TYPES.CloseStatement],
          ["{{", TOKEN_TYPES.OpenExpression],
          ["}}", TOKEN_TYPES.CloseExpression],
          // Single character tokens
          ["(", TOKEN_TYPES.OpenParen],
          [")", TOKEN_TYPES.CloseParen],
          ["{", TOKEN_TYPES.OpenCurlyBracket],
          ["}", TOKEN_TYPES.CloseCurlyBracket],
          ["[", TOKEN_TYPES.OpenSquareBracket],
          ["]", TOKEN_TYPES.CloseSquareBracket],
          [",", TOKEN_TYPES.Comma],
          [".", TOKEN_TYPES.Dot],
          [":", TOKEN_TYPES.Colon],
          ["|", TOKEN_TYPES.Pipe],
          // Comparison operators
          ["<=", TOKEN_TYPES.ComparisonBinaryOperator],
          [">=", TOKEN_TYPES.ComparisonBinaryOperator],
          ["==", TOKEN_TYPES.ComparisonBinaryOperator],
          ["!=", TOKEN_TYPES.ComparisonBinaryOperator],
          ["<", TOKEN_TYPES.ComparisonBinaryOperator],
          [">", TOKEN_TYPES.ComparisonBinaryOperator],
          // Arithmetic operators
          ["+", TOKEN_TYPES.AdditiveBinaryOperator],
          ["-", TOKEN_TYPES.AdditiveBinaryOperator],
          ["*", TOKEN_TYPES.MultiplicativeBinaryOperator],
          ["/", TOKEN_TYPES.MultiplicativeBinaryOperator],
          ["%", TOKEN_TYPES.MultiplicativeBinaryOperator],
          // Assignment operator
          ["=", TOKEN_TYPES.Equals]
        ];
        var ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([
          ["n", "\n"],
          // New line
          ["t", "	"],
          // Horizontal tab
          ["r", "\r"],
          // Carriage return
          ["b", "\b"],
          // Backspace
          ["f", "\f"],
          // Form feed
          ["v", "\v"],
          // Vertical tab
          ["'", "'"],
          // Single quote
          ['"', '"'],
          // Double quote
          ["\\", "\\"]
          // Backslash
        ]);
        function preprocess2(template, options2 = {}) {
          if (template.endsWith("\n")) {
            template = template.slice(0, -1);
          }
          template = template.replace(/{#.*?#}/gs, "{##}");
          if (options2.lstrip_blocks) {
            template = template.replace(/^[ \t]*({[#%])/gm, "$1");
          }
          if (options2.trim_blocks) {
            template = template.replace(/([#%]})\n/g, "$1");
          }
          return template.replace(/{##}/g, "").replace(/-%}\s*/g, "%}").replace(/\s*{%-/g, "{%").replace(/-}}\s*/g, "}}").replace(/\s*{{-/g, "{{");
        }
        function tokenize(source, options2 = {}) {
          const tokens = [];
          const src = preprocess2(source, options2);
          let cursorPosition = 0;
          const consumeWhile = (predicate) => {
            let str = "";
            while (predicate(src[cursorPosition])) {
              if (src[cursorPosition] === "\\") {
                ++cursorPosition;
                if (cursorPosition >= src.length)
                  throw new SyntaxError("Unexpected end of input");
                const escaped = src[cursorPosition++];
                const unescaped = ESCAPE_CHARACTERS.get(escaped);
                if (unescaped === void 0) {
                  throw new SyntaxError(`Unexpected escaped character: ${escaped}`);
                }
                str += unescaped;
                continue;
              }
              str += src[cursorPosition++];
              if (cursorPosition >= src.length)
                throw new SyntaxError("Unexpected end of input");
            }
            return str;
          };
          main:
            while (cursorPosition < src.length) {
              const lastTokenType = tokens.at(-1)?.type;
              if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {
                let text = "";
                while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression
                !(src[cursorPosition] === "{" && (src[cursorPosition + 1] === "%" || src[cursorPosition + 1] === "{"))) {
                  text += src[cursorPosition++];
                }
                if (text.length > 0) {
                  tokens.push(new Token(text, TOKEN_TYPES.Text));
                  continue;
                }
              }
              consumeWhile((char2) => /\s/.test(char2));
              const char = src[cursorPosition];
              if (char === "-" || char === "+") {
                const lastTokenType2 = tokens.at(-1)?.type;
                if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {
                  throw new SyntaxError(`Unexpected character: ${char}`);
                }
                switch (lastTokenType2) {
                  case TOKEN_TYPES.Identifier:
                  case TOKEN_TYPES.NumericLiteral:
                  case TOKEN_TYPES.BooleanLiteral:
                  case TOKEN_TYPES.StringLiteral:
                  case TOKEN_TYPES.CloseParen:
                  case TOKEN_TYPES.CloseSquareBracket:
                    break;
                  default: {
                    ++cursorPosition;
                    const num = consumeWhile(isInteger);
                    tokens.push(
                      new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)
                    );
                    continue;
                  }
                }
              }
              for (const [char2, token] of ORDERED_MAPPING_TABLE) {
                const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);
                if (slice2 === char2) {
                  tokens.push(new Token(char2, token));
                  cursorPosition += char2.length;
                  continue main;
                }
              }
              if (char === "'" || char === '"') {
                ++cursorPosition;
                const str = consumeWhile((c) => c !== char);
                tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));
                ++cursorPosition;
                continue;
              }
              if (isInteger(char)) {
                const num = consumeWhile(isInteger);
                tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));
                continue;
              }
              if (isWord(char)) {
                const word = consumeWhile(isWord);
                const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;
                if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {
                  tokens.pop();
                  tokens.push(new Token("not in", TOKEN_TYPES.NotIn));
                } else {
                  tokens.push(new Token(word, type));
                }
                continue;
              }
              throw new SyntaxError(`Unexpected character: ${char}`);
            }
          return tokens;
        }
        var Statement = class {
          type = "Statement";
        };
        var Program = class extends Statement {
          constructor(body) {
            super();
            this.body = body;
          }
          type = "Program";
        };
        var If = class extends Statement {
          constructor(test, body, alternate) {
            super();
            this.test = test;
            this.body = body;
            this.alternate = alternate;
          }
          type = "If";
        };
        var For = class extends Statement {
          constructor(loopvar, iterable, body, defaultBlock) {
            super();
            this.loopvar = loopvar;
            this.iterable = iterable;
            this.body = body;
            this.defaultBlock = defaultBlock;
          }
          type = "For";
        };
        var SetStatement = class extends Statement {
          constructor(assignee, value) {
            super();
            this.assignee = assignee;
            this.value = value;
          }
          type = "Set";
        };
        var Macro = class extends Statement {
          constructor(name, args, body) {
            super();
            this.name = name;
            this.args = args;
            this.body = body;
          }
          type = "Macro";
        };
        var Expression = class extends Statement {
          type = "Expression";
        };
        var MemberExpression = class extends Expression {
          constructor(object, property, computed) {
            super();
            this.object = object;
            this.property = property;
            this.computed = computed;
          }
          type = "MemberExpression";
        };
        var CallExpression = class extends Expression {
          constructor(callee, args) {
            super();
            this.callee = callee;
            this.args = args;
          }
          type = "CallExpression";
        };
        var Identifier = class extends Expression {
          /**
           * @param {string} value The name of the identifier
           */
          constructor(value) {
            super();
            this.value = value;
          }
          type = "Identifier";
        };
        var Literal = class extends Expression {
          constructor(value) {
            super();
            this.value = value;
          }
          type = "Literal";
        };
        var NumericLiteral = class extends Literal {
          type = "NumericLiteral";
        };
        var StringLiteral = class extends Literal {
          type = "StringLiteral";
        };
        var BooleanLiteral = class extends Literal {
          type = "BooleanLiteral";
        };
        var ArrayLiteral = class extends Literal {
          type = "ArrayLiteral";
        };
        var TupleLiteral = class extends Literal {
          type = "TupleLiteral";
        };
        var ObjectLiteral = class extends Literal {
          type = "ObjectLiteral";
        };
        var BinaryExpression = class extends Expression {
          constructor(operator, left, right) {
            super();
            this.operator = operator;
            this.left = left;
            this.right = right;
          }
          type = "BinaryExpression";
        };
        var FilterExpression = class extends Expression {
          constructor(operand, filter) {
            super();
            this.operand = operand;
            this.filter = filter;
          }
          type = "FilterExpression";
        };
        var SelectExpression = class extends Expression {
          constructor(iterable, test) {
            super();
            this.iterable = iterable;
            this.test = test;
          }
          type = "SelectExpression";
        };
        var TestExpression = class extends Expression {
          constructor(operand, negate, test) {
            super();
            this.operand = operand;
            this.negate = negate;
            this.test = test;
          }
          type = "TestExpression";
        };
        var UnaryExpression = class extends Expression {
          constructor(operator, argument) {
            super();
            this.operator = operator;
            this.argument = argument;
          }
          type = "UnaryExpression";
        };
        var SliceExpression = class extends Expression {
          constructor(start = void 0, stop = void 0, step = void 0) {
            super();
            this.start = start;
            this.stop = stop;
            this.step = step;
          }
          type = "SliceExpression";
        };
        var KeywordArgumentExpression = class extends Expression {
          constructor(key, value) {
            super();
            this.key = key;
            this.value = value;
          }
          type = "KeywordArgumentExpression";
        };
        function parse(tokens) {
          const program = new Program([]);
          let current = 0;
          function expect(type, error) {
            const prev = tokens[current++];
            if (!prev || prev.type !== type) {
              throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);
            }
            return prev;
          }
          function parseAny() {
            switch (tokens[current].type) {
              case TOKEN_TYPES.Text:
                return parseText();
              case TOKEN_TYPES.OpenStatement:
                return parseJinjaStatement();
              case TOKEN_TYPES.OpenExpression:
                return parseJinjaExpression();
              default:
                throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);
            }
          }
          function not(...types) {
            return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);
          }
          function is(...types) {
            return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);
          }
          function parseText() {
            return new StringLiteral(expect(TOKEN_TYPES.Text, "Expected text token").value);
          }
          function parseJinjaStatement() {
            expect(TOKEN_TYPES.OpenStatement, "Expected opening statement token");
            let result;
            switch (tokens[current].type) {
              case TOKEN_TYPES.Set:
                ++current;
                result = parseSetStatement();
                expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                break;
              case TOKEN_TYPES.If:
                ++current;
                result = parseIfStatement();
                expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                expect(TOKEN_TYPES.EndIf, "Expected endif token");
                expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                break;
              case TOKEN_TYPES.Macro:
                ++current;
                result = parseMacroStatement();
                expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                expect(TOKEN_TYPES.EndMacro, "Expected endmacro token");
                expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                break;
              case TOKEN_TYPES.For:
                ++current;
                result = parseForStatement();
                expect(TOKEN_TYPES.OpenStatement, "Expected {% token");
                expect(TOKEN_TYPES.EndFor, "Expected endfor token");
                expect(TOKEN_TYPES.CloseStatement, "Expected %} token");
                break;
              default:
                throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);
            }
            return result;
          }
          function parseJinjaExpression() {
            expect(TOKEN_TYPES.OpenExpression, "Expected opening expression token");
            const result = parseExpression();
            expect(TOKEN_TYPES.CloseExpression, "Expected closing expression token");
            return result;
          }
          function parseSetStatement() {
            const left = parseExpression();
            if (is(TOKEN_TYPES.Equals)) {
              ++current;
              const value = parseSetStatement();
              return new SetStatement(left, value);
            }
            return left;
          }
          function parseIfStatement() {
            const test = parseExpression();
            expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
            const body = [];
            const alternate = [];
            while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {
              body.push(parseAny());
            }
            if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {
              ++current;
              if (is(TOKEN_TYPES.ElseIf)) {
                expect(TOKEN_TYPES.ElseIf, "Expected elseif token");
                alternate.push(parseIfStatement());
              } else {
                expect(TOKEN_TYPES.Else, "Expected else token");
                expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
                while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {
                  alternate.push(parseAny());
                }
              }
            }
            return new If(test, body, alternate);
          }
          function parseMacroStatement() {
            const name = parsePrimaryExpression();
            if (name.type !== "Identifier") {
              throw new SyntaxError(`Expected identifier following macro statement`);
            }
            const args = parseArgs();
            expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
            const body = [];
            while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndMacro)) {
              body.push(parseAny());
            }
            return new Macro(name, args, body);
          }
          function parseExpressionSequence(primary = false) {
            const fn = primary ? parsePrimaryExpression : parseExpression;
            const expressions = [fn()];
            const isTuple = is(TOKEN_TYPES.Comma);
            while (isTuple) {
              ++current;
              expressions.push(fn());
              if (!is(TOKEN_TYPES.Comma)) {
                break;
              }
            }
            return isTuple ? new TupleLiteral(expressions) : expressions[0];
          }
          function parseForStatement() {
            const loopVariable = parseExpressionSequence(true);
            if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {
              throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);
            }
            expect(TOKEN_TYPES.In, "Expected `in` keyword following loop variable");
            const iterable = parseExpression();
            expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
            const body = [];
            while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor) && not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {
              body.push(parseAny());
            }
            const alternative = [];
            if (is(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {
              ++current;
              ++current;
              expect(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
              while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {
                alternative.push(parseAny());
              }
            }
            return new For(loopVariable, iterable, body, alternative);
          }
          function parseExpression() {
            return parseIfExpression();
          }
          function parseIfExpression() {
            const a = parseLogicalOrExpression();
            if (is(TOKEN_TYPES.If)) {
              ++current;
              const predicate = parseLogicalOrExpression();
              if (is(TOKEN_TYPES.Else)) {
                ++current;
                const b = parseLogicalOrExpression();
                return new If(predicate, [a], [b]);
              } else {
                return new SelectExpression(a, predicate);
              }
            }
            return a;
          }
          function parseLogicalOrExpression() {
            let left = parseLogicalAndExpression();
            while (is(TOKEN_TYPES.Or)) {
              const operator = tokens[current];
              ++current;
              const right = parseLogicalAndExpression();
              left = new BinaryExpression(operator, left, right);
            }
            return left;
          }
          function parseLogicalAndExpression() {
            let left = parseLogicalNegationExpression();
            while (is(TOKEN_TYPES.And)) {
              const operator = tokens[current];
              ++current;
              const right = parseLogicalNegationExpression();
              left = new BinaryExpression(operator, left, right);
            }
            return left;
          }
          function parseLogicalNegationExpression() {
            let right;
            while (is(TOKEN_TYPES.Not)) {
              const operator = tokens[current];
              ++current;
              const arg = parseLogicalNegationExpression();
              right = new UnaryExpression(operator, arg);
            }
            return right ?? parseComparisonExpression();
          }
          function parseComparisonExpression() {
            let left = parseAdditiveExpression();
            while (is(TOKEN_TYPES.ComparisonBinaryOperator) || is(TOKEN_TYPES.In) || is(TOKEN_TYPES.NotIn)) {
              const operator = tokens[current];
              ++current;
              const right = parseAdditiveExpression();
              left = new BinaryExpression(operator, left, right);
            }
            return left;
          }
          function parseAdditiveExpression() {
            let left = parseMultiplicativeExpression();
            while (is(TOKEN_TYPES.AdditiveBinaryOperator)) {
              const operator = tokens[current];
              ++current;
              const right = parseMultiplicativeExpression();
              left = new BinaryExpression(operator, left, right);
            }
            return left;
          }
          function parseCallMemberExpression() {
            const member = parseMemberExpression();
            if (is(TOKEN_TYPES.OpenParen)) {
              return parseCallExpression(member);
            }
            return member;
          }
          function parseCallExpression(callee) {
            let callExpression = new CallExpression(callee, parseArgs());
            if (is(TOKEN_TYPES.OpenParen)) {
              callExpression = parseCallExpression(callExpression);
            }
            return callExpression;
          }
          function parseArgs() {
            expect(TOKEN_TYPES.OpenParen, "Expected opening parenthesis for arguments list");
            const args = parseArgumentsList();
            expect(TOKEN_TYPES.CloseParen, "Expected closing parenthesis for arguments list");
            return args;
          }
          function parseArgumentsList() {
            const args = [];
            while (!is(TOKEN_TYPES.CloseParen)) {
              let argument = parseExpression();
              if (is(TOKEN_TYPES.Equals)) {
                ++current;
                if (!(argument instanceof Identifier)) {
                  throw new SyntaxError(`Expected identifier for keyword argument`);
                }
                const value = parseExpression();
                argument = new KeywordArgumentExpression(argument, value);
              }
              args.push(argument);
              if (is(TOKEN_TYPES.Comma)) {
                ++current;
              }
            }
            return args;
          }
          function parseMemberExpressionArgumentsList() {
            const slices = [];
            let isSlice = false;
            while (!is(TOKEN_TYPES.CloseSquareBracket)) {
              if (is(TOKEN_TYPES.Colon)) {
                slices.push(void 0);
                ++current;
                isSlice = true;
              } else {
                slices.push(parseExpression());
                if (is(TOKEN_TYPES.Colon)) {
                  ++current;
                  isSlice = true;
                }
              }
            }
            if (slices.length === 0) {
              throw new SyntaxError(`Expected at least one argument for member/slice expression`);
            }
            if (isSlice) {
              if (slices.length > 3) {
                throw new SyntaxError(`Expected 0-3 arguments for slice expression`);
              }
              return new SliceExpression(...slices);
            }
            return slices[0];
          }
          function parseMemberExpression() {
            let object = parsePrimaryExpression();
            while (is(TOKEN_TYPES.Dot) || is(TOKEN_TYPES.OpenSquareBracket)) {
              const operator = tokens[current];
              ++current;
              let property;
              const computed = operator.type !== TOKEN_TYPES.Dot;
              if (computed) {
                property = parseMemberExpressionArgumentsList();
                expect(TOKEN_TYPES.CloseSquareBracket, "Expected closing square bracket");
              } else {
                property = parsePrimaryExpression();
                if (property.type !== "Identifier") {
                  throw new SyntaxError(`Expected identifier following dot operator`);
                }
              }
              object = new MemberExpression(object, property, computed);
            }
            return object;
          }
          function parseMultiplicativeExpression() {
            let left = parseTestExpression();
            while (is(TOKEN_TYPES.MultiplicativeBinaryOperator)) {
              const operator = tokens[current];
              ++current;
              const right = parseTestExpression();
              left = new BinaryExpression(operator, left, right);
            }
            return left;
          }
          function parseTestExpression() {
            let operand = parseFilterExpression();
            while (is(TOKEN_TYPES.Is)) {
              ++current;
              const negate = is(TOKEN_TYPES.Not);
              if (negate) {
                ++current;
              }
              let filter = parsePrimaryExpression();
              if (filter instanceof BooleanLiteral) {
                filter = new Identifier(filter.value.toString());
              }
              if (!(filter instanceof Identifier)) {
                throw new SyntaxError(`Expected identifier for the test`);
              }
              operand = new TestExpression(operand, negate, filter);
            }
            return operand;
          }
          function parseFilterExpression() {
            let operand = parseCallMemberExpression();
            while (is(TOKEN_TYPES.Pipe)) {
              ++current;
              let filter = parsePrimaryExpression();
              if (!(filter instanceof Identifier)) {
                throw new SyntaxError(`Expected identifier for the filter`);
              }
              if (is(TOKEN_TYPES.OpenParen)) {
                filter = parseCallExpression(filter);
              }
              operand = new FilterExpression(operand, filter);
            }
            return operand;
          }
          function parsePrimaryExpression() {
            const token = tokens[current];
            switch (token.type) {
              case TOKEN_TYPES.NumericLiteral:
                ++current;
                return new NumericLiteral(Number(token.value));
              case TOKEN_TYPES.StringLiteral:
                ++current;
                return new StringLiteral(token.value);
              case TOKEN_TYPES.BooleanLiteral:
                ++current;
                return new BooleanLiteral(token.value.toLowerCase() === "true");
              case TOKEN_TYPES.Identifier:
                ++current;
                return new Identifier(token.value);
              case TOKEN_TYPES.OpenParen: {
                ++current;
                const expression = parseExpressionSequence();
                if (tokens[current].type !== TOKEN_TYPES.CloseParen) {
                  throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);
                }
                ++current;
                return expression;
              }
              case TOKEN_TYPES.OpenSquareBracket: {
                ++current;
                const values = [];
                while (!is(TOKEN_TYPES.CloseSquareBracket)) {
                  values.push(parseExpression());
                  if (is(TOKEN_TYPES.Comma)) {
                    ++current;
                  }
                }
                ++current;
                return new ArrayLiteral(values);
              }
              case TOKEN_TYPES.OpenCurlyBracket: {
                ++current;
                const values = /* @__PURE__ */ new Map();
                while (!is(TOKEN_TYPES.CloseCurlyBracket)) {
                  const key = parseExpression();
                  expect(TOKEN_TYPES.Colon, "Expected colon between key and value in object literal");
                  const value = parseExpression();
                  values.set(key, value);
                  if (is(TOKEN_TYPES.Comma)) {
                    ++current;
                  }
                }
                ++current;
                return new ObjectLiteral(values);
              }
              default:
                throw new SyntaxError(`Unexpected token: ${token.type}`);
            }
          }
          while (current < tokens.length) {
            program.body.push(parseAny());
          }
          return program;
        }
        function range(start, stop, step = 1) {
          if (stop === void 0) {
            stop = start;
            start = 0;
          }
          const result = [];
          for (let i = start; i < stop; i += step) {
            result.push(i);
          }
          return result;
        }
        function slice(array, start, stop, step = 1) {
          const direction = Math.sign(step);
          if (direction >= 0) {
            start = (start ??= 0) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);
            stop = (stop ??= array.length) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);
          } else {
            start = (start ??= array.length - 1) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);
            stop = (stop ??= -1) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);
          }
          const result = [];
          for (let i = start; direction * i < direction * stop; i += step) {
            result.push(array[i]);
          }
          return result;
        }
        function titleCase(value) {
          return value.replace(/\b\w/g, (c) => c.toUpperCase());
        }
        var RuntimeValue = class {
          type = "RuntimeValue";
          value;
          /**
           * A collection of built-in functions for this type.
           */
          builtins = /* @__PURE__ */ new Map();
          /**
           * Creates a new RuntimeValue.
           */
          constructor(value = void 0) {
            this.value = value;
          }
          /**
           * Determines truthiness or falsiness of the runtime value.
           * This function should be overridden by subclasses if it has custom truthiness criteria.
           * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.
           */
          __bool__() {
            return new BooleanValue(!!this.value);
          }
        };
        var NumericValue = class extends RuntimeValue {
          type = "NumericValue";
        };
        var StringValue = class extends RuntimeValue {
          type = "StringValue";
          builtins = /* @__PURE__ */ new Map([
            [
              "upper",
              new FunctionValue(() => {
                return new StringValue(this.value.toUpperCase());
              })
            ],
            [
              "lower",
              new FunctionValue(() => {
                return new StringValue(this.value.toLowerCase());
              })
            ],
            [
              "strip",
              new FunctionValue(() => {
                return new StringValue(this.value.trim());
              })
            ],
            [
              "title",
              new FunctionValue(() => {
                return new StringValue(titleCase(this.value));
              })
            ],
            ["length", new NumericValue(this.value.length)]
          ]);
        };
        var BooleanValue = class extends RuntimeValue {
          type = "BooleanValue";
        };
        var ObjectValue = class extends RuntimeValue {
          type = "ObjectValue";
          /**
           * NOTE: necessary to override since all JavaScript arrays are considered truthy,
           * while only non-empty Python arrays are consider truthy.
           *
           * e.g.,
           *  - JavaScript:  {} && 5 -> 5
           *  - Python:      {} and 5 -> {}
           */
          __bool__() {
            return new BooleanValue(this.value.size > 0);
          }
          builtins = /* @__PURE__ */ new Map([
            [
              "get",
              new FunctionValue(([key, defaultValue]) => {
                if (!(key instanceof StringValue)) {
                  throw new Error(`Object key must be a string: got ${key.type}`);
                }
                return this.value.get(key.value) ?? defaultValue ?? new NullValue();
              })
            ],
            [
              "items",
              new FunctionValue(() => {
                return new ArrayValue(
                  Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
                );
              })
            ]
          ]);
        };
        var KeywordArgumentsValue = class extends ObjectValue {
          type = "KeywordArgumentsValue";
        };
        var ArrayValue = class extends RuntimeValue {
          type = "ArrayValue";
          builtins = /* @__PURE__ */ new Map([["length", new NumericValue(this.value.length)]]);
          /**
           * NOTE: necessary to override since all JavaScript arrays are considered truthy,
           * while only non-empty Python arrays are consider truthy.
           *
           * e.g.,
           *  - JavaScript:  [] && 5 -> 5
           *  - Python:      [] and 5 -> []
           */
          __bool__() {
            return new BooleanValue(this.value.length > 0);
          }
        };
        var TupleValue = class extends ArrayValue {
          type = "TupleValue";
        };
        var FunctionValue = class extends RuntimeValue {
          type = "FunctionValue";
        };
        var NullValue = class extends RuntimeValue {
          type = "NullValue";
        };
        var UndefinedValue = class extends RuntimeValue {
          type = "UndefinedValue";
        };
        var Environment = class {
          constructor(parent) {
            this.parent = parent;
          }
          /**
           * The variables declared in this environment.
           */
          variables = /* @__PURE__ */ new Map([
            [
              "namespace",
              new FunctionValue((args) => {
                if (args.length === 0) {
                  return new ObjectValue(/* @__PURE__ */ new Map());
                }
                if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {
                  throw new Error("`namespace` expects either zero arguments or a single object argument");
                }
                return args[0];
              })
            ]
          ]);
          /**
           * The tests available in this environment.
           */
          tests = /* @__PURE__ */ new Map([
            ["boolean", (operand) => operand.type === "BooleanValue"],
            ["callable", (operand) => operand instanceof FunctionValue],
            [
              "odd",
              (operand) => {
                if (operand.type !== "NumericValue") {
                  throw new Error(`Cannot apply test "odd" to type: ${operand.type}`);
                }
                return operand.value % 2 !== 0;
              }
            ],
            [
              "even",
              (operand) => {
                if (operand.type !== "NumericValue") {
                  throw new Error(`Cannot apply test "even" to type: ${operand.type}`);
                }
                return operand.value % 2 === 0;
              }
            ],
            ["false", (operand) => operand.type === "BooleanValue" && !operand.value],
            ["true", (operand) => operand.type === "BooleanValue" && operand.value],
            ["string", (operand) => operand.type === "StringValue"],
            ["number", (operand) => operand.type === "NumericValue"],
            ["integer", (operand) => operand.type === "NumericValue" && Number.isInteger(operand.value)],
            ["iterable", (operand) => operand instanceof ArrayValue || operand instanceof StringValue],
            [
              "lower",
              (operand) => {
                const str = operand.value;
                return operand.type === "StringValue" && str === str.toLowerCase();
              }
            ],
            [
              "upper",
              (operand) => {
                const str = operand.value;
                return operand.type === "StringValue" && str === str.toUpperCase();
              }
            ],
            ["none", (operand) => operand.type === "NullValue"],
            ["defined", (operand) => operand.type !== "UndefinedValue"],
            ["undefined", (operand) => operand.type === "UndefinedValue"],
            ["equalto", (a, b) => a.value === b.value],
            ["eq", (a, b) => a.value === b.value]
          ]);
          /**
           * Set the value of a variable in the current environment.
           */
          set(name, value) {
            return this.declareVariable(name, convertToRuntimeValues(value));
          }
          declareVariable(name, value) {
            if (this.variables.has(name)) {
              throw new SyntaxError(`Variable already declared: ${name}`);
            }
            this.variables.set(name, value);
            return value;
          }
          // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {
          // 	const env = this.resolve(name);
          // 	env.variables.set(name, value);
          // 	return value;
          // }
          /**
           * Set variable in the current scope.
           * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.
           */
          setVariable(name, value) {
            this.variables.set(name, value);
            return value;
          }
          /**
           * Resolve the environment in which the variable is declared.
           * @param {string} name The name of the variable.
           * @returns {Environment} The environment in which the variable is declared.
           */
          resolve(name) {
            if (this.variables.has(name)) {
              return this;
            }
            if (this.parent) {
              return this.parent.resolve(name);
            }
            throw new Error(`Unknown variable: ${name}`);
          }
          lookupVariable(name) {
            try {
              return this.resolve(name).variables.get(name) ?? new UndefinedValue();
            } catch {
              return new UndefinedValue();
            }
          }
        };
        var Interpreter = class {
          global;
          constructor(env) {
            this.global = env ?? new Environment();
          }
          /**
           * Run the program.
           */
          run(program) {
            return this.evaluate(program, this.global);
          }
          /**
           * Evaluates expressions following the binary operation type.
           */
          evaluateBinaryExpression(node, environment) {
            const left = this.evaluate(node.left, environment);
            switch (node.operator.value) {
              case "and":
                return left.__bool__().value ? this.evaluate(node.right, environment) : left;
              case "or":
                return left.__bool__().value ? left : this.evaluate(node.right, environment);
            }
            const right = this.evaluate(node.right, environment);
            switch (node.operator.value) {
              case "==":
                return new BooleanValue(left.value == right.value);
              case "!=":
                return new BooleanValue(left.value != right.value);
            }
            if (left instanceof UndefinedValue || right instanceof UndefinedValue) {
              throw new Error("Cannot perform operation on undefined values");
            } else if (left instanceof NullValue || right instanceof NullValue) {
              throw new Error("Cannot perform operation on null values");
            } else if (left instanceof NumericValue && right instanceof NumericValue) {
              switch (node.operator.value) {
                case "+":
                  return new NumericValue(left.value + right.value);
                case "-":
                  return new NumericValue(left.value - right.value);
                case "*":
                  return new NumericValue(left.value * right.value);
                case "/":
                  return new NumericValue(left.value / right.value);
                case "%":
                  return new NumericValue(left.value % right.value);
                case "<":
                  return new BooleanValue(left.value < right.value);
                case ">":
                  return new BooleanValue(left.value > right.value);
                case ">=":
                  return new BooleanValue(left.value >= right.value);
                case "<=":
                  return new BooleanValue(left.value <= right.value);
              }
            } else if (left instanceof ArrayValue && right instanceof ArrayValue) {
              switch (node.operator.value) {
                case "+":
                  return new ArrayValue(left.value.concat(right.value));
              }
            } else if (right instanceof ArrayValue) {
              const member = right.value.find((x) => x.value === left.value) !== void 0;
              switch (node.operator.value) {
                case "in":
                  return new BooleanValue(member);
                case "not in":
                  return new BooleanValue(!member);
              }
            }
            if (left instanceof StringValue || right instanceof StringValue) {
              switch (node.operator.value) {
                case "+":
                  return new StringValue(left.value.toString() + right.value.toString());
              }
            }
            if (left instanceof StringValue && right instanceof StringValue) {
              switch (node.operator.value) {
                case "in":
                  return new BooleanValue(right.value.includes(left.value));
                case "not in":
                  return new BooleanValue(!right.value.includes(left.value));
              }
            }
            if (left instanceof StringValue && right instanceof ObjectValue) {
              switch (node.operator.value) {
                case "in":
                  return new BooleanValue(right.value.has(left.value));
                case "not in":
                  return new BooleanValue(!right.value.has(left.value));
              }
            }
            throw new SyntaxError(`Unknown operator "${node.operator.value}" between ${left.type} and ${right.type}`);
          }
          evaluateArguments(args, environment) {
            const positionalArguments = [];
            const keywordArguments = /* @__PURE__ */ new Map();
            for (const argument of args) {
              if (argument.type === "KeywordArgumentExpression") {
                const kwarg = argument;
                keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));
              } else {
                if (keywordArguments.size > 0) {
                  throw new Error("Positional arguments must come before keyword arguments");
                }
                positionalArguments.push(this.evaluate(argument, environment));
              }
            }
            return [positionalArguments, keywordArguments];
          }
          /**
           * Evaluates expressions following the filter operation type.
           */
          evaluateFilterExpression(node, environment) {
            const operand = this.evaluate(node.operand, environment);
            if (node.filter.type === "Identifier") {
              const filter = node.filter;
              if (filter.value === "tojson") {
                return new StringValue(toJSON(operand));
              }
              if (operand instanceof ArrayValue) {
                switch (filter.value) {
                  case "list":
                    return operand;
                  case "first":
                    return operand.value[0];
                  case "last":
                    return operand.value[operand.value.length - 1];
                  case "length":
                    return new NumericValue(operand.value.length);
                  case "reverse":
                    return new ArrayValue(operand.value.reverse());
                  case "sort":
                    return new ArrayValue(
                      operand.value.sort((a, b) => {
                        if (a.type !== b.type) {
                          throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);
                        }
                        switch (a.type) {
                          case "NumericValue":
                            return a.value - b.value;
                          case "StringValue":
                            return a.value.localeCompare(b.value);
                          default:
                            throw new Error(`Cannot compare type: ${a.type}`);
                        }
                      })
                    );
                  default:
                    throw new Error(`Unknown ArrayValue filter: ${filter.value}`);
                }
              } else if (operand instanceof StringValue) {
                switch (filter.value) {
                  case "length":
                    return new NumericValue(operand.value.length);
                  case "upper":
                    return new StringValue(operand.value.toUpperCase());
                  case "lower":
                    return new StringValue(operand.value.toLowerCase());
                  case "title":
                    return new StringValue(titleCase(operand.value));
                  case "capitalize":
                    return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));
                  case "trim":
                    return new StringValue(operand.value.trim());
                  case "indent":
                    return new StringValue(
                      operand.value.split("\n").map(
                        (x, i) => (
                          // By default, don't indent the first line or empty lines
                          i === 0 || x.length === 0 ? x : "    " + x
                        )
                      ).join("\n")
                    );
                  case "string":
                    return operand;
                  default:
                    throw new Error(`Unknown StringValue filter: ${filter.value}`);
                }
              } else if (operand instanceof NumericValue) {
                switch (filter.value) {
                  case "abs":
                    return new NumericValue(Math.abs(operand.value));
                  default:
                    throw new Error(`Unknown NumericValue filter: ${filter.value}`);
                }
              } else if (operand instanceof ObjectValue) {
                switch (filter.value) {
                  case "items":
                    return new ArrayValue(
                      Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))
                    );
                  case "length":
                    return new NumericValue(operand.value.size);
                  default:
                    throw new Error(`Unknown ObjectValue filter: ${filter.value}`);
                }
              }
              throw new Error(`Cannot apply filter "${filter.value}" to type: ${operand.type}`);
            } else if (node.filter.type === "CallExpression") {
              const filter = node.filter;
              if (filter.callee.type !== "Identifier") {
                throw new Error(`Unknown filter: ${filter.callee.type}`);
              }
              const filterName = filter.callee.value;
              if (filterName === "tojson") {
                const [, kwargs] = this.evaluateArguments(filter.args, environment);
                const indent = kwargs.get("indent") ?? new NullValue();
                if (!(indent instanceof NumericValue || indent instanceof NullValue)) {
                  throw new Error("If set, indent must be a number");
                }
                return new StringValue(toJSON(operand, indent.value));
              }
              if (operand instanceof ArrayValue) {
                switch (filterName) {
                  case "selectattr": {
                    if (operand.value.some((x) => !(x instanceof ObjectValue))) {
                      throw new Error("`selectattr` can only be applied to array of objects");
                    }
                    if (filter.args.some((x) => x.type !== "StringLiteral")) {
                      throw new Error("arguments of `selectattr` must be strings");
                    }
                    const [attr, testName, value] = filter.args.map((x) => this.evaluate(x, environment));
                    let testFunction;
                    if (testName) {
                      const test = environment.tests.get(testName.value);
                      if (!test) {
                        throw new Error(`Unknown test: ${testName.value}`);
                      }
                      testFunction = test;
                    } else {
                      testFunction = (...x) => x[0].__bool__().value;
                    }
                    const filtered = operand.value.filter((item) => {
                      const a = item.value.get(attr.value);
                      if (a) {
                        return testFunction(a, value);
                      }
                      return false;
                    });
                    return new ArrayValue(filtered);
                  }
                  case "map": {
                    const [, kwargs] = this.evaluateArguments(filter.args, environment);
                    if (kwargs.has("attribute")) {
                      const attr = kwargs.get("attribute");
                      if (!(attr instanceof StringValue)) {
                        throw new Error("attribute must be a string");
                      }
                      const defaultValue = kwargs.get("default");
                      const mapped = operand.value.map((item) => {
                        if (!(item instanceof ObjectValue)) {
                          throw new Error("items in map must be an object");
                        }
                        return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();
                      });
                      return new ArrayValue(mapped);
                    } else {
                      throw new Error("`map` expressions without `attribute` set are not currently supported.");
                    }
                  }
                }
                throw new Error(`Unknown ArrayValue filter: ${filterName}`);
              } else if (operand instanceof StringValue) {
                switch (filterName) {
                  case "indent": {
                    const [args, kwargs] = this.evaluateArguments(filter.args, environment);
                    const width = args.at(0) ?? kwargs.get("width") ?? new NumericValue(4);
                    if (!(width instanceof NumericValue)) {
                      throw new Error("width must be a number");
                    }
                    const first = args.at(1) ?? kwargs.get("first") ?? new BooleanValue(false);
                    const blank = args.at(2) ?? kwargs.get("blank") ?? new BooleanValue(false);
                    const lines = operand.value.split("\n");
                    const indent = " ".repeat(width.value);
                    const indented = lines.map(
                      (x, i) => !first.value && i === 0 || !blank.value && x.length === 0 ? x : indent + x
                    );
                    return new StringValue(indented.join("\n"));
                  }
                }
                throw new Error(`Unknown StringValue filter: ${filterName}`);
              } else {
                throw new Error(`Cannot apply filter "${filterName}" to type: ${operand.type}`);
              }
            }
            throw new Error(`Unknown filter: ${node.filter.type}`);
          }
          /**
           * Evaluates expressions following the test operation type.
           */
          evaluateTestExpression(node, environment) {
            const operand = this.evaluate(node.operand, environment);
            const test = environment.tests.get(node.test.value);
            if (!test) {
              throw new Error(`Unknown test: ${node.test.value}`);
            }
            const result = test(operand);
            return new BooleanValue(node.negate ? !result : result);
          }
          /**
           * Evaluates expressions following the unary operation type.
           */
          evaluateUnaryExpression(node, environment) {
            const argument = this.evaluate(node.argument, environment);
            switch (node.operator.value) {
              case "not":
                return new BooleanValue(!argument.value);
              default:
                throw new SyntaxError(`Unknown operator: ${node.operator.value}`);
            }
          }
          evalProgram(program, environment) {
            return this.evaluateBlock(program.body, environment);
          }
          evaluateBlock(statements, environment) {
            let result = "";
            for (const statement of statements) {
              const lastEvaluated = this.evaluate(statement, environment);
              if (lastEvaluated.type !== "NullValue" && lastEvaluated.type !== "UndefinedValue") {
                result += lastEvaluated.value;
              }
            }
            return new StringValue(result);
          }
          evaluateIdentifier(node, environment) {
            return environment.lookupVariable(node.value);
          }
          evaluateCallExpression(expr, environment) {
            const [args, kwargs] = this.evaluateArguments(expr.args, environment);
            if (kwargs.size > 0) {
              args.push(new KeywordArgumentsValue(kwargs));
            }
            const fn = this.evaluate(expr.callee, environment);
            if (fn.type !== "FunctionValue") {
              throw new Error(`Cannot call something that is not a function: got ${fn.type}`);
            }
            return fn.value(args, environment);
          }
          evaluateSliceExpression(object, expr, environment) {
            if (!(object instanceof ArrayValue || object instanceof StringValue)) {
              throw new Error("Slice object must be an array or string");
            }
            const start = this.evaluate(expr.start, environment);
            const stop = this.evaluate(expr.stop, environment);
            const step = this.evaluate(expr.step, environment);
            if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {
              throw new Error("Slice start must be numeric or undefined");
            }
            if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {
              throw new Error("Slice stop must be numeric or undefined");
            }
            if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {
              throw new Error("Slice step must be numeric or undefined");
            }
            if (object instanceof ArrayValue) {
              return new ArrayValue(slice(object.value, start.value, stop.value, step.value));
            } else {
              return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(""));
            }
          }
          evaluateMemberExpression(expr, environment) {
            const object = this.evaluate(expr.object, environment);
            let property;
            if (expr.computed) {
              if (expr.property.type === "SliceExpression") {
                return this.evaluateSliceExpression(object, expr.property, environment);
              } else {
                property = this.evaluate(expr.property, environment);
              }
            } else {
              property = new StringValue(expr.property.value);
            }
            let value;
            if (object instanceof ObjectValue) {
              if (!(property instanceof StringValue)) {
                throw new Error(`Cannot access property with non-string: got ${property.type}`);
              }
              value = object.value.get(property.value) ?? object.builtins.get(property.value);
            } else if (object instanceof ArrayValue || object instanceof StringValue) {
              if (property instanceof NumericValue) {
                value = object.value.at(property.value);
                if (object instanceof StringValue) {
                  value = new StringValue(object.value.at(property.value));
                }
              } else if (property instanceof StringValue) {
                value = object.builtins.get(property.value);
              } else {
                throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);
              }
            } else {
              if (!(property instanceof StringValue)) {
                throw new Error(`Cannot access property with non-string: got ${property.type}`);
              }
              value = object.builtins.get(property.value);
            }
            return value instanceof RuntimeValue ? value : new UndefinedValue();
          }
          evaluateSet(node, environment) {
            const rhs = this.evaluate(node.value, environment);
            if (node.assignee.type === "Identifier") {
              const variableName = node.assignee.value;
              environment.setVariable(variableName, rhs);
            } else if (node.assignee.type === "MemberExpression") {
              const member = node.assignee;
              const object = this.evaluate(member.object, environment);
              if (!(object instanceof ObjectValue)) {
                throw new Error("Cannot assign to member of non-object");
              }
              if (member.property.type !== "Identifier") {
                throw new Error("Cannot assign to member with non-identifier property");
              }
              object.value.set(member.property.value, rhs);
            } else {
              throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);
            }
            return new NullValue();
          }
          evaluateIf(node, environment) {
            const test = this.evaluate(node.test, environment);
            return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);
          }
          evaluateFor(node, environment) {
            const scope = new Environment(environment);
            let test, iterable;
            if (node.iterable.type === "SelectExpression") {
              const select = node.iterable;
              iterable = this.evaluate(select.iterable, scope);
              test = select.test;
            } else {
              iterable = this.evaluate(node.iterable, scope);
            }
            if (!(iterable instanceof ArrayValue)) {
              throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);
            }
            const items = [];
            const scopeUpdateFunctions = [];
            for (let i = 0; i < iterable.value.length; ++i) {
              const loopScope = new Environment(scope);
              const current = iterable.value[i];
              let scopeUpdateFunction;
              if (node.loopvar.type === "Identifier") {
                scopeUpdateFunction = (scope2) => scope2.setVariable(node.loopvar.value, current);
              } else if (node.loopvar.type === "TupleLiteral") {
                const loopvar = node.loopvar;
                if (current.type !== "ArrayValue") {
                  throw new Error(`Cannot unpack non-iterable type: ${current.type}`);
                }
                const c = current;
                if (loopvar.value.length !== c.value.length) {
                  throw new Error(`Too ${loopvar.value.length > c.value.length ? "few" : "many"} items to unpack`);
                }
                scopeUpdateFunction = (scope2) => {
                  for (let j = 0; j < loopvar.value.length; ++j) {
                    if (loopvar.value[j].type !== "Identifier") {
                      throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);
                    }
                    scope2.setVariable(loopvar.value[j].value, c.value[j]);
                  }
                };
              } else {
                throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);
              }
              if (test) {
                scopeUpdateFunction(loopScope);
                const testValue = this.evaluate(test, loopScope);
                if (!testValue.__bool__().value) {
                  continue;
                }
              }
              items.push(current);
              scopeUpdateFunctions.push(scopeUpdateFunction);
            }
            let result = "";
            let noIteration = true;
            for (let i = 0; i < items.length; ++i) {
              const loop = /* @__PURE__ */ new Map([
                ["index", new NumericValue(i + 1)],
                ["index0", new NumericValue(i)],
                ["revindex", new NumericValue(items.length - i)],
                ["revindex0", new NumericValue(items.length - i - 1)],
                ["first", new BooleanValue(i === 0)],
                ["last", new BooleanValue(i === items.length - 1)],
                ["length", new NumericValue(items.length)],
                ["previtem", i > 0 ? items[i - 1] : new UndefinedValue()],
                ["nextitem", i < items.length - 1 ? items[i + 1] : new UndefinedValue()]
              ]);
              scope.setVariable("loop", new ObjectValue(loop));
              scopeUpdateFunctions[i](scope);
              const evaluated = this.evaluateBlock(node.body, scope);
              result += evaluated.value;
              noIteration = false;
            }
            if (noIteration) {
              const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);
              result += defaultEvaluated.value;
            }
            return new StringValue(result);
          }
          /**
           * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.
           */
          evaluateMacro(node, environment) {
            environment.setVariable(
              node.name.value,
              new FunctionValue((args, scope) => {
                const macroScope = new Environment(scope);
                args = args.slice();
                let kwargs;
                if (args.at(-1)?.type === "KeywordArgumentsValue") {
                  kwargs = args.pop();
                }
                for (let i = 0; i < node.args.length; ++i) {
                  const nodeArg = node.args[i];
                  const passedArg = args[i];
                  if (nodeArg.type === "Identifier") {
                    const identifier = nodeArg;
                    if (!passedArg) {
                      throw new Error(`Missing positional argument: ${identifier.value}`);
                    }
                    macroScope.setVariable(identifier.value, passedArg);
                  } else if (nodeArg.type === "KeywordArgumentExpression") {
                    const kwarg = nodeArg;
                    const value = passedArg ?? // Try positional arguments first
                    kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs
                    this.evaluate(kwarg.value, macroScope);
                    macroScope.setVariable(kwarg.key.value, value);
                  } else {
                    throw new Error(`Unknown argument type: ${nodeArg.type}`);
                  }
                }
                return this.evaluateBlock(node.body, macroScope);
              })
            );
            return new NullValue();
          }
          evaluate(statement, environment) {
            if (statement === void 0)
              return new UndefinedValue();
            switch (statement.type) {
              case "Program":
                return this.evalProgram(statement, environment);
              case "Set":
                return this.evaluateSet(statement, environment);
              case "If":
                return this.evaluateIf(statement, environment);
              case "For":
                return this.evaluateFor(statement, environment);
              case "Macro":
                return this.evaluateMacro(statement, environment);
              case "NumericLiteral":
                return new NumericValue(Number(statement.value));
              case "StringLiteral":
                return new StringValue(statement.value);
              case "BooleanLiteral":
                return new BooleanValue(statement.value);
              case "ArrayLiteral":
                return new ArrayValue(statement.value.map((x) => this.evaluate(x, environment)));
              case "TupleLiteral":
                return new TupleValue(statement.value.map((x) => this.evaluate(x, environment)));
              case "ObjectLiteral": {
                const mapping = /* @__PURE__ */ new Map();
                for (const [key, value] of statement.value) {
                  const evaluatedKey = this.evaluate(key, environment);
                  if (!(evaluatedKey instanceof StringValue)) {
                    throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);
                  }
                  mapping.set(evaluatedKey.value, this.evaluate(value, environment));
                }
                return new ObjectValue(mapping);
              }
              case "Identifier":
                return this.evaluateIdentifier(statement, environment);
              case "CallExpression":
                return this.evaluateCallExpression(statement, environment);
              case "MemberExpression":
                return this.evaluateMemberExpression(statement, environment);
              case "UnaryExpression":
                return this.evaluateUnaryExpression(statement, environment);
              case "BinaryExpression":
                return this.evaluateBinaryExpression(statement, environment);
              case "FilterExpression":
                return this.evaluateFilterExpression(statement, environment);
              case "TestExpression":
                return this.evaluateTestExpression(statement, environment);
              default:
                throw new SyntaxError(`Unknown node type: ${statement.type}`);
            }
          }
        };
        function convertToRuntimeValues(input) {
          switch (typeof input) {
            case "number":
              return new NumericValue(input);
            case "string":
              return new StringValue(input);
            case "boolean":
              return new BooleanValue(input);
            case "undefined":
              return new UndefinedValue();
            case "object":
              if (input === null) {
                return new NullValue();
              } else if (Array.isArray(input)) {
                return new ArrayValue(input.map(convertToRuntimeValues));
              } else {
                return new ObjectValue(
                  new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))
                );
              }
            case "function":
              return new FunctionValue((args, _scope) => {
                const result = input(...args.map((x) => x.value)) ?? null;
                return convertToRuntimeValues(result);
              });
            default:
              throw new Error(`Cannot convert to runtime value: ${input}`);
          }
        }
        function toJSON(input, indent, depth) {
          const currentDepth = depth ?? 0;
          switch (input.type) {
            case "NullValue":
            case "UndefinedValue":
              return "null";
            case "NumericValue":
            case "StringValue":
            case "BooleanValue":
              return JSON.stringify(input.value);
            case "ArrayValue":
            case "ObjectValue": {
              const indentValue = indent ? " ".repeat(indent) : "";
              const basePadding = "\n" + indentValue.repeat(currentDepth);
              const childrenPadding = basePadding + indentValue;
              if (input.type === "ArrayValue") {
                const core = input.value.map((x) => toJSON(x, indent, currentDepth + 1));
                return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(", ")}]`;
              } else {
                const core = Array.from(input.value.entries()).map(([key, value]) => {
                  const v = `"${key}": ${toJSON(value, indent, currentDepth + 1)}`;
                  return indent ? `${childrenPadding}${v}` : v;
                });
                return indent ? `{${core.join(",")}${basePadding}}` : `{${core.join(", ")}}`;
              }
            }
            default:
              throw new Error(`Cannot convert to JSON: ${input.type}`);
          }
        }
        var Template = class {
          parsed;
          /**
           * @param {string} template The template string
           */
          constructor(template) {
            const tokens = tokenize(template, {
              lstrip_blocks: true,
              trim_blocks: true
            });
            this.parsed = parse(tokens);
          }
          render(items) {
            const env = new Environment();
            env.set("false", false);
            env.set("true", true);
            env.set("raise_exception", (args) => {
              throw new Error(args);
            });
            env.set("range", range);
            for (const [key, value] of Object.entries(items)) {
              env.set(key, value);
            }
            const interpreter = new Interpreter(env);
            const result = interpreter.run(this.parsed);
            return result.value;
          }
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/backend-impl.js": (
      /*!******************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/backend-impl.js ***!
        \******************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          registerBackend: () => (
            /* binding */
            registerBackend
          ),
          /* harmony export */
          resolveBackendAndExecutionProviders: () => (
            /* binding */
            resolveBackendAndExecutionProviders
          )
          /* harmony export */
        });
        const backends = /* @__PURE__ */ new Map();
        const backendsSortedByPriority = [];
        const registerBackend = (name, backend, priority) => {
          if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
            const currentBackend = backends.get(name);
            if (currentBackend === void 0) {
              backends.set(name, { backend, priority });
            } else if (currentBackend.priority > priority) {
              return;
            } else if (currentBackend.priority === priority) {
              if (currentBackend.backend !== backend) {
                throw new Error(`cannot register backend "${name}" using priority ${priority}`);
              }
            }
            if (priority >= 0) {
              const i = backendsSortedByPriority.indexOf(name);
              if (i !== -1) {
                backendsSortedByPriority.splice(i, 1);
              }
              for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
                if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                  backendsSortedByPriority.splice(i2, 0, name);
                  return;
                }
              }
              backendsSortedByPriority.push(name);
            }
            return;
          }
          throw new TypeError("not a valid backend");
        };
        const tryResolveAndInitializeBackend = async (backendName) => {
          const backendInfo = backends.get(backendName);
          if (!backendInfo) {
            return "backend not found.";
          }
          if (backendInfo.initialized) {
            return backendInfo.backend;
          } else if (backendInfo.aborted) {
            return backendInfo.error;
          } else {
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init(backendName);
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                backendInfo.error = `${e}`;
                backendInfo.aborted = true;
              }
              return backendInfo.error;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        };
        const resolveBackendAndExecutionProviders = async (options2) => {
          const eps = options2.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
          let backend;
          const errors = [];
          const availableBackendNames = /* @__PURE__ */ new Set();
          for (const backendName of backendNames) {
            const resolveResult = await tryResolveAndInitializeBackend(backendName);
            if (typeof resolveResult === "string") {
              errors.push({ name: backendName, err: resolveResult });
            } else {
              if (!backend) {
                backend = resolveResult;
              }
              if (backend === resolveResult) {
                availableBackendNames.add(backendName);
              }
            }
          }
          if (!backend) {
            throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
          }
          for (const { name, err } of errors) {
            if (backendHints.includes(name)) {
              console.warn(`removing requested execution provider "${name}" from session options because it is not available: ${err}`);
            }
          }
          const filteredEps = eps.filter((i) => availableBackendNames.has(typeof i === "string" ? i : i.name));
          return [
            backend,
            new Proxy(options2, {
              get: (target, prop) => {
                if (prop === "executionProviders") {
                  return filteredEps;
                }
                return Reflect.get(target, prop);
              }
            })
          ];
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/backend.js": (
      /*!*************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/backend.js ***!
        \*************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          registerBackend: () => (
            /* reexport safe */
            _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__.registerBackend
          )
          /* harmony export */
        });
        var _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./backend-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/backend-impl.js"
        );
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/env-impl.js": (
      /*!**************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/env-impl.js ***!
        \**************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          env: () => (
            /* binding */
            env
          )
          /* harmony export */
        });
        var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./version.js */
          "./node_modules/onnxruntime-common/dist/esm/version.js"
        );
        let logLevelValue = "warning";
        const env = {
          wasm: {},
          webgl: {},
          webgpu: {},
          versions: { common: _version_js__WEBPACK_IMPORTED_MODULE_0__.version },
          set logLevel(value) {
            if (value === void 0) {
              return;
            }
            if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
              throw new Error(`Unsupported logging level: ${value}`);
            }
            logLevelValue = value;
          },
          get logLevel() {
            return logLevelValue;
          }
        };
        Object.defineProperty(env, "logLevel", { enumerable: true });
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/env.js": (
      /*!*********************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/env.js ***!
        \*********************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          env: () => (
            /* binding */
            env
          )
          /* harmony export */
        });
        var _env_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./env-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/env-impl.js"
        );
        const env = _env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env;
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/index.js": (
      /*!***********************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/index.js ***!
        \***********************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          InferenceSession: () => (
            /* reexport safe */
            _inference_session_js__WEBPACK_IMPORTED_MODULE_2__.InferenceSession
          ),
          /* harmony export */
          TRACE: () => (
            /* reexport safe */
            _trace_js__WEBPACK_IMPORTED_MODULE_6__.TRACE
          ),
          /* harmony export */
          TRACE_FUNC_BEGIN: () => (
            /* reexport safe */
            _trace_js__WEBPACK_IMPORTED_MODULE_6__.TRACE_FUNC_BEGIN
          ),
          /* harmony export */
          TRACE_FUNC_END: () => (
            /* reexport safe */
            _trace_js__WEBPACK_IMPORTED_MODULE_6__.TRACE_FUNC_END
          ),
          /* harmony export */
          Tensor: () => (
            /* reexport safe */
            _tensor_js__WEBPACK_IMPORTED_MODULE_3__.Tensor
          ),
          /* harmony export */
          TrainingSession: () => (
            /* reexport safe */
            _training_session_js__WEBPACK_IMPORTED_MODULE_9__.TrainingSession
          ),
          /* harmony export */
          env: () => (
            /* reexport safe */
            _env_js__WEBPACK_IMPORTED_MODULE_1__.env
          ),
          /* harmony export */
          registerBackend: () => (
            /* reexport safe */
            _backend_js__WEBPACK_IMPORTED_MODULE_0__.registerBackend
          )
          /* harmony export */
        });
        var _backend_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./backend.js */
          "./node_modules/onnxruntime-common/dist/esm/backend.js"
        );
        var _env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./env.js */
          "./node_modules/onnxruntime-common/dist/esm/env.js"
        );
        var _inference_session_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./inference-session.js */
          "./node_modules/onnxruntime-common/dist/esm/inference-session.js"
        );
        var _tensor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./tensor.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor.js"
        );
        var _tensor_conversion_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
          /*! ./tensor-conversion.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js"
        );
        var _tensor_factory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
          /*! ./tensor-factory.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-factory.js"
        );
        var _trace_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
          /*! ./trace.js */
          "./node_modules/onnxruntime-common/dist/esm/trace.js"
        );
        var _onnx_model_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
          /*! ./onnx-model.js */
          "./node_modules/onnxruntime-common/dist/esm/onnx-model.js"
        );
        var _onnx_value_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
          /*! ./onnx-value.js */
          "./node_modules/onnxruntime-common/dist/esm/onnx-value.js"
        );
        var _training_session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
          /*! ./training-session.js */
          "./node_modules/onnxruntime-common/dist/esm/training-session.js"
        );
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js": (
      /*!****************************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js ***!
        \****************************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          InferenceSession: () => (
            /* binding */
            InferenceSession
          )
          /* harmony export */
        });
        var _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./backend-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/backend-impl.js"
        );
        var _tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./tensor.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor.js"
        );
        var _trace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./trace.js */
          "./node_modules/onnxruntime-common/dist/esm/trace.js"
        );
        class InferenceSession {
          constructor(handler) {
            this.handler = handler;
          }
          async run(feeds, arg1, arg2) {
            (0, _trace_js__WEBPACK_IMPORTED_MODULE_2__.TRACE_FUNC_BEGIN)();
            const fetches = {};
            let options2 = {};
            if (typeof feeds !== "object" || feeds === null || feeds instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor || Array.isArray(feeds)) {
              throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
            }
            let isFetchesEmpty = true;
            if (typeof arg1 === "object") {
              if (arg1 === null) {
                throw new TypeError("Unexpected argument[1]: cannot be null.");
              }
              if (arg1 instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                throw new TypeError("'fetches' cannot be a Tensor");
              }
              if (Array.isArray(arg1)) {
                if (arg1.length === 0) {
                  throw new TypeError("'fetches' cannot be an empty array.");
                }
                isFetchesEmpty = false;
                for (const name of arg1) {
                  if (typeof name !== "string") {
                    throw new TypeError("'fetches' must be a string array or an object.");
                  }
                  if (this.outputNames.indexOf(name) === -1) {
                    throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                  }
                  fetches[name] = null;
                }
                if (typeof arg2 === "object" && arg2 !== null) {
                  options2 = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                let isFetches = false;
                const arg1Keys = Object.getOwnPropertyNames(arg1);
                for (const name of this.outputNames) {
                  if (arg1Keys.indexOf(name) !== -1) {
                    const v = arg1[name];
                    if (v === null || v instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                      isFetches = true;
                      isFetchesEmpty = false;
                      fetches[name] = v;
                    }
                  }
                }
                if (isFetches) {
                  if (typeof arg2 === "object" && arg2 !== null) {
                    options2 = arg2;
                  } else if (typeof arg2 !== "undefined") {
                    throw new TypeError("'options' must be an object.");
                  }
                } else {
                  options2 = arg1;
                }
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
            }
            for (const name of this.inputNames) {
              if (typeof feeds[name] === "undefined") {
                throw new Error(`input '${name}' is missing in 'feeds'.`);
              }
            }
            if (isFetchesEmpty) {
              for (const name of this.outputNames) {
                fetches[name] = null;
              }
            }
            const results = await this.handler.run(feeds, fetches, options2);
            const returnValue = {};
            for (const key in results) {
              if (Object.hasOwnProperty.call(results, key)) {
                const result = results[key];
                if (result instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                  returnValue[key] = result;
                } else {
                  returnValue[key] = new _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(result.type, result.data, result.dims);
                }
              }
            }
            (0, _trace_js__WEBPACK_IMPORTED_MODULE_2__.TRACE_FUNC_END)();
            return returnValue;
          }
          async release() {
            return this.handler.dispose();
          }
          static async create(arg0, arg1, arg2, arg3) {
            (0, _trace_js__WEBPACK_IMPORTED_MODULE_2__.TRACE_FUNC_BEGIN)();
            let filePathOrUint8Array;
            let options2 = {};
            if (typeof arg0 === "string") {
              filePathOrUint8Array = arg0;
              if (typeof arg1 === "object" && arg1 !== null) {
                options2 = arg1;
              } else if (typeof arg1 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (arg0 instanceof Uint8Array) {
              filePathOrUint8Array = arg0;
              if (typeof arg1 === "object" && arg1 !== null) {
                options2 = arg1;
              } else if (typeof arg1 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
              const buffer2 = arg0;
              let byteOffset = 0;
              let byteLength = arg0.byteLength;
              if (typeof arg1 === "object" && arg1 !== null) {
                options2 = arg1;
              } else if (typeof arg1 === "number") {
                byteOffset = arg1;
                if (!Number.isSafeInteger(byteOffset)) {
                  throw new RangeError("'byteOffset' must be an integer.");
                }
                if (byteOffset < 0 || byteOffset >= buffer2.byteLength) {
                  throw new RangeError(`'byteOffset' is out of range [0, ${buffer2.byteLength}).`);
                }
                byteLength = arg0.byteLength - byteOffset;
                if (typeof arg2 === "number") {
                  byteLength = arg2;
                  if (!Number.isSafeInteger(byteLength)) {
                    throw new RangeError("'byteLength' must be an integer.");
                  }
                  if (byteLength <= 0 || byteOffset + byteLength > buffer2.byteLength) {
                    throw new RangeError(`'byteLength' is out of range (0, ${buffer2.byteLength - byteOffset}].`);
                  }
                  if (typeof arg3 === "object" && arg3 !== null) {
                    options2 = arg3;
                  } else if (typeof arg3 !== "undefined") {
                    throw new TypeError("'options' must be an object.");
                  }
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'byteLength' must be a number.");
                }
              } else if (typeof arg1 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
              filePathOrUint8Array = new Uint8Array(buffer2, byteOffset, byteLength);
            } else {
              throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
            }
            const [backend, optionsWithValidatedEPs] = await (0, _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__.resolveBackendAndExecutionProviders)(options2);
            const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);
            (0, _trace_js__WEBPACK_IMPORTED_MODULE_2__.TRACE_FUNC_END)();
            return new InferenceSession(handler);
          }
          startProfiling() {
            this.handler.startProfiling();
          }
          endProfiling() {
            this.handler.endProfiling();
          }
          get inputNames() {
            return this.handler.inputNames;
          }
          get outputNames() {
            return this.handler.outputNames;
          }
        }
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/inference-session.js": (
      /*!***********************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/inference-session.js ***!
        \***********************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          InferenceSession: () => (
            /* binding */
            InferenceSession
          )
          /* harmony export */
        });
        var _inference_session_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./inference-session-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"
        );
        const InferenceSession = _inference_session_impl_js__WEBPACK_IMPORTED_MODULE_0__.InferenceSession;
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/onnx-model.js": (
      /*!****************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/onnx-model.js ***!
        \****************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/onnx-value.js": (
      /*!****************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/onnx-value.js ***!
        \****************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js": (
      /*!****************************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js ***!
        \****************************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          tensorToDataURL: () => (
            /* binding */
            tensorToDataURL
          ),
          /* harmony export */
          tensorToImageData: () => (
            /* binding */
            tensorToImageData
          )
          /* harmony export */
        });
        const tensorToDataURL = (tensor, options2) => {
          const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
          canvas.width = tensor.dims[3];
          canvas.height = tensor.dims[2];
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let width;
            let height;
            if (options2?.tensorLayout !== void 0 && options2.tensorLayout === "NHWC") {
              width = tensor.dims[2];
              height = tensor.dims[3];
            } else {
              width = tensor.dims[3];
              height = tensor.dims[2];
            }
            const inputformat = options2?.format !== void 0 ? options2.format : "RGB";
            const norm = options2?.norm;
            let normMean;
            let normBias;
            if (norm === void 0 || norm.mean === void 0) {
              normMean = [255, 255, 255, 255];
            } else {
              if (typeof norm.mean === "number") {
                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
              } else {
                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
                if (norm.mean[3] !== void 0) {
                  normMean[3] = norm.mean[3];
                }
              }
            }
            if (norm === void 0 || norm.bias === void 0) {
              normBias = [0, 0, 0, 0];
            } else {
              if (typeof norm.bias === "number") {
                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
              } else {
                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
                if (norm.bias[3] !== void 0) {
                  normBias[3] = norm.bias[3];
                }
              }
            }
            const stride = height * width;
            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
            if (inputformat === "RGBA") {
              rTensorPointer = 0;
              gTensorPointer = stride;
              bTensorPointer = stride * 2;
              aTensorPointer = stride * 3;
            } else if (inputformat === "RGB") {
              rTensorPointer = 0;
              gTensorPointer = stride;
              bTensorPointer = stride * 2;
            } else if (inputformat === "RBG") {
              rTensorPointer = 0;
              bTensorPointer = stride;
              gTensorPointer = stride * 2;
            }
            for (let i = 0; i < height; i++) {
              for (let j = 0; j < width; j++) {
                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
                const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
                pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
                pixels2DContext.fillRect(j, i, 1, 1);
              }
            }
            if ("toDataURL" in canvas) {
              return canvas.toDataURL();
            } else {
              throw new Error("toDataURL is not supported");
            }
          } else {
            throw new Error("Can not access image data");
          }
        };
        const tensorToImageData = (tensor, options2) => {
          const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
          let image;
          if (pixels2DContext != null) {
            let width;
            let height;
            let channels;
            if (options2?.tensorLayout !== void 0 && options2.tensorLayout === "NHWC") {
              width = tensor.dims[2];
              height = tensor.dims[1];
              channels = tensor.dims[3];
            } else {
              width = tensor.dims[3];
              height = tensor.dims[2];
              channels = tensor.dims[1];
            }
            const inputformat = options2 !== void 0 ? options2.format !== void 0 ? options2.format : "RGB" : "RGB";
            const norm = options2?.norm;
            let normMean;
            let normBias;
            if (norm === void 0 || norm.mean === void 0) {
              normMean = [255, 255, 255, 255];
            } else {
              if (typeof norm.mean === "number") {
                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
              } else {
                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
                if (norm.mean[3] !== void 0) {
                  normMean[3] = norm.mean[3];
                }
              }
            }
            if (norm === void 0 || norm.bias === void 0) {
              normBias = [0, 0, 0, 0];
            } else {
              if (typeof norm.bias === "number") {
                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
              } else {
                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
                if (norm.bias[3] !== void 0) {
                  normBias[3] = norm.bias[3];
                }
              }
            }
            const stride = height * width;
            if (options2 !== void 0) {
              if (options2.format !== void 0 && (channels === 4 && options2.format !== "RGBA") || channels === 3 && (options2.format !== "RGB" && options2.format !== "BGR")) {
                throw new Error("Tensor format doesn't match input tensor dims");
              }
            }
            const step = 4;
            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
            let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
            if (inputformat === "RGBA") {
              rTensorPointer = 0;
              gTensorPointer = stride;
              bTensorPointer = stride * 2;
              aTensorPointer = stride * 3;
            } else if (inputformat === "RGB") {
              rTensorPointer = 0;
              gTensorPointer = stride;
              bTensorPointer = stride * 2;
            } else if (inputformat === "RBG") {
              rTensorPointer = 0;
              bTensorPointer = stride;
              gTensorPointer = stride * 2;
            }
            image = pixels2DContext.createImageData(width, height);
            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
              image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
            }
          } else {
            throw new Error("Can not access image data");
          }
          return image;
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js": (
      /*!***********************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-conversion.js ***!
        \***********************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js": (
      /*!*************************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js ***!
        \*************************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          bufferToTensor: () => (
            /* binding */
            bufferToTensor
          ),
          /* harmony export */
          tensorFromGpuBuffer: () => (
            /* binding */
            tensorFromGpuBuffer
          ),
          /* harmony export */
          tensorFromImage: () => (
            /* binding */
            tensorFromImage
          ),
          /* harmony export */
          tensorFromPinnedBuffer: () => (
            /* binding */
            tensorFromPinnedBuffer
          ),
          /* harmony export */
          tensorFromTexture: () => (
            /* binding */
            tensorFromTexture
          )
          /* harmony export */
        });
        var _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./tensor-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-impl.js"
        );
        const bufferToTensor = (buffer2, options2) => {
          if (buffer2 === void 0) {
            throw new Error("Image buffer must be defined");
          }
          if (options2.height === void 0 || options2.width === void 0) {
            throw new Error("Image height and width must be defined");
          }
          if (options2.tensorLayout === "NHWC") {
            throw new Error("NHWC Tensor layout is not supported yet");
          }
          const { height, width } = options2;
          const norm = options2.norm ?? { mean: 255, bias: 0 };
          let normMean;
          let normBias;
          if (typeof norm.mean === "number") {
            normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
          } else {
            normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
          }
          if (typeof norm.bias === "number") {
            normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
          } else {
            normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
          }
          const inputformat = options2.format !== void 0 ? options2.format : "RGBA";
          const outputformat = options2.tensorFormat !== void 0 ? options2.tensorFormat !== void 0 ? options2.tensorFormat : "RGB" : "RGB";
          const stride = height * width;
          const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
          let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGB") {
            step = 3;
            rImagePointer = 0;
            gImagePointer = 1;
            bImagePointer = 2;
            aImagePointer = -1;
          }
          if (outputformat === "RGBA") {
            aTensorPointer = stride * 3;
          } else if (outputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          } else if (outputformat === "BGR") {
            bTensorPointer = 0;
            gTensorPointer = stride;
            rTensorPointer = stride * 2;
          }
          for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
            float32Data[rTensorPointer++] = (buffer2[rImagePointer] + normBias[0]) / normMean[0];
            float32Data[gTensorPointer++] = (buffer2[gImagePointer] + normBias[1]) / normMean[1];
            float32Data[bTensorPointer++] = (buffer2[bImagePointer] + normBias[2]) / normMean[2];
            if (aTensorPointer !== -1 && aImagePointer !== -1) {
              float32Data[aTensorPointer++] = (buffer2[aImagePointer] + normBias[3]) / normMean[3];
            }
          }
          const outputTensor = outputformat === "RGBA" ? new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor("float32", float32Data, [1, 4, height, width]) : new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor("float32", float32Data, [1, 3, height, width]);
          return outputTensor;
        };
        const tensorFromImage = async (image, options2) => {
          const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
          const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
          const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
          const isString = typeof image === "string";
          let data;
          let bufferToTensorOptions = options2 ?? {};
          const createCanvas = () => {
            if (typeof document !== "undefined") {
              return document.createElement("canvas");
            } else if (typeof OffscreenCanvas !== "undefined") {
              return new OffscreenCanvas(1, 1);
            } else {
              throw new Error("Canvas is not supported");
            }
          };
          const createCanvasContext = (canvas) => {
            if (canvas instanceof HTMLCanvasElement) {
              return canvas.getContext("2d");
            } else if (canvas instanceof OffscreenCanvas) {
              return canvas.getContext("2d");
            } else {
              return null;
            }
          };
          if (isHTMLImageEle) {
            const canvas = createCanvas();
            canvas.width = image.width;
            canvas.height = image.height;
            const pixels2DContext = createCanvasContext(canvas);
            if (pixels2DContext != null) {
              let height = image.height;
              let width = image.width;
              if (options2 !== void 0 && options2.resizedHeight !== void 0 && options2.resizedWidth !== void 0) {
                height = options2.resizedHeight;
                width = options2.resizedWidth;
              }
              if (options2 !== void 0) {
                bufferToTensorOptions = options2;
                if (options2.tensorFormat !== void 0) {
                  throw new Error("Image input config format must be RGBA for HTMLImageElement");
                } else {
                  bufferToTensorOptions.tensorFormat = "RGBA";
                }
                bufferToTensorOptions.height = height;
                bufferToTensorOptions.width = width;
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
                bufferToTensorOptions.height = height;
                bufferToTensorOptions.width = width;
              }
              pixels2DContext.drawImage(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else if (isImageDataEle) {
            let height;
            let width;
            if (options2 !== void 0 && options2.resizedWidth !== void 0 && options2.resizedHeight !== void 0) {
              height = options2.resizedHeight;
              width = options2.resizedWidth;
            } else {
              height = image.height;
              width = image.width;
            }
            if (options2 !== void 0) {
              bufferToTensorOptions = options2;
            }
            bufferToTensorOptions.format = "RGBA";
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            if (options2 !== void 0) {
              const tempCanvas = createCanvas();
              tempCanvas.width = width;
              tempCanvas.height = height;
              const pixels2DContext = createCanvasContext(tempCanvas);
              if (pixels2DContext != null) {
                pixels2DContext.putImageData(image, 0, 0);
                data = pixels2DContext.getImageData(0, 0, width, height).data;
              } else {
                throw new Error("Can not access image data");
              }
            } else {
              data = image.data;
            }
          } else if (isImageBitmap) {
            if (options2 === void 0) {
              throw new Error("Please provide image config with format for Imagebitmap");
            }
            const canvas = createCanvas();
            canvas.width = image.width;
            canvas.height = image.height;
            const pixels2DContext = createCanvasContext(canvas);
            if (pixels2DContext != null) {
              const height = image.height;
              const width = image.width;
              pixels2DContext.drawImage(image, 0, 0, width, height);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
              return bufferToTensor(data, bufferToTensorOptions);
            } else {
              throw new Error("Can not access image data");
            }
          } else if (isString) {
            return new Promise((resolve, reject) => {
              const canvas = createCanvas();
              const context = createCanvasContext(canvas);
              if (!image || !context) {
                return reject();
              }
              const newImage = new Image();
              newImage.crossOrigin = "Anonymous";
              newImage.src = image;
              newImage.onload = () => {
                canvas.width = newImage.width;
                canvas.height = newImage.height;
                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
                const img = context.getImageData(0, 0, canvas.width, canvas.height);
                bufferToTensorOptions.height = canvas.height;
                bufferToTensorOptions.width = canvas.width;
                resolve(bufferToTensor(img.data, bufferToTensorOptions));
              };
            });
          } else {
            throw new Error("Input data provided is not supported - aborted tensor creation");
          }
          if (data !== void 0) {
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Input data provided is not supported - aborted tensor creation");
          }
        };
        const tensorFromTexture = (texture, options2) => {
          const { width, height, download, dispose } = options2;
          const dims = [1, height, width, 4];
          return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
        };
        const tensorFromGpuBuffer = (gpuBuffer, options2) => {
          const { dataType, dims, download, dispose } = options2;
          return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
        };
        const tensorFromPinnedBuffer = (type, buffer2, dims) => new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({ location: "cpu-pinned", type, data: buffer2, dims: dims ?? [buffer2.length] });
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-factory.js": (
      /*!********************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-factory.js ***!
        \********************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js": (
      /*!******************************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js ***!
        \******************************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP: () => (
            /* binding */
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP
          ),
          /* harmony export */
          NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP: () => (
            /* binding */
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP
          ),
          /* harmony export */
          checkTypedArray: () => (
            /* binding */
            checkTypedArray
          )
          /* harmony export */
        });
        const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
          ["float32", Float32Array],
          ["uint8", Uint8Array],
          ["int8", Int8Array],
          ["uint16", Uint16Array],
          ["int16", Int16Array],
          ["int32", Int32Array],
          ["bool", Uint8Array],
          ["float64", Float64Array],
          ["uint32", Uint32Array]
        ]);
        const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
          [Float32Array, "float32"],
          [Uint8Array, "uint8"],
          [Int8Array, "int8"],
          [Uint16Array, "uint16"],
          [Int16Array, "int16"],
          [Int32Array, "int32"],
          [Float64Array, "float64"],
          [Uint32Array, "uint32"]
        ]);
        let isTypedArrayChecked = false;
        const checkTypedArray = () => {
          if (!isTypedArrayChecked) {
            isTypedArrayChecked = true;
            const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && BigInt64Array.from;
            const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && BigUint64Array.from;
            const isFloat16ArrayAvailable = typeof Float16Array !== "undefined" && Float16Array.from;
            if (isBigInt64ArrayAvailable) {
              NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
              NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
            }
            if (isBigUint64ArrayAvailable) {
              NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
              NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
            }
            if (isFloat16ArrayAvailable) {
              NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Float16Array);
              NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, "float16");
            } else {
              NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("float16", Uint16Array);
            }
          }
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-impl.js": (
      /*!*****************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-impl.js ***!
        \*****************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Tensor: () => (
            /* binding */
            Tensor
          )
          /* harmony export */
        });
        var _tensor_conversion_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./tensor-conversion-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"
        );
        var _tensor_factory_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./tensor-factory-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"
        );
        var _tensor_impl_type_mapping_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./tensor-impl-type-mapping.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"
        );
        var _tensor_utils_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./tensor-utils-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"
        );
        class Tensor {
          /**
           * implementation.
           */
          constructor(arg0, arg1, arg2) {
            (0, _tensor_impl_type_mapping_js__WEBPACK_IMPORTED_MODULE_2__.checkTypedArray)();
            let type;
            let dims;
            if (typeof arg0 === "object" && "location" in arg0) {
              this.dataLocation = arg0.location;
              type = arg0.type;
              dims = arg0.dims;
              switch (arg0.location) {
                case "cpu-pinned": {
                  const expectedTypedArrayConstructor = _tensor_impl_type_mapping_js__WEBPACK_IMPORTED_MODULE_2__.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                  if (!expectedTypedArrayConstructor) {
                    throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                  }
                  if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                    throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                  }
                  this.cpuData = arg0.data;
                  break;
                }
                case "texture": {
                  if (type !== "float32") {
                    throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                  }
                  this.gpuTextureData = arg0.texture;
                  this.downloader = arg0.download;
                  this.disposer = arg0.dispose;
                  break;
                }
                case "gpu-buffer": {
                  if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "uint8" && type !== "bool") {
                    throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                  }
                  this.gpuBufferData = arg0.gpuBuffer;
                  this.downloader = arg0.download;
                  this.disposer = arg0.dispose;
                  break;
                }
                default:
                  throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
              }
            } else {
              let data;
              let maybeDims;
              if (typeof arg0 === "string") {
                type = arg0;
                maybeDims = arg2;
                if (arg0 === "string") {
                  if (!Array.isArray(arg1)) {
                    throw new TypeError("A string tensor's data must be a string array.");
                  }
                  data = arg1;
                } else {
                  const typedArrayConstructor = _tensor_impl_type_mapping_js__WEBPACK_IMPORTED_MODULE_2__.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                  if (typedArrayConstructor === void 0) {
                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                  }
                  if (Array.isArray(arg1)) {
                    if (arg0 === "float16" && typedArrayConstructor === Uint16Array) {
                      throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                    } else if (arg0 === "uint64" || arg0 === "int64") {
                      data = typedArrayConstructor.from(arg1, BigInt);
                    } else {
                      data = typedArrayConstructor.from(arg1);
                    }
                  } else if (arg1 instanceof typedArrayConstructor) {
                    data = arg1;
                  } else {
                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                  }
                }
              } else {
                maybeDims = arg1;
                if (Array.isArray(arg0)) {
                  if (arg0.length === 0) {
                    throw new TypeError("Tensor type cannot be inferred from an empty array.");
                  }
                  const firstElementType = typeof arg0[0];
                  if (firstElementType === "string") {
                    type = "string";
                    data = arg0;
                  } else if (firstElementType === "boolean") {
                    type = "bool";
                    data = Uint8Array.from(arg0);
                  } else {
                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                  }
                } else {
                  const mappedType = _tensor_impl_type_mapping_js__WEBPACK_IMPORTED_MODULE_2__.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                  if (mappedType === void 0) {
                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                  }
                  type = mappedType;
                  data = arg0;
                }
              }
              if (maybeDims === void 0) {
                maybeDims = [data.length];
              } else if (!Array.isArray(maybeDims)) {
                throw new TypeError("A tensor's dims must be a number array");
              }
              dims = maybeDims;
              this.cpuData = data;
              this.dataLocation = "cpu";
            }
            const size3 = (0, _tensor_utils_impl_js__WEBPACK_IMPORTED_MODULE_3__.calculateSize)(dims);
            if (this.cpuData && size3 !== this.cpuData.length) {
              throw new Error(`Tensor's size(${size3}) does not match data length(${this.cpuData.length}).`);
            }
            this.type = type;
            this.dims = dims;
            this.size = size3;
          }
          // #endregion
          // #region factory
          static async fromImage(image, options2) {
            return (0, _tensor_factory_impl_js__WEBPACK_IMPORTED_MODULE_1__.tensorFromImage)(image, options2);
          }
          static fromTexture(texture, options2) {
            return (0, _tensor_factory_impl_js__WEBPACK_IMPORTED_MODULE_1__.tensorFromTexture)(texture, options2);
          }
          static fromGpuBuffer(gpuBuffer, options2) {
            return (0, _tensor_factory_impl_js__WEBPACK_IMPORTED_MODULE_1__.tensorFromGpuBuffer)(gpuBuffer, options2);
          }
          static fromPinnedBuffer(type, buffer2, dims) {
            return (0, _tensor_factory_impl_js__WEBPACK_IMPORTED_MODULE_1__.tensorFromPinnedBuffer)(type, buffer2, dims);
          }
          // #endregion
          // #region conversions
          toDataURL(options2) {
            return (0, _tensor_conversion_impl_js__WEBPACK_IMPORTED_MODULE_0__.tensorToDataURL)(this, options2);
          }
          toImageData(options2) {
            return (0, _tensor_conversion_impl_js__WEBPACK_IMPORTED_MODULE_0__.tensorToImageData)(this, options2);
          }
          // #endregion
          // #region properties
          get data() {
            this.ensureValid();
            if (!this.cpuData) {
              throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
            }
            return this.cpuData;
          }
          get location() {
            return this.dataLocation;
          }
          get texture() {
            this.ensureValid();
            if (!this.gpuTextureData) {
              throw new Error("The data is not stored as a WebGL texture.");
            }
            return this.gpuTextureData;
          }
          get gpuBuffer() {
            this.ensureValid();
            if (!this.gpuBufferData) {
              throw new Error("The data is not stored as a WebGPU buffer.");
            }
            return this.gpuBufferData;
          }
          // #endregion
          // #region methods
          async getData(releaseData) {
            this.ensureValid();
            switch (this.dataLocation) {
              case "cpu":
              case "cpu-pinned":
                return this.data;
              case "texture":
              case "gpu-buffer": {
                if (!this.downloader) {
                  throw new Error("The current tensor is not created with a specified data downloader.");
                }
                if (this.isDownloading) {
                  throw new Error("The current tensor is being downloaded.");
                }
                try {
                  this.isDownloading = true;
                  const data = await this.downloader();
                  this.downloader = void 0;
                  this.dataLocation = "cpu";
                  this.cpuData = data;
                  if (releaseData && this.disposer) {
                    this.disposer();
                    this.disposer = void 0;
                  }
                  return data;
                } finally {
                  this.isDownloading = false;
                }
              }
              default:
                throw new Error(`cannot get data from location: ${this.dataLocation}`);
            }
          }
          dispose() {
            if (this.isDownloading) {
              throw new Error("The current tensor is being downloaded.");
            }
            if (this.disposer) {
              this.disposer();
              this.disposer = void 0;
            }
            this.cpuData = void 0;
            this.gpuTextureData = void 0;
            this.gpuBufferData = void 0;
            this.downloader = void 0;
            this.isDownloading = void 0;
            this.dataLocation = "none";
          }
          // #endregion
          // #region tensor utilities
          ensureValid() {
            if (this.dataLocation === "none") {
              throw new Error("The tensor is disposed.");
            }
          }
          reshape(dims) {
            this.ensureValid();
            if (this.downloader || this.disposer) {
              throw new Error("Cannot reshape a tensor that owns GPU resource.");
            }
            return (0, _tensor_utils_impl_js__WEBPACK_IMPORTED_MODULE_3__.tensorReshape)(this, dims);
          }
        }
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js": (
      /*!***********************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js ***!
        \***********************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          calculateSize: () => (
            /* binding */
            calculateSize
          ),
          /* harmony export */
          tensorReshape: () => (
            /* binding */
            tensorReshape
          )
          /* harmony export */
        });
        var _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./tensor-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-impl.js"
        );
        const calculateSize = (dims) => {
          let size3 = 1;
          for (let i = 0; i < dims.length; i++) {
            const dim = dims[i];
            if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
              throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
            }
            if (dim < 0) {
              throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
            }
            size3 *= dim;
          }
          return size3;
        };
        const tensorReshape = (tensor, dims) => {
          switch (tensor.location) {
            case "cpu":
              return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor(tensor.type, tensor.data, dims);
            case "cpu-pinned":
              return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({
                location: "cpu-pinned",
                data: tensor.data,
                type: tensor.type,
                dims
              });
            case "texture":
              return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({
                location: "texture",
                texture: tensor.texture,
                type: tensor.type,
                dims
              });
            case "gpu-buffer":
              return new _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor({
                location: "gpu-buffer",
                gpuBuffer: tensor.gpuBuffer,
                type: tensor.type,
                dims
              });
            default:
              throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
          }
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/tensor.js": (
      /*!************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/tensor.js ***!
        \************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Tensor: () => (
            /* binding */
            Tensor
          )
          /* harmony export */
        });
        var _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./tensor-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor-impl.js"
        );
        const Tensor = _tensor_impl_js__WEBPACK_IMPORTED_MODULE_0__.Tensor;
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/trace.js": (
      /*!***********************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/trace.js ***!
        \***********************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          TRACE: () => (
            /* binding */
            TRACE
          ),
          /* harmony export */
          TRACE_FUNC_BEGIN: () => (
            /* binding */
            TRACE_FUNC_BEGIN
          ),
          /* harmony export */
          TRACE_FUNC_END: () => (
            /* binding */
            TRACE_FUNC_END
          )
          /* harmony export */
        });
        var _env_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./env-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/env-impl.js"
        );
        const TRACE = (deviceType, label) => {
          if (typeof _env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace === "undefined" ? !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.wasm.trace : !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace) {
            return;
          }
          console.timeStamp(`${deviceType}::ORT::${label}`);
        };
        const TRACE_FUNC = (msg, extraMsg) => {
          const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
          let hasTraceFunc = false;
          for (let i = 0; i < stack.length; i++) {
            if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
              let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
              if (extraMsg) {
                label += `::${extraMsg}`;
              }
              TRACE("CPU", label);
              return;
            }
            if (stack[i].includes("TRACE_FUNC")) {
              hasTraceFunc = true;
            }
          }
        };
        const TRACE_FUNC_BEGIN = (extraMsg) => {
          if (typeof _env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace === "undefined" ? !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.wasm.trace : !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace) {
            return;
          }
          TRACE_FUNC("BEGIN", extraMsg);
        };
        const TRACE_FUNC_END = (extraMsg) => {
          if (typeof _env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace === "undefined" ? !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.wasm.trace : !_env_impl_js__WEBPACK_IMPORTED_MODULE_0__.env.trace) {
            return;
          }
          TRACE_FUNC("END", extraMsg);
        };
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/training-session-impl.js": (
      /*!***************************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/training-session-impl.js ***!
        \***************************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          TrainingSession: () => (
            /* binding */
            TrainingSession
          )
          /* harmony export */
        });
        var _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./backend-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/backend-impl.js"
        );
        var _tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./tensor.js */
          "./node_modules/onnxruntime-common/dist/esm/tensor.js"
        );
        const noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
        class TrainingSession {
          constructor(handler, hasOptimizerModel, hasEvalModel) {
            this.handler = handler;
            this.hasOptimizerModel = hasOptimizerModel;
            this.hasEvalModel = hasEvalModel;
          }
          get trainingInputNames() {
            return this.handler.inputNames;
          }
          get trainingOutputNames() {
            return this.handler.outputNames;
          }
          get evalInputNames() {
            if (this.hasEvalModel) {
              return this.handler.evalInputNames;
            } else {
              throw new Error("This training session has no evalModel loaded.");
            }
          }
          get evalOutputNames() {
            if (this.hasEvalModel) {
              return this.handler.evalOutputNames;
            } else {
              throw new Error("This training session has no evalModel loaded.");
            }
          }
          static async create(trainingOptions, sessionOptions) {
            const evalModel = trainingOptions.evalModel || "";
            const optimizerModel = trainingOptions.optimizerModel || "";
            const options2 = sessionOptions || {};
            const [backend, optionsWithValidatedEPs] = await (0, _backend_impl_js__WEBPACK_IMPORTED_MODULE_0__.resolveBackendAndExecutionProviders)(options2);
            if (backend.createTrainingSessionHandler) {
              const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, optionsWithValidatedEPs);
              return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
            } else {
              throw new Error(noBackendErrMsg);
            }
          }
          /**
           * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
           * the given parameters to SessionHandler.FetchesType and RunOptions.
           *
           * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
           * names.
           * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
           * names.
           * @param feeds the required input
           * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
           * @param arg2 optional RunOptions object.
           * @returns
           */
          typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
            const fetches = {};
            let options2 = {};
            if (typeof feeds !== "object" || feeds === null || feeds instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor || Array.isArray(feeds)) {
              throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
            }
            let isFetchesEmpty = true;
            if (typeof arg1 === "object") {
              if (arg1 === null) {
                throw new TypeError("Unexpected argument[1]: cannot be null.");
              }
              if (arg1 instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                throw new TypeError("'fetches' cannot be a Tensor");
              }
              if (Array.isArray(arg1)) {
                if (arg1.length === 0) {
                  throw new TypeError("'fetches' cannot be an empty array.");
                }
                isFetchesEmpty = false;
                for (const name of arg1) {
                  if (typeof name !== "string") {
                    throw new TypeError("'fetches' must be a string array or an object.");
                  }
                  if (outputNames.indexOf(name) === -1) {
                    throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                  }
                  fetches[name] = null;
                }
                if (typeof arg2 === "object" && arg2 !== null) {
                  options2 = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                let isFetches = false;
                const arg1Keys = Object.getOwnPropertyNames(arg1);
                for (const name of outputNames) {
                  if (arg1Keys.indexOf(name) !== -1) {
                    const v = arg1[name];
                    if (v === null || v instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                      isFetches = true;
                      isFetchesEmpty = false;
                      fetches[name] = v;
                    }
                  }
                }
                if (isFetches) {
                  if (typeof arg2 === "object" && arg2 !== null) {
                    options2 = arg2;
                  } else if (typeof arg2 !== "undefined") {
                    throw new TypeError("'options' must be an object.");
                  }
                } else {
                  options2 = arg1;
                }
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
            }
            for (const name of inputNames) {
              if (typeof feeds[name] === "undefined") {
                throw new Error(`input '${name}' is missing in 'feeds'.`);
              }
            }
            if (isFetchesEmpty) {
              for (const name of outputNames) {
                fetches[name] = null;
              }
            }
            return [fetches, options2];
          }
          /**
           * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
           * and changes it into a map of Tensors.
           *
           * @param results
           * @returns
           */
          convertHandlerReturnTypeToMapOfTensors(results) {
            const returnValue = {};
            for (const key in results) {
              if (Object.hasOwnProperty.call(results, key)) {
                const result = results[key];
                if (result instanceof _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor) {
                  returnValue[key] = result;
                } else {
                  returnValue[key] = new _tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(result.type, result.data, result.dims);
                }
              }
            }
            return returnValue;
          }
          async lazyResetGrad() {
            await this.handler.lazyResetGrad();
          }
          async runTrainStep(feeds, arg1, arg2) {
            const [fetches, options2] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
            const results = await this.handler.runTrainStep(feeds, fetches, options2);
            return this.convertHandlerReturnTypeToMapOfTensors(results);
          }
          async runOptimizerStep(options2) {
            if (this.hasOptimizerModel) {
              await this.handler.runOptimizerStep(options2 || {});
            } else {
              throw new Error("This TrainingSession has no OptimizerModel loaded.");
            }
          }
          async runEvalStep(feeds, arg1, arg2) {
            if (this.hasEvalModel) {
              const [fetches, options2] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
              const results = await this.handler.runEvalStep(feeds, fetches, options2);
              return this.convertHandlerReturnTypeToMapOfTensors(results);
            } else {
              throw new Error("This TrainingSession has no EvalModel loaded.");
            }
          }
          async getParametersSize(trainableOnly = true) {
            return this.handler.getParametersSize(trainableOnly);
          }
          async loadParametersBuffer(array, trainableOnly = true) {
            const paramsSize = await this.getParametersSize(trainableOnly);
            if (array.length !== 4 * paramsSize) {
              throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
            }
            return this.handler.loadParametersBuffer(array, trainableOnly);
          }
          async getContiguousParameters(trainableOnly = true) {
            return this.handler.getContiguousParameters(trainableOnly);
          }
          async release() {
            return this.handler.dispose();
          }
        }
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/training-session.js": (
      /*!**********************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/training-session.js ***!
        \**********************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          TrainingSession: () => (
            /* binding */
            TrainingSession
          )
          /* harmony export */
        });
        var _training_session_impl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./training-session-impl.js */
          "./node_modules/onnxruntime-common/dist/esm/training-session-impl.js"
        );
        const TrainingSession = _training_session_impl_js__WEBPACK_IMPORTED_MODULE_0__.TrainingSession;
      }
    ),
    /***/
    "./node_modules/onnxruntime-common/dist/esm/version.js": (
      /*!*************************************************************!*\
        !*** ./node_modules/onnxruntime-common/dist/esm/version.js ***!
        \*************************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          version: () => (
            /* binding */
            version
          )
          /* harmony export */
        });
        const version = "1.19.2";
      }
    ),
    /***/
    "./src/backends/onnx.js": (
      /*!******************************!*\
        !*** ./src/backends/onnx.js ***!
        \******************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        var _onnxruntime_webgpu__WEBPACK_IMPORTED_MODULE_2___namespace_cache;
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Tensor: () => (
            /* reexport safe */
            onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__.Tensor
          ),
          /* harmony export */
          createInferenceSession: () => (
            /* binding */
            createInferenceSession
          ),
          /* harmony export */
          deviceToExecutionProviders: () => (
            /* binding */
            deviceToExecutionProviders
          ),
          /* harmony export */
          isONNXProxy: () => (
            /* binding */
            isONNXProxy
          ),
          /* harmony export */
          isONNXTensor: () => (
            /* binding */
            isONNXTensor
          )
          /* harmony export */
        });
        var _env_js__WEBPACK_IMPORTED_MODULE_0__2 = __webpack_require__2(
          /*! ../env.js */
          "./src/env.js"
        );
        var onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! onnxruntime-node */
          "onnxruntime-node"
        );
        var _onnxruntime_webgpu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! #onnxruntime-webgpu */
          "?cb4d"
        );
        var onnxruntime_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! onnxruntime-common */
          "./node_modules/onnxruntime-common/dist/esm/index.js"
        );
        const DEVICE_TO_EXECUTION_PROVIDER_MAPPING = Object.freeze({
          auto: null,
          // Auto-detect based on device and environment
          gpu: null,
          // Auto-detect GPU
          cpu: "cpu",
          // CPU
          wasm: "wasm",
          // WebAssembly
          webgpu: "webgpu",
          // WebGPU
          cuda: "cuda",
          // CUDA
          dml: "dml",
          // DirectML
          webnn: { name: "webnn", deviceType: "cpu" },
          // WebNN (default)
          "webnn-npu": { name: "webnn", deviceType: "npu" },
          // WebNN NPU
          "webnn-gpu": { name: "webnn", deviceType: "gpu" },
          // WebNN GPU
          "webnn-cpu": { name: "webnn", deviceType: "cpu" }
          // WebNN CPU
        });
        const supportedDevices = [];
        let defaultDevices;
        let ONNX;
        const ORT_SYMBOL = Symbol.for("onnxruntime");
        if (ORT_SYMBOL in globalThis) {
          ONNX = globalThis[ORT_SYMBOL];
        } else if (_env_js__WEBPACK_IMPORTED_MODULE_0__2.apis.IS_NODE_ENV) {
          ONNX = onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__["default"] ?? onnxruntime_node__WEBPACK_IMPORTED_MODULE_1__;
          switch (process.platform) {
            case "win32":
              supportedDevices.push("dml");
              break;
            case "linux":
              if (process.arch === "x64") {
                supportedDevices.push("cuda");
              }
              break;
            case "darwin":
              break;
          }
          supportedDevices.push("cpu");
          defaultDevices = ["cpu"];
        } else {
          ONNX = _onnxruntime_webgpu__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (_onnxruntime_webgpu__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__2.t(_onnxruntime_webgpu__WEBPACK_IMPORTED_MODULE_2__, 2));
          if (_env_js__WEBPACK_IMPORTED_MODULE_0__2.apis.IS_WEBNN_AVAILABLE) {
            supportedDevices.push("webnn-npu", "webnn-gpu", "webnn-cpu", "webnn");
          }
          if (_env_js__WEBPACK_IMPORTED_MODULE_0__2.apis.IS_WEBGPU_AVAILABLE) {
            supportedDevices.push("webgpu");
          }
          supportedDevices.push("wasm");
          defaultDevices = ["wasm"];
        }
        const InferenceSession = ONNX.InferenceSession;
        function deviceToExecutionProviders(device = null) {
          if (!device) return defaultDevices;
          switch (device) {
            case "auto":
              return supportedDevices;
            case "gpu":
              return supportedDevices.filter(
                (x) => ["webgpu", "cuda", "dml", "webnn-gpu"].includes(x)
              );
          }
          if (supportedDevices.includes(device)) {
            return [DEVICE_TO_EXECUTION_PROVIDER_MAPPING[device] ?? device];
          }
          throw new Error(`Unsupported device: "${device}". Should be one of: ${supportedDevices.join(", ")}.`);
        }
        let wasmInitPromise = null;
        async function createInferenceSession(buffer2, session_options, session_config) {
          if (wasmInitPromise) {
            await wasmInitPromise;
          }
          const sessionPromise = InferenceSession.create(buffer2, session_options);
          wasmInitPromise ??= sessionPromise;
          const session = await sessionPromise;
          session.config = session_config;
          return session;
        }
        function isONNXTensor(x) {
          return x instanceof ONNX.Tensor;
        }
        const ONNX_ENV = ONNX?.env;
        if (ONNX_ENV?.wasm) {
          ONNX_ENV.wasm.wasmPaths = `https://cdn.jsdelivr.net/npm/@huggingface/transformers@${_env_js__WEBPACK_IMPORTED_MODULE_0__2.env.version}/dist/`;
          ONNX_ENV.wasm.proxy = false;
          if (typeof crossOriginIsolated === "undefined" || !crossOriginIsolated) {
            ONNX_ENV.wasm.numThreads = 1;
          }
        }
        if (ONNX_ENV?.webgpu) {
          ONNX_ENV.webgpu.powerPreference = "high-performance";
        }
        function isONNXProxy() {
          return ONNX_ENV?.wasm?.proxy;
        }
        _env_js__WEBPACK_IMPORTED_MODULE_0__2.env.backends.onnx = ONNX_ENV;
      }
    ),
    /***/
    "./src/configs.js": (
      /*!************************!*\
        !*** ./src/configs.js ***!
        \************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          AutoConfig: () => (
            /* binding */
            AutoConfig
          ),
          /* harmony export */
          PretrainedConfig: () => (
            /* binding */
            PretrainedConfig
          ),
          /* harmony export */
          getKeyValueShapes: () => (
            /* binding */
            getKeyValueShapes
          )
          /* harmony export */
        });
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./utils/core.js */
          "./src/utils/core.js"
        );
        var _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./utils/hub.js */
          "./src/utils/hub.js"
        );
        async function loadConfig(pretrained_model_name_or_path, options2) {
          return await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_1__.getModelJSON)(pretrained_model_name_or_path, "config.json", true, options2);
        }
        function getNormalizedConfig(config2) {
          const mapping = {};
          let init_normalized_config = {};
          switch (config2.model_type) {
            // Sub-configs
            case "llava":
            case "paligemma":
            case "florence2":
              init_normalized_config = getNormalizedConfig(config2.text_config);
              break;
            case "moondream1":
              init_normalized_config = getNormalizedConfig(config2.phi_config);
              break;
            case "musicgen":
              init_normalized_config = getNormalizedConfig(config2.decoder);
              break;
            // Decoder-only models
            case "gpt2":
            case "gptj":
            case "jais":
            case "codegen":
            case "gpt_bigcode":
              mapping["num_heads"] = "n_head";
              mapping["num_layers"] = "n_layer";
              mapping["hidden_size"] = "n_embd";
              break;
            case "gpt_neox":
            case "stablelm":
            case "opt":
            case "phi":
            case "phi3":
            case "falcon":
              mapping["num_heads"] = "num_attention_heads";
              mapping["num_layers"] = "num_hidden_layers";
              mapping["hidden_size"] = "hidden_size";
              break;
            case "llama":
            case "olmo":
            case "mobilellm":
            case "granite":
            case "cohere":
            case "mistral":
            case "starcoder2":
            case "qwen2":
              mapping["num_heads"] = "num_key_value_heads";
              mapping["num_layers"] = "num_hidden_layers";
              mapping["hidden_size"] = "hidden_size";
              mapping["num_attention_heads"] = "num_attention_heads";
              break;
            case "gemma":
            case "gemma2":
              mapping["num_heads"] = "num_key_value_heads";
              mapping["num_layers"] = "num_hidden_layers";
              mapping["dim_kv"] = "head_dim";
              break;
            case "openelm":
              mapping["num_heads"] = "num_kv_heads";
              mapping["num_layers"] = "num_transformer_layers";
              mapping["dim_kv"] = "head_dim";
              break;
            case "gpt_neo":
            case "donut-swin":
              mapping["num_heads"] = "num_heads";
              mapping["num_layers"] = "num_layers";
              mapping["hidden_size"] = "hidden_size";
              break;
            case "bloom":
              mapping["num_heads"] = "n_head";
              mapping["num_layers"] = "n_layer";
              mapping["hidden_size"] = "hidden_size";
              break;
            case "mpt":
              mapping["num_heads"] = "n_heads";
              mapping["num_layers"] = "n_layers";
              mapping["hidden_size"] = "d_model";
              break;
            // Encoder-decoder models
            case "t5":
            case "mt5":
            case "longt5":
              mapping["num_decoder_layers"] = "num_decoder_layers";
              mapping["num_decoder_heads"] = "num_heads";
              mapping["decoder_dim_kv"] = "d_kv";
              mapping["num_encoder_layers"] = "num_layers";
              mapping["num_encoder_heads"] = "num_heads";
              mapping["encoder_dim_kv"] = "d_kv";
              break;
            case "bart":
            case "mbart":
            case "marian":
            case "whisper":
            case "m2m_100":
            case "blenderbot":
            case "blenderbot-small":
            case "florence2_language":
              mapping["num_decoder_layers"] = "decoder_layers";
              mapping["num_decoder_heads"] = "decoder_attention_heads";
              mapping["decoder_hidden_size"] = "d_model";
              mapping["num_encoder_layers"] = "encoder_layers";
              mapping["num_encoder_heads"] = "encoder_attention_heads";
              mapping["encoder_hidden_size"] = "d_model";
              break;
            case "speecht5":
              mapping["num_decoder_layers"] = "decoder_layers";
              mapping["num_decoder_heads"] = "decoder_attention_heads";
              mapping["decoder_hidden_size"] = "hidden_size";
              mapping["num_encoder_layers"] = "encoder_layers";
              mapping["num_encoder_heads"] = "encoder_attention_heads";
              mapping["encoder_hidden_size"] = "hidden_size";
              break;
            case "trocr":
              mapping["num_encoder_layers"] = mapping["num_decoder_layers"] = "decoder_layers";
              mapping["num_encoder_heads"] = mapping["num_decoder_heads"] = "decoder_attention_heads";
              mapping["encoder_hidden_size"] = mapping["decoder_hidden_size"] = "d_model";
              break;
            case "musicgen_decoder":
              mapping["num_encoder_layers"] = mapping["num_decoder_layers"] = "num_hidden_layers";
              mapping["num_encoder_heads"] = mapping["num_decoder_heads"] = "num_attention_heads";
              mapping["encoder_hidden_size"] = mapping["decoder_hidden_size"] = "hidden_size";
              break;
            case "vision-encoder-decoder":
              const decoderConfig = getNormalizedConfig(config2.decoder);
              const add_encoder_pkv = "num_decoder_layers" in decoderConfig;
              const result = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config2, ["model_type", "is_encoder_decoder"]);
              if (add_encoder_pkv) {
                result.num_decoder_layers = decoderConfig.num_decoder_layers;
                result.num_decoder_heads = decoderConfig.num_decoder_heads;
                result.decoder_hidden_size = decoderConfig.decoder_hidden_size;
                result.num_encoder_layers = decoderConfig.num_encoder_layers;
                result.num_encoder_heads = decoderConfig.num_encoder_heads;
                result.encoder_hidden_size = decoderConfig.encoder_hidden_size;
              } else {
                result.num_layers = decoderConfig.num_layers;
                result.num_heads = decoderConfig.num_heads;
                result.hidden_size = decoderConfig.hidden_size;
              }
              return result;
          }
          const normalized_config = {
            ...init_normalized_config,
            ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config2, ["model_type", "multi_query", "is_encoder_decoder"])
          };
          for (const key in mapping) {
            normalized_config[key] = config2[mapping[key]];
          }
          return normalized_config;
        }
        function getKeyValueShapes(config2, {
          prefix = "past_key_values"
        } = {}) {
          const decoderFeeds = {};
          const normalized_config = config2.normalized_config;
          const batch_size = 1;
          if (normalized_config.is_encoder_decoder && ("num_encoder_heads" in normalized_config && "num_decoder_heads" in normalized_config)) {
            const encoder_dim_kv = normalized_config.encoder_dim_kv ?? normalized_config.encoder_hidden_size / normalized_config.num_encoder_heads;
            const decoder_dim_kv = normalized_config.decoder_dim_kv ?? normalized_config.decoder_hidden_size / normalized_config.num_decoder_heads;
            const encoder_dims = [batch_size, normalized_config.num_encoder_heads, 0, encoder_dim_kv];
            const decoder_dims = [batch_size, normalized_config.num_decoder_heads, 0, decoder_dim_kv];
            for (let i = 0; i < normalized_config.num_decoder_layers; ++i) {
              decoderFeeds[`${prefix}.${i}.encoder.key`] = encoder_dims;
              decoderFeeds[`${prefix}.${i}.encoder.value`] = encoder_dims;
              decoderFeeds[`${prefix}.${i}.decoder.key`] = decoder_dims;
              decoderFeeds[`${prefix}.${i}.decoder.value`] = decoder_dims;
            }
          } else {
            const num_heads = normalized_config.num_heads;
            const num_layers = normalized_config.num_layers;
            const dim_kv = normalized_config.dim_kv ?? normalized_config.hidden_size / (normalized_config.num_attention_heads ?? num_heads);
            if (normalized_config.model_type === "falcon") {
              const dims = [batch_size * num_heads, 0, dim_kv];
              for (let i = 0; i < num_layers; ++i) {
                decoderFeeds[`${prefix}.${i}.key`] = dims;
                decoderFeeds[`${prefix}.${i}.value`] = dims;
              }
            } else if (normalized_config.multi_query) {
              const dims = [batch_size * num_heads, 0, 2 * dim_kv];
              for (let i = 0; i < num_layers; ++i) {
                decoderFeeds[`${prefix}.${i}.key_value`] = dims;
              }
            } else if (normalized_config.model_type === "bloom") {
              const keyDims = [batch_size * num_heads, dim_kv, 0];
              const valueDims = [batch_size * num_heads, 0, dim_kv];
              for (let i = 0; i < num_layers; ++i) {
                decoderFeeds[`${prefix}.${i}.key`] = keyDims;
                decoderFeeds[`${prefix}.${i}.value`] = valueDims;
              }
            } else if (normalized_config.model_type === "openelm") {
              for (let i = 0; i < num_layers; ++i) {
                const dims = [batch_size, num_heads[i], 0, dim_kv];
                decoderFeeds[`${prefix}.${i}.key`] = dims;
                decoderFeeds[`${prefix}.${i}.value`] = dims;
              }
            } else {
              const dims = [batch_size, num_heads, 0, dim_kv];
              for (let i = 0; i < num_layers; ++i) {
                decoderFeeds[`${prefix}.${i}.key`] = dims;
                decoderFeeds[`${prefix}.${i}.value`] = dims;
              }
            }
          }
          return decoderFeeds;
        }
        class PretrainedConfig {
          // NOTE: Typo in original
          /** @type {string|null} */
          model_type = null;
          /** @type {boolean} */
          is_encoder_decoder = false;
          /** @type {number} */
          max_position_embeddings;
          /** @type {TransformersJSConfig} */
          "transformers.js_config";
          /**
           * Create a new PreTrainedTokenizer instance.
           * @param {Object} configJSON The JSON of the config.
           */
          constructor(configJSON) {
            Object.assign(this, configJSON);
            this.normalized_config = getNormalizedConfig(this);
          }
          /**
           * Loads a pre-trained config from the given `pretrained_model_name_or_path`. 
           * 
           * @param {string} pretrained_model_name_or_path The path to the pre-trained config.
           * @param {PretrainedOptions} options Additional options for loading the config.
           * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.
           * 
           * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.
           */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main"
          } = {}) {
            if (config2 && !(config2 instanceof PretrainedConfig)) {
              config2 = new PretrainedConfig(config2);
            }
            const data = config2 ?? await loadConfig(pretrained_model_name_or_path, {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision
            });
            return new this(data);
          }
        }
        class AutoConfig {
          /** @type {typeof PretrainedConfig.from_pretrained} */
          static async from_pretrained(...args) {
            return PretrainedConfig.from_pretrained(...args);
          }
        }
      }
    ),
    /***/
    "./src/env.js": (
      /*!********************!*\
        !*** ./src/env.js ***!
        \********************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          apis: () => (
            /* binding */
            apis
          ),
          /* harmony export */
          env: () => (
            /* binding */
            env
          )
          /* harmony export */
        });
        var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! fs */
          "fs"
        );
        var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! path */
          "path"
        );
        var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! url */
          "url"
        );
        const VERSION = "3.0.2";
        const IS_BROWSER_ENV = typeof self !== "undefined";
        const IS_WEBWORKER_ENV = IS_BROWSER_ENV && self.constructor.name === "DedicatedWorkerGlobalScope";
        const IS_WEB_CACHE_AVAILABLE = IS_BROWSER_ENV && "caches" in self;
        const IS_WEBGPU_AVAILABLE = typeof navigator !== "undefined" && "gpu" in navigator;
        const IS_WEBNN_AVAILABLE = typeof navigator !== "undefined" && "ml" in navigator;
        const IS_PROCESS_AVAILABLE = typeof process !== "undefined";
        const IS_NODE_ENV = IS_PROCESS_AVAILABLE && process?.release?.name === "node";
        const IS_FS_AVAILABLE = !isEmpty(fs__WEBPACK_IMPORTED_MODULE_0__["default"]);
        const IS_PATH_AVAILABLE = !isEmpty(path__WEBPACK_IMPORTED_MODULE_1__["default"]);
        const apis = Object.freeze({
          /** Whether we are running in a browser environment */
          IS_BROWSER_ENV,
          /** Whether we are running in a web worker environment */
          IS_WEBWORKER_ENV,
          /** Whether the Cache API is available */
          IS_WEB_CACHE_AVAILABLE,
          /** Whether the WebGPU API is available */
          IS_WEBGPU_AVAILABLE,
          /** Whether the WebNN API is available */
          IS_WEBNN_AVAILABLE,
          /** Whether the Node.js process API is available */
          IS_PROCESS_AVAILABLE,
          /** Whether we are running in a Node.js environment */
          IS_NODE_ENV,
          /** Whether the filesystem API is available */
          IS_FS_AVAILABLE,
          /** Whether the path API is available */
          IS_PATH_AVAILABLE
        });
        const RUNNING_LOCALLY = IS_FS_AVAILABLE && IS_PATH_AVAILABLE;
        let dirname__ = "./";
        if (RUNNING_LOCALLY) {
          const _import_meta_url = Object(import.meta).url;
          if (_import_meta_url) {
            dirname__ = path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(url__WEBPACK_IMPORTED_MODULE_2__["default"].fileURLToPath(_import_meta_url)));
          } else if (typeof __dirname !== "undefined") {
            dirname__ = path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(__dirname);
          }
        }
        const DEFAULT_CACHE_DIR = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__["default"].join(dirname__, "/.cache/") : null;
        const DEFAULT_LOCAL_MODEL_PATH = "/models/";
        const localModelPath = RUNNING_LOCALLY ? path__WEBPACK_IMPORTED_MODULE_1__["default"].join(dirname__, DEFAULT_LOCAL_MODEL_PATH) : DEFAULT_LOCAL_MODEL_PATH;
        const env = {
          version: VERSION,
          /////////////////// Backends settings ///////////////////
          // NOTE: These will be populated later by the backends themselves.
          backends: {
            // onnxruntime-web/onnxruntime-node
            onnx: {}
          },
          /////////////////// Model settings ///////////////////
          allowRemoteModels: true,
          remoteHost: "https://huggingface.co/",
          remotePathTemplate: "{model}/resolve/{revision}/",
          allowLocalModels: !IS_BROWSER_ENV,
          localModelPath,
          useFS: IS_FS_AVAILABLE,
          /////////////////// Cache settings ///////////////////
          useBrowserCache: IS_WEB_CACHE_AVAILABLE,
          useFSCache: IS_FS_AVAILABLE,
          cacheDir: DEFAULT_CACHE_DIR,
          useCustomCache: false,
          customCache: null
          //////////////////////////////////////////////////////
        };
        function isEmpty(obj) {
          return Object.keys(obj).length === 0;
        }
      }
    ),
    /***/
    "./src/generation/configuration_utils.js": (
      /*!***********************************************!*\
        !*** ./src/generation/configuration_utils.js ***!
        \***********************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          GenerationConfig: () => (
            /* binding */
            GenerationConfig
          )
          /* harmony export */
        });
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../utils/core.js */
          "./src/utils/core.js"
        );
        class GenerationConfig {
          // Parameters that control the length of the output
          /**
           * The maximum length the generated tokens can have.
           * Corresponds to the length of the input prompt + `max_new_tokens`.
           * Its effect is overridden by `max_new_tokens`, if also set.
           * @type {number}
           * @default 20
           */
          max_length = 20;
          /**
           * The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.
           * @type {number}
           * @default null
           */
          max_new_tokens = null;
          /**
           * The minimum length of the sequence to be generated.
           * Corresponds to the length of the input prompt + `min_new_tokens`.
           * Its effect is overridden by `min_new_tokens`, if also set.
           * @type {number}
           * @default 0
           */
          min_length = 0;
          /**
           * The minimum numbers of tokens to generate, ignoring the number of tokens in the prompt.
           * @type {number}
           * @default null
           */
          min_new_tokens = null;
          /**
           * Controls the stopping condition for beam-based methods, like beam-search. It accepts the following values:
           * - `true`, where the generation stops as soon as there are `num_beams` complete candidates;
           * - `false`, where an heuristic is applied and the generation stops when is it very unlikely to find better candidates;
           * - `"never"`, where the beam search procedure only stops when there cannot be better candidates (canonical beam search algorithm).
           * @type {boolean|"never"}
           * @default false
           */
          early_stopping = false;
          /**
           * The maximum amount of time you allow the computation to run for in seconds.
           * Generation will still finish the current pass after allocated time has been passed.
           * @type {number}
           * @default null
           */
          max_time = null;
          // Parameters that control the generation strategy used
          /**
           * Whether or not to use sampling; use greedy decoding otherwise.
           * @type {boolean}
           * @default false
           */
          do_sample = false;
          /**
           * Number of beams for beam search. 1 means no beam search.
           * @type {number}
           * @default 1
           */
          num_beams = 1;
          /**
           * Number of groups to divide `num_beams` into in order to ensure diversity among different groups of beams.
           * See [this paper](https://arxiv.org/pdf/1610.02424.pdf) for more details.
           * @type {number}
           * @default 1
           */
          num_beam_groups = 1;
          /**
           * The values balance the model confidence and the degeneration penalty in contrastive search decoding.
           * @type {number}
           * @default null
           */
          penalty_alpha = null;
          /**
           * Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.
           * @type {boolean}
           * @default true
           */
          use_cache = true;
          // Parameters for manipulation of the model output logits
          /**
           * The value used to modulate the next token probabilities.
           * @type {number}
           * @default 1.0
           */
          temperature = 1;
          /**
           * The number of highest probability vocabulary tokens to keep for top-k-filtering.
           * @type {number}
           * @default 50
           */
          top_k = 50;
          /**
           * If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are kept for generation.
           * @type {number}
           * @default 1.0
           */
          top_p = 1;
          /**
           * Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated.
           * If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to `typical_p` or higher are kept for generation.
           * See [this paper](https://arxiv.org/pdf/2202.00666.pdf) for more details.
           * @type {number}
           * @default 1.0
           */
          typical_p = 1;
          /**
           * If set to float strictly between 0 and 1, only tokens with a conditional probability greater than `epsilon_cutoff` will be sampled.
           * In the paper, suggested values range from 3e-4 to 9e-4, depending on the size of the model.
           * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.
           * @type {number}
           * @default 0.0
           */
          epsilon_cutoff = 0;
          /**
           * Eta sampling is a hybrid of locally typical sampling and epsilon sampling.
           * If set to float strictly between 0 and 1, a token is only considered if it is greater than either `eta_cutoff` or `sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits)))`.
           * The latter term is intuitively the expected next token probability, scaled by `sqrt(eta_cutoff)`. In the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.
           * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.
           * @type {number}
           * @default 0.0
           */
          eta_cutoff = 0;
          /**
           * This value is subtracted from a beam's score if it generates a token same as any beam from other group at a particular time.
           * Note that `diversity_penalty` is only effective if `group beam search` is enabled.
           * @type {number}
           * @default 0.0
           */
          diversity_penalty = 0;
          /**
           * The parameter for repetition penalty. 1.0 means no penalty.
           * See [this paper](https://arxiv.org/pdf/1909.05858.pdf) for more details.
           * @type {number}
           * @default 1.0
           */
          repetition_penalty = 1;
          /**
           * The paramater for encoder_repetition_penalty.
           * An exponential penalty on sequences that are not in the original input.
           * 1.0 means no penalty.
           * @type {number}
           * @default 1.0
           */
          encoder_repetition_penalty = 1;
          /**
           * Exponential penalty to the length that is used with beam-based generation.
           * It is applied as an exponent to the sequence length, which in turn is used to divide the score of the sequence.
           * Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty` > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter sequences.
           * @type {number}
           * @default 1.0
           */
          length_penalty = 1;
          /**
           * If set to int > 0, all ngrams of that size can only occur once.
           * @type {number}
           * @default 0
           */
          no_repeat_ngram_size = 0;
          /**
           * List of token ids that are not allowed to be generated.
           * In order to get the token ids of the words that should not appear in the generated text, use
           * `tokenizer(bad_words, { add_prefix_space: true, add_special_tokens: false }).input_ids`.
           * @type {number[][]}
           * @default null
           */
          bad_words_ids = null;
          /**
           * List of token ids that must be generated.
           * If given a `number[][]`, this is treated as a simple list of words that must be included, the opposite to `bad_words_ids`.
           * If given `number[][][]`, this triggers a [disjunctive constraint](https://github.com/huggingface/transformers/issues/14081), where one can allow different forms of each word.
           * @type {number[][]|number[][][]}
           * @default null
           */
          force_words_ids = null;
          /**
           * Whether to renormalize the logits after applying all the logits processors or warpers (including the custom ones).
           * It's highly recommended to set this flag to `true` as the search algorithms suppose the score logits are normalized but some logit processors or warpers break the normalization.
           * @type {boolean}
           * @default false
           */
          renormalize_logits = false;
          /**
           * Custom constraints that can be added to the generation to ensure that the output will contain the use of certain tokens as defined by `Constraint` objects, in the most sensible way possible.
           * @type {Object[]}
           * @default null
           */
          constraints = null;
          /**
           * The id of the token to force as the first generated token after the `decoder_start_token_id`.
           * Useful for multilingual models like mBART where the first generated token needs to be the target language token.
           * @type {number}
           * @default null
           */
          forced_bos_token_id = null;
          /**
           * The id of the token to force as the last generated token when `max_length` is reached.
           * Optionally, use a list to set multiple *end-of-sequence* tokens.
           * @type {number|number[]}
           * @default null
           */
          forced_eos_token_id = null;
          /**
           * Whether to remove possible *nan* and *inf* outputs of the model to prevent the generation method to crash. Note that using `remove_invalid_values` can slow down generation.
           * @type {boolean}
           */
          remove_invalid_values = false;
          /**
           * This Tuple adds an exponentially increasing length penalty, after a certain amount of tokens have been generated.
           * The tuple shall consist of: `(start_index, decay_factor)` where `start_index` indicates where penalty starts and `decay_factor` represents the factor of exponential decay.
           * @type {[number, number]}
           * @default null
           */
          exponential_decay_length_penalty = null;
          /**
           * A list of tokens that will be suppressed at generation.
           * The `SuppressTokens` logit processor will set their log probs to `-inf` so that they are not sampled.
           * @type {number[]}
           * @default null
           */
          suppress_tokens = null;
          /**
           * A list of tokens that will be suppressed at the beginning of the generation.
           * The `SuppressBeginTokens` logit processor will set their log probs to `-inf` so that they are not sampled.
           * @type {number[]}
           * @default null
           */
          begin_suppress_tokens = null;
          /**
           * A list of pairs of integers which indicates a mapping from generation indices to token indices that will be forced before sampling.
           * For example, `[[1, 123]]` means the second generated token will always be a token of index 123.
           * @type {[number, number][]}
           * @default null
           */
          forced_decoder_ids = null;
          /**
           * The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.
           * Higher guidance scale encourages the model to generate samples that are more closely linked to the input
           * prompt, usually at the expense of poorer quality.
           * @type {number}
           * @default null
           */
          guidance_scale = null;
          // Parameters that define the output variables of `generate`
          /**
           * The number of independently computed returned sequences for each element in the batch.
           * @type {number}
           * @default 1
           */
          num_return_sequences = 1;
          /**
           * Whether or not to return the attentions tensors of all attention layers.
           * See `attentions` under returned tensors for more details.
           * @type {boolean}
           * @default false
           */
          output_attentions = false;
          /**
           * Whether or not to return the hidden states of all layers.
           * See `hidden_states` under returned tensors for more details.
           * @type {boolean}
           * @default false
           */
          output_hidden_states = false;
          /**
           * Whether or not to return the prediction scores.
           * See `scores` under returned tensors for more details.
           * @type {boolean}
           * @default false
           */
          output_scores = false;
          /**
           * Whether or not to return a `ModelOutput` instead of a plain tuple.
           * @type {boolean}
           * @default false
           */
          return_dict_in_generate = false;
          // Special tokens that can be used at generation time
          /**
           * The id of the *padding* token.
           * @type {number}
           * @default null
           */
          pad_token_id = null;
          /**
           * The id of the *beginning-of-sequence* token.
           * @type {number}
           * @default null
           */
          bos_token_id = null;
          /**
           * The id of the *end-of-sequence* token.
           * Optionally, use a list to set multiple *end-of-sequence* tokens.
           * @type {number|number[]}
           * @default null
           */
          eos_token_id = null;
          // Generation parameters exclusive to encoder-decoder models
          /**
           * If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids` cannot occur in the `decoder_input_ids`.
           * @type {number}
           * @default 0
           */
          encoder_no_repeat_ngram_size = 0;
          /**
           * If an encoder-decoder model starts decoding with a different token than *bos*, the id of that token.
           * @type {number}
           * @default null
           */
          decoder_start_token_id = null;
          // Wild card
          /**
           * Additional generation kwargs will be forwarded to the `generate` function of the model.
           * Kwargs that are not present in `generate`'s signature will be used in the model forward pass.
           * @type {Object}
           * @default {}
           */
          generation_kwargs = {};
          /**
           * 
           * @param {GenerationConfig|import('../configs.js').PretrainedConfig} config 
           */
          constructor(config2) {
            Object.assign(this, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.pick)(config2, Object.getOwnPropertyNames(this)));
          }
        }
      }
    ),
    /***/
    "./src/generation/logits_process.js": (
      /*!******************************************!*\
        !*** ./src/generation/logits_process.js ***!
        \******************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          ClassifierFreeGuidanceLogitsProcessor: () => (
            /* binding */
            ClassifierFreeGuidanceLogitsProcessor
          ),
          /* harmony export */
          ForcedBOSTokenLogitsProcessor: () => (
            /* binding */
            ForcedBOSTokenLogitsProcessor
          ),
          /* harmony export */
          ForcedEOSTokenLogitsProcessor: () => (
            /* binding */
            ForcedEOSTokenLogitsProcessor
          ),
          /* harmony export */
          LogitsProcessor: () => (
            /* binding */
            LogitsProcessor
          ),
          /* harmony export */
          LogitsProcessorList: () => (
            /* binding */
            LogitsProcessorList
          ),
          /* harmony export */
          LogitsWarper: () => (
            /* binding */
            LogitsWarper
          ),
          /* harmony export */
          MinLengthLogitsProcessor: () => (
            /* binding */
            MinLengthLogitsProcessor
          ),
          /* harmony export */
          MinNewTokensLengthLogitsProcessor: () => (
            /* binding */
            MinNewTokensLengthLogitsProcessor
          ),
          /* harmony export */
          NoBadWordsLogitsProcessor: () => (
            /* binding */
            NoBadWordsLogitsProcessor
          ),
          /* harmony export */
          NoRepeatNGramLogitsProcessor: () => (
            /* binding */
            NoRepeatNGramLogitsProcessor
          ),
          /* harmony export */
          RepetitionPenaltyLogitsProcessor: () => (
            /* binding */
            RepetitionPenaltyLogitsProcessor
          ),
          /* harmony export */
          SuppressTokensAtBeginLogitsProcessor: () => (
            /* binding */
            SuppressTokensAtBeginLogitsProcessor
          ),
          /* harmony export */
          TemperatureLogitsWarper: () => (
            /* binding */
            TemperatureLogitsWarper
          ),
          /* harmony export */
          TopKLogitsWarper: () => (
            /* binding */
            TopKLogitsWarper
          ),
          /* harmony export */
          TopPLogitsWarper: () => (
            /* binding */
            TopPLogitsWarper
          ),
          /* harmony export */
          WhisperTimeStampLogitsProcessor: () => (
            /* binding */
            WhisperTimeStampLogitsProcessor
          )
          /* harmony export */
        });
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ../utils/maths.js */
          "./src/utils/maths.js"
        );
        class LogitsProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Apply the processor to the input logits.
           *
           * @abstract
           * @param {bigint[][]} input_ids The input ids.
           * @param {Tensor} logits The logits to process.
           * @throws {Error} Throws an error if `_call` is not implemented in the subclass.
           */
          _call(input_ids, logits) {
            throw Error("`_call` should be implemented in a subclass");
          }
        }
        class LogitsWarper extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Apply the processor to the input logits.
           *
           * @abstract
           * @param {bigint[][]} input_ids The input ids.
           * @param {Tensor} logits The logits to process.
           * @throws {Error} Throws an error if `_call` is not implemented in the subclass.
           */
          _call(input_ids, logits) {
            throw Error("`_call` should be implemented in a subclass");
          }
        }
        class LogitsProcessorList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Constructs a new instance of `LogitsProcessorList`.
           */
          constructor() {
            super();
            this.processors = [];
          }
          /**
           * Adds a new logits processor to the list.
           *
           * @param {LogitsProcessor} item The logits processor function to add.
           */
          push(item) {
            this.processors.push(item);
          }
          /**
           * Adds multiple logits processors to the list.
           *
           * @param {LogitsProcessor[]} items The logits processor functions to add.
           */
          extend(items) {
            this.processors.push(...items);
          }
          /**
           * Applies all logits processors in the list to a batch of logits, modifying them in-place.
           *
           * @param {bigint[][]} input_ids The input IDs for the language model.
           * @param {Tensor} logits
           */
          _call(input_ids, logits) {
            let toReturn = logits;
            for (const processor of this.processors) {
              toReturn = processor(input_ids, toReturn);
            }
            return toReturn;
          }
          [Symbol.iterator]() {
            return this.processors.values();
          }
        }
        class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {
          /**
           * Create a ForcedBOSTokenLogitsProcessor.
           * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.
           */
          constructor(bos_token_id) {
            super();
            this.bos_token_id = bos_token_id;
          }
          /**
           * Apply the BOS token forcing to the logits.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The logits with BOS token forcing.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              if (input_ids[i].length === 1) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                batch_logits_data.fill(-Infinity);
                batch_logits_data[this.bos_token_id] = 0;
              }
            }
            return logits;
          }
        }
        class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {
          /**
           * Create a ForcedEOSTokenLogitsProcessor.
           * @param {number} max_length The maximum length of the sequence to be generated.
           * @param {number|number[]} eos_token_id The id(s) of the *end-of-sequence* token.
           */
          constructor(max_length, eos_token_id) {
            super();
            this.max_length = max_length;
            this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
          }
          /**
           * Apply the processor to input_ids and logits.
           * 
           * @param {bigint[][]} input_ids The input ids.
           * @param {Tensor} logits The logits tensor.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              if (input_ids[i].length === this.max_length - 1) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                batch_logits_data.fill(-Infinity);
                for (const eos_token of this.eos_token_id) {
                  batch_logits_data[eos_token] = 0;
                }
              }
            }
            return logits;
          }
        }
        class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {
          /**
           * Create a SuppressTokensAtBeginLogitsProcessor.
           * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.
           * @param {number} begin_index The number of tokens to generate before suppressing tokens.
           */
          constructor(begin_suppress_tokens, begin_index) {
            super();
            this.begin_suppress_tokens = begin_suppress_tokens;
            this.begin_index = begin_index;
          }
          /**
           * Apply the BOS token forcing to the logits.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The logits with BOS token forcing.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              if (input_ids[i].length === this.begin_index) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                for (const token_id of this.begin_suppress_tokens) {
                  batch_logits_data[token_id] = -Infinity;
                }
              }
            }
            return logits;
          }
        }
        class WhisperTimeStampLogitsProcessor extends LogitsProcessor {
          /**
           * Constructs a new WhisperTimeStampLogitsProcessor.
           * @param {import('../models/whisper/generation_whisper.js').WhisperGenerationConfig} generate_config The config object passed to the `generate()` method of a transformer model.
           * @param {number[]} init_tokens The initial tokens of the input sequence.
           */
          constructor(generate_config, init_tokens) {
            super();
            this.eos_token_id = Array.isArray(generate_config.eos_token_id) ? generate_config.eos_token_id[0] : generate_config.eos_token_id;
            this.no_timestamps_token_id = generate_config.no_timestamps_token_id;
            this.timestamp_begin = this.no_timestamps_token_id + 1;
            this.begin_index = init_tokens.length;
            if (init_tokens.at(-1) === this.no_timestamps_token_id) {
              this.begin_index -= 1;
            }
            this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;
          }
          /**
           * Modify the logits to handle timestamp tokens.
           * @param {bigint[][]} input_ids The input sequence of tokens.
           * @param {Tensor} logits The logits output by the model.
           * @returns {Tensor} The modified logits.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              const batch_logits_data = (
                /** @type {Float32Array} */
                logits[i].data
              );
              batch_logits_data[this.no_timestamps_token_id] = -Infinity;
              if (input_ids[i].length === this.begin_index - 1) {
                batch_logits_data.fill(-Infinity);
                batch_logits_data[this.timestamp_begin] = 0;
                continue;
              }
              const seq = input_ids[i].slice(this.begin_index);
              const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;
              const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;
              if (last_was_timestamp) {
                if (penultimate_was_timestamp) {
                  batch_logits_data.subarray(this.timestamp_begin).fill(-Infinity);
                } else {
                  batch_logits_data.subarray(0, this.eos_token_id).fill(-Infinity);
                }
              }
              if (input_ids[i].length === this.begin_index && this.max_initial_timestamp_index !== null) {
                const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;
                batch_logits_data.subarray(last_allowed + 1).fill(-Infinity);
              }
              const logprobs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.log_softmax)(batch_logits_data);
              const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));
              const max_text_token_logprob = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logprobs.subarray(0, this.timestamp_begin))[0];
              if (timestamp_logprob > max_text_token_logprob) {
                batch_logits_data.subarray(0, this.timestamp_begin).fill(-Infinity);
              }
            }
            return logits;
          }
        }
        class NoRepeatNGramLogitsProcessor extends LogitsProcessor {
          /**
           * Create a NoRepeatNGramLogitsProcessor.
           * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.
           */
          constructor(no_repeat_ngram_size) {
            super();
            this.no_repeat_ngram_size = no_repeat_ngram_size;
          }
          /**
           * Generate n-grams from a sequence of token ids.
           * @param {bigint[]} prevInputIds List of previous input ids
           * @returns {Map<string, number[]>} Map of generated n-grams
           */
          getNgrams(prevInputIds) {
            const curLen = prevInputIds.length;
            const ngrams = [];
            for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {
              const ngram = [];
              for (let k = 0; k < this.no_repeat_ngram_size; ++k) {
                ngram.push(prevInputIds[j + k]);
              }
              ngrams.push(ngram.map(Number));
            }
            const generatedNgram = /* @__PURE__ */ new Map();
            for (const ngram of ngrams) {
              const prevNgram = ngram.slice(0, ngram.length - 1);
              const prevNgramKey = JSON.stringify(prevNgram);
              const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];
              prevNgramValue.push(ngram[ngram.length - 1]);
              generatedNgram.set(prevNgramKey, prevNgramValue);
            }
            return generatedNgram;
          }
          /**
           * Generate n-grams from a sequence of token ids.
           * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams
           * @param {bigint[]} prevInputIds List of previous input ids
           * @returns {number[]} Map of generated n-grams
           */
          getGeneratedNgrams(bannedNgrams, prevInputIds) {
            const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);
            const banned = bannedNgrams.get(JSON.stringify(ngramIdx.map(Number))) ?? [];
            return banned;
          }
          /**
           * Calculate banned n-gram tokens
           * @param {bigint[]} prevInputIds List of previous input ids
           * @returns {number[]} Map of generated n-grams
           */
          calcBannedNgramTokens(prevInputIds) {
            const bannedTokens = [];
            if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {
              return bannedTokens;
            } else {
              const generatedNgrams = this.getNgrams(prevInputIds);
              const bannedTokens2 = this.getGeneratedNgrams(generatedNgrams, prevInputIds);
              return bannedTokens2;
            }
          }
          /**
           * Apply the no-repeat-ngram processor to the logits.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The logits with no-repeat-ngram processing.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              const batch_logits_data = (
                /** @type {Float32Array} */
                logits[i].data
              );
              const bannedTokens = this.calcBannedNgramTokens(input_ids[i]);
              for (const token of bannedTokens) {
                batch_logits_data[token] = -Infinity;
              }
            }
            return logits;
          }
        }
        class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {
          /**
           * Create a RepetitionPenaltyLogitsProcessor.
           * @param {number} penalty The penalty to apply for repeated tokens.
           */
          constructor(penalty) {
            super();
            this.penalty = penalty;
          }
          /**
           * Apply the repetition penalty to the logits.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The logits with repetition penalty processing.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              const batch_logits_data = (
                /** @type {Float32Array} */
                logits[i].data
              );
              for (const input_id of input_ids[i]) {
                const token = Number(input_id);
                if (batch_logits_data[token] < 0) {
                  batch_logits_data[token] *= this.penalty;
                } else {
                  batch_logits_data[token] /= this.penalty;
                }
              }
            }
            return logits;
          }
        }
        class MinLengthLogitsProcessor extends LogitsProcessor {
          /**
           * Create a MinLengthLogitsProcessor.
           * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.
           * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
           */
          constructor(min_length, eos_token_id) {
            super();
            this.min_length = min_length;
            this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
          }
          /**
           * Apply logit processor.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The processed logits.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              if (input_ids[i].length < this.min_length) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                for (const eos_token of this.eos_token_id) {
                  batch_logits_data[eos_token] = -Infinity;
                }
              }
            }
            return logits;
          }
        }
        class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {
          /**
           * Create a MinNewTokensLengthLogitsProcessor.
           * @param {number} prompt_length_to_skip The input tokens length.
           * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.
           * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.
           */
          constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {
            super();
            this.prompt_length_to_skip = prompt_length_to_skip;
            this.min_new_tokens = min_new_tokens;
            this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
          }
          /**
           * Apply logit processor.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The processed logits.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              const new_tokens_length = input_ids[i].length - this.prompt_length_to_skip;
              if (new_tokens_length < this.min_new_tokens) {
                const batch_logits_data = (
                  /** @type {Float32Array} */
                  logits[i].data
                );
                for (const eos_token of this.eos_token_id) {
                  batch_logits_data[eos_token] = -Infinity;
                }
              }
            }
            return logits;
          }
        }
        class NoBadWordsLogitsProcessor extends LogitsProcessor {
          /**
           * Create a `NoBadWordsLogitsProcessor`.
           * @param {number[][]} bad_words_ids List of list of token ids that are not allowed to be generated.
           * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.
           */
          constructor(bad_words_ids, eos_token_id) {
            super();
            this.bad_words_ids = bad_words_ids;
            this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];
          }
          /**
           * Apply logit processor.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The processed logits.
           */
          _call(input_ids, logits) {
            for (let i = 0; i < input_ids.length; ++i) {
              const batch_logits_data = (
                /** @type {Float32Array} */
                logits[i].data
              );
              const ids = input_ids[i];
              for (const bad_word_ids of this.bad_words_ids) {
                let mark = true;
                for (let j = 1; j <= bad_word_ids.length - 1 && bad_word_ids.length < ids.length; ++j) {
                  if (bad_word_ids.at(-j - 1) != ids.at(-j)) {
                    mark = false;
                    break;
                  }
                }
                if (mark) {
                  batch_logits_data[bad_word_ids.at(-1)] = -Infinity;
                }
              }
            }
            return logits;
          }
        }
        class ClassifierFreeGuidanceLogitsProcessor extends LogitsProcessor {
          /**
           * Create a `ClassifierFreeGuidanceLogitsProcessor`.
           * @param {number} guidance_scale The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.
           * Higher guidance scale encourages the model to generate samples that are more closely linked to the input
           * prompt, usually at the expense of poorer quality.
           */
          constructor(guidance_scale) {
            super();
            if (guidance_scale <= 1) {
              throw new Error(
                `Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${guidance_scale}.`
              );
            }
            this.guidance_scale = guidance_scale;
          }
          /**
           * Apply logit processor.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The processed logits.
           */
          _call(input_ids, logits) {
            if (logits.dims[0] !== 2 * input_ids.length) {
              throw new Error(
                `Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${logits.dims[0]} for the logits and ${input_ids.length} for the input ids.`
              );
            }
            const unguided_bsz = input_ids.length;
            const cond_logits = logits.slice([0, unguided_bsz], null);
            const uncond_logits = logits.slice([unguided_bsz, logits.dims[0]], null);
            for (let i = 0; i < uncond_logits.data.length; ++i) {
              uncond_logits.data[i] += (cond_logits.data[i] - uncond_logits.data[i]) * this.guidance_scale;
            }
            return uncond_logits;
          }
        }
        class TemperatureLogitsWarper extends LogitsWarper {
          /**
           * Create a `TemperatureLogitsWarper`.
           * @param {number} temperature Strictly positive float value used to modulate the logits distribution.
           * A value smaller than `1` decreases randomness (and vice versa), with `0` being equivalent to shifting
           * all probability mass to the most likely token.
           */
          constructor(temperature) {
            super();
            if (typeof temperature !== "number" || temperature <= 0) {
              let errorMessage = `\`temperature\` (=${temperature}) must be a strictly positive float, otherwise your next token scores will be invalid.`;
              if (temperature === 0) {
                errorMessage += " If you're looking for greedy decoding strategies, set `do_sample=false`.";
              }
            }
            this.temperature = temperature;
          }
          /**
           * Apply logit warper.
           * @param {bigint[][]} input_ids The input IDs.
           * @param {Tensor} logits The logits.
           * @returns {Object} The processed logits.
           */
          _call(input_ids, logits) {
            const batch_logits_data = (
              /** @type {Float32Array} */
              logits.data
            );
            for (let i = 0; i < batch_logits_data.length; ++i) {
              batch_logits_data[i] /= this.temperature;
            }
            return logits;
          }
        }
        class TopPLogitsWarper extends LogitsWarper {
          /**
           * Create a `TopPLogitsWarper`.
           * @param {number} top_p If set to < 1, only the smallest set of most probable tokens with
           * probabilities that add up to `top_p` or higher are kept for generation.
           * @param {Object} options Additional options for the top-p sampling.
           * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.
           * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.
           */
          constructor(top_p, {
            filter_value = -Infinity,
            min_tokens_to_keep = 1
          } = {}) {
            super();
            if (top_p < 0 || top_p > 1) {
              throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${top_p}`);
            }
            if (!Number.isInteger(min_tokens_to_keep) || min_tokens_to_keep < 1) {
              throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${min_tokens_to_keep}`);
            }
            this.top_p = top_p;
            this.filter_value = filter_value;
            this.min_tokens_to_keep = min_tokens_to_keep;
          }
        }
        class TopKLogitsWarper extends LogitsWarper {
          /**
           * Create a `TopKLogitsWarper`.
           * @param {number} top_k If set to > 0, only the top `top_k` tokens are kept for generation.
           * @param {Object} options Additional options for the top-k sampling.
           * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.
           * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.
           */
          constructor(top_k, {
            filter_value = -Infinity,
            min_tokens_to_keep = 1
          } = {}) {
            super();
            if (!Number.isInteger(top_k) || top_k < 0) {
              throw new Error(`\`top_k\` must be a positive integer, but is ${top_k}`);
            }
            this.top_k = Math.max(top_k, min_tokens_to_keep);
            this.filter_value = filter_value;
          }
        }
      }
    ),
    /***/
    "./src/generation/logits_sampler.js": (
      /*!******************************************!*\
        !*** ./src/generation/logits_sampler.js ***!
        \******************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          LogitsSampler: () => (
            /* binding */
            LogitsSampler
          )
          /* harmony export */
        });
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ../utils/maths.js */
          "./src/utils/maths.js"
        );
        var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ../generation/configuration_utils.js */
          "./src/generation/configuration_utils.js"
        );
        class LogitsSampler extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Creates a new Sampler object with the specified generation config.
           * @param {GenerationConfig} generation_config The generation config.
           */
          constructor(generation_config) {
            super();
            this.generation_config = generation_config;
          }
          /**
           * Executes the sampler, using the specified logits.
           * @param {Tensor} logits
           * @returns {Promise<[bigint, number][]>}
           */
          async _call(logits) {
            return this.sample(logits);
          }
          /**
           * Abstract method for sampling the logits.
           * @param {Tensor} logits
           * @throws {Error} If not implemented in subclass.
           * @returns {Promise<[bigint, number][]>}
           */
          async sample(logits) {
            throw Error("sample should be implemented in subclasses.");
          }
          /**
           * Returns the specified logits as an array, with temperature applied.
           * @param {Tensor} logits
           * @param {number} index
           * @returns {Float32Array}
           */
          getLogits(logits, index2) {
            let vocabSize = logits.dims.at(-1);
            let logs = (
              /** @type {Float32Array} */
              logits.data
            );
            if (index2 === -1) {
              logs = logs.slice(-vocabSize);
            } else {
              let startIndex = index2 * vocabSize;
              logs = logs.slice(startIndex, startIndex + vocabSize);
            }
            return logs;
          }
          /**
           * Selects an item randomly based on the specified probabilities.
           * @param {import("../transformers.js").DataArray} probabilities An array of probabilities to use for selection.
           * @returns {number} The index of the selected item.
           */
          randomSelect(probabilities) {
            let sumProbabilities = 0;
            for (let i = 0; i < probabilities.length; ++i) {
              sumProbabilities += probabilities[i];
            }
            let r = Math.random() * sumProbabilities;
            for (let i = 0; i < probabilities.length; ++i) {
              r -= probabilities[i];
              if (r <= 0) {
                return i;
              }
            }
            return 0;
          }
          /**
           * Returns a Sampler object based on the specified options.
           * @param {GenerationConfig} generation_config An object containing options for the sampler.
           * @returns {LogitsSampler} A Sampler object.
           */
          static getSampler(generation_config) {
            if (generation_config.do_sample) {
              return new MultinomialSampler(generation_config);
            } else if (generation_config.num_beams > 1) {
              return new BeamSearchSampler(generation_config);
            } else {
              if (generation_config.num_return_sequences > 1) {
                throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`);
              }
              return new GreedySampler(generation_config);
            }
          }
        }
        class GreedySampler extends LogitsSampler {
          /**
           * Sample the maximum probability of a given logits tensor.
           * @param {Tensor} logits
           * @returns {Promise<[bigint, number][]>} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).
           */
          async sample(logits) {
            const argmax = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.max)(logits.data)[1];
            return [
              [BigInt(argmax), 0]
            ];
          }
        }
        class MultinomialSampler extends LogitsSampler {
          /**
           * Sample from the logits.
           * @param {Tensor} logits
           * @returns {Promise<[bigint, number][]>}
           */
          async sample(logits) {
            let k = logits.dims.at(-1);
            if (this.generation_config.top_k > 0) {
              k = Math.min(this.generation_config.top_k, k);
            }
            const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k);
            const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(
              /** @type {Float32Array} */
              v.data
            );
            return Array.from({ length: this.generation_config.num_beams }, () => {
              const sampledIndex = this.randomSelect(probabilities);
              return [
                i.data[sampledIndex],
                // token id
                Math.log(probabilities[sampledIndex])
                // score
              ];
            });
          }
        }
        class BeamSearchSampler extends LogitsSampler {
          /**
           * Sample from the logits.
           * @param {Tensor} logits
           * @returns {Promise<[bigint, number][]>}
           */
          async sample(logits) {
            let k = logits.dims.at(-1);
            if (this.generation_config.top_k > 0) {
              k = Math.min(this.generation_config.top_k, k);
            }
            const [v, i] = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.topk)(logits, k);
            const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_2__.softmax)(
              /** @type {Float32Array} */
              v.data
            );
            return Array.from({ length: this.generation_config.num_beams }, (_, x) => {
              return [
                i.data[x],
                // token id
                Math.log(probabilities[x])
                // score
              ];
            });
          }
        }
      }
    ),
    /***/
    "./src/generation/stopping_criteria.js": (
      /*!*********************************************!*\
        !*** ./src/generation/stopping_criteria.js ***!
        \*********************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          EosTokenCriteria: () => (
            /* binding */
            EosTokenCriteria
          ),
          /* harmony export */
          InterruptableStoppingCriteria: () => (
            /* binding */
            InterruptableStoppingCriteria
          ),
          /* harmony export */
          MaxLengthCriteria: () => (
            /* binding */
            MaxLengthCriteria
          ),
          /* harmony export */
          StoppingCriteria: () => (
            /* binding */
            StoppingCriteria
          ),
          /* harmony export */
          StoppingCriteriaList: () => (
            /* binding */
            StoppingCriteriaList
          )
          /* harmony export */
        });
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../utils/generic.js */
          "./src/utils/generic.js"
        );
        class StoppingCriteria extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * 
           * @param {number[][]} input_ids (`number[][]` of shape `(batch_size, sequence_length)`):
           * Indices of input sequence tokens in the vocabulary.
           * @param {number[][]} scores scores (`number[][]` of shape `(batch_size, config.vocab_size)`):
           * Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
           * or scores for each vocabulary token after SoftMax.
           * @returns {boolean[]} A list of booleans indicating whether each sequence should be stopped.
           */
          _call(input_ids, scores) {
            throw Error("StoppingCriteria needs to be subclassed");
          }
        }
        class StoppingCriteriaList extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Constructs a new instance of `StoppingCriteriaList`.
           */
          constructor() {
            super();
            this.criteria = [];
          }
          /**
           * Adds a new stopping criterion to the list.
           *
           * @param {StoppingCriteria} item The stopping criterion to add.
           */
          push(item) {
            this.criteria.push(item);
          }
          /**
           * Adds multiple stopping criteria to the list.
           *
           * @param {StoppingCriteria|StoppingCriteriaList|StoppingCriteria[]} items The stopping criteria to add.
           */
          extend(items) {
            if (items instanceof StoppingCriteriaList) {
              items = items.criteria;
            } else if (items instanceof StoppingCriteria) {
              items = [items];
            }
            this.criteria.push(...items);
          }
          _call(input_ids, scores) {
            const is_done = new Array(input_ids.length).fill(false);
            for (const criterion of this.criteria) {
              const criterion_done = criterion(input_ids, scores);
              for (let i = 0; i < is_done.length; ++i) {
                is_done[i] ||= criterion_done[i];
              }
            }
            return is_done;
          }
          [Symbol.iterator]() {
            return this.criteria.values();
          }
        }
        class MaxLengthCriteria extends StoppingCriteria {
          /**
           * 
           * @param {number} max_length The maximum length that the output sequence can have in number of tokens.
           * @param {number} [max_position_embeddings=null] The maximum model length, as defined by the model's `config.max_position_embeddings` attribute.
           */
          constructor(max_length, max_position_embeddings = null) {
            super();
            this.max_length = max_length;
            this.max_position_embeddings = max_position_embeddings;
          }
          _call(input_ids) {
            return input_ids.map((ids) => ids.length >= this.max_length);
          }
        }
        class EosTokenCriteria extends StoppingCriteria {
          /**
           * 
           * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token.
           * Optionally, use a list to set multiple *end-of-sequence* tokens.
           */
          constructor(eos_token_id) {
            super();
            if (!Array.isArray(eos_token_id)) {
              eos_token_id = [eos_token_id];
            }
            this.eos_token_id = eos_token_id;
          }
          /**
           * 
           * @param {number[][]} input_ids 
           * @param {number[][]} scores 
           * @returns {boolean[]}
           */
          _call(input_ids, scores) {
            return input_ids.map((ids) => {
              const last = ids.at(-1);
              return this.eos_token_id.some((eos_id) => last == eos_id);
            });
          }
        }
        class InterruptableStoppingCriteria extends StoppingCriteria {
          constructor() {
            super();
            this.interrupted = false;
          }
          interrupt() {
            this.interrupted = true;
          }
          reset() {
            this.interrupted = false;
          }
          _call(input_ids, scores) {
            return new Array(input_ids.length).fill(this.interrupted);
          }
        }
      }
    ),
    /***/
    "./src/generation/streamers.js": (
      /*!*************************************!*\
        !*** ./src/generation/streamers.js ***!
        \*************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          BaseStreamer: () => (
            /* binding */
            BaseStreamer
          ),
          /* harmony export */
          TextStreamer: () => (
            /* binding */
            TextStreamer
          ),
          /* harmony export */
          WhisperTextStreamer: () => (
            /* binding */
            WhisperTextStreamer
          )
          /* harmony export */
        });
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../utils/core.js */
          "./src/utils/core.js"
        );
        var _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../tokenizers.js */
          "./src/tokenizers.js"
        );
        var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ../env.js */
          "./src/env.js"
        );
        class BaseStreamer {
          /**
           * Function that is called by `.generate()` to push new tokens
           * @param {bigint[][]} value 
           */
          put(value) {
            throw Error("Not implemented");
          }
          /**
           * Function that is called by `.generate()` to signal the end of generation
           */
          end() {
            throw Error("Not implemented");
          }
        }
        const stdout_write = _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE ? (x) => process.stdout.write(x) : (x) => console.log(x);
        class TextStreamer extends BaseStreamer {
          /**
           * 
           * @param {import('../tokenizers.js').PreTrainedTokenizer} tokenizer 
           */
          constructor(tokenizer, {
            skip_prompt = false,
            callback_function = null,
            token_callback_function = null,
            decode_kwargs = {},
            ...kwargs
          } = {}) {
            super();
            this.tokenizer = tokenizer;
            this.skip_prompt = skip_prompt;
            this.callback_function = callback_function ?? stdout_write;
            this.token_callback_function = token_callback_function;
            this.decode_kwargs = { ...decode_kwargs, ...kwargs };
            this.token_cache = [];
            this.print_len = 0;
            this.next_tokens_are_prompt = true;
          }
          /**
           * Receives tokens, decodes them, and prints them to stdout as soon as they form entire words.
           * @param {bigint[][]} value 
           */
          put(value) {
            if (value.length > 1) {
              throw Error("TextStreamer only supports batch size of 1");
            }
            if (this.skip_prompt && this.next_tokens_are_prompt) {
              this.next_tokens_are_prompt = false;
              return;
            }
            const tokens = value[0];
            this.token_callback_function?.(tokens);
            this.token_cache = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_0__.mergeArrays)(this.token_cache, tokens);
            const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);
            let printable_text;
            if (text.endsWith("\n")) {
              printable_text = text.slice(this.print_len);
              this.token_cache = [];
              this.print_len = 0;
            } else if (text.length > 0 && (0, _tokenizers_js__WEBPACK_IMPORTED_MODULE_1__.is_chinese_char)(text.charCodeAt(text.length - 1))) {
              printable_text = text.slice(this.print_len);
              this.print_len += printable_text.length;
            } else {
              printable_text = text.slice(this.print_len, text.lastIndexOf(" ") + 1);
              this.print_len += printable_text.length;
            }
            this.on_finalized_text(printable_text, false);
          }
          /**
           * Flushes any remaining cache and prints a newline to stdout.
           */
          end() {
            let printable_text;
            if (this.token_cache.length > 0) {
              const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);
              printable_text = text.slice(this.print_len);
              this.token_cache = [];
              this.print_len = 0;
            } else {
              printable_text = "";
            }
            this.next_tokens_are_prompt = true;
            this.on_finalized_text(printable_text, true);
          }
          /**
           * Prints the new text to stdout. If the stream is ending, also prints a newline.
           * @param {string} text 
           * @param {boolean} stream_end 
           */
          on_finalized_text(text, stream_end) {
            if (text.length > 0) {
              this.callback_function?.(text);
            }
            if (stream_end && this.callback_function === stdout_write && _env_js__WEBPACK_IMPORTED_MODULE_2__.apis.IS_PROCESS_AVAILABLE) {
              this.callback_function?.("\n");
            }
          }
        }
        class WhisperTextStreamer extends TextStreamer {
          /**
           * @param {import('../tokenizers.js').WhisperTokenizer} tokenizer
           * @param {Object} options
           * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens
           * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display
           * @param {function(string): void} [options.token_callback_function=null] Function to call when a new token is generated
           * @param {function(number): void} [options.on_chunk_start=null] Function to call when a new chunk starts
           * @param {function(number): void} [options.on_chunk_end=null] Function to call when a chunk ends
           * @param {function(): void} [options.on_finalize=null] Function to call when the stream is finalized
           * @param {number} [options.time_precision=0.02] Precision of the timestamps
           * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding
           * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method
           */
          constructor(tokenizer, {
            skip_prompt = false,
            callback_function = null,
            token_callback_function = null,
            on_chunk_start = null,
            on_chunk_end = null,
            on_finalize = null,
            time_precision = 0.02,
            skip_special_tokens = true,
            decode_kwargs = {}
          } = {}) {
            super(tokenizer, {
              skip_prompt,
              callback_function,
              token_callback_function,
              decode_kwargs: { skip_special_tokens, ...decode_kwargs }
            });
            this.timestamp_begin = tokenizer.timestamp_begin;
            this.on_chunk_start = on_chunk_start;
            this.on_chunk_end = on_chunk_end;
            this.on_finalize = on_finalize;
            this.time_precision = time_precision;
            this.waiting_for_timestamp = false;
          }
          /**
           * @param {bigint[][]} value 
           */
          put(value) {
            if (value.length > 1) {
              throw Error("WhisperTextStreamer only supports batch size of 1");
            }
            const tokens = value[0];
            if (tokens.length === 1) {
              const offset = Number(tokens[0]) - this.timestamp_begin;
              if (offset >= 0) {
                const time = offset * this.time_precision;
                if (this.waiting_for_timestamp) {
                  this.on_chunk_end?.(time);
                } else {
                  this.on_chunk_start?.(time);
                }
                this.waiting_for_timestamp = !this.waiting_for_timestamp;
                value = [[]];
              }
            }
            return super.put(value);
          }
          end() {
            super.end();
            this.on_finalize?.();
          }
        }
      }
    ),
    /***/
    "./src/models.js": (
      /*!***********************!*\
        !*** ./src/models.js ***!
        \***********************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          ASTForAudioClassification: () => (
            /* binding */
            ASTForAudioClassification
          ),
          /* harmony export */
          ASTModel: () => (
            /* binding */
            ASTModel
          ),
          /* harmony export */
          ASTPreTrainedModel: () => (
            /* binding */
            ASTPreTrainedModel
          ),
          /* harmony export */
          AlbertForMaskedLM: () => (
            /* binding */
            AlbertForMaskedLM
          ),
          /* harmony export */
          AlbertForQuestionAnswering: () => (
            /* binding */
            AlbertForQuestionAnswering
          ),
          /* harmony export */
          AlbertForSequenceClassification: () => (
            /* binding */
            AlbertForSequenceClassification
          ),
          /* harmony export */
          AlbertModel: () => (
            /* binding */
            AlbertModel
          ),
          /* harmony export */
          AlbertPreTrainedModel: () => (
            /* binding */
            AlbertPreTrainedModel
          ),
          /* harmony export */
          AutoModel: () => (
            /* binding */
            AutoModel
          ),
          /* harmony export */
          AutoModelForAudioClassification: () => (
            /* binding */
            AutoModelForAudioClassification
          ),
          /* harmony export */
          AutoModelForAudioFrameClassification: () => (
            /* binding */
            AutoModelForAudioFrameClassification
          ),
          /* harmony export */
          AutoModelForCTC: () => (
            /* binding */
            AutoModelForCTC
          ),
          /* harmony export */
          AutoModelForCausalLM: () => (
            /* binding */
            AutoModelForCausalLM
          ),
          /* harmony export */
          AutoModelForDepthEstimation: () => (
            /* binding */
            AutoModelForDepthEstimation
          ),
          /* harmony export */
          AutoModelForDocumentQuestionAnswering: () => (
            /* binding */
            AutoModelForDocumentQuestionAnswering
          ),
          /* harmony export */
          AutoModelForImageClassification: () => (
            /* binding */
            AutoModelForImageClassification
          ),
          /* harmony export */
          AutoModelForImageFeatureExtraction: () => (
            /* binding */
            AutoModelForImageFeatureExtraction
          ),
          /* harmony export */
          AutoModelForImageMatting: () => (
            /* binding */
            AutoModelForImageMatting
          ),
          /* harmony export */
          AutoModelForImageSegmentation: () => (
            /* binding */
            AutoModelForImageSegmentation
          ),
          /* harmony export */
          AutoModelForImageToImage: () => (
            /* binding */
            AutoModelForImageToImage
          ),
          /* harmony export */
          AutoModelForMaskGeneration: () => (
            /* binding */
            AutoModelForMaskGeneration
          ),
          /* harmony export */
          AutoModelForMaskedLM: () => (
            /* binding */
            AutoModelForMaskedLM
          ),
          /* harmony export */
          AutoModelForNormalEstimation: () => (
            /* binding */
            AutoModelForNormalEstimation
          ),
          /* harmony export */
          AutoModelForObjectDetection: () => (
            /* binding */
            AutoModelForObjectDetection
          ),
          /* harmony export */
          AutoModelForQuestionAnswering: () => (
            /* binding */
            AutoModelForQuestionAnswering
          ),
          /* harmony export */
          AutoModelForSemanticSegmentation: () => (
            /* binding */
            AutoModelForSemanticSegmentation
          ),
          /* harmony export */
          AutoModelForSeq2SeqLM: () => (
            /* binding */
            AutoModelForSeq2SeqLM
          ),
          /* harmony export */
          AutoModelForSequenceClassification: () => (
            /* binding */
            AutoModelForSequenceClassification
          ),
          /* harmony export */
          AutoModelForSpeechSeq2Seq: () => (
            /* binding */
            AutoModelForSpeechSeq2Seq
          ),
          /* harmony export */
          AutoModelForTextToSpectrogram: () => (
            /* binding */
            AutoModelForTextToSpectrogram
          ),
          /* harmony export */
          AutoModelForTextToWaveform: () => (
            /* binding */
            AutoModelForTextToWaveform
          ),
          /* harmony export */
          AutoModelForTokenClassification: () => (
            /* binding */
            AutoModelForTokenClassification
          ),
          /* harmony export */
          AutoModelForUniversalSegmentation: () => (
            /* binding */
            AutoModelForUniversalSegmentation
          ),
          /* harmony export */
          AutoModelForVision2Seq: () => (
            /* binding */
            AutoModelForVision2Seq
          ),
          /* harmony export */
          AutoModelForXVector: () => (
            /* binding */
            AutoModelForXVector
          ),
          /* harmony export */
          AutoModelForZeroShotObjectDetection: () => (
            /* binding */
            AutoModelForZeroShotObjectDetection
          ),
          /* harmony export */
          BartForConditionalGeneration: () => (
            /* binding */
            BartForConditionalGeneration
          ),
          /* harmony export */
          BartForSequenceClassification: () => (
            /* binding */
            BartForSequenceClassification
          ),
          /* harmony export */
          BartModel: () => (
            /* binding */
            BartModel
          ),
          /* harmony export */
          BartPretrainedModel: () => (
            /* binding */
            BartPretrainedModel
          ),
          /* harmony export */
          BaseModelOutput: () => (
            /* binding */
            BaseModelOutput
          ),
          /* harmony export */
          BeitForImageClassification: () => (
            /* binding */
            BeitForImageClassification
          ),
          /* harmony export */
          BeitModel: () => (
            /* binding */
            BeitModel
          ),
          /* harmony export */
          BeitPreTrainedModel: () => (
            /* binding */
            BeitPreTrainedModel
          ),
          /* harmony export */
          BertForMaskedLM: () => (
            /* binding */
            BertForMaskedLM
          ),
          /* harmony export */
          BertForQuestionAnswering: () => (
            /* binding */
            BertForQuestionAnswering
          ),
          /* harmony export */
          BertForSequenceClassification: () => (
            /* binding */
            BertForSequenceClassification
          ),
          /* harmony export */
          BertForTokenClassification: () => (
            /* binding */
            BertForTokenClassification
          ),
          /* harmony export */
          BertModel: () => (
            /* binding */
            BertModel
          ),
          /* harmony export */
          BertPreTrainedModel: () => (
            /* binding */
            BertPreTrainedModel
          ),
          /* harmony export */
          BlenderbotForConditionalGeneration: () => (
            /* binding */
            BlenderbotForConditionalGeneration
          ),
          /* harmony export */
          BlenderbotModel: () => (
            /* binding */
            BlenderbotModel
          ),
          /* harmony export */
          BlenderbotPreTrainedModel: () => (
            /* binding */
            BlenderbotPreTrainedModel
          ),
          /* harmony export */
          BlenderbotSmallForConditionalGeneration: () => (
            /* binding */
            BlenderbotSmallForConditionalGeneration
          ),
          /* harmony export */
          BlenderbotSmallModel: () => (
            /* binding */
            BlenderbotSmallModel
          ),
          /* harmony export */
          BlenderbotSmallPreTrainedModel: () => (
            /* binding */
            BlenderbotSmallPreTrainedModel
          ),
          /* harmony export */
          BloomForCausalLM: () => (
            /* binding */
            BloomForCausalLM
          ),
          /* harmony export */
          BloomModel: () => (
            /* binding */
            BloomModel
          ),
          /* harmony export */
          BloomPreTrainedModel: () => (
            /* binding */
            BloomPreTrainedModel
          ),
          /* harmony export */
          CLIPModel: () => (
            /* binding */
            CLIPModel
          ),
          /* harmony export */
          CLIPPreTrainedModel: () => (
            /* binding */
            CLIPPreTrainedModel
          ),
          /* harmony export */
          CLIPSegForImageSegmentation: () => (
            /* binding */
            CLIPSegForImageSegmentation
          ),
          /* harmony export */
          CLIPSegModel: () => (
            /* binding */
            CLIPSegModel
          ),
          /* harmony export */
          CLIPSegPreTrainedModel: () => (
            /* binding */
            CLIPSegPreTrainedModel
          ),
          /* harmony export */
          CLIPTextModel: () => (
            /* binding */
            CLIPTextModel
          ),
          /* harmony export */
          CLIPTextModelWithProjection: () => (
            /* binding */
            CLIPTextModelWithProjection
          ),
          /* harmony export */
          CLIPVisionModel: () => (
            /* binding */
            CLIPVisionModel
          ),
          /* harmony export */
          CLIPVisionModelWithProjection: () => (
            /* binding */
            CLIPVisionModelWithProjection
          ),
          /* harmony export */
          CamembertForMaskedLM: () => (
            /* binding */
            CamembertForMaskedLM
          ),
          /* harmony export */
          CamembertForQuestionAnswering: () => (
            /* binding */
            CamembertForQuestionAnswering
          ),
          /* harmony export */
          CamembertForSequenceClassification: () => (
            /* binding */
            CamembertForSequenceClassification
          ),
          /* harmony export */
          CamembertForTokenClassification: () => (
            /* binding */
            CamembertForTokenClassification
          ),
          /* harmony export */
          CamembertModel: () => (
            /* binding */
            CamembertModel
          ),
          /* harmony export */
          CamembertPreTrainedModel: () => (
            /* binding */
            CamembertPreTrainedModel
          ),
          /* harmony export */
          CausalLMOutput: () => (
            /* binding */
            CausalLMOutput
          ),
          /* harmony export */
          CausalLMOutputWithPast: () => (
            /* binding */
            CausalLMOutputWithPast
          ),
          /* harmony export */
          ChineseCLIPModel: () => (
            /* binding */
            ChineseCLIPModel
          ),
          /* harmony export */
          ChineseCLIPPreTrainedModel: () => (
            /* binding */
            ChineseCLIPPreTrainedModel
          ),
          /* harmony export */
          ClapAudioModelWithProjection: () => (
            /* binding */
            ClapAudioModelWithProjection
          ),
          /* harmony export */
          ClapModel: () => (
            /* binding */
            ClapModel
          ),
          /* harmony export */
          ClapPreTrainedModel: () => (
            /* binding */
            ClapPreTrainedModel
          ),
          /* harmony export */
          ClapTextModelWithProjection: () => (
            /* binding */
            ClapTextModelWithProjection
          ),
          /* harmony export */
          CodeGenForCausalLM: () => (
            /* binding */
            CodeGenForCausalLM
          ),
          /* harmony export */
          CodeGenModel: () => (
            /* binding */
            CodeGenModel
          ),
          /* harmony export */
          CodeGenPreTrainedModel: () => (
            /* binding */
            CodeGenPreTrainedModel
          ),
          /* harmony export */
          CohereForCausalLM: () => (
            /* binding */
            CohereForCausalLM
          ),
          /* harmony export */
          CohereModel: () => (
            /* binding */
            CohereModel
          ),
          /* harmony export */
          CoherePreTrainedModel: () => (
            /* binding */
            CoherePreTrainedModel
          ),
          /* harmony export */
          ConvBertForMaskedLM: () => (
            /* binding */
            ConvBertForMaskedLM
          ),
          /* harmony export */
          ConvBertForQuestionAnswering: () => (
            /* binding */
            ConvBertForQuestionAnswering
          ),
          /* harmony export */
          ConvBertForSequenceClassification: () => (
            /* binding */
            ConvBertForSequenceClassification
          ),
          /* harmony export */
          ConvBertForTokenClassification: () => (
            /* binding */
            ConvBertForTokenClassification
          ),
          /* harmony export */
          ConvBertModel: () => (
            /* binding */
            ConvBertModel
          ),
          /* harmony export */
          ConvBertPreTrainedModel: () => (
            /* binding */
            ConvBertPreTrainedModel
          ),
          /* harmony export */
          ConvNextForImageClassification: () => (
            /* binding */
            ConvNextForImageClassification
          ),
          /* harmony export */
          ConvNextModel: () => (
            /* binding */
            ConvNextModel
          ),
          /* harmony export */
          ConvNextPreTrainedModel: () => (
            /* binding */
            ConvNextPreTrainedModel
          ),
          /* harmony export */
          ConvNextV2ForImageClassification: () => (
            /* binding */
            ConvNextV2ForImageClassification
          ),
          /* harmony export */
          ConvNextV2Model: () => (
            /* binding */
            ConvNextV2Model
          ),
          /* harmony export */
          ConvNextV2PreTrainedModel: () => (
            /* binding */
            ConvNextV2PreTrainedModel
          ),
          /* harmony export */
          DPTForDepthEstimation: () => (
            /* binding */
            DPTForDepthEstimation
          ),
          /* harmony export */
          DPTModel: () => (
            /* binding */
            DPTModel
          ),
          /* harmony export */
          DPTPreTrainedModel: () => (
            /* binding */
            DPTPreTrainedModel
          ),
          /* harmony export */
          DebertaForMaskedLM: () => (
            /* binding */
            DebertaForMaskedLM
          ),
          /* harmony export */
          DebertaForQuestionAnswering: () => (
            /* binding */
            DebertaForQuestionAnswering
          ),
          /* harmony export */
          DebertaForSequenceClassification: () => (
            /* binding */
            DebertaForSequenceClassification
          ),
          /* harmony export */
          DebertaForTokenClassification: () => (
            /* binding */
            DebertaForTokenClassification
          ),
          /* harmony export */
          DebertaModel: () => (
            /* binding */
            DebertaModel
          ),
          /* harmony export */
          DebertaPreTrainedModel: () => (
            /* binding */
            DebertaPreTrainedModel
          ),
          /* harmony export */
          DebertaV2ForMaskedLM: () => (
            /* binding */
            DebertaV2ForMaskedLM
          ),
          /* harmony export */
          DebertaV2ForQuestionAnswering: () => (
            /* binding */
            DebertaV2ForQuestionAnswering
          ),
          /* harmony export */
          DebertaV2ForSequenceClassification: () => (
            /* binding */
            DebertaV2ForSequenceClassification
          ),
          /* harmony export */
          DebertaV2ForTokenClassification: () => (
            /* binding */
            DebertaV2ForTokenClassification
          ),
          /* harmony export */
          DebertaV2Model: () => (
            /* binding */
            DebertaV2Model
          ),
          /* harmony export */
          DebertaV2PreTrainedModel: () => (
            /* binding */
            DebertaV2PreTrainedModel
          ),
          /* harmony export */
          DecisionTransformerModel: () => (
            /* binding */
            DecisionTransformerModel
          ),
          /* harmony export */
          DecisionTransformerPreTrainedModel: () => (
            /* binding */
            DecisionTransformerPreTrainedModel
          ),
          /* harmony export */
          DeiTForImageClassification: () => (
            /* binding */
            DeiTForImageClassification
          ),
          /* harmony export */
          DeiTModel: () => (
            /* binding */
            DeiTModel
          ),
          /* harmony export */
          DeiTPreTrainedModel: () => (
            /* binding */
            DeiTPreTrainedModel
          ),
          /* harmony export */
          DepthAnythingForDepthEstimation: () => (
            /* binding */
            DepthAnythingForDepthEstimation
          ),
          /* harmony export */
          DepthAnythingPreTrainedModel: () => (
            /* binding */
            DepthAnythingPreTrainedModel
          ),
          /* harmony export */
          DepthProForDepthEstimation: () => (
            /* binding */
            DepthProForDepthEstimation
          ),
          /* harmony export */
          DepthProPreTrainedModel: () => (
            /* binding */
            DepthProPreTrainedModel
          ),
          /* harmony export */
          DetrForObjectDetection: () => (
            /* binding */
            DetrForObjectDetection
          ),
          /* harmony export */
          DetrForSegmentation: () => (
            /* binding */
            DetrForSegmentation
          ),
          /* harmony export */
          DetrModel: () => (
            /* binding */
            DetrModel
          ),
          /* harmony export */
          DetrObjectDetectionOutput: () => (
            /* binding */
            DetrObjectDetectionOutput
          ),
          /* harmony export */
          DetrPreTrainedModel: () => (
            /* binding */
            DetrPreTrainedModel
          ),
          /* harmony export */
          DetrSegmentationOutput: () => (
            /* binding */
            DetrSegmentationOutput
          ),
          /* harmony export */
          Dinov2ForImageClassification: () => (
            /* binding */
            Dinov2ForImageClassification
          ),
          /* harmony export */
          Dinov2Model: () => (
            /* binding */
            Dinov2Model
          ),
          /* harmony export */
          Dinov2PreTrainedModel: () => (
            /* binding */
            Dinov2PreTrainedModel
          ),
          /* harmony export */
          DistilBertForMaskedLM: () => (
            /* binding */
            DistilBertForMaskedLM
          ),
          /* harmony export */
          DistilBertForQuestionAnswering: () => (
            /* binding */
            DistilBertForQuestionAnswering
          ),
          /* harmony export */
          DistilBertForSequenceClassification: () => (
            /* binding */
            DistilBertForSequenceClassification
          ),
          /* harmony export */
          DistilBertForTokenClassification: () => (
            /* binding */
            DistilBertForTokenClassification
          ),
          /* harmony export */
          DistilBertModel: () => (
            /* binding */
            DistilBertModel
          ),
          /* harmony export */
          DistilBertPreTrainedModel: () => (
            /* binding */
            DistilBertPreTrainedModel
          ),
          /* harmony export */
          DonutSwinModel: () => (
            /* binding */
            DonutSwinModel
          ),
          /* harmony export */
          DonutSwinPreTrainedModel: () => (
            /* binding */
            DonutSwinPreTrainedModel
          ),
          /* harmony export */
          EfficientNetForImageClassification: () => (
            /* binding */
            EfficientNetForImageClassification
          ),
          /* harmony export */
          EfficientNetModel: () => (
            /* binding */
            EfficientNetModel
          ),
          /* harmony export */
          EfficientNetPreTrainedModel: () => (
            /* binding */
            EfficientNetPreTrainedModel
          ),
          /* harmony export */
          ElectraForMaskedLM: () => (
            /* binding */
            ElectraForMaskedLM
          ),
          /* harmony export */
          ElectraForQuestionAnswering: () => (
            /* binding */
            ElectraForQuestionAnswering
          ),
          /* harmony export */
          ElectraForSequenceClassification: () => (
            /* binding */
            ElectraForSequenceClassification
          ),
          /* harmony export */
          ElectraForTokenClassification: () => (
            /* binding */
            ElectraForTokenClassification
          ),
          /* harmony export */
          ElectraModel: () => (
            /* binding */
            ElectraModel
          ),
          /* harmony export */
          ElectraPreTrainedModel: () => (
            /* binding */
            ElectraPreTrainedModel
          ),
          /* harmony export */
          EsmForMaskedLM: () => (
            /* binding */
            EsmForMaskedLM
          ),
          /* harmony export */
          EsmForSequenceClassification: () => (
            /* binding */
            EsmForSequenceClassification
          ),
          /* harmony export */
          EsmForTokenClassification: () => (
            /* binding */
            EsmForTokenClassification
          ),
          /* harmony export */
          EsmModel: () => (
            /* binding */
            EsmModel
          ),
          /* harmony export */
          EsmPreTrainedModel: () => (
            /* binding */
            EsmPreTrainedModel
          ),
          /* harmony export */
          FalconForCausalLM: () => (
            /* binding */
            FalconForCausalLM
          ),
          /* harmony export */
          FalconModel: () => (
            /* binding */
            FalconModel
          ),
          /* harmony export */
          FalconPreTrainedModel: () => (
            /* binding */
            FalconPreTrainedModel
          ),
          /* harmony export */
          FastViTForImageClassification: () => (
            /* binding */
            FastViTForImageClassification
          ),
          /* harmony export */
          FastViTModel: () => (
            /* binding */
            FastViTModel
          ),
          /* harmony export */
          FastViTPreTrainedModel: () => (
            /* binding */
            FastViTPreTrainedModel
          ),
          /* harmony export */
          Florence2ForConditionalGeneration: () => (
            /* binding */
            Florence2ForConditionalGeneration
          ),
          /* harmony export */
          Florence2PreTrainedModel: () => (
            /* binding */
            Florence2PreTrainedModel
          ),
          /* harmony export */
          GLPNForDepthEstimation: () => (
            /* binding */
            GLPNForDepthEstimation
          ),
          /* harmony export */
          GLPNModel: () => (
            /* binding */
            GLPNModel
          ),
          /* harmony export */
          GLPNPreTrainedModel: () => (
            /* binding */
            GLPNPreTrainedModel
          ),
          /* harmony export */
          GPT2LMHeadModel: () => (
            /* binding */
            GPT2LMHeadModel
          ),
          /* harmony export */
          GPT2Model: () => (
            /* binding */
            GPT2Model
          ),
          /* harmony export */
          GPT2PreTrainedModel: () => (
            /* binding */
            GPT2PreTrainedModel
          ),
          /* harmony export */
          GPTBigCodeForCausalLM: () => (
            /* binding */
            GPTBigCodeForCausalLM
          ),
          /* harmony export */
          GPTBigCodeModel: () => (
            /* binding */
            GPTBigCodeModel
          ),
          /* harmony export */
          GPTBigCodePreTrainedModel: () => (
            /* binding */
            GPTBigCodePreTrainedModel
          ),
          /* harmony export */
          GPTJForCausalLM: () => (
            /* binding */
            GPTJForCausalLM
          ),
          /* harmony export */
          GPTJModel: () => (
            /* binding */
            GPTJModel
          ),
          /* harmony export */
          GPTJPreTrainedModel: () => (
            /* binding */
            GPTJPreTrainedModel
          ),
          /* harmony export */
          GPTNeoForCausalLM: () => (
            /* binding */
            GPTNeoForCausalLM
          ),
          /* harmony export */
          GPTNeoModel: () => (
            /* binding */
            GPTNeoModel
          ),
          /* harmony export */
          GPTNeoPreTrainedModel: () => (
            /* binding */
            GPTNeoPreTrainedModel
          ),
          /* harmony export */
          GPTNeoXForCausalLM: () => (
            /* binding */
            GPTNeoXForCausalLM
          ),
          /* harmony export */
          GPTNeoXModel: () => (
            /* binding */
            GPTNeoXModel
          ),
          /* harmony export */
          GPTNeoXPreTrainedModel: () => (
            /* binding */
            GPTNeoXPreTrainedModel
          ),
          /* harmony export */
          Gemma2ForCausalLM: () => (
            /* binding */
            Gemma2ForCausalLM
          ),
          /* harmony export */
          Gemma2Model: () => (
            /* binding */
            Gemma2Model
          ),
          /* harmony export */
          Gemma2PreTrainedModel: () => (
            /* binding */
            Gemma2PreTrainedModel
          ),
          /* harmony export */
          GemmaForCausalLM: () => (
            /* binding */
            GemmaForCausalLM
          ),
          /* harmony export */
          GemmaModel: () => (
            /* binding */
            GemmaModel
          ),
          /* harmony export */
          GemmaPreTrainedModel: () => (
            /* binding */
            GemmaPreTrainedModel
          ),
          /* harmony export */
          GraniteForCausalLM: () => (
            /* binding */
            GraniteForCausalLM
          ),
          /* harmony export */
          GraniteModel: () => (
            /* binding */
            GraniteModel
          ),
          /* harmony export */
          GranitePreTrainedModel: () => (
            /* binding */
            GranitePreTrainedModel
          ),
          /* harmony export */
          GroupViTModel: () => (
            /* binding */
            GroupViTModel
          ),
          /* harmony export */
          GroupViTPreTrainedModel: () => (
            /* binding */
            GroupViTPreTrainedModel
          ),
          /* harmony export */
          HieraForImageClassification: () => (
            /* binding */
            HieraForImageClassification
          ),
          /* harmony export */
          HieraModel: () => (
            /* binding */
            HieraModel
          ),
          /* harmony export */
          HieraPreTrainedModel: () => (
            /* binding */
            HieraPreTrainedModel
          ),
          /* harmony export */
          HubertForCTC: () => (
            /* binding */
            HubertForCTC
          ),
          /* harmony export */
          HubertForSequenceClassification: () => (
            /* binding */
            HubertForSequenceClassification
          ),
          /* harmony export */
          HubertModel: () => (
            /* binding */
            HubertModel
          ),
          /* harmony export */
          HubertPreTrainedModel: () => (
            /* binding */
            HubertPreTrainedModel
          ),
          /* harmony export */
          ImageMattingOutput: () => (
            /* binding */
            ImageMattingOutput
          ),
          /* harmony export */
          JAISLMHeadModel: () => (
            /* binding */
            JAISLMHeadModel
          ),
          /* harmony export */
          JAISModel: () => (
            /* binding */
            JAISModel
          ),
          /* harmony export */
          JAISPreTrainedModel: () => (
            /* binding */
            JAISPreTrainedModel
          ),
          /* harmony export */
          LlamaForCausalLM: () => (
            /* binding */
            LlamaForCausalLM
          ),
          /* harmony export */
          LlamaModel: () => (
            /* binding */
            LlamaModel
          ),
          /* harmony export */
          LlamaPreTrainedModel: () => (
            /* binding */
            LlamaPreTrainedModel
          ),
          /* harmony export */
          LlavaForConditionalGeneration: () => (
            /* binding */
            LlavaForConditionalGeneration
          ),
          /* harmony export */
          LlavaPreTrainedModel: () => (
            /* binding */
            LlavaPreTrainedModel
          ),
          /* harmony export */
          LongT5ForConditionalGeneration: () => (
            /* binding */
            LongT5ForConditionalGeneration
          ),
          /* harmony export */
          LongT5Model: () => (
            /* binding */
            LongT5Model
          ),
          /* harmony export */
          LongT5PreTrainedModel: () => (
            /* binding */
            LongT5PreTrainedModel
          ),
          /* harmony export */
          M2M100ForConditionalGeneration: () => (
            /* binding */
            M2M100ForConditionalGeneration
          ),
          /* harmony export */
          M2M100Model: () => (
            /* binding */
            M2M100Model
          ),
          /* harmony export */
          M2M100PreTrainedModel: () => (
            /* binding */
            M2M100PreTrainedModel
          ),
          /* harmony export */
          MBartForCausalLM: () => (
            /* binding */
            MBartForCausalLM
          ),
          /* harmony export */
          MBartForConditionalGeneration: () => (
            /* binding */
            MBartForConditionalGeneration
          ),
          /* harmony export */
          MBartForSequenceClassification: () => (
            /* binding */
            MBartForSequenceClassification
          ),
          /* harmony export */
          MBartModel: () => (
            /* binding */
            MBartModel
          ),
          /* harmony export */
          MBartPreTrainedModel: () => (
            /* binding */
            MBartPreTrainedModel
          ),
          /* harmony export */
          MPNetForMaskedLM: () => (
            /* binding */
            MPNetForMaskedLM
          ),
          /* harmony export */
          MPNetForQuestionAnswering: () => (
            /* binding */
            MPNetForQuestionAnswering
          ),
          /* harmony export */
          MPNetForSequenceClassification: () => (
            /* binding */
            MPNetForSequenceClassification
          ),
          /* harmony export */
          MPNetForTokenClassification: () => (
            /* binding */
            MPNetForTokenClassification
          ),
          /* harmony export */
          MPNetModel: () => (
            /* binding */
            MPNetModel
          ),
          /* harmony export */
          MPNetPreTrainedModel: () => (
            /* binding */
            MPNetPreTrainedModel
          ),
          /* harmony export */
          MT5ForConditionalGeneration: () => (
            /* binding */
            MT5ForConditionalGeneration
          ),
          /* harmony export */
          MT5Model: () => (
            /* binding */
            MT5Model
          ),
          /* harmony export */
          MT5PreTrainedModel: () => (
            /* binding */
            MT5PreTrainedModel
          ),
          /* harmony export */
          MarianMTModel: () => (
            /* binding */
            MarianMTModel
          ),
          /* harmony export */
          MarianModel: () => (
            /* binding */
            MarianModel
          ),
          /* harmony export */
          MarianPreTrainedModel: () => (
            /* binding */
            MarianPreTrainedModel
          ),
          /* harmony export */
          MaskFormerForInstanceSegmentation: () => (
            /* binding */
            MaskFormerForInstanceSegmentation
          ),
          /* harmony export */
          MaskFormerModel: () => (
            /* binding */
            MaskFormerModel
          ),
          /* harmony export */
          MaskFormerPreTrainedModel: () => (
            /* binding */
            MaskFormerPreTrainedModel
          ),
          /* harmony export */
          MaskedLMOutput: () => (
            /* binding */
            MaskedLMOutput
          ),
          /* harmony export */
          MistralForCausalLM: () => (
            /* binding */
            MistralForCausalLM
          ),
          /* harmony export */
          MistralModel: () => (
            /* binding */
            MistralModel
          ),
          /* harmony export */
          MistralPreTrainedModel: () => (
            /* binding */
            MistralPreTrainedModel
          ),
          /* harmony export */
          MobileBertForMaskedLM: () => (
            /* binding */
            MobileBertForMaskedLM
          ),
          /* harmony export */
          MobileBertForQuestionAnswering: () => (
            /* binding */
            MobileBertForQuestionAnswering
          ),
          /* harmony export */
          MobileBertForSequenceClassification: () => (
            /* binding */
            MobileBertForSequenceClassification
          ),
          /* harmony export */
          MobileBertModel: () => (
            /* binding */
            MobileBertModel
          ),
          /* harmony export */
          MobileBertPreTrainedModel: () => (
            /* binding */
            MobileBertPreTrainedModel
          ),
          /* harmony export */
          MobileLLMForCausalLM: () => (
            /* binding */
            MobileLLMForCausalLM
          ),
          /* harmony export */
          MobileLLMModel: () => (
            /* binding */
            MobileLLMModel
          ),
          /* harmony export */
          MobileLLMPreTrainedModel: () => (
            /* binding */
            MobileLLMPreTrainedModel
          ),
          /* harmony export */
          MobileNetV1ForImageClassification: () => (
            /* binding */
            MobileNetV1ForImageClassification
          ),
          /* harmony export */
          MobileNetV1Model: () => (
            /* binding */
            MobileNetV1Model
          ),
          /* harmony export */
          MobileNetV1PreTrainedModel: () => (
            /* binding */
            MobileNetV1PreTrainedModel
          ),
          /* harmony export */
          MobileNetV2ForImageClassification: () => (
            /* binding */
            MobileNetV2ForImageClassification
          ),
          /* harmony export */
          MobileNetV2Model: () => (
            /* binding */
            MobileNetV2Model
          ),
          /* harmony export */
          MobileNetV2PreTrainedModel: () => (
            /* binding */
            MobileNetV2PreTrainedModel
          ),
          /* harmony export */
          MobileNetV3ForImageClassification: () => (
            /* binding */
            MobileNetV3ForImageClassification
          ),
          /* harmony export */
          MobileNetV3Model: () => (
            /* binding */
            MobileNetV3Model
          ),
          /* harmony export */
          MobileNetV3PreTrainedModel: () => (
            /* binding */
            MobileNetV3PreTrainedModel
          ),
          /* harmony export */
          MobileNetV4ForImageClassification: () => (
            /* binding */
            MobileNetV4ForImageClassification
          ),
          /* harmony export */
          MobileNetV4Model: () => (
            /* binding */
            MobileNetV4Model
          ),
          /* harmony export */
          MobileNetV4PreTrainedModel: () => (
            /* binding */
            MobileNetV4PreTrainedModel
          ),
          /* harmony export */
          MobileViTForImageClassification: () => (
            /* binding */
            MobileViTForImageClassification
          ),
          /* harmony export */
          MobileViTModel: () => (
            /* binding */
            MobileViTModel
          ),
          /* harmony export */
          MobileViTPreTrainedModel: () => (
            /* binding */
            MobileViTPreTrainedModel
          ),
          /* harmony export */
          MobileViTV2ForImageClassification: () => (
            /* binding */
            MobileViTV2ForImageClassification
          ),
          /* harmony export */
          MobileViTV2Model: () => (
            /* binding */
            MobileViTV2Model
          ),
          /* harmony export */
          MobileViTV2PreTrainedModel: () => (
            /* binding */
            MobileViTV2PreTrainedModel
          ),
          /* harmony export */
          ModelOutput: () => (
            /* binding */
            ModelOutput
          ),
          /* harmony export */
          Moondream1ForConditionalGeneration: () => (
            /* binding */
            Moondream1ForConditionalGeneration
          ),
          /* harmony export */
          MptForCausalLM: () => (
            /* binding */
            MptForCausalLM
          ),
          /* harmony export */
          MptModel: () => (
            /* binding */
            MptModel
          ),
          /* harmony export */
          MptPreTrainedModel: () => (
            /* binding */
            MptPreTrainedModel
          ),
          /* harmony export */
          MusicgenForCausalLM: () => (
            /* binding */
            MusicgenForCausalLM
          ),
          /* harmony export */
          MusicgenForConditionalGeneration: () => (
            /* binding */
            MusicgenForConditionalGeneration
          ),
          /* harmony export */
          MusicgenModel: () => (
            /* binding */
            MusicgenModel
          ),
          /* harmony export */
          MusicgenPreTrainedModel: () => (
            /* binding */
            MusicgenPreTrainedModel
          ),
          /* harmony export */
          NomicBertModel: () => (
            /* binding */
            NomicBertModel
          ),
          /* harmony export */
          NomicBertPreTrainedModel: () => (
            /* binding */
            NomicBertPreTrainedModel
          ),
          /* harmony export */
          OPTForCausalLM: () => (
            /* binding */
            OPTForCausalLM
          ),
          /* harmony export */
          OPTModel: () => (
            /* binding */
            OPTModel
          ),
          /* harmony export */
          OPTPreTrainedModel: () => (
            /* binding */
            OPTPreTrainedModel
          ),
          /* harmony export */
          OlmoForCausalLM: () => (
            /* binding */
            OlmoForCausalLM
          ),
          /* harmony export */
          OlmoModel: () => (
            /* binding */
            OlmoModel
          ),
          /* harmony export */
          OlmoPreTrainedModel: () => (
            /* binding */
            OlmoPreTrainedModel
          ),
          /* harmony export */
          OpenELMForCausalLM: () => (
            /* binding */
            OpenELMForCausalLM
          ),
          /* harmony export */
          OpenELMModel: () => (
            /* binding */
            OpenELMModel
          ),
          /* harmony export */
          OpenELMPreTrainedModel: () => (
            /* binding */
            OpenELMPreTrainedModel
          ),
          /* harmony export */
          OwlViTForObjectDetection: () => (
            /* binding */
            OwlViTForObjectDetection
          ),
          /* harmony export */
          OwlViTModel: () => (
            /* binding */
            OwlViTModel
          ),
          /* harmony export */
          OwlViTPreTrainedModel: () => (
            /* binding */
            OwlViTPreTrainedModel
          ),
          /* harmony export */
          Owlv2ForObjectDetection: () => (
            /* binding */
            Owlv2ForObjectDetection
          ),
          /* harmony export */
          Owlv2Model: () => (
            /* binding */
            Owlv2Model
          ),
          /* harmony export */
          Owlv2PreTrainedModel: () => (
            /* binding */
            Owlv2PreTrainedModel
          ),
          /* harmony export */
          Phi3ForCausalLM: () => (
            /* binding */
            Phi3ForCausalLM
          ),
          /* harmony export */
          Phi3Model: () => (
            /* binding */
            Phi3Model
          ),
          /* harmony export */
          Phi3PreTrainedModel: () => (
            /* binding */
            Phi3PreTrainedModel
          ),
          /* harmony export */
          PhiForCausalLM: () => (
            /* binding */
            PhiForCausalLM
          ),
          /* harmony export */
          PhiModel: () => (
            /* binding */
            PhiModel
          ),
          /* harmony export */
          PhiPreTrainedModel: () => (
            /* binding */
            PhiPreTrainedModel
          ),
          /* harmony export */
          PreTrainedModel: () => (
            /* binding */
            PreTrainedModel
          ),
          /* harmony export */
          PretrainedMixin: () => (
            /* binding */
            PretrainedMixin
          ),
          /* harmony export */
          PvtForImageClassification: () => (
            /* binding */
            PvtForImageClassification
          ),
          /* harmony export */
          PvtModel: () => (
            /* binding */
            PvtModel
          ),
          /* harmony export */
          PvtPreTrainedModel: () => (
            /* binding */
            PvtPreTrainedModel
          ),
          /* harmony export */
          PyAnnoteForAudioFrameClassification: () => (
            /* binding */
            PyAnnoteForAudioFrameClassification
          ),
          /* harmony export */
          PyAnnoteModel: () => (
            /* binding */
            PyAnnoteModel
          ),
          /* harmony export */
          PyAnnotePreTrainedModel: () => (
            /* binding */
            PyAnnotePreTrainedModel
          ),
          /* harmony export */
          QuestionAnsweringModelOutput: () => (
            /* binding */
            QuestionAnsweringModelOutput
          ),
          /* harmony export */
          Qwen2ForCausalLM: () => (
            /* binding */
            Qwen2ForCausalLM
          ),
          /* harmony export */
          Qwen2Model: () => (
            /* binding */
            Qwen2Model
          ),
          /* harmony export */
          Qwen2PreTrainedModel: () => (
            /* binding */
            Qwen2PreTrainedModel
          ),
          /* harmony export */
          RTDetrForObjectDetection: () => (
            /* binding */
            RTDetrForObjectDetection
          ),
          /* harmony export */
          RTDetrModel: () => (
            /* binding */
            RTDetrModel
          ),
          /* harmony export */
          RTDetrObjectDetectionOutput: () => (
            /* binding */
            RTDetrObjectDetectionOutput
          ),
          /* harmony export */
          RTDetrPreTrainedModel: () => (
            /* binding */
            RTDetrPreTrainedModel
          ),
          /* harmony export */
          ResNetForImageClassification: () => (
            /* binding */
            ResNetForImageClassification
          ),
          /* harmony export */
          ResNetModel: () => (
            /* binding */
            ResNetModel
          ),
          /* harmony export */
          ResNetPreTrainedModel: () => (
            /* binding */
            ResNetPreTrainedModel
          ),
          /* harmony export */
          RoFormerForMaskedLM: () => (
            /* binding */
            RoFormerForMaskedLM
          ),
          /* harmony export */
          RoFormerForQuestionAnswering: () => (
            /* binding */
            RoFormerForQuestionAnswering
          ),
          /* harmony export */
          RoFormerForSequenceClassification: () => (
            /* binding */
            RoFormerForSequenceClassification
          ),
          /* harmony export */
          RoFormerForTokenClassification: () => (
            /* binding */
            RoFormerForTokenClassification
          ),
          /* harmony export */
          RoFormerModel: () => (
            /* binding */
            RoFormerModel
          ),
          /* harmony export */
          RoFormerPreTrainedModel: () => (
            /* binding */
            RoFormerPreTrainedModel
          ),
          /* harmony export */
          RobertaForMaskedLM: () => (
            /* binding */
            RobertaForMaskedLM
          ),
          /* harmony export */
          RobertaForQuestionAnswering: () => (
            /* binding */
            RobertaForQuestionAnswering
          ),
          /* harmony export */
          RobertaForSequenceClassification: () => (
            /* binding */
            RobertaForSequenceClassification
          ),
          /* harmony export */
          RobertaForTokenClassification: () => (
            /* binding */
            RobertaForTokenClassification
          ),
          /* harmony export */
          RobertaModel: () => (
            /* binding */
            RobertaModel
          ),
          /* harmony export */
          RobertaPreTrainedModel: () => (
            /* binding */
            RobertaPreTrainedModel
          ),
          /* harmony export */
          SamImageSegmentationOutput: () => (
            /* binding */
            SamImageSegmentationOutput
          ),
          /* harmony export */
          SamModel: () => (
            /* binding */
            SamModel
          ),
          /* harmony export */
          SamPreTrainedModel: () => (
            /* binding */
            SamPreTrainedModel
          ),
          /* harmony export */
          SapiensForDepthEstimation: () => (
            /* binding */
            SapiensForDepthEstimation
          ),
          /* harmony export */
          SapiensForNormalEstimation: () => (
            /* binding */
            SapiensForNormalEstimation
          ),
          /* harmony export */
          SapiensForSemanticSegmentation: () => (
            /* binding */
            SapiensForSemanticSegmentation
          ),
          /* harmony export */
          SapiensPreTrainedModel: () => (
            /* binding */
            SapiensPreTrainedModel
          ),
          /* harmony export */
          SegformerForImageClassification: () => (
            /* binding */
            SegformerForImageClassification
          ),
          /* harmony export */
          SegformerForSemanticSegmentation: () => (
            /* binding */
            SegformerForSemanticSegmentation
          ),
          /* harmony export */
          SegformerModel: () => (
            /* binding */
            SegformerModel
          ),
          /* harmony export */
          SegformerPreTrainedModel: () => (
            /* binding */
            SegformerPreTrainedModel
          ),
          /* harmony export */
          Seq2SeqLMOutput: () => (
            /* binding */
            Seq2SeqLMOutput
          ),
          /* harmony export */
          SequenceClassifierOutput: () => (
            /* binding */
            SequenceClassifierOutput
          ),
          /* harmony export */
          SiglipModel: () => (
            /* binding */
            SiglipModel
          ),
          /* harmony export */
          SiglipPreTrainedModel: () => (
            /* binding */
            SiglipPreTrainedModel
          ),
          /* harmony export */
          SiglipTextModel: () => (
            /* binding */
            SiglipTextModel
          ),
          /* harmony export */
          SiglipVisionModel: () => (
            /* binding */
            SiglipVisionModel
          ),
          /* harmony export */
          SpeechT5ForSpeechToText: () => (
            /* binding */
            SpeechT5ForSpeechToText
          ),
          /* harmony export */
          SpeechT5ForTextToSpeech: () => (
            /* binding */
            SpeechT5ForTextToSpeech
          ),
          /* harmony export */
          SpeechT5HifiGan: () => (
            /* binding */
            SpeechT5HifiGan
          ),
          /* harmony export */
          SpeechT5Model: () => (
            /* binding */
            SpeechT5Model
          ),
          /* harmony export */
          SpeechT5PreTrainedModel: () => (
            /* binding */
            SpeechT5PreTrainedModel
          ),
          /* harmony export */
          SqueezeBertForMaskedLM: () => (
            /* binding */
            SqueezeBertForMaskedLM
          ),
          /* harmony export */
          SqueezeBertForQuestionAnswering: () => (
            /* binding */
            SqueezeBertForQuestionAnswering
          ),
          /* harmony export */
          SqueezeBertForSequenceClassification: () => (
            /* binding */
            SqueezeBertForSequenceClassification
          ),
          /* harmony export */
          SqueezeBertModel: () => (
            /* binding */
            SqueezeBertModel
          ),
          /* harmony export */
          SqueezeBertPreTrainedModel: () => (
            /* binding */
            SqueezeBertPreTrainedModel
          ),
          /* harmony export */
          StableLmForCausalLM: () => (
            /* binding */
            StableLmForCausalLM
          ),
          /* harmony export */
          StableLmModel: () => (
            /* binding */
            StableLmModel
          ),
          /* harmony export */
          StableLmPreTrainedModel: () => (
            /* binding */
            StableLmPreTrainedModel
          ),
          /* harmony export */
          Starcoder2ForCausalLM: () => (
            /* binding */
            Starcoder2ForCausalLM
          ),
          /* harmony export */
          Starcoder2Model: () => (
            /* binding */
            Starcoder2Model
          ),
          /* harmony export */
          Starcoder2PreTrainedModel: () => (
            /* binding */
            Starcoder2PreTrainedModel
          ),
          /* harmony export */
          Swin2SRForImageSuperResolution: () => (
            /* binding */
            Swin2SRForImageSuperResolution
          ),
          /* harmony export */
          Swin2SRModel: () => (
            /* binding */
            Swin2SRModel
          ),
          /* harmony export */
          Swin2SRPreTrainedModel: () => (
            /* binding */
            Swin2SRPreTrainedModel
          ),
          /* harmony export */
          SwinForImageClassification: () => (
            /* binding */
            SwinForImageClassification
          ),
          /* harmony export */
          SwinModel: () => (
            /* binding */
            SwinModel
          ),
          /* harmony export */
          SwinPreTrainedModel: () => (
            /* binding */
            SwinPreTrainedModel
          ),
          /* harmony export */
          T5ForConditionalGeneration: () => (
            /* binding */
            T5ForConditionalGeneration
          ),
          /* harmony export */
          T5Model: () => (
            /* binding */
            T5Model
          ),
          /* harmony export */
          T5PreTrainedModel: () => (
            /* binding */
            T5PreTrainedModel
          ),
          /* harmony export */
          TableTransformerForObjectDetection: () => (
            /* binding */
            TableTransformerForObjectDetection
          ),
          /* harmony export */
          TableTransformerModel: () => (
            /* binding */
            TableTransformerModel
          ),
          /* harmony export */
          TableTransformerObjectDetectionOutput: () => (
            /* binding */
            TableTransformerObjectDetectionOutput
          ),
          /* harmony export */
          TableTransformerPreTrainedModel: () => (
            /* binding */
            TableTransformerPreTrainedModel
          ),
          /* harmony export */
          TokenClassifierOutput: () => (
            /* binding */
            TokenClassifierOutput
          ),
          /* harmony export */
          TrOCRForCausalLM: () => (
            /* binding */
            TrOCRForCausalLM
          ),
          /* harmony export */
          TrOCRPreTrainedModel: () => (
            /* binding */
            TrOCRPreTrainedModel
          ),
          /* harmony export */
          UniSpeechForCTC: () => (
            /* binding */
            UniSpeechForCTC
          ),
          /* harmony export */
          UniSpeechForSequenceClassification: () => (
            /* binding */
            UniSpeechForSequenceClassification
          ),
          /* harmony export */
          UniSpeechModel: () => (
            /* binding */
            UniSpeechModel
          ),
          /* harmony export */
          UniSpeechPreTrainedModel: () => (
            /* binding */
            UniSpeechPreTrainedModel
          ),
          /* harmony export */
          UniSpeechSatForAudioFrameClassification: () => (
            /* binding */
            UniSpeechSatForAudioFrameClassification
          ),
          /* harmony export */
          UniSpeechSatForCTC: () => (
            /* binding */
            UniSpeechSatForCTC
          ),
          /* harmony export */
          UniSpeechSatForSequenceClassification: () => (
            /* binding */
            UniSpeechSatForSequenceClassification
          ),
          /* harmony export */
          UniSpeechSatModel: () => (
            /* binding */
            UniSpeechSatModel
          ),
          /* harmony export */
          UniSpeechSatPreTrainedModel: () => (
            /* binding */
            UniSpeechSatPreTrainedModel
          ),
          /* harmony export */
          ViTForImageClassification: () => (
            /* binding */
            ViTForImageClassification
          ),
          /* harmony export */
          ViTMAEModel: () => (
            /* binding */
            ViTMAEModel
          ),
          /* harmony export */
          ViTMAEPreTrainedModel: () => (
            /* binding */
            ViTMAEPreTrainedModel
          ),
          /* harmony export */
          ViTMSNForImageClassification: () => (
            /* binding */
            ViTMSNForImageClassification
          ),
          /* harmony export */
          ViTMSNModel: () => (
            /* binding */
            ViTMSNModel
          ),
          /* harmony export */
          ViTMSNPreTrainedModel: () => (
            /* binding */
            ViTMSNPreTrainedModel
          ),
          /* harmony export */
          ViTModel: () => (
            /* binding */
            ViTModel
          ),
          /* harmony export */
          ViTPreTrainedModel: () => (
            /* binding */
            ViTPreTrainedModel
          ),
          /* harmony export */
          VisionEncoderDecoderModel: () => (
            /* binding */
            VisionEncoderDecoderModel
          ),
          /* harmony export */
          VitMatteForImageMatting: () => (
            /* binding */
            VitMatteForImageMatting
          ),
          /* harmony export */
          VitMattePreTrainedModel: () => (
            /* binding */
            VitMattePreTrainedModel
          ),
          /* harmony export */
          VitsModel: () => (
            /* binding */
            VitsModel
          ),
          /* harmony export */
          VitsModelOutput: () => (
            /* binding */
            VitsModelOutput
          ),
          /* harmony export */
          VitsPreTrainedModel: () => (
            /* binding */
            VitsPreTrainedModel
          ),
          /* harmony export */
          Wav2Vec2BertForCTC: () => (
            /* binding */
            Wav2Vec2BertForCTC
          ),
          /* harmony export */
          Wav2Vec2BertForSequenceClassification: () => (
            /* binding */
            Wav2Vec2BertForSequenceClassification
          ),
          /* harmony export */
          Wav2Vec2BertModel: () => (
            /* binding */
            Wav2Vec2BertModel
          ),
          /* harmony export */
          Wav2Vec2BertPreTrainedModel: () => (
            /* binding */
            Wav2Vec2BertPreTrainedModel
          ),
          /* harmony export */
          Wav2Vec2ForAudioFrameClassification: () => (
            /* binding */
            Wav2Vec2ForAudioFrameClassification
          ),
          /* harmony export */
          Wav2Vec2ForCTC: () => (
            /* binding */
            Wav2Vec2ForCTC
          ),
          /* harmony export */
          Wav2Vec2ForSequenceClassification: () => (
            /* binding */
            Wav2Vec2ForSequenceClassification
          ),
          /* harmony export */
          Wav2Vec2Model: () => (
            /* binding */
            Wav2Vec2Model
          ),
          /* harmony export */
          Wav2Vec2PreTrainedModel: () => (
            /* binding */
            Wav2Vec2PreTrainedModel
          ),
          /* harmony export */
          WavLMForAudioFrameClassification: () => (
            /* binding */
            WavLMForAudioFrameClassification
          ),
          /* harmony export */
          WavLMForCTC: () => (
            /* binding */
            WavLMForCTC
          ),
          /* harmony export */
          WavLMForSequenceClassification: () => (
            /* binding */
            WavLMForSequenceClassification
          ),
          /* harmony export */
          WavLMForXVector: () => (
            /* binding */
            WavLMForXVector
          ),
          /* harmony export */
          WavLMModel: () => (
            /* binding */
            WavLMModel
          ),
          /* harmony export */
          WavLMPreTrainedModel: () => (
            /* binding */
            WavLMPreTrainedModel
          ),
          /* harmony export */
          WeSpeakerResNetModel: () => (
            /* binding */
            WeSpeakerResNetModel
          ),
          /* harmony export */
          WeSpeakerResNetPreTrainedModel: () => (
            /* binding */
            WeSpeakerResNetPreTrainedModel
          ),
          /* harmony export */
          WhisperForConditionalGeneration: () => (
            /* binding */
            WhisperForConditionalGeneration
          ),
          /* harmony export */
          WhisperModel: () => (
            /* binding */
            WhisperModel
          ),
          /* harmony export */
          WhisperPreTrainedModel: () => (
            /* binding */
            WhisperPreTrainedModel
          ),
          /* harmony export */
          XLMForQuestionAnswering: () => (
            /* binding */
            XLMForQuestionAnswering
          ),
          /* harmony export */
          XLMForSequenceClassification: () => (
            /* binding */
            XLMForSequenceClassification
          ),
          /* harmony export */
          XLMForTokenClassification: () => (
            /* binding */
            XLMForTokenClassification
          ),
          /* harmony export */
          XLMModel: () => (
            /* binding */
            XLMModel
          ),
          /* harmony export */
          XLMPreTrainedModel: () => (
            /* binding */
            XLMPreTrainedModel
          ),
          /* harmony export */
          XLMRobertaForMaskedLM: () => (
            /* binding */
            XLMRobertaForMaskedLM
          ),
          /* harmony export */
          XLMRobertaForQuestionAnswering: () => (
            /* binding */
            XLMRobertaForQuestionAnswering
          ),
          /* harmony export */
          XLMRobertaForSequenceClassification: () => (
            /* binding */
            XLMRobertaForSequenceClassification
          ),
          /* harmony export */
          XLMRobertaForTokenClassification: () => (
            /* binding */
            XLMRobertaForTokenClassification
          ),
          /* harmony export */
          XLMRobertaModel: () => (
            /* binding */
            XLMRobertaModel
          ),
          /* harmony export */
          XLMRobertaPreTrainedModel: () => (
            /* binding */
            XLMRobertaPreTrainedModel
          ),
          /* harmony export */
          XLMWithLMHeadModel: () => (
            /* binding */
            XLMWithLMHeadModel
          ),
          /* harmony export */
          XVectorOutput: () => (
            /* binding */
            XVectorOutput
          ),
          /* harmony export */
          YolosForObjectDetection: () => (
            /* binding */
            YolosForObjectDetection
          ),
          /* harmony export */
          YolosModel: () => (
            /* binding */
            YolosModel
          ),
          /* harmony export */
          YolosObjectDetectionOutput: () => (
            /* binding */
            YolosObjectDetectionOutput
          ),
          /* harmony export */
          YolosPreTrainedModel: () => (
            /* binding */
            YolosPreTrainedModel
          )
          /* harmony export */
        });
        var _configs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./configs.js */
          "./src/configs.js"
        );
        var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./backends/onnx.js */
          "./src/backends/onnx.js"
        );
        var _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./utils/dtypes.js */
          "./src/utils/dtypes.js"
        );
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
          /*! ./utils/core.js */
          "./src/utils/core.js"
        );
        var _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
          /*! ./utils/hub.js */
          "./src/utils/hub.js"
        );
        var _utils_constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
          /*! ./utils/constants.js */
          "./src/utils/constants.js"
        );
        var _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
          /*! ./generation/logits_process.js */
          "./src/generation/logits_process.js"
        );
        var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
          /*! ./generation/configuration_utils.js */
          "./src/generation/configuration_utils.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__2(
          /*! ./utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__2(
          /*! ./utils/maths.js */
          "./src/utils/maths.js"
        );
        var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__2 = __webpack_require__2(
          /*! ./generation/stopping_criteria.js */
          "./src/generation/stopping_criteria.js"
        );
        var _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__2(
          /*! ./generation/logits_sampler.js */
          "./src/generation/logits_sampler.js"
        );
        var _env_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__2(
          /*! ./env.js */
          "./src/env.js"
        );
        var _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__2(
          /*! ./models/whisper/generation_whisper.js */
          "./src/models/whisper/generation_whisper.js"
        );
        var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__2(
          /*! ./models/whisper/common_whisper.js */
          "./src/models/whisper/common_whisper.js"
        );
        const MODEL_TYPES = {
          EncoderOnly: 0,
          EncoderDecoder: 1,
          Seq2Seq: 2,
          Vision2Seq: 3,
          DecoderOnly: 4,
          MaskGeneration: 5,
          ImageTextToText: 6,
          Musicgen: 7
        };
        const MODEL_TYPE_MAPPING = /* @__PURE__ */ new Map();
        const MODEL_NAME_TO_CLASS_MAPPING = /* @__PURE__ */ new Map();
        const MODEL_CLASS_TO_NAME_MAPPING = /* @__PURE__ */ new Map();
        async function getSession(pretrained_model_name_or_path, fileName, options2) {
          const custom_config = options2.config?.["transformers.js_config"] ?? {};
          let device = options2.device ?? custom_config.device;
          if (device && typeof device !== "string") {
            if (device.hasOwnProperty(fileName)) {
              device = device[fileName];
            } else {
              console.warn(`device not specified for "${fileName}". Using the default device.`);
              device = null;
            }
          }
          const selectedDevice = (
            /** @type {import("./utils/devices.js").DeviceType} */
            device ?? (_env_js__WEBPACK_IMPORTED_MODULE_13__.apis.IS_NODE_ENV ? "cpu" : "wasm")
          );
          const executionProviders = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.deviceToExecutionProviders)(selectedDevice);
          let dtype = options2.dtype ?? custom_config.dtype;
          if (typeof dtype !== "string") {
            if (dtype && dtype.hasOwnProperty(fileName)) {
              dtype = dtype[fileName];
            } else {
              dtype = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DEVICE_DTYPE_MAPPING[selectedDevice] ?? _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp32;
              console.warn(`dtype not specified for "${fileName}". Using the default dtype (${dtype}) for this device (${selectedDevice}).`);
            }
          }
          const selectedDtype = (
            /** @type {import("./utils/dtypes.js").DataType} */
            dtype
          );
          if (!_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(selectedDtype)) {
            throw new Error(`Invalid dtype: ${selectedDtype}. Should be one of: ${Object.keys(_utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES).join(", ")}`);
          } else if (selectedDtype === _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DATA_TYPES.fp16 && selectedDevice === "webgpu" && !await (0, _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.isWebGpuFp16Supported)()) {
            throw new Error(`The device (${selectedDevice}) does not support fp16.`);
          }
          const kv_cache_dtype = custom_config.kv_cache_dtype ? typeof custom_config.kv_cache_dtype === "string" ? custom_config.kv_cache_dtype : custom_config.kv_cache_dtype[selectedDtype] ?? "float32" : void 0;
          if (kv_cache_dtype && !["float32", "float16"].includes(kv_cache_dtype)) {
            throw new Error(`Invalid kv_cache_dtype: ${kv_cache_dtype}. Should be one of: float32, float16`);
          }
          const session_config = {
            dtype: selectedDtype,
            kv_cache_dtype
          };
          const suffix = _utils_dtypes_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_DTYPE_SUFFIX_MAPPING[selectedDtype];
          const modelFileName = `${options2.subfolder ?? ""}/${fileName}${suffix}.onnx`;
          const session_options = { ...options2.session_options };
          session_options.executionProviders ??= executionProviders;
          const free_dimension_overrides = custom_config.free_dimension_overrides;
          if (free_dimension_overrides) {
            session_options.freeDimensionOverrides ??= free_dimension_overrides;
          } else if (selectedDevice.startsWith("webnn") && !session_options.freeDimensionOverrides) {
            console.warn(
              'WebNN does not currently support dynamic shapes and requires `free_dimension_overrides` to be set in config.json as a field within "transformers.js_config". When `free_dimension_overrides` is not set, you may experience significant performance degradation.'
            );
          }
          const bufferPromise = (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, modelFileName, true, options2);
          const use_external_data_format = options2.use_external_data_format ?? custom_config.use_external_data_format;
          let externalDataPromises = [];
          if (use_external_data_format && (use_external_data_format === true || typeof use_external_data_format === "object" && use_external_data_format.hasOwnProperty(fileName) && use_external_data_format[fileName] === true)) {
            if (_env_js__WEBPACK_IMPORTED_MODULE_13__.apis.IS_NODE_ENV) {
              throw new Error("External data format is not yet supported in Node.js");
            }
            const path5 = `${fileName}${suffix}.onnx_data`;
            const fullPath = `${options2.subfolder ?? ""}/${path5}`;
            externalDataPromises.push(new Promise(async (resolve, reject) => {
              const data = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, fullPath, true, options2);
              resolve({ path: path5, data });
            }));
          } else if (session_options.externalData !== void 0) {
            externalDataPromises = session_options.externalData.map(async (ext) => {
              if (typeof ext.data === "string") {
                const ext_buffer = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelFile)(pretrained_model_name_or_path, ext.data, true, options2);
                return { ...ext, data: ext_buffer };
              }
              return ext;
            });
          }
          if (externalDataPromises.length > 0) {
            session_options.externalData = await Promise.all(externalDataPromises);
          }
          if (selectedDevice === "webgpu") {
            const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(options2.config, {
              prefix: "present"
            });
            if (Object.keys(shapes).length > 0 && !(0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)()) {
              const preferredOutputLocation = {};
              for (const key in shapes) {
                preferredOutputLocation[key] = "gpu-buffer";
              }
              session_options.preferredOutputLocation = preferredOutputLocation;
            }
          }
          const buffer2 = await bufferPromise;
          return { buffer: buffer2, session_options, session_config };
        }
        async function constructSessions(pretrained_model_name_or_path, names5, options2) {
          return Object.fromEntries(await Promise.all(
            Object.keys(names5).map(async (name) => {
              const { buffer: buffer2, session_options, session_config } = await getSession(pretrained_model_name_or_path, names5[name], options2);
              const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.createInferenceSession)(buffer2, session_options, session_config);
              return [name, session];
            })
          ));
        }
        async function getOptionalConfigs(pretrained_model_name_or_path, names5, options2) {
          return Object.fromEntries(await Promise.all(
            Object.keys(names5).map(async (name) => {
              const config2 = await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_5__.getModelJSON)(pretrained_model_name_or_path, names5[name], false, options2);
              return [name, config2];
            })
          ));
        }
        function validateInputs(session, inputs) {
          const checkedInputs = /* @__PURE__ */ Object.create(null);
          const missingInputs = [];
          for (const inputName of session.inputNames) {
            const tensor = inputs[inputName];
            if (!(tensor instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {
              missingInputs.push(inputName);
              continue;
            }
            checkedInputs[inputName] = (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXProxy)() ? tensor.clone() : tensor;
          }
          if (missingInputs.length > 0) {
            throw new Error(
              `An error occurred during model execution: "Missing the following inputs: ${missingInputs.join(", ")}.`
            );
          }
          const numInputsProvided = Object.keys(inputs).length;
          const numInputsNeeded = session.inputNames.length;
          if (numInputsProvided > numInputsNeeded) {
            let ignored = Object.keys(inputs).filter((inputName) => !session.inputNames.includes(inputName));
            console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: "${ignored.join(", ")}".`);
          }
          return checkedInputs;
        }
        async function sessionRun(session, inputs) {
          const checkedInputs = validateInputs(session, inputs);
          try {
            const ortFeed = Object.fromEntries(Object.entries(checkedInputs).map(([k, v]) => [k, v.ort_tensor]));
            let output = await session.run(ortFeed);
            output = replaceTensors(output);
            return output;
          } catch (e) {
            console.error(`An error occurred during model execution: "${e}".`);
            console.error("Inputs given to model:", checkedInputs);
            throw e;
          }
        }
        function replaceTensors(obj) {
          for (let prop in obj) {
            if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(obj[prop])) {
              obj[prop] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(obj[prop]);
            } else if (typeof obj[prop] === "object") {
              replaceTensors(obj[prop]);
            }
          }
          return obj;
        }
        function toI64Tensor(items) {
          if (items instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor) {
            return items;
          }
          if (items.length === 0) {
            throw Error("items must be non-empty");
          }
          if (Array.isArray(items[0])) {
            if (items.some((x) => x.length !== items[0].length)) {
              throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");
            }
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
              "int64",
              BigInt64Array.from(items.flat().map((x) => BigInt(x))),
              [items.length, items[0].length]
            );
          } else {
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
              "int64",
              BigInt64Array.from(items.map((x) => BigInt(x))),
              [1, items.length]
            );
          }
        }
        function boolTensor(value) {
          return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("bool", [value], [1]);
        }
        async function seq2seqForward(self2, model_inputs) {
          let { encoder_outputs, input_ids, decoder_input_ids, ...other_decoder_inputs } = model_inputs;
          if (!encoder_outputs) {
            const encoder_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, self2.sessions["model"].inputNames);
            encoder_outputs = (await encoderForward(self2, encoder_inputs)).last_hidden_state;
          }
          other_decoder_inputs.input_ids = decoder_input_ids;
          other_decoder_inputs.encoder_hidden_states = encoder_outputs;
          if (self2.sessions["decoder_model_merged"].inputNames.includes("encoder_attention_mask")) {
            other_decoder_inputs.encoder_attention_mask = model_inputs.attention_mask;
          }
          const decoderResults = await decoderForward(self2, other_decoder_inputs, true);
          return decoderResults;
        }
        async function encoderForward(self2, model_inputs) {
          const session = self2.sessions["model"];
          const encoderFeeds = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_inputs, session.inputNames);
          if (session.inputNames.includes("inputs_embeds") && !encoderFeeds.inputs_embeds) {
            if (!model_inputs.input_ids) {
              throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");
            }
            encoderFeeds.inputs_embeds = await self2.encode_text({ input_ids: model_inputs.input_ids });
          }
          if (session.inputNames.includes("token_type_ids") && !encoderFeeds.token_type_ids) {
            encoderFeeds.token_type_ids = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
              "int64",
              new BigInt64Array(encoderFeeds.input_ids.data.length),
              encoderFeeds.input_ids.dims
            );
          }
          return await sessionRun(session, encoderFeeds);
        }
        async function decoderForward(self2, model_inputs, is_encoder_decoder = false) {
          const session = self2.sessions[is_encoder_decoder ? "decoder_model_merged" : "model"];
          const { past_key_values, ...new_model_inputs } = model_inputs;
          if (session.inputNames.includes("use_cache_branch")) {
            new_model_inputs.use_cache_branch = boolTensor(!!past_key_values);
          }
          if (session.inputNames.includes("position_ids") && new_model_inputs.attention_mask && !new_model_inputs.position_ids) {
            new_model_inputs.position_ids = createPositionIds(new_model_inputs, past_key_values);
          }
          self2.addPastKeyValues(new_model_inputs, past_key_values);
          const fixed = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(new_model_inputs, session.inputNames);
          return await sessionRun(session, fixed);
        }
        async function imageTextToTextForward(self2, {
          // Produced by the tokenizer/processor:
          input_ids = null,
          attention_mask = null,
          pixel_values = null,
          // Used during generation:
          position_ids = null,
          inputs_embeds = null,
          past_key_values = null,
          // Generic generation parameters
          generation_config = null,
          logits_processor = null,
          // TODO: needed?
          ...kwargs
        }) {
          if (!inputs_embeds) {
            inputs_embeds = await self2.encode_text({ input_ids });
            if (pixel_values && input_ids.dims[1] !== 1) {
              const image_features = await self2.encode_image({ pixel_values });
              ({ inputs_embeds, attention_mask } = self2._merge_input_ids_with_image_features({
                image_features,
                inputs_embeds,
                input_ids,
                attention_mask
              }));
            } else if (past_key_values && pixel_values && input_ids.dims[1] === 1) {
              const target_length = input_ids.dims[1];
              const past_length = Object.values(past_key_values)[0].dims.at(-2);
              attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([input_ids.dims[0], past_length]),
                attention_mask.slice(null, [attention_mask.dims[1] - target_length, attention_mask.dims[1]])
              ], 1);
            }
          }
          const outputs = await decoderForward(self2, {
            inputs_embeds,
            past_key_values,
            attention_mask,
            position_ids,
            generation_config,
            logits_processor
          }, true);
          return outputs;
        }
        function createPositionIds(model_inputs, past_key_values = null) {
          const { input_ids, inputs_embeds, attention_mask } = model_inputs;
          const [bz, seq_len] = attention_mask.dims;
          const data = new BigInt64Array(attention_mask.data.length);
          for (let i = 0; i < bz; ++i) {
            const start = i * seq_len;
            let sum = BigInt(0);
            for (let j = 0; j < seq_len; ++j) {
              const index2 = start + j;
              if (attention_mask.data[index2] === 0n) {
                data[index2] = BigInt(1);
              } else {
                data[index2] = sum;
                sum += attention_mask.data[index2];
              }
            }
          }
          let position_ids = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", data, attention_mask.dims);
          if (past_key_values) {
            const offset = -(input_ids ?? inputs_embeds).dims.at(1);
            position_ids = position_ids.slice(null, [offset, null]);
          }
          return position_ids;
        }
        function decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {
          if (model_inputs.past_key_values) {
            const past_length = Object.values(model_inputs.past_key_values)[0].dims.at(-2);
            const { input_ids: input_ids2, attention_mask } = model_inputs;
            if (attention_mask && attention_mask.dims[1] > input_ids2.dims[1]) {
            } else if (past_length < input_ids2.dims[1]) {
              model_inputs.input_ids = input_ids2.slice(null, [past_length, null]);
            } else {
              if (
                // NOTE: Only used by VLMs (!= so that null matches undefined)
                self2.config.image_token_index != null && // Equivalent to `self.config.image_token_index in input_ids` (== so that int matches bigint)
                input_ids2.data.some((x) => x == self2.config.image_token_index)
              ) {
                const num_image_tokens = self2.config.num_image_tokens;
                if (!num_image_tokens) {
                  throw new Error("`num_image_tokens` is missing in the model configuration.");
                }
                const num_new_tokens = input_ids2.dims[1] - (past_length - num_image_tokens);
                model_inputs.input_ids = input_ids2.slice(null, [-num_new_tokens, null]);
                model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([1, past_length + num_new_tokens]);
              }
            }
          }
          return model_inputs;
        }
        function encoder_decoder_prepare_inputs_for_generation(self2, input_ids, model_inputs, generation_config) {
          if (model_inputs.past_key_values) {
            input_ids = input_ids.map((x) => [x.at(-1)]);
          }
          return {
            ...model_inputs,
            decoder_input_ids: toI64Tensor(input_ids)
          };
        }
        function image_text_to_text_prepare_inputs_for_generation(self2, ...args) {
          if (self2.config.is_encoder_decoder) {
            return encoder_decoder_prepare_inputs_for_generation(self2, ...args);
          } else {
            return decoder_prepare_inputs_for_generation(self2, ...args);
          }
        }
        class PreTrainedModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__.Callable {
          main_input_name = "input_ids";
          forward_params = ["input_ids", "attention_mask"];
          /**
           * Creates a new instance of the `PreTrainedModel` class.
           * @param {import('./configs.js').PretrainedConfig} config The model configuration.
           * @param {Record<string, any>} sessions The inference sessions for the model.
           * @param {Record<string, Object>} configs Additional configuration files (e.g., generation_config.json).
           */
          constructor(config2, sessions, configs) {
            super();
            this.config = config2;
            this.sessions = sessions;
            this.configs = configs;
            const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
            const modelType = MODEL_TYPE_MAPPING.get(modelName);
            this.can_generate = false;
            this._forward = null;
            this._prepare_inputs_for_generation = null;
            switch (modelType) {
              case MODEL_TYPES.DecoderOnly:
                this.can_generate = true;
                this._forward = decoderForward;
                this._prepare_inputs_for_generation = decoder_prepare_inputs_for_generation;
                break;
              case MODEL_TYPES.Seq2Seq:
              case MODEL_TYPES.Vision2Seq:
              case MODEL_TYPES.Musicgen:
                this.can_generate = true;
                this._forward = seq2seqForward;
                this._prepare_inputs_for_generation = encoder_decoder_prepare_inputs_for_generation;
                break;
              case MODEL_TYPES.EncoderDecoder:
                this._forward = seq2seqForward;
                break;
              case MODEL_TYPES.ImageTextToText:
                this.can_generate = true;
                this._forward = imageTextToTextForward;
                this._prepare_inputs_for_generation = image_text_to_text_prepare_inputs_for_generation;
                break;
              default:
                this._forward = encoderForward;
                break;
            }
            if (this.can_generate) {
              this.forward_params.push("past_key_values");
            }
            this.custom_config = this.config["transformers.js_config"] ?? {};
          }
          /**
          * Disposes of all the ONNX sessions that were created during inference.
          * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.
          * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
          */
          async dispose() {
            const promises = [];
            for (const session of Object.values(this.sessions)) {
              if (session?.handler?.dispose) {
                promises.push(session.handler.dispose());
              }
            }
            return await Promise.all(promises);
          }
          /**
           * Instantiate one of the model classes of the library from a pretrained model.
           * 
           * The model class to instantiate is selected based on the `model_type` property of the config object
           * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
           * 
           * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
           * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.
           *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
           *   user or organization name, like `dbmdz/bert-base-german-cased`.
           * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.
           * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.
           * 
           * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.
           */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main",
            model_file_name = null,
            subfolder = "onnx",
            device = null,
            dtype = null,
            use_external_data_format = null,
            session_options = {}
          } = {}) {
            let options2 = {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision,
              model_file_name,
              subfolder,
              device,
              dtype,
              use_external_data_format,
              session_options
            };
            const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);
            const modelType = MODEL_TYPE_MAPPING.get(modelName);
            config2 = options2.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options2);
            let info;
            if (modelType === MODEL_TYPES.DecoderOnly) {
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: options2.model_file_name ?? "model"
                }, options2),
                getOptionalConfigs(pretrained_model_name_or_path, {
                  generation_config: "generation_config.json"
                }, options2)
              ]);
            } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: "encoder_model",
                  decoder_model_merged: "decoder_model_merged"
                }, options2),
                getOptionalConfigs(pretrained_model_name_or_path, {
                  generation_config: "generation_config.json"
                }, options2)
              ]);
            } else if (modelType === MODEL_TYPES.MaskGeneration) {
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: "vision_encoder",
                  prompt_encoder_mask_decoder: "prompt_encoder_mask_decoder"
                }, options2)
              ]);
            } else if (modelType === MODEL_TYPES.EncoderDecoder) {
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: "encoder_model",
                  decoder_model_merged: "decoder_model_merged"
                }, options2)
              ]);
            } else if (modelType === MODEL_TYPES.ImageTextToText) {
              const sessions = {
                embed_tokens: "embed_tokens",
                vision_encoder: "vision_encoder",
                decoder_model_merged: "decoder_model_merged"
              };
              if (config2.is_encoder_decoder) {
                sessions["model"] = "encoder_model";
              }
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, sessions, options2),
                getOptionalConfigs(pretrained_model_name_or_path, {
                  generation_config: "generation_config.json"
                }, options2)
              ]);
            } else if (modelType === MODEL_TYPES.Musicgen) {
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: "text_encoder",
                  decoder_model_merged: "decoder_model_merged",
                  encodec_decode: "encodec_decode"
                }, options2),
                getOptionalConfigs(pretrained_model_name_or_path, {
                  generation_config: "generation_config.json"
                }, options2)
              ]);
            } else {
              if (modelType !== MODEL_TYPES.EncoderOnly) {
                console.warn(`Model type for '${modelName ?? config2?.model_type}' not found, assuming encoder-only architecture. Please report this at ${_utils_constants_js__WEBPACK_IMPORTED_MODULE_6__.GITHUB_ISSUE_URL}.`);
              }
              info = await Promise.all([
                constructSessions(pretrained_model_name_or_path, {
                  model: options2.model_file_name ?? "model"
                }, options2)
              ]);
            }
            return new this(config2, ...info);
          }
          /**
           * Runs the model with the provided inputs
           * @param {Object} model_inputs Object containing input tensors
           * @returns {Promise<Object>} Object containing output tensors
           */
          async _call(model_inputs) {
            return await this.forward(model_inputs);
          }
          /**
           * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method
           * will be chosen based on the model type.
           * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.
           * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.
           * @throws {Error} This method must be implemented in subclasses.
           */
          async forward(model_inputs) {
            return await this._forward(this, model_inputs);
          }
          /**
           * Get the model's generation config, if it exists.
           * @returns {GenerationConfig|null} The model's generation config if it exists, otherwise `null`.
           */
          get generation_config() {
            return this.configs?.generation_config ?? null;
          }
          /**
           * This function returns a [`LogitsProcessorList`] list object that contains all relevant [`LogitsWarper`]
           * instances used for multinomial sampling.
           * @param {GenerationConfig} generation_config The generation config.
           * @returns {LogitsProcessorList} generation_config 
           */
          _get_logits_warper(generation_config) {
            const warpers = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
            if (generation_config.temperature !== null && generation_config.temperature !== 1) {
              warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TemperatureLogitsWarper(generation_config.temperature));
            }
            if (generation_config.top_k !== null && generation_config.top_k !== 0) {
              warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopKLogitsWarper(generation_config.top_k));
            }
            if (generation_config.top_p !== null && generation_config.top_p < 1) {
              warpers.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.TopPLogitsWarper(generation_config.top_p));
            }
            return warpers;
          }
          /**
           * @param {GenerationConfig} generation_config 
           * @param {number} input_ids_seq_length The starting sequence length for the input ids.
           * @returns {LogitsProcessorList}
           * @private
           */
          _get_logits_processor(generation_config, input_ids_seq_length, logits_processor = null) {
            const processors = new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
            if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));
            }
            if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));
            }
            if (generation_config.bad_words_ids !== null) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));
            }
            if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));
            }
            if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.MinNewTokensLengthLogitsProcessor(
                input_ids_seq_length,
                generation_config.min_new_tokens,
                generation_config.eos_token_id
              ));
            }
            if (generation_config.forced_bos_token_id !== null) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));
            }
            if (generation_config.forced_eos_token_id !== null) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ForcedEOSTokenLogitsProcessor(
                generation_config.max_length,
                generation_config.forced_eos_token_id
              ));
            }
            if (generation_config.begin_suppress_tokens !== null) {
              const begin_index = input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null ? input_ids_seq_length : input_ids_seq_length + 1;
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));
            }
            if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
              processors.push(new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.ClassifierFreeGuidanceLogitsProcessor(generation_config.guidance_scale));
            }
            if (logits_processor !== null) {
              processors.extend(logits_processor);
            }
            return processors;
          }
          /**
           * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.
           * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.
           * @param {GenerationConfig|null} generation_config A `GenerationConfig` object containing generation parameters.
           * @param {Object} kwargs Additional generation parameters to be used in place of those in the `generation_config` object.
           * @returns {GenerationConfig} The final generation config object to be used by the model for text generation.
           */
          _prepare_generation_config(generation_config, kwargs, cls = _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_8__.GenerationConfig) {
            const config2 = { ...this.config };
            for (const key of ["decoder", "generator", "text_config"]) {
              if (key in config2) {
                Object.assign(config2, config2[key]);
              }
            }
            const gen_config = new cls(config2);
            Object.assign(gen_config, this.generation_config ?? {});
            if (generation_config) {
              Object.assign(gen_config, generation_config);
            }
            if (kwargs) {
              Object.assign(gen_config, (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(kwargs, Object.getOwnPropertyNames(gen_config)));
            }
            return gen_config;
          }
          /**
           * 
           * @param {GenerationConfig} generation_config 
           * @param {StoppingCriteriaList} [stopping_criteria=null] 
           */
          _get_stopping_criteria(generation_config, stopping_criteria = null) {
            const criteria = new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__2.StoppingCriteriaList();
            if (generation_config.max_length !== null) {
              criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__2.MaxLengthCriteria(
                generation_config.max_length,
                this.config.max_position_embeddings ?? null
              ));
            }
            if (generation_config.eos_token_id !== null) {
              criteria.push(new _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__2.EosTokenCriteria(generation_config.eos_token_id));
            }
            if (stopping_criteria) {
              criteria.extend(stopping_criteria);
            }
            return criteria;
          }
          /**
           * Confirms that the model class is compatible with generation.
           * If not, raises an exception that points to the right class to use.
           */
          _validate_model_class() {
            if (!this.can_generate) {
              const generate_compatible_mappings = [
                MODEL_FOR_CAUSAL_LM_MAPPING_NAMES,
                // MODEL_FOR_CAUSAL_IMAGE_MODELING_MAPPING, // TODO
                MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES,
                MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES,
                MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES
              ];
              const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);
              const generate_compatible_classes = /* @__PURE__ */ new Set();
              const modelType = this.config.model_type;
              for (const model_mapping of generate_compatible_mappings) {
                const supported_models = model_mapping.get(modelType);
                if (supported_models) {
                  generate_compatible_classes.add(supported_models[0]);
                }
              }
              let errorMessage = `The current model class (${modelName}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;
              if (generate_compatible_classes.size > 0) {
                errorMessage += ` Please use the following class instead: ${[...generate_compatible_classes].join(", ")}`;
              }
              throw Error(errorMessage);
            }
          }
          prepare_inputs_for_generation(...args) {
            return this._prepare_inputs_for_generation(this, ...args);
          }
          /**
           * 
           * @param {Object} inputs
           * @param {bigint[][]} inputs.generated_input_ids
           * @param {Object} inputs.outputs
           * @param {Object} inputs.model_inputs
           * @param {boolean} inputs.is_encoder_decoder
           * @returns {Object} The updated model inputs for the next generation iteration.
           */
          _update_model_kwargs_for_generation({ generated_input_ids, outputs, model_inputs, is_encoder_decoder }) {
            model_inputs["past_key_values"] = this.getPastKeyValues(outputs, model_inputs.past_key_values);
            model_inputs["input_ids"] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", generated_input_ids.flat(), [generated_input_ids.length, 1]);
            if (!is_encoder_decoder) {
              model_inputs.attention_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(
                [
                  model_inputs.attention_mask,
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([model_inputs.attention_mask.dims[0], 1])
                ],
                1
              );
            } else if ("decoder_attention_mask" in model_inputs) {
            }
            model_inputs["position_ids"] = null;
            return model_inputs;
          }
          /**
           * This function extracts the model-specific `inputs` for generation.
           * @param {Object} params
           * @param {Tensor} [params.inputs=null]
           * @param {number} [params.bos_token_id=null]
           * @param {Record<string, Tensor|number[]>} [params.model_kwargs]
           * @returns {{inputs_tensor: Tensor, model_inputs: Record<string, Tensor>, model_input_name: string}} The model-specific inputs for generation.
           */
          _prepare_model_inputs({ inputs, bos_token_id, model_kwargs }) {
            const model_inputs = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(model_kwargs, this.forward_params);
            const input_name = this.main_input_name;
            if (input_name in model_inputs) {
              if (inputs) {
                throw new Error(
                  "`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=..."
                );
              }
            } else {
              model_inputs[input_name] = inputs;
            }
            const inputs_tensor = model_inputs[input_name];
            return { inputs_tensor, model_inputs, model_input_name: input_name };
          }
          async _prepare_encoder_decoder_kwargs_for_generation({ inputs_tensor, model_inputs, model_input_name, generation_config }) {
            if (this.sessions["model"].inputNames.includes("inputs_embeds") && !model_inputs.inputs_embeds && "_prepare_inputs_embeds" in this) {
              const { input_ids, pixel_values, attention_mask, ...kwargs } = model_inputs;
              const prepared_inputs = await this._prepare_inputs_embeds(model_inputs);
              model_inputs = {
                ...kwargs,
                ...(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.pick)(prepared_inputs, ["inputs_embeds", "attention_mask"])
              };
            }
            let { last_hidden_state } = await encoderForward(this, model_inputs);
            if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
              last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                last_hidden_state,
                (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.full_like)(last_hidden_state, 0)
              ], 0);
              if ("attention_mask" in model_inputs) {
                model_inputs["attention_mask"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  model_inputs["attention_mask"],
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.zeros_like)(model_inputs["attention_mask"])
                ], 0);
              }
            } else if (model_inputs.decoder_input_ids) {
              const decoder_input_ids_batch_size = toI64Tensor(model_inputs.decoder_input_ids).dims[0];
              if (decoder_input_ids_batch_size !== last_hidden_state.dims[0]) {
                if (last_hidden_state.dims[0] !== 1) {
                  throw new Error(
                    `The encoder outputs have a different batch size (${last_hidden_state.dims[0]}) than the decoder inputs (${decoder_input_ids_batch_size}).`
                  );
                }
                last_hidden_state = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(Array.from({ length: decoder_input_ids_batch_size }, () => last_hidden_state), 0);
              }
            }
            model_inputs["encoder_outputs"] = last_hidden_state;
            return model_inputs;
          }
          /**
           * Prepares `decoder_input_ids` for generation with encoder-decoder models
           * @param {*} param0 
           */
          _prepare_decoder_input_ids_for_generation({ batch_size, model_input_name, model_kwargs, decoder_start_token_id, bos_token_id, generation_config }) {
            let { decoder_input_ids, ...model_inputs } = model_kwargs;
            if (!(decoder_input_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor)) {
              if (!decoder_input_ids) {
                decoder_start_token_id ??= bos_token_id;
                if (this.config.model_type === "musicgen") {
                  decoder_input_ids = Array.from({
                    length: batch_size * this.config.decoder.num_codebooks
                  }, () => [decoder_start_token_id]);
                } else if (Array.isArray(decoder_start_token_id)) {
                  if (decoder_start_token_id.length !== batch_size) {
                    throw new Error(
                      `\`decoder_start_token_id\` expcted to have length ${batch_size} but got ${decoder_start_token_id.length}`
                    );
                  }
                  decoder_input_ids = decoder_start_token_id;
                } else {
                  decoder_input_ids = Array.from({
                    length: batch_size
                  }, () => [decoder_start_token_id]);
                }
              } else if (!Array.isArray(decoder_input_ids[0])) {
                decoder_input_ids = Array.from({
                  length: batch_size
                }, () => decoder_input_ids);
              }
              decoder_input_ids = toI64Tensor(decoder_input_ids);
            }
            model_kwargs["decoder_attention_mask"] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones_like)(decoder_input_ids);
            return { input_ids: decoder_input_ids, model_inputs };
          }
          /**
           * Generates sequences of token ids for models with a language modeling head.
           * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
           * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
           */
          async generate({
            inputs = null,
            generation_config = null,
            logits_processor = null,
            stopping_criteria = null,
            streamer = null,
            // inputs_attention_mask = null,
            ...kwargs
          }) {
            this._validate_model_class();
            generation_config = this._prepare_generation_config(generation_config, kwargs);
            let { inputs_tensor, model_inputs, model_input_name } = this._prepare_model_inputs({
              inputs,
              model_kwargs: kwargs
            });
            const is_encoder_decoder = this.config.is_encoder_decoder;
            if (!is_encoder_decoder) {
            } else if (!("encoder_outputs" in model_inputs)) {
              model_inputs = await this._prepare_encoder_decoder_kwargs_for_generation(
                { inputs_tensor, model_inputs, model_input_name, generation_config }
              );
            }
            let input_ids;
            if (is_encoder_decoder) {
              ({ input_ids, model_inputs } = this._prepare_decoder_input_ids_for_generation({
                batch_size: model_inputs[model_input_name].dims.at(0),
                model_input_name,
                model_kwargs: model_inputs,
                decoder_start_token_id: generation_config.decoder_start_token_id,
                bos_token_id: generation_config.bos_token_id,
                generation_config
              }));
            } else {
              input_ids = model_inputs[model_input_name];
            }
            let input_ids_length = input_ids.dims.at(-1);
            if (generation_config.max_new_tokens !== null) {
              generation_config.max_length = input_ids_length + generation_config.max_new_tokens;
            }
            const prepared_logits_processor = this._get_logits_processor(
              generation_config,
              input_ids_length,
              logits_processor
            );
            const prepared_stopping_criteria = this._get_stopping_criteria(
              generation_config,
              stopping_criteria
            );
            const numInputs = model_inputs[model_input_name].dims.at(0);
            const sampler = _generation_logits_sampler_js__WEBPACK_IMPORTED_MODULE_12__.LogitsSampler.getSampler(generation_config);
            const scores = new Array(numInputs).fill(0);
            const all_input_ids = input_ids.tolist();
            if (streamer) {
              streamer.put(all_input_ids);
            }
            let outputs;
            let attentions = {};
            while (true) {
              model_inputs = this.prepare_inputs_for_generation(all_input_ids, model_inputs, generation_config);
              outputs = await this.forward(model_inputs);
              if (generation_config.output_attentions && generation_config.return_dict_in_generate) {
                const token_attentions = this.getAttentions(outputs);
                for (const key in token_attentions) {
                  if (!(key in attentions)) {
                    attentions[key] = [];
                  }
                  attentions[key].push(token_attentions[key]);
                }
              }
              const logits = outputs.logits.slice(null, -1, null);
              const next_tokens_scores = prepared_logits_processor(all_input_ids, logits);
              const generated_input_ids = [];
              for (let batch_idx = 0; batch_idx < next_tokens_scores.dims.at(0); ++batch_idx) {
                const logs = next_tokens_scores[batch_idx];
                const sampledTokens = await sampler(logs);
                for (const [newTokenId, logProb] of sampledTokens) {
                  const bigint = BigInt(newTokenId);
                  scores[batch_idx] += logProb;
                  all_input_ids[batch_idx].push(bigint);
                  generated_input_ids.push([bigint]);
                  break;
                }
              }
              if (streamer) {
                streamer.put(generated_input_ids);
              }
              const stop = prepared_stopping_criteria(all_input_ids);
              if (stop.every((x) => x)) {
                break;
              }
              model_inputs = this._update_model_kwargs_for_generation({
                generated_input_ids,
                outputs,
                model_inputs,
                is_encoder_decoder
              });
            }
            if (streamer) {
              streamer.end();
            }
            const past_key_values = this.getPastKeyValues(outputs, model_inputs.past_key_values, true);
            const sequences = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor("int64", all_input_ids.flat(), [all_input_ids.length, all_input_ids[0].length]);
            if (generation_config.return_dict_in_generate) {
              return {
                sequences,
                past_key_values,
                ...attentions
                // TODO:
                // scores,
                // logits,
              };
            } else {
              for (const tensor of Object.values(outputs)) {
                if (tensor.location === "gpu-buffer") {
                  tensor.dispose();
                }
              }
              return sequences;
            }
          }
          /**
           * Returns an object containing past key values from the given decoder results object.
           *
           * @param {Object} decoderResults The decoder results object.
           * @param {Object} pastKeyValues The previous past key values.
           * @returns {Object} An object containing past key values.
           */
          getPastKeyValues(decoderResults, pastKeyValues, disposeEncoderPKVs = false) {
            const pkvs = /* @__PURE__ */ Object.create(null);
            for (const name in decoderResults) {
              if (name.startsWith("present")) {
                const newName = name.replace("present", "past_key_values");
                const is_encoder_pkv = name.includes("encoder");
                if (is_encoder_pkv && pastKeyValues) {
                  pkvs[newName] = pastKeyValues[newName];
                } else {
                  pkvs[newName] = decoderResults[name];
                }
                if (pastKeyValues && (!is_encoder_pkv || disposeEncoderPKVs)) {
                  const t = pastKeyValues[newName];
                  if (t.location === "gpu-buffer") {
                    t.dispose();
                  }
                }
              }
            }
            return pkvs;
          }
          /**
           * Returns an object containing attentions from the given model output object.
           *
           * @param {Object} model_output The output of the model.
           * @returns {{cross_attentions?: Tensor[]}} An object containing attentions.
           */
          getAttentions(model_output) {
            const attentions = {};
            for (const attnName of ["cross_attentions", "encoder_attentions", "decoder_attentions"]) {
              for (const name in model_output) {
                if (name.startsWith(attnName)) {
                  if (!(attnName in attentions)) {
                    attentions[attnName] = [];
                  }
                  attentions[attnName].push(model_output[name]);
                }
              }
            }
            return attentions;
          }
          /**
           * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.
           *
           * @param {Object} decoderFeeds The decoder feeds object to add past key values to.
           * @param {Object} pastKeyValues An object containing past key values.
           */
          addPastKeyValues(decoderFeeds, pastKeyValues) {
            if (pastKeyValues) {
              Object.assign(decoderFeeds, pastKeyValues);
            } else {
              const session = this.sessions["decoder_model_merged"] ?? this.sessions["model"];
              const dtype = session?.config?.kv_cache_dtype ?? "float32";
              const empty = dtype === "float16" ? new Uint16Array() : [];
              const shapes = (0, _configs_js__WEBPACK_IMPORTED_MODULE_0__.getKeyValueShapes)(this.config);
              for (const name in shapes) {
                decoderFeeds[name] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(dtype, empty, shapes[name]);
              }
            }
          }
          async encode_image({ pixel_values }) {
            const features = (await sessionRun(this.sessions["vision_encoder"], { pixel_values })).image_features;
            if (!this.config.num_image_tokens) {
              console.warn(
                `The number of image tokens was not set in the model configuration. Setting it to the number of features detected by the vision encoder (${features.dims[1]}).`
              );
              this.config.num_image_tokens = features.dims[1];
            }
            return features;
          }
          async encode_text({ input_ids }) {
            return (await sessionRun(this.sessions["embed_tokens"], { input_ids })).inputs_embeds;
          }
        }
        class ModelOutput {
        }
        class BaseModelOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.
           * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.
           * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.
           */
          constructor({ last_hidden_state, hidden_states = null, attentions = null }) {
            super();
            this.last_hidden_state = last_hidden_state;
            this.hidden_states = hidden_states;
            this.attentions = attentions;
          }
        }
        class BertPreTrainedModel extends PreTrainedModel {
        }
        class BertModel extends BertPreTrainedModel {
        }
        class BertForMaskedLM extends BertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class BertForSequenceClassification extends BertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class BertForTokenClassification extends BertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class BertForQuestionAnswering extends BertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class NomicBertPreTrainedModel extends PreTrainedModel {
        }
        class NomicBertModel extends NomicBertPreTrainedModel {
        }
        class RoFormerPreTrainedModel extends PreTrainedModel {
        }
        class RoFormerModel extends RoFormerPreTrainedModel {
        }
        class RoFormerForMaskedLM extends RoFormerPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class RoFormerForSequenceClassification extends RoFormerPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class RoFormerForTokenClassification extends RoFormerPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class RoFormerForQuestionAnswering extends RoFormerPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class ConvBertPreTrainedModel extends PreTrainedModel {
        }
        class ConvBertModel extends ConvBertPreTrainedModel {
        }
        class ConvBertForMaskedLM extends ConvBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class ConvBertForSequenceClassification extends ConvBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class ConvBertForTokenClassification extends ConvBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class ConvBertForQuestionAnswering extends ConvBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class ElectraPreTrainedModel extends PreTrainedModel {
        }
        class ElectraModel extends ElectraPreTrainedModel {
        }
        class ElectraForMaskedLM extends ElectraPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class ElectraForSequenceClassification extends ElectraPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class ElectraForTokenClassification extends ElectraPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class ElectraForQuestionAnswering extends ElectraPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class CamembertPreTrainedModel extends PreTrainedModel {
        }
        class CamembertModel extends CamembertPreTrainedModel {
        }
        class CamembertForMaskedLM extends CamembertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class CamembertForSequenceClassification extends CamembertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class CamembertForTokenClassification extends CamembertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class CamembertForQuestionAnswering extends CamembertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class DebertaPreTrainedModel extends PreTrainedModel {
        }
        class DebertaModel extends DebertaPreTrainedModel {
        }
        class DebertaForMaskedLM extends DebertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class DebertaForSequenceClassification extends DebertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class DebertaForTokenClassification extends DebertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class DebertaForQuestionAnswering extends DebertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class DebertaV2PreTrainedModel extends PreTrainedModel {
        }
        class DebertaV2Model extends DebertaV2PreTrainedModel {
        }
        class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class DistilBertPreTrainedModel extends PreTrainedModel {
        }
        class DistilBertModel extends DistilBertPreTrainedModel {
        }
        class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class DistilBertForTokenClassification extends DistilBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class DistilBertForMaskedLM extends DistilBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class EsmPreTrainedModel extends PreTrainedModel {
        }
        class EsmModel extends EsmPreTrainedModel {
        }
        class EsmForMaskedLM extends EsmPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class EsmForSequenceClassification extends EsmPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class EsmForTokenClassification extends EsmPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileBertPreTrainedModel extends PreTrainedModel {
        }
        class MobileBertModel extends MobileBertPreTrainedModel {
        }
        class MobileBertForMaskedLM extends MobileBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class MPNetPreTrainedModel extends PreTrainedModel {
        }
        class MPNetModel extends MPNetPreTrainedModel {
        }
        class MPNetForMaskedLM extends MPNetPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class MPNetForSequenceClassification extends MPNetPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MPNetForTokenClassification extends MPNetPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class MPNetForQuestionAnswering extends MPNetPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class SqueezeBertPreTrainedModel extends PreTrainedModel {
        }
        class SqueezeBertModel extends SqueezeBertPreTrainedModel {
        }
        class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class AlbertPreTrainedModel extends PreTrainedModel {
        }
        class AlbertModel extends AlbertPreTrainedModel {
        }
        class AlbertForSequenceClassification extends AlbertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class AlbertForQuestionAnswering extends AlbertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class AlbertForMaskedLM extends AlbertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class T5PreTrainedModel extends PreTrainedModel {
          forward_params = [
            "input_ids",
            "attention_mask",
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ];
        }
        ;
        class T5Model extends T5PreTrainedModel {
        }
        class T5ForConditionalGeneration extends T5PreTrainedModel {
        }
        class LongT5PreTrainedModel extends PreTrainedModel {
        }
        ;
        class LongT5Model extends LongT5PreTrainedModel {
        }
        class LongT5ForConditionalGeneration extends LongT5PreTrainedModel {
        }
        class MT5PreTrainedModel extends PreTrainedModel {
        }
        ;
        class MT5Model extends MT5PreTrainedModel {
        }
        class MT5ForConditionalGeneration extends MT5PreTrainedModel {
        }
        class BartPretrainedModel extends PreTrainedModel {
        }
        ;
        class BartModel extends BartPretrainedModel {
        }
        class BartForConditionalGeneration extends BartPretrainedModel {
        }
        class BartForSequenceClassification extends BartPretrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MBartPreTrainedModel extends PreTrainedModel {
        }
        ;
        class MBartModel extends MBartPreTrainedModel {
        }
        class MBartForConditionalGeneration extends MBartPreTrainedModel {
        }
        class MBartForSequenceClassification extends MBartPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MBartForCausalLM extends MBartPreTrainedModel {
        }
        class BlenderbotPreTrainedModel extends PreTrainedModel {
        }
        ;
        class BlenderbotModel extends BlenderbotPreTrainedModel {
        }
        class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel {
        }
        class BlenderbotSmallPreTrainedModel extends PreTrainedModel {
        }
        ;
        class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel {
        }
        class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel {
        }
        class RobertaPreTrainedModel extends PreTrainedModel {
        }
        class RobertaModel extends RobertaPreTrainedModel {
        }
        class RobertaForMaskedLM extends RobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class RobertaForSequenceClassification extends RobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class RobertaForTokenClassification extends RobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class RobertaForQuestionAnswering extends RobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class XLMPreTrainedModel extends PreTrainedModel {
        }
        class XLMModel extends XLMPreTrainedModel {
        }
        class XLMWithLMHeadModel extends XLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class XLMForSequenceClassification extends XLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class XLMForTokenClassification extends XLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class XLMForQuestionAnswering extends XLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class XLMRobertaPreTrainedModel extends PreTrainedModel {
        }
        class XLMRobertaModel extends XLMRobertaPreTrainedModel {
        }
        class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<MaskedLMOutput>} returned object
           */
          async _call(model_inputs) {
            return new MaskedLMOutput(await super._call(model_inputs));
          }
        }
        class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} returned object
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {
          /**
           * Calls the model on new inputs.
           *
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<QuestionAnsweringModelOutput>} returned object
           */
          async _call(model_inputs) {
            return new QuestionAnsweringModelOutput(await super._call(model_inputs));
          }
        }
        class ASTPreTrainedModel extends PreTrainedModel {
        }
        ;
        class ASTModel extends ASTPreTrainedModel {
        }
        class ASTForAudioClassification extends ASTPreTrainedModel {
        }
        class WhisperPreTrainedModel extends PreTrainedModel {
          requires_attention_mask = false;
          main_input_name = "input_features";
          forward_params = [
            "input_features",
            "attention_mask",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ];
        }
        ;
        class WhisperModel extends WhisperPreTrainedModel {
        }
        class WhisperForConditionalGeneration extends WhisperPreTrainedModel {
          _prepare_generation_config(generation_config, kwargs) {
            return (
              /** @type {WhisperGenerationConfig} */
              super._prepare_generation_config(generation_config, kwargs, _models_whisper_generation_whisper_js__WEBPACK_IMPORTED_MODULE_14__.WhisperGenerationConfig)
            );
          }
          /**
           * 
           * @param {WhisperGenerationConfig} generation_config 
           */
          _retrieve_init_tokens(generation_config) {
            const init_tokens = [generation_config.decoder_start_token_id];
            let language = generation_config.language;
            const task = generation_config.task;
            if (generation_config.is_multilingual) {
              if (!language) {
                console.warn("No language specified - defaulting to English (en).");
                language = "en";
              }
              const language_code = (0, _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_15__.whisper_language_to_code)(language);
              const language_token = `<|${language_code}|>`;
              init_tokens.push(generation_config.lang_to_id[language_token]);
              init_tokens.push(generation_config.task_to_id[task ?? "transcribe"]);
            } else if (language || task) {
              throw new Error(
                "Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config."
              );
            }
            if (!generation_config.return_timestamps && generation_config.no_timestamps_token_id && init_tokens.at(-1) !== generation_config.no_timestamps_token_id) {
              init_tokens.push(generation_config.no_timestamps_token_id);
            } else if (generation_config.return_timestamps && init_tokens.at(-1) === generation_config.no_timestamps_token_id) {
              console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`.");
              init_tokens.pop();
            }
            return init_tokens.filter((token) => token != null);
          }
          /**
           * Transcribes or translates log-mel input features to a sequence of auto-regressively generated token ids.
           * @param {import('./models/whisper/generation_whisper.js').WhisperGenerationFunctionParameters} options
           * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
           */
          async generate({
            inputs = null,
            generation_config = null,
            logits_processor = null,
            stopping_criteria = null,
            // Whisper-specific options (passed to kwargs)
            // prompt_ids = null,
            // language = null,
            // task = null,
            ...kwargs
          }) {
            generation_config = this._prepare_generation_config(generation_config, kwargs);
            const init_tokens = kwargs.decoder_input_ids ?? this._retrieve_init_tokens(generation_config);
            if (generation_config.return_timestamps) {
              logits_processor ??= new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
              logits_processor.push(
                new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.WhisperTimeStampLogitsProcessor(generation_config, init_tokens)
              );
            }
            if (generation_config.begin_suppress_tokens) {
              logits_processor ??= new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.LogitsProcessorList();
              logits_processor.push(
                new _generation_logits_process_js__WEBPACK_IMPORTED_MODULE_7__.SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, init_tokens.length)
              );
            }
            if (generation_config.return_token_timestamps) {
              if (!generation_config.alignment_heads) {
                throw new Error(
                  "Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config."
                );
              }
              if (generation_config.task === "translate") {
                console.warn("Token-level timestamps may not be reliable for task 'translate'.");
              }
              generation_config.output_attentions = true;
              generation_config.return_dict_in_generate = true;
            }
            const outputs = await super.generate({
              inputs,
              generation_config,
              logits_processor,
              decoder_input_ids: init_tokens,
              ...kwargs
            });
            if (generation_config.return_token_timestamps) {
              outputs["token_timestamps"] = this._extract_token_timestamps(
                outputs,
                generation_config.alignment_heads,
                generation_config.num_frames
              );
            }
            return outputs;
          }
          /**
           * Calculates token-level timestamps using the encoder-decoder cross-attentions and
           * dynamic time-warping (DTW) to map each output token to a position in the input audio.
           * If `num_frames` is specified, the encoder-decoder cross-attentions will be cropped before applying DTW.
           * @param {Object} generate_outputs Outputs generated by the model
           * @param {Tensor[][]} generate_outputs.cross_attentions The cross attentions output by the model
           * @param {Tensor} generate_outputs.sequences The sequences output by the model
           * @param {number[][]} alignment_heads Alignment heads of the model
           * @param {number} [num_frames=null] Number of frames in the input audio.
           * @param {number} [time_precision=0.02] Precision of the timestamps in seconds
           * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token
           */
          _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {
            if (!generate_outputs.cross_attentions) {
              throw new Error(
                "Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`."
              );
            }
            if (num_frames == null) {
              console.warn(
                "`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds)."
              );
            }
            let median_filter_width = this.config.median_filter_width;
            if (median_filter_width === void 0) {
              console.warn("Model config has no `median_filter_width`, using default value of 7.");
              median_filter_width = 7;
            }
            const batch = generate_outputs.cross_attentions;
            const cross_attentions = Array.from(
              { length: this.config.decoder_layers },
              // Concatenate the cross attentions for each layer across sequence length dimension.
              (_, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(batch.map((x) => x[i]), 2)
            );
            const weights = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(alignment_heads.map(([l, h]) => {
              if (l >= cross_attentions.length) {
                throw new Error(`Layer index ${l} is out of bounds for cross attentions (length ${cross_attentions.length}).`);
              }
              return num_frames ? cross_attentions[l].slice(null, h, null, [0, num_frames]) : cross_attentions[l].slice(null, h);
            })).transpose(1, 0, 2, 3);
            const [std, calculatedMean] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.std_mean)(weights, -2, 0, true);
            const smoothedWeights = weights.clone();
            for (let a = 0; a < smoothedWeights.dims[0]; ++a) {
              const aTensor = smoothedWeights[a];
              for (let b = 0; b < aTensor.dims[0]; ++b) {
                const bTensor = aTensor[b];
                const stdTensorData = std[a][b][0].data;
                const meanTensorData = calculatedMean[a][b][0].data;
                for (let c = 0; c < bTensor.dims[0]; ++c) {
                  let cTensorData = bTensor[c].data;
                  for (let d = 0; d < cTensorData.length; ++d) {
                    cTensorData[d] = (cTensorData[d] - meanTensorData[d]) / stdTensorData[d];
                  }
                  cTensorData.set((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_10__.medianFilter)(cTensorData, median_filter_width));
                }
              }
            }
            const batchedMatrices = [(0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.mean)(smoothedWeights, 1)];
            const timestampsShape = generate_outputs.sequences.dims;
            const timestamps = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
              "float32",
              new Float32Array(timestampsShape[0] * timestampsShape[1]),
              timestampsShape
            );
            for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {
              const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);
              const [text_indices, time_indices] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_10__.dynamic_time_warping)(matrix.tolist());
              const diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);
              const jumps = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.mergeArrays)([1], diffs).map((x) => !!x);
              const jump_times = [];
              for (let i = 0; i < jumps.length; ++i) {
                if (jumps[i]) {
                  jump_times.push(time_indices[i] * time_precision);
                }
              }
              timestamps[batch_idx].data.set(jump_times, 1);
            }
            return timestamps;
          }
        }
        class VisionEncoderDecoderModel extends PreTrainedModel {
          main_input_name = "pixel_values";
          forward_params = [
            // Encoder inputs
            "pixel_values",
            // Decoder inpputs
            "decoder_input_ids",
            "encoder_hidden_states",
            "past_key_values"
          ];
        }
        class LlavaPreTrainedModel extends PreTrainedModel {
          forward_params = [
            "input_ids",
            "pixel_values",
            "attention_mask",
            "position_ids",
            "past_key_values"
          ];
        }
        class LlavaForConditionalGeneration extends LlavaPreTrainedModel {
          _merge_input_ids_with_image_features({
            inputs_embeds,
            image_features,
            input_ids,
            attention_mask
          }) {
            const image_token_index = this.config.image_token_index;
            const idsList = input_ids.tolist();
            const indexOfImage = idsList.map((x) => x.findIndex((x2) => x2 == image_token_index));
            const noImages = indexOfImage.every((x) => x === -1);
            const allImages = indexOfImage.every((x) => x !== -1);
            if (!noImages && !allImages) {
              throw new Error("Every input should contain either 0 or 1 image token.");
            }
            if (noImages) {
              return {
                inputs_embeds,
                attention_mask
              };
            }
            const stacked = [];
            const stacked_attention_mask = [];
            for (let i = 0; i < indexOfImage.length; ++i) {
              const index2 = indexOfImage[i];
              const e = inputs_embeds[i];
              const im = image_features[i];
              const am = attention_mask[i];
              stacked.push(
                (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  e.slice([0, index2]),
                  im,
                  e.slice([index2 + 1, e.dims[0]])
                ], 0)
              );
              stacked_attention_mask.push(
                (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                  am.slice([0, index2]),
                  (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)([im.dims[0]]),
                  am.slice([index2 + 1, am.dims[0]])
                ], 0)
              );
            }
            return {
              inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked, 0),
              attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.stack)(stacked_attention_mask, 0)
            };
          }
        }
        class Moondream1ForConditionalGeneration extends LlavaForConditionalGeneration {
        }
        class Florence2PreTrainedModel extends PreTrainedModel {
          forward_params = [
            // Encoder inputs
            "input_ids",
            "inputs_embeds",
            "attention_mask",
            "pixel_values",
            // Decoder inputs
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_inputs_embeds",
            "decoder_attention_mask",
            "past_key_values"
          ];
          main_input_name = "inputs_embeds";
        }
        class Florence2ForConditionalGeneration extends Florence2PreTrainedModel {
          _merge_input_ids_with_image_features({
            inputs_embeds,
            image_features,
            input_ids,
            attention_mask
          }) {
            return {
              inputs_embeds: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                image_features,
                // image embeds
                inputs_embeds
                // task prefix embeds
              ], 1),
              attention_mask: (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)([
                (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.ones)(image_features.dims.slice(0, 2)),
                // image attention mask
                attention_mask
                // task prefix attention mask
              ], 1)
            };
          }
          async _prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }) {
            if (!input_ids && !pixel_values) {
              throw new Error("Either `input_ids` or `pixel_values` should be provided.");
            }
            let text_features, image_features;
            if (input_ids) {
              text_features = await this.encode_text({ input_ids });
            }
            if (pixel_values) {
              image_features = await this.encode_image({ pixel_values });
            }
            if (text_features && image_features) {
              ({ inputs_embeds, attention_mask } = this._merge_input_ids_with_image_features({
                inputs_embeds: text_features,
                image_features,
                input_ids,
                attention_mask
              }));
            } else {
              inputs_embeds = text_features || image_features;
            }
            return { inputs_embeds, attention_mask };
          }
          async forward({
            input_ids,
            pixel_values,
            attention_mask,
            decoder_input_ids,
            decoder_attention_mask,
            encoder_outputs,
            past_key_values,
            inputs_embeds,
            decoder_inputs_embeds
          }) {
            if (!inputs_embeds) {
              ({ inputs_embeds, attention_mask } = await this._prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }));
            }
            if (!encoder_outputs) {
              let { last_hidden_state } = await encoderForward(this, { inputs_embeds, attention_mask });
              encoder_outputs = last_hidden_state;
            }
            if (!decoder_inputs_embeds) {
              if (!decoder_input_ids) {
                throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");
              }
              decoder_inputs_embeds = await this.encode_text({ input_ids: decoder_input_ids });
            }
            const decoderFeeds = {
              inputs_embeds: decoder_inputs_embeds,
              attention_mask: decoder_attention_mask,
              encoder_attention_mask: attention_mask,
              encoder_hidden_states: encoder_outputs,
              past_key_values
            };
            const decoder_outputs = await decoderForward(this, decoderFeeds, true);
            return decoder_outputs;
          }
        }
        class CLIPPreTrainedModel extends PreTrainedModel {
        }
        class CLIPModel extends CLIPPreTrainedModel {
        }
        class CLIPTextModel extends CLIPPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "text_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class CLIPTextModelWithProjection extends CLIPPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "text_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class CLIPVisionModel extends CLIPPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "vision_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "vision_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class SiglipPreTrainedModel extends PreTrainedModel {
        }
        class SiglipModel extends SiglipPreTrainedModel {
        }
        class SiglipTextModel extends SiglipPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "text_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class SiglipVisionModel extends CLIPPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "vision_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class ChineseCLIPPreTrainedModel extends PreTrainedModel {
        }
        class ChineseCLIPModel extends ChineseCLIPPreTrainedModel {
        }
        class CLIPSegPreTrainedModel extends PreTrainedModel {
        }
        class CLIPSegModel extends CLIPSegPreTrainedModel {
        }
        class CLIPSegForImageSegmentation extends CLIPSegPreTrainedModel {
        }
        class GPT2PreTrainedModel extends PreTrainedModel {
        }
        class GPT2Model extends GPT2PreTrainedModel {
        }
        class GPT2LMHeadModel extends GPT2PreTrainedModel {
        }
        class JAISPreTrainedModel extends PreTrainedModel {
        }
        class JAISModel extends JAISPreTrainedModel {
        }
        class JAISLMHeadModel extends JAISPreTrainedModel {
        }
        class GPTNeoPreTrainedModel extends PreTrainedModel {
        }
        class GPTNeoModel extends GPTNeoPreTrainedModel {
        }
        class GPTNeoForCausalLM extends GPTNeoPreTrainedModel {
        }
        class GPTNeoXPreTrainedModel extends PreTrainedModel {
        }
        class GPTNeoXModel extends GPTNeoXPreTrainedModel {
        }
        class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel {
        }
        class GPTJPreTrainedModel extends PreTrainedModel {
        }
        class GPTJModel extends GPTJPreTrainedModel {
        }
        class GPTJForCausalLM extends GPTJPreTrainedModel {
        }
        class GPTBigCodePreTrainedModel extends PreTrainedModel {
        }
        class GPTBigCodeModel extends GPTBigCodePreTrainedModel {
        }
        class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel {
        }
        class CodeGenPreTrainedModel extends PreTrainedModel {
        }
        class CodeGenModel extends CodeGenPreTrainedModel {
        }
        class CodeGenForCausalLM extends CodeGenPreTrainedModel {
        }
        class LlamaPreTrainedModel extends PreTrainedModel {
        }
        class LlamaModel extends LlamaPreTrainedModel {
        }
        class LlamaForCausalLM extends LlamaPreTrainedModel {
        }
        class MobileLLMPreTrainedModel extends PreTrainedModel {
        }
        class MobileLLMModel extends MobileLLMPreTrainedModel {
        }
        class MobileLLMForCausalLM extends MobileLLMPreTrainedModel {
        }
        class OlmoPreTrainedModel extends PreTrainedModel {
        }
        class OlmoModel extends OlmoPreTrainedModel {
        }
        class OlmoForCausalLM extends OlmoPreTrainedModel {
        }
        class GranitePreTrainedModel extends PreTrainedModel {
        }
        class GraniteModel extends GranitePreTrainedModel {
        }
        class GraniteForCausalLM extends GranitePreTrainedModel {
        }
        class CoherePreTrainedModel extends PreTrainedModel {
        }
        class CohereModel extends CoherePreTrainedModel {
        }
        class CohereForCausalLM extends CoherePreTrainedModel {
        }
        class GemmaPreTrainedModel extends PreTrainedModel {
        }
        class GemmaModel extends GemmaPreTrainedModel {
        }
        class GemmaForCausalLM extends GemmaPreTrainedModel {
        }
        class Gemma2PreTrainedModel extends PreTrainedModel {
        }
        class Gemma2Model extends Gemma2PreTrainedModel {
        }
        class Gemma2ForCausalLM extends Gemma2PreTrainedModel {
        }
        class OpenELMPreTrainedModel extends PreTrainedModel {
        }
        class OpenELMModel extends OpenELMPreTrainedModel {
        }
        class OpenELMForCausalLM extends OpenELMPreTrainedModel {
        }
        class Qwen2PreTrainedModel extends PreTrainedModel {
        }
        class Qwen2Model extends Qwen2PreTrainedModel {
        }
        class Qwen2ForCausalLM extends Qwen2PreTrainedModel {
        }
        class PhiPreTrainedModel extends PreTrainedModel {
        }
        class PhiModel extends PhiPreTrainedModel {
        }
        class PhiForCausalLM extends PhiPreTrainedModel {
        }
        class Phi3PreTrainedModel extends PreTrainedModel {
        }
        class Phi3Model extends Phi3PreTrainedModel {
        }
        class Phi3ForCausalLM extends Phi3PreTrainedModel {
        }
        class BloomPreTrainedModel extends PreTrainedModel {
        }
        class BloomModel extends BloomPreTrainedModel {
        }
        class BloomForCausalLM extends BloomPreTrainedModel {
        }
        class MptPreTrainedModel extends PreTrainedModel {
        }
        class MptModel extends MptPreTrainedModel {
        }
        class MptForCausalLM extends MptPreTrainedModel {
        }
        class OPTPreTrainedModel extends PreTrainedModel {
        }
        class OPTModel extends OPTPreTrainedModel {
        }
        class OPTForCausalLM extends OPTPreTrainedModel {
        }
        class ViTPreTrainedModel extends PreTrainedModel {
        }
        class ViTModel extends ViTPreTrainedModel {
        }
        class ViTForImageClassification extends ViTPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class PvtPreTrainedModel extends PreTrainedModel {
        }
        class PvtModel extends PvtPreTrainedModel {
        }
        class PvtForImageClassification extends PvtPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class ViTMAEPreTrainedModel extends PreTrainedModel {
        }
        class ViTMAEModel extends ViTMAEPreTrainedModel {
        }
        class ViTMSNPreTrainedModel extends PreTrainedModel {
        }
        class ViTMSNModel extends ViTMSNPreTrainedModel {
        }
        class ViTMSNForImageClassification extends ViTMSNPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class GroupViTPreTrainedModel extends PreTrainedModel {
        }
        class GroupViTModel extends GroupViTPreTrainedModel {
        }
        class FastViTPreTrainedModel extends PreTrainedModel {
        }
        class FastViTModel extends FastViTPreTrainedModel {
        }
        class FastViTForImageClassification extends FastViTPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class VitMattePreTrainedModel extends PreTrainedModel {
        }
        class VitMatteForImageMatting extends VitMattePreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new ImageMattingOutput(await super._call(model_inputs));
          }
        }
        class MobileViTPreTrainedModel extends PreTrainedModel {
        }
        class MobileViTModel extends MobileViTPreTrainedModel {
        }
        class MobileViTForImageClassification extends MobileViTPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileViTV2PreTrainedModel extends PreTrainedModel {
        }
        class MobileViTV2Model extends MobileViTV2PreTrainedModel {
        }
        class MobileViTV2ForImageClassification extends MobileViTV2PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class OwlViTPreTrainedModel extends PreTrainedModel {
        }
        class OwlViTModel extends OwlViTPreTrainedModel {
        }
        class OwlViTForObjectDetection extends OwlViTPreTrainedModel {
        }
        class Owlv2PreTrainedModel extends PreTrainedModel {
        }
        class Owlv2Model extends Owlv2PreTrainedModel {
        }
        class Owlv2ForObjectDetection extends Owlv2PreTrainedModel {
        }
        class BeitPreTrainedModel extends PreTrainedModel {
        }
        class BeitModel extends BeitPreTrainedModel {
        }
        class BeitForImageClassification extends BeitPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class DetrPreTrainedModel extends PreTrainedModel {
        }
        class DetrModel extends DetrPreTrainedModel {
        }
        class DetrForObjectDetection extends DetrPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new DetrObjectDetectionOutput(await super._call(model_inputs));
          }
        }
        class DetrForSegmentation extends DetrPreTrainedModel {
          /**
           * Runs the model with the provided inputs
           * @param {Object} model_inputs Model inputs
           * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs
           */
          async _call(model_inputs) {
            return new DetrSegmentationOutput(await super._call(model_inputs));
          }
        }
        class DetrObjectDetectionOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
           * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
           * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
           */
          constructor({ logits, pred_boxes }) {
            super();
            this.logits = logits;
            this.pred_boxes = pred_boxes;
          }
        }
        class DetrSegmentationOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits The output logits of the model.
           * @param {Tensor} output.pred_boxes Predicted boxes.
           * @param {Tensor} output.pred_masks Predicted masks.
           */
          constructor({ logits, pred_boxes, pred_masks }) {
            super();
            this.logits = logits;
            this.pred_boxes = pred_boxes;
            this.pred_masks = pred_masks;
          }
        }
        class RTDetrPreTrainedModel extends PreTrainedModel {
        }
        class RTDetrModel extends RTDetrPreTrainedModel {
        }
        class RTDetrForObjectDetection extends RTDetrPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new RTDetrObjectDetectionOutput(await super._call(model_inputs));
          }
        }
        class RTDetrObjectDetectionOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
           * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
           * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
           */
          constructor({ logits, pred_boxes }) {
            super();
            this.logits = logits;
            this.pred_boxes = pred_boxes;
          }
        }
        class TableTransformerPreTrainedModel extends PreTrainedModel {
        }
        class TableTransformerModel extends TableTransformerPreTrainedModel {
        }
        class TableTransformerForObjectDetection extends TableTransformerPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new TableTransformerObjectDetectionOutput(await super._call(model_inputs));
          }
        }
        class TableTransformerObjectDetectionOutput extends DetrObjectDetectionOutput {
        }
        class DeiTPreTrainedModel extends PreTrainedModel {
        }
        class DeiTModel extends DeiTPreTrainedModel {
        }
        class DeiTForImageClassification extends DeiTPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class HieraPreTrainedModel extends PreTrainedModel {
        }
        class HieraModel extends HieraPreTrainedModel {
        }
        class HieraForImageClassification extends HieraPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class ResNetPreTrainedModel extends PreTrainedModel {
        }
        class ResNetModel extends ResNetPreTrainedModel {
        }
        class ResNetForImageClassification extends ResNetPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class SwinPreTrainedModel extends PreTrainedModel {
        }
        class SwinModel extends SwinPreTrainedModel {
        }
        class SwinForImageClassification extends SwinPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class Swin2SRPreTrainedModel extends PreTrainedModel {
        }
        class Swin2SRModel extends Swin2SRPreTrainedModel {
        }
        class Swin2SRForImageSuperResolution extends Swin2SRPreTrainedModel {
        }
        class DPTPreTrainedModel extends PreTrainedModel {
        }
        class DPTModel extends DPTPreTrainedModel {
        }
        class DPTForDepthEstimation extends DPTPreTrainedModel {
        }
        class DepthAnythingPreTrainedModel extends PreTrainedModel {
        }
        class DepthAnythingForDepthEstimation extends DepthAnythingPreTrainedModel {
        }
        class SapiensPreTrainedModel extends PreTrainedModel {
        }
        class SapiensForSemanticSegmentation extends SapiensPreTrainedModel {
        }
        class SapiensForDepthEstimation extends SapiensPreTrainedModel {
        }
        class SapiensForNormalEstimation extends SapiensPreTrainedModel {
        }
        class DepthProPreTrainedModel extends PreTrainedModel {
        }
        class DepthProForDepthEstimation extends DepthProPreTrainedModel {
        }
        class MaskFormerPreTrainedModel extends PreTrainedModel {
        }
        class MaskFormerModel extends MaskFormerPreTrainedModel {
        }
        class MaskFormerForInstanceSegmentation extends MaskFormerPreTrainedModel {
        }
        class GLPNPreTrainedModel extends PreTrainedModel {
        }
        class GLPNModel extends GLPNPreTrainedModel {
        }
        class GLPNForDepthEstimation extends GLPNPreTrainedModel {
        }
        class DonutSwinPreTrainedModel extends PreTrainedModel {
        }
        class DonutSwinModel extends DonutSwinPreTrainedModel {
        }
        class ConvNextPreTrainedModel extends PreTrainedModel {
        }
        class ConvNextModel extends ConvNextPreTrainedModel {
        }
        class ConvNextForImageClassification extends ConvNextPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class ConvNextV2PreTrainedModel extends PreTrainedModel {
        }
        class ConvNextV2Model extends ConvNextV2PreTrainedModel {
        }
        class ConvNextV2ForImageClassification extends ConvNextV2PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class Dinov2PreTrainedModel extends PreTrainedModel {
        }
        class Dinov2Model extends Dinov2PreTrainedModel {
        }
        class Dinov2ForImageClassification extends Dinov2PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class YolosPreTrainedModel extends PreTrainedModel {
        }
        class YolosModel extends YolosPreTrainedModel {
        }
        class YolosForObjectDetection extends YolosPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new YolosObjectDetectionOutput(await super._call(model_inputs));
          }
        }
        class YolosObjectDetectionOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Classification logits (including no-object) for all queries.
           * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).
           * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).
           */
          constructor({ logits, pred_boxes }) {
            super();
            this.logits = logits;
            this.pred_boxes = pred_boxes;
          }
        }
        class SamPreTrainedModel extends PreTrainedModel {
        }
        class SamModel extends SamPreTrainedModel {
          /**
           * Compute image embeddings and positional image embeddings, given the pixel values of an image.
           * @param {Object} model_inputs Object containing the model inputs.
           * @param {Tensor} model_inputs.pixel_values Pixel values obtained using a `SamProcessor`.
           * @returns {Promise<{ image_embeddings: Tensor, image_positional_embeddings: Tensor }>} The image embeddings and positional image embeddings.
           */
          async get_image_embeddings({ pixel_values }) {
            return await encoderForward(this, { pixel_values });
          }
          /**
           * @typedef {Object} SamModelInputs Object containing the model inputs.
           * @property {Tensor} pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.
           * These can be obtained using a `SamProcessor`.
           * @property {Tensor} [input_points] Input 2D spatial points with shape `(batch_size, num_points, 2)`.
           * This is used by the prompt encoder to encode the prompt.
           * @property {Tensor} [input_labels] Input labels for the points, as a Tensor of shape `(batch_size, point_batch_size, num_points)`.
           * This is used by the prompt encoder to encode the prompt. There are 4 types of labels:
           *  - `1`: the point is a point that contains the object of interest
           *  - `0`: the point is a point that does not contain the object of interest
           *  - `-1`: the point corresponds to the background
           *  - `-10`: the point is a padding point, thus should be ignored by the prompt encoder
           * @property {Tensor} [input_boxes] Input bounding boxes with shape `(batch_size, num_boxes, 4)`.
           * @property {Tensor} [image_embeddings] Image embeddings used by the mask decoder.
           * @property {Tensor} [image_positional_embeddings] Image positional embeddings used by the mask decoder.
           */
          /**
           * @param {SamModelInputs} model_inputs Object containing the model inputs.
           * @returns {Promise<Object>} The output of the model.
           */
          async forward(model_inputs) {
            if (!model_inputs.image_embeddings || !model_inputs.image_positional_embeddings) {
              model_inputs = {
                ...model_inputs,
                ...await this.get_image_embeddings(model_inputs)
              };
            }
            if (!model_inputs.input_labels && model_inputs.input_points) {
              const shape = model_inputs.input_points.dims.slice(0, -1);
              const numElements = shape.reduce((a, b) => a * b, 1);
              model_inputs.input_labels = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                "int64",
                new BigInt64Array(numElements).fill(1n),
                shape
              );
            }
            const decoder_inputs = {
              image_embeddings: model_inputs.image_embeddings,
              image_positional_embeddings: model_inputs.image_positional_embeddings
            };
            if (model_inputs.input_points) {
              decoder_inputs.input_points = model_inputs.input_points;
            }
            if (model_inputs.input_labels) {
              decoder_inputs.input_labels = model_inputs.input_labels;
            }
            if (model_inputs.input_boxes) {
              decoder_inputs.input_boxes = model_inputs.input_boxes;
            }
            return await sessionRun(this.sessions["prompt_encoder_mask_decoder"], decoder_inputs);
          }
          /**
           * Runs the model with the provided inputs
           * @param {Object} model_inputs Model inputs
           * @returns {Promise<SamImageSegmentationOutput>} Object containing segmentation outputs
           */
          async _call(model_inputs) {
            return new SamImageSegmentationOutput(await super._call(model_inputs));
          }
        }
        class SamImageSegmentationOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.iou_scores The output logits of the model.
           * @param {Tensor} output.pred_masks Predicted boxes.
           */
          constructor({ iou_scores, pred_masks }) {
            super();
            this.iou_scores = iou_scores;
            this.pred_masks = pred_masks;
          }
        }
        class MarianPreTrainedModel extends PreTrainedModel {
        }
        ;
        class MarianModel extends MarianPreTrainedModel {
        }
        class MarianMTModel extends MarianPreTrainedModel {
        }
        class M2M100PreTrainedModel extends PreTrainedModel {
        }
        ;
        class M2M100Model extends M2M100PreTrainedModel {
        }
        class M2M100ForConditionalGeneration extends M2M100PreTrainedModel {
        }
        class Wav2Vec2PreTrainedModel extends PreTrainedModel {
        }
        ;
        class Wav2Vec2Model extends Wav2Vec2PreTrainedModel {
        }
        class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class Wav2Vec2ForAudioFrameClassification extends Wav2Vec2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class PyAnnotePreTrainedModel extends PreTrainedModel {
        }
        ;
        class PyAnnoteModel extends PyAnnotePreTrainedModel {
        }
        class PyAnnoteForAudioFrameClassification extends PyAnnotePreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class WeSpeakerResNetPreTrainedModel extends PreTrainedModel {
        }
        ;
        class WeSpeakerResNetModel extends WeSpeakerResNetPreTrainedModel {
        }
        class UniSpeechPreTrainedModel extends PreTrainedModel {
        }
        ;
        class UniSpeechModel extends UniSpeechPreTrainedModel {
        }
        class UniSpeechForCTC extends UniSpeechPreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class UniSpeechForSequenceClassification extends UniSpeechPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class UniSpeechSatPreTrainedModel extends PreTrainedModel {
        }
        ;
        class UniSpeechSatModel extends UniSpeechSatPreTrainedModel {
        }
        class UniSpeechSatForCTC extends UniSpeechSatPreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class UniSpeechSatForSequenceClassification extends UniSpeechSatPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class UniSpeechSatForAudioFrameClassification extends UniSpeechSatPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class Wav2Vec2BertPreTrainedModel extends PreTrainedModel {
        }
        ;
        class Wav2Vec2BertModel extends Wav2Vec2BertPreTrainedModel {
        }
        class Wav2Vec2BertForCTC extends Wav2Vec2BertPreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_features Float values of input mel-spectrogram.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class Wav2Vec2BertForSequenceClassification extends Wav2Vec2BertPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class HubertPreTrainedModel extends PreTrainedModel {
        }
        class HubertModel extends Wav2Vec2PreTrainedModel {
        }
        class HubertForCTC extends Wav2Vec2PreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class HubertForSequenceClassification extends Wav2Vec2PreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class WavLMPreTrainedModel extends PreTrainedModel {
        }
        ;
        class WavLMModel extends WavLMPreTrainedModel {
        }
        class WavLMForCTC extends WavLMPreTrainedModel {
          /**
           * @param {Object} model_inputs
           * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.
           * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]
           */
          async _call(model_inputs) {
            return new CausalLMOutput(await super._call(model_inputs));
          }
        }
        class WavLMForSequenceClassification extends WavLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class WavLMForXVector extends WavLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<XVectorOutput>} An object containing the model's output logits and speaker embeddings.
           */
          async _call(model_inputs) {
            return new XVectorOutput(await super._call(model_inputs));
          }
        }
        class WavLMForAudioFrameClassification extends WavLMPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.
           */
          async _call(model_inputs) {
            return new TokenClassifierOutput(await super._call(model_inputs));
          }
        }
        class SpeechT5PreTrainedModel extends PreTrainedModel {
        }
        ;
        class SpeechT5Model extends SpeechT5PreTrainedModel {
        }
        ;
        class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel {
        }
        class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {
          /**
           * @typedef {Object} SpeechOutput
           * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape
           * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided
           * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.
           * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape
           * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.
           */
          /**
           * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.
           * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.
           * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.
           * @param {Object} options Optional parameters for generating speech.
           * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.
           * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.
           * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.
           * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.
           * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.
           * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.
           */
          async generate_speech(input_values, speaker_embeddings, {
            threshold = 0.5,
            minlenratio = 0,
            maxlenratio = 20,
            vocoder = null
            // output_cross_attentions = false, // TODO add
          } = {}) {
            const model_inputs = {
              input_ids: input_values
            };
            const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);
            const r = encoder_outputs.dims[1] / this.config.reduction_factor;
            const maxlen = Math.floor(r * maxlenratio);
            const minlen = Math.floor(r * minlenratio);
            const num_mel_bins = this.config.num_mel_bins;
            let spectrogramParts = [];
            let past_key_values = null;
            let decoder_outputs = null;
            let idx = 0;
            while (true) {
              ++idx;
              const use_cache_branch = boolTensor(!!decoder_outputs);
              let output_sequence;
              if (decoder_outputs) {
                output_sequence = decoder_outputs.output_sequence_out;
              } else {
                output_sequence = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
                  "float32",
                  new Float32Array(num_mel_bins),
                  [1, 1, num_mel_bins]
                );
              }
              let decoderFeeds = {
                use_cache_branch,
                output_sequence,
                encoder_attention_mask,
                speaker_embeddings,
                encoder_hidden_states: encoder_outputs
              };
              this.addPastKeyValues(decoderFeeds, past_key_values);
              decoder_outputs = await sessionRun(this.sessions["decoder_model_merged"], decoderFeeds);
              past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);
              const { prob, spectrum } = decoder_outputs;
              spectrogramParts.push(spectrum);
              if (idx >= minlen && // Finished when stop token or maximum length is reached.
              (Array.from(prob.data).filter((p) => p >= threshold).length > 0 || idx >= maxlen)) {
                break;
              }
            }
            const spectrogram = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.cat)(spectrogramParts);
            const { waveform } = await sessionRun(vocoder.sessions["model"], { spectrogram });
            return {
              spectrogram,
              waveform
              // cross_attentions: null, // TODO add
            };
          }
        }
        class SpeechT5HifiGan extends PreTrainedModel {
          main_input_name = "spectrogram";
        }
        class TrOCRPreTrainedModel extends PreTrainedModel {
        }
        class TrOCRForCausalLM extends TrOCRPreTrainedModel {
        }
        class MistralPreTrainedModel extends PreTrainedModel {
        }
        class MistralModel extends MistralPreTrainedModel {
        }
        class MistralForCausalLM extends MistralPreTrainedModel {
        }
        class Starcoder2PreTrainedModel extends PreTrainedModel {
        }
        class Starcoder2Model extends Starcoder2PreTrainedModel {
        }
        class Starcoder2ForCausalLM extends Starcoder2PreTrainedModel {
        }
        class FalconPreTrainedModel extends PreTrainedModel {
        }
        class FalconModel extends FalconPreTrainedModel {
        }
        class FalconForCausalLM extends FalconPreTrainedModel {
        }
        class ClapPreTrainedModel extends PreTrainedModel {
        }
        class ClapModel extends ClapPreTrainedModel {
        }
        class ClapTextModelWithProjection extends ClapPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "text_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class ClapAudioModelWithProjection extends ClapPreTrainedModel {
          /** @type {PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, options2 = {}) {
            options2.model_file_name ??= "audio_model";
            return super.from_pretrained(pretrained_model_name_or_path, options2);
          }
        }
        class VitsPreTrainedModel extends PreTrainedModel {
        }
        class VitsModel extends VitsPreTrainedModel {
          /**
           * Calls the model on new inputs.
           * @param {Object} model_inputs The inputs to the model.
           * @returns {Promise<VitsModelOutput>} The outputs for the VITS model.
           */
          async _call(model_inputs) {
            return new VitsModelOutput(await super._call(model_inputs));
          }
        }
        class SegformerPreTrainedModel extends PreTrainedModel {
        }
        class SegformerModel extends SegformerPreTrainedModel {
        }
        class SegformerForImageClassification extends SegformerPreTrainedModel {
        }
        class SegformerForSemanticSegmentation extends SegformerPreTrainedModel {
        }
        class StableLmPreTrainedModel extends PreTrainedModel {
        }
        class StableLmModel extends StableLmPreTrainedModel {
        }
        class StableLmForCausalLM extends StableLmPreTrainedModel {
        }
        class EfficientNetPreTrainedModel extends PreTrainedModel {
        }
        class EfficientNetModel extends EfficientNetPreTrainedModel {
        }
        class EfficientNetForImageClassification extends EfficientNetPreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MusicgenPreTrainedModel extends PreTrainedModel {
        }
        class MusicgenModel extends MusicgenPreTrainedModel {
        }
        class MusicgenForCausalLM extends MusicgenPreTrainedModel {
        }
        class MusicgenForConditionalGeneration extends PreTrainedModel {
          // NOTE: not MusicgenPreTrainedModel
          forward_params = [
            "input_ids",
            "attention_mask",
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ];
          /**
           * Apply the pattern mask to the final ids,
           * then revert the pattern delay mask by filtering the pad token id in a single step.
           * @param {Tensor} outputs The output tensor from the model.
           * @returns {Tensor} The filtered output tensor.
           */
          _apply_and_filter_by_delay_pattern_mask(outputs) {
            const [bs_x_codebooks, seqLength] = outputs.dims;
            const num_codebooks = this.config.decoder.num_codebooks;
            const upperBound = seqLength - num_codebooks;
            let newDataSize = 0;
            for (let i = 0; i < outputs.size; ++i) {
              if (outputs.data[i] === this.config.decoder.pad_token_id) {
                continue;
              }
              const row = i % seqLength;
              const col = Math.floor(i / seqLength) % num_codebooks;
              const diff = row - col;
              if (diff > 0 && diff <= upperBound) {
                outputs.data[newDataSize++] = outputs.data[i];
              }
            }
            const batch_size = Math.floor(bs_x_codebooks / num_codebooks);
            const inferred = newDataSize / (batch_size * num_codebooks);
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_9__.Tensor(
              outputs.type,
              outputs.data.slice(0, newDataSize),
              [batch_size, num_codebooks, inferred]
            );
          }
          prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {
            let clonedInputIds = structuredClone(input_ids);
            for (let i = 0; i < clonedInputIds.length; ++i) {
              for (let j = 0; j < clonedInputIds[i].length; ++j) {
                if (i % this.config.decoder.num_codebooks >= j) {
                  clonedInputIds[i][j] = BigInt(this.config.decoder.pad_token_id);
                }
              }
            }
            if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {
              clonedInputIds = clonedInputIds.concat(clonedInputIds);
            }
            const prepped = super.prepare_inputs_for_generation(clonedInputIds, model_inputs, generation_config);
            return prepped;
          }
          /**
           * Generates sequences of token ids for models with a language modeling head.
           * @param {import('./generation/parameters.js').GenerationFunctionParameters} options
           * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.
           */
          async generate(options2) {
            const output_ids = await super.generate(options2);
            const audio_codes = this._apply_and_filter_by_delay_pattern_mask(
              /** @type {Tensor} */
              output_ids
            ).unsqueeze_(0);
            const { audio_values } = await sessionRun(this.sessions["encodec_decode"], { audio_codes });
            return audio_values;
          }
        }
        class MobileNetV1PreTrainedModel extends PreTrainedModel {
        }
        class MobileNetV1Model extends MobileNetV1PreTrainedModel {
        }
        class MobileNetV1ForImageClassification extends MobileNetV1PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileNetV2PreTrainedModel extends PreTrainedModel {
        }
        class MobileNetV2Model extends MobileNetV2PreTrainedModel {
        }
        class MobileNetV2ForImageClassification extends MobileNetV2PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileNetV3PreTrainedModel extends PreTrainedModel {
        }
        class MobileNetV3Model extends MobileNetV3PreTrainedModel {
        }
        class MobileNetV3ForImageClassification extends MobileNetV3PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class MobileNetV4PreTrainedModel extends PreTrainedModel {
        }
        class MobileNetV4Model extends MobileNetV4PreTrainedModel {
        }
        class MobileNetV4ForImageClassification extends MobileNetV4PreTrainedModel {
          /**
           * @param {any} model_inputs
           */
          async _call(model_inputs) {
            return new SequenceClassifierOutput(await super._call(model_inputs));
          }
        }
        class DecisionTransformerPreTrainedModel extends PreTrainedModel {
        }
        class DecisionTransformerModel extends DecisionTransformerPreTrainedModel {
        }
        class PretrainedMixin {
          /**
           * Mapping from model type to model class.
           * @type {Map<string, Object>[]}
           */
          static MODEL_CLASS_MAPPINGS = null;
          /**
           * Whether to attempt to instantiate the base class (`PretrainedModel`) if 
           * the model type is not found in the mapping.
           */
          static BASE_IF_FAIL = false;
          /** @type {typeof PreTrainedModel.from_pretrained} */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main",
            model_file_name = null,
            subfolder = "onnx",
            device = null,
            dtype = null,
            use_external_data_format = null,
            session_options = {}
          } = {}) {
            const options2 = {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision,
              model_file_name,
              subfolder,
              device,
              dtype,
              use_external_data_format,
              session_options
            };
            options2.config = await _configs_js__WEBPACK_IMPORTED_MODULE_0__.AutoConfig.from_pretrained(pretrained_model_name_or_path, options2);
            if (!this.MODEL_CLASS_MAPPINGS) {
              throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: " + this.name);
            }
            for (const MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {
              const modelInfo = MODEL_CLASS_MAPPING.get(options2.config.model_type);
              if (!modelInfo) {
                continue;
              }
              return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options2);
            }
            if (this.BASE_IF_FAIL) {
              console.warn(`Unknown model class "${options2.config.model_type}", attempting to construct from base class.`);
              return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options2);
            } else {
              throw Error(`Unsupported model type: ${options2.config.model_type}`);
            }
          }
        }
        const MODEL_MAPPING_NAMES_ENCODER_ONLY = /* @__PURE__ */ new Map([
          ["bert", ["BertModel", BertModel]],
          ["nomic_bert", ["NomicBertModel", NomicBertModel]],
          ["roformer", ["RoFormerModel", RoFormerModel]],
          ["electra", ["ElectraModel", ElectraModel]],
          ["esm", ["EsmModel", EsmModel]],
          ["convbert", ["ConvBertModel", ConvBertModel]],
          ["camembert", ["CamembertModel", CamembertModel]],
          ["deberta", ["DebertaModel", DebertaModel]],
          ["deberta-v2", ["DebertaV2Model", DebertaV2Model]],
          ["mpnet", ["MPNetModel", MPNetModel]],
          ["albert", ["AlbertModel", AlbertModel]],
          ["distilbert", ["DistilBertModel", DistilBertModel]],
          ["roberta", ["RobertaModel", RobertaModel]],
          ["xlm", ["XLMModel", XLMModel]],
          ["xlm-roberta", ["XLMRobertaModel", XLMRobertaModel]],
          ["clap", ["ClapModel", ClapModel]],
          ["clip", ["CLIPModel", CLIPModel]],
          ["clipseg", ["CLIPSegModel", CLIPSegModel]],
          ["chinese_clip", ["ChineseCLIPModel", ChineseCLIPModel]],
          ["siglip", ["SiglipModel", SiglipModel]],
          ["mobilebert", ["MobileBertModel", MobileBertModel]],
          ["squeezebert", ["SqueezeBertModel", SqueezeBertModel]],
          ["wav2vec2", ["Wav2Vec2Model", Wav2Vec2Model]],
          ["wav2vec2-bert", ["Wav2Vec2BertModel", Wav2Vec2BertModel]],
          ["unispeech", ["UniSpeechModel", UniSpeechModel]],
          ["unispeech-sat", ["UniSpeechSatModel", UniSpeechSatModel]],
          ["hubert", ["HubertModel", HubertModel]],
          ["wavlm", ["WavLMModel", WavLMModel]],
          ["audio-spectrogram-transformer", ["ASTModel", ASTModel]],
          ["vits", ["VitsModel", VitsModel]],
          ["pyannote", ["PyAnnoteModel", PyAnnoteModel]],
          ["wespeaker-resnet", ["WeSpeakerResNetModel", WeSpeakerResNetModel]],
          ["detr", ["DetrModel", DetrModel]],
          ["rt_detr", ["RTDetrModel", RTDetrModel]],
          ["table-transformer", ["TableTransformerModel", TableTransformerModel]],
          ["vit", ["ViTModel", ViTModel]],
          ["pvt", ["PvtModel", PvtModel]],
          ["vit_msn", ["ViTMSNModel", ViTMSNModel]],
          ["vit_mae", ["ViTMAEModel", ViTMAEModel]],
          ["groupvit", ["GroupViTModel", GroupViTModel]],
          ["fastvit", ["FastViTModel", FastViTModel]],
          ["mobilevit", ["MobileViTModel", MobileViTModel]],
          ["mobilevitv2", ["MobileViTV2Model", MobileViTV2Model]],
          ["owlvit", ["OwlViTModel", OwlViTModel]],
          ["owlv2", ["Owlv2Model", Owlv2Model]],
          ["beit", ["BeitModel", BeitModel]],
          ["deit", ["DeiTModel", DeiTModel]],
          ["hiera", ["HieraModel", HieraModel]],
          ["convnext", ["ConvNextModel", ConvNextModel]],
          ["convnextv2", ["ConvNextV2Model", ConvNextV2Model]],
          ["dinov2", ["Dinov2Model", Dinov2Model]],
          ["resnet", ["ResNetModel", ResNetModel]],
          ["swin", ["SwinModel", SwinModel]],
          ["swin2sr", ["Swin2SRModel", Swin2SRModel]],
          ["donut-swin", ["DonutSwinModel", DonutSwinModel]],
          ["yolos", ["YolosModel", YolosModel]],
          ["dpt", ["DPTModel", DPTModel]],
          ["glpn", ["GLPNModel", GLPNModel]],
          ["hifigan", ["SpeechT5HifiGan", SpeechT5HifiGan]],
          ["efficientnet", ["EfficientNetModel", EfficientNetModel]],
          ["decision_transformer", ["DecisionTransformerModel", DecisionTransformerModel]],
          ["mobilenet_v1", ["MobileNetV1Model", MobileNetV1Model]],
          ["mobilenet_v2", ["MobileNetV2Model", MobileNetV2Model]],
          ["mobilenet_v3", ["MobileNetV3Model", MobileNetV3Model]],
          ["mobilenet_v4", ["MobileNetV4Model", MobileNetV4Model]],
          ["maskformer", ["MaskFormerModel", MaskFormerModel]]
        ]);
        const MODEL_MAPPING_NAMES_ENCODER_DECODER = /* @__PURE__ */ new Map([
          ["t5", ["T5Model", T5Model]],
          ["longt5", ["LongT5Model", LongT5Model]],
          ["mt5", ["MT5Model", MT5Model]],
          ["bart", ["BartModel", BartModel]],
          ["mbart", ["MBartModel", MBartModel]],
          ["marian", ["MarianModel", MarianModel]],
          ["whisper", ["WhisperModel", WhisperModel]],
          ["m2m_100", ["M2M100Model", M2M100Model]],
          ["blenderbot", ["BlenderbotModel", BlenderbotModel]],
          ["blenderbot-small", ["BlenderbotSmallModel", BlenderbotSmallModel]]
        ]);
        const MODEL_MAPPING_NAMES_DECODER_ONLY = /* @__PURE__ */ new Map([
          ["bloom", ["BloomModel", BloomModel]],
          ["jais", ["JAISModel", JAISModel]],
          ["gpt2", ["GPT2Model", GPT2Model]],
          ["gptj", ["GPTJModel", GPTJModel]],
          ["gpt_bigcode", ["GPTBigCodeModel", GPTBigCodeModel]],
          ["gpt_neo", ["GPTNeoModel", GPTNeoModel]],
          ["gpt_neox", ["GPTNeoXModel", GPTNeoXModel]],
          ["codegen", ["CodeGenModel", CodeGenModel]],
          ["llama", ["LlamaModel", LlamaModel]],
          ["olmo", ["OlmoModel", OlmoModel]],
          ["mobilellm", ["MobileLLMModel", MobileLLMModel]],
          ["granite", ["GraniteModel", GraniteModel]],
          ["cohere", ["CohereModel", CohereModel]],
          ["gemma", ["GemmaModel", GemmaModel]],
          ["gemma2", ["Gemma2Model", Gemma2Model]],
          ["openelm", ["OpenELMModel", OpenELMModel]],
          ["qwen2", ["Qwen2Model", Qwen2Model]],
          ["phi", ["PhiModel", PhiModel]],
          ["phi3", ["Phi3Model", Phi3Model]],
          ["mpt", ["MptModel", MptModel]],
          ["opt", ["OPTModel", OPTModel]],
          ["mistral", ["MistralModel", MistralModel]],
          ["starcoder2", ["Starcoder2Model", Starcoder2Model]],
          ["falcon", ["FalconModel", FalconModel]],
          ["stablelm", ["StableLmModel", StableLmModel]]
        ]);
        const MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["speecht5", ["SpeechT5ForSpeechToText", SpeechT5ForSpeechToText]],
          ["whisper", ["WhisperForConditionalGeneration", WhisperForConditionalGeneration]]
        ]);
        const MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["speecht5", ["SpeechT5ForTextToSpeech", SpeechT5ForTextToSpeech]]
        ]);
        const MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["vits", ["VitsModel", VitsModel]],
          ["musicgen", ["MusicgenForConditionalGeneration", MusicgenForConditionalGeneration]]
        ]);
        const MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["bert", ["BertForSequenceClassification", BertForSequenceClassification]],
          ["roformer", ["RoFormerForSequenceClassification", RoFormerForSequenceClassification]],
          ["electra", ["ElectraForSequenceClassification", ElectraForSequenceClassification]],
          ["esm", ["EsmForSequenceClassification", EsmForSequenceClassification]],
          ["convbert", ["ConvBertForSequenceClassification", ConvBertForSequenceClassification]],
          ["camembert", ["CamembertForSequenceClassification", CamembertForSequenceClassification]],
          ["deberta", ["DebertaForSequenceClassification", DebertaForSequenceClassification]],
          ["deberta-v2", ["DebertaV2ForSequenceClassification", DebertaV2ForSequenceClassification]],
          ["mpnet", ["MPNetForSequenceClassification", MPNetForSequenceClassification]],
          ["albert", ["AlbertForSequenceClassification", AlbertForSequenceClassification]],
          ["distilbert", ["DistilBertForSequenceClassification", DistilBertForSequenceClassification]],
          ["roberta", ["RobertaForSequenceClassification", RobertaForSequenceClassification]],
          ["xlm", ["XLMForSequenceClassification", XLMForSequenceClassification]],
          ["xlm-roberta", ["XLMRobertaForSequenceClassification", XLMRobertaForSequenceClassification]],
          ["bart", ["BartForSequenceClassification", BartForSequenceClassification]],
          ["mbart", ["MBartForSequenceClassification", MBartForSequenceClassification]],
          ["mobilebert", ["MobileBertForSequenceClassification", MobileBertForSequenceClassification]],
          ["squeezebert", ["SqueezeBertForSequenceClassification", SqueezeBertForSequenceClassification]]
        ]);
        const MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["bert", ["BertForTokenClassification", BertForTokenClassification]],
          ["roformer", ["RoFormerForTokenClassification", RoFormerForTokenClassification]],
          ["electra", ["ElectraForTokenClassification", ElectraForTokenClassification]],
          ["esm", ["EsmForTokenClassification", EsmForTokenClassification]],
          ["convbert", ["ConvBertForTokenClassification", ConvBertForTokenClassification]],
          ["camembert", ["CamembertForTokenClassification", CamembertForTokenClassification]],
          ["deberta", ["DebertaForTokenClassification", DebertaForTokenClassification]],
          ["deberta-v2", ["DebertaV2ForTokenClassification", DebertaV2ForTokenClassification]],
          ["mpnet", ["MPNetForTokenClassification", MPNetForTokenClassification]],
          ["distilbert", ["DistilBertForTokenClassification", DistilBertForTokenClassification]],
          ["roberta", ["RobertaForTokenClassification", RobertaForTokenClassification]],
          ["xlm", ["XLMForTokenClassification", XLMForTokenClassification]],
          ["xlm-roberta", ["XLMRobertaForTokenClassification", XLMRobertaForTokenClassification]]
        ]);
        const MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["t5", ["T5ForConditionalGeneration", T5ForConditionalGeneration]],
          ["longt5", ["LongT5ForConditionalGeneration", LongT5ForConditionalGeneration]],
          ["mt5", ["MT5ForConditionalGeneration", MT5ForConditionalGeneration]],
          ["bart", ["BartForConditionalGeneration", BartForConditionalGeneration]],
          ["mbart", ["MBartForConditionalGeneration", MBartForConditionalGeneration]],
          ["marian", ["MarianMTModel", MarianMTModel]],
          ["m2m_100", ["M2M100ForConditionalGeneration", M2M100ForConditionalGeneration]],
          ["blenderbot", ["BlenderbotForConditionalGeneration", BlenderbotForConditionalGeneration]],
          ["blenderbot-small", ["BlenderbotSmallForConditionalGeneration", BlenderbotSmallForConditionalGeneration]]
        ]);
        const MODEL_FOR_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["bloom", ["BloomForCausalLM", BloomForCausalLM]],
          ["gpt2", ["GPT2LMHeadModel", GPT2LMHeadModel]],
          ["jais", ["JAISLMHeadModel", JAISLMHeadModel]],
          ["gptj", ["GPTJForCausalLM", GPTJForCausalLM]],
          ["gpt_bigcode", ["GPTBigCodeForCausalLM", GPTBigCodeForCausalLM]],
          ["gpt_neo", ["GPTNeoForCausalLM", GPTNeoForCausalLM]],
          ["gpt_neox", ["GPTNeoXForCausalLM", GPTNeoXForCausalLM]],
          ["codegen", ["CodeGenForCausalLM", CodeGenForCausalLM]],
          ["llama", ["LlamaForCausalLM", LlamaForCausalLM]],
          ["olmo", ["OlmoForCausalLM", OlmoForCausalLM]],
          ["mobilellm", ["MobileLLMForCausalLM", MobileLLMForCausalLM]],
          ["granite", ["GraniteForCausalLM", GraniteForCausalLM]],
          ["cohere", ["CohereForCausalLM", CohereForCausalLM]],
          ["gemma", ["GemmaForCausalLM", GemmaForCausalLM]],
          ["gemma2", ["Gemma2ForCausalLM", Gemma2ForCausalLM]],
          ["openelm", ["OpenELMForCausalLM", OpenELMForCausalLM]],
          ["qwen2", ["Qwen2ForCausalLM", Qwen2ForCausalLM]],
          ["phi", ["PhiForCausalLM", PhiForCausalLM]],
          ["phi3", ["Phi3ForCausalLM", Phi3ForCausalLM]],
          ["mpt", ["MptForCausalLM", MptForCausalLM]],
          ["opt", ["OPTForCausalLM", OPTForCausalLM]],
          ["mbart", ["MBartForCausalLM", MBartForCausalLM]],
          ["mistral", ["MistralForCausalLM", MistralForCausalLM]],
          ["starcoder2", ["Starcoder2ForCausalLM", Starcoder2ForCausalLM]],
          ["falcon", ["FalconForCausalLM", FalconForCausalLM]],
          ["trocr", ["TrOCRForCausalLM", TrOCRForCausalLM]],
          ["stablelm", ["StableLmForCausalLM", StableLmForCausalLM]]
        ]);
        const MODEL_FOR_MASKED_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["bert", ["BertForMaskedLM", BertForMaskedLM]],
          ["roformer", ["RoFormerForMaskedLM", RoFormerForMaskedLM]],
          ["electra", ["ElectraForMaskedLM", ElectraForMaskedLM]],
          ["esm", ["EsmForMaskedLM", EsmForMaskedLM]],
          ["convbert", ["ConvBertForMaskedLM", ConvBertForMaskedLM]],
          ["camembert", ["CamembertForMaskedLM", CamembertForMaskedLM]],
          ["deberta", ["DebertaForMaskedLM", DebertaForMaskedLM]],
          ["deberta-v2", ["DebertaV2ForMaskedLM", DebertaV2ForMaskedLM]],
          ["mpnet", ["MPNetForMaskedLM", MPNetForMaskedLM]],
          ["albert", ["AlbertForMaskedLM", AlbertForMaskedLM]],
          ["distilbert", ["DistilBertForMaskedLM", DistilBertForMaskedLM]],
          ["roberta", ["RobertaForMaskedLM", RobertaForMaskedLM]],
          ["xlm", ["XLMWithLMHeadModel", XLMWithLMHeadModel]],
          ["xlm-roberta", ["XLMRobertaForMaskedLM", XLMRobertaForMaskedLM]],
          ["mobilebert", ["MobileBertForMaskedLM", MobileBertForMaskedLM]],
          ["squeezebert", ["SqueezeBertForMaskedLM", SqueezeBertForMaskedLM]]
        ]);
        const MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["bert", ["BertForQuestionAnswering", BertForQuestionAnswering]],
          ["roformer", ["RoFormerForQuestionAnswering", RoFormerForQuestionAnswering]],
          ["electra", ["ElectraForQuestionAnswering", ElectraForQuestionAnswering]],
          ["convbert", ["ConvBertForQuestionAnswering", ConvBertForQuestionAnswering]],
          ["camembert", ["CamembertForQuestionAnswering", CamembertForQuestionAnswering]],
          ["deberta", ["DebertaForQuestionAnswering", DebertaForQuestionAnswering]],
          ["deberta-v2", ["DebertaV2ForQuestionAnswering", DebertaV2ForQuestionAnswering]],
          ["mpnet", ["MPNetForQuestionAnswering", MPNetForQuestionAnswering]],
          ["albert", ["AlbertForQuestionAnswering", AlbertForQuestionAnswering]],
          ["distilbert", ["DistilBertForQuestionAnswering", DistilBertForQuestionAnswering]],
          ["roberta", ["RobertaForQuestionAnswering", RobertaForQuestionAnswering]],
          ["xlm", ["XLMForQuestionAnswering", XLMForQuestionAnswering]],
          ["xlm-roberta", ["XLMRobertaForQuestionAnswering", XLMRobertaForQuestionAnswering]],
          ["mobilebert", ["MobileBertForQuestionAnswering", MobileBertForQuestionAnswering]],
          ["squeezebert", ["SqueezeBertForQuestionAnswering", SqueezeBertForQuestionAnswering]]
        ]);
        const MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]]
        ]);
        const MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["llava", ["LlavaForConditionalGeneration", LlavaForConditionalGeneration]],
          ["moondream1", ["Moondream1ForConditionalGeneration", Moondream1ForConditionalGeneration]],
          ["florence2", ["Florence2ForConditionalGeneration", Florence2ForConditionalGeneration]]
        ]);
        const MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["vision-encoder-decoder", ["VisionEncoderDecoderModel", VisionEncoderDecoderModel]]
        ]);
        const MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["vit", ["ViTForImageClassification", ViTForImageClassification]],
          ["pvt", ["PvtForImageClassification", PvtForImageClassification]],
          ["vit_msn", ["ViTMSNForImageClassification", ViTMSNForImageClassification]],
          ["fastvit", ["FastViTForImageClassification", FastViTForImageClassification]],
          ["mobilevit", ["MobileViTForImageClassification", MobileViTForImageClassification]],
          ["mobilevitv2", ["MobileViTV2ForImageClassification", MobileViTV2ForImageClassification]],
          ["beit", ["BeitForImageClassification", BeitForImageClassification]],
          ["deit", ["DeiTForImageClassification", DeiTForImageClassification]],
          ["hiera", ["HieraForImageClassification", HieraForImageClassification]],
          ["convnext", ["ConvNextForImageClassification", ConvNextForImageClassification]],
          ["convnextv2", ["ConvNextV2ForImageClassification", ConvNextV2ForImageClassification]],
          ["dinov2", ["Dinov2ForImageClassification", Dinov2ForImageClassification]],
          ["resnet", ["ResNetForImageClassification", ResNetForImageClassification]],
          ["swin", ["SwinForImageClassification", SwinForImageClassification]],
          ["segformer", ["SegformerForImageClassification", SegformerForImageClassification]],
          ["efficientnet", ["EfficientNetForImageClassification", EfficientNetForImageClassification]],
          ["mobilenet_v1", ["MobileNetV1ForImageClassification", MobileNetV1ForImageClassification]],
          ["mobilenet_v2", ["MobileNetV2ForImageClassification", MobileNetV2ForImageClassification]],
          ["mobilenet_v3", ["MobileNetV3ForImageClassification", MobileNetV3ForImageClassification]],
          ["mobilenet_v4", ["MobileNetV4ForImageClassification", MobileNetV4ForImageClassification]]
        ]);
        const MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["detr", ["DetrForObjectDetection", DetrForObjectDetection]],
          ["rt_detr", ["RTDetrForObjectDetection", RTDetrForObjectDetection]],
          ["table-transformer", ["TableTransformerForObjectDetection", TableTransformerForObjectDetection]],
          ["yolos", ["YolosForObjectDetection", YolosForObjectDetection]]
        ]);
        const MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["owlvit", ["OwlViTForObjectDetection", OwlViTForObjectDetection]],
          ["owlv2", ["Owlv2ForObjectDetection", Owlv2ForObjectDetection]]
        ]);
        const MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          // TODO: Do not add new models here
          ["detr", ["DetrForSegmentation", DetrForSegmentation]],
          ["clipseg", ["CLIPSegForImageSegmentation", CLIPSegForImageSegmentation]]
        ]);
        const MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["segformer", ["SegformerForSemanticSegmentation", SegformerForSemanticSegmentation]],
          ["sapiens", ["SapiensForSemanticSegmentation", SapiensForSemanticSegmentation]]
        ]);
        const MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["detr", ["DetrForSegmentation", DetrForSegmentation]],
          ["maskformer", ["MaskFormerForInstanceSegmentation", MaskFormerForInstanceSegmentation]]
        ]);
        const MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["sam", ["SamModel", SamModel]]
        ]);
        const MODEL_FOR_CTC_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["wav2vec2", ["Wav2Vec2ForCTC", Wav2Vec2ForCTC]],
          ["wav2vec2-bert", ["Wav2Vec2BertForCTC", Wav2Vec2BertForCTC]],
          ["unispeech", ["UniSpeechForCTC", UniSpeechForCTC]],
          ["unispeech-sat", ["UniSpeechSatForCTC", UniSpeechSatForCTC]],
          ["wavlm", ["WavLMForCTC", WavLMForCTC]],
          ["hubert", ["HubertForCTC", HubertForCTC]]
        ]);
        const MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["wav2vec2", ["Wav2Vec2ForSequenceClassification", Wav2Vec2ForSequenceClassification]],
          ["wav2vec2-bert", ["Wav2Vec2BertForSequenceClassification", Wav2Vec2BertForSequenceClassification]],
          ["unispeech", ["UniSpeechForSequenceClassification", UniSpeechForSequenceClassification]],
          ["unispeech-sat", ["UniSpeechSatForSequenceClassification", UniSpeechSatForSequenceClassification]],
          ["wavlm", ["WavLMForSequenceClassification", WavLMForSequenceClassification]],
          ["hubert", ["HubertForSequenceClassification", HubertForSequenceClassification]],
          ["audio-spectrogram-transformer", ["ASTForAudioClassification", ASTForAudioClassification]]
        ]);
        const MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["wavlm", ["WavLMForXVector", WavLMForXVector]]
        ]);
        const MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["unispeech-sat", ["UniSpeechSatForAudioFrameClassification", UniSpeechSatForAudioFrameClassification]],
          ["wavlm", ["WavLMForAudioFrameClassification", WavLMForAudioFrameClassification]],
          ["wav2vec2", ["Wav2Vec2ForAudioFrameClassification", Wav2Vec2ForAudioFrameClassification]],
          ["pyannote", ["PyAnnoteForAudioFrameClassification", PyAnnoteForAudioFrameClassification]]
        ]);
        const MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["vitmatte", ["VitMatteForImageMatting", VitMatteForImageMatting]]
        ]);
        const MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["swin2sr", ["Swin2SRForImageSuperResolution", Swin2SRForImageSuperResolution]]
        ]);
        const MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["dpt", ["DPTForDepthEstimation", DPTForDepthEstimation]],
          ["depth_anything", ["DepthAnythingForDepthEstimation", DepthAnythingForDepthEstimation]],
          ["glpn", ["GLPNForDepthEstimation", GLPNForDepthEstimation]],
          ["sapiens", ["SapiensForDepthEstimation", SapiensForDepthEstimation]],
          ["depth_pro", ["DepthProForDepthEstimation", DepthProForDepthEstimation]]
        ]);
        const MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["sapiens", ["SapiensForNormalEstimation", SapiensForNormalEstimation]]
        ]);
        const MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
          ["clip", ["CLIPVisionModelWithProjection", CLIPVisionModelWithProjection]],
          ["siglip", ["SiglipVisionModel", SiglipVisionModel]]
        ]);
        const MODEL_CLASS_TYPE_MAPPING = [
          [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],
          [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],
          [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],
          [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
          [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
          [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],
          [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],
          [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.ImageTextToText],
          [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.MaskGeneration],
          [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],
          [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],
          // Custom:
          [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly]
        ];
        for (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {
          for (const [name, model] of mappings.values()) {
            MODEL_TYPE_MAPPING.set(name, type);
            MODEL_CLASS_TO_NAME_MAPPING.set(model, name);
            MODEL_NAME_TO_CLASS_MAPPING.set(name, model);
          }
        }
        const CUSTOM_MAPPING = [
          // OVERRIDE:
          // TODO: Refactor to allow class to specify model
          ["MusicgenForConditionalGeneration", MusicgenForConditionalGeneration, MODEL_TYPES.Musicgen],
          ["CLIPTextModelWithProjection", CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],
          ["SiglipTextModel", SiglipTextModel, MODEL_TYPES.EncoderOnly],
          ["ClapTextModelWithProjection", ClapTextModelWithProjection, MODEL_TYPES.EncoderOnly],
          ["ClapAudioModelWithProjection", ClapAudioModelWithProjection, MODEL_TYPES.EncoderOnly]
        ];
        for (const [name, model, type] of CUSTOM_MAPPING) {
          MODEL_TYPE_MAPPING.set(name, type);
          MODEL_CLASS_TO_NAME_MAPPING.set(model, name);
          MODEL_NAME_TO_CLASS_MAPPING.set(name, model);
        }
        class AutoModel extends PretrainedMixin {
          /** @type {Map<string, Object>[]} */
          // @ts-ignore
          static MODEL_CLASS_MAPPINGS = MODEL_CLASS_TYPE_MAPPING.map((x) => x[0]);
          static BASE_IF_FAIL = true;
        }
        class AutoModelForSequenceClassification extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES];
        }
        class AutoModelForTokenClassification extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES];
        }
        class AutoModelForSeq2SeqLM extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES];
        }
        class AutoModelForSpeechSeq2Seq extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES];
        }
        class AutoModelForTextToSpectrogram extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES];
        }
        class AutoModelForTextToWaveform extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES];
        }
        class AutoModelForCausalLM extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES];
        }
        class AutoModelForMaskedLM extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASKED_LM_MAPPING_NAMES];
        }
        class AutoModelForQuestionAnswering extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES];
        }
        class AutoModelForVision2Seq extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES];
        }
        class AutoModelForImageClassification extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES];
        }
        class AutoModelForImageSegmentation extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES];
        }
        class AutoModelForSemanticSegmentation extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES];
        }
        class AutoModelForUniversalSegmentation extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_UNIVERSAL_SEGMENTATION_MAPPING_NAMES];
        }
        class AutoModelForObjectDetection extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES];
        }
        class AutoModelForZeroShotObjectDetection extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES];
        }
        class AutoModelForMaskGeneration extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES];
        }
        class AutoModelForCTC extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CTC_MAPPING_NAMES];
        }
        class AutoModelForAudioClassification extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES];
        }
        class AutoModelForXVector extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES];
        }
        class AutoModelForAudioFrameClassification extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES];
        }
        class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES];
        }
        class AutoModelForImageMatting extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES];
        }
        class AutoModelForImageToImage extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES];
        }
        class AutoModelForDepthEstimation extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES];
        }
        class AutoModelForNormalEstimation extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_NORMAL_ESTIMATION_MAPPING_NAMES];
        }
        class AutoModelForImageFeatureExtraction extends PretrainedMixin {
          static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES];
        }
        class Seq2SeqLMOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits The output logits of the model.
           * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.
           * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.
           * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.
           * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.
           */
          constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {
            super();
            this.logits = logits;
            this.past_key_values = past_key_values;
            this.encoder_outputs = encoder_outputs;
            this.decoder_attentions = decoder_attentions;
            this.cross_attentions = cross_attentions;
          }
        }
        class SequenceClassifierOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).
           */
          constructor({ logits }) {
            super();
            this.logits = logits;
          }
        }
        class XVectorOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Classification hidden states before AMSoftmax, of shape `(batch_size, config.xvector_output_dim)`.
           * @param {Tensor} output.embeddings Utterance embeddings used for vector similarity-based retrieval, of shape `(batch_size, config.xvector_output_dim)`.
           */
          constructor({ logits, embeddings }) {
            super();
            this.logits = logits;
            this.embeddings = embeddings;
          }
        }
        class TokenClassifierOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Classification scores (before SoftMax).
           */
          constructor({ logits }) {
            super();
            this.logits = logits;
          }
        }
        class MaskedLMOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).
           */
          constructor({ logits }) {
            super();
            this.logits = logits;
          }
        }
        class QuestionAnsweringModelOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.start_logits Span-start scores (before SoftMax).
           * @param {Tensor} output.end_logits Span-end scores (before SoftMax).
           */
          constructor({ start_logits, end_logits }) {
            super();
            this.start_logits = start_logits;
            this.end_logits = end_logits;
          }
        }
        class CausalLMOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
           */
          constructor({ logits }) {
            super();
            this.logits = logits;
          }
        }
        class CausalLMOutputWithPast extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).
           * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)
           * that can be used (see `past_key_values` input) to speed up sequential decoding.
           */
          constructor({ logits, past_key_values }) {
            super();
            this.logits = logits;
            this.past_key_values = past_key_values;
          }
        }
        class ImageMattingOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.alphas Estimated alpha values, of shape `(batch_size, num_channels, height, width)`.
           */
          constructor({ alphas }) {
            super();
            this.alphas = alphas;
          }
        }
        class VitsModelOutput extends ModelOutput {
          /**
           * @param {Object} output The output of the model.
           * @param {Tensor} output.waveform The final audio waveform predicted by the model, of shape `(batch_size, sequence_length)`.
           * @param {Tensor} output.spectrogram The log-mel spectrogram predicted at the output of the flow model.
           * This spectrogram is passed to the Hi-Fi GAN decoder model to obtain the final audio waveform.
           */
          constructor({ waveform, spectrogram }) {
            super();
            this.waveform = waveform;
            this.spectrogram = spectrogram;
          }
        }
      }
    ),
    /***/
    "./src/models/whisper/common_whisper.js": (
      /*!**********************************************!*\
        !*** ./src/models/whisper/common_whisper.js ***!
        \**********************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          WHISPER_LANGUAGE_MAPPING: () => (
            /* binding */
            WHISPER_LANGUAGE_MAPPING
          ),
          /* harmony export */
          WHISPER_TO_LANGUAGE_CODE_MAPPING: () => (
            /* binding */
            WHISPER_TO_LANGUAGE_CODE_MAPPING
          ),
          /* harmony export */
          whisper_language_to_code: () => (
            /* binding */
            whisper_language_to_code
          )
          /* harmony export */
        });
        const WHISPER_LANGUAGES = [
          ["en", "english"],
          ["zh", "chinese"],
          ["de", "german"],
          ["es", "spanish"],
          ["ru", "russian"],
          ["ko", "korean"],
          ["fr", "french"],
          ["ja", "japanese"],
          ["pt", "portuguese"],
          ["tr", "turkish"],
          ["pl", "polish"],
          ["ca", "catalan"],
          ["nl", "dutch"],
          ["ar", "arabic"],
          ["sv", "swedish"],
          ["it", "italian"],
          ["id", "indonesian"],
          ["hi", "hindi"],
          ["fi", "finnish"],
          ["vi", "vietnamese"],
          ["he", "hebrew"],
          ["uk", "ukrainian"],
          ["el", "greek"],
          ["ms", "malay"],
          ["cs", "czech"],
          ["ro", "romanian"],
          ["da", "danish"],
          ["hu", "hungarian"],
          ["ta", "tamil"],
          ["no", "norwegian"],
          ["th", "thai"],
          ["ur", "urdu"],
          ["hr", "croatian"],
          ["bg", "bulgarian"],
          ["lt", "lithuanian"],
          ["la", "latin"],
          ["mi", "maori"],
          ["ml", "malayalam"],
          ["cy", "welsh"],
          ["sk", "slovak"],
          ["te", "telugu"],
          ["fa", "persian"],
          ["lv", "latvian"],
          ["bn", "bengali"],
          ["sr", "serbian"],
          ["az", "azerbaijani"],
          ["sl", "slovenian"],
          ["kn", "kannada"],
          ["et", "estonian"],
          ["mk", "macedonian"],
          ["br", "breton"],
          ["eu", "basque"],
          ["is", "icelandic"],
          ["hy", "armenian"],
          ["ne", "nepali"],
          ["mn", "mongolian"],
          ["bs", "bosnian"],
          ["kk", "kazakh"],
          ["sq", "albanian"],
          ["sw", "swahili"],
          ["gl", "galician"],
          ["mr", "marathi"],
          ["pa", "punjabi"],
          ["si", "sinhala"],
          ["km", "khmer"],
          ["sn", "shona"],
          ["yo", "yoruba"],
          ["so", "somali"],
          ["af", "afrikaans"],
          ["oc", "occitan"],
          ["ka", "georgian"],
          ["be", "belarusian"],
          ["tg", "tajik"],
          ["sd", "sindhi"],
          ["gu", "gujarati"],
          ["am", "amharic"],
          ["yi", "yiddish"],
          ["lo", "lao"],
          ["uz", "uzbek"],
          ["fo", "faroese"],
          ["ht", "haitian creole"],
          ["ps", "pashto"],
          ["tk", "turkmen"],
          ["nn", "nynorsk"],
          ["mt", "maltese"],
          ["sa", "sanskrit"],
          ["lb", "luxembourgish"],
          ["my", "myanmar"],
          ["bo", "tibetan"],
          ["tl", "tagalog"],
          ["mg", "malagasy"],
          ["as", "assamese"],
          ["tt", "tatar"],
          ["haw", "hawaiian"],
          ["ln", "lingala"],
          ["ha", "hausa"],
          ["ba", "bashkir"],
          ["jw", "javanese"],
          ["su", "sundanese"]
        ];
        const WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);
        const WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([
          ...WHISPER_LANGUAGES.map(([k, v]) => [v, k]),
          ...[
            ["burmese", "my"],
            ["valencian", "ca"],
            ["flemish", "nl"],
            ["haitian", "ht"],
            ["letzeburgesch", "lb"],
            ["pushto", "ps"],
            ["panjabi", "pa"],
            ["moldavian", "ro"],
            ["moldovan", "ro"],
            ["sinhalese", "si"],
            ["castilian", "es"]
          ]
        ]);
        function whisper_language_to_code(language) {
          language = language.toLowerCase();
          let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);
          if (language_code === void 0) {
            if (WHISPER_LANGUAGE_MAPPING.has(language)) {
              language_code = language;
            } else {
              const is_language_code = language.length === 2;
              const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();
              throw new Error(`Language "${language}" is not supported. Must be one of: ${JSON.stringify(langs)}`);
            }
          }
          return language_code;
        }
      }
    ),
    /***/
    "./src/models/whisper/generation_whisper.js": (
      /*!**************************************************!*\
        !*** ./src/models/whisper/generation_whisper.js ***!
        \**************************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          WhisperGenerationConfig: () => (
            /* binding */
            WhisperGenerationConfig
          )
          /* harmony export */
        });
        var _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../../generation/configuration_utils.js */
          "./src/generation/configuration_utils.js"
        );
        class WhisperGenerationConfig extends _generation_configuration_utils_js__WEBPACK_IMPORTED_MODULE_0__.GenerationConfig {
          /**
           * Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.
           * @type {boolean}
           */
          return_timestamps = null;
          /**
           * Whether to return token-level timestamps
           * with the text. This can be used with or without the `return_timestamps` option. To get word-level
           * timestamps, use the tokenizer to group the tokens into words.
           * @type {boolean}
           */
          return_token_timestamps = null;
          /**
           * The number of audio frames available in this chunk. This is only used generating word-level timestamps.
           * @type {number}
           */
          num_frames = null;
          /**
           * Alignment heads to predict word-level timestamps. This is a list of [layer, head] pairs that
           * select the cross-attention heads that are highly correlated to word-level timing.
           * @type {[number, number][]}
           */
          alignment_heads = null;
          /**
           * Task to use for generation, either "translate" or "transcribe".
           * @type {string}
           */
          task = null;
          /**
           * Language token to use for generation, can be either in the form of `<|en|>`, `en` or `english`.
           * You can find all the possible language tokens in the `model.generation_config.lang_to_id` dictionary.
           * @type {string}
           */
          language = null;
          /**
           * The id of the `"<|notimestamps|>"` token.
           * @type {number}
           */
          no_timestamps_token_id = null;
          /**
           * Rank-1 list of token IDs created by passing text to [`~WhisperProcessor.get_prompt_ids`] that is
           * provided as a prompt to each chunk. This can be used to provide or "prompt-engineer" a context for
           * transcription, e.g. custom vocabularies or proper nouns to make it more likely to predict those words
           * correctly. It cannot be used in conjunction with `decoder_start_token_id` as it overwrites this value.
           * @type {number[]}
           */
          prompt_ids = null;
          /**
           * Whether the model is multilingual or not.
           * @type {boolean}
           */
          is_multilingual = null;
          /**
           * (Optional) A mapping from language tokens to their corresponding IDs.
           * Only required if the model is multilingual.
           * @type {Record<string, number>|null}
           */
          lang_to_id = null;
          /**
           * (Optional) A mapping from task tokens to their corresponding IDs.
           * @type {Record<string, number>|null}
           */
          task_to_id = null;
          /**
           * Used to set the maximum value of the initial timestamp. This is used to prevent the model from
           * predicting timestamps that are too far in the future.
           * @type {number}
           */
          max_initial_timestamp_index = 1;
        }
      }
    ),
    /***/
    "./src/ops/registry.js": (
      /*!*****************************!*\
        !*** ./src/ops/registry.js ***!
        \*****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          TensorOpRegistry: () => (
            /* binding */
            TensorOpRegistry
          )
          /* harmony export */
        });
        var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ../backends/onnx.js */
          "./src/backends/onnx.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../utils/tensor.js */
          "./src/utils/tensor.js"
        );
        const wrap = async (session_bytes, session_options, names5) => {
          const session = await (0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_0__.createInferenceSession)(
            new Uint8Array(session_bytes),
            session_options
          );
          return (
            /** @type {any} */
            async (inputs) => {
              const ortFeed = Object.fromEntries(Object.entries(inputs).map(([k, v]) => [k, v.ort_tensor]));
              const outputs = await session.run(ortFeed);
              if (Array.isArray(names5)) {
                return names5.map((n) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[n]));
              } else {
                return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(outputs[
                  /** @type {string} */
                  names5
                ]);
              }
            }
          );
        };
        class TensorOpRegistry {
          static session_options = {
            // TODO: Allow for multiple execution providers
            // executionProviders: ['webgpu'],
          };
          static get bilinear_interpolate_4d() {
            if (!this._bilinear_interpolate_4d) {
              this._bilinear_interpolate_4d = wrap(
                [8, 9, 18, 0, 58, 128, 1, 10, 40, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 17, 10, 4, 109, 111, 100, 101, 34, 6, 108, 105, 110, 101, 97, 114, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],
                this.session_options,
                "y"
              );
            }
            return this._bilinear_interpolate_4d;
          }
          static get bicubic_interpolate_4d() {
            if (!this._bicubic_interpolate_4d) {
              this._bicubic_interpolate_4d = wrap(
                [8, 9, 18, 0, 58, 127, 10, 39, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 16, 10, 4, 109, 111, 100, 101, 34, 5, 99, 117, 98, 105, 99, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],
                this.session_options,
                "y"
              );
            }
            return this._bicubic_interpolate_4d;
          }
          static get matmul() {
            if (!this._matmul) {
              this._matmul = wrap(
                [8, 9, 18, 0, 58, 55, 10, 17, 10, 1, 97, 10, 1, 98, 18, 1, 99, 34, 6, 77, 97, 116, 77, 117, 108, 18, 1, 114, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 98, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 99, 18, 4, 10, 2, 8, 1, 66, 2, 16, 20],
                this.session_options,
                "c"
              );
            }
            return this._matmul;
          }
          static get stft() {
            if (!this._stft) {
              this._stft = wrap(
                [8, 7, 18, 0, 58, 148, 1, 10, 38, 10, 1, 115, 10, 1, 106, 10, 1, 119, 10, 1, 108, 18, 1, 111, 34, 4, 83, 84, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 115, 90, 26, 10, 1, 115, 18, 21, 10, 19, 8, 1, 18, 15, 10, 3, 18, 1, 98, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 106, 18, 6, 10, 4, 8, 7, 18, 0, 90, 16, 10, 1, 119, 18, 11, 10, 9, 8, 1, 18, 5, 10, 3, 18, 1, 119, 90, 11, 10, 1, 108, 18, 6, 10, 4, 8, 7, 18, 0, 98, 31, 10, 1, 111, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 102, 10, 3, 18, 1, 100, 10, 3, 18, 1, 99, 66, 2, 16, 17],
                this.session_options,
                "o"
              );
            }
            return this._stft;
          }
          static get rfft() {
            if (!this._rfft) {
              this._rfft = wrap(
                [8, 9, 18, 0, 58, 97, 10, 33, 10, 1, 120, 10, 0, 10, 1, 97, 18, 1, 121, 34, 3, 68, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 100, 90, 21, 10, 1, 120, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 97, 18, 6, 10, 4, 8, 7, 18, 0, 98, 21, 10, 1, 121, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 66, 2, 16, 20],
                this.session_options,
                "y"
              );
            }
            return this._rfft;
          }
          static get top_k() {
            if (!this._top_k) {
              this._top_k = wrap(
                [8, 10, 18, 0, 58, 73, 10, 18, 10, 1, 120, 10, 1, 107, 18, 1, 118, 18, 1, 105, 34, 4, 84, 111, 112, 75, 18, 1, 116, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 15, 10, 1, 107, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 118, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 105, 18, 4, 10, 2, 8, 7, 66, 2, 16, 21],
                this.session_options,
                [
                  /* Values */
                  "v",
                  /* Indices */
                  "i"
                ]
              );
            }
            return this._top_k;
          }
        }
      }
    ),
    /***/
    "./src/pipelines.js": (
      /*!**************************!*\
        !*** ./src/pipelines.js ***!
        \**************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          AudioClassificationPipeline: () => (
            /* binding */
            AudioClassificationPipeline
          ),
          /* harmony export */
          AutomaticSpeechRecognitionPipeline: () => (
            /* binding */
            AutomaticSpeechRecognitionPipeline
          ),
          /* harmony export */
          DepthEstimationPipeline: () => (
            /* binding */
            DepthEstimationPipeline
          ),
          /* harmony export */
          DocumentQuestionAnsweringPipeline: () => (
            /* binding */
            DocumentQuestionAnsweringPipeline
          ),
          /* harmony export */
          FeatureExtractionPipeline: () => (
            /* binding */
            FeatureExtractionPipeline
          ),
          /* harmony export */
          FillMaskPipeline: () => (
            /* binding */
            FillMaskPipeline
          ),
          /* harmony export */
          ImageClassificationPipeline: () => (
            /* binding */
            ImageClassificationPipeline
          ),
          /* harmony export */
          ImageFeatureExtractionPipeline: () => (
            /* binding */
            ImageFeatureExtractionPipeline
          ),
          /* harmony export */
          ImageSegmentationPipeline: () => (
            /* binding */
            ImageSegmentationPipeline
          ),
          /* harmony export */
          ImageToImagePipeline: () => (
            /* binding */
            ImageToImagePipeline
          ),
          /* harmony export */
          ImageToTextPipeline: () => (
            /* binding */
            ImageToTextPipeline
          ),
          /* harmony export */
          ObjectDetectionPipeline: () => (
            /* binding */
            ObjectDetectionPipeline
          ),
          /* harmony export */
          Pipeline: () => (
            /* binding */
            Pipeline
          ),
          /* harmony export */
          QuestionAnsweringPipeline: () => (
            /* binding */
            QuestionAnsweringPipeline
          ),
          /* harmony export */
          SummarizationPipeline: () => (
            /* binding */
            SummarizationPipeline
          ),
          /* harmony export */
          Text2TextGenerationPipeline: () => (
            /* binding */
            Text2TextGenerationPipeline
          ),
          /* harmony export */
          TextClassificationPipeline: () => (
            /* binding */
            TextClassificationPipeline
          ),
          /* harmony export */
          TextGenerationPipeline: () => (
            /* binding */
            TextGenerationPipeline
          ),
          /* harmony export */
          TextToAudioPipeline: () => (
            /* binding */
            TextToAudioPipeline
          ),
          /* harmony export */
          TokenClassificationPipeline: () => (
            /* binding */
            TokenClassificationPipeline
          ),
          /* harmony export */
          TranslationPipeline: () => (
            /* binding */
            TranslationPipeline
          ),
          /* harmony export */
          ZeroShotAudioClassificationPipeline: () => (
            /* binding */
            ZeroShotAudioClassificationPipeline
          ),
          /* harmony export */
          ZeroShotClassificationPipeline: () => (
            /* binding */
            ZeroShotClassificationPipeline
          ),
          /* harmony export */
          ZeroShotImageClassificationPipeline: () => (
            /* binding */
            ZeroShotImageClassificationPipeline
          ),
          /* harmony export */
          ZeroShotObjectDetectionPipeline: () => (
            /* binding */
            ZeroShotObjectDetectionPipeline
          ),
          /* harmony export */
          pipeline: () => (
            /* binding */
            pipeline
          )
          /* harmony export */
        });
        var _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./tokenizers.js */
          "./src/tokenizers.js"
        );
        var _models_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./models.js */
          "./src/models.js"
        );
        var _processors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./processors.js */
          "./src/processors.js"
        );
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
          /*! ./utils/core.js */
          "./src/utils/core.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
          /*! ./utils/maths.js */
          "./src/utils/maths.js"
        );
        var _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2 = __webpack_require__2(
          /*! ./utils/audio.js */
          "./src/utils/audio.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
          /*! ./utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_image_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
          /*! ./utils/image.js */
          "./src/utils/image.js"
        );
        async function prepareImages(images) {
          if (!Array.isArray(images)) {
            images = [images];
          }
          return await Promise.all(images.map((x) => _utils_image_js__WEBPACK_IMPORTED_MODULE_8__.RawImage.read(x)));
        }
        async function prepareAudios(audios, sampling_rate) {
          if (!Array.isArray(audios)) {
            audios = [audios];
          }
          return await Promise.all(audios.map((x) => {
            if (typeof x === "string" || x instanceof URL) {
              return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.read_audio)(x, sampling_rate);
            } else if (x instanceof Float64Array) {
              return new Float32Array(x);
            }
            return x;
          }));
        }
        function get_bounding_box(box, asInteger) {
          if (asInteger) {
            box = box.map((x) => x | 0);
          }
          const [xmin, ymin, xmax, ymax] = box;
          return { xmin, ymin, xmax, ymax };
        }
        class Pipeline extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_3__.Callable {
          /**
           * Create a new Pipeline.
           * @param {Object} options An object containing the following properties:
           * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.
           * @param {PreTrainedModel} [options.model] The model used by the pipeline.
           * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer used by the pipeline (if any).
           * @param {Processor} [options.processor=null] The processor used by the pipeline (if any).
           */
          constructor({ task, model, tokenizer = null, processor = null }) {
            super();
            this.task = task;
            this.model = model;
            this.tokenizer = tokenizer;
            this.processor = processor;
          }
          /** @type {DisposeType} */
          async dispose() {
            await this.model.dispose();
          }
        }
        class TextClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new TextClassificationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {TextClassificationPipelineCallback} */
          async _call(texts, {
            top_k = 1
          } = {}) {
            const model_inputs = this.tokenizer(texts, {
              padding: true,
              truncation: true
            });
            const outputs = await this.model(model_inputs);
            const function_to_apply = this.model.config.problem_type === "multi_label_classification" ? (batch) => batch.sigmoid() : (batch) => new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor(
              "float32",
              (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(batch.data),
              batch.dims
            );
            const id2label = this.model.config.id2label;
            const toReturn = [];
            for (const batch of outputs.logits) {
              const output = function_to_apply(batch);
              const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.topk)(output, top_k);
              const values = scores[0].tolist();
              const indices = scores[1].tolist();
              const vals = indices.map((x, i) => ({
                label: id2label ? id2label[x] : `LABEL_${x}`,
                score: values[i]
              }));
              if (top_k === 1) {
                toReturn.push(...vals);
              } else {
                toReturn.push(vals);
              }
            }
            return Array.isArray(texts) || top_k === 1 ? (
              /** @type {TextClassificationOutput} */
              toReturn
            ) : (
              /** @type {TextClassificationOutput[]} */
              toReturn[0]
            );
          }
        }
        class TokenClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TokenClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new TokenClassificationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {TokenClassificationPipelineCallback} */
          async _call(texts, {
            ignore_labels = ["O"]
          } = {}) {
            const isBatched = Array.isArray(texts);
            const model_inputs = this.tokenizer(isBatched ? texts : [texts], {
              padding: true,
              truncation: true
            });
            const outputs = await this.model(model_inputs);
            const logits = outputs.logits;
            const id2label = this.model.config.id2label;
            const toReturn = [];
            for (let i = 0; i < logits.dims[0]; ++i) {
              const ids = model_inputs.input_ids[i];
              const batch = logits[i];
              const tokens = [];
              for (let j = 0; j < batch.dims[0]; ++j) {
                const tokenData = batch[j];
                const topScoreIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.max)(tokenData.data)[1];
                const entity = id2label ? id2label[topScoreIndex] : `LABEL_${topScoreIndex}`;
                if (ignore_labels.includes(entity)) {
                  continue;
                }
                const word = this.tokenizer.decode([ids[j].item()], { skip_special_tokens: true });
                if (word === "") {
                  continue;
                }
                const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(tokenData.data);
                tokens.push({
                  entity,
                  score: scores[topScoreIndex],
                  index: j,
                  word
                  // TODO: Add support for start and end
                  // start: null,
                  // end: null,
                });
              }
              toReturn.push(tokens);
            }
            return isBatched ? toReturn : toReturn[0];
          }
        }
        class QuestionAnsweringPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => QuestionAnsweringPipelineType} */
        Pipeline {
          /**
           * Create a new QuestionAnsweringPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {QuestionAnsweringPipelineCallback} */
          async _call(question, context, {
            top_k = 1
          } = {}) {
            const inputs = this.tokenizer(question, {
              text_pair: context,
              padding: true,
              truncation: true
            });
            const { start_logits, end_logits } = await this.model(inputs);
            const input_ids = inputs.input_ids.tolist();
            const attention_mask = inputs.attention_mask.tolist();
            const special_tokens = this.tokenizer.all_special_ids;
            const toReturn = [];
            for (let j = 0; j < start_logits.dims[0]; ++j) {
              const ids = input_ids[j];
              const sepIndex = ids.findIndex(
                (x) => (
                  // We use == to match bigint with number
                  // @ts-ignore
                  x == this.tokenizer.sep_token_id
                )
              );
              const valid_mask = attention_mask[j].map((y, ix) => y == 1 && (ix === 0 || ix > sepIndex && special_tokens.findIndex((x) => x == ids[ix]) === -1));
              const start = start_logits[j].tolist();
              const end = end_logits[j].tolist();
              for (let i = 1; i < start.length; ++i) {
                if (attention_mask[j] == 0 || i <= sepIndex || special_tokens.findIndex((x) => x == ids[i]) !== -1) {
                  start[i] = -Infinity;
                  end[i] = -Infinity;
                }
              }
              const start_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(start).map((x, i) => [x, i]);
              const end_scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(end).map((x, i) => [x, i]);
              start_scores[0][0] = 0;
              end_scores[0][0] = 0;
              const options2 = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.product)(start_scores, end_scores).filter((x) => x[0][1] <= x[1][1]).map((x) => [x[0][1], x[1][1], x[0][0] * x[1][0]]).sort((a, b) => b[2] - a[2]);
              for (let k = 0; k < Math.min(options2.length, top_k); ++k) {
                const [start2, end2, score] = options2[k];
                const answer_tokens = ids.slice(start2, end2 + 1);
                const answer = this.tokenizer.decode(answer_tokens, {
                  skip_special_tokens: true
                });
                toReturn.push({
                  answer,
                  score
                });
              }
            }
            return top_k === 1 ? toReturn[0] : toReturn;
          }
        }
        class FillMaskPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FillMaskPipelineType} */
        Pipeline {
          /**
           * Create a new FillMaskPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {FillMaskPipelineCallback} */
          async _call(texts, {
            top_k = 5
          } = {}) {
            const model_inputs = this.tokenizer(texts, {
              padding: true,
              truncation: true
            });
            const { logits } = await this.model(model_inputs);
            const toReturn = [];
            const input_ids = model_inputs.input_ids.tolist();
            for (let i = 0; i < input_ids.length; ++i) {
              const ids = input_ids[i];
              const mask_token_index = ids.findIndex(
                (x) => (
                  // We use == to match bigint with number
                  // @ts-ignore
                  x == this.tokenizer.mask_token_id
                )
              );
              if (mask_token_index === -1) {
                throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);
              }
              const itemLogits = logits[i][mask_token_index];
              const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor(
                "float32",
                (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(itemLogits.data),
                itemLogits.dims
              ), top_k);
              const values = scores[0].tolist();
              const indices = scores[1].tolist();
              toReturn.push(indices.map((x, i2) => {
                const sequence = ids.slice();
                sequence[mask_token_index] = x;
                return {
                  score: values[i2],
                  token: Number(x),
                  token_str: this.tokenizer.model.vocab[x],
                  sequence: this.tokenizer.decode(sequence, { skip_special_tokens: true })
                };
              }));
            }
            return Array.isArray(texts) ? toReturn : toReturn[0];
          }
        }
        class Text2TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => Text2TextGenerationPipelineType} */
        Pipeline {
          /** @type {'generated_text'} */
          _key = "generated_text";
          /**
           * Create a new Text2TextGenerationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {Text2TextGenerationPipelineCallback} */
          async _call(texts, generate_kwargs = {}) {
            if (!Array.isArray(texts)) {
              texts = [texts];
            }
            if (this.model.config.prefix) {
              texts = texts.map((x) => this.model.config.prefix + x);
            }
            const task_specific_params = this.model.config.task_specific_params;
            if (task_specific_params && task_specific_params[this.task]) {
              if (task_specific_params[this.task].prefix) {
                texts = texts.map((x) => task_specific_params[this.task].prefix + x);
              }
            }
            const tokenizer = this.tokenizer;
            const tokenizer_options = {
              padding: true,
              truncation: true
            };
            let inputs;
            if (this instanceof TranslationPipeline && "_build_translation_inputs" in tokenizer) {
              inputs = tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs);
            } else {
              inputs = tokenizer(texts, tokenizer_options);
            }
            const outputTokenIds = await this.model.generate({ ...inputs, ...generate_kwargs });
            return tokenizer.batch_decode(
              /** @type {Tensor} */
              outputTokenIds,
              {
                skip_special_tokens: true
              }
            ).map((text) => ({ [this._key]: text }));
          }
        }
        class SummarizationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => SummarizationPipelineType} */
        /** @type {any} */
        Text2TextGenerationPipeline {
          /** @type {'summary_text'} */
          _key = "summary_text";
          /**
           * Create a new SummarizationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
        }
        class TranslationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TranslationPipelineType} */
        /** @type {any} */
        Text2TextGenerationPipeline {
          /** @type {'translation_text'} */
          _key = "translation_text";
          /**
           * Create a new TranslationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
        }
        function isChat(x) {
          return Array.isArray(x) && x.every((x2) => "role" in x2 && "content" in x2);
        }
        class TextGenerationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => TextGenerationPipelineType} */
        Pipeline {
          /**
           * Create a new TextGenerationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {TextGenerationPipelineCallback} */
          async _call(texts, generate_kwargs = {}) {
            let isBatched = false;
            let isChatInput = false;
            let inputs;
            if (typeof texts === "string") {
              inputs = texts = [texts];
            } else if (Array.isArray(texts) && texts.every((x) => typeof x === "string")) {
              isBatched = true;
              inputs = /** @type {string[]} */
              texts;
            } else {
              if (isChat(texts)) {
                texts = [
                  /** @type {Chat} */
                  texts
                ];
              } else if (Array.isArray(texts) && texts.every(isChat)) {
                isBatched = true;
              } else {
                throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");
              }
              isChatInput = true;
              inputs = /** @type {string[]} */
              /** @type {Chat[]} */
              texts.map(
                (x) => this.tokenizer.apply_chat_template(x, {
                  tokenize: false,
                  add_generation_prompt: true
                })
              );
            }
            const add_special_tokens = generate_kwargs.add_special_tokens ?? false;
            const return_full_text = isChatInput ? false : generate_kwargs.return_full_text ?? true;
            this.tokenizer.padding_side = "left";
            const text_inputs = this.tokenizer(inputs, {
              add_special_tokens,
              padding: true,
              truncation: true
            });
            const outputTokenIds = (
              /** @type {Tensor} */
              await this.model.generate({
                ...text_inputs,
                ...generate_kwargs
              })
            );
            const decoded = this.tokenizer.batch_decode(outputTokenIds, {
              skip_special_tokens: true
            });
            let promptLengths;
            if (!return_full_text && text_inputs.input_ids.dims.at(-1) > 0) {
              promptLengths = this.tokenizer.batch_decode(text_inputs.input_ids, {
                skip_special_tokens: true
              }).map((x) => x.length);
            }
            const toReturn = Array.from({ length: texts.length }, (_) => []);
            for (let i = 0; i < decoded.length; ++i) {
              const textIndex = Math.floor(i / outputTokenIds.dims[0] * texts.length);
              if (promptLengths) {
                decoded[i] = decoded[i].slice(promptLengths[textIndex]);
              }
              toReturn[textIndex].push({
                generated_text: isChatInput ? [
                  .../** @type {Chat[]} */
                  texts[textIndex],
                  { role: "assistant", content: decoded[i] }
                ] : decoded[i]
              });
            }
            return !isBatched && toReturn.length === 1 ? toReturn[0] : toReturn;
          }
        }
        class ZeroShotClassificationPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => ZeroShotClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new ZeroShotClassificationPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
            this.label2id = Object.fromEntries(
              Object.entries(
                /** @type {any} */
                this.model.config.label2id
              ).map(
                ([k, v]) => [k.toLowerCase(), v]
              )
            );
            this.entailment_id = this.label2id["entailment"];
            if (this.entailment_id === void 0) {
              console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.");
              this.entailment_id = 2;
            }
            this.contradiction_id = this.label2id["contradiction"] ?? this.label2id["not_entailment"];
            if (this.contradiction_id === void 0) {
              console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.");
              this.contradiction_id = 0;
            }
          }
          /** @type {ZeroShotClassificationPipelineCallback} */
          async _call(texts, candidate_labels, {
            hypothesis_template = "This example is {}.",
            multi_label = false
          } = {}) {
            const isBatched = Array.isArray(texts);
            if (!isBatched) {
              texts = [
                /** @type {string} */
                texts
              ];
            }
            if (!Array.isArray(candidate_labels)) {
              candidate_labels = [candidate_labels];
            }
            const hypotheses = candidate_labels.map(
              (x) => hypothesis_template.replace("{}", x)
            );
            const softmaxEach = multi_label || candidate_labels.length === 1;
            const toReturn = [];
            for (const premise of texts) {
              const entails_logits = [];
              for (const hypothesis of hypotheses) {
                const inputs = this.tokenizer(premise, {
                  text_pair: hypothesis,
                  padding: true,
                  truncation: true
                });
                const outputs = await this.model(inputs);
                if (softmaxEach) {
                  entails_logits.push([
                    outputs.logits.data[this.contradiction_id],
                    outputs.logits.data[this.entailment_id]
                  ]);
                } else {
                  entails_logits.push(outputs.logits.data[this.entailment_id]);
                }
              }
              const scores = softmaxEach ? entails_logits.map((x) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(x)[1]) : (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(entails_logits);
              const scores_sorted = scores.map((x, i) => [x, i]).sort((a, b) => b[0] - a[0]);
              toReturn.push({
                sequence: premise,
                labels: scores_sorted.map((x) => candidate_labels[x[1]]),
                scores: scores_sorted.map((x) => x[0])
              });
            }
            return isBatched ? toReturn : toReturn[0];
          }
        }
        class FeatureExtractionPipeline extends /** @type {new (options: TextPipelineConstructorArgs) => FeatureExtractionPipelineType} */
        Pipeline {
          /**
           * Create a new FeatureExtractionPipeline.
           * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {FeatureExtractionPipelineCallback} */
          async _call(texts, {
            pooling = (
              /** @type {'none'} */
              "none"
            ),
            normalize = false,
            quantize = false,
            precision = (
              /** @type {'binary'} */
              "binary"
            )
          } = {}) {
            const model_inputs = this.tokenizer(texts, {
              padding: true,
              truncation: true
            });
            const outputs = await this.model(model_inputs);
            let result = outputs.last_hidden_state ?? outputs.logits ?? outputs.token_embeddings;
            if (pooling === "none") {
            } else if (pooling === "mean") {
              result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.mean_pooling)(result, model_inputs.attention_mask);
            } else if (pooling === "cls") {
              result = result.slice(null, 0);
            } else {
              throw Error(`Pooling method '${pooling}' not supported.`);
            }
            if (normalize) {
              result = result.normalize(2, -1);
            }
            if (quantize) {
              result = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.quantize_embeddings)(result, precision);
            }
            return result;
          }
        }
        class ImageFeatureExtractionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageFeatureExtractionPipelineType} */
        Pipeline {
          /**
           * Create a new ImageFeatureExtractionPipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ImageFeatureExtractionPipelineCallback} */
          async _call(images, {
            pool = null
          } = {}) {
            const preparedImages = await prepareImages(images);
            const { pixel_values } = await this.processor(preparedImages);
            const outputs = await this.model({ pixel_values });
            let result;
            if (pool) {
              if (!("pooler_output" in outputs)) {
                throw Error(`No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.`);
              }
              result = outputs.pooler_output;
            } else {
              result = outputs.last_hidden_state ?? outputs.logits ?? outputs.image_embeds;
            }
            return result;
          }
        }
        class AudioClassificationPipeline extends /** @type {new (options: AudioPipelineConstructorArgs) => AudioClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new AudioClassificationPipeline.
           * @param {AudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {AudioClassificationPipelineCallback} */
          async _call(audio, {
            top_k = 5
          } = {}) {
            const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
            const preparedAudios = await prepareAudios(audio, sampling_rate);
            const id2label = this.model.config.id2label;
            const toReturn = [];
            for (const aud of preparedAudios) {
              const inputs = await this.processor(aud);
              const output = await this.model(inputs);
              const logits = output.logits[0];
              const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor(
                "float32",
                (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(logits.data),
                logits.dims
              ), top_k);
              const values = scores[0].tolist();
              const indices = scores[1].tolist();
              const vals = indices.map((x, i) => ({
                label: (
                  /** @type {string} */
                  id2label ? id2label[x] : `LABEL_${x}`
                ),
                score: (
                  /** @type {number} */
                  values[i]
                )
              }));
              toReturn.push(vals);
            }
            ;
            return Array.isArray(audio) ? toReturn : toReturn[0];
          }
        }
        class ZeroShotAudioClassificationPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => ZeroShotAudioClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new ZeroShotAudioClassificationPipeline.
           * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ZeroShotAudioClassificationPipelineCallback} */
          async _call(audio, candidate_labels, {
            hypothesis_template = "This is a sound of {}."
          } = {}) {
            const single = !Array.isArray(audio);
            if (single) {
              audio = [
                /** @type {AudioInput} */
                audio
              ];
            }
            const texts = candidate_labels.map(
              (x) => hypothesis_template.replace("{}", x)
            );
            const text_inputs = this.tokenizer(texts, {
              padding: true,
              truncation: true
            });
            const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
            const preparedAudios = await prepareAudios(audio, sampling_rate);
            const toReturn = [];
            for (const aud of preparedAudios) {
              const audio_inputs = await this.processor(aud);
              const output = await this.model({ ...text_inputs, ...audio_inputs });
              const probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(output.logits_per_audio.data);
              toReturn.push([...probs].map((x, i) => ({
                score: x,
                label: candidate_labels[i]
              })));
            }
            return single ? toReturn[0] : toReturn;
          }
        }
        class AutomaticSpeechRecognitionPipeline extends /** @type {new (options: TextAudioPipelineConstructorArgs) => AutomaticSpeechRecognitionPipelineType} */
        Pipeline {
          /**
           * Create a new AutomaticSpeechRecognitionPipeline.
           * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {AutomaticSpeechRecognitionPipelineCallback} */
          async _call(audio, kwargs = {}) {
            switch (this.model.config.model_type) {
              case "whisper":
                return this._call_whisper(audio, kwargs);
              case "wav2vec2":
              case "wav2vec2-bert":
              case "unispeech":
              case "unispeech-sat":
              case "hubert":
                return this._call_wav2vec2(audio, kwargs);
              default:
                throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);
            }
          }
          /**
           * @type {AutomaticSpeechRecognitionPipelineCallback}
           * @private
           */
          async _call_wav2vec2(audio, kwargs) {
            if (kwargs.language) {
              console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".');
            }
            if (kwargs.task) {
              console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');
            }
            const single = !Array.isArray(audio);
            if (single) {
              audio = [
                /** @type {AudioInput} */
                audio
              ];
            }
            const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
            const preparedAudios = await prepareAudios(audio, sampling_rate);
            const toReturn = [];
            for (const aud of preparedAudios) {
              const inputs = await this.processor(aud);
              const output = await this.model(inputs);
              const logits = output.logits[0];
              const predicted_ids = [];
              for (const item of logits) {
                predicted_ids.push((0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.max)(item.data)[1]);
              }
              const predicted_sentences = this.tokenizer.decode(predicted_ids);
              toReturn.push({ text: predicted_sentences });
            }
            return single ? toReturn[0] : toReturn;
          }
          /**
           * @type {AutomaticSpeechRecognitionPipelineCallback}
           * @private
           */
          async _call_whisper(audio, kwargs) {
            const return_timestamps = kwargs.return_timestamps ?? false;
            const chunk_length_s = kwargs.chunk_length_s ?? 0;
            const force_full_sequences = kwargs.force_full_sequences ?? false;
            let stride_length_s = kwargs.stride_length_s ?? null;
            const generation_config = { ...kwargs };
            if (return_timestamps === "word") {
              generation_config["return_token_timestamps"] = true;
              generation_config["return_timestamps"] = false;
            }
            const single = !Array.isArray(audio);
            if (single) {
              audio = [
                /** @type {AudioInput} */
                audio
              ];
            }
            const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;
            const hop_length = this.processor.feature_extractor.config.hop_length;
            const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
            const preparedAudios = await prepareAudios(audio, sampling_rate);
            const toReturn = [];
            for (const aud of preparedAudios) {
              let chunks = [];
              if (chunk_length_s > 0) {
                if (stride_length_s === null) {
                  stride_length_s = chunk_length_s / 6;
                } else if (chunk_length_s <= stride_length_s) {
                  throw Error("`chunk_length_s` must be larger than `stride_length_s`.");
                }
                const window2 = sampling_rate * chunk_length_s;
                const stride = sampling_rate * stride_length_s;
                const jump = window2 - 2 * stride;
                let offset = 0;
                while (true) {
                  const offset_end = offset + window2;
                  const subarr = aud.subarray(offset, offset_end);
                  const feature = await this.processor(subarr);
                  const is_first = offset === 0;
                  const is_last = offset_end >= aud.length;
                  chunks.push({
                    stride: [
                      subarr.length,
                      is_first ? 0 : stride,
                      is_last ? 0 : stride
                    ],
                    input_features: feature.input_features,
                    is_last
                  });
                  if (is_last) break;
                  offset += jump;
                }
              } else {
                chunks = [{
                  stride: [aud.length, 0, 0],
                  input_features: (await this.processor(aud)).input_features,
                  is_last: true
                }];
              }
              for (const chunk of chunks) {
                generation_config.num_frames = Math.floor(chunk.stride[0] / hop_length);
                const data = await this.model.generate({
                  inputs: chunk.input_features,
                  ...generation_config
                });
                if (return_timestamps === "word") {
                  chunk.tokens = data.sequences.tolist()[0];
                  chunk.token_timestamps = data.token_timestamps.tolist()[0].map(
                    (x) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.round)(x, 2)
                  );
                } else {
                  chunk.tokens = /** @type {Tensor} */
                  data[0].tolist();
                }
                chunk.stride = chunk.stride.map((x) => x / sampling_rate);
              }
              const [full_text, optional] = this.tokenizer._decode_asr(chunks, {
                time_precision,
                return_timestamps,
                force_full_sequences
              });
              toReturn.push({ text: full_text, ...optional });
            }
            return single ? toReturn[0] : toReturn;
          }
        }
        class ImageToTextPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ImageToTextPipelineType} */
        Pipeline {
          /**
           * Create a new ImageToTextPipeline.
           * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ImageToTextPipelineCallback} */
          async _call(images, generate_kwargs = {}) {
            const isBatched = Array.isArray(images);
            const preparedImages = await prepareImages(images);
            const { pixel_values } = await this.processor(preparedImages);
            const toReturn = [];
            for (const batch of pixel_values) {
              batch.dims = [1, ...batch.dims];
              const output = await this.model.generate({ inputs: batch, ...generate_kwargs });
              const decoded = this.tokenizer.batch_decode(
                /** @type {Tensor} */
                output,
                {
                  skip_special_tokens: true
                }
              ).map((x) => ({ generated_text: x.trim() }));
              toReturn.push(decoded);
            }
            return isBatched ? toReturn : toReturn[0];
          }
        }
        class ImageClassificationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new ImageClassificationPipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ImageClassificationPipelineCallback} */
          async _call(images, {
            top_k = 5
          } = {}) {
            const preparedImages = await prepareImages(images);
            const { pixel_values } = await this.processor(preparedImages);
            const output = await this.model({ pixel_values });
            const id2label = this.model.config.id2label;
            const toReturn = [];
            for (const batch of output.logits) {
              const scores = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.topk)(new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor(
                "float32",
                (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(batch.data),
                batch.dims
              ), top_k);
              const values = scores[0].tolist();
              const indices = scores[1].tolist();
              const vals = indices.map((x, i) => ({
                label: (
                  /** @type {string} */
                  id2label ? id2label[x] : `LABEL_${x}`
                ),
                score: (
                  /** @type {number} */
                  values[i]
                )
              }));
              toReturn.push(vals);
            }
            return Array.isArray(images) ? toReturn : toReturn[0];
          }
        }
        class ImageSegmentationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageSegmentationPipelineType} */
        Pipeline {
          /**
           * Create a new ImageSegmentationPipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
            this.subtasks_mapping = {
              // Mapping of subtasks to their corresponding post-processing function names.
              panoptic: "post_process_panoptic_segmentation",
              instance: "post_process_instance_segmentation",
              semantic: "post_process_semantic_segmentation"
            };
          }
          /** @type {ImageSegmentationPipelineCallback} */
          async _call(images, {
            threshold = 0.5,
            mask_threshold = 0.5,
            overlap_mask_area_threshold = 0.8,
            label_ids_to_fuse = null,
            target_sizes = null,
            subtask = null
          } = {}) {
            const isBatched = Array.isArray(images);
            if (isBatched && images.length !== 1) {
              throw Error("Image segmentation pipeline currently only supports a batch size of 1.");
            }
            const preparedImages = await prepareImages(images);
            const imageSizes = preparedImages.map((x) => [x.height, x.width]);
            const { pixel_values, pixel_mask } = await this.processor(preparedImages);
            const output = await this.model({ pixel_values, pixel_mask });
            let fn = null;
            if (subtask !== null) {
              fn = this.subtasks_mapping[subtask];
            } else {
              for (let [task, func] of Object.entries(this.subtasks_mapping)) {
                if (func in this.processor.feature_extractor) {
                  fn = this.processor.feature_extractor[func].bind(this.processor.feature_extractor);
                  subtask = task;
                  break;
                }
              }
            }
            const id2label = this.model.config.id2label;
            const annotation = [];
            if (subtask === "panoptic" || subtask === "instance") {
              const processed = fn(
                output,
                threshold,
                mask_threshold,
                overlap_mask_area_threshold,
                label_ids_to_fuse,
                target_sizes ?? imageSizes
                // TODO FIX?
              )[0];
              const segmentation = processed.segmentation;
              for (const segment of processed.segments_info) {
                const maskData = new Uint8ClampedArray(segmentation.data.length);
                for (let i = 0; i < segmentation.data.length; ++i) {
                  if (segmentation.data[i] === segment.id) {
                    maskData[i] = 255;
                  }
                }
                const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_8__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
                annotation.push({
                  score: segment.score,
                  label: id2label[segment.label_id],
                  mask
                });
              }
            } else if (subtask === "semantic") {
              const { segmentation, labels } = fn(output, target_sizes ?? imageSizes)[0];
              for (const label of labels) {
                const maskData = new Uint8ClampedArray(segmentation.data.length);
                for (let i = 0; i < segmentation.data.length; ++i) {
                  if (segmentation.data[i] === label) {
                    maskData[i] = 255;
                  }
                }
                const mask = new _utils_image_js__WEBPACK_IMPORTED_MODULE_8__.RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);
                annotation.push({
                  score: null,
                  label: id2label[label],
                  mask
                });
              }
            } else {
              throw Error(`Subtask ${subtask} not supported.`);
            }
            return annotation;
          }
        }
        class ZeroShotImageClassificationPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotImageClassificationPipelineType} */
        Pipeline {
          /**
           * Create a new ZeroShotImageClassificationPipeline.
           * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ZeroShotImageClassificationPipelineCallback} */
          async _call(images, candidate_labels, {
            hypothesis_template = "This is a photo of {}"
          } = {}) {
            const isBatched = Array.isArray(images);
            const preparedImages = await prepareImages(images);
            const texts = candidate_labels.map(
              (x) => hypothesis_template.replace("{}", x)
            );
            const text_inputs = this.tokenizer(texts, {
              padding: this.model.config.model_type === "siglip" ? "max_length" : true,
              truncation: true
            });
            const { pixel_values } = await this.processor(preparedImages);
            const output = await this.model({ ...text_inputs, pixel_values });
            const function_to_apply = this.model.config.model_type === "siglip" ? (batch) => batch.sigmoid().data : (batch) => (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.softmax)(batch.data);
            const toReturn = [];
            for (const batch of output.logits_per_image) {
              const probs = function_to_apply(batch);
              const result = [...probs].map((x, i) => ({
                score: x,
                label: candidate_labels[i]
              }));
              result.sort((a, b) => b.score - a.score);
              toReturn.push(result);
            }
            return isBatched ? toReturn : toReturn[0];
          }
        }
        class ObjectDetectionPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ObjectDetectionPipelineType} */
        Pipeline {
          /**
           * Create a new ObjectDetectionPipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ObjectDetectionPipelineCallback} */
          async _call(images, {
            threshold = 0.9,
            percentage = false
          } = {}) {
            const isBatched = Array.isArray(images);
            if (isBatched && images.length !== 1) {
              throw Error("Object detection pipeline currently only supports a batch size of 1.");
            }
            const preparedImages = await prepareImages(images);
            const imageSizes = percentage ? null : preparedImages.map((x) => [x.height, x.width]);
            const { pixel_values, pixel_mask } = await this.processor(preparedImages);
            const output = await this.model({ pixel_values, pixel_mask });
            const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSizes);
            const id2label = this.model.config.id2label;
            const result = processed.map((batch) => batch.boxes.map((box, i) => ({
              score: batch.scores[i],
              label: id2label[batch.classes[i]],
              box: get_bounding_box(box, !percentage)
            })));
            return isBatched ? result : result[0];
          }
        }
        class ZeroShotObjectDetectionPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotObjectDetectionPipelineType} */
        Pipeline {
          /**
           * Create a new ZeroShotObjectDetectionPipeline.
           * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ZeroShotObjectDetectionPipelineCallback} */
          async _call(images, candidate_labels, {
            threshold = 0.1,
            top_k = null,
            percentage = false
          } = {}) {
            const isBatched = Array.isArray(images);
            const preparedImages = await prepareImages(images);
            const text_inputs = this.tokenizer(candidate_labels, {
              padding: true,
              truncation: true
            });
            const model_inputs = await this.processor(preparedImages);
            const toReturn = [];
            for (let i = 0; i < preparedImages.length; ++i) {
              const image = preparedImages[i];
              const imageSize = percentage ? null : [[image.height, image.width]];
              const pixel_values = model_inputs.pixel_values[i].unsqueeze_(0);
              const output = await this.model({ ...text_inputs, pixel_values });
              const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSize, true)[0];
              let result = processed.boxes.map((box, i2) => ({
                score: processed.scores[i2],
                label: candidate_labels[processed.classes[i2]],
                box: get_bounding_box(box, !percentage)
              })).sort((a, b) => b.score - a.score);
              if (top_k !== null) {
                result = result.slice(0, top_k);
              }
              toReturn.push(result);
            }
            return isBatched ? toReturn : toReturn[0];
          }
        }
        class DocumentQuestionAnsweringPipeline extends /** @type {new (options: TextImagePipelineConstructorArgs) => DocumentQuestionAnsweringPipelineType} */
        Pipeline {
          /**
           * Create a new DocumentQuestionAnsweringPipeline.
           * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {DocumentQuestionAnsweringPipelineCallback} */
          async _call(image, question, generate_kwargs = {}) {
            const preparedImage = (await prepareImages(image))[0];
            const { pixel_values } = await this.processor(preparedImage);
            const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;
            const decoder_input_ids = this.tokenizer(task_prompt, {
              add_special_tokens: false,
              padding: true,
              truncation: true
            }).input_ids;
            const output = await this.model.generate({
              inputs: pixel_values,
              max_length: this.model.config.decoder.max_position_embeddings,
              decoder_input_ids,
              ...generate_kwargs
            });
            const decoded = this.tokenizer.batch_decode(
              /** @type {Tensor} */
              output
            )[0];
            const match = decoded.match(/<s_answer>(.*?)<\/s_answer>/);
            let answer = null;
            if (match && match.length >= 2) {
              answer = match[1].trim();
            }
            return [{ answer }];
          }
        }
        class TextToAudioPipeline extends /** @type {new (options: TextToAudioPipelineConstructorArgs) => TextToAudioPipelineType} */
        Pipeline {
          DEFAULT_VOCODER_ID = "Xenova/speecht5_hifigan";
          /**
           * Create a new TextToAudioPipeline.
           * @param {TextToAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
            this.vocoder = options2.vocoder ?? null;
          }
          /** @type {TextToAudioPipelineCallback} */
          async _call(text_inputs, {
            speaker_embeddings = null
          } = {}) {
            if (this.processor) {
              return this._call_text_to_spectrogram(text_inputs, { speaker_embeddings });
            } else {
              return this._call_text_to_waveform(text_inputs);
            }
          }
          async _call_text_to_waveform(text_inputs) {
            const inputs = this.tokenizer(text_inputs, {
              padding: true,
              truncation: true
            });
            const { waveform } = await this.model(inputs);
            const sampling_rate = this.model.config.sampling_rate;
            return {
              audio: waveform.data,
              sampling_rate
            };
          }
          async _call_text_to_spectrogram(text_inputs, { speaker_embeddings }) {
            if (!this.vocoder) {
              console.log("No vocoder specified, using default HifiGan vocoder.");
              this.vocoder = await _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { dtype: "fp32" });
            }
            if (typeof speaker_embeddings === "string" || speaker_embeddings instanceof URL) {
              speaker_embeddings = new Float32Array(
                await (await fetch(speaker_embeddings)).arrayBuffer()
              );
            }
            if (speaker_embeddings instanceof Float32Array) {
              speaker_embeddings = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor(
                "float32",
                speaker_embeddings,
                [1, speaker_embeddings.length]
              );
            } else if (!(speaker_embeddings instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.Tensor)) {
              throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");
            }
            const { input_ids } = this.tokenizer(text_inputs, {
              padding: true,
              truncation: true
            });
            const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });
            const sampling_rate = this.processor.feature_extractor.config.sampling_rate;
            return {
              audio: waveform.data,
              sampling_rate
            };
          }
        }
        class ImageToImagePipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => ImageToImagePipelineType} */
        Pipeline {
          /**
           * Create a new ImageToImagePipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {ImageToImagePipelineCallback} */
          async _call(images) {
            const preparedImages = await prepareImages(images);
            const inputs = await this.processor(preparedImages);
            const outputs = await this.model(inputs);
            const toReturn = [];
            for (const batch of outputs.reconstruction) {
              const output = batch.squeeze().clamp_(0, 1).mul_(255).round_().to("uint8");
              toReturn.push(_utils_image_js__WEBPACK_IMPORTED_MODULE_8__.RawImage.fromTensor(output));
            }
            return toReturn.length > 1 ? toReturn : toReturn[0];
          }
        }
        class DepthEstimationPipeline extends /** @type {new (options: ImagePipelineConstructorArgs) => DepthEstimationPipelineType} */
        Pipeline {
          /**
           * Create a new DepthEstimationPipeline.
           * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.
           */
          constructor(options2) {
            super(options2);
          }
          /** @type {DepthEstimationPipelineCallback} */
          async _call(images) {
            const preparedImages = await prepareImages(images);
            const inputs = await this.processor(preparedImages);
            const { predicted_depth } = await this.model(inputs);
            const toReturn = [];
            for (let i = 0; i < preparedImages.length; ++i) {
              const prediction = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_7__.interpolate)(predicted_depth[i], preparedImages[i].size.reverse(), "bilinear", false);
              const formatted = prediction.mul_(255 / (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_5__.max)(prediction.data)[0]).to("uint8");
              toReturn.push({
                predicted_depth: predicted_depth[i],
                depth: _utils_image_js__WEBPACK_IMPORTED_MODULE_8__.RawImage.fromTensor(formatted)
              });
            }
            return toReturn.length > 1 ? toReturn : toReturn[0];
          }
        }
        const SUPPORTED_TASKS = Object.freeze({
          "text-classification": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": TextClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,
            "default": {
              // TODO: replace with original
              // "model": "distilbert-base-uncased-finetuned-sst-2-english",
              "model": "Xenova/distilbert-base-uncased-finetuned-sst-2-english"
            },
            "type": "text"
          },
          "token-classification": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": TokenClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTokenClassification,
            "default": {
              // TODO: replace with original
              // "model": "Davlan/bert-base-multilingual-cased-ner-hrl",
              "model": "Xenova/bert-base-multilingual-cased-ner-hrl"
            },
            "type": "text"
          },
          "question-answering": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": QuestionAnsweringPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForQuestionAnswering,
            "default": {
              // TODO: replace with original
              // "model": "distilbert-base-cased-distilled-squad",
              "model": "Xenova/distilbert-base-cased-distilled-squad"
            },
            "type": "text"
          },
          "fill-mask": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": FillMaskPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForMaskedLM,
            "default": {
              // TODO: replace with original
              // "model": "bert-base-uncased",
              "model": "Xenova/bert-base-uncased"
            },
            "type": "text"
          },
          "summarization": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": SummarizationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
            "default": {
              // TODO: replace with original
              // "model": "sshleifer/distilbart-cnn-6-6",
              "model": "Xenova/distilbart-cnn-6-6"
            },
            "type": "text"
          },
          "translation": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": TranslationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
            "default": {
              // TODO: replace with original
              // "model": "t5-small",
              "model": "Xenova/t5-small"
            },
            "type": "text"
          },
          "text2text-generation": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": Text2TextGenerationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSeq2SeqLM,
            "default": {
              // TODO: replace with original
              // "model": "google/flan-t5-small",
              "model": "Xenova/flan-t5-small"
            },
            "type": "text"
          },
          "text-generation": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": TextGenerationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCausalLM,
            "default": {
              // TODO: replace with original
              // "model": "gpt2",
              "model": "Xenova/gpt2"
            },
            "type": "text"
          },
          "zero-shot-classification": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": ZeroShotClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSequenceClassification,
            "default": {
              // TODO: replace with original
              // "model": "typeform/distilbert-base-uncased-mnli",
              "model": "Xenova/distilbert-base-uncased-mnli"
            },
            "type": "text"
          },
          "audio-classification": {
            "pipeline": AudioClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForAudioClassification,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "superb/wav2vec2-base-superb-ks",
              "model": "Xenova/wav2vec2-base-superb-ks"
            },
            "type": "audio"
          },
          "zero-shot-audio-classification": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": ZeroShotAudioClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "laion/clap-htsat-fused",
              "model": "Xenova/clap-htsat-unfused"
            },
            "type": "multimodal"
          },
          "automatic-speech-recognition": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": AutomaticSpeechRecognitionPipeline,
            "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSpeechSeq2Seq, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForCTC],
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "openai/whisper-tiny.en",
              "model": "Xenova/whisper-tiny.en"
            },
            "type": "multimodal"
          },
          "text-to-audio": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": TextToAudioPipeline,
            "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToWaveform, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForTextToSpectrogram],
            "processor": [
              _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
              /* Some don't use a processor */
              null
            ],
            "default": {
              // TODO: replace with original
              // "model": "microsoft/speecht5_tts",
              "model": "Xenova/speecht5_tts"
            },
            "type": "text"
          },
          "image-to-text": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": ImageToTextPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForVision2Seq,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "nlpconnect/vit-gpt2-image-captioning",
              "model": "Xenova/vit-gpt2-image-captioning"
            },
            "type": "multimodal"
          },
          "image-classification": {
            // no tokenizer
            "pipeline": ImageClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageClassification,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "google/vit-base-patch16-224",
              "model": "Xenova/vit-base-patch16-224"
            },
            "type": "multimodal"
          },
          "image-segmentation": {
            // no tokenizer
            "pipeline": ImageSegmentationPipeline,
            "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForSemanticSegmentation, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForUniversalSegmentation],
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "facebook/detr-resnet-50-panoptic",
              "model": "Xenova/detr-resnet-50-panoptic"
            },
            "type": "multimodal"
          },
          "zero-shot-image-classification": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": ZeroShotImageClassificationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "openai/clip-vit-base-patch32",
              "model": "Xenova/clip-vit-base-patch32"
            },
            "type": "multimodal"
          },
          "object-detection": {
            // no tokenizer
            "pipeline": ObjectDetectionPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForObjectDetection,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "facebook/detr-resnet-50",
              "model": "Xenova/detr-resnet-50"
            },
            "type": "multimodal"
          },
          "zero-shot-object-detection": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": ZeroShotObjectDetectionPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForZeroShotObjectDetection,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "google/owlvit-base-patch32",
              "model": "Xenova/owlvit-base-patch32"
            },
            "type": "multimodal"
          },
          "document-question-answering": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": DocumentQuestionAnsweringPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDocumentQuestionAnswering,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "naver-clova-ix/donut-base-finetuned-docvqa",
              "model": "Xenova/donut-base-finetuned-docvqa"
            },
            "type": "multimodal"
          },
          "image-to-image": {
            // no tokenizer
            "pipeline": ImageToImagePipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageToImage,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "caidas/swin2SR-classical-sr-x2-64",
              "model": "Xenova/swin2SR-classical-sr-x2-64"
            },
            "type": "image"
          },
          "depth-estimation": {
            // no tokenizer
            "pipeline": DepthEstimationPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForDepthEstimation,
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "default": {
              // TODO: replace with original
              // "model": "Intel/dpt-large",
              "model": "Xenova/dpt-large"
            },
            "type": "image"
          },
          // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).
          "feature-extraction": {
            "tokenizer": _tokenizers_js__WEBPACK_IMPORTED_MODULE_0__.AutoTokenizer,
            "pipeline": FeatureExtractionPipeline,
            "model": _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel,
            "default": {
              // TODO: replace with original
              // "model": "sentence-transformers/all-MiniLM-L6-v2",
              "model": "Xenova/all-MiniLM-L6-v2"
            },
            "type": "text"
          },
          "image-feature-extraction": {
            "processor": _processors_js__WEBPACK_IMPORTED_MODULE_2__.AutoProcessor,
            "pipeline": ImageFeatureExtractionPipeline,
            "model": [_models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModelForImageFeatureExtraction, _models_js__WEBPACK_IMPORTED_MODULE_1__.AutoModel],
            "default": {
              // TODO: replace with original
              // "model": "google/vit-base-patch16-224",
              "model": "Xenova/vit-base-patch16-224-in21k"
            },
            "type": "image"
          }
        });
        const TASK_ALIASES = Object.freeze({
          "sentiment-analysis": "text-classification",
          "ner": "token-classification",
          // "vqa": "visual-question-answering", // TODO: Add
          "asr": "automatic-speech-recognition",
          "text-to-speech": "text-to-audio",
          // Add for backwards compatibility
          "embeddings": "feature-extraction"
        });
        async function pipeline(task, model = null, {
          progress_callback = null,
          config: config2 = null,
          cache_dir = null,
          local_files_only = false,
          revision = "main",
          device = null,
          dtype = null,
          model_file_name = null,
          session_options = {}
        } = {}) {
          task = TASK_ALIASES[task] ?? task;
          const pipelineInfo = SUPPORTED_TASKS[task.split("_", 1)[0]];
          if (!pipelineInfo) {
            throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`);
          }
          if (!model) {
            model = pipelineInfo.default.model;
            console.log(`No model specified. Using default model: "${model}".`);
          }
          const pretrainedOptions = {
            progress_callback,
            config: config2,
            cache_dir,
            local_files_only,
            revision,
            device,
            dtype,
            model_file_name,
            session_options
          };
          const classes = /* @__PURE__ */ new Map([
            ["tokenizer", pipelineInfo.tokenizer],
            ["model", pipelineInfo.model],
            ["processor", pipelineInfo.processor]
          ]);
          const results = await loadItems(classes, model, pretrainedOptions);
          results.task = task;
          (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_4__.dispatchCallback)(progress_callback, {
            "status": "ready",
            "task": task,
            "model": model
          });
          const pipelineClass = pipelineInfo.pipeline;
          return new pipelineClass(results);
        }
        async function loadItems(mapping, model, pretrainedOptions) {
          const result = /* @__PURE__ */ Object.create(null);
          const promises = [];
          for (const [name, cls] of mapping.entries()) {
            if (!cls) continue;
            let promise;
            if (Array.isArray(cls)) {
              promise = new Promise(async (resolve, reject) => {
                let e;
                for (const c of cls) {
                  if (c === null) {
                    resolve(null);
                    return;
                  }
                  try {
                    resolve(await c.from_pretrained(model, pretrainedOptions));
                    return;
                  } catch (err) {
                    if (err.message?.includes("Unsupported model type")) {
                      e = err;
                    } else if (err.message?.includes("Could not locate file")) {
                      e = err;
                    } else {
                      reject(err);
                      return;
                    }
                  }
                }
                reject(e);
              });
            } else {
              promise = cls.from_pretrained(model, pretrainedOptions);
            }
            result[name] = promise;
            promises.push(promise);
          }
          await Promise.all(promises);
          for (const [name, promise] of Object.entries(result)) {
            result[name] = await promise;
          }
          return result;
        }
      }
    ),
    /***/
    "./src/processors.js": (
      /*!***************************!*\
        !*** ./src/processors.js ***!
        \***************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          ASTFeatureExtractor: () => (
            /* binding */
            ASTFeatureExtractor
          ),
          /* harmony export */
          AutoProcessor: () => (
            /* binding */
            AutoProcessor
          ),
          /* harmony export */
          BeitFeatureExtractor: () => (
            /* binding */
            BeitFeatureExtractor
          ),
          /* harmony export */
          BitImageProcessor: () => (
            /* binding */
            BitImageProcessor
          ),
          /* harmony export */
          CLIPFeatureExtractor: () => (
            /* binding */
            CLIPFeatureExtractor
          ),
          /* harmony export */
          CLIPImageProcessor: () => (
            /* binding */
            CLIPImageProcessor
          ),
          /* harmony export */
          ChineseCLIPFeatureExtractor: () => (
            /* binding */
            ChineseCLIPFeatureExtractor
          ),
          /* harmony export */
          ClapFeatureExtractor: () => (
            /* binding */
            ClapFeatureExtractor
          ),
          /* harmony export */
          ConvNextFeatureExtractor: () => (
            /* binding */
            ConvNextFeatureExtractor
          ),
          /* harmony export */
          ConvNextImageProcessor: () => (
            /* binding */
            ConvNextImageProcessor
          ),
          /* harmony export */
          DPTFeatureExtractor: () => (
            /* binding */
            DPTFeatureExtractor
          ),
          /* harmony export */
          DPTImageProcessor: () => (
            /* binding */
            DPTImageProcessor
          ),
          /* harmony export */
          DeiTFeatureExtractor: () => (
            /* binding */
            DeiTFeatureExtractor
          ),
          /* harmony export */
          DetrFeatureExtractor: () => (
            /* binding */
            DetrFeatureExtractor
          ),
          /* harmony export */
          DonutFeatureExtractor: () => (
            /* binding */
            DonutFeatureExtractor
          ),
          /* harmony export */
          DonutImageProcessor: () => (
            /* binding */
            DonutImageProcessor
          ),
          /* harmony export */
          EfficientNetImageProcessor: () => (
            /* binding */
            EfficientNetImageProcessor
          ),
          /* harmony export */
          FeatureExtractor: () => (
            /* binding */
            FeatureExtractor
          ),
          /* harmony export */
          Florence2Processor: () => (
            /* binding */
            Florence2Processor
          ),
          /* harmony export */
          GLPNFeatureExtractor: () => (
            /* binding */
            GLPNFeatureExtractor
          ),
          /* harmony export */
          ImageFeatureExtractor: () => (
            /* binding */
            ImageFeatureExtractor
          ),
          /* harmony export */
          MaskFormerFeatureExtractor: () => (
            /* binding */
            MaskFormerFeatureExtractor
          ),
          /* harmony export */
          MobileNetV1FeatureExtractor: () => (
            /* binding */
            MobileNetV1FeatureExtractor
          ),
          /* harmony export */
          MobileNetV2FeatureExtractor: () => (
            /* binding */
            MobileNetV2FeatureExtractor
          ),
          /* harmony export */
          MobileNetV3FeatureExtractor: () => (
            /* binding */
            MobileNetV3FeatureExtractor
          ),
          /* harmony export */
          MobileNetV4FeatureExtractor: () => (
            /* binding */
            MobileNetV4FeatureExtractor
          ),
          /* harmony export */
          MobileViTFeatureExtractor: () => (
            /* binding */
            MobileViTFeatureExtractor
          ),
          /* harmony export */
          MobileViTImageProcessor: () => (
            /* binding */
            MobileViTImageProcessor
          ),
          /* harmony export */
          NougatImageProcessor: () => (
            /* binding */
            NougatImageProcessor
          ),
          /* harmony export */
          OwlViTFeatureExtractor: () => (
            /* binding */
            OwlViTFeatureExtractor
          ),
          /* harmony export */
          OwlViTProcessor: () => (
            /* binding */
            OwlViTProcessor
          ),
          /* harmony export */
          Owlv2ImageProcessor: () => (
            /* binding */
            Owlv2ImageProcessor
          ),
          /* harmony export */
          Processor: () => (
            /* binding */
            Processor
          ),
          /* harmony export */
          PvtImageProcessor: () => (
            /* binding */
            PvtImageProcessor
          ),
          /* harmony export */
          PyAnnoteFeatureExtractor: () => (
            /* binding */
            PyAnnoteFeatureExtractor
          ),
          /* harmony export */
          PyAnnoteProcessor: () => (
            /* binding */
            PyAnnoteProcessor
          ),
          /* harmony export */
          RTDetrImageProcessor: () => (
            /* binding */
            RTDetrImageProcessor
          ),
          /* harmony export */
          SamImageProcessor: () => (
            /* binding */
            SamImageProcessor
          ),
          /* harmony export */
          SamProcessor: () => (
            /* binding */
            SamProcessor
          ),
          /* harmony export */
          SapiensFeatureExtractor: () => (
            /* binding */
            SapiensFeatureExtractor
          ),
          /* harmony export */
          SeamlessM4TFeatureExtractor: () => (
            /* binding */
            SeamlessM4TFeatureExtractor
          ),
          /* harmony export */
          SegformerFeatureExtractor: () => (
            /* binding */
            SegformerFeatureExtractor
          ),
          /* harmony export */
          SiglipImageProcessor: () => (
            /* binding */
            SiglipImageProcessor
          ),
          /* harmony export */
          SpeechT5FeatureExtractor: () => (
            /* binding */
            SpeechT5FeatureExtractor
          ),
          /* harmony export */
          SpeechT5Processor: () => (
            /* binding */
            SpeechT5Processor
          ),
          /* harmony export */
          Swin2SRImageProcessor: () => (
            /* binding */
            Swin2SRImageProcessor
          ),
          /* harmony export */
          ViTFeatureExtractor: () => (
            /* binding */
            ViTFeatureExtractor
          ),
          /* harmony export */
          ViTImageProcessor: () => (
            /* binding */
            ViTImageProcessor
          ),
          /* harmony export */
          VitMatteImageProcessor: () => (
            /* binding */
            VitMatteImageProcessor
          ),
          /* harmony export */
          Wav2Vec2FeatureExtractor: () => (
            /* binding */
            Wav2Vec2FeatureExtractor
          ),
          /* harmony export */
          Wav2Vec2ProcessorWithLM: () => (
            /* binding */
            Wav2Vec2ProcessorWithLM
          ),
          /* harmony export */
          WeSpeakerFeatureExtractor: () => (
            /* binding */
            WeSpeakerFeatureExtractor
          ),
          /* harmony export */
          WhisperFeatureExtractor: () => (
            /* binding */
            WhisperFeatureExtractor
          ),
          /* harmony export */
          WhisperProcessor: () => (
            /* binding */
            WhisperProcessor
          ),
          /* harmony export */
          YolosFeatureExtractor: () => (
            /* binding */
            YolosFeatureExtractor
          )
          /* harmony export */
        });
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./utils/core.js */
          "./src/utils/core.js"
        );
        var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./utils/hub.js */
          "./src/utils/hub.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./utils/maths.js */
          "./src/utils/maths.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
          /*! ./utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_image_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
          /*! ./utils/image.js */
          "./src/utils/image.js"
        );
        var _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2 = __webpack_require__2(
          /*! ./utils/audio.js */
          "./src/utils/audio.js"
        );
        function center_to_corners_format([centerX, centerY, width, height]) {
          return [
            centerX - width / 2,
            centerY - height / 2,
            centerX + width / 2,
            centerY + height / 2
          ];
        }
        function post_process_object_detection(outputs, threshold = 0.5, target_sizes = null, is_zero_shot = false) {
          const out_logits = outputs.logits;
          const out_bbox = outputs.pred_boxes;
          const [batch_size, num_boxes, num_classes] = out_logits.dims;
          if (target_sizes !== null && target_sizes.length !== batch_size) {
            throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
          }
          let toReturn = [];
          for (let i = 0; i < batch_size; ++i) {
            let target_size = target_sizes !== null ? target_sizes[i] : null;
            let info = {
              boxes: [],
              classes: [],
              scores: []
            };
            let logits = out_logits[i];
            let bbox = out_bbox[i];
            for (let j = 0; j < num_boxes; ++j) {
              let logit = logits[j];
              let indices = [];
              let probs;
              if (is_zero_shot) {
                probs = logit.sigmoid().data;
                for (let k = 0; k < probs.length; ++k) {
                  if (probs[k] > threshold) {
                    indices.push(k);
                  }
                }
              } else {
                let maxIndex = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(logit.data)[1];
                if (maxIndex === num_classes - 1) {
                  continue;
                }
                probs = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.softmax)(logit.data);
                if (probs[maxIndex] < threshold) {
                  continue;
                }
                indices.push(maxIndex);
              }
              for (const index2 of indices) {
                let box = bbox[j].data;
                box = center_to_corners_format(box);
                if (target_size !== null) {
                  box = box.map((x, i2) => x * target_size[(i2 + 1) % 2]);
                }
                info.boxes.push(box);
                info.classes.push(index2);
                info.scores.push(probs[index2]);
              }
            }
            toReturn.push(info);
          }
          return toReturn;
        }
        function post_process_semantic_segmentation(outputs, target_sizes = null) {
          const logits = outputs.logits;
          const batch_size = logits.dims[0];
          if (target_sizes !== null && target_sizes.length !== batch_size) {
            throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
          }
          const toReturn = [];
          for (let i = 0; i < batch_size; ++i) {
            const target_size = target_sizes !== null ? target_sizes[i] : null;
            let data = logits[i];
            if (target_size !== null) {
              data = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.interpolate)(data, target_size, "bilinear", false);
            }
            const [height, width] = target_size ?? data.dims.slice(-2);
            const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
              "int32",
              new Int32Array(height * width),
              [height, width]
            );
            const buffer2 = data[0].data;
            const segmentation_data = segmentation.data;
            for (let j = 1; j < data.dims[0]; ++j) {
              const row = data[j].data;
              for (let k = 0; k < row.length; ++k) {
                if (row[k] > buffer2[k]) {
                  buffer2[k] = row[k];
                  segmentation_data[k] = j;
                }
              }
            }
            const hasLabel = new Array(data.dims[0]);
            for (let j = 0; j < segmentation_data.length; ++j) {
              const index2 = segmentation_data[j];
              hasLabel[index2] = index2;
            }
            const labels = hasLabel.filter((x) => x !== void 0);
            toReturn.push({ segmentation, labels });
          }
          return toReturn;
        }
        function remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {
          const mask_probs_item = [];
          const pred_scores_item = [];
          const pred_labels_item = [];
          for (let j = 0; j < class_logits.dims[0]; ++j) {
            const cls = class_logits[j];
            const mask = mask_logits[j];
            const pred_label = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(cls.data)[1];
            if (pred_label === num_labels) {
              continue;
            }
            const scores = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.softmax)(cls.data);
            const pred_score = scores[pred_label];
            if (pred_score > object_mask_threshold) {
              mask_probs_item.push(mask);
              pred_scores_item.push(pred_score);
              pred_labels_item.push(pred_label);
            }
          }
          return [mask_probs_item, pred_scores_item, pred_labels_item];
        }
        function check_segment_validity(mask_labels, mask_probs, k, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8) {
          const mask_k = [];
          let mask_k_area = 0;
          let original_area = 0;
          const mask_probs_k_data = mask_probs[k].data;
          for (let i = 0; i < mask_labels.length; ++i) {
            if (mask_labels[i] === k) {
              mask_k.push(i);
              ++mask_k_area;
            }
            if (mask_probs_k_data[i] >= mask_threshold) {
              ++original_area;
            }
          }
          let mask_exists = mask_k_area > 0 && original_area > 0;
          if (mask_exists) {
            let area_ratio = mask_k_area / original_area;
            mask_exists = area_ratio > overlap_mask_area_threshold;
          }
          return [mask_exists, mask_k];
        }
        function compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse = null, target_size = null) {
          const [height, width] = target_size ?? mask_probs[0].dims;
          const segmentation = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
            "int32",
            new Int32Array(height * width),
            [height, width]
          );
          const segments = [];
          if (target_size !== null) {
            for (let i = 0; i < mask_probs.length; ++i) {
              mask_probs[i] = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.interpolate)(mask_probs[i], target_size, "bilinear", false);
            }
          }
          const mask_labels = new Int32Array(mask_probs[0].data.length);
          const bestScores = new Float32Array(mask_probs[0].data.length);
          for (let i = 0; i < mask_probs.length; ++i) {
            let score = pred_scores[i];
            const mask_probs_i_data = mask_probs[i].data;
            for (let j = 0; j < mask_probs_i_data.length; ++j) {
              mask_probs_i_data[j] *= score;
              if (mask_probs_i_data[j] > bestScores[j]) {
                mask_labels[j] = i;
                bestScores[j] = mask_probs_i_data[j];
              }
            }
          }
          let current_segment_id = 0;
          const segmentation_data = segmentation.data;
          for (let k = 0; k < pred_labels.length; ++k) {
            const pred_class = pred_labels[k];
            const [mask_exists, mask_k] = check_segment_validity(
              mask_labels,
              mask_probs,
              k,
              mask_threshold,
              overlap_mask_area_threshold
            );
            if (!mask_exists) {
              continue;
            }
            ++current_segment_id;
            for (const index2 of mask_k) {
              segmentation_data[index2] = current_segment_id;
            }
            segments.push({
              id: current_segment_id,
              label_id: pred_class,
              // was_fused: should_fuse, TODO
              score: pred_scores[k]
            });
          }
          return [segmentation, segments];
        }
        function post_process_panoptic_segmentation(outputs, threshold = 0.5, mask_threshold = 0.5, overlap_mask_area_threshold = 0.8, label_ids_to_fuse = null, target_sizes = null) {
          if (label_ids_to_fuse === null) {
            console.warn("`label_ids_to_fuse` unset. No instance will be fused.");
            label_ids_to_fuse = /* @__PURE__ */ new Set();
          }
          const class_queries_logits = outputs.class_queries_logits ?? outputs.logits;
          const masks_queries_logits = outputs.masks_queries_logits ?? outputs.pred_masks;
          const mask_probs = masks_queries_logits.sigmoid();
          let [batch_size, num_queries, num_labels] = class_queries_logits.dims;
          num_labels -= 1;
          if (target_sizes !== null && target_sizes.length !== batch_size) {
            throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
          }
          let toReturn = [];
          for (let i = 0; i < batch_size; ++i) {
            let target_size = target_sizes !== null ? target_sizes[i] : null;
            let class_logits = class_queries_logits[i];
            let mask_logits = mask_probs[i];
            let [mask_probs_item, pred_scores_item, pred_labels_item] = remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);
            if (pred_labels_item.length === 0) {
              let [height, width] = target_size ?? mask_logits.dims.slice(-2);
              let segmentation2 = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                "int32",
                new Int32Array(height * width).fill(-1),
                [height, width]
              );
              toReturn.push({
                segmentation: segmentation2,
                segments_info: []
              });
              continue;
            }
            let [segmentation, segments] = compute_segments(
              mask_probs_item,
              pred_scores_item,
              pred_labels_item,
              mask_threshold,
              overlap_mask_area_threshold,
              label_ids_to_fuse,
              target_size
            );
            toReturn.push({
              segmentation,
              segments_info: segments
            });
          }
          return toReturn;
        }
        function post_process_instance_segmentation(outputs, threshold = 0.5, target_sizes = null) {
          throw new Error("Not implemented yet");
          return [];
        }
        function validate_audio_inputs(audio, feature_extractor) {
          if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {
            throw new Error(
              `${feature_extractor} expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`
            );
          }
        }
        function constraint_to_multiple_of(val, multiple, minVal = 0, maxVal = null) {
          const a = val / multiple;
          let x = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.bankers_round)(a) * multiple;
          if (maxVal !== null && x > maxVal) {
            x = Math.floor(a) * multiple;
          }
          if (x < minVal) {
            x = Math.ceil(a) * multiple;
          }
          return x;
        }
        function enforce_size_divisibility([width, height], divisor) {
          return [
            Math.max(Math.floor(width / divisor), 1) * divisor,
            Math.max(Math.floor(height / divisor), 1) * divisor
          ];
        }
        class FeatureExtractor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Constructs a new FeatureExtractor instance.
           *
           * @param {Object} config The configuration for the feature extractor.
           */
          constructor(config2) {
            super();
            this.config = config2;
          }
        }
        class ImageFeatureExtractor extends FeatureExtractor {
          /**
           * Constructs a new ImageFeatureExtractor instance.
           *
           * @param {Object} config The configuration for the feature extractor.
           * @param {number[]} config.image_mean The mean values for image normalization.
           * @param {number[]} config.image_std The standard deviation values for image normalization.
           * @param {boolean} config.do_rescale Whether to rescale the image pixel values to the [0,1] range.
           * @param {number} config.rescale_factor The factor to use for rescaling the image pixel values.
           * @param {boolean} config.do_normalize Whether to normalize the image pixel values.
           * @param {boolean} config.do_resize Whether to resize the image.
           * @param {number} config.resample What method to use for resampling.
           * @param {number|Object} config.size The size to resize the image to.
           * @param {boolean} [config.do_flip_channel_order=false] Whether to flip the color channels from RGB to BGR.
           * Can be overridden by the `do_flip_channel_order` parameter in the `preprocess` method.
           */
          constructor(config2) {
            super(config2);
            this.image_mean = this.config.image_mean ?? this.config.mean;
            this.image_std = this.config.image_std ?? this.config.std;
            this.resample = this.config.resample ?? 2;
            this.do_rescale = this.config.do_rescale ?? true;
            this.rescale_factor = this.config.rescale_factor ?? 1 / 255;
            this.do_normalize = this.config.do_normalize;
            this.do_resize = this.config.do_resize;
            this.do_thumbnail = this.config.do_thumbnail;
            this.size = this.config.size;
            this.size_divisibility = this.config.size_divisibility ?? this.config.size_divisor;
            this.do_center_crop = this.config.do_center_crop;
            this.crop_size = this.config.crop_size;
            this.do_convert_rgb = this.config.do_convert_rgb ?? true;
            this.do_crop_margin = this.config.do_crop_margin;
            this.pad_size = this.config.pad_size;
            this.do_pad = this.config.do_pad;
            if (this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0) {
              this.pad_size = this.size;
            }
            this.do_flip_channel_order = this.config.do_flip_channel_order ?? false;
          }
          /**
           * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any
           * corresponding dimension of the specified size.
           * @param {RawImage} image The image to be resized.
           * @param {{height:number, width:number}} size The size `{"height": h, "width": w}` to resize the image to.
           * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.
           * @returns {Promise<RawImage>} The resized image.
           */
          async thumbnail(image, size3, resample = 2) {
            const input_height = image.height;
            const input_width = image.width;
            const output_height = size3.height;
            const output_width = size3.width;
            let height = Math.min(input_height, output_height);
            let width = Math.min(input_width, output_width);
            if (height === input_height && width === input_width) {
              return image;
            }
            if (input_height > input_width) {
              width = Math.floor(input_width * height / input_height);
            } else if (input_width > input_height) {
              height = Math.floor(input_height * width / input_width);
            }
            return await image.resize(width, height, { resample });
          }
          /**
           * Crops the margin of the image. Gray pixels are considered margin (i.e., pixels with a value below the threshold).
           * @param {RawImage} image The image to be cropped.
           * @param {number} gray_threshold Value below which pixels are considered to be gray.
           * @returns {Promise<RawImage>} The cropped image.
           */
          async crop_margin(image, gray_threshold = 200) {
            const gray_image = image.clone().grayscale();
            const minValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.min)(gray_image.data)[0];
            const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(gray_image.data)[0];
            const diff = maxValue - minValue;
            if (diff === 0) {
              return image;
            }
            const threshold = gray_threshold / 255;
            let x_min = gray_image.width, y_min = gray_image.height, x_max = 0, y_max = 0;
            const gray_image_data = gray_image.data;
            for (let j = 0; j < gray_image.height; ++j) {
              const row = j * gray_image.width;
              for (let i = 0; i < gray_image.width; ++i) {
                if ((gray_image_data[row + i] - minValue) / diff < threshold) {
                  x_min = Math.min(x_min, i);
                  y_min = Math.min(y_min, j);
                  x_max = Math.max(x_max, i);
                  y_max = Math.max(y_max, j);
                }
              }
            }
            image = await image.crop([x_min, y_min, x_max, y_max]);
            return image;
          }
          /**
           * Pad the image by a certain amount.
           * @param {Float32Array} pixelData The pixel data to pad.
           * @param {number[]} imgDims The dimensions of the image (height, width, channels).
           * @param {{width:number; height:number}|number} padSize The dimensions of the padded image.
           * @param {Object} options The options for padding.
           * @param {'constant'|'symmetric'} [options.mode='constant'] The type of padding to add.
           * @param {boolean} [options.center=false] Whether to center the image.
           * @param {number} [options.constant_values=0] The constant value to use for padding.
           * @returns {[Float32Array, number[]]} The padded pixel data and image dimensions.
           */
          pad_image(pixelData, imgDims, padSize, {
            mode = "constant",
            center = false,
            constant_values = 0
          } = {}) {
            const [imageHeight, imageWidth, imageChannels] = imgDims;
            let paddedImageWidth, paddedImageHeight;
            if (typeof padSize === "number") {
              paddedImageWidth = padSize;
              paddedImageHeight = padSize;
            } else {
              paddedImageWidth = padSize.width;
              paddedImageHeight = padSize.height;
            }
            if (paddedImageWidth !== imageWidth || paddedImageHeight !== imageHeight) {
              const paddedPixelData = new Float32Array(paddedImageWidth * paddedImageHeight * imageChannels);
              if (Array.isArray(constant_values)) {
                for (let i = 0; i < paddedPixelData.length; ++i) {
                  paddedPixelData[i] = constant_values[i % imageChannels];
                }
              } else if (constant_values !== 0) {
                paddedPixelData.fill(constant_values);
              }
              const [left, top] = center ? [Math.floor((paddedImageWidth - imageWidth) / 2), Math.floor((paddedImageHeight - imageHeight) / 2)] : [0, 0];
              for (let i = 0; i < imageHeight; ++i) {
                const a = (i + top) * paddedImageWidth;
                const b = i * imageWidth;
                for (let j = 0; j < imageWidth; ++j) {
                  const c = (a + j + left) * imageChannels;
                  const d = (b + j) * imageChannels;
                  for (let k = 0; k < imageChannels; ++k) {
                    paddedPixelData[c + k] = pixelData[d + k];
                  }
                }
              }
              if (mode === "symmetric") {
                if (center) {
                  throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");
                }
                const h1 = imageHeight - 1;
                const w1 = imageWidth - 1;
                for (let i = 0; i < paddedImageHeight; ++i) {
                  const a = i * paddedImageWidth;
                  const b = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateReflectOffset)(i, h1) * imageWidth;
                  for (let j = 0; j < paddedImageWidth; ++j) {
                    if (i < imageHeight && j < imageWidth) continue;
                    const c = (a + j) * imageChannels;
                    const d = (b + (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateReflectOffset)(j, w1)) * imageChannels;
                    for (let k = 0; k < imageChannels; ++k) {
                      paddedPixelData[c + k] = pixelData[d + k];
                    }
                  }
                }
              }
              pixelData = paddedPixelData;
              imgDims = [paddedImageHeight, paddedImageWidth, imageChannels];
            }
            return [pixelData, imgDims];
          }
          /**
           * Rescale the image' pixel values by `this.rescale_factor`.
           * @param {Float32Array} pixelData The pixel data to rescale.
           * @returns {void}
           */
          rescale(pixelData) {
            for (let i = 0; i < pixelData.length; ++i) {
              pixelData[i] = this.rescale_factor * pixelData[i];
            }
          }
          /**
           * Find the target (width, height) dimension of the output image after
           * resizing given the input image and the desired size.
           * @param {RawImage} image The image to resize.
           * @param {any} size The size to use for resizing the image. 
           * @returns {[number, number]} The target (width, height) dimension of the output image after resizing.
           */
          get_resize_output_image_size(image, size3) {
            const [srcWidth, srcHeight] = image.size;
            let shortest_edge;
            let longest_edge;
            if (this.do_thumbnail) {
              const { height, width } = size3;
              shortest_edge = Math.min(height, width);
            } else if (Number.isInteger(size3)) {
              shortest_edge = size3;
              longest_edge = this.config.max_size ?? shortest_edge;
            } else if (size3 !== void 0) {
              shortest_edge = size3.shortest_edge;
              longest_edge = size3.longest_edge;
            }
            if (shortest_edge !== void 0 || longest_edge !== void 0) {
              const shortResizeFactor = shortest_edge === void 0 ? 1 : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);
              const newWidth = srcWidth * shortResizeFactor;
              const newHeight = srcHeight * shortResizeFactor;
              const longResizeFactor = longest_edge === void 0 ? 1 : Math.min(longest_edge / newWidth, longest_edge / newHeight);
              let finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));
              let finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));
              if (this.size_divisibility !== void 0) {
                [finalWidth, finalHeight] = enforce_size_divisibility([finalWidth, finalHeight], this.size_divisibility);
              }
              return [finalWidth, finalHeight];
            } else if (size3 !== void 0 && size3.width !== void 0 && size3.height !== void 0) {
              let newWidth = size3.width;
              let newHeight = size3.height;
              if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {
                let scale_height = newHeight / srcHeight;
                let scale_width = newWidth / srcWidth;
                if (Math.abs(1 - scale_width) < Math.abs(1 - scale_height)) {
                  scale_height = scale_width;
                } else {
                  scale_width = scale_height;
                }
                newHeight = constraint_to_multiple_of(scale_height * srcHeight, this.config.ensure_multiple_of);
                newWidth = constraint_to_multiple_of(scale_width * srcWidth, this.config.ensure_multiple_of);
              }
              return [newWidth, newHeight];
            } else if (this.size_divisibility !== void 0) {
              return enforce_size_divisibility([srcWidth, srcHeight], this.size_divisibility);
            } else {
              throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(size3)}`);
            }
          }
          /**
           * Resizes the image.
           * @param {RawImage} image The image to resize.
           * @returns {Promise<RawImage>} The resized image.
           */
          async resize(image) {
            const [newWidth, newHeight] = this.get_resize_output_image_size(image, this.size);
            return await image.resize(newWidth, newHeight, {
              resample: this.resample
            });
          }
          /**
           * @typedef {object} PreprocessedImage
           * @property {HeightWidth} original_size The original size of the image.
           * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.
           * @property {Tensor} pixel_values The pixel values of the preprocessed image.
           */
          /**
           * Preprocesses the given image.
           *
           * @param {RawImage} image The image to preprocess.
           * @param {Object} overrides The overrides for the preprocessing options.
           * @returns {Promise<PreprocessedImage>} The preprocessed image.
           */
          async preprocess(image, {
            do_normalize = null,
            do_pad = null,
            do_convert_rgb = null,
            do_convert_grayscale = null,
            do_flip_channel_order = null
          } = {}) {
            if (this.do_crop_margin) {
              image = await this.crop_margin(image);
            }
            const [srcWidth, srcHeight] = image.size;
            if (do_convert_rgb ?? this.do_convert_rgb) {
              image = image.rgb();
            } else if (do_convert_grayscale) {
              image = image.grayscale();
            }
            if (this.do_resize) {
              image = await this.resize(image);
            }
            if (this.do_thumbnail) {
              image = await this.thumbnail(image, this.size, this.resample);
            }
            if (this.do_center_crop) {
              let crop_width;
              let crop_height;
              if (Number.isInteger(this.crop_size)) {
                crop_width = this.crop_size;
                crop_height = this.crop_size;
              } else {
                crop_width = this.crop_size.width;
                crop_height = this.crop_size.height;
              }
              image = await image.center_crop(crop_width, crop_height);
            }
            const reshaped_input_size = [image.height, image.width];
            let pixelData = Float32Array.from(image.data);
            let imgDims = [image.height, image.width, image.channels];
            if (this.do_rescale) {
              this.rescale(pixelData);
            }
            if (do_normalize ?? this.do_normalize) {
              let image_mean = this.image_mean;
              if (!Array.isArray(this.image_mean)) {
                image_mean = new Array(image.channels).fill(image_mean);
              }
              let image_std = this.image_std;
              if (!Array.isArray(this.image_std)) {
                image_std = new Array(image.channels).fill(image_mean);
              }
              if (image_mean.length !== image.channels || image_std.length !== image.channels) {
                throw new Error(`When set to arrays, the length of \`image_mean\` (${image_mean.length}) and \`image_std\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);
              }
              for (let i = 0; i < pixelData.length; i += image.channels) {
                for (let j = 0; j < image.channels; ++j) {
                  pixelData[i + j] = (pixelData[i + j] - image_mean[j]) / image_std[j];
                }
              }
            }
            if (do_pad ?? this.do_pad) {
              if (this.pad_size) {
                const padded = this.pad_image(pixelData, [image.height, image.width, image.channels], this.pad_size);
                [pixelData, imgDims] = padded;
              } else if (this.size_divisibility) {
                const [paddedWidth, paddedHeight] = enforce_size_divisibility([imgDims[1], imgDims[0]], this.size_divisibility);
                [pixelData, imgDims] = this.pad_image(pixelData, imgDims, { width: paddedWidth, height: paddedHeight });
              }
            }
            if (do_flip_channel_order ?? this.do_flip_channel_order) {
              if (imgDims[2] !== 3) {
                throw new Error("Flipping channel order is only supported for RGB images.");
              }
              for (let i = 0; i < pixelData.length; i += 3) {
                const temp = pixelData[i];
                pixelData[i] = pixelData[i + 2];
                pixelData[i + 2] = temp;
              }
            }
            const pixel_values = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("float32", pixelData, imgDims).permute(2, 0, 1);
            return {
              original_size: [srcHeight, srcWidth],
              reshaped_input_size,
              pixel_values
            };
          }
          /**
           * Calls the feature extraction process on an array of images,
           * preprocesses each image, and concatenates the resulting
           * features into a single Tensor.
           * @param {RawImage[]} images The image(s) to extract features from.
           * @param {...any} args Additional arguments.
           * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.
           */
          async _call(images, ...args) {
            if (!Array.isArray(images)) {
              images = [images];
            }
            const imageData = await Promise.all(images.map((x) => this.preprocess(x)));
            const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.stack)(imageData.map((x) => x.pixel_values), 0);
            return {
              pixel_values,
              // Original sizes of images
              original_sizes: imageData.map((x) => x.original_size),
              // Reshaped sizes of images, before padding or cropping
              reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)
            };
          }
        }
        class SapiensFeatureExtractor extends ImageFeatureExtractor {
          /** @type {typeof post_process_semantic_segmentation} */
          post_process_semantic_segmentation(...args) {
            return post_process_semantic_segmentation(...args);
          }
        }
        class SegformerFeatureExtractor extends ImageFeatureExtractor {
          /** @type {typeof post_process_semantic_segmentation} */
          post_process_semantic_segmentation(...args) {
            return post_process_semantic_segmentation(...args);
          }
        }
        class PvtImageProcessor extends ImageFeatureExtractor {
        }
        class DPTFeatureExtractor extends ImageFeatureExtractor {
        }
        class DPTImageProcessor extends DPTFeatureExtractor {
        }
        class BitImageProcessor extends ImageFeatureExtractor {
        }
        class GLPNFeatureExtractor extends ImageFeatureExtractor {
        }
        class CLIPFeatureExtractor extends ImageFeatureExtractor {
        }
        class CLIPImageProcessor extends CLIPFeatureExtractor {
        }
        class ChineseCLIPFeatureExtractor extends ImageFeatureExtractor {
        }
        class SiglipImageProcessor extends ImageFeatureExtractor {
        }
        class ConvNextFeatureExtractor extends ImageFeatureExtractor {
          constructor(config2) {
            super(config2);
            this.crop_pct = this.config.crop_pct ?? 224 / 256;
          }
          async resize(image) {
            const shortest_edge = this.size?.shortest_edge;
            if (shortest_edge === void 0) {
              throw new Error(`Size dictionary must contain 'shortest_edge' key.`);
            }
            if (shortest_edge < 384) {
              const resize_shortest_edge = Math.floor(shortest_edge / this.crop_pct);
              const [newWidth, newHeight] = this.get_resize_output_image_size(image, {
                shortest_edge: resize_shortest_edge
              });
              image = await image.resize(newWidth, newHeight, {
                resample: this.resample
              });
              image = await image.center_crop(shortest_edge, shortest_edge);
            } else {
              image = await image.resize(shortest_edge, shortest_edge, {
                resample: this.resample
              });
            }
            return image;
          }
        }
        class ConvNextImageProcessor extends ConvNextFeatureExtractor {
        }
        class ViTFeatureExtractor extends ImageFeatureExtractor {
        }
        class ViTImageProcessor extends ImageFeatureExtractor {
        }
        class EfficientNetImageProcessor extends ImageFeatureExtractor {
          constructor(config2) {
            super(config2);
            this.include_top = this.config.include_top ?? true;
            if (this.include_top) {
              this.image_std = this.image_std.map((x) => x * x);
            }
          }
        }
        class MobileNetV1FeatureExtractor extends ImageFeatureExtractor {
        }
        class MobileNetV2FeatureExtractor extends ImageFeatureExtractor {
        }
        class MobileNetV3FeatureExtractor extends ImageFeatureExtractor {
        }
        class MobileNetV4FeatureExtractor extends ImageFeatureExtractor {
        }
        class MobileViTFeatureExtractor extends ImageFeatureExtractor {
        }
        class MobileViTImageProcessor extends MobileViTFeatureExtractor {
        }
        class OwlViTFeatureExtractor extends ImageFeatureExtractor {
          /** @type {typeof post_process_object_detection} */
          post_process_object_detection(...args) {
            return post_process_object_detection(...args);
          }
        }
        class Owlv2ImageProcessor extends OwlViTFeatureExtractor {
        }
        class RTDetrImageProcessor extends ImageFeatureExtractor {
          /** @type {typeof post_process_object_detection} */
          post_process_object_detection(...args) {
            return post_process_object_detection(...args);
          }
        }
        class DeiTFeatureExtractor extends ImageFeatureExtractor {
        }
        class BeitFeatureExtractor extends ImageFeatureExtractor {
        }
        class DonutFeatureExtractor extends ImageFeatureExtractor {
          pad_image(pixelData, imgDims, padSize, options2 = {}) {
            const [imageHeight, imageWidth, imageChannels] = imgDims;
            let image_mean = this.image_mean;
            if (!Array.isArray(this.image_mean)) {
              image_mean = new Array(imageChannels).fill(image_mean);
            }
            let image_std = this.image_std;
            if (!Array.isArray(image_std)) {
              image_std = new Array(imageChannels).fill(image_mean);
            }
            const constant_values = image_mean.map((x, i) => -x / image_std[i]);
            return super.pad_image(pixelData, imgDims, padSize, {
              center: true,
              // Since normalization is done after padding, we need to use certain constant values to ensure the same behaviour is observed.
              // For more information, see https://github.com/huggingface/transformers/blob/main/src/transformers/models/donut/image_processing_donut.py#L433-L451
              constant_values,
              ...options2
            });
          }
        }
        class DonutImageProcessor extends DonutFeatureExtractor {
        }
        class NougatImageProcessor extends DonutFeatureExtractor {
        }
        class DetrFeatureExtractor extends ImageFeatureExtractor {
          /**
           * Calls the feature extraction process on an array of images, preprocesses
           * each image, and concatenates the resulting features into a single Tensor.
           * @param {RawImage[]} images The image(s) to extract features from.
           * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
           */
          async _call(images) {
            const result = await super._call(images);
            const maskSize = [result.pixel_values.dims[0], 64, 64];
            const pixel_mask = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.full)(maskSize, 1n);
            return { ...result, pixel_mask };
          }
          /** @type {typeof post_process_object_detection} */
          post_process_object_detection(...args) {
            return post_process_object_detection(...args);
          }
          /** @type {typeof post_process_panoptic_segmentation} */
          post_process_panoptic_segmentation(...args) {
            return post_process_panoptic_segmentation(...args);
          }
          post_process_instance_segmentation() {
            throw Error("Not implemented yet");
          }
        }
        class MaskFormerFeatureExtractor extends ImageFeatureExtractor {
          /** @type {typeof post_process_panoptic_segmentation} */
          post_process_panoptic_segmentation(...args) {
            return post_process_panoptic_segmentation(...args);
          }
          post_process_instance_segmentation() {
            throw Error("Not implemented yet");
          }
        }
        class YolosFeatureExtractor extends ImageFeatureExtractor {
          /** @type {typeof post_process_object_detection} */
          post_process_object_detection(...args) {
            return post_process_object_detection(...args);
          }
        }
        class SamImageProcessor extends ImageFeatureExtractor {
          /**
           * 
           * @param {any} input_points 
           * @param {HeightWidth[]} original_sizes 
           * @param {HeightWidth[]} reshaped_input_sizes 
           * @returns {Tensor}
           */
          reshape_input_points(input_points, original_sizes, reshaped_input_sizes, is_bounding_box = false) {
            input_points = structuredClone(input_points);
            let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_points);
            if (shape.length === 3) {
              if (!is_bounding_box) {
                shape = [1, ...shape];
              }
              input_points = [input_points];
            } else if (shape.length !== 4) {
              throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
            }
            for (let i = 0; i < input_points.length; ++i) {
              let originalImageSize = original_sizes[i];
              let reshapedImageSize = reshaped_input_sizes[i];
              let resizeFactors = [
                reshapedImageSize[0] / originalImageSize[0],
                reshapedImageSize[1] / originalImageSize[1]
              ];
              for (let j = 0; j < input_points[i].length; ++j) {
                for (let k = 0; k < input_points[i][j].length; ++k) {
                  for (let w = 0; w < input_points[i][j][k].length; ++w) {
                    input_points[i][j][k][w] *= resizeFactors[w % 2];
                  }
                }
              }
            }
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
              "float32",
              Float32Array.from(input_points.flat(Infinity)),
              shape
            );
          }
          /**
           * 
           * @param {any} input_labels 
           * @param {Tensor} input_points 
           * @returns {Tensor}
           */
          add_input_labels(input_labels, input_points) {
            let shape = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.calculateDimensions)(input_labels);
            if (shape.length === 2) {
              shape = [1, ...shape];
              input_labels = [input_labels];
            } else if (shape.length !== 3) {
              throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
            }
            if (shape.some((x, i) => x !== input_points.dims[i])) {
              throw Error(`The first ${shape.length} dimensions of 'input_points' and 'input_labels' must be the same.`);
            }
            return new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
              "int64",
              input_labels.flat(Infinity).map(BigInt),
              shape
            );
          }
          /**
           * @param {any[]} images The URL(s) of the image(s) to extract features from.
           * @param {Object} [options] Additional options for the processor.
           * @param {any} [options.input_points=null] A 3D or 4D array, representing the input points provided by the user.
           * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.
           * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.
           * @param {any} [options.input_labels=null] A 2D or 3D array, representing the input labels for the points, used by the prompt encoder to encode the prompt.
           * - 2D: `[point_batch_size, nb_points_per_image]`. In this case, `batch_size` is assumed to be 1.
           * - 3D: `[batch_size, point_batch_size, nb_points_per_image]`.
           * @param {number[][][]} [options.input_boxes=null] A 3D array of shape `(batch_size, num_boxes, 4)`, representing the input boxes provided by the user.
           * This is used by the prompt encoder to encode the prompt. Generally yields to much better generated masks.
           * The processor will generate a tensor, with each dimension corresponding respectively to the image batch size,
           * the number of boxes per image and the coordinates of the top left and botton right point of the box.
           * In the order (`x1`, `y1`, `x2`, `y2`):
           * - `x1`: the x coordinate of the top left point of the input box
           * - `y1`: the y coordinate of the top left point of the input box
           * - `x2`: the x coordinate of the bottom right point of the input box
           * - `y2`: the y coordinate of the bottom right point of the input box
           * @returns {Promise<SamImageProcessorResult>}
           */
          async _call(images, {
            input_points = null,
            input_labels = null,
            input_boxes = null
          } = {}) {
            const processed = await super._call(images);
            if (input_points) {
              processed.input_points = this.reshape_input_points(
                input_points,
                processed.original_sizes,
                processed.reshaped_input_sizes
              );
            }
            if (input_labels) {
              if (!processed.input_points) {
                throw Error("`input_points` must be provided if `input_labels` are provided.");
              }
              processed.input_labels = this.add_input_labels(input_labels, processed.input_points);
            }
            if (input_boxes) {
              processed.input_boxes = this.reshape_input_points(
                input_boxes,
                processed.original_sizes,
                processed.reshaped_input_sizes,
                true
              );
            }
            return processed;
          }
          /**
           * Remove padding and upscale masks to the original image size.
           * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.
           * @param {[number, number][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.
           * @param {[number, number][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.
           * @param {Object} options Optional parameters for post-processing.
           * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.
           * @param {boolean} [options.binarize] Whether to binarize the masks.
           * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.
           * @param {number} [options.pad_size.height] The height the images were padded to.
           * @param {number} [options.pad_size.width] The width the images were padded to.
           * @returns {Promise<Tensor[]>} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.
           */
          async post_process_masks(masks, original_sizes, reshaped_input_sizes, {
            mask_threshold = 0,
            binarize = true,
            pad_size = null
          } = {}) {
            const output_masks = [];
            pad_size = pad_size ?? this.pad_size;
            const target_image_size = [pad_size.height, pad_size.width];
            for (let i = 0; i < original_sizes.length; ++i) {
              const original_size = original_sizes[i];
              const reshaped_input_size = reshaped_input_sizes[i];
              let interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.interpolate_4d)(
                masks[i],
                { mode: "bilinear", size: target_image_size }
              );
              interpolated_mask = interpolated_mask.slice(null, null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);
              interpolated_mask = await (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.interpolate_4d)(
                interpolated_mask,
                { mode: "bilinear", size: original_size }
              );
              if (binarize) {
                const data = interpolated_mask.data;
                const binarizedMaskData = new Uint8Array(data.length);
                for (let i2 = 0; i2 < data.length; ++i2) {
                  if (data[i2] > mask_threshold) {
                    binarizedMaskData[i2] = 1;
                  }
                }
                interpolated_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                  "bool",
                  binarizedMaskData,
                  interpolated_mask.dims
                );
              }
              output_masks.push(interpolated_mask);
            }
            return output_masks;
          }
          /**
           * Generates a list of crop boxes of different sizes. Each layer has (2**i)**2 boxes for the ith layer.
           * @param {RawImage} image Input original image
           * @param {number} target_size Target size of the resized image
           * @param {Object} options Options for generating crop boxes 
           * @param {number} [options.crop_n_layers] If >0, mask prediction will be run again on crops of the image.
           * Sets the number of layers to run, where each layer has 2**i_layer number of image crops.
           * @param {number} [options.overlap_ratio] Sets the degree to which crops overlap. In the first crop layer,
           * crops will overlap by this fraction of the image length. Later layers with more crops scale down this overlap.
           * @param {number} [options.points_per_crop] Number of points to sample from each crop.
           * @param {number} [options.crop_n_points_downscale_factor] The number of points-per-side sampled in layer n is
           * scaled down by crop_n_points_downscale_factor**n.
           * @returns {Object} An object containing the crop boxes, number of points per crop, cropped images, and input labels.
           */
          generate_crop_boxes(image, target_size, {
            crop_n_layers = 0,
            overlap_ratio = 512 / 1500,
            points_per_crop = 32,
            crop_n_points_downscale_factor = 1
          } = {}) {
          }
        }
        class Swin2SRImageProcessor extends ImageFeatureExtractor {
          pad_image(pixelData, imgDims, padSize, options2 = {}) {
            const [imageHeight, imageWidth, imageChannels] = imgDims;
            return super.pad_image(pixelData, imgDims, {
              // NOTE: For Swin2SR models, the original python implementation adds padding even when the image's width/height is already
              // a multiple of `pad_size`. However, this is most likely a bug (PR: https://github.com/mv-lab/swin2sr/pull/19).
              // For this reason, we only add padding when the image's width/height is not a multiple of `pad_size`.
              width: imageWidth + (padSize - imageWidth % padSize) % padSize,
              height: imageHeight + (padSize - imageHeight % padSize) % padSize
            }, {
              mode: "symmetric",
              center: false,
              constant_values: -1,
              ...options2
            });
          }
        }
        class VitMatteImageProcessor extends ImageFeatureExtractor {
          /**
           * Calls the feature extraction process on an array of images, preprocesses
           * each image, and concatenates the resulting features into a single Tensor.
           * @param {RawImage[]} images The image(s) to extract features from.
           * @param {RawImage[]} trimaps The trimaps(s) to extract features from.
           * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.
           */
          async _call(images, trimaps) {
            if (!Array.isArray(images)) {
              images = [images];
            }
            if (!Array.isArray(trimaps)) {
              trimaps = [trimaps];
            }
            const imageData = await Promise.all(images.map((x) => this.preprocess(x)));
            const trimapData = await Promise.all(trimaps.map((x) => this.preprocess(x, {
              do_normalize: false,
              do_convert_rgb: false,
              do_convert_grayscale: true
            })));
            const pixel_values = (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.stack)(imageData.map(
              // Concatenate images and trimaps
              (x, i) => (0, _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.cat)([x.pixel_values, trimapData[i].pixel_values], 0)
            ), 0);
            return {
              pixel_values,
              // Original sizes of images
              original_sizes: imageData.map((x) => x.original_size),
              // Reshaped sizes of images, before padding or cropping
              reshaped_input_sizes: imageData.map((x) => x.reshaped_input_size)
            };
          }
        }
        class WhisperFeatureExtractor extends FeatureExtractor {
          constructor(config2) {
            super(config2);
            this.config.mel_filters ??= (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              Math.floor(1 + this.config.n_fft / 2),
              // num_frequency_bins
              this.config.feature_size,
              // num_mel_filters
              0,
              // min_frequency
              8e3,
              // max_frequency
              this.config.sampling_rate,
              // sampling_rate
              "slaney",
              // norm
              "slaney"
              // mel_scale
            );
            this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.window_function)(this.config.n_fft, "hann");
          }
          /**
           * Computes the log-Mel spectrogram of the provided audio waveform.
           * @param {Float32Array|Float64Array} waveform The audio waveform to process.
           * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
           */
          async _extract_fbank_features(waveform) {
            const features = await (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.spectrogram)(
              waveform,
              this.window,
              // window
              this.config.n_fft,
              // frame_length
              this.config.hop_length,
              // hop_length
              {
                power: 2,
                mel_filters: this.config.mel_filters,
                log_mel: "log10",
                // Custom
                max_num_frames: this.config.nb_max_frames
                // 3000
              }
            );
            const data = features.data;
            const maxValue = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(data)[0];
            for (let i = 0; i < data.length; ++i) {
              data[i] = (Math.max(data[i], maxValue - 8) + 4) / 4;
            }
            return features;
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
           */
          async _call(audio) {
            validate_audio_inputs(audio, "WhisperFeatureExtractor");
            let waveform;
            if (audio.length > this.config.n_samples) {
              console.warn(
                "Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."
              );
              waveform = audio.slice(0, this.config.n_samples);
            } else {
              waveform = new Float32Array(this.config.n_samples);
              waveform.set(audio);
            }
            const features = await this._extract_fbank_features(waveform);
            return {
              input_features: features.unsqueeze_(0)
            };
          }
        }
        class Wav2Vec2FeatureExtractor extends FeatureExtractor {
          /**
           * @param {Float32Array} input_values 
           * @returns {Float32Array} 
           */
          _zero_mean_unit_var_norm(input_values) {
            const sum = input_values.reduce((a, b) => a + b, 0);
            const mean = sum / input_values.length;
            const variance = input_values.reduce((a, b) => a + (b - mean) ** 2, 0) / input_values.length;
            return input_values.map((x) => (x - mean) / Math.sqrt(variance + 1e-7));
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.
           */
          async _call(audio) {
            validate_audio_inputs(audio, "Wav2Vec2FeatureExtractor");
            if (audio instanceof Float64Array) {
              audio = new Float32Array(audio);
            }
            let input_values = audio;
            if (this.config.do_normalize) {
              input_values = this._zero_mean_unit_var_norm(input_values);
            }
            const shape = [1, input_values.length];
            return {
              input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("float32", input_values, shape),
              attention_mask: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("int64", new BigInt64Array(input_values.length).fill(1n), shape)
            };
          }
        }
        class SeamlessM4TFeatureExtractor extends FeatureExtractor {
          constructor(config2) {
            super(config2);
            const sampling_rate = this.config.sampling_rate;
            const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              256,
              // num_frequency_bins
              this.config.num_mel_bins,
              // num_mel_filters
              20,
              // min_frequency
              Math.floor(sampling_rate / 2),
              // max_frequency
              sampling_rate,
              // sampling_rate
              null,
              // norm
              "kaldi",
              // mel_scale
              true
              // triangularize_in_mel_space
            );
            for (let i = 0; i < mel_filters.length; ++i) {
              mel_filters[i].push(0);
            }
            this.mel_filters = mel_filters;
            this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.window_function)(400, "povey", {
              periodic: false
            });
          }
          /**
           * Computes the log-Mel spectrogram of the provided audio waveform.
           * @param {Float32Array|Float64Array} waveform The audio waveform to process.
           * @param {number} max_length The maximum number of frames to return.
           * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
           */
          async _extract_fbank_features(waveform, max_length) {
            waveform = waveform.map((x) => x * 32768);
            return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.spectrogram)(
              waveform,
              this.window,
              // window
              400,
              // frame_length
              160,
              // hop_length
              {
                fft_length: 512,
                power: 2,
                center: false,
                preemphasis: 0.97,
                mel_filters: this.mel_filters,
                log_mel: "log",
                mel_floor: 1192092955078125e-22,
                remove_dc_offset: true,
                // Custom
                max_num_frames: max_length,
                transpose: true
              }
            );
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @param {Object} options Optional parameters for feature extraction.
           * @param {boolean} [options.padding=true] Whether to pad the sequence to a multiple of `pad_to_multiple_of`.
           * @param {number} [options.pad_to_multiple_of=2] The number to pad the sequence to a multiple of.
           * @param {boolean} [options.do_normalize_per_mel_bins=true] Whether or not to zero-mean unit-variance normalize the input per mel-channel.
           * @param {boolean} [options.return_attention_mask=true] Whether to return the attention mask.
           * @returns {Promise<{ input_features: Tensor, attention_mask?: Tensor }>} A Promise resolving to an object containing the extracted input features and attention masks as Tensors.
           */
          async _call(audio, {
            padding = true,
            pad_to_multiple_of = 2,
            do_normalize_per_mel_bins = true,
            return_attention_mask = true
          } = {}) {
            validate_audio_inputs(audio, "SeamlessM4TFeatureExtractor");
            let features = await this._extract_fbank_features(audio, this.config.max_length);
            if (do_normalize_per_mel_bins) {
              const [num_features, feature_size] = features.dims;
              const data = features.data;
              for (let i = 0; i < feature_size; ++i) {
                let sum = 0;
                for (let j = 0; j < num_features; ++j) {
                  sum += data[j * feature_size + i];
                }
                const mean = sum / num_features;
                let variance = 0;
                for (let j = 0; j < num_features; ++j) {
                  variance += (data[j * feature_size + i] - mean) ** 2;
                }
                variance /= num_features - 1;
                const std = Math.sqrt(variance + 1e-7);
                for (let j = 0; j < num_features; ++j) {
                  const index2 = j * feature_size + i;
                  data[index2] = (data[index2] - mean) / std;
                }
              }
            }
            let padded_attention_mask;
            if (padding) {
              const [num_frames2, num_channels2] = features.dims;
              const data = (
                /** @type {Float32Array} */
                features.data
              );
              const pad_size = num_frames2 % pad_to_multiple_of;
              if (pad_size > 0) {
                const padded_data = new Float32Array(num_channels2 * (num_frames2 + pad_size));
                padded_data.set(data);
                padded_data.fill(this.config.padding_value, data.length);
                const numPaddedFrames = num_frames2 + pad_size;
                features = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                  features.type,
                  padded_data,
                  [numPaddedFrames, num_channels2]
                );
                if (return_attention_mask) {
                  padded_attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                    "int64",
                    new BigInt64Array(numPaddedFrames),
                    [1, numPaddedFrames]
                  );
                  padded_attention_mask.data.fill(1n, 0, num_frames2);
                }
              }
            }
            const [num_frames, num_channels] = features.dims;
            const stride = this.config.stride;
            const remainder = num_frames % stride;
            if (remainder !== 0) {
              throw new Error(`The number of frames (${num_frames}) must be a multiple of the stride (${stride}).`);
            }
            const input_features = features.view(
              1,
              Math.floor(num_frames / stride),
              num_channels * stride
            );
            const result = { input_features };
            if (return_attention_mask) {
              const reshapedNumFrames = input_features.dims[1];
              const attention_mask_data = new BigInt64Array(reshapedNumFrames);
              if (padded_attention_mask) {
                const padded_attention_mask_data = padded_attention_mask.data;
                for (let i = 1, j = 0; i < num_frames; i += stride, ++j) {
                  attention_mask_data[j] = padded_attention_mask_data[i];
                }
              } else {
                attention_mask_data.fill(1n);
              }
              result.attention_mask = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                "int64",
                attention_mask_data,
                [1, reshapedNumFrames]
              );
            }
            return result;
          }
        }
        class ASTFeatureExtractor extends FeatureExtractor {
          constructor(config2) {
            super(config2);
            const sampling_rate = this.config.sampling_rate;
            const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              256,
              // num_frequency_bins
              this.config.num_mel_bins,
              // num_mel_filters
              20,
              // min_frequency
              Math.floor(sampling_rate / 2),
              // max_frequency
              sampling_rate,
              // sampling_rate
              null,
              // norm
              "kaldi",
              // mel_scale
              true
              // triangularize_in_mel_space
            );
            for (let i = 0; i < mel_filters.length; ++i) {
              mel_filters[i].push(0);
            }
            this.mel_filters = mel_filters;
            this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.window_function)(400, "hann", {
              periodic: false
            });
            this.mean = this.config.mean;
            this.std = this.config.std;
          }
          /**
           * Computes the log-Mel spectrogram of the provided audio waveform.
           * @param {Float32Array|Float64Array} waveform The audio waveform to process.
           * @param {number} max_length The maximum number of frames to return.
           * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
           */
          async _extract_fbank_features(waveform, max_length) {
            return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.spectrogram)(
              waveform,
              this.window,
              // window
              400,
              // frame_length
              160,
              // hop_length
              {
                fft_length: 512,
                power: 2,
                center: false,
                preemphasis: 0.97,
                mel_filters: this.mel_filters,
                log_mel: "log",
                mel_floor: 1192092955078125e-22,
                remove_dc_offset: true,
                // Custom
                max_num_frames: max_length,
                transpose: true
              }
            );
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_values: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
           */
          async _call(audio) {
            validate_audio_inputs(audio, "ASTFeatureExtractor");
            const features = await this._extract_fbank_features(audio, this.config.max_length);
            if (this.config.do_normalize) {
              const denom = this.std * 2;
              const features_data = features.data;
              for (let i = 0; i < features_data.length; ++i) {
                features_data[i] = (features_data[i] - this.mean) / denom;
              }
            }
            return {
              input_values: features.unsqueeze_(0)
            };
          }
        }
        class ClapFeatureExtractor extends FeatureExtractor {
          constructor(config2) {
            super(config2);
            this.mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              this.config.nb_frequency_bins,
              // num_frequency_bins
              this.config.feature_size,
              // num_mel_filters
              this.config.frequency_min,
              // min_frequency
              this.config.frequency_max,
              // max_frequency
              this.config.sampling_rate,
              // sampling_rate
              null,
              // norm
              "htk"
              // mel_scale
            );
            this.mel_filters_slaney = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              this.config.nb_frequency_bins,
              // num_frequency_bins
              this.config.feature_size,
              // num_mel_filters
              this.config.frequency_min,
              // min_frequency
              this.config.frequency_max,
              // max_frequency
              this.config.sampling_rate,
              // sampling_rate
              "slaney",
              // norm
              "slaney"
              // mel_scale
            );
            this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.window_function)(this.config.fft_window_size, "hann");
          }
          /**
           * Extracts the mel spectrogram and prepares it for the mode based on the `truncation` and `padding` arguments.
           * 
           * Four different path are possible:
           *   - `truncation="fusion"` and the length of the waveform is greater than the max length: the mel spectrogram
           *     will be computed on the entire audio. 3 random crops and a dowsampled version of the full mel spectrogram
           *     are then stacked together. They will later be used for `feature_fusion`.
           *   - `truncation="rand_trunc"` and the length of the waveform is smaller than the max length: the audio is
           *     padded based on `padding`.
           *   - `truncation="fusion"` and the length of the waveform is smaller than the max length: the audio is padded
           *     based on `padding`, and is repeated `4` times.
           *   - `truncation="rand_trunc"` and the length of the waveform is greater than the max length: the mel
           *     spectrogram will be computed on a random crop of the waveform.
           * 
           * @param {Float32Array|Float64Array} waveform The input waveform.
           * @param {number} max_length The maximum length of the waveform.
           * @param {string} truncation The truncation strategy to use.
           * @param {string} padding The padding strategy to use.
           * @returns {Promise<Tensor>} An object containing the mel spectrogram data as a Float32Array, its dimensions as an array of numbers, and a boolean indicating whether the waveform was longer than the max length.
           * @private
           */
          async _get_input_mel(waveform, max_length, truncation, padding) {
            let input_mel;
            let longer = false;
            const diff = waveform.length - max_length;
            if (diff > 0) {
              if (truncation === "rand_trunc") {
                longer = true;
                const idx = Math.floor(Math.random() * (diff + 1));
                waveform = waveform.subarray(idx, idx + max_length);
                input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
              } else {
                throw new Error(`Truncation strategy "${truncation}" not implemented`);
              }
            } else {
              if (diff < 0) {
                let padded = new Float64Array(max_length);
                padded.set(waveform);
                if (padding === "repeat") {
                  for (let i = waveform.length; i < max_length; i += waveform.length) {
                    padded.set(waveform.subarray(0, Math.min(waveform.length, max_length - i)), i);
                  }
                } else if (padding === "repeatpad") {
                  for (let i = waveform.length; i < -diff; i += waveform.length) {
                    padded.set(waveform, i);
                  }
                }
                waveform = padded;
              }
              if (truncation === "fusion") {
                throw new Error(`Truncation strategy "${truncation}" not implemented`);
              }
              input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);
            }
            return input_mel.unsqueeze_(0);
          }
          /**
           * Compute the log-mel spectrogram of the provided `waveform` using the Hann window.
           * In CLAP, two different filter banks are used depending on the truncation pattern:
           *  - `self.mel_filters`: they correspond to the default parameters of `torchaudio` which can be obtained from
           *    calling `torchaudio.transforms.MelSpectrogram().mel_scale.fb`. These filters are used when `truncation`
           *    is set to `"fusion"`.
           *  - `self.mel_filteres_slaney` : they correspond to the default parameters of `librosa` which used
           *    `librosa.filters.mel` when computing the mel spectrogram. These filters were only used in the original
           *    implementation when the truncation mode is not `"fusion"`.
           * 
           * @param {Float32Array|Float64Array} waveform The audio waveform to process.
           * @param {number[][]} mel_filters The mel filters to use.
           * @param {number} [max_length=null] The maximum number of frames to return.
           * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
           */
          async _extract_fbank_features(waveform, mel_filters, max_length = null) {
            return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.spectrogram)(
              waveform,
              this.window,
              // window
              this.config.fft_window_size,
              // frame_length
              this.config.hop_length,
              // hop_length
              {
                power: 2,
                mel_filters,
                log_mel: "dB",
                // Custom
                max_num_frames: max_length,
                do_pad: false,
                transpose: true
              }
            );
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
           */
          async _call(audio, {
            max_length = null
          } = {}) {
            validate_audio_inputs(audio, "ClapFeatureExtractor");
            const padded_inputs = await this._get_input_mel(
              audio,
              max_length ?? this.config.nb_max_samples,
              this.config.truncation,
              this.config.padding
            );
            return {
              input_features: padded_inputs.unsqueeze_(0)
            };
          }
        }
        class PyAnnoteFeatureExtractor extends FeatureExtractor {
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_values: Tensor; }>} The extracted input features.
           */
          async _call(audio) {
            validate_audio_inputs(audio, "PyAnnoteFeatureExtractor");
            if (audio instanceof Float64Array) {
              audio = new Float32Array(audio);
            }
            const shape = [
              1,
              /* batch_size */
              1,
              /* num_channels */
              audio.length
              /* num_samples */
            ];
            return {
              input_values: new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor("float32", audio, shape)
            };
          }
          /**
           * NOTE: Can return fractional values. `Math.ceil` will ensure correct value.
           * @param {number} samples The number of frames in the audio.
           * @returns {number} The number of frames in the audio.
           */
          samples_to_frames(samples) {
            return (samples - this.config.offset) / this.config.step;
          }
          /**
           * Post-processes the speaker diarization logits output by the model.
           * @param {Tensor} logits The speaker diarization logits output by the model.
           * @param {number} num_samples Number of samples in the input audio.
           * @returns {Array<Array<{ id: number, start: number, end: number, confidence: number }>>} The post-processed speaker diarization results.
           */
          post_process_speaker_diarization(logits, num_samples) {
            const ratio = num_samples / this.samples_to_frames(num_samples) / this.config.sampling_rate;
            const results = [];
            for (const scores of logits.tolist()) {
              const accumulated_segments = [];
              let current_speaker = -1;
              for (let i = 0; i < scores.length; ++i) {
                const probabilities = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.softmax)(scores[i]);
                const [score, id] = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(probabilities);
                const [start, end] = [i, i + 1];
                if (id !== current_speaker) {
                  current_speaker = id;
                  accumulated_segments.push({ id, start, end, score });
                } else {
                  accumulated_segments.at(-1).end = end;
                  accumulated_segments.at(-1).score += score;
                }
              }
              results.push(accumulated_segments.map(
                // Convert frame-space to time-space
                // and compute the confidence
                ({ id, start, end, score }) => ({
                  id,
                  start: start * ratio,
                  end: end * ratio,
                  confidence: score / (end - start)
                })
              ));
            }
            return results;
          }
        }
        class WeSpeakerFeatureExtractor extends FeatureExtractor {
          constructor(config2) {
            super(config2);
            const sampling_rate = this.config.sampling_rate;
            const mel_filters = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.mel_filter_bank)(
              256,
              // num_frequency_bins
              this.config.num_mel_bins,
              // num_mel_filters
              20,
              // min_frequency
              Math.floor(sampling_rate / 2),
              // max_frequency
              sampling_rate,
              // sampling_rate
              null,
              // norm
              "kaldi",
              // mel_scale
              true
              // triangularize_in_mel_space
            );
            for (let i = 0; i < mel_filters.length; ++i) {
              mel_filters[i].push(0);
            }
            this.mel_filters = mel_filters;
            this.window = (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.window_function)(400, "hamming", {
              periodic: false
            });
            this.min_num_frames = this.config.min_num_frames;
          }
          /**
           * Computes the log-Mel spectrogram of the provided audio waveform.
           * @param {Float32Array|Float64Array} waveform The audio waveform to process.
           * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.
           */
          async _extract_fbank_features(waveform) {
            waveform = waveform.map((x) => x * 32768);
            return (0, _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__2.spectrogram)(
              waveform,
              this.window,
              // window
              400,
              // frame_length
              160,
              // hop_length
              {
                fft_length: 512,
                power: 2,
                center: false,
                preemphasis: 0.97,
                mel_filters: this.mel_filters,
                log_mel: "log",
                mel_floor: 1192092955078125e-22,
                remove_dc_offset: true,
                // Custom
                transpose: true,
                min_num_frames: this.min_num_frames
              }
            );
          }
          /**
           * Asynchronously extracts features from a given audio using the provided configuration.
           * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.
           * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.
           */
          async _call(audio) {
            validate_audio_inputs(audio, "WeSpeakerFeatureExtractor");
            const features = (await this._extract_fbank_features(audio)).unsqueeze_(0);
            if (this.config.fbank_centering_span === null) {
              const meanData = (
                /** @type {Float32Array} */
                features.mean(1).data
              );
              const featuresData = (
                /** @type {Float32Array} */
                features.data
              );
              const [batch_size, num_frames, feature_size] = features.dims;
              for (let i = 0; i < batch_size; ++i) {
                const offset1 = i * num_frames * feature_size;
                const offset2 = i * feature_size;
                for (let j = 0; j < num_frames; ++j) {
                  const offset3 = offset1 + j * feature_size;
                  for (let k = 0; k < feature_size; ++k) {
                    featuresData[offset3 + k] -= meanData[offset2 + k];
                  }
                }
              }
            }
            return {
              input_features: features
            };
          }
        }
        class SpeechT5FeatureExtractor extends FeatureExtractor {
        }
        class Processor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Creates a new Processor with the given feature extractor.
           * @param {FeatureExtractor} feature_extractor The function used to extract features from the input.
           */
          constructor(feature_extractor) {
            super();
            this.feature_extractor = feature_extractor;
          }
          /**
           * Calls the feature_extractor function with the given input.
           * @param {any} input The input to extract features from.
           * @param {...any} args Additional arguments.
           * @returns {Promise<any>} A Promise that resolves with the extracted features.
           */
          async _call(input, ...args) {
            return await this.feature_extractor(input, ...args);
          }
        }
        class SamProcessor extends Processor {
          /**
           * @borrows SamImageProcessor#_call as _call
           */
          async _call(...args) {
            return await this.feature_extractor(...args);
          }
          /**
           * @borrows SamImageProcessor#post_process_masks as post_process_masks
           */
          post_process_masks(...args) {
            return this.feature_extractor.post_process_masks(...args);
          }
          /**
           * @borrows SamImageProcessor#reshape_input_points as reshape_input_points
           */
          reshape_input_points(...args) {
            return this.feature_extractor.reshape_input_points(...args);
          }
        }
        class WhisperProcessor extends Processor {
          /**
           * Calls the feature_extractor function with the given audio input.
           * @param {any} audio The audio input to extract features from.
           * @returns {Promise<any>} A Promise that resolves with the extracted features.
           */
          async _call(audio) {
            return await this.feature_extractor(audio);
          }
        }
        class Wav2Vec2ProcessorWithLM extends Processor {
          /**
           * Calls the feature_extractor function with the given audio input.
           * @param {any} audio The audio input to extract features from.
           * @returns {Promise<any>} A Promise that resolves with the extracted features.
           */
          async _call(audio) {
            return await this.feature_extractor(audio);
          }
        }
        class PyAnnoteProcessor extends Processor {
          /**
           * Calls the feature_extractor function with the given audio input.
           * @param {any} audio The audio input to extract features from.
           * @returns {Promise<any>} A Promise that resolves with the extracted features.
           */
          async _call(audio) {
            return await this.feature_extractor(audio);
          }
          post_process_speaker_diarization(...args) {
            return this.feature_extractor.post_process_speaker_diarization(...args);
          }
        }
        class SpeechT5Processor extends Processor {
          /**
           * Calls the feature_extractor function with the given input.
           * @param {any} input The input to extract features from.
           * @returns {Promise<any>} A Promise that resolves with the extracted features.
           */
          async _call(input) {
            return await this.feature_extractor(input);
          }
        }
        class OwlViTProcessor extends Processor {
        }
        class Florence2Processor extends Processor {
          constructor(feature_extractor) {
            super(feature_extractor);
            const {
              tasks_answer_post_processing_type,
              task_prompts_without_inputs,
              task_prompts_with_input
            } = feature_extractor.config;
            this.tasks_answer_post_processing_type = new Map(Object.entries(tasks_answer_post_processing_type ?? {}));
            this.task_prompts_without_inputs = new Map(Object.entries(task_prompts_without_inputs ?? {}));
            this.task_prompts_with_input = new Map(Object.entries(task_prompts_with_input ?? {}));
            this.regexes = {
              quad_boxes: /(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,
              bboxes: /([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm
            };
            this.size_per_bin = 1e3;
          }
          /**
           * Helper function to construct prompts from input texts
           * @param {string|string[]} text
           * @returns {string[]}
           */
          construct_prompts(text) {
            if (typeof text === "string") {
              text = [text];
            }
            const prompts = [];
            for (const t of text) {
              if (this.task_prompts_without_inputs.has(t)) {
                prompts.push(this.task_prompts_without_inputs.get(t));
              } else {
                for (const [task, prompt] of this.task_prompts_with_input) {
                  if (t.includes(task)) {
                    prompts.push(prompt.replaceAll("{input}", t).replaceAll(task, ""));
                    break;
                  }
                }
                if (prompts.length !== text.length) {
                  prompts.push(t);
                }
              }
            }
            return prompts;
          }
          /**
           * Post-process the output of the model to each of the task outputs.
           * @param {string} text The text to post-process.
           * @param {string} task The task to post-process the text for.
           * @param {[number, number]} image_size The size of the image. height x width.
           */
          post_process_generation(text, task, image_size) {
            const task_answer_post_processing_type = this.tasks_answer_post_processing_type.get(task) ?? "pure_text";
            text = text.replaceAll("<s>", "").replaceAll("</s>", "");
            let final_answer;
            switch (task_answer_post_processing_type) {
              case "pure_text":
                final_answer = text;
                break;
              case "description_with_bboxes":
              case "bboxes":
              case "phrase_grounding":
              case "ocr":
                const key = task_answer_post_processing_type === "ocr" ? "quad_boxes" : "bboxes";
                const matches = text.matchAll(this.regexes[key]);
                const labels = [];
                const items = [];
                for (const [_, label, ...locations] of matches) {
                  labels.push(label ? label.trim() : labels.at(-1) ?? "");
                  items.push(
                    locations.map((x, i) => (
                      // NOTE: Add 0.5 to use the center position of the bin as the coordinate.
                      (Number(x) + 0.5) / this.size_per_bin * image_size[i % 2]
                    ))
                  );
                }
                final_answer = { labels, [key]: items };
                break;
              default:
                throw new Error(`Task "${task}" (of type "${task_answer_post_processing_type}") not yet implemented.`);
            }
            return { [task]: final_answer };
          }
        }
        class AutoProcessor {
          static FEATURE_EXTRACTOR_CLASS_MAPPING = {
            ImageFeatureExtractor,
            WhisperFeatureExtractor,
            ViTFeatureExtractor,
            MobileViTFeatureExtractor,
            MobileViTImageProcessor,
            MobileNetV1FeatureExtractor,
            MobileNetV2FeatureExtractor,
            MobileNetV3FeatureExtractor,
            MobileNetV4FeatureExtractor,
            OwlViTFeatureExtractor,
            Owlv2ImageProcessor,
            CLIPFeatureExtractor,
            CLIPImageProcessor,
            Florence2Processor,
            ChineseCLIPFeatureExtractor,
            SiglipImageProcessor,
            ConvNextFeatureExtractor,
            ConvNextImageProcessor,
            SegformerFeatureExtractor,
            SapiensFeatureExtractor,
            BitImageProcessor,
            DPTImageProcessor,
            DPTFeatureExtractor,
            PvtImageProcessor,
            GLPNFeatureExtractor,
            BeitFeatureExtractor,
            DeiTFeatureExtractor,
            DetrFeatureExtractor,
            RTDetrImageProcessor,
            MaskFormerFeatureExtractor,
            YolosFeatureExtractor,
            DonutFeatureExtractor,
            DonutImageProcessor,
            NougatImageProcessor,
            EfficientNetImageProcessor,
            ViTImageProcessor,
            VitMatteImageProcessor,
            SamImageProcessor,
            Swin2SRImageProcessor,
            Wav2Vec2FeatureExtractor,
            SeamlessM4TFeatureExtractor,
            SpeechT5FeatureExtractor,
            ASTFeatureExtractor,
            ClapFeatureExtractor,
            PyAnnoteFeatureExtractor,
            WeSpeakerFeatureExtractor
          };
          static PROCESSOR_CLASS_MAPPING = {
            WhisperProcessor,
            Wav2Vec2ProcessorWithLM,
            PyAnnoteProcessor,
            SamProcessor,
            SpeechT5Processor,
            OwlViTProcessor,
            Florence2Processor
          };
          /**
           * Instantiate one of the processor classes of the library from a pretrained model.
           * 
           * The processor class to instantiate is selected based on the `feature_extractor_type` property of the config object
           * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
           * 
           * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
           * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.
           *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
           *   user or organization name, like `dbmdz/bert-base-german-cased`.
           * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
           * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the processor.
           * 
           * @returns {Promise<Processor>} A new instance of the Processor class.
           */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main"
          } = {}) {
            let preprocessorConfig = config2 ?? await (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, "preprocessor_config.json", true, {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision
            });
            let key = preprocessorConfig.feature_extractor_type ?? preprocessorConfig.image_processor_type;
            let feature_extractor_class = this.FEATURE_EXTRACTOR_CLASS_MAPPING[key];
            if (!feature_extractor_class) {
              if (preprocessorConfig.size !== void 0) {
                console.warn(`Feature extractor type "${key}" not found, assuming ImageFeatureExtractor due to size parameter in config.`);
                feature_extractor_class = ImageFeatureExtractor;
              } else {
                throw new Error(`Unknown Feature Extractor type: ${key}`);
              }
            }
            let processor_class = this.PROCESSOR_CLASS_MAPPING[preprocessorConfig.processor_class] ?? Processor;
            let feature_extractor = new feature_extractor_class(preprocessorConfig);
            return new processor_class(feature_extractor);
          }
        }
      }
    ),
    /***/
    "./src/tokenizers.js": (
      /*!***************************!*\
        !*** ./src/tokenizers.js ***!
        \***************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          AlbertTokenizer: () => (
            /* binding */
            AlbertTokenizer
          ),
          /* harmony export */
          AutoTokenizer: () => (
            /* binding */
            AutoTokenizer
          ),
          /* harmony export */
          BartTokenizer: () => (
            /* binding */
            BartTokenizer
          ),
          /* harmony export */
          BertTokenizer: () => (
            /* binding */
            BertTokenizer
          ),
          /* harmony export */
          BlenderbotSmallTokenizer: () => (
            /* binding */
            BlenderbotSmallTokenizer
          ),
          /* harmony export */
          BlenderbotTokenizer: () => (
            /* binding */
            BlenderbotTokenizer
          ),
          /* harmony export */
          BloomTokenizer: () => (
            /* binding */
            BloomTokenizer
          ),
          /* harmony export */
          CLIPTokenizer: () => (
            /* binding */
            CLIPTokenizer
          ),
          /* harmony export */
          CamembertTokenizer: () => (
            /* binding */
            CamembertTokenizer
          ),
          /* harmony export */
          CodeGenTokenizer: () => (
            /* binding */
            CodeGenTokenizer
          ),
          /* harmony export */
          CodeLlamaTokenizer: () => (
            /* binding */
            CodeLlamaTokenizer
          ),
          /* harmony export */
          CohereTokenizer: () => (
            /* binding */
            CohereTokenizer
          ),
          /* harmony export */
          ConvBertTokenizer: () => (
            /* binding */
            ConvBertTokenizer
          ),
          /* harmony export */
          DebertaTokenizer: () => (
            /* binding */
            DebertaTokenizer
          ),
          /* harmony export */
          DebertaV2Tokenizer: () => (
            /* binding */
            DebertaV2Tokenizer
          ),
          /* harmony export */
          DistilBertTokenizer: () => (
            /* binding */
            DistilBertTokenizer
          ),
          /* harmony export */
          ElectraTokenizer: () => (
            /* binding */
            ElectraTokenizer
          ),
          /* harmony export */
          EsmTokenizer: () => (
            /* binding */
            EsmTokenizer
          ),
          /* harmony export */
          FalconTokenizer: () => (
            /* binding */
            FalconTokenizer
          ),
          /* harmony export */
          GPT2Tokenizer: () => (
            /* binding */
            GPT2Tokenizer
          ),
          /* harmony export */
          GPTNeoXTokenizer: () => (
            /* binding */
            GPTNeoXTokenizer
          ),
          /* harmony export */
          GemmaTokenizer: () => (
            /* binding */
            GemmaTokenizer
          ),
          /* harmony export */
          Grok1Tokenizer: () => (
            /* binding */
            Grok1Tokenizer
          ),
          /* harmony export */
          HerbertTokenizer: () => (
            /* binding */
            HerbertTokenizer
          ),
          /* harmony export */
          LlamaTokenizer: () => (
            /* binding */
            LlamaTokenizer
          ),
          /* harmony export */
          M2M100Tokenizer: () => (
            /* binding */
            M2M100Tokenizer
          ),
          /* harmony export */
          MBart50Tokenizer: () => (
            /* binding */
            MBart50Tokenizer
          ),
          /* harmony export */
          MBartTokenizer: () => (
            /* binding */
            MBartTokenizer
          ),
          /* harmony export */
          MPNetTokenizer: () => (
            /* binding */
            MPNetTokenizer
          ),
          /* harmony export */
          MarianTokenizer: () => (
            /* binding */
            MarianTokenizer
          ),
          /* harmony export */
          MobileBertTokenizer: () => (
            /* binding */
            MobileBertTokenizer
          ),
          /* harmony export */
          NllbTokenizer: () => (
            /* binding */
            NllbTokenizer
          ),
          /* harmony export */
          NougatTokenizer: () => (
            /* binding */
            NougatTokenizer
          ),
          /* harmony export */
          PreTrainedTokenizer: () => (
            /* binding */
            PreTrainedTokenizer
          ),
          /* harmony export */
          Qwen2Tokenizer: () => (
            /* binding */
            Qwen2Tokenizer
          ),
          /* harmony export */
          RoFormerTokenizer: () => (
            /* binding */
            RoFormerTokenizer
          ),
          /* harmony export */
          RobertaTokenizer: () => (
            /* binding */
            RobertaTokenizer
          ),
          /* harmony export */
          SiglipTokenizer: () => (
            /* binding */
            SiglipTokenizer
          ),
          /* harmony export */
          SpeechT5Tokenizer: () => (
            /* binding */
            SpeechT5Tokenizer
          ),
          /* harmony export */
          SqueezeBertTokenizer: () => (
            /* binding */
            SqueezeBertTokenizer
          ),
          /* harmony export */
          T5Tokenizer: () => (
            /* binding */
            T5Tokenizer
          ),
          /* harmony export */
          TokenizerModel: () => (
            /* binding */
            TokenizerModel
          ),
          /* harmony export */
          VitsTokenizer: () => (
            /* binding */
            VitsTokenizer
          ),
          /* harmony export */
          Wav2Vec2CTCTokenizer: () => (
            /* binding */
            Wav2Vec2CTCTokenizer
          ),
          /* harmony export */
          WhisperTokenizer: () => (
            /* binding */
            WhisperTokenizer
          ),
          /* harmony export */
          XLMRobertaTokenizer: () => (
            /* binding */
            XLMRobertaTokenizer
          ),
          /* harmony export */
          XLMTokenizer: () => (
            /* binding */
            XLMTokenizer
          ),
          /* harmony export */
          is_chinese_char: () => (
            /* binding */
            is_chinese_char
          )
          /* harmony export */
        });
        var _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./utils/generic.js */
          "./src/utils/generic.js"
        );
        var _utils_core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./utils/core.js */
          "./src/utils/core.js"
        );
        var _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./utils/hub.js */
          "./src/utils/hub.js"
        );
        var _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./utils/maths.js */
          "./src/utils/maths.js"
        );
        var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__2(
          /*! ./utils/tensor.js */
          "./src/utils/tensor.js"
        );
        var _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__2(
          /*! ./utils/data-structures.js */
          "./src/utils/data-structures.js"
        );
        var _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__2(
          /*! @huggingface/jinja */
          "./node_modules/@huggingface/jinja/dist/index.js"
        );
        var _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__2(
          /*! ./models/whisper/common_whisper.js */
          "./src/models/whisper/common_whisper.js"
        );
        var _utils_constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__2(
          /*! ./utils/constants.js */
          "./src/utils/constants.js"
        );
        async function loadTokenizer(pretrained_model_name_or_path, options2) {
          const info = await Promise.all([
            (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, "tokenizer.json", true, options2),
            (0, _utils_hub_js__WEBPACK_IMPORTED_MODULE_2__.getModelJSON)(pretrained_model_name_or_path, "tokenizer_config.json", true, options2)
          ]);
          if (options2.legacy !== null) {
            info[1].legacy = options2.legacy;
          }
          return info;
        }
        function regexSplit(text, regex) {
          const result = [];
          let prev = 0;
          for (const match of text.matchAll(regex)) {
            const fullMatch = match[0];
            if (prev < match.index) {
              result.push(text.slice(prev, match.index));
            }
            if (fullMatch.length > 0) {
              result.push(fullMatch);
            }
            prev = match.index + fullMatch.length;
          }
          if (prev < text.length) {
            result.push(text.slice(prev));
          }
          return result;
        }
        function createPattern(pattern, invert = true) {
          if (pattern.Regex !== void 0) {
            let regex = pattern.Regex.replace(/\\([#&~])/g, "$1");
            for (const [key, value] of PROBLEMATIC_REGEX_MAP) {
              regex = regex.replaceAll(key, value);
            }
            return new RegExp(regex, "gu");
          } else if (pattern.String !== void 0) {
            const escaped = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(pattern.String);
            return new RegExp(invert ? escaped : `(${escaped})`, "gu");
          } else {
            console.warn("Unknown pattern type:", pattern);
            return null;
          }
        }
        function objectToMap(obj) {
          return new Map(Object.entries(obj));
        }
        function prepareTensorForDecode(tensor) {
          const dims = tensor.dims;
          switch (dims.length) {
            case 1:
              return tensor.tolist();
            case 2:
              if (dims[0] !== 1) {
                throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");
              }
              return tensor.tolist()[0];
            default:
              throw new Error(`Expected tensor to have 1-2 dimensions, got ${dims.length}.`);
          }
        }
        function clean_up_tokenization(text) {
          return text.replace(/ \./g, ".").replace(/ \?/g, "?").replace(/ \!/g, "!").replace(/ ,/g, ",").replace(/ \' /g, "'").replace(/ n\'t/g, "n't").replace(/ \'m/g, "'m").replace(/ \'s/g, "'s").replace(/ \'ve/g, "'ve").replace(/ \'re/g, "'re");
        }
        function remove_accents(text) {
          return text.replace(new RegExp("\\p{M}", "gu"), "");
        }
        function lowercase_and_remove_accent(text) {
          return remove_accents(text.toLowerCase());
        }
        function is_chinese_char(cp) {
          return cp >= 19968 && cp <= 40959 || cp >= 13312 && cp <= 19903 || cp >= 131072 && cp <= 173791 || cp >= 173824 && cp <= 177983 || cp >= 177984 && cp <= 178207 || cp >= 178208 && cp <= 183983 || cp >= 63744 && cp <= 64255 || cp >= 194560 && cp <= 195103;
        }
        function fuse_unk(arr, tokens_to_ids, unk_token_id) {
          const fused = [];
          let i = 0;
          while (i < arr.length) {
            fused.push(arr[i]);
            if ((tokens_to_ids.get(arr[i]) ?? unk_token_id) !== unk_token_id) {
              ++i;
              continue;
            }
            while (++i < arr.length && (tokens_to_ids.get(arr[i]) ?? unk_token_id) === unk_token_id) {
              if (tokens_to_ids.get(fused.at(-1)) !== unk_token_id) {
                fused[fused.length - 1] += arr[i];
              }
            }
          }
          return fused;
        }
        function whitespace_split(text) {
          return text.match(/\S+/g) || [];
        }
        const PUNCTUATION_REGEX = "\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E";
        const PUNCTUATION_ONLY_REGEX = new RegExp(`^[${PUNCTUATION_REGEX}]+$`, "gu");
        const BLOOM_SPLIT_CHARS = ".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C";
        const PROBLEMATIC_REGEX_MAP = /* @__PURE__ */ new Map([
          // This uses the case insensitive group modifier, which is not supported in JavaScript.
          // When parsing the regex, an "Invalid group" error is thrown.
          ["(?i:'s|'t|'re|'ve|'m|'ll|'d)", "(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],
          // Used to override the default (invalid) regex of the bloom pretokenizer.
          // For more information, see https://github.com/huggingface/transformers.js/issues/94
          [` ?[^(\\s|[${BLOOM_SPLIT_CHARS}])]+`, ` ?[^\\s${BLOOM_SPLIT_CHARS}]+`]
        ]);
        class AddedToken {
          /**
           * Creates a new instance of AddedToken.
           * @param {Object} config Added token configuration object.
           * @param {string} config.content The content of the added token.
           * @param {number} config.id The id of the added token.
           * @param {boolean} [config.single_word=false] Whether this token must be a single word or can break words.
           * @param {boolean} [config.lstrip=false] Whether this token should strip whitespaces on its left.
           * @param {boolean} [config.rstrip=false] Whether this token should strip whitespaces on its right.
           * @param {boolean} [config.normalized=false] Whether this token should be normalized.
           * @param {boolean} [config.special=false] Whether this token is special.
           */
          constructor(config2) {
            this.content = config2.content;
            this.id = config2.id;
            this.single_word = config2.single_word ?? false;
            this.lstrip = config2.lstrip ?? false;
            this.rstrip = config2.rstrip ?? false;
            this.special = config2.special ?? false;
            this.normalized = config2.normalized ?? null;
          }
        }
        class TokenizerModel extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * Creates a new instance of TokenizerModel.
           * @param {Object} config The configuration object for the TokenizerModel.
           */
          constructor(config2) {
            super();
            this.config = config2;
            this.vocab = [];
            this.tokens_to_ids = /* @__PURE__ */ new Map();
            this.unk_token_id = void 0;
            this.unk_token = void 0;
            this.end_of_word_suffix = void 0;
            this.fuse_unk = this.config.fuse_unk ?? false;
          }
          /**
           * Instantiates a new TokenizerModel instance based on the configuration object provided.
           * @param {Object} config The configuration object for the TokenizerModel.
           * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.
           * @returns {TokenizerModel} A new instance of a TokenizerModel.
           * @throws Will throw an error if the TokenizerModel type in the config is not recognized.
           */
          static fromConfig(config2, ...args) {
            switch (config2.type) {
              case "WordPiece":
                return new WordPieceTokenizer(config2);
              case "Unigram":
                return new Unigram(config2, ...args);
              case "BPE":
                return new BPE(config2);
              default:
                if (config2.vocab) {
                  if (Array.isArray(config2.vocab)) {
                    return new Unigram(config2, ...args);
                  } else {
                    return new LegacyTokenizerModel(config2, ...args);
                  }
                }
                throw new Error(`Unknown TokenizerModel type: ${config2.type}`);
            }
          }
          /**
           * Internal function to call the TokenizerModel instance.
           * @param {string[]} tokens The tokens to encode.
           * @returns {string[]} The encoded tokens.
           */
          _call(tokens) {
            tokens = this.encode(tokens);
            if (this.fuse_unk) {
              tokens = fuse_unk(tokens, this.tokens_to_ids, this.unk_token_id);
            }
            return tokens;
          }
          /**
           * Encodes a list of tokens into a list of token IDs.
           * @param {string[]} tokens The tokens to encode.
           * @returns {string[]} The encoded tokens.
           * @throws Will throw an error if not implemented in a subclass.
           */
          encode(tokens) {
            throw Error("encode should be implemented in subclass.");
          }
          /**
           * Converts a list of tokens into a list of token IDs.
           * @param {string[]} tokens The tokens to convert.
           * @returns {number[]} The converted token IDs.
           */
          convert_tokens_to_ids(tokens) {
            return tokens.map((t) => this.tokens_to_ids.get(t) ?? this.unk_token_id);
          }
          /**
           * Converts a list of token IDs into a list of tokens.
           * @param {number[]|bigint[]} ids The token IDs to convert.
           * @returns {string[]} The converted tokens.
           */
          convert_ids_to_tokens(ids) {
            return ids.map((i) => this.vocab[i] ?? this.unk_token);
          }
        }
        class WordPieceTokenizer extends TokenizerModel {
          /**
           * @param {Object} config The configuration object.
           * @param {Object} config.vocab A mapping of tokens to ids.
           * @param {string} config.unk_token The unknown token string.
           * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.
           * @param {number} [config.max_input_chars_per_word=100] The maximum number of characters per word.
           */
          constructor(config2) {
            super(config2);
            this.tokens_to_ids = objectToMap(config2.vocab);
            this.unk_token_id = this.tokens_to_ids.get(config2.unk_token);
            this.unk_token = config2.unk_token;
            this.max_input_chars_per_word = config2.max_input_chars_per_word ?? 100;
            this.vocab = new Array(this.tokens_to_ids.size);
            for (const [key, value] of this.tokens_to_ids) {
              this.vocab[value] = key;
            }
          }
          /**
           * Encodes an array of tokens using WordPiece encoding.
           * @param {string[]} tokens The tokens to encode.
           * @returns {string[]} An array of encoded tokens.
           */
          encode(tokens) {
            const outputTokens = [];
            for (const token of tokens) {
              const chars = [...token];
              if (chars.length > this.max_input_chars_per_word) {
                outputTokens.push(this.unk_token);
                continue;
              }
              let isUnknown = false;
              let start = 0;
              const subTokens = [];
              while (start < chars.length) {
                let end = chars.length;
                let currentSubstring = null;
                while (start < end) {
                  let substr = chars.slice(start, end).join("");
                  if (start > 0) {
                    substr = this.config.continuing_subword_prefix + substr;
                  }
                  if (this.tokens_to_ids.has(substr)) {
                    currentSubstring = substr;
                    break;
                  }
                  --end;
                }
                if (currentSubstring === null) {
                  isUnknown = true;
                  break;
                }
                subTokens.push(currentSubstring);
                start = end;
              }
              if (isUnknown) {
                outputTokens.push(this.unk_token);
              } else {
                outputTokens.push(...subTokens);
              }
            }
            return outputTokens;
          }
        }
        class Unigram extends TokenizerModel {
          /**
           * Create a new Unigram tokenizer model.
           * @param {Object} config The configuration object for the Unigram model.
           * @param {number} config.unk_id The ID of the unknown token
           * @param {any[][]} config.vocab A 2D array representing a mapping of tokens to scores.
           * @param {Object} moreConfig Additional configuration object for the Unigram model.
           */
          constructor(config2, moreConfig) {
            super(config2);
            const vocabSize = config2.vocab.length;
            this.vocab = new Array(vocabSize);
            this.scores = new Array(vocabSize);
            for (let i = 0; i < vocabSize; ++i) {
              const piece = config2.vocab[i];
              this.vocab[i] = piece[0];
              this.scores[i] = piece[1];
            }
            this.unk_token_id = config2.unk_id;
            this.unk_token = this.vocab[config2.unk_id];
            this.tokens_to_ids = new Map(this.vocab.map((x, i) => [x, i]));
            this.bos_token = " ";
            this.bos_token_id = this.tokens_to_ids.get(this.bos_token);
            this.eos_token = moreConfig.eos_token;
            this.eos_token_id = this.tokens_to_ids.get(this.eos_token);
            this.unk_token = this.vocab[this.unk_token_id];
            this.minScore = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.min)(this.scores)[0];
            this.unk_score = this.minScore - 10;
            this.scores[this.unk_token_id] = this.unk_score;
            this.trie = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.CharTrie();
            this.trie.extend(this.vocab);
            this.fuse_unk = true;
          }
          /**
           * Populates lattice nodes.
           * @param {TokenLattice} lattice The token lattice to populate with nodes.
           */
          populateNodes(lattice) {
            const chars = lattice.chars;
            const mblen = 1;
            let beginPos = 0;
            while (beginPos < chars.length) {
              let hasSingleNode = false;
              const tokens = [];
              const sliced = chars.slice(beginPos).join("");
              const prefixedTokens = this.trie.commonPrefixSearch(sliced);
              for (const token of prefixedTokens) {
                tokens.push(token);
                const tokenId = this.tokens_to_ids.get(token);
                const tokenScore = this.scores[tokenId];
                const n = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.len)(token);
                lattice.insert(beginPos, n, tokenScore, tokenId);
                if (!hasSingleNode && n === mblen) {
                  hasSingleNode = true;
                }
              }
              if (!hasSingleNode) {
                lattice.insert(beginPos, mblen, this.unk_score, this.unk_token_id);
              }
              beginPos += mblen;
            }
          }
          /**
           * Encodes an array of tokens into an array of subtokens using the unigram model.
           *
           * @param {string} normalized The normalized string.
           * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.
           */
          tokenize(normalized) {
            const lattice = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.TokenLattice(normalized, this.bos_token_id, this.eos_token_id);
            this.populateNodes(lattice);
            return lattice.tokens();
          }
          /**
           * Encodes an array of tokens using Unigram encoding.
           * @param {string[]} tokens The tokens to encode.
           * @returns {string[]} An array of encoded tokens.
           */
          encode(tokens) {
            const toReturn = [];
            for (const token of tokens) {
              const tokenized = this.tokenize(token);
              toReturn.push(...tokenized);
            }
            return toReturn;
          }
        }
        const BYTES_TO_UNICODE = (() => {
          const bs = [
            ...Array.from({ length: "~".charCodeAt(0) - "!".charCodeAt(0) + 1 }, (_, i) => i + "!".charCodeAt(0)),
            ...Array.from({ length: "\xAC".charCodeAt(0) - "\xA1".charCodeAt(0) + 1 }, (_, i) => i + "\xA1".charCodeAt(0)),
            ...Array.from({ length: "\xFF".charCodeAt(0) - "\xAE".charCodeAt(0) + 1 }, (_, i) => i + "\xAE".charCodeAt(0))
          ];
          const cs = bs.slice();
          let n = 0;
          for (let b = 0; b < 256; ++b) {
            if (!bs.includes(b)) {
              bs.push(b);
              cs.push(256 + n);
              n += 1;
            }
          }
          const ccs = cs.map((n2) => String.fromCharCode(n2));
          return Object.fromEntries(bs.map((b, i) => [b, ccs[i]]));
        })();
        const UNICODE_TO_BYTES = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.reverseDictionary)(BYTES_TO_UNICODE);
        class BPE extends TokenizerModel {
          /**
           * Create a BPE instance.
           * @param {Object} config The configuration object for BPE.
           * @param {Object} config.vocab A mapping of tokens to ids.
           * @param {string[]|[string, string][]} config.merges An array of BPE merges as strings.
           * @param {string} config.unk_token The unknown token used for out of vocabulary words.
           * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.
           * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.
           * @param {boolean} [config.byte_fallback=false] Whether to use spm byte-fallback trick (defaults to False)
           * @param {boolean} [config.ignore_merges=false] Whether or not to match tokens with the vocab before using merges.
           */
          constructor(config2) {
            super(config2);
            this.tokens_to_ids = objectToMap(config2.vocab);
            this.unk_token_id = this.tokens_to_ids.get(config2.unk_token);
            this.unk_token = config2.unk_token;
            this.vocab = new Array(this.tokens_to_ids.size);
            for (const [key, value] of this.tokens_to_ids) {
              this.vocab[value] = key;
            }
            const use_new_merge_format = Array.isArray(config2.merges[0]);
            this.merges = use_new_merge_format ? (
              /** @type {[string, string][]} */
              config2.merges
            ) : (
              /** @type {string[]} */
              config2.merges.map((x) => (
                /** @type {[string, string]} */
                x.split(" ", 2)
              ))
            );
            this.bpe_ranks = new Map(this.merges.map((x, i) => [JSON.stringify(x), i]));
            this.end_of_word_suffix = config2.end_of_word_suffix;
            this.continuing_subword_suffix = config2.continuing_subword_suffix ?? null;
            this.byte_fallback = this.config.byte_fallback ?? false;
            if (this.byte_fallback) {
              this.text_encoder = new TextEncoder();
            }
            this.ignore_merges = this.config.ignore_merges ?? false;
            this.cache = /* @__PURE__ */ new Map();
          }
          /**
           * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority
           * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.
           * @param {string} token The token to encode.
           * @returns {string[]} The BPE encoded tokens.
           */
          bpe(token) {
            if (token.length === 0) {
              return [];
            }
            const cached = this.cache.get(token);
            if (cached !== void 0) {
              return cached;
            }
            const word = Array.from(token);
            if (this.end_of_word_suffix) {
              word[word.length - 1] += this.end_of_word_suffix;
            }
            let result = [];
            if (word.length > 1) {
              const queue = new _utils_data_structures_js__WEBPACK_IMPORTED_MODULE_5__.PriorityQueue((a, b) => a.score < b.score);
              let startingNode = {
                token: word[0],
                bias: 0,
                prev: null,
                next: null
              };
              let previousNode = startingNode;
              for (let i = 1; i < word.length; ++i) {
                const currentNode = {
                  bias: i / word.length,
                  // Add fractional component to break ties
                  token: word[i],
                  prev: previousNode,
                  next: null
                };
                previousNode.next = currentNode;
                this._add_node(queue, previousNode);
                previousNode = currentNode;
              }
              while (!queue.isEmpty()) {
                const node = queue.pop();
                if (node.deleted || !node.next || node.next.deleted) continue;
                node.deleted = true;
                node.next.deleted = true;
                if (node.prev) {
                  const newPreviousNode = { ...node.prev };
                  node.prev.deleted = true;
                  node.prev = newPreviousNode;
                  if (newPreviousNode.prev) {
                    newPreviousNode.prev.next = newPreviousNode;
                  } else {
                    startingNode = newPreviousNode;
                  }
                }
                const merged = {
                  token: node.token + node.next.token,
                  bias: node.bias,
                  prev: node.prev,
                  next: node.next.next
                };
                if (merged.prev) {
                  merged.prev.next = merged;
                  this._add_node(queue, merged.prev);
                } else {
                  startingNode = merged;
                }
                if (merged.next) {
                  merged.next.prev = merged;
                  this._add_node(queue, merged);
                }
              }
              for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {
                result.push(currentNode.token);
              }
            } else {
              result = word;
            }
            if (this.continuing_subword_suffix) {
              for (let i = 0; i < result.length - 1; ++i) {
                result[i] += this.continuing_subword_suffix;
              }
            }
            this.cache.set(token, result);
            return result;
          }
          /**
           * Helper function to add a node to the priority queue.
           * @param {PriorityQueue} queue 
           * @param {BPENode} node
           * @private
           */
          _add_node(queue, node) {
            const rank = this.bpe_ranks.get(JSON.stringify([node.token, node.next.token]));
            if (rank !== void 0) {
              node.score = rank + node.bias;
              queue.push(node);
            }
          }
          /**
           * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.
           * @param {string[]} tokens The input sequence of tokens to encode.
           * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.
           */
          encode(tokens) {
            const outputTokens = [];
            for (const token of tokens) {
              if (this.ignore_merges && this.tokens_to_ids.has(token)) {
                outputTokens.push(token);
                continue;
              }
              const bpe_token_list = this.bpe(token);
              for (const t of bpe_token_list) {
                if (this.tokens_to_ids.has(t)) {
                  outputTokens.push(t);
                } else if (this.byte_fallback) {
                  const byteTokens = Array.from(this.text_encoder.encode(t)).map((x) => `<0x${x.toString(16).toUpperCase().padStart(2, "0")}>`);
                  if (byteTokens.every((x) => this.tokens_to_ids.has(x))) {
                    outputTokens.push(...byteTokens);
                  } else {
                    outputTokens.push(this.unk_token);
                  }
                } else {
                  outputTokens.push(this.unk_token);
                }
              }
            }
            return outputTokens;
          }
        }
        class LegacyTokenizerModel extends TokenizerModel {
          /**
           * Create a LegacyTokenizerModel instance.
           * @param {Object} config The configuration object for LegacyTokenizerModel.
           * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.
           * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.
           */
          constructor(config2, moreConfig) {
            super(config2);
            this.tokens_to_ids = objectToMap(
              moreConfig.target_lang ? config2.vocab[moreConfig.target_lang] : config2.vocab
            );
            this.bos_token = moreConfig.bos_token;
            this.bos_token_id = this.tokens_to_ids.get(this.bos_token);
            this.eos_token = moreConfig.eos_token;
            this.eos_token_id = this.tokens_to_ids.get(this.eos_token);
            this.pad_token = moreConfig.pad_token;
            this.pad_token_id = this.tokens_to_ids.get(this.pad_token);
            this.unk_token = moreConfig.unk_token;
            this.unk_token_id = this.tokens_to_ids.get(this.unk_token);
            this.vocab = new Array(this.tokens_to_ids.size);
            for (const [key, value] of this.tokens_to_ids) {
              this.vocab[value] = key;
            }
          }
          encode(tokens) {
            return tokens;
          }
        }
        class Normalizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * @param {Object} config The configuration object for the normalizer.
           */
          constructor(config2) {
            super();
            this.config = config2;
          }
          /**
           * Factory method for creating normalizers from config objects.
           * @static
           * @param {Object} config The configuration object for the normalizer.
           * @returns {Normalizer} A Normalizer object.
           * @throws {Error} If an unknown Normalizer type is specified in the config.
           */
          static fromConfig(config2) {
            if (config2 === null) return null;
            switch (config2.type) {
              case "BertNormalizer":
                return new BertNormalizer(config2);
              case "Precompiled":
                return new Precompiled(config2);
              case "Sequence":
                return new NormalizerSequence(config2);
              case "Replace":
                return new Replace(config2);
              case "NFC":
                return new NFC(config2);
              case "NFKC":
                return new NFKC(config2);
              case "NFKD":
                return new NFKD(config2);
              case "Strip":
                return new StripNormalizer(config2);
              case "StripAccents":
                return new StripAccents(config2);
              case "Lowercase":
                return new Lowercase(config2);
              case "Prepend":
                return new Prepend(config2);
              default:
                throw new Error(`Unknown Normalizer type: ${config2.type}`);
            }
          }
          /**
           * Normalize the input text.
           * @abstract
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           * @throws {Error} If this method is not implemented in a subclass.
           */
          normalize(text) {
            throw Error("normalize should be implemented in subclass.");
          }
          /**
           * Alias for {@link Normalizer#normalize}.
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           */
          _call(text) {
            return this.normalize(text);
          }
        }
        class Replace extends Normalizer {
          /**
           * Normalize the input text by replacing the pattern with the content.
           * @param {string} text The input text to be normalized.
           * @returns {string} The normalized text after replacing the pattern with the content.
           */
          normalize(text) {
            const pattern = createPattern(this.config.pattern);
            return pattern === null ? text : text.replaceAll(pattern, this.config.content);
          }
        }
        class NFC extends Normalizer {
          /**
           * Normalize the input text by applying Unicode normalization form C (NFC).
           * @param {string} text The input text to be normalized.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = text.normalize("NFC");
            return text;
          }
        }
        class NFKC extends Normalizer {
          /**
           * Normalize text using NFKC normalization.
           * @param {string} text The text to be normalized.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = text.normalize("NFKC");
            return text;
          }
        }
        class NFKD extends Normalizer {
          /**
           * Normalize text using NFKD normalization.
           * @param {string} text The text to be normalized.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = text.normalize("NFKD");
            return text;
          }
        }
        class StripNormalizer extends Normalizer {
          /**
           * Strip leading and/or trailing whitespace from the input text.
           * @param {string} text The input text.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            if (this.config.strip_left && this.config.strip_right) {
              text = text.trim();
            } else {
              if (this.config.strip_left) {
                text = text.trimStart();
              }
              if (this.config.strip_right) {
                text = text.trimEnd();
              }
            }
            return text;
          }
        }
        class StripAccents extends Normalizer {
          /**
           * Remove all accents from the text.
           * @param {string} text The input text.
           * @returns {string} The normalized text without accents.
           */
          normalize(text) {
            text = remove_accents(text);
            return text;
          }
        }
        class Lowercase extends Normalizer {
          /**
           * Lowercases the input string.
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = text.toLowerCase();
            return text;
          }
        }
        class Prepend extends Normalizer {
          /**
           * Prepends the input string.
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = this.config.prepend + text;
            return text;
          }
        }
        class NormalizerSequence extends Normalizer {
          /**
          * Create a new instance of NormalizerSequence.
          * @param {Object} config The configuration object.
          * @param {Object[]} config.normalizers An array of Normalizer configuration objects.
          */
          constructor(config2) {
            super(config2);
            this.normalizers = config2.normalizers.map((x) => Normalizer.fromConfig(x));
          }
          /**
          * Apply a sequence of Normalizers to the input text.
          * @param {string} text The text to normalize.
          * @returns {string} The normalized text.
          */
          normalize(text) {
            return this.normalizers.reduce((t, normalizer) => {
              return normalizer.normalize(t);
            }, text);
          }
        }
        class BertNormalizer extends Normalizer {
          /**
           * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.
           *
           * @param {string} text The input text to tokenize.
           * @returns {string} The tokenized text with whitespace added around CJK characters.
           */
          _tokenize_chinese_chars(text) {
            const output = [];
            for (let i = 0; i < text.length; ++i) {
              const char = text[i];
              const cp = char.charCodeAt(0);
              if (is_chinese_char(cp)) {
                output.push(" ");
                output.push(char);
                output.push(" ");
              } else {
                output.push(char);
              }
            }
            return output.join("");
          }
          /**
           * Strips accents from the given text.
           * @param {string} text The text to strip accents from.
           * @returns {string} The text with accents removed.
           */
          stripAccents(text) {
            return text.normalize("NFD").replace(new RegExp("\\p{Mn}", "gu"), "");
          }
          /**
           * Checks whether `char` is a control character.
           * @param {string} char The character to check.
           * @returns {boolean} Whether `char` is a control character.
           * @private
           */
          _is_control(char) {
            switch (char) {
              case "	":
              case "\n":
              case "\r":
                return false;
              default:
                return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$", "u").test(char);
            }
          }
          /**
           * Performs invalid character removal and whitespace cleanup on text.
           * @param {string} text The text to clean.
           * @returns {string} The cleaned text.
           * @private
           */
          _clean_text(text) {
            const output = [];
            for (const char of text) {
              const cp = char.charCodeAt(0);
              if (cp === 0 || cp === 65533 || this._is_control(char)) {
                continue;
              }
              if (/^\s$/.test(char)) {
                output.push(" ");
              } else {
                output.push(char);
              }
            }
            return output.join("");
          }
          /**
           * Normalizes the given text based on the configuration.
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            if (this.config.clean_text) {
              text = this._clean_text(text);
            }
            if (this.config.handle_chinese_chars) {
              text = this._tokenize_chinese_chars(text);
            }
            if (this.config.lowercase) {
              text = text.toLowerCase();
              if (this.config.strip_accents !== false) {
                text = this.stripAccents(text);
              }
            } else if (this.config.strip_accents) {
              text = this.stripAccents(text);
            }
            return text;
          }
        }
        class PreTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
          * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.
          *
          * @static
          * @param {Object} config A configuration object for the pre-tokenizer.
          * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.
          * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.
          */
          static fromConfig(config2) {
            if (config2 === null) return null;
            switch (config2.type) {
              case "BertPreTokenizer":
                return new BertPreTokenizer(config2);
              case "Sequence":
                return new PreTokenizerSequence(config2);
              case "Whitespace":
                return new WhitespacePreTokenizer(config2);
              case "WhitespaceSplit":
                return new WhitespaceSplit(config2);
              case "Metaspace":
                return new MetaspacePreTokenizer(config2);
              case "ByteLevel":
                return new ByteLevelPreTokenizer(config2);
              case "Split":
                return new SplitPreTokenizer(config2);
              case "Punctuation":
                return new PunctuationPreTokenizer(config2);
              case "Digits":
                return new DigitsPreTokenizer(config2);
              case "Replace":
                return new ReplacePreTokenizer(config2);
              default:
                throw new Error(`Unknown PreTokenizer type: ${config2.type}`);
            }
          }
          /**
           * Method that should be implemented by subclasses to define the specific pre-tokenization logic.
           *
           * @abstract
           * @param {string} text The text to pre-tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} The pre-tokenized text.
           * @throws {Error} If the method is not implemented in the subclass.
           */
          pre_tokenize_text(text, options2) {
            throw Error("pre_tokenize_text should be implemented in subclass.");
          }
          /**
           * Tokenizes the given text into pre-tokens.
           * @param {string|string[]} text The text or array of texts to pre-tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of pre-tokens.
           */
          pre_tokenize(text, options2) {
            return (Array.isArray(text) ? text.map((x) => this.pre_tokenize_text(x, options2)) : this.pre_tokenize_text(text, options2)).flat();
          }
          /**
           * Alias for {@link PreTokenizer#pre_tokenize}.
           * @param {string|string[]} text The text or array of texts to pre-tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of pre-tokens.
           */
          _call(text, options2) {
            return this.pre_tokenize(text, options2);
          }
        }
        class BertPreTokenizer extends PreTokenizer {
          /**
           * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme
           * similar to that used in the original implementation of BERT.
           * 
           * @param {Object} config The configuration object.
           */
          constructor(config2) {
            super();
            this.pattern = new RegExp(`[^\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, "gu");
          }
          /**
           * Tokenizes a single text using the BERT pre-tokenization scheme.
           * 
           * @param {string} text The text to tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens.
           */
          pre_tokenize_text(text, options2) {
            return text.trim().match(this.pattern) || [];
          }
        }
        class ByteLevelPreTokenizer extends PreTokenizer {
          /**
           * Creates a new instance of the `ByteLevelPreTokenizer` class.
           * @param {Object} config The configuration object.
           */
          constructor(config2) {
            super();
            this.config = config2;
            this.add_prefix_space = this.config.add_prefix_space;
            this.trim_offsets = this.config.trim_offsets;
            this.use_regex = this.config.use_regex ?? true;
            this.pattern = new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+", "gu");
            this.byte_encoder = BYTES_TO_UNICODE;
            this.text_encoder = new TextEncoder();
          }
          /**
           * Tokenizes a single piece of text using byte-level tokenization.
           * @param {string} text The text to tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens.
           */
          pre_tokenize_text(text, options2) {
            if (this.add_prefix_space && !text.startsWith(" ")) {
              text = " " + text;
            }
            const tokens = this.use_regex ? text.match(this.pattern) || [] : [text];
            return tokens.map(
              (token) => Array.from(this.text_encoder.encode(token), (byte) => this.byte_encoder[byte]).join("")
            );
          }
        }
        class SplitPreTokenizer extends PreTokenizer {
          /**
           * @param {Object} config The configuration options for the pre-tokenizer.
           * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
           * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.
           * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.
           * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
           * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.
           */
          constructor(config2) {
            super();
            this.config = config2;
            this.pattern = createPattern(this.config.pattern, this.config.invert);
          }
          /**
           * Tokenizes text by splitting it using the given pattern.
           * @param {string} text The text to tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens.
           */
          pre_tokenize_text(text, options2) {
            if (this.pattern === null) {
              return [];
            }
            if (this.config.invert) {
              return text.match(this.pattern) || [];
            } else {
              return regexSplit(text, this.pattern);
            }
          }
        }
        class PunctuationPreTokenizer extends PreTokenizer {
          /**
           * @param {Object} config The configuration options for the pre-tokenizer.
           * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.
           */
          constructor(config2) {
            super();
            this.config = config2;
            this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, "gu");
          }
          /**
           * Tokenizes text by splitting it using the given pattern.
           * @param {string} text The text to tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens.
           */
          pre_tokenize_text(text, options2) {
            return text.match(this.pattern) || [];
          }
        }
        class DigitsPreTokenizer extends PreTokenizer {
          /**
           * @param {Object} config The configuration options for the pre-tokenizer.
           * @param {boolean} config.individual_digits Whether to split on individual digits.
           */
          constructor(config2) {
            super();
            this.config = config2;
            const digit_pattern = `[^\\d]+|\\d${this.config.individual_digits ? "" : "+"}`;
            this.pattern = new RegExp(digit_pattern, "gu");
          }
          /**
           * Tokenizes text by splitting it using the given pattern.
           * @param {string} text The text to tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens.
           */
          pre_tokenize_text(text, options2) {
            return text.match(this.pattern) || [];
          }
        }
        class PostProcessor extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
           * @param {Object} config The configuration for the post-processor.
           */
          constructor(config2) {
            super();
            this.config = config2;
          }
          /**
           * Factory method to create a PostProcessor object from a configuration object.
           *
           * @param {Object} config Configuration object representing a PostProcessor.
           * @returns {PostProcessor} A PostProcessor object created from the given configuration.
           * @throws {Error} If an unknown PostProcessor type is encountered.
           */
          static fromConfig(config2) {
            if (config2 === null) return null;
            switch (config2.type) {
              case "TemplateProcessing":
                return new TemplateProcessing(config2);
              case "ByteLevel":
                return new ByteLevelPostProcessor(config2);
              case "RobertaProcessing":
                return new RobertaProcessing(config2);
              case "BertProcessing":
                return new BertProcessing(config2);
              case "Sequence":
                return new PostProcessorSequence(config2);
              default:
                throw new Error(`Unknown PostProcessor type: ${config2.type}`);
            }
          }
          /**
           * Method to be implemented in subclass to apply post-processing on the given tokens.
           *
           * @param {Array} tokens The input tokens to be post-processed.
           * @param {...*} args Additional arguments required by the post-processing logic.
           * @returns {PostProcessedOutput} The post-processed tokens.
           * @throws {Error} If the method is not implemented in subclass.
           */
          post_process(tokens, ...args) {
            throw Error("post_process should be implemented in subclass.");
          }
          /**
           * Alias for {@link PostProcessor#post_process}.
           * @param {Array} tokens The text or array of texts to post-process.
           * @param {...*} args Additional arguments required by the post-processing logic.
           * @returns {PostProcessedOutput} The post-processed tokens.
           */
          _call(tokens, ...args) {
            return this.post_process(tokens, ...args);
          }
        }
        class BertProcessing extends PostProcessor {
          /**
           * @param {Object} config The configuration for the post-processor.
           * @param {string[]} config.cls The special tokens to add to the beginning of the input.
           * @param {string[]} config.sep The special tokens to add to the end of the input.
           */
          constructor(config2) {
            super(config2);
            this.cls = config2.cls[0];
            this.sep = config2.sep[0];
          }
          /**
           * Adds the special tokens to the beginning and end of the input.
           * @param {string[]} tokens The input tokens.
           * @param {string[]} [tokens_pair=null] An optional second set of input tokens.
           * @returns {PostProcessedOutput} The post-processed tokens with the special tokens added to the beginning and end.
           */
          post_process(tokens, tokens_pair = null, {
            add_special_tokens = true
          } = {}) {
            if (add_special_tokens) {
              tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([this.cls], tokens, [this.sep]);
            }
            let token_type_ids = new Array(tokens.length).fill(0);
            if (tokens_pair !== null) {
              const middle = add_special_tokens && this instanceof RobertaProcessing ? [this.sep] : [];
              const after = add_special_tokens ? [this.sep] : [];
              tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, middle, tokens_pair, after);
              token_type_ids = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(token_type_ids, new Array(tokens_pair.length + middle.length + after.length).fill(1));
            }
            return { tokens, token_type_ids };
          }
        }
        class RobertaProcessing extends BertProcessing {
        }
        class TemplateProcessing extends PostProcessor {
          /**
           * Creates a new instance of `TemplateProcessing`.
           * @param {Object} config The configuration options for the post processor.
           * @param {Array} config.single The template for a single sequence of tokens.
           * @param {Array} config.pair The template for a pair of sequences of tokens.
           */
          constructor(config2) {
            super(config2);
            this.single = config2.single;
            this.pair = config2.pair;
          }
          /**
           * Replaces special tokens in the template with actual tokens.
           * @param {string[]} tokens The list of tokens for the first sequence.
           * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
           * @returns {PostProcessedOutput} An object containing the list of tokens with the special tokens replaced with actual tokens.
           */
          post_process(tokens, tokens_pair = null, {
            add_special_tokens = true
          } = {}) {
            const type = tokens_pair === null ? this.single : this.pair;
            let processedTokens = [];
            let types = [];
            for (const item of type) {
              if ("SpecialToken" in item) {
                if (add_special_tokens) {
                  processedTokens.push(item.SpecialToken.id);
                  types.push(item.SpecialToken.type_id);
                }
              } else if ("Sequence" in item) {
                if (item.Sequence.id === "A") {
                  processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens);
                  types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens.length).fill(item.Sequence.type_id));
                } else if (item.Sequence.id === "B") {
                  processedTokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(processedTokens, tokens_pair);
                  types = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(types, new Array(tokens_pair.length).fill(item.Sequence.type_id));
                }
              }
            }
            return { tokens: processedTokens, token_type_ids: types };
          }
        }
        class ByteLevelPostProcessor extends PostProcessor {
          /**
           * Post process the given tokens.
           * @param {string[]} tokens The list of tokens for the first sequence.
           * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
           * @returns {PostProcessedOutput} An object containing the post-processed tokens.
           */
          post_process(tokens, tokens_pair = null) {
            if (tokens_pair) {
              tokens = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens, tokens_pair);
            }
            return { tokens };
          }
        }
        class PostProcessorSequence extends PostProcessor {
          /**
           * Creates a new instance of PostProcessorSequence.
           * @param {Object} config The configuration object.
           * @param {Object[]} config.processors The list of post-processors to apply.
           */
          constructor(config2) {
            super(config2);
            this.processors = config2.processors.map((x) => PostProcessor.fromConfig(x));
          }
          /**
           * Post process the given tokens.
           * @param {string[]} tokens The list of tokens for the first sequence.
           * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).
           * @returns {PostProcessedOutput} An object containing the post-processed tokens.
           */
          post_process(tokens, tokens_pair = null, options2 = {}) {
            let token_type_ids;
            for (const processor of this.processors) {
              if (processor instanceof ByteLevelPostProcessor) {
                const output = processor.post_process(tokens);
                tokens = output.tokens;
                if (tokens_pair) {
                  const pair_output = processor.post_process(tokens_pair);
                  tokens_pair = pair_output.tokens;
                }
              } else {
                const output = processor.post_process(tokens, tokens_pair, options2);
                tokens = output.tokens;
                token_type_ids = output.token_type_ids;
              }
            }
            return { tokens, token_type_ids };
          }
        }
        class Decoder extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          /**
          * Creates an instance of `Decoder`.
          *
          * @param {Object} config The configuration object.
          */
          constructor(config2) {
            super();
            this.config = config2;
            this.added_tokens = [];
            this.end_of_word_suffix = null;
            this.trim_offsets = config2.trim_offsets;
          }
          /**
          * Creates a decoder instance based on the provided configuration.
          *
          * @param {Object} config The configuration object.
          * @returns {Decoder} A decoder instance.
          * @throws {Error} If an unknown decoder type is provided.
          */
          static fromConfig(config2) {
            if (config2 === null) return null;
            switch (config2.type) {
              case "WordPiece":
                return new WordPieceDecoder(config2);
              case "Metaspace":
                return new MetaspaceDecoder(config2);
              case "ByteLevel":
                return new ByteLevelDecoder(config2);
              case "Replace":
                return new ReplaceDecoder(config2);
              case "ByteFallback":
                return new ByteFallback(config2);
              case "Fuse":
                return new FuseDecoder(config2);
              case "Strip":
                return new StripDecoder(config2);
              case "Sequence":
                return new DecoderSequence(config2);
              case "CTC":
                return new CTCDecoder(config2);
              case "BPEDecoder":
                return new BPEDecoder(config2);
              default:
                throw new Error(`Unknown Decoder type: ${config2.type}`);
            }
          }
          /**
          * Calls the `decode` method.
          *
          * @param {string[]} tokens The list of tokens.
          * @returns {string} The decoded string.
          */
          _call(tokens) {
            return this.decode(tokens);
          }
          /**
          * Decodes a list of tokens.
          * @param {string[]} tokens The list of tokens.
          * @returns {string} The decoded string.
          */
          decode(tokens) {
            return this.decode_chain(tokens).join("");
          }
          /**
           * Apply the decoder to a list of tokens.
           * 
           * @param {string[]} tokens The list of tokens.
           * @returns {string[]} The decoded list of tokens.
           * @throws {Error} If the `decode_chain` method is not implemented in the subclass.
           */
          decode_chain(tokens) {
            throw Error("`decode_chain` should be implemented in subclass.");
          }
        }
        class ReplaceDecoder extends Decoder {
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            const pattern = createPattern(this.config.pattern);
            return pattern === null ? tokens : tokens.map((token) => token.replaceAll(pattern, this.config.content));
          }
        }
        class ByteFallback extends Decoder {
          constructor(config2) {
            super(config2);
            this.text_decoder = new TextDecoder();
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            const new_tokens = [];
            let previous_byte_tokens = [];
            for (const token of tokens) {
              let bytes = null;
              if (token.length === 6 && token.startsWith("<0x") && token.endsWith(">")) {
                const byte = parseInt(token.slice(3, 5), 16);
                if (!isNaN(byte)) {
                  bytes = byte;
                }
              }
              if (bytes !== null) {
                previous_byte_tokens.push(bytes);
              } else {
                if (previous_byte_tokens.length > 0) {
                  const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
                  new_tokens.push(string);
                  previous_byte_tokens = [];
                }
                new_tokens.push(token);
              }
            }
            if (previous_byte_tokens.length > 0) {
              const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));
              new_tokens.push(string);
              previous_byte_tokens = [];
            }
            return new_tokens;
          }
        }
        class FuseDecoder extends Decoder {
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return [tokens.join("")];
          }
        }
        class StripDecoder extends Decoder {
          constructor(config2) {
            super(config2);
            this.content = this.config.content;
            this.start = this.config.start;
            this.stop = this.config.stop;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return tokens.map((token) => {
              let start_cut = 0;
              for (let i = 0; i < this.start; ++i) {
                if (token[i] === this.content) {
                  start_cut = i + 1;
                  continue;
                } else {
                  break;
                }
              }
              let stop_cut = token.length;
              for (let i = 0; i < this.stop; ++i) {
                const index2 = token.length - i - 1;
                if (token[index2] === this.content) {
                  stop_cut = index2;
                  continue;
                } else {
                  break;
                }
              }
              return token.slice(start_cut, stop_cut);
            });
          }
        }
        class WordPieceDecoder extends Decoder {
          /**
           * Creates a new instance of WordPieceDecoder.
           * @param {Object} config The configuration object.
           * @param {string} config.prefix The prefix used for WordPiece encoding.
           * @param {boolean} config.cleanup Whether to cleanup the decoded string.
           */
          constructor(config2) {
            super(config2);
            this.cleanup = config2.cleanup;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return tokens.map((token, i) => {
              if (i !== 0) {
                if (token.startsWith(this.config.prefix)) {
                  token = token.replace(this.config.prefix, "");
                } else {
                  token = " " + token;
                }
              }
              if (this.cleanup) {
                token = clean_up_tokenization(token);
              }
              return token;
            });
          }
        }
        class ByteLevelDecoder extends Decoder {
          /**
           * Create a `ByteLevelDecoder` object.
           * @param {Object} config Configuration object.
           */
          constructor(config2) {
            super(config2);
            this.byte_decoder = UNICODE_TO_BYTES;
            this.text_decoder = new TextDecoder("utf-8", {
              fatal: false,
              ignoreBOM: true
            });
            this.end_of_word_suffix = null;
          }
          /**
           * Convert an array of tokens to string by decoding each byte.
           * @param {string[]} tokens Array of tokens to be decoded.
           * @returns {string} The decoded string.
           */
          convert_tokens_to_string(tokens) {
            const text = tokens.join("");
            const byteArray = new Uint8Array([...text].map((c) => this.byte_decoder[c]));
            const decoded_text = this.text_decoder.decode(byteArray);
            return decoded_text;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            const sub_texts = [];
            let current_sub_text = [];
            for (const token of tokens) {
              if (this.added_tokens.find((x) => x.content === token) !== void 0) {
                if (current_sub_text.length > 0) {
                  sub_texts.push(this.convert_tokens_to_string(current_sub_text));
                  current_sub_text = [];
                }
                sub_texts.push(token);
              } else {
                current_sub_text.push(token);
              }
            }
            if (current_sub_text.length > 0) {
              sub_texts.push(this.convert_tokens_to_string(current_sub_text));
            }
            return sub_texts;
          }
        }
        class CTCDecoder extends Decoder {
          constructor(config2) {
            super(config2);
            this.pad_token = this.config.pad_token;
            this.word_delimiter_token = this.config.word_delimiter_token;
            this.cleanup = this.config.cleanup;
          }
          /**
           * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.
           * @param {string[]} tokens Array of tokens to be decoded.
           * @returns {string} The decoded string.
           */
          convert_tokens_to_string(tokens) {
            if (tokens.length === 0) return "";
            const grouped_tokens = [tokens[0]];
            for (let i = 1; i < tokens.length; ++i) {
              if (tokens[i] !== grouped_tokens.at(-1)) {
                grouped_tokens.push(tokens[i]);
              }
            }
            const filtered_tokens = grouped_tokens.filter((token) => token !== this.pad_token);
            let text = filtered_tokens.join("");
            if (this.cleanup) {
              text = clean_up_tokenization(text).replaceAll(this.word_delimiter_token, " ").trim();
            }
            return text;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return [this.convert_tokens_to_string(tokens)];
          }
        }
        class DecoderSequence extends Decoder {
          /**
           * Creates a new instance of DecoderSequence.
           * @param {Object} config The configuration object.
           * @param {Object[]} config.decoders The list of decoders to apply.
           */
          constructor(config2) {
            super(config2);
            this.decoders = config2.decoders.map((x) => Decoder.fromConfig(x));
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return this.decoders.reduce((toks, decoder) => {
              return decoder.decode_chain(toks);
            }, tokens);
          }
        }
        class BPEDecoder extends Decoder {
          constructor(config2) {
            super(config2);
            this.suffix = this.config.suffix;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            return tokens.map((token, i) => {
              return token.replaceAll(this.suffix, i === tokens.length - 1 ? "" : " ");
            });
          }
        }
        class VitsDecoder extends Decoder {
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            let decoded = "";
            for (let i = 1; i < tokens.length; i += 2) {
              decoded += tokens[i];
            }
            return [decoded];
          }
        }
        class MetaspacePreTokenizer extends PreTokenizer {
          /**
           * @param {Object} config The configuration object for the MetaspacePreTokenizer.
           * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.
           * @param {string} config.replacement The character to replace spaces with.
           * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.
           * @param {'first'|'never'|'always'} [config.prepend_scheme='always'] The metaspace prepending scheme.
           */
          constructor(config2) {
            super();
            this.addPrefixSpace = config2.add_prefix_space;
            this.replacement = config2.replacement;
            this.strRep = config2.str_rep || this.replacement;
            this.prepend_scheme = config2.prepend_scheme ?? "always";
          }
          /**
           * This method takes a string, replaces spaces with the replacement character,
           * adds a prefix space if requested, and returns a new list of tokens.
           * @param {string} text The text to pre-tokenize.
           * @param {Object} [options] The options for the pre-tokenization.
           * @param {number} [options.section_index] The index of the section to pre-tokenize.
           * @returns {string[]} A new list of pre-tokenized tokens.
           */
          pre_tokenize_text(text, {
            section_index = void 0
          } = {}) {
            let normalized = text.replaceAll(" ", this.strRep);
            if (
              // We add a prefix space if:
              //  (1) The addPrefixSpace option is enabled and the normalized
              //      token does not already start with the replacement character.
              this.addPrefixSpace && !normalized.startsWith(this.replacement) && (this.prepend_scheme === "always" || this.prepend_scheme === "first" && section_index === 0)
            ) {
              normalized = this.strRep + normalized;
            }
            return [normalized];
          }
        }
        class MetaspaceDecoder extends Decoder {
          /**
           * Constructs a new MetaspaceDecoder object.
           * @param {Object} config The configuration object for the MetaspaceDecoder.
           * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.
           * @param {string} config.replacement The string to replace spaces with.
           */
          constructor(config2) {
            super(config2);
            this.addPrefixSpace = config2.add_prefix_space;
            this.replacement = config2.replacement;
          }
          /** @type {Decoder['decode_chain']} */
          decode_chain(tokens) {
            const result = [];
            for (let i = 0; i < tokens.length; ++i) {
              let normalized = tokens[i].replaceAll(this.replacement, " ");
              if (this.addPrefixSpace && i == 0 && normalized.startsWith(" ")) {
                normalized = normalized.substring(1);
              }
              result.push(normalized);
            }
            return result;
          }
        }
        class Precompiled extends Normalizer {
          /**
           * Create a new instance of Precompiled normalizer.
           * @param {Object} config The configuration object.
           * @param {any} config.precompiled_charsmap Precompiled chars mapping.
           */
          constructor(config2) {
            super(config2);
            this.charsmap = config2.precompiled_charsmap;
          }
          /**
           * Normalizes the given text by applying the precompiled charsmap.
           * @param {string} text The text to normalize.
           * @returns {string} The normalized text.
           */
          normalize(text) {
            text = text.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm, "");
            text = text.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm, " ");
            if (text.includes("\uFF5E")) {
              const parts = text.split("\uFF5E");
              text = parts.map((part) => part.normalize("NFKC")).join("\uFF5E");
            } else {
              text = text.normalize("NFKC");
            }
            return text;
          }
        }
        class PreTokenizerSequence extends PreTokenizer {
          /**
           * Creates an instance of PreTokenizerSequence.
           * @param {Object} config The configuration object for the pre-tokenizer sequence.
           * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.
           */
          constructor(config2) {
            super();
            this.tokenizers = config2.pretokenizers.map((x) => PreTokenizer.fromConfig(x));
          }
          /**
           * Applies each pre-tokenizer in the sequence to the input text in turn.
           * @param {string} text The text to pre-tokenize.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} The pre-tokenized text.
           */
          pre_tokenize_text(text, options2) {
            return this.tokenizers.reduce((preTokenizedText, tokenizer) => {
              return tokenizer.pre_tokenize(preTokenizedText, options2);
            }, [text]);
          }
        }
        class WhitespacePreTokenizer extends PreTokenizer {
          /**
           * Creates an instance of WhitespacePreTokenizer.
           * @param {Object} config The configuration object for the pre-tokenizer.
           */
          constructor(config2) {
            super();
          }
          /**
           * Pre-tokenizes the input text by splitting it on word boundaries.
           * @param {string} text The text to be pre-tokenized.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
           */
          pre_tokenize_text(text, options2) {
            return text.match(/\w+|[^\w\s]+/g) || [];
          }
        }
        class WhitespaceSplit extends PreTokenizer {
          /**
           * Creates an instance of WhitespaceSplit.
           * @param {Object} config The configuration object for the pre-tokenizer.
           */
          constructor(config2) {
            super();
          }
          /**
           * Pre-tokenizes the input text by splitting it on whitespace characters.
           * @param {string} text The text to be pre-tokenized.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.
           */
          pre_tokenize_text(text, options2) {
            return whitespace_split(text);
          }
        }
        class ReplacePreTokenizer extends PreTokenizer {
          /**
           * @param {Object} config The configuration options for the pre-tokenizer.
           * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.
           * @param {string} config.content What to replace the pattern with.
           */
          constructor(config2) {
            super();
            this.config = config2;
            this.pattern = createPattern(this.config.pattern);
            this.content = this.config.content;
          }
          /**
           * Pre-tokenizes the input text by replacing certain characters.
           * @param {string} text The text to be pre-tokenized.
           * @param {Object} [options] Additional options for the pre-tokenization logic.
           * @returns {string[]} An array of tokens produced by replacing certain characters.
           */
          pre_tokenize_text(text, options2) {
            if (this.pattern === null) {
              return [text];
            }
            return [text.replaceAll(this.pattern, this.config.content)];
          }
        }
        const SPECIAL_TOKEN_ATTRIBUTES = [
          "bos_token",
          "eos_token",
          "unk_token",
          "sep_token",
          "pad_token",
          "cls_token",
          "mask_token"
          // additional_special_tokens (TODO)
        ];
        function padHelper(item, length, value_fn, side) {
          for (const key of Object.keys(item)) {
            const diff = length - item[key].length;
            const value = value_fn(key);
            const padData = new Array(diff).fill(value);
            item[key] = side === "right" ? (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(item[key], padData) : (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(padData, item[key]);
          }
        }
        function truncateHelper(item, length) {
          for (const key of Object.keys(item)) {
            item[key].length = length;
          }
        }
        class PreTrainedTokenizer extends _utils_generic_js__WEBPACK_IMPORTED_MODULE_0__.Callable {
          return_token_type_ids = false;
          padding_side = "right";
          /**
           * Create a new PreTrainedTokenizer instance.
           * @param {Object} tokenizerJSON The JSON of the tokenizer.
           * @param {Object} tokenizerConfig The config of the tokenizer.
           */
          constructor(tokenizerJSON, tokenizerConfig) {
            super();
            this._tokenizer_config = tokenizerConfig;
            this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);
            this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);
            this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);
            this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);
            this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);
            this.special_tokens = [];
            this.all_special_ids = [];
            this.added_tokens = [];
            for (const addedToken of tokenizerJSON.added_tokens) {
              const token = new AddedToken(addedToken);
              this.added_tokens.push(token);
              this.model.tokens_to_ids.set(token.content, token.id);
              this.model.vocab[token.id] = token.content;
              if (token.special) {
                this.special_tokens.push(token.content);
                this.all_special_ids.push(token.id);
              }
            }
            this.additional_special_tokens = tokenizerConfig.additional_special_tokens ?? [];
            this.special_tokens.push(...this.additional_special_tokens);
            this.special_tokens = [...new Set(this.special_tokens)];
            if (this.decoder) {
              this.decoder.added_tokens = this.added_tokens;
              this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;
            }
            this.added_tokens_regex = this.added_tokens.length > 0 ? new RegExp(
              this.added_tokens.slice().sort((a, b) => b.content.length - a.content.length).map((x) => `${x.lstrip ? "\\s*" : ""}(${(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(x.content)})${x.rstrip ? "\\s*" : ""}`).join("|")
            ) : null;
            this.mask_token = this.getToken("mask_token");
            this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);
            this.pad_token = this.getToken("pad_token", "eos_token");
            this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);
            this.sep_token = this.getToken("sep_token");
            this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);
            this.unk_token = this.getToken("unk_token");
            this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token);
            this.model_max_length = tokenizerConfig.model_max_length;
            this.remove_space = tokenizerConfig.remove_space;
            this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;
            this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;
            if (tokenizerConfig.padding_side) {
              this.padding_side = tokenizerConfig.padding_side;
            }
            this.legacy = false;
            this.chat_template = tokenizerConfig.chat_template ?? null;
            if (Array.isArray(this.chat_template)) {
              const chat_template = /* @__PURE__ */ Object.create(null);
              for (const { name, template } of this.chat_template) {
                if (typeof name !== "string" || typeof template !== "string") {
                  throw new Error('Chat template must be a list of objects with "name" and "template" properties');
                }
                chat_template[name] = template;
              }
              this.chat_template = chat_template;
            }
            this._compiled_template_cache = /* @__PURE__ */ new Map();
          }
          /**
           * Returns the value of the first matching key in the tokenizer config object.
           * @param {...string} keys One or more keys to search for in the tokenizer config object.
           * @returns {string|null} The value associated with the first matching key, or null if no match is found.
           * @throws {Error} If an object is found for a matching key and its __type property is not "AddedToken".
           * @private
           */
          getToken(...keys) {
            for (const key of keys) {
              const item = this._tokenizer_config[key];
              if (!item) continue;
              if (typeof item === "object") {
                if (item.__type === "AddedToken") {
                  return item.content;
                } else {
                  throw Error(`Unknown token: ${item}`);
                }
              } else {
                return item;
              }
            }
            return null;
          }
          /**
           * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. 
           * 
           * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.
           * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
           * 
           * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.
           * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.
           */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main",
            legacy = null
          } = {}) {
            const info = await loadTokenizer(pretrained_model_name_or_path, {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision,
              legacy
            });
            return new this(...info);
          }
          /**
           * @typedef {number[]|number[][]|Tensor} BatchEncodingItem
           * 
           * @typedef {Object} BatchEncoding Holds the output of the tokenizer's call function.
           * @property {BatchEncodingItem} input_ids List of token ids to be fed to a model.
           * @property {BatchEncodingItem} attention_mask List of indices specifying which tokens should be attended to by the model.
           * @property {BatchEncodingItem} [token_type_ids] List of token type ids to be fed to a model.
           */
          /**
           * Encode/tokenize the given text(s).
           * @param {string|string[]} text The text to tokenize.
           * @param {Object} options An optional object containing the following properties:
           * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.
           * @param {boolean|'max_length'} [options.padding=false] Whether to pad the input sequences.
           * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
           * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.
           * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.
           * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.
           * @param {boolean} [options.return_token_type_ids=null] Whether to return the token type ids.
           * @returns {BatchEncoding} Object to be passed to the model.
           */
          _call(text, {
            text_pair = null,
            add_special_tokens = true,
            padding = false,
            truncation = null,
            max_length = null,
            return_tensor = true,
            // Different to HF
            return_token_type_ids = null
          } = {}) {
            const isBatched = Array.isArray(text);
            let encodedTokens;
            if (isBatched) {
              if (text.length === 0) {
                throw Error("text array must be non-empty");
              }
              if (text_pair !== null) {
                if (!Array.isArray(text_pair)) {
                  throw Error("text_pair must also be an array");
                } else if (text.length !== text_pair.length) {
                  throw Error("text and text_pair must have the same length");
                }
                encodedTokens = text.map(
                  (t, i) => this._encode_plus(t, { text_pair: text_pair[i], add_special_tokens, return_token_type_ids })
                );
              } else {
                encodedTokens = text.map((x) => this._encode_plus(x, { add_special_tokens, return_token_type_ids }));
              }
            } else {
              if (text === null || text === void 0) {
                throw Error("text may not be null or undefined");
              }
              if (Array.isArray(text_pair)) {
                throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");
              }
              encodedTokens = [this._encode_plus(text, { text_pair, add_special_tokens, return_token_type_ids })];
            }
            if (max_length === null) {
              if (padding === "max_length") {
                max_length = this.model_max_length;
              } else {
                max_length = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.max)(encodedTokens.map((x) => x.input_ids.length))[0];
              }
            } else {
              if (!truncation) {
                console.warn(`Truncation was not explicitly activated but \`max_length\` is provided a specific value, please use \`truncation=true\` to explicitly truncate examples to max length.`);
              }
            }
            max_length = Math.min(max_length, this.model_max_length ?? Infinity);
            if (padding || truncation) {
              for (let i = 0; i < encodedTokens.length; ++i) {
                if (encodedTokens[i].input_ids.length === max_length) {
                  continue;
                } else if (encodedTokens[i].input_ids.length > max_length) {
                  if (truncation) {
                    truncateHelper(encodedTokens[i], max_length);
                  }
                } else {
                  if (padding) {
                    padHelper(
                      encodedTokens[i],
                      max_length,
                      (key) => key === "input_ids" ? this.pad_token_id : 0,
                      this.padding_side
                    );
                  }
                }
              }
            }
            const result = {};
            if (return_tensor) {
              if (!(padding && truncation)) {
                if (encodedTokens.some((x) => {
                  for (const key of Object.keys(x)) {
                    if (x[key].length !== encodedTokens[0][key]?.length) {
                      return true;
                    }
                  }
                  return false;
                })) {
                  throw Error(
                    "Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length."
                  );
                }
              }
              const dims = [encodedTokens.length, encodedTokens[0].input_ids.length];
              for (const key of Object.keys(encodedTokens[0])) {
                result[key] = new _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor(
                  "int64",
                  BigInt64Array.from(encodedTokens.flatMap((x) => x[key]).map(BigInt)),
                  dims
                );
              }
            } else {
              for (const key of Object.keys(encodedTokens[0])) {
                result[key] = encodedTokens.map((x) => x[key]);
              }
              if (!isBatched) {
                for (const key of Object.keys(result)) {
                  result[key] = result[key][0];
                }
              }
            }
            return (
              /** @type {BatchEncoding} */
              result
            );
          }
          /**
           * Encodes a single text using the preprocessor pipeline of the tokenizer.
           *
           * @param {string|null} text The text to encode.
           * @returns {string[]|null} The encoded tokens.
           */
          _encode_text(text) {
            if (text === null) return null;
            const sections = this.added_tokens_regex ? text.split(this.added_tokens_regex).filter((x) => x) : [text];
            const tokens = sections.map((x, section_index) => {
              const addedToken = this.added_tokens.find((t) => t.content === x);
              if (addedToken !== void 0) {
                return x;
              } else {
                if (this.remove_space === true) {
                  x = x.trim().split(/\s+/).join(" ");
                }
                if (this.do_lowercase_and_remove_accent) {
                  x = lowercase_and_remove_accent(x);
                }
                if (this.normalizer !== null) {
                  x = this.normalizer(x);
                }
                if (x.length === 0) {
                  return [];
                }
                const sectionTokens = this.pre_tokenizer !== null ? this.pre_tokenizer(x, {
                  section_index
                }) : [x];
                const tokens2 = this.model(sectionTokens);
                return tokens2;
              }
            }).flat();
            return tokens;
          }
          /**
           * Encodes a single text or a pair of texts using the model's tokenizer.
           *
           * @param {string} text The text to encode.
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.text_pair=null] The optional second text to encode.
           * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
           * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
           * @returns {EncodingSingle} An object containing the encoded text.
           * @private
           */
          _encode_plus(text, {
            text_pair = null,
            add_special_tokens = true,
            return_token_type_ids = null
          } = {}) {
            const { tokens, token_type_ids } = this._tokenize_helper(text, { pair: text_pair, add_special_tokens });
            const input_ids = this.model.convert_tokens_to_ids(tokens);
            const result = {
              input_ids,
              attention_mask: new Array(input_ids.length).fill(1)
            };
            if ((return_token_type_ids ?? this.return_token_type_ids) && token_type_ids) {
              result.token_type_ids = token_type_ids;
            }
            return result;
          }
          /**
           * Internal helper function to tokenize a text, and optionally a pair of texts.
           * @param {string} text The text to tokenize.
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.pair=null] The optional second text to tokenize.
           * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.
           * @returns {{tokens: string[], token_type_ids?: number[]}} An object containing the tokens and optionally the token type IDs.
           */
          _tokenize_helper(text, {
            pair = null,
            add_special_tokens = false
          } = {}) {
            const tokens = this._encode_text(text);
            const tokens2 = this._encode_text(pair);
            return this.post_processor ? this.post_processor(tokens, tokens2, { add_special_tokens }) : { tokens: (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(tokens ?? [], tokens2 ?? []) };
          }
          /**
           * Converts a string into a sequence of tokens.
           * @param {string} text The sequence to be encoded.
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.pair] A second sequence to be encoded with the first.
           * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.
           * @returns {string[]} The list of tokens.
           */
          tokenize(text, {
            pair = null,
            add_special_tokens = false
          } = {}) {
            return this._tokenize_helper(text, { pair, add_special_tokens }).tokens;
          }
          /**
           * Encodes a single text or a pair of texts using the model's tokenizer.
           *
           * @param {string} text The text to encode.
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.text_pair=null] The optional second text to encode.
           * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.
           * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.
           * @returns {number[]} An array of token IDs representing the encoded text(s).
           */
          encode(text, {
            text_pair = null,
            add_special_tokens = true,
            return_token_type_ids = null
          } = {}) {
            return this._encode_plus(text, {
              text_pair,
              add_special_tokens,
              return_token_type_ids
            }).input_ids;
          }
          /**
           * Decode a batch of tokenized sequences.
           * @param {number[][]|Tensor} batch List/Tensor of tokenized input sequences.
           * @param {Object} decode_args (Optional) Object with decoding arguments.
           * @returns {string[]} List of decoded sequences.
           */
          batch_decode(batch, decode_args = {}) {
            if (batch instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
              batch = batch.tolist();
            }
            return batch.map((x) => this.decode(x, decode_args));
          }
          /**
           * Decodes a sequence of token IDs back to a string.
           *
           * @param {number[]|bigint[]|Tensor} token_ids List/Tensor of token IDs to decode.
           * @param {Object} [decode_args={}]
           * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.
           * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.
           *
           * @returns {string} The decoded string.
           * @throws {Error} If `token_ids` is not a non-empty array of integers.
           */
          decode(token_ids, decode_args = {}) {
            if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
              token_ids = prepareTensorForDecode(token_ids);
            }
            if (!Array.isArray(token_ids) || token_ids.length === 0 || !(0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.isIntegralNumber)(token_ids[0])) {
              throw Error("token_ids must be a non-empty array of integers.");
            }
            return this.decode_single(token_ids, decode_args);
          }
          /**
           * Decode a single list of token ids to a string.
           * @param {number[]|bigint[]} token_ids List of token ids to decode
           * @param {Object} decode_args Optional arguments for decoding
           * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding
           * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.
           * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.
           * @returns {string} The decoded string
           */
          decode_single(token_ids, {
            skip_special_tokens = false,
            clean_up_tokenization_spaces = null
          }) {
            let tokens = this.model.convert_ids_to_tokens(token_ids);
            if (skip_special_tokens) {
              tokens = tokens.filter((x) => !this.special_tokens.includes(x));
            }
            let decoded = this.decoder ? this.decoder(tokens) : tokens.join(" ");
            if (this.decoder && this.decoder.end_of_word_suffix) {
              decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, " ");
              if (skip_special_tokens) {
                decoded = decoded.trim();
              }
            }
            if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {
              decoded = clean_up_tokenization(decoded);
            }
            return decoded;
          }
          /**
           * Retrieve the chat template string used for tokenizing chat messages. This template is used
           * internally by the `apply_chat_template` method and can also be used externally to retrieve the model's chat
           * template for better generation tracking.
           * 
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.chat_template=null]
           * A Jinja template or the name of a template to use for this conversion.
           * It is usually not necessary to pass anything to this argument,
           * as the model's template will be used by default.
           * @param {Object[]} [options.tools=null]
           * A list of tools (callable functions) that will be accessible to the model. If the template does not
           * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,
           * giving the name, description and argument types for the tool. See our
           * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)
           * for more information.
           * @returns {string} The chat template string.
           */
          get_chat_template({
            chat_template = null,
            tools = null
          } = {}) {
            if (this.chat_template && typeof this.chat_template === "object") {
              const template_dict = this.chat_template;
              if (chat_template !== null && Object.hasOwn(template_dict, chat_template)) {
                chat_template = template_dict[chat_template];
              } else if (chat_template === null) {
                if (tools !== null && "tool_use" in template_dict) {
                  chat_template = template_dict["tool_use"];
                } else if ("default" in template_dict) {
                  chat_template = template_dict["default"];
                } else {
                  throw Error(
                    `This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(template_dict).sort()}.`
                  );
                }
              }
            } else if (chat_template === null) {
              if (this.chat_template) {
                chat_template = this.chat_template;
              } else {
                throw Error(
                  "Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating"
                );
              }
            }
            return chat_template;
          }
          /**
           * Converts a list of message objects with `"role"` and `"content"` keys to a list of token
           * ids. This method is intended for use with chat models, and will read the tokenizer's chat_template attribute to
           * determine the format and control tokens to use when converting.
           * 
           * See [here](https://huggingface.co/docs/transformers/chat_templating) for more information.
           * 
           * **Example:** Applying a chat template to a conversation.
           * 
           * ```javascript
           * import { AutoTokenizer } from "@huggingface/transformers";
           * 
           * const tokenizer = await AutoTokenizer.from_pretrained("Xenova/mistral-tokenizer-v1");
           * 
           * const chat = [
           *   { "role": "user", "content": "Hello, how are you?" },
           *   { "role": "assistant", "content": "I'm doing great. How can I help you today?" },
           *   { "role": "user", "content": "I'd like to show off how chat templating works!" },
           * ]
           * 
           * const text = tokenizer.apply_chat_template(chat, { tokenize: false });
           * // "<s>[INST] Hello, how are you? [/INST]I'm doing great. How can I help you today?</s> [INST] I'd like to show off how chat templating works! [/INST]"
           * 
           * const input_ids = tokenizer.apply_chat_template(chat, { tokenize: true, return_tensor: false });
           * // [1, 733, 16289, 28793, 22557, 28725, 910, 460, 368, 28804, 733, 28748, 16289, 28793, 28737, 28742, 28719, 2548, 1598, 28723, 1602, 541, 315, 1316, 368, 3154, 28804, 2, 28705, 733, 16289, 28793, 315, 28742, 28715, 737, 298, 1347, 805, 910, 10706, 5752, 1077, 3791, 28808, 733, 28748, 16289, 28793]
           * ```
           * 
           * @param {Message[]} conversation A list of message objects with `"role"` and `"content"` keys,
           * representing the chat history so far.
           * @param {Object} options An optional object containing the following properties:
           * @param {string} [options.chat_template=null] A Jinja template to use for this conversion. If
           * this is not passed, the model's chat template will be used instead.
           * @param {Object[]} [options.tools=null]
           * A list of tools (callable functions) that will be accessible to the model. If the template does not
           * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,
           * giving the name, description and argument types for the tool. See our
           * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)
           * for more information.
           * @param {Record<string, string>[]} [options.documents=null]
           * A list of dicts representing documents that will be accessible to the model if it is performing RAG
           * (retrieval-augmented generation). If the template does not support RAG, this argument will have no
           * effect. We recommend that each document should be a dict containing "title" and "text" keys. Please
           * see the RAG section of the [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG)
           * for examples of passing documents with chat templates.
           * @param {boolean} [options.add_generation_prompt=false] Whether to end the prompt with the token(s) that indicate
           * the start of an assistant message. This is useful when you want to generate a response from the model.
           * Note that this argument will be passed to the chat template, and so it must be supported in the
           * template for this argument to have any effect.
           * @param {boolean} [options.tokenize=true] Whether to tokenize the output. If false, the output will be a string.
           * @param {boolean} [options.padding=false] Whether to pad sequences to the maximum length. Has no effect if tokenize is false.
           * @param {boolean} [options.truncation=false] Whether to truncate sequences to the maximum length. Has no effect if tokenize is false.
           * @param {number} [options.max_length=null] Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is false.
           * If not specified, the tokenizer's `max_length` attribute will be used as a default.
           * @param {boolean} [options.return_tensor=true] Whether to return the output as a Tensor or an Array. Has no effect if tokenize is false.
           * @param {boolean} [options.return_dict=true] Whether to return a dictionary with named outputs. Has no effect if tokenize is false.
           * @param {Object} [options.tokenizer_kwargs={}] Additional options to pass to the tokenizer.
           * @returns {string | Tensor | number[]| number[][]|BatchEncoding} The tokenized output.
           */
          apply_chat_template(conversation, {
            tools = null,
            documents = null,
            chat_template = null,
            add_generation_prompt = false,
            tokenize = true,
            padding = false,
            truncation = false,
            max_length = null,
            return_tensor = true,
            return_dict = false,
            tokenizer_kwargs = {},
            ...kwargs
          } = {}) {
            chat_template = this.get_chat_template({ chat_template, tools });
            if (typeof chat_template !== "string") {
              throw Error(`chat_template must be a string, but got ${typeof chat_template}`);
            }
            let compiledTemplate = this._compiled_template_cache.get(chat_template);
            if (compiledTemplate === void 0) {
              compiledTemplate = new _huggingface_jinja__WEBPACK_IMPORTED_MODULE_6__.Template(chat_template);
              this._compiled_template_cache.set(chat_template, compiledTemplate);
            }
            const special_tokens_map = /* @__PURE__ */ Object.create(null);
            for (const key of SPECIAL_TOKEN_ATTRIBUTES) {
              const value = this.getToken(key);
              if (value) {
                special_tokens_map[key] = value;
              }
            }
            const rendered = compiledTemplate.render({
              messages: conversation,
              add_generation_prompt,
              tools,
              documents,
              ...special_tokens_map,
              ...kwargs
            });
            if (tokenize) {
              const out = this._call(rendered, {
                add_special_tokens: false,
                padding,
                truncation,
                max_length,
                return_tensor,
                ...tokenizer_kwargs
              });
              return return_dict ? out : out.input_ids;
            }
            return rendered;
          }
        }
        class BertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class AlbertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class MobileBertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class SqueezeBertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class DebertaTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class DebertaV2Tokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class HerbertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class ConvBertTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class RoFormerTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class DistilBertTokenizer extends PreTrainedTokenizer {
        }
        class CamembertTokenizer extends PreTrainedTokenizer {
        }
        class XLMTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
          }
        }
        class ElectraTokenizer extends PreTrainedTokenizer {
          return_token_type_ids = true;
        }
        class T5Tokenizer extends PreTrainedTokenizer {
        }
        class GPT2Tokenizer extends PreTrainedTokenizer {
        }
        class BartTokenizer extends PreTrainedTokenizer {
        }
        class MBartTokenizer extends PreTrainedTokenizer {
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;
            this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));
            this.lang_to_token = (x) => x;
          }
          /**
           * Helper function to build translation inputs for an `MBartTokenizer`.
           * @param {string|string[]} raw_inputs The text to tokenize.
           * @param {Object} tokenizer_options Options to be sent to the tokenizer
           * @param {Object} generate_kwargs Generation options.
           * @returns {Object} Object to be passed to the model.
           */
          _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
            return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
          }
        }
        class MBart50Tokenizer extends MBartTokenizer {
        }
        class RobertaTokenizer extends PreTrainedTokenizer {
        }
        class BloomTokenizer extends PreTrainedTokenizer {
        }
        const SPIECE_UNDERLINE = "\u2581";
        class LlamaTokenizer extends PreTrainedTokenizer {
          padding_side = "left";
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.legacy = tokenizerConfig.legacy ?? true;
            if (!this.legacy) {
              this.normalizer = null;
              this.pre_tokenizer = new MetaspacePreTokenizer({
                replacement: SPIECE_UNDERLINE,
                add_prefix_space: true,
                prepend_scheme: "first"
              });
            }
          }
          /**
           * Helper function to handle legacy encoding of SPM tokenizers.
           * Adapted from https://github.com/huggingface/transformers/blob/e6dcf8abd6f65bb4b6dfc1831b20d9ba49ce00e2/src/transformers/models/t5/tokenization_t5.py#L374-L387
           * @param {string} text The text to encode.
           * @returns {string[]} The encoded tokens.
           */
          _encode_text(text) {
            if (text === null) return null;
            if (this.legacy || text.length === 0) {
              return super._encode_text(text);
            }
            let tokens = super._encode_text(SPIECE_UNDERLINE + text.replaceAll(SPIECE_UNDERLINE, " "));
            if (tokens.length > 1 && tokens[0] === SPIECE_UNDERLINE && this.special_tokens.includes(tokens[1])) {
              tokens = tokens.slice(1);
            }
            return tokens;
          }
        }
        class CodeLlamaTokenizer extends PreTrainedTokenizer {
        }
        class XLMRobertaTokenizer extends PreTrainedTokenizer {
        }
        class MPNetTokenizer extends PreTrainedTokenizer {
        }
        class FalconTokenizer extends PreTrainedTokenizer {
        }
        class GPTNeoXTokenizer extends PreTrainedTokenizer {
        }
        class EsmTokenizer extends PreTrainedTokenizer {
        }
        class Qwen2Tokenizer extends PreTrainedTokenizer {
        }
        class GemmaTokenizer extends PreTrainedTokenizer {
        }
        class Grok1Tokenizer extends PreTrainedTokenizer {
        }
        function _build_translation_inputs(self2, raw_inputs, tokenizer_options, generate_kwargs) {
          if (!("language_codes" in self2) || !Array.isArray(self2.language_codes)) {
            throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");
          }
          if (!("languageRegex" in self2) || !(self2.languageRegex instanceof RegExp)) {
            throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");
          }
          if (!("lang_to_token" in self2) || typeof self2.lang_to_token !== "function") {
            throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");
          }
          const src_lang_token = generate_kwargs.src_lang;
          const tgt_lang_token = generate_kwargs.tgt_lang;
          if (!self2.language_codes.includes(tgt_lang_token)) {
            throw new Error(`Target language code "${tgt_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
          }
          if (src_lang_token !== void 0) {
            if (!self2.language_codes.includes(src_lang_token)) {
              throw new Error(`Source language code "${src_lang_token}" is not valid. Must be one of: {${self2.language_codes.join(", ")}}`);
            }
            for (const item of self2.post_processor.config.single) {
              if ("SpecialToken" in item && self2.languageRegex.test(item.SpecialToken.id)) {
                item.SpecialToken.id = self2.lang_to_token(src_lang_token);
                break;
              }
            }
          }
          generate_kwargs.forced_bos_token_id = self2.model.convert_tokens_to_ids([self2.lang_to_token(tgt_lang_token)])[0];
          return self2._call(raw_inputs, tokenizer_options);
        }
        class NllbTokenizer extends PreTrainedTokenizer {
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;
            this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x));
            this.lang_to_token = (x) => x;
          }
          /**
           * Helper function to build translation inputs for an `NllbTokenizer`.
           * @param {string|string[]} raw_inputs The text to tokenize.
           * @param {Object} tokenizer_options Options to be sent to the tokenizer
           * @param {Object} generate_kwargs Generation options.
           * @returns {Object} Object to be passed to the model.
           */
          _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
            return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
          }
        }
        class M2M100Tokenizer extends PreTrainedTokenizer {
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.languageRegex = /^__[a-z]{2,3}__$/;
            this.language_codes = this.special_tokens.filter((x) => this.languageRegex.test(x)).map((x) => x.slice(2, -2));
            this.lang_to_token = (x) => `__${x}__`;
          }
          /**
           * Helper function to build translation inputs for an `M2M100Tokenizer`.
           * @param {string|string[]} raw_inputs The text to tokenize.
           * @param {Object} tokenizer_options Options to be sent to the tokenizer
           * @param {Object} generate_kwargs Generation options.
           * @returns {Object} Object to be passed to the model.
           */
          _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {
            return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);
          }
        }
        class WhisperTokenizer extends PreTrainedTokenizer {
          get timestamp_begin() {
            return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0] + 1;
          }
          /**
           * Decodes automatic speech recognition (ASR) sequences.
           * @param {Array<{tokens: bigint[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.
           * @param {Object} options The options to use for decoding.
           * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.
           */
          _decode_asr(sequences, {
            return_timestamps = false,
            return_language = false,
            time_precision = null,
            force_full_sequences = true
          } = {}) {
            if (time_precision === null) {
              throw Error("Must specify time_precision");
            }
            let last_language = null;
            const returnWordTimestamps = return_timestamps === "word";
            function new_chunk() {
              return { "language": last_language, "timestamp": [null, null], "text": "" };
            }
            const chunks = [];
            let chunk = new_chunk();
            let time_offset = 0;
            const timestamp_begin = this.timestamp_begin;
            let previous_tokens = [];
            let previous_token_timestamps = [];
            let skip = false;
            let right_stride_start = null;
            const all_special_ids = new Set(this.all_special_ids);
            for (const output of sequences) {
              const token_ids = output.tokens;
              const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;
              let last_timestamp = null;
              let first_timestamp = timestamp_begin;
              if ("stride" in output) {
                const [chunk_len, stride_left, stride_right] = output.stride;
                time_offset -= stride_left;
                right_stride_start = chunk_len - stride_right;
                if (stride_left) {
                  first_timestamp = stride_left / time_precision + timestamp_begin;
                }
                if (stride_right) {
                  for (let i = token_ids.length - 1; i >= 0; --i) {
                    const token = Number(token_ids[i]);
                    if (token >= timestamp_begin) {
                      if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {
                        break;
                      }
                      last_timestamp = token;
                    }
                  }
                }
              }
              let current_tokens = [];
              let current_token_timestamps = [];
              for (let i = 0; i < token_ids.length; ++i) {
                const token = Number(token_ids[i]);
                if (all_special_ids.has(token)) {
                  const text = this.decode([token]);
                  const language = _models_whisper_common_whisper_js__WEBPACK_IMPORTED_MODULE_7__.WHISPER_LANGUAGE_MAPPING.get(text.slice(2, -2));
                  if (language !== void 0) {
                    if (last_language !== null && language !== last_language && !return_timestamps) {
                      previous_tokens.push(current_tokens);
                      const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];
                      const resolved_text = this.decode(resolved_tokens);
                      chunk.text = resolved_text;
                      chunks.push(chunk);
                      previous_tokens = [];
                      current_tokens = [];
                      chunk = new_chunk();
                    }
                    last_language = chunk.language = language;
                  } else {
                  }
                } else if (token >= timestamp_begin) {
                  const time = (token - timestamp_begin) * time_precision + time_offset;
                  const rounded_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(time, 2);
                  if (last_timestamp !== null && token >= last_timestamp) {
                    skip = true;
                  } else if (skip || previous_tokens.length > 0 && token < first_timestamp) {
                    skip = false;
                  } else if (chunk.timestamp[0] === null) {
                    chunk.timestamp[0] = rounded_time;
                  } else {
                    if (rounded_time === chunk.timestamp[0]) {
                    } else {
                      chunk.timestamp[1] = rounded_time;
                      previous_tokens.push(current_tokens);
                      if (returnWordTimestamps) {
                        previous_token_timestamps.push(current_token_timestamps);
                      }
                      const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(
                        previous_tokens,
                        previous_token_timestamps
                      );
                      const resolved_text = this.decode(resolved_tokens);
                      chunk.text = resolved_text;
                      if (returnWordTimestamps) {
                        chunk.words = this.collateWordTimestamps(
                          resolved_tokens,
                          resolved_token_timestamps,
                          last_language
                        );
                      }
                      chunks.push(chunk);
                      previous_tokens = [];
                      current_tokens = [];
                      previous_token_timestamps = [];
                      current_token_timestamps = [];
                      chunk = new_chunk();
                    }
                  }
                } else {
                  current_tokens.push(token);
                  if (returnWordTimestamps) {
                    let start_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i] + time_offset, 2);
                    let end_time;
                    if (i + 1 < token_timestamps.length) {
                      end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(token_timestamps[i + 1] + time_offset, 2);
                      const decoded_text = this.decode([token]);
                      if (PUNCTUATION_ONLY_REGEX.test(decoded_text)) {
                        end_time = (0, _utils_maths_js__WEBPACK_IMPORTED_MODULE_3__.round)(Math.min(start_time + time_precision, end_time), 2);
                      }
                    } else {
                      end_time = null;
                    }
                    current_token_timestamps.push([start_time, end_time]);
                  }
                }
              }
              if ("stride" in output) {
                const [chunk_len, stride_left, stride_right] = output.stride;
                time_offset += chunk_len - stride_right;
              }
              if (current_tokens.length > 0) {
                previous_tokens.push(current_tokens);
                if (returnWordTimestamps) {
                  previous_token_timestamps.push(current_token_timestamps);
                }
              } else if (previous_tokens.every((p) => p.length === 0)) {
                chunk = new_chunk();
                previous_tokens = [];
                current_tokens = [];
                previous_token_timestamps = [];
                current_token_timestamps = [];
              }
            }
            if (previous_tokens.length > 0) {
              if (force_full_sequences && return_timestamps) {
                throw new Error(
                  "Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation."
                );
              }
              const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);
              const resolved_text = this.decode(resolved_tokens);
              chunk.text = resolved_text;
              if (returnWordTimestamps) {
                chunk.words = this.collateWordTimestamps(
                  resolved_tokens,
                  resolved_token_timestamps,
                  last_language
                );
              }
              chunks.push(chunk);
            }
            let optional = /* @__PURE__ */ Object.create(null);
            const full_text = chunks.map((chunk2) => chunk2.text).join("");
            if (return_timestamps || return_language) {
              for (let i = 0; i < chunks.length; ++i) {
                const chunk2 = chunks[i];
                if (!return_timestamps) {
                  delete chunk2["timestamp"];
                }
                if (!return_language) {
                  delete chunk2["language"];
                }
              }
              if (returnWordTimestamps) {
                const new_chunks = [];
                for (const chunk2 of chunks) {
                  for (const word of chunk2.words) {
                    new_chunks.push(word);
                  }
                }
                optional = { "chunks": new_chunks };
              } else {
                optional = { "chunks": chunks };
              }
            }
            return [full_text, optional];
          }
          /**
           * Finds the longest common sequence among the provided sequences.
           * @param {number[][]} sequences An array of sequences of token ids to compare.
           * @returns {number[][]} The longest common sequence found.
           * @throws {Error} If there is a bug within the function.
           * @private
           */
          findLongestCommonSequence(sequences, token_timestamp_sequences = null) {
            let leftSequence = sequences[0];
            let leftLength = leftSequence.length;
            let totalSequence = [];
            const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;
            let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;
            let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;
            for (let i = 1; i < sequences.length; ++i) {
              const rightSequence = sequences[i];
              let max = 0;
              let maxIndices = [leftLength, leftLength, 0, 0];
              const rightLength = rightSequence.length;
              for (let j = 1; j < leftLength + rightLength; ++j) {
                const leftStart2 = Math.max(0, leftLength - j);
                const leftStop2 = Math.min(leftLength, leftLength + rightLength - j);
                const left = leftSequence.slice(leftStart2, leftStop2);
                const rightStart2 = Math.max(0, j - leftLength);
                const rightStop2 = Math.min(rightLength, j);
                const right = rightSequence.slice(rightStart2, rightStop2);
                if (left.length !== right.length) {
                  throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");
                }
                let matches;
                if (use_token_timestamp_sequences) {
                  matches = left.filter((elem, idx) => elem === right[idx] && left_token_timestamp_sequence[leftStart2 + idx] <= token_timestamp_sequences[i][rightStart2 + idx]).length;
                } else {
                  matches = left.filter((elem, idx) => elem === right[idx]).length;
                }
                const eps = j / 1e4;
                const matching = matches / j + eps;
                if (matches > 1 && matching > max) {
                  max = matching;
                  maxIndices = [leftStart2, leftStop2, rightStart2, rightStop2];
                }
              }
              const [leftStart, leftStop, rightStart, rightStop] = maxIndices;
              const leftMid = Math.floor((leftStop + leftStart) / 2);
              const rightMid = Math.floor((rightStop + rightStart) / 2);
              totalSequence.push(...leftSequence.slice(0, leftMid));
              leftSequence = rightSequence.slice(rightMid);
              leftLength = leftSequence.length;
              if (use_token_timestamp_sequences) {
                total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));
                left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);
              }
            }
            totalSequence.push(...leftSequence);
            if (use_token_timestamp_sequences) {
              total_token_timestamp_sequence.push(...left_token_timestamp_sequence);
              return [totalSequence, total_token_timestamp_sequence];
            } else {
              return [totalSequence, []];
            }
          }
          /** @private */
          collateWordTimestamps(tokens, token_timestamps, language) {
            const [words, _, token_indices] = this.combineTokensIntoWords(tokens, language);
            const timings = [];
            for (let i = 0; i < words.length; ++i) {
              const indices = token_indices[i];
              timings.push({
                text: words[i],
                timestamp: [
                  token_timestamps[indices.at(0)][0],
                  token_timestamps[indices.at(-1)][1]
                ]
              });
            }
            return timings;
          }
          /**
           * Groups tokens by word. Returns a tuple containing a list of strings with the words,
           * and a list of `token_id` sequences with the tokens making up each word.
           * @param {number[]} tokens 
           * @param {string} [language] 
           * @param {string} prepend_punctionations 
           * @param {string} append_punctuations 
           * 
           * @private
           */
          combineTokensIntoWords(tokens, language, prepend_punctionations = `"'\u201C\xA1\xBF([{-`, append_punctuations = `"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`) {
            language = language ?? "english";
            let words, word_tokens, token_indices;
            if (["chinese", "japanese", "thai", "lao", "myanmar"].includes(language)) {
              [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens);
            } else {
              [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens);
            }
            return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);
          }
          /** @type {PreTrainedTokenizer['decode']} */
          decode(token_ids, decode_args) {
            let text;
            if (decode_args?.decode_with_timestamps) {
              if (token_ids instanceof _utils_tensor_js__WEBPACK_IMPORTED_MODULE_4__.Tensor) {
                token_ids = prepareTensorForDecode(token_ids);
              }
              text = this.decodeWithTimestamps(token_ids, decode_args);
            } else {
              text = super.decode(token_ids, decode_args);
            }
            return text;
          }
          /**
           * @param {number[]|bigint[]} token_ids List of token IDs to decode.
           * @param {Object} decode_args Optional arguments for decoding
           * @private
           */
          decodeWithTimestamps(token_ids, decode_args) {
            const time_precision = decode_args?.time_precision ?? 0.02;
            const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;
            let outputs = [[]];
            for (let token of token_ids) {
              token = Number(token);
              if (token >= timestamp_begin) {
                const timestamp = ((token - timestamp_begin) * time_precision).toFixed(2);
                outputs.push(`<|${timestamp}|>`);
                outputs.push([]);
              } else {
                outputs[outputs.length - 1].push(token);
              }
            }
            outputs = outputs.map(
              (s) => typeof s === "string" ? s : super.decode(s, decode_args)
            );
            return outputs.join("");
          }
          /**
           * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.
           * @param {number[]} tokens 
           * @returns {*}
           * @private
           */
          splitTokensOnUnicode(tokens) {
            const decoded_full = this.decode(tokens, {
              // @ts-ignore
              decode_with_timestamps: true
            });
            const replacement_char = "\uFFFD";
            const words = [];
            const word_tokens = [];
            const token_indices = [];
            let current_tokens = [];
            let current_indices = [];
            let unicode_offset = 0;
            for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {
              const token = tokens[token_idx];
              current_tokens.push(token);
              current_indices.push(token_idx);
              const decoded = this.decode(current_tokens, {
                // @ts-ignore
                decode_with_timestamps: true
              });
              if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {
                words.push(decoded);
                word_tokens.push(current_tokens);
                token_indices.push(current_indices);
                current_tokens = [];
                current_indices = [];
                unicode_offset += decoded.length;
              }
            }
            return [words, word_tokens, token_indices];
          }
          /**
           * Combine tokens into words by splitting at whitespace and punctuation tokens.
           * @param {number[]} tokens 
           * @private
           */
          splitTokensOnSpaces(tokens) {
            const [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);
            const words = [];
            const word_tokens = [];
            const token_indices = [];
            const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, "gu");
            for (let i = 0; i < subwords.length; ++i) {
              const subword = subwords[i];
              const subword_tokens = subword_tokens_list[i];
              const subword_indices = subword_indices_list[i];
              const special = subword_tokens[0] >= this.model.tokens_to_ids.get("<|endoftext|>");
              const with_space = subword.startsWith(" ");
              const trimmed = subword.trim();
              const punctuation = punctuationRegex.test(trimmed);
              if (special || with_space || punctuation || words.length === 0) {
                words.push(subword);
                word_tokens.push(subword_tokens);
                token_indices.push(subword_indices);
              } else {
                const ix = words.length - 1;
                words[ix] += subword;
                word_tokens[ix].push(...subword_tokens);
                token_indices[ix].push(...subword_indices);
              }
            }
            return [words, word_tokens, token_indices];
          }
          /**
           * Merges punctuation tokens with neighboring words.
           * @param {string[]} words 
           * @param {number[][]} tokens 
           * @param {number[][]} indices 
           * @param {string} prepended 
           * @param {string} appended 
           * @private
           */
          mergePunctuations(words, tokens, indices, prepended, appended) {
            const newWords = structuredClone(words);
            const newTokens = structuredClone(tokens);
            const newIndices = structuredClone(indices);
            let i = newWords.length - 2;
            let j = newWords.length - 1;
            while (i >= 0) {
              if (newWords[i].startsWith(" ") && prepended.includes(newWords[i].trim())) {
                newWords[j] = newWords[i] + newWords[j];
                newTokens[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);
                newIndices[j] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);
                newWords[i] = "";
                newTokens[i] = [];
                newIndices[i] = [];
              } else {
                j = i;
              }
              --i;
            }
            i = 0;
            j = 1;
            while (j < newWords.length) {
              if (!newWords[i].endsWith(" ") && appended.includes(newWords[j])) {
                newWords[i] += newWords[j];
                newTokens[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newTokens[i], newTokens[j]);
                newIndices[i] = (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)(newIndices[i], newIndices[j]);
                newWords[j] = "";
                newTokens[j] = [];
                newIndices[j] = [];
              } else {
                i = j;
              }
              ++j;
            }
            return [
              newWords.filter((x) => x),
              newTokens.filter((x) => x.length > 0),
              newIndices.filter((x) => x.length > 0)
            ];
          }
        }
        class CodeGenTokenizer extends PreTrainedTokenizer {
        }
        class CLIPTokenizer extends PreTrainedTokenizer {
        }
        class SiglipTokenizer extends PreTrainedTokenizer {
        }
        class MarianTokenizer extends PreTrainedTokenizer {
          /**
           * Create a new MarianTokenizer instance.
           * @param {Object} tokenizerJSON The JSON of the tokenizer.
           * @param {Object} tokenizerConfig The config of the tokenizer.
           */
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.languageRegex = /^(>>\w+<<)\s*/g;
            this.supported_language_codes = this.model.vocab.filter(
              (x) => this.languageRegex.test(x)
            );
            console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
          }
          /**
           * Encodes a single text. Overriding this method is necessary since the language codes
           * must be removed before encoding with sentencepiece model.
           * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213
           *
           * @param {string|null} text The text to encode.
           * @returns {Array} The encoded tokens.
           */
          _encode_text(text) {
            if (text === null) return null;
            const [matchInfo, ...remainder] = text.trim().split(this.languageRegex);
            if (remainder.length === 0) {
              return super._encode_text(matchInfo);
            } else if (remainder.length === 2) {
              const [language, text2] = remainder;
              if (!this.supported_language_codes.includes(language)) {
                console.warn(`Unsupported language code "${language}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`);
              }
              return (0, _utils_core_js__WEBPACK_IMPORTED_MODULE_1__.mergeArrays)([language], super._encode_text(text2));
            }
          }
        }
        class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer {
        }
        class BlenderbotTokenizer extends PreTrainedTokenizer {
        }
        class BlenderbotSmallTokenizer extends PreTrainedTokenizer {
        }
        class SpeechT5Tokenizer extends PreTrainedTokenizer {
        }
        class NougatTokenizer extends PreTrainedTokenizer {
        }
        class VitsTokenizer extends PreTrainedTokenizer {
          constructor(tokenizerJSON, tokenizerConfig) {
            super(tokenizerJSON, tokenizerConfig);
            this.decoder = new VitsDecoder({});
          }
        }
        class CohereTokenizer extends PreTrainedTokenizer {
        }
        class AutoTokenizer {
          static TOKENIZER_CLASS_MAPPING = {
            T5Tokenizer,
            DistilBertTokenizer,
            CamembertTokenizer,
            DebertaTokenizer,
            DebertaV2Tokenizer,
            BertTokenizer,
            HerbertTokenizer,
            ConvBertTokenizer,
            RoFormerTokenizer,
            XLMTokenizer,
            ElectraTokenizer,
            MobileBertTokenizer,
            SqueezeBertTokenizer,
            AlbertTokenizer,
            GPT2Tokenizer,
            BartTokenizer,
            MBartTokenizer,
            MBart50Tokenizer,
            RobertaTokenizer,
            WhisperTokenizer,
            CodeGenTokenizer,
            CLIPTokenizer,
            SiglipTokenizer,
            MarianTokenizer,
            BloomTokenizer,
            NllbTokenizer,
            M2M100Tokenizer,
            LlamaTokenizer,
            CodeLlamaTokenizer,
            XLMRobertaTokenizer,
            MPNetTokenizer,
            FalconTokenizer,
            GPTNeoXTokenizer,
            EsmTokenizer,
            Wav2Vec2CTCTokenizer,
            BlenderbotTokenizer,
            BlenderbotSmallTokenizer,
            SpeechT5Tokenizer,
            NougatTokenizer,
            VitsTokenizer,
            Qwen2Tokenizer,
            GemmaTokenizer,
            Grok1Tokenizer,
            CohereTokenizer,
            // Base case:
            PreTrainedTokenizer
          };
          /**
           * Instantiate one of the tokenizer classes of the library from a pretrained model.
           * 
           * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object
           * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)
           * 
           * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:
           * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.
           *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a
           *   user or organization name, like `dbmdz/bert-base-german-cased`.
           * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.
           * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.
           * 
           * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.
           */
          static async from_pretrained(pretrained_model_name_or_path, {
            progress_callback = null,
            config: config2 = null,
            cache_dir = null,
            local_files_only = false,
            revision = "main",
            legacy = null
          } = {}) {
            const [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {
              progress_callback,
              config: config2,
              cache_dir,
              local_files_only,
              revision,
              legacy
            });
            const tokenizerName = tokenizerConfig.tokenizer_class?.replace(/Fast$/, "") ?? "PreTrainedTokenizer";
            let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];
            if (!cls) {
              console.warn(`Unknown tokenizer class "${tokenizerName}", attempting to construct from base class.`);
              cls = PreTrainedTokenizer;
            }
            return new cls(tokenizerJSON, tokenizerConfig);
          }
        }
      }
    ),
    /***/
    "./src/utils/audio.js": (
      /*!****************************!*\
        !*** ./src/utils/audio.js ***!
        \****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          hamming: () => (
            /* binding */
            hamming
          ),
          /* harmony export */
          hanning: () => (
            /* binding */
            hanning
          ),
          /* harmony export */
          mel_filter_bank: () => (
            /* binding */
            mel_filter_bank
          ),
          /* harmony export */
          read_audio: () => (
            /* binding */
            read_audio
          ),
          /* harmony export */
          spectrogram: () => (
            /* binding */
            spectrogram
          ),
          /* harmony export */
          window_function: () => (
            /* binding */
            window_function
          )
          /* harmony export */
        });
        var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./hub.js */
          "./src/utils/hub.js"
        );
        var _maths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./maths.js */
          "./src/utils/maths.js"
        );
        var _core_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./core.js */
          "./src/utils/core.js"
        );
        var _tensor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./tensor.js */
          "./src/utils/tensor.js"
        );
        async function read_audio(url, sampling_rate) {
          if (typeof AudioContext === "undefined") {
            throw Error(
              "Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing."
            );
          }
          const response = await (await (0, _hub_js__WEBPACK_IMPORTED_MODULE_0__.getFile)(url)).arrayBuffer();
          const audioCTX = new AudioContext({ sampleRate: sampling_rate });
          if (typeof sampling_rate === "undefined") {
            console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`);
          }
          const decoded = await audioCTX.decodeAudioData(response);
          let audio;
          if (decoded.numberOfChannels === 2) {
            const SCALING_FACTOR = Math.sqrt(2);
            const left = decoded.getChannelData(0);
            const right = decoded.getChannelData(1);
            audio = new Float32Array(left.length);
            for (let i = 0; i < decoded.length; ++i) {
              audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;
            }
          } else {
            audio = decoded.getChannelData(0);
          }
          return audio;
        }
        function generalized_cosine_window(M, a_0) {
          if (M < 1) {
            return new Float64Array();
          }
          if (M === 1) {
            return new Float64Array([1]);
          }
          const a_1 = 1 - a_0;
          const factor = 2 * Math.PI / (M - 1);
          const cos_vals = new Float64Array(M);
          for (let i = 0; i < M; ++i) {
            cos_vals[i] = a_0 - a_1 * Math.cos(i * factor);
          }
          return cos_vals;
        }
        function hanning(M) {
          return generalized_cosine_window(M, 0.5);
        }
        function hamming(M) {
          return generalized_cosine_window(M, 0.54);
        }
        const HERTZ_TO_MEL_MAPPING = {
          "htk": (freq) => 2595 * Math.log10(1 + freq / 700),
          "kaldi": (freq) => 1127 * Math.log(1 + freq / 700),
          "slaney": (freq, min_log_hertz = 1e3, min_log_mel = 15, logstep = 27 / Math.log(6.4)) => freq >= min_log_hertz ? min_log_mel + Math.log(freq / min_log_hertz) * logstep : 3 * freq / 200
        };
        function hertz_to_mel(freq, mel_scale = "htk") {
          const fn = HERTZ_TO_MEL_MAPPING[mel_scale];
          if (!fn) {
            throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
          }
          return typeof freq === "number" ? fn(freq) : freq.map((x) => fn(x));
        }
        const MEL_TO_HERTZ_MAPPING = {
          "htk": (mels) => 700 * (10 ** (mels / 2595) - 1),
          "kaldi": (mels) => 700 * (Math.exp(mels / 1127) - 1),
          "slaney": (mels, min_log_hertz = 1e3, min_log_mel = 15, logstep = Math.log(6.4) / 27) => mels >= min_log_mel ? min_log_hertz * Math.exp(logstep * (mels - min_log_mel)) : 200 * mels / 3
        };
        function mel_to_hertz(mels, mel_scale = "htk") {
          const fn = MEL_TO_HERTZ_MAPPING[mel_scale];
          if (!fn) {
            throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
          }
          return typeof mels === "number" ? fn(mels) : mels.map((x) => fn(x));
        }
        function _create_triangular_filter_bank(fft_freqs, filter_freqs) {
          const filter_diff = Float64Array.from(
            { length: filter_freqs.length - 1 },
            (_, i) => filter_freqs[i + 1] - filter_freqs[i]
          );
          const slopes = Array.from({
            length: fft_freqs.length
          }, () => new Array(filter_freqs.length));
          for (let j = 0; j < fft_freqs.length; ++j) {
            const slope = slopes[j];
            for (let i = 0; i < filter_freqs.length; ++i) {
              slope[i] = filter_freqs[i] - fft_freqs[j];
            }
          }
          const numFreqs = filter_freqs.length - 2;
          const ret = Array.from({ length: numFreqs }, () => new Array(fft_freqs.length));
          for (let j = 0; j < fft_freqs.length; ++j) {
            const slope = slopes[j];
            for (let i = 0; i < numFreqs; ++i) {
              const down = -slope[i] / filter_diff[i];
              const up = slope[i + 2] / filter_diff[i + 1];
              ret[i][j] = Math.max(0, Math.min(down, up));
            }
          }
          return ret;
        }
        function linspace(start, end, num) {
          const step = (end - start) / (num - 1);
          return Float64Array.from({ length: num }, (_, i) => start + step * i);
        }
        function mel_filter_bank(num_frequency_bins, num_mel_filters, min_frequency, max_frequency, sampling_rate, norm = null, mel_scale = "htk", triangularize_in_mel_space = false) {
          if (norm !== null && norm !== "slaney") {
            throw new Error('norm must be one of null or "slaney"');
          }
          const mel_min = hertz_to_mel(min_frequency, mel_scale);
          const mel_max = hertz_to_mel(max_frequency, mel_scale);
          const mel_freqs = linspace(mel_min, mel_max, num_mel_filters + 2);
          let filter_freqs = mel_to_hertz(mel_freqs, mel_scale);
          let fft_freqs;
          if (triangularize_in_mel_space) {
            const fft_bin_width = sampling_rate / (num_frequency_bins * 2);
            fft_freqs = hertz_to_mel(Float64Array.from({ length: num_frequency_bins }, (_, i) => i * fft_bin_width), mel_scale);
            filter_freqs = mel_freqs;
          } else {
            fft_freqs = linspace(0, Math.floor(sampling_rate / 2), num_frequency_bins);
          }
          const mel_filters = _create_triangular_filter_bank(fft_freqs, filter_freqs);
          if (norm !== null && norm === "slaney") {
            for (let i = 0; i < num_mel_filters; ++i) {
              const filter = mel_filters[i];
              const enorm = 2 / (filter_freqs[i + 2] - filter_freqs[i]);
              for (let j = 0; j < num_frequency_bins; ++j) {
                filter[j] *= enorm;
              }
            }
          }
          return mel_filters;
        }
        function padReflect(array, left, right) {
          const padded = new array.constructor(array.length + left + right);
          const w = array.length - 1;
          for (let i = 0; i < array.length; ++i) {
            padded[left + i] = array[i];
          }
          for (let i = 1; i <= left; ++i) {
            padded[left - i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(i, w)];
          }
          for (let i = 1; i <= right; ++i) {
            padded[w + left + i] = array[(0, _core_js__WEBPACK_IMPORTED_MODULE_2__.calculateReflectOffset)(w - i, w)];
          }
          return padded;
        }
        function _db_conversion_helper(spectrogram2, factor, reference, min_value, db_range) {
          if (reference <= 0) {
            throw new Error("reference must be greater than zero");
          }
          if (min_value <= 0) {
            throw new Error("min_value must be greater than zero");
          }
          reference = Math.max(min_value, reference);
          const logReference = Math.log10(reference);
          for (let i = 0; i < spectrogram2.length; ++i) {
            spectrogram2[i] = factor * Math.log10(Math.max(min_value, spectrogram2[i]) - logReference);
          }
          if (db_range !== null) {
            if (db_range <= 0) {
              throw new Error("db_range must be greater than zero");
            }
            const maxValue = (0, _maths_js__WEBPACK_IMPORTED_MODULE_1__.max)(spectrogram2)[0] - db_range;
            for (let i = 0; i < spectrogram2.length; ++i) {
              spectrogram2[i] = Math.max(spectrogram2[i], maxValue);
            }
          }
          return spectrogram2;
        }
        function amplitude_to_db(spectrogram2, reference = 1, min_value = 1e-5, db_range = null) {
          return _db_conversion_helper(spectrogram2, 20, reference, min_value, db_range);
        }
        function power_to_db(spectrogram2, reference = 1, min_value = 1e-10, db_range = null) {
          return _db_conversion_helper(spectrogram2, 10, reference, min_value, db_range);
        }
        async function spectrogram(waveform, window2, frame_length, hop_length, {
          fft_length = null,
          power = 1,
          center = true,
          pad_mode = "reflect",
          onesided = true,
          preemphasis = null,
          mel_filters = null,
          mel_floor = 1e-10,
          log_mel = null,
          reference = 1,
          min_value = 1e-10,
          db_range = null,
          remove_dc_offset = null,
          // Custom parameters for efficiency reasons
          min_num_frames = null,
          max_num_frames = null,
          do_pad = true,
          transpose = false
        } = {}) {
          const window_length = window2.length;
          if (fft_length === null) {
            fft_length = frame_length;
          }
          if (frame_length > fft_length) {
            throw Error(`frame_length (${frame_length}) may not be larger than fft_length (${fft_length})`);
          }
          if (window_length !== frame_length) {
            throw new Error(`Length of the window (${window_length}) must equal frame_length (${frame_length})`);
          }
          if (hop_length <= 0) {
            throw new Error("hop_length must be greater than zero");
          }
          if (power === null && mel_filters !== null) {
            throw new Error(
              "You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue."
            );
          }
          if (center) {
            if (pad_mode !== "reflect") {
              throw new Error(`pad_mode="${pad_mode}" not implemented yet.`);
            }
            const half_window = Math.floor((fft_length - 1) / 2) + 1;
            waveform = padReflect(waveform, half_window, half_window);
          }
          let num_frames = Math.floor(1 + Math.floor((waveform.length - frame_length) / hop_length));
          if (min_num_frames !== null && num_frames < min_num_frames) {
            num_frames = min_num_frames;
          }
          const num_frequency_bins = onesided ? Math.floor(fft_length / 2) + 1 : fft_length;
          let d1 = num_frames;
          let d1Max = num_frames;
          if (max_num_frames !== null) {
            if (max_num_frames > num_frames) {
              if (do_pad) {
                d1Max = max_num_frames;
              }
            } else {
              d1Max = d1 = max_num_frames;
            }
          }
          const fft = new _maths_js__WEBPACK_IMPORTED_MODULE_1__.FFT(fft_length);
          const inputBuffer = new Float64Array(fft_length);
          const outputBuffer = new Float64Array(fft.outputBufferSize);
          const transposedMagnitudeData = new Float32Array(num_frequency_bins * d1Max);
          for (let i = 0; i < d1; ++i) {
            const offset = i * hop_length;
            const buffer_size = Math.min(waveform.length - offset, frame_length);
            if (buffer_size !== frame_length) {
              inputBuffer.fill(0, 0, frame_length);
            }
            for (let j = 0; j < buffer_size; ++j) {
              inputBuffer[j] = waveform[offset + j];
            }
            if (remove_dc_offset) {
              let sum = 0;
              for (let j = 0; j < buffer_size; ++j) {
                sum += inputBuffer[j];
              }
              const mean = sum / buffer_size;
              for (let j = 0; j < buffer_size; ++j) {
                inputBuffer[j] -= mean;
              }
            }
            if (preemphasis !== null) {
              for (let j = buffer_size - 1; j >= 1; --j) {
                inputBuffer[j] -= preemphasis * inputBuffer[j - 1];
              }
              inputBuffer[0] *= 1 - preemphasis;
            }
            for (let j = 0; j < window2.length; ++j) {
              inputBuffer[j] *= window2[j];
            }
            fft.realTransform(outputBuffer, inputBuffer);
            for (let j = 0; j < num_frequency_bins; ++j) {
              const j2 = j << 1;
              transposedMagnitudeData[j * d1Max + i] = outputBuffer[j2] ** 2 + outputBuffer[j2 + 1] ** 2;
            }
          }
          if (power !== null && power !== 2) {
            const pow = 2 / power;
            for (let i = 0; i < transposedMagnitudeData.length; ++i) {
              transposedMagnitudeData[i] **= pow;
            }
          }
          const num_mel_filters = mel_filters.length;
          let mel_spec = await (0, _tensor_js__WEBPACK_IMPORTED_MODULE_3__.matmul)(
            // TODO: Make `mel_filters` a Tensor during initialization
            new _tensor_js__WEBPACK_IMPORTED_MODULE_3__.Tensor("float32", mel_filters.flat(), [num_mel_filters, num_frequency_bins]),
            new _tensor_js__WEBPACK_IMPORTED_MODULE_3__.Tensor("float32", transposedMagnitudeData, [num_frequency_bins, d1Max])
          );
          if (transpose) {
            mel_spec = mel_spec.transpose(1, 0);
          }
          const mel_spec_data = (
            /** @type {Float32Array} */
            mel_spec.data
          );
          for (let i = 0; i < mel_spec_data.length; ++i) {
            mel_spec_data[i] = Math.max(mel_floor, mel_spec_data[i]);
          }
          if (power !== null && log_mel !== null) {
            const o = Math.min(mel_spec_data.length, d1 * num_mel_filters);
            switch (log_mel) {
              case "log":
                for (let i = 0; i < o; ++i) {
                  mel_spec_data[i] = Math.log(mel_spec_data[i]);
                }
                break;
              case "log10":
                for (let i = 0; i < o; ++i) {
                  mel_spec_data[i] = Math.log10(mel_spec_data[i]);
                }
                break;
              case "dB":
                if (power === 1) {
                  amplitude_to_db(mel_spec_data, reference, min_value, db_range);
                } else if (power === 2) {
                  power_to_db(mel_spec_data, reference, min_value, db_range);
                } else {
                  throw new Error(`Cannot use log_mel option '${log_mel}' with power ${power}`);
                }
                break;
              default:
                throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${log_mel}'`);
            }
          }
          return mel_spec;
        }
        function window_function(window_length, name, {
          periodic = true,
          frame_length = null,
          center = true
        } = {}) {
          const length = periodic ? window_length + 1 : window_length;
          let window2;
          switch (name) {
            case "boxcar":
              window2 = new Float64Array(length).fill(1);
              break;
            case "hann":
            case "hann_window":
              window2 = hanning(length);
              break;
            case "hamming":
              window2 = hamming(length);
              break;
            case "povey":
              window2 = hanning(length).map((x) => Math.pow(x, 0.85));
              break;
            default:
              throw new Error(`Unknown window type ${name}.`);
          }
          if (periodic) {
            window2 = window2.subarray(0, window_length);
          }
          if (frame_length === null) {
            return window2;
          }
          if (window_length > frame_length) {
            throw new Error(`Length of the window (${window_length}) may not be larger than frame_length (${frame_length})`);
          }
          return window2;
        }
      }
    ),
    /***/
    "./src/utils/constants.js": (
      /*!********************************!*\
        !*** ./src/utils/constants.js ***!
        \********************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          GITHUB_ISSUE_URL: () => (
            /* binding */
            GITHUB_ISSUE_URL
          )
          /* harmony export */
        });
        const GITHUB_ISSUE_URL = "https://github.com/huggingface/transformers.js/issues/new/choose";
      }
    ),
    /***/
    "./src/utils/core.js": (
      /*!***************************!*\
        !*** ./src/utils/core.js ***!
        \***************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          calculateDimensions: () => (
            /* binding */
            calculateDimensions
          ),
          /* harmony export */
          calculateReflectOffset: () => (
            /* binding */
            calculateReflectOffset
          ),
          /* harmony export */
          dispatchCallback: () => (
            /* binding */
            dispatchCallback
          ),
          /* harmony export */
          escapeRegExp: () => (
            /* binding */
            escapeRegExp
          ),
          /* harmony export */
          isIntegralNumber: () => (
            /* binding */
            isIntegralNumber
          ),
          /* harmony export */
          isTypedArray: () => (
            /* binding */
            isTypedArray
          ),
          /* harmony export */
          len: () => (
            /* binding */
            len
          ),
          /* harmony export */
          mergeArrays: () => (
            /* binding */
            mergeArrays
          ),
          /* harmony export */
          pick: () => (
            /* binding */
            pick
          ),
          /* harmony export */
          pop: () => (
            /* binding */
            pop
          ),
          /* harmony export */
          product: () => (
            /* binding */
            product
          ),
          /* harmony export */
          reverseDictionary: () => (
            /* binding */
            reverseDictionary
          )
          /* harmony export */
        });
        function dispatchCallback(progress_callback, data) {
          if (progress_callback) progress_callback(data);
        }
        function reverseDictionary(data) {
          return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));
        }
        function escapeRegExp(string) {
          return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        }
        function isTypedArray(val) {
          return val?.prototype?.__proto__?.constructor?.name === "TypedArray";
        }
        function isIntegralNumber(x) {
          return Number.isInteger(x) || typeof x === "bigint";
        }
        function calculateDimensions(arr) {
          const dimensions = [];
          let current = arr;
          while (Array.isArray(current)) {
            dimensions.push(current.length);
            current = current[0];
          }
          return dimensions;
        }
        function pop(obj, key, defaultValue = void 0) {
          const value = obj[key];
          if (value !== void 0) {
            delete obj[key];
            return value;
          }
          if (defaultValue === void 0) {
            throw Error(`Key ${key} does not exist in object.`);
          }
          return defaultValue;
        }
        function mergeArrays(...arrs) {
          return Array.prototype.concat.apply([], arrs);
        }
        function product(...a) {
          return a.reduce((a2, b) => a2.flatMap((d) => b.map((e) => [d, e])));
        }
        function calculateReflectOffset(i, w) {
          return Math.abs((i + w) % (2 * w) - w);
        }
        function pick(o, props) {
          return Object.assign(
            {},
            ...props.map((prop) => {
              if (o[prop] !== void 0) {
                return { [prop]: o[prop] };
              }
            })
          );
        }
        function len(s) {
          let length = 0;
          for (const c of s) ++length;
          return length;
        }
      }
    ),
    /***/
    "./src/utils/data-structures.js": (
      /*!**************************************!*\
        !*** ./src/utils/data-structures.js ***!
        \**************************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          CharTrie: () => (
            /* binding */
            CharTrie
          ),
          /* harmony export */
          PriorityQueue: () => (
            /* binding */
            PriorityQueue
          ),
          /* harmony export */
          TokenLattice: () => (
            /* binding */
            TokenLattice
          )
          /* harmony export */
        });
        class PriorityQueue {
          /**
           * Create a new PriorityQueue.
           * @param {function(any, any): boolean} comparator Comparator function to determine priority. Defaults to a MaxHeap.
           */
          constructor(comparator = (a, b) => a > b, maxSize = Infinity) {
            this._heap = [];
            this._comparator = comparator;
            this._maxSize = maxSize;
          }
          /**
           * The size of the queue
           */
          get size() {
            return this._heap.length;
          }
          /**
           * Check if the queue is empty.
           * @returns {boolean} `true` if the queue is empty, `false` otherwise.
           */
          isEmpty() {
            return this.size === 0;
          }
          /**
           * Return the element with the highest priority in the queue.
           * @returns {any} The highest priority element in the queue.
           */
          peek() {
            return this._heap[0];
          }
          /**
           * Add one or more elements to the queue.
           * @param  {...any} values The values to push into the queue.
           * @returns {number} The new size of the queue.
           */
          push(...values) {
            return this.extend(values);
          }
          /**
           * Add multiple elements to the queue.
           * @param {any[]} values The values to push into the queue.
           * @returns {number} The new size of the queue.
           */
          extend(values) {
            for (const value of values) {
              if (this.size < this._maxSize) {
                this._heap.push(value);
                this._siftUp();
              } else {
                const smallest = this._smallest();
                if (this._comparator(value, this._heap[smallest])) {
                  this._heap[smallest] = value;
                  this._siftUpFrom(smallest);
                }
              }
            }
            return this.size;
          }
          /**
           * Remove and return the element with the highest priority in the queue.
           * @returns {any} The element with the highest priority in the queue.
           */
          pop() {
            const poppedValue = this.peek();
            const bottom = this.size - 1;
            if (bottom > 0) {
              this._swap(0, bottom);
            }
            this._heap.pop();
            this._siftDown();
            return poppedValue;
          }
          /**
           * Replace the element with the highest priority in the queue with a new value.
           * @param {*} value The new value.
           * @returns {*} The replaced value.
           */
          replace(value) {
            const replacedValue = this.peek();
            this._heap[0] = value;
            this._siftDown();
            return replacedValue;
          }
          /**
           * Compute the index for the parent of the node at index `i`.
           * @param {number} i The index of the node to get the parent of.
           * @returns {number} The index of the parent node.
           * @private
           */
          _parent(i) {
            return (i + 1 >>> 1) - 1;
          }
          /**
           * Compute the index for the left child of the node at index `i`.
           * @param {number} i The index of the node to get the left child of.
           * @returns {number} The index of the left child.
           * @private
           */
          _left(i) {
            return (i << 1) + 1;
          }
          /**
           * Compute the index for the right child of the node at index `i`.
           * @param {number} i The index of the node to get the right child of.
           * @returns {number} The index of the right child.
           * @private
           */
          _right(i) {
            return i + 1 << 1;
          }
          /**
           * Check if the element at index `i` is greater than the element at index `j`.
           * @param {number} i The index of the first element to compare.
           * @param {number} j The index of the second element to compare.
           * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.
           * @private
           */
          _greater(i, j) {
            return this._comparator(this._heap[i], this._heap[j]);
          }
          /**
           * Swap the elements at indices `i` and `j`.
           * @param {number} i The index of the first element to swap.
           * @param {number} j The index of the second element to swap.
           * @private
           */
          _swap(i, j) {
            const temp = this._heap[i];
            this._heap[i] = this._heap[j];
            this._heap[j] = temp;
          }
          /**
           * Maintain the heap property by updating positions in the heap,
           * starting at the last element and moving up the heap.
           * @private
           */
          _siftUp() {
            this._siftUpFrom(this.size - 1);
          }
          /**
           * Helper function to sift up from a given node.
           * @param {number} node The index of the node to start sifting up from.
           */
          _siftUpFrom(node) {
            while (node > 0 && this._greater(node, this._parent(node))) {
              this._swap(node, this._parent(node));
              node = this._parent(node);
            }
          }
          /**
           * Maintain the heap property by updating positions in the heap,
           * starting at the first element and moving down the heap.
           * @private
           */
          _siftDown() {
            let node = 0;
            while (this._left(node) < this.size && this._greater(this._left(node), node) || this._right(node) < this.size && this._greater(this._right(node), node)) {
              const maxChild = this._right(node) < this.size && this._greater(this._right(node), this._left(node)) ? this._right(node) : this._left(node);
              this._swap(node, maxChild);
              node = maxChild;
            }
          }
          /**
           * Get the index of the smallest element in the heap. Since we use an array-based heap,
           * the index can be computed without needing to traverse the heap.
           * @private
           */
          _smallest() {
            return 2 ** Math.floor(Math.log2(this.size)) - 1;
          }
        }
        class CharTrie {
          constructor() {
            this.root = CharTrieNode.default();
          }
          /**
           * Adds one or more `texts` to the trie.
           * @param {string[]} texts The strings to add to the trie.
           */
          extend(texts) {
            for (const text of texts) {
              this.push(text);
            }
          }
          /**
           * Adds text to the trie.
           * @param {string} text The string to add to the trie.
           */
          push(text) {
            let node = this.root;
            for (const ch of text) {
              let child = node.children.get(ch);
              if (child === void 0) {
                child = CharTrieNode.default();
                node.children.set(ch, child);
              }
              node = child;
            }
            node.isLeaf = true;
          }
          /**
           * Searches the trie for all strings with a common prefix of `text`.
           * @param {string} text The common prefix to search for.
           * @yields {string} Each string in the trie that has `text` as a prefix.
           */
          *commonPrefixSearch(text) {
            let node = this.root;
            if (node === void 0) return;
            let prefix = "";
            for (const ch of text) {
              prefix += ch;
              node = node.children.get(ch);
              if (node === void 0) return;
              if (node.isLeaf) {
                yield prefix;
              }
            }
          }
        }
        class CharTrieNode {
          /**
           * Create a new CharTrieNode.
           * @param {boolean} isLeaf Whether the node is a leaf node or not.
           * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.
           */
          constructor(isLeaf, children) {
            this.isLeaf = isLeaf;
            this.children = children;
          }
          /**
           * Returns a new `CharTrieNode` instance with default values.
           * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.
           */
          static default() {
            return new CharTrieNode(false, /* @__PURE__ */ new Map());
          }
        }
        class TokenLattice {
          /**
           * Creates a new TokenLattice instance.
           *
           * @param {string} sentence The input sentence to be tokenized.
           * @param {number} bosTokenId The beginning-of-sequence token ID.
           * @param {number} eosTokenId The end-of-sequence token ID.
           */
          constructor(sentence, bosTokenId, eosTokenId) {
            this.chars = Array.from(sentence);
            this.len = this.chars.length;
            this.bosTokenId = bosTokenId;
            this.eosTokenId = eosTokenId;
            this.nodes = [];
            this.beginNodes = Array.from({ length: this.len + 1 }, () => []);
            this.endNodes = Array.from({ length: this.len + 1 }, () => []);
            const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0);
            const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0);
            this.nodes.push(bos.clone());
            this.nodes.push(eos.clone());
            this.beginNodes[this.len].push(eos);
            this.endNodes[0].push(bos);
          }
          /**
           * Inserts a new token node into the token lattice.
           *
           * @param {number} pos The starting position of the token.
           * @param {number} length The length of the token.
           * @param {number} score The score of the token.
           * @param {number} tokenId The token ID of the token.
           */
          insert(pos, length, score, tokenId) {
            const nodeId = this.nodes.length;
            const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);
            this.beginNodes[pos].push(node);
            this.endNodes[pos + length].push(node);
            this.nodes.push(node);
          }
          /**
           * Implements the Viterbi algorithm to compute the most likely sequence of tokens.
           *
           * @returns {TokenLatticeNode[]} The most likely sequence of tokens.
           */
          viterbi() {
            const len = this.len;
            let pos = 0;
            while (pos <= len) {
              if (this.beginNodes[pos].length == 0) {
                return [];
              }
              for (let rnode of this.beginNodes[pos]) {
                rnode.prev = null;
                let bestScore = 0;
                let bestNode = null;
                for (let lnode of this.endNodes[pos]) {
                  const score = lnode.backtraceScore + rnode.score;
                  if (bestNode === null || score > bestScore) {
                    bestNode = lnode.clone();
                    bestScore = score;
                  }
                }
                if (bestNode !== null) {
                  rnode.prev = bestNode;
                  rnode.backtraceScore = bestScore;
                } else {
                  return [];
                }
              }
              ++pos;
            }
            const results = [];
            const root = this.beginNodes[len][0];
            const prev = root.prev;
            if (prev === null) {
              return [];
            }
            let node = prev.clone();
            while (node.prev !== null) {
              results.push(node.clone());
              const n = node.clone();
              node = n.prev.clone();
            }
            results.reverse();
            return results;
          }
          /**
           * @param {TokenLatticeNode} node
           * @returns {string} The array of nodes representing the most likely sequence of tokens.
           */
          piece(node) {
            return this.chars.slice(node.pos, node.pos + node.length).join("");
          }
          /**
           * @returns {string[]} The most likely sequence of tokens.
           */
          tokens() {
            const nodes = this.viterbi();
            return nodes.map((x) => this.piece(x));
          }
          /**
           * @returns {number[]} The most likely sequence of token ids.
           */
          tokenIds() {
            const nodes = this.viterbi();
            return nodes.map((x) => x.tokenId);
          }
        }
        class TokenLatticeNode {
          /**
           * Represents a node in a token lattice for a given sentence.
           * @param {number} tokenId The ID of the token associated with this node.
           * @param {number} nodeId The ID of this node.
           * @param {number} pos The starting position of the token in the sentence.
           * @param {number} length The length of the token.
           * @param {number} score The score associated with the token.
           */
          constructor(tokenId, nodeId, pos, length, score) {
            this.tokenId = tokenId;
            this.nodeId = nodeId;
            this.pos = pos;
            this.length = length;
            this.score = score;
            this.prev = null;
            this.backtraceScore = 0;
          }
          /**
           * Returns a clone of this node.
           * @returns {TokenLatticeNode} A clone of this node.
           */
          clone() {
            const n = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);
            n.prev = this.prev;
            n.backtraceScore = this.backtraceScore;
            return n;
          }
        }
      }
    ),
    /***/
    "./src/utils/devices.js": (
      /*!******************************!*\
        !*** ./src/utils/devices.js ***!
        \******************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          DEVICE_TYPES: () => (
            /* binding */
            DEVICE_TYPES
          )
          /* harmony export */
        });
        const DEVICE_TYPES = Object.freeze({
          auto: "auto",
          // Auto-detect based on device and environment
          gpu: "gpu",
          // Auto-detect GPU
          cpu: "cpu",
          // CPU
          wasm: "wasm",
          // WebAssembly
          webgpu: "webgpu",
          // WebGPU
          cuda: "cuda",
          // CUDA
          dml: "dml",
          // DirectML
          webnn: "webnn",
          // WebNN (default)
          "webnn-npu": "webnn-npu",
          // WebNN NPU
          "webnn-gpu": "webnn-gpu",
          // WebNN GPU
          "webnn-cpu": "webnn-cpu"
          // WebNN CPU
        });
      }
    ),
    /***/
    "./src/utils/dtypes.js": (
      /*!*****************************!*\
        !*** ./src/utils/dtypes.js ***!
        \*****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          DATA_TYPES: () => (
            /* binding */
            DATA_TYPES
          ),
          /* harmony export */
          DEFAULT_DEVICE_DTYPE_MAPPING: () => (
            /* binding */
            DEFAULT_DEVICE_DTYPE_MAPPING
          ),
          /* harmony export */
          DEFAULT_DTYPE_SUFFIX_MAPPING: () => (
            /* binding */
            DEFAULT_DTYPE_SUFFIX_MAPPING
          ),
          /* harmony export */
          isWebGpuFp16Supported: () => (
            /* binding */
            isWebGpuFp16Supported
          )
          /* harmony export */
        });
        var _env_js__WEBPACK_IMPORTED_MODULE_0__2 = __webpack_require__2(
          /*! ../env.js */
          "./src/env.js"
        );
        var _devices_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ./devices.js */
          "./src/utils/devices.js"
        );
        const isWebGpuFp16Supported = /* @__PURE__ */ function() {
          let cachedResult;
          return async function() {
            if (cachedResult === void 0) {
              if (!_env_js__WEBPACK_IMPORTED_MODULE_0__2.apis.IS_WEBGPU_AVAILABLE) {
                cachedResult = false;
              } else {
                try {
                  const adapter = await navigator.gpu.requestAdapter();
                  cachedResult = adapter.features.has("shader-f16");
                } catch (e) {
                  cachedResult = false;
                }
              }
            }
            return cachedResult;
          };
        }();
        const DATA_TYPES = Object.freeze({
          fp32: "fp32",
          fp16: "fp16",
          q8: "q8",
          int8: "int8",
          uint8: "uint8",
          q4: "q4",
          bnb4: "bnb4",
          q4f16: "q4f16"
          // fp16 model with int4 block weight quantization
        });
        const DEFAULT_DEVICE_DTYPE_MAPPING = Object.freeze({
          // NOTE: If not specified, will default to fp32
          [_devices_js__WEBPACK_IMPORTED_MODULE_1__.DEVICE_TYPES.wasm]: DATA_TYPES.q8
        });
        const DEFAULT_DTYPE_SUFFIX_MAPPING = Object.freeze({
          [DATA_TYPES.fp32]: "",
          [DATA_TYPES.fp16]: "_fp16",
          [DATA_TYPES.int8]: "_int8",
          [DATA_TYPES.uint8]: "_uint8",
          [DATA_TYPES.q8]: "_quantized",
          [DATA_TYPES.q4]: "_q4",
          [DATA_TYPES.q4f16]: "_q4f16",
          [DATA_TYPES.bnb4]: "_bnb4"
        });
      }
    ),
    /***/
    "./src/utils/generic.js": (
      /*!******************************!*\
        !*** ./src/utils/generic.js ***!
        \******************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Callable: () => (
            /* binding */
            Callable
          )
          /* harmony export */
        });
        const Callable = (
          /** @type {any} */
          class {
            /**
            * Creates a new instance of the Callable class.
            */
            constructor() {
              let closure = function(...args) {
                return closure._call(...args);
              };
              return Object.setPrototypeOf(closure, new.target.prototype);
            }
            /**
             * This method should be implemented in subclasses to provide the
             * functionality of the callable object.
             *
             * @param {any[]} args
             * @throws {Error} If the subclass does not implement the `_call` method.
             */
            _call(...args) {
              throw Error("Must implement _call method in subclass");
            }
          }
        );
      }
    ),
    /***/
    "./src/utils/hub.js": (
      /*!**************************!*\
        !*** ./src/utils/hub.js ***!
        \**************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          getFile: () => (
            /* binding */
            getFile
          ),
          /* harmony export */
          getModelFile: () => (
            /* binding */
            getModelFile
          ),
          /* harmony export */
          getModelJSON: () => (
            /* binding */
            getModelJSON
          )
          /* harmony export */
        });
        var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! fs */
          "fs"
        );
        var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! path */
          "path"
        );
        var _env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ../env.js */
          "./src/env.js"
        );
        var _core_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! ./core.js */
          "./src/utils/core.js"
        );
        const CONTENT_TYPE_MAP = {
          "txt": "text/plain",
          "html": "text/html",
          "css": "text/css",
          "js": "text/javascript",
          "json": "application/json",
          "png": "image/png",
          "jpg": "image/jpeg",
          "jpeg": "image/jpeg",
          "gif": "image/gif"
        };
        class FileResponse {
          /**
           * Creates a new `FileResponse` object.
           * @param {string|URL} filePath
           */
          constructor(filePath) {
            this.filePath = filePath;
            this.headers = new Headers();
            this.exists = fs__WEBPACK_IMPORTED_MODULE_0__["default"].existsSync(filePath);
            if (this.exists) {
              this.status = 200;
              this.statusText = "OK";
              let stats = fs__WEBPACK_IMPORTED_MODULE_0__["default"].statSync(filePath);
              this.headers.set("content-length", stats.size.toString());
              this.updateContentType();
              let self2 = this;
              this.body = new ReadableStream({
                start(controller) {
                  self2.arrayBuffer().then((buffer2) => {
                    controller.enqueue(new Uint8Array(buffer2));
                    controller.close();
                  });
                }
              });
            } else {
              this.status = 404;
              this.statusText = "Not Found";
              this.body = null;
            }
          }
          /**
           * Updates the 'content-type' header property of the response based on the extension of
           * the file specified by the filePath property of the current object.
           * @returns {void}
           */
          updateContentType() {
            const extension = this.filePath.toString().split(".").pop().toLowerCase();
            this.headers.set("content-type", CONTENT_TYPE_MAP[extension] ?? "application/octet-stream");
          }
          /**
           * Clone the current FileResponse object.
           * @returns {FileResponse} A new FileResponse object with the same properties as the current object.
           */
          clone() {
            let response = new FileResponse(this.filePath);
            response.exists = this.exists;
            response.status = this.status;
            response.statusText = this.statusText;
            response.headers = new Headers(this.headers);
            return response;
          }
          /**
           * Reads the contents of the file specified by the filePath property and returns a Promise that
           * resolves with an ArrayBuffer containing the file's contents.
           * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.
           * @throws {Error} If the file cannot be read.
           */
          async arrayBuffer() {
            const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath);
            return data.buffer;
          }
          /**
           * Reads the contents of the file specified by the filePath property and returns a Promise that
           * resolves with a Blob containing the file's contents.
           * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.
           * @throws {Error} If the file cannot be read.
           */
          async blob() {
            const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath);
            return new Blob([data], { type: this.headers.get("content-type") });
          }
          /**
           * Reads the contents of the file specified by the filePath property and returns a Promise that
           * resolves with a string containing the file's contents.
           * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.
           * @throws {Error} If the file cannot be read.
           */
          async text() {
            const data = await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.readFile(this.filePath, "utf8");
            return data;
          }
          /**
           * Reads the contents of the file specified by the filePath property and returns a Promise that
           * resolves with a parsed JavaScript object containing the file's contents.
           * 
           * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.
           * @throws {Error} If the file cannot be read.
           */
          async json() {
            return JSON.parse(await this.text());
          }
        }
        function isValidUrl(string, protocols = null, validHosts = null) {
          let url;
          try {
            url = new URL(string);
          } catch (_) {
            return false;
          }
          if (protocols && !protocols.includes(url.protocol)) {
            return false;
          }
          if (validHosts && !validHosts.includes(url.hostname)) {
            return false;
          }
          return true;
        }
        async function getFile(urlOrPath) {
          if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFS && !isValidUrl(urlOrPath, ["http:", "https:", "blob:"])) {
            return new FileResponse(urlOrPath);
          } else if (typeof process !== "undefined" && process?.release?.name === "node") {
            const IS_CI = !!process.env?.TESTING_REMOTELY;
            const version = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.version;
            const headers = new Headers();
            headers.set("User-Agent", `transformers.js/${version}; is_ci/${IS_CI};`);
            const isHFURL = isValidUrl(urlOrPath, ["http:", "https:"], ["huggingface.co", "hf.co"]);
            if (isHFURL) {
              const token = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;
              if (token) {
                headers.set("Authorization", `Bearer ${token}`);
              }
            }
            return fetch(urlOrPath, { headers });
          } else {
            return fetch(urlOrPath);
          }
        }
        const ERROR_MAPPING = {
          // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)
          400: "Bad request error occurred while trying to load file",
          401: "Unauthorized access to file",
          403: "Forbidden access to file",
          404: "Could not locate file",
          408: "Request timeout error occurred while trying to load file",
          // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)
          500: "Internal server error error occurred while trying to load file",
          502: "Bad gateway error occurred while trying to load file",
          503: "Service unavailable error occurred while trying to load file",
          504: "Gateway timeout error occurred while trying to load file"
        };
        function handleError(status, remoteURL, fatal) {
          if (!fatal) {
            return null;
          }
          const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;
          throw Error(`${message}: "${remoteURL}".`);
        }
        class FileCache {
          /**
           * Instantiate a `FileCache` object.
           * @param {string} path 
           */
          constructor(path5) {
            this.path = path5;
          }
          /**
           * Checks whether the given request is in the cache.
           * @param {string} request 
           * @returns {Promise<FileResponse | undefined>}
           */
          async match(request) {
            let filePath = path__WEBPACK_IMPORTED_MODULE_1__["default"].join(this.path, request);
            let file = new FileResponse(filePath);
            if (file.exists) {
              return file;
            } else {
              return void 0;
            }
          }
          /**
           * Adds the given response to the cache.
           * @param {string} request 
           * @param {Response|FileResponse} response 
           * @returns {Promise<void>}
           */
          async put(request, response) {
            const buffer2 = Buffer.from(await response.arrayBuffer());
            let outputPath = path__WEBPACK_IMPORTED_MODULE_1__["default"].join(this.path, request);
            try {
              await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.mkdir(path__WEBPACK_IMPORTED_MODULE_1__["default"].dirname(outputPath), { recursive: true });
              await fs__WEBPACK_IMPORTED_MODULE_0__["default"].promises.writeFile(outputPath, buffer2);
            } catch (err) {
              console.warn("An error occurred while writing the file to cache:", err);
            }
          }
          // TODO add the rest?
          // addAll(requests: RequestInfo[]): Promise<void>;
          // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;
          // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;
          // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;
          // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;
        }
        async function tryCache(cache, ...names5) {
          for (let name of names5) {
            try {
              let result = await cache.match(name);
              if (result) return result;
            } catch (e) {
              continue;
            }
          }
          return void 0;
        }
        async function getModelFile(path_or_repo_id, filename, fatal = true, options2 = {}) {
          if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {
            if (options2.local_files_only) {
              throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");
            } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
              throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.");
            }
          }
          (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options2.progress_callback, {
            status: "initiate",
            name: path_or_repo_id,
            file: filename
          });
          let cache;
          if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useBrowserCache) {
            if (typeof caches === "undefined") {
              throw Error("Browser cache is not available in this environment.");
            }
            try {
              cache = await caches.open("transformers-cache");
            } catch (e) {
              console.warn("An error occurred while opening the browser cache:", e);
            }
          }
          if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useFSCache) {
            cache = new FileCache(options2.cache_dir ?? _env_js__WEBPACK_IMPORTED_MODULE_2__.env.cacheDir);
          }
          if (!cache && _env_js__WEBPACK_IMPORTED_MODULE_2__.env.useCustomCache) {
            if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache) {
              throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");
            }
            if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.match || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache.put) {
              throw new Error(
                "`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache"
              );
            }
            cache = _env_js__WEBPACK_IMPORTED_MODULE_2__.env.customCache;
          }
          const revision = options2.revision ?? "main";
          let requestURL = pathJoin(path_or_repo_id, filename);
          let localPath = pathJoin(_env_js__WEBPACK_IMPORTED_MODULE_2__.env.localModelPath, requestURL);
          let remoteURL = pathJoin(
            _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remoteHost,
            _env_js__WEBPACK_IMPORTED_MODULE_2__.env.remotePathTemplate.replaceAll("{model}", path_or_repo_id).replaceAll("{revision}", encodeURIComponent(revision)),
            filename
          );
          let fsCacheKey = revision === "main" ? requestURL : pathJoin(path_or_repo_id, revision, filename);
          let cacheKey2;
          let proposedCacheKey = cache instanceof FileCache ? fsCacheKey : remoteURL;
          let toCacheResponse = false;
          let response;
          if (cache) {
            response = await tryCache(cache, localPath, proposedCacheKey);
          }
          const cacheHit = response !== void 0;
          if (response === void 0) {
            if (_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowLocalModels) {
              const isURL = isValidUrl(requestURL, ["http:", "https:"]);
              if (!isURL) {
                try {
                  response = await getFile(localPath);
                  cacheKey2 = localPath;
                } catch (e) {
                  console.warn(`Unable to load from local path "${localPath}": "${e}"`);
                }
              } else if (options2.local_files_only) {
                throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${requestURL}.`);
              } else if (!_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
                throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${requestURL}.`);
              }
            }
            if (response === void 0 || response.status === 404) {
              if (options2.local_files_only || !_env_js__WEBPACK_IMPORTED_MODULE_2__.env.allowRemoteModels) {
                if (fatal) {
                  throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${localPath}".`);
                } else {
                  return null;
                }
              }
              response = await getFile(remoteURL);
              if (response.status !== 200) {
                return handleError(response.status, remoteURL, fatal);
              }
              cacheKey2 = proposedCacheKey;
            }
            toCacheResponse = cache && typeof Response !== "undefined" && response instanceof Response && response.status === 200;
          }
          (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options2.progress_callback, {
            status: "download",
            name: path_or_repo_id,
            file: filename
          });
          const progressInfo = {
            status: "progress",
            name: path_or_repo_id,
            file: filename
          };
          let buffer2;
          if (!options2.progress_callback) {
            buffer2 = new Uint8Array(await response.arrayBuffer());
          } else if (cacheHit && typeof navigator !== "undefined" && /firefox/i.test(navigator.userAgent)) {
            buffer2 = new Uint8Array(await response.arrayBuffer());
            (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options2.progress_callback, {
              ...progressInfo,
              progress: 100,
              loaded: buffer2.length,
              total: buffer2.length
            });
          } else {
            buffer2 = await readResponse(response, (data) => {
              (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options2.progress_callback, {
                ...progressInfo,
                ...data
              });
            });
          }
          if (
            // Only cache web responses
            // i.e., do not cache FileResponses (prevents duplication)
            toCacheResponse && cacheKey2 && // Check again whether request is in cache. If not, we add the response to the cache
            await cache.match(cacheKey2) === void 0
          ) {
            await cache.put(cacheKey2, new Response(buffer2, {
              headers: response.headers
            })).catch((err) => {
              console.warn(`Unable to add response to browser cache: ${err}.`);
            });
          }
          (0, _core_js__WEBPACK_IMPORTED_MODULE_3__.dispatchCallback)(options2.progress_callback, {
            status: "done",
            name: path_or_repo_id,
            file: filename
          });
          return buffer2;
        }
        async function getModelJSON(modelPath, fileName, fatal = true, options2 = {}) {
          let buffer2 = await getModelFile(modelPath, fileName, fatal, options2);
          if (buffer2 === null) {
            return {};
          }
          let decoder = new TextDecoder("utf-8");
          let jsonData = decoder.decode(buffer2);
          return JSON.parse(jsonData);
        }
        async function readResponse(response, progress_callback) {
          const contentLength = response.headers.get("Content-Length");
          if (contentLength === null) {
            console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");
          }
          let total = parseInt(contentLength ?? "0");
          let buffer2 = new Uint8Array(total);
          let loaded = 0;
          const reader = response.body.getReader();
          async function read() {
            const { done, value } = await reader.read();
            if (done) return;
            let newLoaded = loaded + value.length;
            if (newLoaded > total) {
              total = newLoaded;
              let newBuffer = new Uint8Array(total);
              newBuffer.set(buffer2);
              buffer2 = newBuffer;
            }
            buffer2.set(value, loaded);
            loaded = newLoaded;
            const progress = loaded / total * 100;
            progress_callback({
              progress,
              loaded,
              total
            });
            return read();
          }
          await read();
          return buffer2;
        }
        function pathJoin(...parts) {
          parts = parts.map((part, index2) => {
            if (index2) {
              part = part.replace(new RegExp("^/"), "");
            }
            if (index2 !== parts.length - 1) {
              part = part.replace(new RegExp("/$"), "");
            }
            return part;
          });
          return parts.join("/");
        }
      }
    ),
    /***/
    "./src/utils/image.js": (
      /*!****************************!*\
        !*** ./src/utils/image.js ***!
        \****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          RawImage: () => (
            /* binding */
            RawImage
          )
          /* harmony export */
        });
        var _hub_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./hub.js */
          "./src/utils/hub.js"
        );
        var _env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../env.js */
          "./src/env.js"
        );
        var _tensor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ./tensor.js */
          "./src/utils/tensor.js"
        );
        var sharp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__2(
          /*! sharp */
          "sharp"
        );
        const BROWSER_ENV = typeof self !== "undefined";
        const WEBWORKER_ENV = BROWSER_ENV && self.constructor.name === "DedicatedWorkerGlobalScope";
        let createCanvasFunction;
        let ImageDataClass;
        let loadImageFunction;
        if (BROWSER_ENV) {
          createCanvasFunction = (width, height) => {
            if (!self.OffscreenCanvas) {
              throw new Error("OffscreenCanvas not supported by this browser.");
            }
            return new self.OffscreenCanvas(width, height);
          };
          loadImageFunction = self.createImageBitmap;
          ImageDataClass = self.ImageData;
        } else if (sharp__WEBPACK_IMPORTED_MODULE_3__["default"]) {
          loadImageFunction = async (img) => {
            const metadata = await img.metadata();
            const rawChannels = metadata.channels;
            const { data, info } = await img.rotate().raw().toBuffer({ resolveWithObject: true });
            const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);
            if (rawChannels !== void 0 && rawChannels !== info.channels) {
              newImage.convert(rawChannels);
            }
            return newImage;
          };
        } else {
          throw new Error("Unable to load image processing library.");
        }
        const RESAMPLING_MAPPING = {
          0: "nearest",
          1: "lanczos",
          2: "bilinear",
          3: "bicubic",
          4: "box",
          5: "hamming"
        };
        const CONTENT_TYPE_MAP = /* @__PURE__ */ new Map([
          ["png", "image/png"],
          ["jpg", "image/jpeg"],
          ["jpeg", "image/jpeg"],
          ["gif", "image/gif"]
        ]);
        class RawImage {
          /**
           * Create a new `RawImage` object.
           * @param {Uint8ClampedArray|Uint8Array} data The pixel data.
           * @param {number} width The width of the image.
           * @param {number} height The height of the image.
           * @param {1|2|3|4} channels The number of channels.
           */
          constructor(data, width, height, channels) {
            this.data = data;
            this.width = width;
            this.height = height;
            this.channels = channels;
          }
          /** 
           * Returns the size of the image (width, height).
           * @returns {[number, number]} The size of the image (width, height).
           */
          get size() {
            return [this.width, this.height];
          }
          /**
           * Helper method for reading an image from a variety of input types.
           * @param {RawImage|string|URL} input 
           * @returns The image object.
           * 
           * **Example:** Read image from a URL.
           * ```javascript
           * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');
           * // RawImage {
           * //   "data": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],
           * //   "width": 800,
           * //   "height": 533,
           * //   "channels": 3
           * // }
           * ```
           */
          static async read(input) {
            if (input instanceof RawImage) {
              return input;
            } else if (typeof input === "string" || input instanceof URL) {
              return await this.fromURL(input);
            } else {
              throw new Error(`Unsupported input type: ${typeof input}`);
            }
          }
          /**
           * Read an image from a canvas.
           * @param {HTMLCanvasElement|OffscreenCanvas} canvas The canvas to read the image from.
           * @returns {RawImage} The image object.
           */
          static fromCanvas(canvas) {
            if (!BROWSER_ENV) {
              throw new Error("fromCanvas() is only supported in browser environments.");
            }
            const ctx = canvas.getContext("2d");
            const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
            return new RawImage(data, canvas.width, canvas.height, 4);
          }
          /**
           * Read an image from a URL or file path.
           * @param {string|URL} url The URL or file path to read the image from.
           * @returns {Promise<RawImage>} The image object.
           */
          static async fromURL(url) {
            const response = await (0, _hub_js__WEBPACK_IMPORTED_MODULE_0__.getFile)(url);
            if (response.status !== 200) {
              throw new Error(`Unable to read image from "${url}" (${response.status} ${response.statusText})`);
            }
            const blob = await response.blob();
            return this.fromBlob(blob);
          }
          /**
           * Helper method to create a new Image from a blob.
           * @param {Blob} blob The blob to read the image from.
           * @returns {Promise<RawImage>} The image object.
           */
          static async fromBlob(blob) {
            if (BROWSER_ENV) {
              const img = await loadImageFunction(blob);
              const ctx = createCanvasFunction(img.width, img.height).getContext("2d");
              ctx.drawImage(img, 0, 0);
              return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);
            } else {
              const img = (0, sharp__WEBPACK_IMPORTED_MODULE_3__["default"])(await blob.arrayBuffer());
              return await loadImageFunction(img);
            }
          }
          /**
           * Helper method to create a new Image from a tensor
           * @param {Tensor} tensor 
           */
          static fromTensor(tensor, channel_format = "CHW") {
            if (tensor.dims.length !== 3) {
              throw new Error(`Tensor should have 3 dimensions, but has ${tensor.dims.length} dimensions.`);
            }
            if (channel_format === "CHW") {
              tensor = tensor.transpose(1, 2, 0);
            } else if (channel_format === "HWC") {
            } else {
              throw new Error(`Unsupported channel format: ${channel_format}`);
            }
            if (!(tensor.data instanceof Uint8ClampedArray || tensor.data instanceof Uint8Array)) {
              throw new Error(`Unsupported tensor type: ${tensor.type}`);
            }
            switch (tensor.dims[2]) {
              case 1:
              case 2:
              case 3:
              case 4:
                return new RawImage(tensor.data, tensor.dims[1], tensor.dims[0], tensor.dims[2]);
              default:
                throw new Error(`Unsupported number of channels: ${tensor.dims[2]}`);
            }
          }
          /**
           * Convert the image to grayscale format.
           * @returns {RawImage} `this` to support chaining.
           */
          grayscale() {
            if (this.channels === 1) {
              return this;
            }
            const newData = new Uint8ClampedArray(this.width * this.height * 1);
            switch (this.channels) {
              case 3:
              // rgb to grayscale
              case 4:
                for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {
                  const red = this.data[i];
                  const green = this.data[i + 1];
                  const blue = this.data[i + 2];
                  newData[offset++] = Math.round(0.2989 * red + 0.587 * green + 0.114 * blue);
                }
                break;
              default:
                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
            }
            return this._update(newData, this.width, this.height, 1);
          }
          /**
           * Convert the image to RGB format.
           * @returns {RawImage} `this` to support chaining.
           */
          rgb() {
            if (this.channels === 3) {
              return this;
            }
            const newData = new Uint8ClampedArray(this.width * this.height * 3);
            switch (this.channels) {
              case 1:
                for (let i = 0, offset = 0; i < this.data.length; ++i) {
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i];
                }
                break;
              case 4:
                for (let i = 0, offset = 0; i < this.data.length; i += 4) {
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i + 1];
                  newData[offset++] = this.data[i + 2];
                }
                break;
              default:
                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
            }
            return this._update(newData, this.width, this.height, 3);
          }
          /**
           * Convert the image to RGBA format.
           * @returns {RawImage} `this` to support chaining.
           */
          rgba() {
            if (this.channels === 4) {
              return this;
            }
            const newData = new Uint8ClampedArray(this.width * this.height * 4);
            switch (this.channels) {
              case 1:
                for (let i = 0, offset = 0; i < this.data.length; ++i) {
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i];
                  newData[offset++] = 255;
                }
                break;
              case 3:
                for (let i = 0, offset = 0; i < this.data.length; i += 3) {
                  newData[offset++] = this.data[i];
                  newData[offset++] = this.data[i + 1];
                  newData[offset++] = this.data[i + 2];
                  newData[offset++] = 255;
                }
                break;
              default:
                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
            }
            return this._update(newData, this.width, this.height, 4);
          }
          /**
           * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.
           * @param {number} width The width of the new image.
           * @param {number} height The height of the new image.
           * @param {Object} options Additional options for resizing.
           * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.
           * @returns {Promise<RawImage>} `this` to support chaining.
           */
          async resize(width, height, {
            resample = 2
          } = {}) {
            let resampleMethod = RESAMPLING_MAPPING[resample] ?? resample;
            if (BROWSER_ENV) {
              const numChannels = this.channels;
              const canvas = this.toCanvas();
              const ctx = createCanvasFunction(width, height).getContext("2d");
              ctx.drawImage(canvas, 0, 0, width, height);
              const resizedImage = new RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);
              return resizedImage.convert(numChannels);
            } else {
              let img = this.toSharp();
              switch (resampleMethod) {
                case "box":
                case "hamming":
                  if (resampleMethod === "box" || resampleMethod === "hamming") {
                    console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);
                    resampleMethod = "bilinear";
                  }
                case "nearest":
                case "bilinear":
                case "bicubic":
                  img = img.affine([width / this.width, 0, 0, height / this.height], {
                    interpolator: resampleMethod
                  });
                  break;
                case "lanczos":
                  img = img.resize({
                    width,
                    height,
                    fit: "fill",
                    kernel: "lanczos3"
                    // PIL Lanczos uses a kernel size of 3 
                  });
                  break;
                default:
                  throw new Error(`Resampling method ${resampleMethod} is not supported.`);
              }
              return await loadImageFunction(img);
            }
          }
          async pad([left, right, top, bottom]) {
            left = Math.max(left, 0);
            right = Math.max(right, 0);
            top = Math.max(top, 0);
            bottom = Math.max(bottom, 0);
            if (left === 0 && right === 0 && top === 0 && bottom === 0) {
              return this;
            }
            if (BROWSER_ENV) {
              const numChannels = this.channels;
              const canvas = this.toCanvas();
              const newWidth = this.width + left + right;
              const newHeight = this.height + top + bottom;
              const ctx = createCanvasFunction(newWidth, newHeight).getContext("2d");
              ctx.drawImage(
                canvas,
                0,
                0,
                this.width,
                this.height,
                left,
                top,
                newWidth,
                newHeight
              );
              const paddedImage = new RawImage(
                ctx.getImageData(0, 0, newWidth, newHeight).data,
                newWidth,
                newHeight,
                4
              );
              return paddedImage.convert(numChannels);
            } else {
              const img = this.toSharp().extend({ left, right, top, bottom });
              return await loadImageFunction(img);
            }
          }
          async crop([x_min, y_min, x_max, y_max]) {
            x_min = Math.max(x_min, 0);
            y_min = Math.max(y_min, 0);
            x_max = Math.min(x_max, this.width - 1);
            y_max = Math.min(y_max, this.height - 1);
            if (x_min === 0 && y_min === 0 && x_max === this.width - 1 && y_max === this.height - 1) {
              return this;
            }
            const crop_width = x_max - x_min + 1;
            const crop_height = y_max - y_min + 1;
            if (BROWSER_ENV) {
              const numChannels = this.channels;
              const canvas = this.toCanvas();
              const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
              ctx.drawImage(
                canvas,
                x_min,
                y_min,
                crop_width,
                crop_height,
                0,
                0,
                crop_width,
                crop_height
              );
              const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
              return resizedImage.convert(numChannels);
            } else {
              const img = this.toSharp().extract({
                left: x_min,
                top: y_min,
                width: crop_width,
                height: crop_height
              });
              return await loadImageFunction(img);
            }
          }
          async center_crop(crop_width, crop_height) {
            if (this.width === crop_width && this.height === crop_height) {
              return this;
            }
            const width_offset = (this.width - crop_width) / 2;
            const height_offset = (this.height - crop_height) / 2;
            if (BROWSER_ENV) {
              const numChannels = this.channels;
              const canvas = this.toCanvas();
              const ctx = createCanvasFunction(crop_width, crop_height).getContext("2d");
              let sourceX = 0;
              let sourceY = 0;
              let destX = 0;
              let destY = 0;
              if (width_offset >= 0) {
                sourceX = width_offset;
              } else {
                destX = -width_offset;
              }
              if (height_offset >= 0) {
                sourceY = height_offset;
              } else {
                destY = -height_offset;
              }
              ctx.drawImage(
                canvas,
                sourceX,
                sourceY,
                crop_width,
                crop_height,
                destX,
                destY,
                crop_width,
                crop_height
              );
              const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);
              return resizedImage.convert(numChannels);
            } else {
              let img = this.toSharp();
              if (width_offset >= 0 && height_offset >= 0) {
                img = img.extract({
                  left: Math.floor(width_offset),
                  top: Math.floor(height_offset),
                  width: crop_width,
                  height: crop_height
                });
              } else if (width_offset <= 0 && height_offset <= 0) {
                const top = Math.floor(-height_offset);
                const left = Math.floor(-width_offset);
                img = img.extend({
                  top,
                  left,
                  // Ensures the resulting image has the desired dimensions
                  right: crop_width - this.width - left,
                  bottom: crop_height - this.height - top
                });
              } else {
                let y_padding = [0, 0];
                let y_extract = 0;
                if (height_offset < 0) {
                  y_padding[0] = Math.floor(-height_offset);
                  y_padding[1] = crop_height - this.height - y_padding[0];
                } else {
                  y_extract = Math.floor(height_offset);
                }
                let x_padding = [0, 0];
                let x_extract = 0;
                if (width_offset < 0) {
                  x_padding[0] = Math.floor(-width_offset);
                  x_padding[1] = crop_width - this.width - x_padding[0];
                } else {
                  x_extract = Math.floor(width_offset);
                }
                img = img.extend({
                  top: y_padding[0],
                  bottom: y_padding[1],
                  left: x_padding[0],
                  right: x_padding[1]
                }).extract({
                  left: x_extract,
                  top: y_extract,
                  width: crop_width,
                  height: crop_height
                });
              }
              return await loadImageFunction(img);
            }
          }
          async toBlob(type = "image/png", quality = 1) {
            if (!BROWSER_ENV) {
              throw new Error("toBlob() is only supported in browser environments.");
            }
            const canvas = this.toCanvas();
            return await canvas.convertToBlob({ type, quality });
          }
          toTensor(channel_format = "CHW") {
            let tensor = new _tensor_js__WEBPACK_IMPORTED_MODULE_2__.Tensor(
              "uint8",
              new Uint8Array(this.data),
              [this.height, this.width, this.channels]
            );
            if (channel_format === "HWC") {
            } else if (channel_format === "CHW") {
              tensor = tensor.permute(2, 0, 1);
            } else {
              throw new Error(`Unsupported channel format: ${channel_format}`);
            }
            return tensor;
          }
          toCanvas() {
            if (!BROWSER_ENV) {
              throw new Error("toCanvas() is only supported in browser environments.");
            }
            const cloned = this.clone().rgba();
            const clonedCanvas = createCanvasFunction(cloned.width, cloned.height);
            const data = new ImageDataClass(cloned.data, cloned.width, cloned.height);
            clonedCanvas.getContext("2d").putImageData(data, 0, 0);
            return clonedCanvas;
          }
          /**
           * Helper method to update the image data.
           * @param {Uint8ClampedArray} data The new image data.
           * @param {number} width The new width of the image.
           * @param {number} height The new height of the image.
           * @param {1|2|3|4|null} [channels] The new number of channels of the image.
           * @private
           */
          _update(data, width, height, channels = null) {
            this.data = data;
            this.width = width;
            this.height = height;
            if (channels !== null) {
              this.channels = channels;
            }
            return this;
          }
          /**
           * Clone the image
           * @returns {RawImage} The cloned image
           */
          clone() {
            return new RawImage(this.data.slice(), this.width, this.height, this.channels);
          }
          /**
           * Helper method for converting image to have a certain number of channels
           * @param {number} numChannels The number of channels. Must be 1, 3, or 4.
           * @returns {RawImage} `this` to support chaining.
           */
          convert(numChannels) {
            if (this.channels === numChannels) return this;
            switch (numChannels) {
              case 1:
                this.grayscale();
                break;
              case 3:
                this.rgb();
                break;
              case 4:
                this.rgba();
                break;
              default:
                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
            }
            return this;
          }
          /**
           * Save the image to the given path.
           * @param {string} path The path to save the image to.
           */
          async save(path5) {
            if (BROWSER_ENV) {
              if (WEBWORKER_ENV) {
                throw new Error("Unable to save an image from a Web Worker.");
              }
              const extension = path5.split(".").pop().toLowerCase();
              const mime = CONTENT_TYPE_MAP.get(extension) ?? "image/png";
              const blob = await this.toBlob(mime);
              const dataURL = URL.createObjectURL(blob);
              const downloadLink = document.createElement("a");
              downloadLink.href = dataURL;
              downloadLink.download = path5;
              downloadLink.click();
              downloadLink.remove();
            } else if (!_env_js__WEBPACK_IMPORTED_MODULE_1__.env.useFS) {
              throw new Error("Unable to save the image because filesystem is disabled in this environment.");
            } else {
              const img = this.toSharp();
              return await img.toFile(path5);
            }
          }
          toSharp() {
            if (BROWSER_ENV) {
              throw new Error("toSharp() is only supported in server-side environments.");
            }
            return (0, sharp__WEBPACK_IMPORTED_MODULE_3__["default"])(this.data, {
              raw: {
                width: this.width,
                height: this.height,
                channels: this.channels
              }
            });
          }
        }
      }
    ),
    /***/
    "./src/utils/maths.js": (
      /*!****************************!*\
        !*** ./src/utils/maths.js ***!
        \****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          FFT: () => (
            /* binding */
            FFT
          ),
          /* harmony export */
          bankers_round: () => (
            /* binding */
            bankers_round
          ),
          /* harmony export */
          cos_sim: () => (
            /* binding */
            cos_sim
          ),
          /* harmony export */
          dot: () => (
            /* binding */
            dot
          ),
          /* harmony export */
          dynamic_time_warping: () => (
            /* binding */
            dynamic_time_warping
          ),
          /* harmony export */
          interpolate_data: () => (
            /* binding */
            interpolate_data
          ),
          /* harmony export */
          log_softmax: () => (
            /* binding */
            log_softmax
          ),
          /* harmony export */
          magnitude: () => (
            /* binding */
            magnitude
          ),
          /* harmony export */
          max: () => (
            /* binding */
            max
          ),
          /* harmony export */
          medianFilter: () => (
            /* binding */
            medianFilter
          ),
          /* harmony export */
          min: () => (
            /* binding */
            min
          ),
          /* harmony export */
          permute_data: () => (
            /* binding */
            permute_data
          ),
          /* harmony export */
          round: () => (
            /* binding */
            round
          ),
          /* harmony export */
          softmax: () => (
            /* binding */
            softmax
          )
          /* harmony export */
        });
        function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = "bilinear", align_corners = false) {
          const x_scale = out_width / in_width;
          const y_scale = out_height / in_height;
          const out_img = new input.constructor(out_height * out_width * in_channels);
          const inStride = in_height * in_width;
          const outStride = out_height * out_width;
          for (let i = 0; i < out_height; ++i) {
            for (let j = 0; j < out_width; ++j) {
              const outOffset = i * out_width + j;
              const x = (j + 0.5) / x_scale - 0.5;
              const y = (i + 0.5) / y_scale - 0.5;
              let x1 = Math.floor(x);
              let y1 = Math.floor(y);
              const x2 = Math.min(x1 + 1, in_width - 1);
              const y2 = Math.min(y1 + 1, in_height - 1);
              x1 = Math.max(x1, 0);
              y1 = Math.max(y1, 0);
              const s = x - x1;
              const t = y - y1;
              const w1 = (1 - s) * (1 - t);
              const w2 = s * (1 - t);
              const w3 = (1 - s) * t;
              const w4 = s * t;
              const yStride = y1 * in_width;
              const xStride = y2 * in_width;
              const idx1 = yStride + x1;
              const idx2 = yStride + x2;
              const idx3 = xStride + x1;
              const idx4 = xStride + x2;
              for (let k = 0; k < in_channels; ++k) {
                const cOffset = k * inStride;
                out_img[k * outStride + outOffset] = w1 * input[cOffset + idx1] + w2 * input[cOffset + idx2] + w3 * input[cOffset + idx3] + w4 * input[cOffset + idx4];
              }
            }
          }
          return out_img;
        }
        function permute_data(array, dims, axes) {
          const shape = new Array(axes.length);
          const stride = new Array(axes.length);
          for (let i = axes.length - 1, s = 1; i >= 0; --i) {
            stride[i] = s;
            shape[i] = dims[axes[i]];
            s *= shape[i];
          }
          const invStride = axes.map((_, i) => stride[axes.indexOf(i)]);
          const permutedData = new array.constructor(array.length);
          for (let i = 0; i < array.length; ++i) {
            let newIndex = 0;
            for (let j = dims.length - 1, k = i; j >= 0; --j) {
              newIndex += k % dims[j] * invStride[j];
              k = Math.floor(k / dims[j]);
            }
            permutedData[newIndex] = array[i];
          }
          return [permutedData, shape];
        }
        function softmax(arr) {
          const maxVal = max(arr)[0];
          const exps = arr.map((x) => Math.exp(x - maxVal));
          const sumExps = exps.reduce((acc, val) => acc + val, 0);
          const softmaxArr = exps.map((x) => x / sumExps);
          return (
            /** @type {T} */
            softmaxArr
          );
        }
        function log_softmax(arr) {
          const maxVal = max(arr)[0];
          let sumExps = 0;
          for (let i = 0; i < arr.length; ++i) {
            sumExps += Math.exp(arr[i] - maxVal);
          }
          const logSum = Math.log(sumExps);
          const logSoftmaxArr = arr.map((x) => x - maxVal - logSum);
          return (
            /** @type {T} */
            logSoftmaxArr
          );
        }
        function dot(arr1, arr2) {
          let result = 0;
          for (let i = 0; i < arr1.length; ++i) {
            result += arr1[i] * arr2[i];
          }
          return result;
        }
        function cos_sim(arr1, arr2) {
          const dotProduct = dot(arr1, arr2);
          const magnitudeA = magnitude(arr1);
          const magnitudeB = magnitude(arr2);
          const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);
          return cosineSimilarity;
        }
        function magnitude(arr) {
          return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));
        }
        function min(arr) {
          if (arr.length === 0) throw Error("Array must not be empty");
          let min2 = arr[0];
          let indexOfMin = 0;
          for (let i = 1; i < arr.length; ++i) {
            if (arr[i] < min2) {
              min2 = arr[i];
              indexOfMin = i;
            }
          }
          return [min2, indexOfMin];
        }
        function max(arr) {
          if (arr.length === 0) throw Error("Array must not be empty");
          let max2 = arr[0];
          let indexOfMax = 0;
          for (let i = 1; i < arr.length; ++i) {
            if (arr[i] > max2) {
              max2 = arr[i];
              indexOfMax = i;
            }
          }
          return [Number(max2), indexOfMax];
        }
        function isPowerOfTwo(number) {
          return number > 0 && (number & number - 1) === 0;
        }
        class P2FFT {
          /**
           * @param {number} size The size of the input array. Must be a power of two larger than 1.
           * @throws {Error} FFT size must be a power of two larger than 1.
           */
          constructor(size3) {
            this.size = size3 | 0;
            if (this.size <= 1 || !isPowerOfTwo(this.size))
              throw new Error("FFT size must be a power of two larger than 1");
            this._csize = size3 << 1;
            this.table = new Float64Array(this.size * 2);
            for (let i = 0; i < this.table.length; i += 2) {
              const angle = Math.PI * i / this.size;
              this.table[i] = Math.cos(angle);
              this.table[i + 1] = -Math.sin(angle);
            }
            let power = 0;
            for (let t = 1; this.size > t; t <<= 1)
              ++power;
            this._width = power % 2 === 0 ? power - 1 : power;
            this._bitrev = new Int32Array(1 << this._width);
            for (let j = 0; j < this._bitrev.length; ++j) {
              this._bitrev[j] = 0;
              for (let shift = 0; shift < this._width; shift += 2) {
                const revShift = this._width - shift - 2;
                this._bitrev[j] |= (j >>> shift & 3) << revShift;
              }
            }
          }
          /**
           * Create a complex number array with size `2 * size`
           *
           * @returns {Float64Array} A complex number array with size `2 * size`
           */
          createComplexArray() {
            return new Float64Array(this._csize);
          }
          /**
           * Converts a complex number representation stored in a Float64Array to an array of real numbers.
           * 
           * @param {Float64Array} complex The complex number representation to be converted.
           * @param {number[]} [storage] An optional array to store the result in.
           * @returns {number[]} An array of real numbers representing the input complex number representation.
           */
          fromComplexArray(complex, storage) {
            const res = storage || new Array(complex.length >>> 1);
            for (let i = 0; i < complex.length; i += 2)
              res[i >>> 1] = complex[i];
            return res;
          }
          /**
           * Convert a real-valued input array to a complex-valued output array.
           * @param {Float64Array} input The real-valued input array.
           * @param {Float64Array} [storage] Optional buffer to store the output array.
           * @returns {Float64Array} The complex-valued output array.
           */
          toComplexArray(input, storage) {
            const res = storage || this.createComplexArray();
            for (let i = 0; i < res.length; i += 2) {
              res[i] = input[i >>> 1];
              res[i + 1] = 0;
            }
            return res;
          }
          /**
           * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.
           * 
           * @param {Float64Array} out The output buffer to store the result.
           * @param {Float64Array} data The input data to transform.
           * 
           * @throws {Error} Input and output buffers must be different.
           * 
           * @returns {void}
           */
          transform(out, data) {
            if (out === data)
              throw new Error("Input and output buffers must be different");
            this._transform4(
              out,
              data,
              1
              /* DONE */
            );
          }
          /**
           * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.
           * The input buffer must contain real values only, while the output buffer will contain complex values. The input and
           * output buffers must be different.
           *
           * @param {Float64Array} out The output buffer.
           * @param {Float64Array} data The input buffer containing real values.
           *
           * @throws {Error} If the input and output buffers are the same.
           */
          realTransform(out, data) {
            if (out === data)
              throw new Error("Input and output buffers must be different");
            this._realTransform4(
              out,
              data,
              1
              /* DONE */
            );
          }
          /**
           * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.
           * The `out` array must be a different buffer than the `data` array. The `out` array will contain the
           * result of the transformation. The `data` array will not be modified.
           * 
           * @param {Float64Array} out The output buffer for the transformed data.
           * @param {Float64Array} data The input data to transform.
           * @throws {Error} If `out` and `data` refer to the same buffer.
           * @returns {void}
           */
          inverseTransform(out, data) {
            if (out === data)
              throw new Error("Input and output buffers must be different");
            this._transform4(
              out,
              data,
              -1
              /* DONE */
            );
            for (let i = 0; i < out.length; ++i)
              out[i] /= this.size;
          }
          /**
           * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.
           *
           * @param {Float64Array} out The output buffer for the transformed data.
           * @param {Float64Array} data The input buffer of data to be transformed.
           * @param {number} inv A scaling factor to apply to the transform.
           * @returns {void}
           */
          _transform4(out, data, inv) {
            const size3 = this._csize;
            const width = this._width;
            let step = 1 << width;
            let len = size3 / step << 1;
            let outOff;
            let t;
            const bitrev = this._bitrev;
            if (len === 4) {
              for (outOff = 0, t = 0; outOff < size3; outOff += len, ++t) {
                const off = bitrev[t];
                this._singleTransform2(data, out, outOff, off, step);
              }
            } else {
              for (outOff = 0, t = 0; outOff < size3; outOff += len, ++t) {
                const off = bitrev[t];
                this._singleTransform4(data, out, outOff, off, step, inv);
              }
            }
            const table = this.table;
            for (step >>= 2; step >= 2; step >>= 2) {
              len = size3 / step << 1;
              const quarterLen = len >>> 2;
              for (outOff = 0; outOff < size3; outOff += len) {
                const limit = outOff + quarterLen - 1;
                for (let i = outOff, k = 0; i < limit; i += 2, k += step) {
                  const A = i;
                  const B = A + quarterLen;
                  const C = B + quarterLen;
                  const D = C + quarterLen;
                  const Ar = out[A];
                  const Ai = out[A + 1];
                  const Br = out[B];
                  const Bi = out[B + 1];
                  const Cr = out[C];
                  const Ci = out[C + 1];
                  const Dr = out[D];
                  const Di = out[D + 1];
                  const tableBr = table[k];
                  const tableBi = inv * table[k + 1];
                  const MBr = Br * tableBr - Bi * tableBi;
                  const MBi = Br * tableBi + Bi * tableBr;
                  const tableCr = table[2 * k];
                  const tableCi = inv * table[2 * k + 1];
                  const MCr = Cr * tableCr - Ci * tableCi;
                  const MCi = Cr * tableCi + Ci * tableCr;
                  const tableDr = table[3 * k];
                  const tableDi = inv * table[3 * k + 1];
                  const MDr = Dr * tableDr - Di * tableDi;
                  const MDi = Dr * tableDi + Di * tableDr;
                  const T0r = Ar + MCr;
                  const T0i = Ai + MCi;
                  const T1r = Ar - MCr;
                  const T1i = Ai - MCi;
                  const T2r = MBr + MDr;
                  const T2i = MBi + MDi;
                  const T3r = inv * (MBr - MDr);
                  const T3i = inv * (MBi - MDi);
                  out[A] = T0r + T2r;
                  out[A + 1] = T0i + T2i;
                  out[B] = T1r + T3i;
                  out[B + 1] = T1i - T3r;
                  out[C] = T0r - T2r;
                  out[C + 1] = T0i - T2i;
                  out[D] = T1r - T3i;
                  out[D + 1] = T1i + T3r;
                }
              }
            }
          }
          /**
           * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.
           *
           * @param {Float64Array} data The input buffer of data to be transformed.
           * @param {Float64Array} out The output buffer for the transformed data.
           * @param {number} outOff The offset at which to write the output data.
           * @param {number} off The offset at which to begin reading the input data.
           * @param {number} step The step size for indexing the input data.
           * @returns {void}
           */
          _singleTransform2(data, out, outOff, off, step) {
            const evenR = data[off];
            const evenI = data[off + 1];
            const oddR = data[off + step];
            const oddI = data[off + step + 1];
            out[outOff] = evenR + oddR;
            out[outOff + 1] = evenI + oddI;
            out[outOff + 2] = evenR - oddR;
            out[outOff + 3] = evenI - oddI;
          }
          /**
           * Performs radix-4 transformation on input data of length 8
           *
           * @param {Float64Array} data Input data array of length 8
           * @param {Float64Array} out Output data array of length 8
           * @param {number} outOff Index of output array to start writing from
           * @param {number} off Index of input array to start reading from
           * @param {number} step Step size between elements in input array
           * @param {number} inv Scaling factor for inverse transform
           * 
           * @returns {void}
           */
          _singleTransform4(data, out, outOff, off, step, inv) {
            const step2 = step * 2;
            const step3 = step * 3;
            const Ar = data[off];
            const Ai = data[off + 1];
            const Br = data[off + step];
            const Bi = data[off + step + 1];
            const Cr = data[off + step2];
            const Ci = data[off + step2 + 1];
            const Dr = data[off + step3];
            const Di = data[off + step3 + 1];
            const T0r = Ar + Cr;
            const T0i = Ai + Ci;
            const T1r = Ar - Cr;
            const T1i = Ai - Ci;
            const T2r = Br + Dr;
            const T2i = Bi + Di;
            const T3r = inv * (Br - Dr);
            const T3i = inv * (Bi - Di);
            out[outOff] = T0r + T2r;
            out[outOff + 1] = T0i + T2i;
            out[outOff + 2] = T1r + T3i;
            out[outOff + 3] = T1i - T3r;
            out[outOff + 4] = T0r - T2r;
            out[outOff + 5] = T0i - T2i;
            out[outOff + 6] = T1r - T3i;
            out[outOff + 7] = T1i + T3r;
          }
          /**
           * Real input radix-4 implementation
           * @param {Float64Array} out Output array for the transformed data
           * @param {Float64Array} data Input array of real data to be transformed
           * @param {number} inv The scale factor used to normalize the inverse transform
           */
          _realTransform4(out, data, inv) {
            const size3 = this._csize;
            const width = this._width;
            let step = 1 << width;
            let len = size3 / step << 1;
            let outOff;
            let t;
            const bitrev = this._bitrev;
            if (len === 4) {
              for (outOff = 0, t = 0; outOff < size3; outOff += len, ++t) {
                const off = bitrev[t];
                this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);
              }
            } else {
              for (outOff = 0, t = 0; outOff < size3; outOff += len, ++t) {
                const off = bitrev[t];
                this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);
              }
            }
            const table = this.table;
            for (step >>= 2; step >= 2; step >>= 2) {
              len = size3 / step << 1;
              const halfLen = len >>> 1;
              const quarterLen = halfLen >>> 1;
              const hquarterLen = quarterLen >>> 1;
              for (outOff = 0; outOff < size3; outOff += len) {
                for (let i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {
                  const A = outOff + i;
                  const B = A + quarterLen;
                  const C = B + quarterLen;
                  const D = C + quarterLen;
                  const Ar = out[A];
                  const Ai = out[A + 1];
                  const Br = out[B];
                  const Bi = out[B + 1];
                  const Cr = out[C];
                  const Ci = out[C + 1];
                  const Dr = out[D];
                  const Di = out[D + 1];
                  const MAr = Ar;
                  const MAi = Ai;
                  const tableBr = table[k];
                  const tableBi = inv * table[k + 1];
                  const MBr = Br * tableBr - Bi * tableBi;
                  const MBi = Br * tableBi + Bi * tableBr;
                  const tableCr = table[2 * k];
                  const tableCi = inv * table[2 * k + 1];
                  const MCr = Cr * tableCr - Ci * tableCi;
                  const MCi = Cr * tableCi + Ci * tableCr;
                  const tableDr = table[3 * k];
                  const tableDi = inv * table[3 * k + 1];
                  const MDr = Dr * tableDr - Di * tableDi;
                  const MDi = Dr * tableDi + Di * tableDr;
                  const T0r = MAr + MCr;
                  const T0i = MAi + MCi;
                  const T1r = MAr - MCr;
                  const T1i = MAi - MCi;
                  const T2r = MBr + MDr;
                  const T2i = MBi + MDi;
                  const T3r = inv * (MBr - MDr);
                  const T3i = inv * (MBi - MDi);
                  out[A] = T0r + T2r;
                  out[A + 1] = T0i + T2i;
                  out[B] = T1r + T3i;
                  out[B + 1] = T1i - T3r;
                  if (i === 0) {
                    out[C] = T0r - T2r;
                    out[C + 1] = T0i - T2i;
                    continue;
                  }
                  if (i === hquarterLen)
                    continue;
                  const SA = outOff + quarterLen - i;
                  const SB = outOff + halfLen - i;
                  out[SA] = T1r - inv * T3i;
                  out[SA + 1] = -T1i - inv * T3r;
                  out[SB] = T0r - inv * T2r;
                  out[SB + 1] = -T0i + inv * T2i;
                }
              }
            }
            const half = size3 >>> 1;
            for (let i = 2; i < half; i += 2) {
              out[size3 - i] = out[i];
              out[size3 - i + 1] = -out[i + 1];
            }
          }
          /**
           * Performs a single real input radix-2 transformation on the provided data
           * 
           * @param {Float64Array} data The input data array
           * @param {Float64Array} out The output data array
           * @param {number} outOff The output offset
           * @param {number} off The input offset
           * @param {number} step The step
           * 
           * @returns {void}
           */
          _singleRealTransform2(data, out, outOff, off, step) {
            const evenR = data[off];
            const oddR = data[off + step];
            out[outOff] = evenR + oddR;
            out[outOff + 1] = 0;
            out[outOff + 2] = evenR - oddR;
            out[outOff + 3] = 0;
          }
          /**
           * Computes a single real-valued transform using radix-4 algorithm.
           * This method is only called for len=8.
           *
           * @param {Float64Array} data The input data array.
           * @param {Float64Array} out The output data array.
           * @param {number} outOff The offset into the output array.
           * @param {number} off The offset into the input array.
           * @param {number} step The step size for the input array.
           * @param {number} inv The value of inverse.
           */
          _singleRealTransform4(data, out, outOff, off, step, inv) {
            const step2 = step * 2;
            const step3 = step * 3;
            const Ar = data[off];
            const Br = data[off + step];
            const Cr = data[off + step2];
            const Dr = data[off + step3];
            const T0r = Ar + Cr;
            const T1r = Ar - Cr;
            const T2r = Br + Dr;
            const T3r = inv * (Br - Dr);
            out[outOff] = T0r + T2r;
            out[outOff + 1] = 0;
            out[outOff + 2] = T1r;
            out[outOff + 3] = -T3r;
            out[outOff + 4] = T0r - T2r;
            out[outOff + 5] = 0;
            out[outOff + 6] = T1r;
            out[outOff + 7] = T3r;
          }
        }
        class NP2FFT {
          /**
           * Constructs a new NP2FFT object.
           * @param {number} fft_length The length of the FFT
           */
          constructor(fft_length) {
            const a = 2 * (fft_length - 1);
            const b = 2 * (2 * fft_length - 1);
            const nextP2 = 2 ** Math.ceil(Math.log2(b));
            this.bufferSize = nextP2;
            this._a = a;
            const chirp = new Float64Array(b);
            const ichirp = new Float64Array(nextP2);
            this._chirpBuffer = new Float64Array(nextP2);
            this._buffer1 = new Float64Array(nextP2);
            this._buffer2 = new Float64Array(nextP2);
            this._outBuffer1 = new Float64Array(nextP2);
            this._outBuffer2 = new Float64Array(nextP2);
            const theta = -2 * Math.PI / fft_length;
            const baseR = Math.cos(theta);
            const baseI = Math.sin(theta);
            for (let i = 0; i < b >> 1; ++i) {
              const e = (i + 1 - fft_length) ** 2 / 2;
              const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;
              const result_arg = e * Math.atan2(baseI, baseR);
              const i2 = 2 * i;
              chirp[i2] = result_mod * Math.cos(result_arg);
              chirp[i2 + 1] = result_mod * Math.sin(result_arg);
              ichirp[i2] = chirp[i2];
              ichirp[i2 + 1] = -chirp[i2 + 1];
            }
            this._slicedChirpBuffer = chirp.subarray(a, b);
            this._f = new P2FFT(nextP2 >> 1);
            this._f.transform(this._chirpBuffer, ichirp);
          }
          _transform(output, input, real) {
            const ib1 = this._buffer1;
            const ib2 = this._buffer2;
            const ob2 = this._outBuffer1;
            const ob3 = this._outBuffer2;
            const cb = this._chirpBuffer;
            const sb = this._slicedChirpBuffer;
            const a = this._a;
            if (real) {
              for (let j = 0; j < sb.length; j += 2) {
                const j2 = j + 1;
                const j3 = j >> 1;
                const a_real = input[j3];
                ib1[j] = a_real * sb[j];
                ib1[j2] = a_real * sb[j2];
              }
            } else {
              for (let j = 0; j < sb.length; j += 2) {
                const j2 = j + 1;
                ib1[j] = input[j] * sb[j] - input[j2] * sb[j2];
                ib1[j2] = input[j] * sb[j2] + input[j2] * sb[j];
              }
            }
            this._f.transform(ob2, ib1);
            for (let j = 0; j < cb.length; j += 2) {
              const j2 = j + 1;
              ib2[j] = ob2[j] * cb[j] - ob2[j2] * cb[j2];
              ib2[j2] = ob2[j] * cb[j2] + ob2[j2] * cb[j];
            }
            this._f.inverseTransform(ob3, ib2);
            for (let j = 0; j < ob3.length; j += 2) {
              const a_real = ob3[j + a];
              const a_imag = ob3[j + a + 1];
              const b_real = sb[j];
              const b_imag = sb[j + 1];
              output[j] = a_real * b_real - a_imag * b_imag;
              output[j + 1] = a_real * b_imag + a_imag * b_real;
            }
          }
          transform(output, input) {
            this._transform(output, input, false);
          }
          realTransform(output, input) {
            this._transform(output, input, true);
          }
        }
        class FFT {
          constructor(fft_length) {
            this.fft_length = fft_length;
            this.isPowerOfTwo = isPowerOfTwo(fft_length);
            if (this.isPowerOfTwo) {
              this.fft = new P2FFT(fft_length);
              this.outputBufferSize = 2 * fft_length;
            } else {
              this.fft = new NP2FFT(fft_length);
              this.outputBufferSize = this.fft.bufferSize;
            }
          }
          realTransform(out, input) {
            this.fft.realTransform(out, input);
          }
          transform(out, input) {
            this.fft.transform(out, input);
          }
        }
        function medianFilter(data, windowSize) {
          if (windowSize % 2 === 0 || windowSize <= 0) {
            throw new Error("Window size must be a positive odd number");
          }
          const outputArray = new data.constructor(data.length);
          const buffer2 = new data.constructor(windowSize);
          const halfWindowSize = Math.floor(windowSize / 2);
          for (let i = 0; i < data.length; ++i) {
            let valuesIndex = 0;
            for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {
              let index2 = i + j;
              if (index2 < 0) {
                index2 = Math.abs(index2);
              } else if (index2 >= data.length) {
                index2 = 2 * (data.length - 1) - index2;
              }
              buffer2[valuesIndex++] = data[index2];
            }
            buffer2.sort();
            outputArray[i] = buffer2[halfWindowSize];
          }
          return outputArray;
        }
        function round(num, decimals) {
          const pow = Math.pow(10, decimals);
          return Math.round(num * pow) / pow;
        }
        function bankers_round(x) {
          const r = Math.round(x);
          const br = Math.abs(x) % 1 === 0.5 ? r % 2 === 0 ? r : r - 1 : r;
          return br;
        }
        function dynamic_time_warping(matrix) {
          const output_length = matrix.length;
          const input_length = matrix[0].length;
          const outputShape = [output_length + 1, input_length + 1];
          const cost = Array.from(
            { length: outputShape[0] },
            () => Array(outputShape[1]).fill(Infinity)
          );
          cost[0][0] = 0;
          const trace = Array.from(
            { length: outputShape[0] },
            () => Array(outputShape[1]).fill(-1)
          );
          for (let j2 = 1; j2 < outputShape[1]; ++j2) {
            for (let i2 = 1; i2 < outputShape[0]; ++i2) {
              const c0 = cost[i2 - 1][j2 - 1];
              const c1 = cost[i2 - 1][j2];
              const c2 = cost[i2][j2 - 1];
              let c, t;
              if (c0 < c1 && c0 < c2) {
                c = c0;
                t = 0;
              } else if (c1 < c0 && c1 < c2) {
                c = c1;
                t = 1;
              } else {
                c = c2;
                t = 2;
              }
              cost[i2][j2] = matrix[i2 - 1][j2 - 1] + c;
              trace[i2][j2] = t;
            }
          }
          for (let i2 = 0; i2 < outputShape[1]; ++i2) {
            trace[0][i2] = 2;
          }
          for (let i2 = 0; i2 < outputShape[0]; ++i2) {
            trace[i2][0] = 1;
          }
          let i = output_length;
          let j = input_length;
          let text_indices = [];
          let time_indices = [];
          while (i > 0 || j > 0) {
            text_indices.push(i - 1);
            time_indices.push(j - 1);
            switch (trace[i][j]) {
              case 0:
                --i;
                --j;
                break;
              case 1:
                --i;
                break;
              case 2:
                --j;
                break;
              default:
                throw new Error(
                  `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`
                );
            }
          }
          text_indices.reverse();
          time_indices.reverse();
          return [text_indices, time_indices];
        }
      }
    ),
    /***/
    "./src/utils/tensor.js": (
      /*!*****************************!*\
        !*** ./src/utils/tensor.js ***!
        \*****************************/
      /***/
      (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        __webpack_require__2.r(__webpack_exports__2);
        __webpack_require__2.d(__webpack_exports__2, {
          /* harmony export */
          Tensor: () => (
            /* binding */
            Tensor
          ),
          /* harmony export */
          cat: () => (
            /* binding */
            cat
          ),
          /* harmony export */
          full: () => (
            /* binding */
            full
          ),
          /* harmony export */
          full_like: () => (
            /* binding */
            full_like
          ),
          /* harmony export */
          interpolate: () => (
            /* binding */
            interpolate
          ),
          /* harmony export */
          interpolate_4d: () => (
            /* binding */
            interpolate_4d
          ),
          /* harmony export */
          layer_norm: () => (
            /* binding */
            layer_norm
          ),
          /* harmony export */
          matmul: () => (
            /* binding */
            matmul
          ),
          /* harmony export */
          mean: () => (
            /* binding */
            mean
          ),
          /* harmony export */
          mean_pooling: () => (
            /* binding */
            mean_pooling
          ),
          /* harmony export */
          ones: () => (
            /* binding */
            ones
          ),
          /* harmony export */
          ones_like: () => (
            /* binding */
            ones_like
          ),
          /* harmony export */
          permute: () => (
            /* binding */
            permute
          ),
          /* harmony export */
          quantize_embeddings: () => (
            /* binding */
            quantize_embeddings
          ),
          /* harmony export */
          rfft: () => (
            /* binding */
            rfft
          ),
          /* harmony export */
          stack: () => (
            /* binding */
            stack
          ),
          /* harmony export */
          std_mean: () => (
            /* binding */
            std_mean
          ),
          /* harmony export */
          topk: () => (
            /* binding */
            topk
          ),
          /* harmony export */
          zeros: () => (
            /* binding */
            zeros
          ),
          /* harmony export */
          zeros_like: () => (
            /* binding */
            zeros_like
          )
          /* harmony export */
        });
        var _maths_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__2(
          /*! ./maths.js */
          "./src/utils/maths.js"
        );
        var _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__2(
          /*! ../backends/onnx.js */
          "./src/backends/onnx.js"
        );
        var _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__2(
          /*! ../ops/registry.js */
          "./src/ops/registry.js"
        );
        const DataTypeMap = Object.freeze({
          float32: Float32Array,
          float16: Uint16Array,
          float64: Float64Array,
          string: Array,
          // string[]
          int8: Int8Array,
          uint8: Uint8Array,
          int16: Int16Array,
          uint16: Uint16Array,
          int32: Int32Array,
          uint32: Uint32Array,
          int64: BigInt64Array,
          uint64: BigUint64Array,
          bool: Uint8Array
        });
        class Tensor {
          /** @type {number[]} Dimensions of the tensor. */
          get dims() {
            return this.ort_tensor.dims;
          }
          set dims(value) {
            this.ort_tensor.dims = value;
          }
          /** @type {DataType} Type of the tensor. */
          get type() {
            return this.ort_tensor.type;
          }
          /** @type {DataArray} The data stored in the tensor. */
          get data() {
            return this.ort_tensor.data;
          }
          /** @type {number} The number of elements in the tensor. */
          get size() {
            return this.ort_tensor.size;
          }
          /** @type {string} The location of the tensor data. */
          get location() {
            return this.ort_tensor.location;
          }
          ort_tensor;
          /**
           * Create a new Tensor or copy an existing Tensor.
           * @param {[DataType, DataArray, number[]]|[ONNXTensor]} args
           */
          constructor(...args) {
            if ((0, _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.isONNXTensor)(args[0])) {
              this.ort_tensor = /** @type {ONNXTensor} */
              args[0];
            } else {
              this.ort_tensor = new _backends_onnx_js__WEBPACK_IMPORTED_MODULE_1__.Tensor(
                /** @type {DataType} */
                args[0],
                /** @type {Exclude<import('./maths.js').AnyTypedArray, Uint8ClampedArray>} */
                args[1],
                args[2]
              );
            }
            return new Proxy(this, {
              get: (obj, key) => {
                if (typeof key === "string") {
                  let index2 = Number(key);
                  if (Number.isInteger(index2)) {
                    return obj._getitem(index2);
                  }
                }
                return obj[key];
              },
              set: (obj, key, value) => {
                return obj[key] = value;
              }
            });
          }
          dispose() {
            this.ort_tensor.dispose();
          }
          /**
           * Returns an iterator object for iterating over the tensor data in row-major order.
           * If the tensor has more than one dimension, the iterator will yield subarrays.
           * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.
           */
          *[Symbol.iterator]() {
            const [iterLength, ...iterDims] = this.dims;
            if (iterDims.length > 0) {
              const iterSize = iterDims.reduce((a, b) => a * b);
              for (let i = 0; i < iterLength; ++i) {
                yield this._subarray(i, iterSize, iterDims);
              }
            } else {
              yield* this.data;
            }
          }
          /**
           * Index into a Tensor object.
           * @param {number} index The index to access.
           * @returns {Tensor} The data at the specified index.
           */
          _getitem(index2) {
            const [iterLength, ...iterDims] = this.dims;
            index2 = safeIndex(index2, iterLength);
            if (iterDims.length > 0) {
              const iterSize = iterDims.reduce((a, b) => a * b);
              return this._subarray(index2, iterSize, iterDims);
            } else {
              return new Tensor(this.type, [this.data[index2]], iterDims);
            }
          }
          /**
           * @param {number|bigint} item The item to search for in the tensor
           * @returns {number} The index of the first occurrence of item in the tensor data.
           */
          indexOf(item) {
            const this_data = this.data;
            for (let index2 = 0; index2 < this_data.length; ++index2) {
              if (this_data[index2] == item) {
                return index2;
              }
            }
            return -1;
          }
          /**
           * @param {number} index
           * @param {number} iterSize
           * @param {any} iterDims
           * @returns {Tensor}
           */
          _subarray(index2, iterSize, iterDims) {
            const o1 = index2 * iterSize;
            const o2 = (index2 + 1) * iterSize;
            const data = "subarray" in this.data ? this.data.subarray(o1, o2) : this.data.slice(o1, o2);
            return new Tensor(this.type, data, iterDims);
          }
          /**
           * Returns the value of this tensor as a standard JavaScript Number. This only works
           * for tensors with one element. For other cases, see `Tensor.tolist()`.
           * @returns {number|bigint} The value of this tensor as a standard JavaScript Number.
           * @throws {Error} If the tensor has more than one element.
           */
          item() {
            const this_data = this.data;
            if (this_data.length !== 1) {
              throw new Error(`a Tensor with ${this_data.length} elements cannot be converted to Scalar`);
            }
            return this_data[0];
          }
          /**
           * Convert tensor data to a n-dimensional JS list
           * @returns {Array}
           */
          tolist() {
            return reshape(this.data, this.dims);
          }
          /**
           * Return a new Tensor with the sigmoid function applied to each element.
           * @returns {Tensor} The tensor with the sigmoid function applied.
           */
          sigmoid() {
            return this.clone().sigmoid_();
          }
          /**
           * Applies the sigmoid function to the tensor in place.
           * @returns {Tensor} Returns `this`.
           */
          sigmoid_() {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] = 1 / (1 + Math.exp(-this_data[i]));
            }
            return this;
          }
          /**
           * Return a new Tensor with a callback function applied to each element.
           * @param {Function} callback - The function to apply to each element. It should take three arguments:
           *                              the current element, its index, and the tensor's data array.
           * @returns {Tensor} A new Tensor with the callback function applied to each element.
           */
          map(callback) {
            return this.clone().map_(callback);
          }
          /**
           * Apply a callback function to each element of the tensor in place.
           * @param {Function} callback - The function to apply to each element. It should take three arguments:
           *                              the current element, its index, and the tensor's data array.
           * @returns {Tensor} Returns `this`.
           */
          map_(callback) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] = callback(this_data[i], i, this_data);
            }
            return this;
          }
          /**
           * Return a new Tensor with every element multiplied by a constant.
           * @param {number} val The value to multiply by.
           * @returns {Tensor} The new tensor.
           */
          mul(val) {
            return this.clone().mul_(val);
          }
          /**
           * Multiply the tensor by a constant in place.
           * @param {number} val The value to multiply by.
           * @returns {Tensor} Returns `this`.
           */
          mul_(val) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] *= val;
            }
            return this;
          }
          /**
           * Return a new Tensor with every element divided by a constant.
           * @param {number} val The value to divide by.
           * @returns {Tensor} The new tensor.
           */
          div(val) {
            return this.clone().div_(val);
          }
          /**
           * Divide the tensor by a constant in place.
           * @param {number} val The value to divide by.
           * @returns {Tensor} Returns `this`.
           */
          div_(val) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] /= val;
            }
            return this;
          }
          /**
           * Return a new Tensor with every element added by a constant.
           * @param {number} val The value to add by.
           * @returns {Tensor} The new tensor.
           */
          add(val) {
            return this.clone().add_(val);
          }
          /**
           * Add the tensor by a constant in place.
           * @param {number} val The value to add by.
           * @returns {Tensor} Returns `this`.
           */
          add_(val) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] += val;
            }
            return this;
          }
          /**
           * Return a new Tensor with every element subtracted by a constant.
           * @param {number} val The value to subtract by.
           * @returns {Tensor} The new tensor.
           */
          sub(val) {
            return this.clone().sub_(val);
          }
          /**
           * Subtract the tensor by a constant in place.
           * @param {number} val The value to subtract by.
           * @returns {Tensor} Returns `this`.
           */
          sub_(val) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] -= val;
            }
            return this;
          }
          clone() {
            return new Tensor(this.type, this.data.slice(), this.dims.slice());
          }
          slice(...slices) {
            const newTensorDims = [];
            const newOffsets = [];
            for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {
              let slice = slices[sliceIndex];
              if (slice === null || slice === void 0) {
                newOffsets.push([0, this.dims[sliceIndex]]);
                newTensorDims.push(this.dims[sliceIndex]);
              } else if (typeof slice === "number") {
                slice = safeIndex(slice, this.dims[sliceIndex], sliceIndex);
                newOffsets.push([slice, slice + 1]);
              } else if (Array.isArray(slice) && slice.length === 2) {
                let [start, end] = slice;
                start = start === null ? 0 : safeIndex(start, this.dims[sliceIndex], sliceIndex, false);
                end = end === null ? this.dims[sliceIndex] : safeIndex(end, this.dims[sliceIndex], sliceIndex, false);
                if (start > end) {
                  throw new Error(`Invalid slice: ${slice}`);
                }
                const offsets = [
                  Math.max(start, 0),
                  Math.min(end, this.dims[sliceIndex])
                ];
                newOffsets.push(offsets);
                newTensorDims.push(offsets[1] - offsets[0]);
              } else {
                throw new Error(`Invalid slice: ${slice}`);
              }
            }
            const newDims = newOffsets.map(([start, end]) => end - start);
            const newBufferSize = newDims.reduce((a, b) => a * b);
            const this_data = this.data;
            const data = new this_data.constructor(newBufferSize);
            const stride = this.stride();
            for (let i = 0; i < newBufferSize; ++i) {
              let originalIndex = 0;
              for (let j = newDims.length - 1, num = i; j >= 0; --j) {
                const size3 = newDims[j];
                originalIndex += (num % size3 + newOffsets[j][0]) * stride[j];
                num = Math.floor(num / size3);
              }
              data[i] = this_data[originalIndex];
            }
            return new Tensor(this.type, data, newTensorDims);
          }
          /**
           * Return a permuted version of this Tensor, according to the provided dimensions.
           * @param  {...number} dims Dimensions to permute.
           * @returns {Tensor} The permuted tensor.
           */
          permute(...dims) {
            return permute(this, dims);
          }
          // TODO: implement transpose. For now (backwards compatibility), it's just an alias for permute()
          transpose(...dims) {
            return this.permute(...dims);
          }
          // TODO add .max() and .min() methods
          /**
           * Returns the sum of each row of the input tensor in the given dimension dim.
           *
           * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.
           * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.
           * @returns The summed tensor
           */
          sum(dim = null, keepdim = false) {
            return this.norm(1, dim, keepdim);
          }
          /**
           * Returns the matrix norm or vector norm of a given tensor.
           * @param {number|string} [p='fro'] The order of norm
           * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.
           * If dim is None, the norm will be calculated across all dimensions of input.
           * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.
           * @returns {Tensor} The norm of the tensor.
           */
          norm(p = "fro", dim = null, keepdim = false) {
            if (p === "fro") {
              p = 2;
            } else if (typeof p === "string") {
              throw Error(`Unsupported norm: ${p}`);
            }
            const this_data = this.data;
            if (dim === null) {
              let val = this_data.reduce((a, b) => a + b ** p, 0) ** (1 / p);
              return new Tensor(this.type, [val], []);
            }
            dim = safeIndex(dim, this.dims.length);
            const resultDims = this.dims.slice();
            resultDims[dim] = 1;
            const result = new this_data.constructor(this_data.length / this.dims[dim]);
            for (let i = 0; i < this_data.length; ++i) {
              let resultIndex = 0;
              for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                const size3 = this.dims[j];
                if (j !== dim) {
                  const index2 = num % size3;
                  resultIndex += index2 * resultMultiplier;
                  resultMultiplier *= resultDims[j];
                }
                num = Math.floor(num / size3);
              }
              result[resultIndex] += this_data[i] ** p;
            }
            if (p !== 1) {
              for (let i = 0; i < result.length; ++i) {
                result[i] = result[i] ** (1 / p);
              }
            }
            if (!keepdim) {
              resultDims.splice(dim, 1);
            }
            return new Tensor(this.type, result, resultDims);
          }
          /**
           * Performs `L_p` normalization of inputs over specified dimension. Operates in place.
           * @param {number} [p=2] The exponent value in the norm formulation
           * @param {number} [dim=1] The dimension to reduce
           * @returns {Tensor} `this` for operation chaining.
           */
          normalize_(p = 2, dim = 1) {
            dim = safeIndex(dim, this.dims.length);
            const norm = this.norm(p, dim, true);
            const this_data = this.data;
            const norm_data = norm.data;
            for (let i = 0; i < this_data.length; ++i) {
              let resultIndex = 0;
              for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                const size3 = this.dims[j];
                if (j !== dim) {
                  const index2 = num % size3;
                  resultIndex += index2 * resultMultiplier;
                  resultMultiplier *= this.dims[j];
                }
                num = Math.floor(num / size3);
              }
              this_data[i] /= norm_data[resultIndex];
            }
            return this;
          }
          /**
           * Performs `L_p` normalization of inputs over specified dimension.
           * @param {number} [p=2] The exponent value in the norm formulation
           * @param {number} [dim=1] The dimension to reduce
           * @returns {Tensor} The normalized tensor.
           */
          normalize(p = 2, dim = 1) {
            return this.clone().normalize_(p, dim);
          }
          /**
           * Compute and return the stride of this tensor.
           * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.
           * @returns {number[]} The stride of this tensor.
           */
          stride() {
            return dimsToStride(this.dims);
          }
          /**
           * Returns a tensor with all specified dimensions of input of size 1 removed.
           *
           * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.
           * If you would like a copy, use `tensor.clone()` before squeezing.
           *
           * @param {number} [dim=null] If given, the input will be squeezed only in the specified dimensions.
           * @returns {Tensor} The squeezed tensor
           */
          squeeze(dim = null) {
            return new Tensor(
              this.type,
              this.data,
              calc_squeeze_dims(this.dims, dim)
            );
          }
          /**
           * In-place version of @see {@link Tensor.squeeze}
           */
          squeeze_(dim = null) {
            this.dims = calc_squeeze_dims(this.dims, dim);
            return this;
          }
          /**
           * Returns a new tensor with a dimension of size one inserted at the specified position.
           *
           * NOTE: The returned tensor shares the same underlying data with this tensor.
           *
           * @param {number} dim The index at which to insert the singleton dimension
           * @returns {Tensor} The unsqueezed tensor
           */
          unsqueeze(dim = null) {
            return new Tensor(
              this.type,
              this.data,
              calc_unsqueeze_dims(this.dims, dim)
            );
          }
          /**
           * In-place version of @see {@link Tensor.unsqueeze}
           */
          unsqueeze_(dim = null) {
            this.dims = calc_unsqueeze_dims(this.dims, dim);
            return this;
          }
          /**
           * In-place version of @see {@link Tensor.flatten}
           */
          flatten_(start_dim = 0, end_dim = -1) {
            end_dim = (end_dim + this.dims.length) % this.dims.length;
            let dimsToKeepBefore = this.dims.slice(0, start_dim);
            let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);
            let dimsToKeepAfter = this.dims.slice(end_dim + 1);
            this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter];
            return this;
          }
          /**
           * Flattens input by reshaping it into a one-dimensional tensor.
           * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`
           * and ending with `end_dim` are flattened. The order of elements in input is unchanged.
           * @param {number} start_dim the first dim to flatten
           * @param {number} end_dim the last dim to flatten
           * @returns {Tensor} The flattened tensor.
           */
          flatten(start_dim = 0, end_dim = -1) {
            return this.clone().flatten_(start_dim, end_dim);
          }
          /**
           * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.
           * @param  {...number} dims the desired size
           * @returns {Tensor} The tensor with the same data but different shape
           */
          view(...dims) {
            let inferredIndex = -1;
            for (let i = 0; i < dims.length; ++i) {
              if (dims[i] === -1) {
                if (inferredIndex !== -1) {
                  throw new Error("Only one dimension can be inferred");
                }
                inferredIndex = i;
              }
            }
            const this_data = this.data;
            if (inferredIndex !== -1) {
              const productOther = dims.reduce((product, curr, index2) => {
                return index2 !== inferredIndex ? product * curr : product;
              }, 1);
              dims[inferredIndex] = this_data.length / productOther;
            }
            return new Tensor(this.type, this_data, dims);
          }
          neg_() {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] = -this_data[i];
            }
            return this;
          }
          neg() {
            return this.clone().neg_();
          }
          /**
           * In-place version of @see {@link Tensor.clamp}
           */
          clamp_(min, max) {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] = Math.min(Math.max(this_data[i], min), max);
            }
            return this;
          }
          /**
           * Clamps all elements in input into the range [ min, max ]
           * @param {number} min lower-bound of the range to be clamped to
           * @param {number} max upper-bound of the range to be clamped to
           * @returns {Tensor} the output tensor.
           */
          clamp(min, max) {
            return this.clone().clamp_(min, max);
          }
          /**
           * In-place version of @see {@link Tensor.round}
           */
          round_() {
            const this_data = this.data;
            for (let i = 0; i < this_data.length; ++i) {
              this_data[i] = Math.round(this_data[i]);
            }
            return this;
          }
          /**
           * Rounds elements of input to the nearest integer.
           * @returns {Tensor} the output tensor.
           */
          round() {
            return this.clone().round_();
          }
          mean(dim = null, keepdim = false) {
            return mean(this, dim, keepdim);
          }
          /**
           * Performs Tensor dtype conversion.
           * @param {DataType} type The desired data type.
           * @returns {Tensor} The converted tensor.
           */
          to(type) {
            if (this.type === type) return this;
            if (!DataTypeMap.hasOwnProperty(type)) {
              throw new Error(`Unsupported type: ${type}`);
            }
            return new Tensor(type, DataTypeMap[type].from(this.data), this.dims);
          }
        }
        function reshape(data, dimensions) {
          const totalElements = data.length;
          const dimensionSize = dimensions.reduce((a, b) => a * b);
          if (totalElements !== dimensionSize) {
            throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);
          }
          let reshapedArray = data;
          for (let i = dimensions.length - 1; i >= 0; i--) {
            reshapedArray = reshapedArray.reduce((acc, val) => {
              let lastArray = acc[acc.length - 1];
              if (lastArray.length < dimensions[i]) {
                lastArray.push(val);
              } else {
                acc.push([val]);
              }
              return acc;
            }, [[]]);
          }
          return reshapedArray[0];
        }
        function permute(tensor, axes) {
          const [permutedData, shape] = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.permute_data)(tensor.data, tensor.dims, axes);
          return new Tensor(tensor.type, permutedData, shape);
        }
        function interpolate(input, [out_height, out_width], mode = "bilinear", align_corners = false) {
          const in_channels = input.dims.at(-3) ?? 1;
          const in_height = input.dims.at(-2);
          const in_width = input.dims.at(-1);
          let output = (0, _maths_js__WEBPACK_IMPORTED_MODULE_0__.interpolate_data)(
            /** @type {import('./maths.js').TypedArray}*/
            input.data,
            [in_channels, in_height, in_width],
            [out_height, out_width],
            mode,
            align_corners
          );
          return new Tensor(input.type, output, [in_channels, out_height, out_width]);
        }
        async function interpolate_4d(input, {
          size: size3 = null,
          mode = "bilinear"
        } = {}) {
          if (input.dims.length !== 4) {
            throw new Error("`interpolate_4d` currently only supports 4D input.");
          }
          if (!size3) {
            throw new Error("`interpolate_4d` requires a `size` argument.");
          }
          let targetDims;
          if (size3.length === 2) {
            targetDims = [...input.dims.slice(0, 2), ...size3];
          } else if (size3.length === 3) {
            targetDims = [input.dims[0], ...size3];
          } else if (size3.length === 4) {
            targetDims = size3;
          } else {
            throw new Error("`size` must be of length 2, 3, or 4.");
          }
          let op;
          if (mode === "bilinear") {
            op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bilinear_interpolate_4d;
          } else if (mode === "bicubic") {
            op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.bicubic_interpolate_4d;
          } else {
            throw new Error(`Unsupported mode: ${mode}`);
          }
          const sizeTensor = new Tensor("int64", new BigInt64Array(targetDims.map(BigInt)), [targetDims.length]);
          return await op({ x: input, s: sizeTensor });
        }
        async function matmul(a, b) {
          const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.matmul;
          return await op({ a, b });
        }
        async function rfft(x, a) {
          const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.rfft;
          return await op({ x, a });
        }
        async function topk(x, k) {
          const op = await _ops_registry_js__WEBPACK_IMPORTED_MODULE_2__.TensorOpRegistry.top_k;
          if (k === null) {
            k = x.dims.at(-1);
          } else {
            k = Math.min(k, x.dims.at(-1));
          }
          return await op({
            x,
            k: new Tensor(
              "int64",
              [BigInt(k)],
              [1]
            )
          });
        }
        function mean_pooling(last_hidden_state, attention_mask) {
          const lastHiddenStateData = last_hidden_state.data;
          const attentionMaskData = attention_mask.data;
          const shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];
          const returnedData = new lastHiddenStateData.constructor(shape[0] * shape[1]);
          const [batchSize, seqLength, embedDim] = last_hidden_state.dims;
          let outIndex = 0;
          for (let i = 0; i < batchSize; ++i) {
            const offset = i * embedDim * seqLength;
            for (let k = 0; k < embedDim; ++k) {
              let sum = 0;
              let count = 0;
              const attnMaskOffset = i * seqLength;
              const offset2 = offset + k;
              for (let j = 0; j < seqLength; ++j) {
                const attn = Number(attentionMaskData[attnMaskOffset + j]);
                count += attn;
                sum += lastHiddenStateData[offset2 + j * embedDim] * attn;
              }
              const avg = sum / count;
              returnedData[outIndex++] = avg;
            }
          }
          return new Tensor(
            last_hidden_state.type,
            returnedData,
            shape
          );
        }
        function layer_norm(input, normalized_shape, {
          eps = 1e-5
        } = {}) {
          if (input.dims.length !== 2) {
            throw new Error("`layer_norm` currently only supports 2D input.");
          }
          const [batchSize, featureDim] = input.dims;
          if (normalized_shape.length !== 1 && normalized_shape[0] !== featureDim) {
            throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");
          }
          const [std, mean2] = std_mean(input, 1, 0, true);
          const stdData = (
            /** @type {Float32Array} */
            std.data
          );
          const meanData = (
            /** @type {Float32Array} */
            mean2.data
          );
          const inputData = (
            /** @type {Float32Array} */
            input.data
          );
          const returnedData = new inputData.constructor(inputData.length);
          for (let i = 0; i < batchSize; ++i) {
            const offset = i * featureDim;
            for (let j = 0; j < featureDim; ++j) {
              const offset2 = offset + j;
              returnedData[offset2] = (inputData[offset2] - meanData[i]) / (stdData[i] + eps);
            }
          }
          return new Tensor(input.type, returnedData, input.dims);
        }
        function calc_squeeze_dims(dims, dim) {
          dims = dims.slice();
          if (dim === null) {
            dims = dims.filter((d) => d !== 1);
          } else if (typeof dim === "number") {
            if (dims[dim] === 1) {
              dims.splice(dim, 1);
            }
          } else if (Array.isArray(dim)) {
            dims = dims.filter((x, i) => {
              return x !== 1 || !dim.includes(i);
            });
          }
          return dims;
        }
        function calc_unsqueeze_dims(dims, dim) {
          dim = safeIndex(dim, dims.length + 1);
          dims = dims.slice();
          dims.splice(dim, 0, 1);
          return dims;
        }
        function safeIndex(index2, size3, dimension = null, boundsCheck = true) {
          if (boundsCheck && (index2 < -size3 || index2 >= size3)) {
            throw new Error(`IndexError: index ${index2} is out of bounds for dimension${dimension === null ? "" : " " + dimension} with size ${size3}`);
          }
          if (index2 < 0) {
            index2 = (index2 % size3 + size3) % size3;
          }
          return index2;
        }
        function cat(tensors, dim = 0) {
          dim = safeIndex(dim, tensors[0].dims.length);
          const resultDims = tensors[0].dims.slice();
          resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);
          const resultSize = resultDims.reduce((a, b) => a * b, 1);
          const result = new tensors[0].data.constructor(resultSize);
          const resultType = tensors[0].type;
          if (dim === 0) {
            let offset = 0;
            for (const tensor of tensors) {
              const tensorData = tensor.data;
              result.set(tensorData, offset);
              offset += tensorData.length;
            }
          } else {
            let currentDim = 0;
            for (let t = 0; t < tensors.length; ++t) {
              const { data, dims } = tensors[t];
              for (let i = 0; i < data.length; ++i) {
                let resultIndex = 0;
                for (let j = dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
                  const size3 = dims[j];
                  let index2 = num % size3;
                  if (j === dim) {
                    index2 += currentDim;
                  }
                  resultIndex += index2 * resultMultiplier;
                  resultMultiplier *= resultDims[j];
                  num = Math.floor(num / size3);
                }
                result[resultIndex] = data[i];
              }
              currentDim += dims[dim];
            }
          }
          return new Tensor(resultType, result, resultDims);
        }
        function stack(tensors, dim = 0) {
          return cat(tensors.map((t) => t.unsqueeze(dim)), dim);
        }
        function std_mean(input, dim = null, correction = 1, keepdim = false) {
          const inputData = (
            /** @type {Float32Array} */
            input.data
          );
          const inputDims = input.dims;
          if (dim === null) {
            const sum = inputData.reduce((a, b) => a + b, 0);
            const mean2 = sum / inputData.length;
            const std = Math.sqrt(inputData.reduce((a, b) => a + (b - mean2) ** 2, 0) / (inputData.length - correction));
            const meanTensor2 = new Tensor(input.type, [mean2], [
              /* scalar */
            ]);
            const stdTensor2 = new Tensor(input.type, [std], [
              /* scalar */
            ]);
            return [stdTensor2, meanTensor2];
          }
          dim = safeIndex(dim, inputDims.length);
          const meanTensor = mean(input, dim, keepdim);
          const meanTensorData = meanTensor.data;
          const resultDims = inputDims.slice();
          resultDims[dim] = 1;
          const result = new inputData.constructor(inputData.length / inputDims[dim]);
          for (let i = 0; i < inputData.length; ++i) {
            let resultIndex = 0;
            for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
              const size3 = inputDims[j];
              if (j !== dim) {
                const index2 = num % size3;
                resultIndex += index2 * resultMultiplier;
                resultMultiplier *= resultDims[j];
              }
              num = Math.floor(num / size3);
            }
            result[resultIndex] += (inputData[i] - meanTensorData[resultIndex]) ** 2;
          }
          for (let i = 0; i < result.length; ++i) {
            result[i] = Math.sqrt(result[i] / (inputDims[dim] - correction));
          }
          if (!keepdim) {
            resultDims.splice(dim, 1);
          }
          const stdTensor = new Tensor(input.type, result, resultDims);
          return [stdTensor, meanTensor];
        }
        function mean(input, dim = null, keepdim = false) {
          const inputData = (
            /** @type {Float32Array} */
            input.data
          );
          if (dim === null) {
            const val = inputData.reduce((a, b) => a + b, 0);
            return new Tensor(input.type, [val / inputData.length], [
              /* scalar */
            ]);
          }
          const inputDims = input.dims;
          dim = safeIndex(dim, inputDims.length);
          const resultDims = inputDims.slice();
          resultDims[dim] = 1;
          const result = new inputData.constructor(inputData.length / inputDims[dim]);
          for (let i = 0; i < inputData.length; ++i) {
            let resultIndex = 0;
            for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {
              const size3 = inputDims[j];
              if (j !== dim) {
                const index2 = num % size3;
                resultIndex += index2 * resultMultiplier;
                resultMultiplier *= resultDims[j];
              }
              num = Math.floor(num / size3);
            }
            result[resultIndex] += inputData[i];
          }
          if (inputDims[dim] !== 1) {
            for (let i = 0; i < result.length; ++i) {
              result[i] = result[i] / inputDims[dim];
            }
          }
          if (!keepdim) {
            resultDims.splice(dim, 1);
          }
          return new Tensor(input.type, result, resultDims);
        }
        function dimsToStride(dims) {
          const stride = new Array(dims.length);
          for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {
            stride[i] = s2;
            s2 *= dims[i];
          }
          return stride;
        }
        function fullHelper(size3, fill_value, dtype, cls) {
          const numElements = size3.reduce((a, b) => a * b, 1);
          return new Tensor(
            dtype,
            new cls(numElements).fill(fill_value),
            size3
          );
        }
        function full(size3, fill_value) {
          let dtype;
          let typedArrayCls;
          if (typeof fill_value === "number") {
            dtype = "float32";
            typedArrayCls = Float32Array;
          } else if (typeof fill_value === "bigint") {
            dtype = "int64";
            typedArrayCls = BigInt64Array;
          } else {
            throw new Error(`Unsupported data type: ${typeof fill_value}`);
          }
          return fullHelper(size3, fill_value, dtype, typedArrayCls);
        }
        function full_like(tensor, fill_value) {
          return full(tensor.dims, fill_value);
        }
        function ones(size3) {
          return fullHelper(size3, 1n, "int64", BigInt64Array);
        }
        function ones_like(tensor) {
          return ones(tensor.dims);
        }
        function zeros(size3) {
          return fullHelper(size3, 0n, "int64", BigInt64Array);
        }
        function zeros_like(tensor) {
          return zeros(tensor.dims);
        }
        function quantize_embeddings(tensor, precision) {
          if (tensor.dims.length !== 2) {
            throw new Error("The tensor must have 2 dimensions");
          }
          if (tensor.dims.at(-1) % 8 !== 0) {
            throw new Error("The last dimension of the tensor must be a multiple of 8");
          }
          if (!["binary", "ubinary"].includes(precision)) {
            throw new Error("The precision must be either 'binary' or 'ubinary'");
          }
          const signed = precision === "binary";
          const dtype = signed ? "int8" : "uint8";
          const cls = signed ? Int8Array : Uint8Array;
          const inputData = tensor.data;
          const outputData = new cls(inputData.length / 8);
          for (let i = 0; i < inputData.length; ++i) {
            const bit = inputData[i] > 0 ? 1 : 0;
            const arrayIndex = Math.floor(i / 8);
            const bitPosition = i % 8;
            outputData[arrayIndex] |= bit << 7 - bitPosition;
            if (signed && bitPosition === 0) {
              outputData[arrayIndex] -= 128;
            }
          }
          ;
          return new Tensor(dtype, outputData, [tensor.dims[0], tensor.dims[1] / 8]);
        }
      }
    )
    /******/
  };
  var __webpack_module_cache__ = {};
  function __webpack_require__(moduleId) {
    var cachedModule = __webpack_module_cache__[moduleId];
    if (cachedModule !== void 0) {
      return cachedModule.exports;
    }
    var module = __webpack_module_cache__[moduleId] = {
      /******/
      // no module.id needed
      /******/
      // no module.loaded needed
      /******/
      exports: {}
      /******/
    };
    __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
    return module.exports;
  }
  (() => {
    var getProto = Object.getPrototypeOf ? (obj) => Object.getPrototypeOf(obj) : (obj) => obj.__proto__;
    var leafPrototypes;
    __webpack_require__.t = function(value, mode) {
      if (mode & 1) value = this(value);
      if (mode & 8) return value;
      if (typeof value === "object" && value) {
        if (mode & 4 && value.__esModule) return value;
        if (mode & 16 && typeof value.then === "function") return value;
      }
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      var def = {};
      leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
      for (var current = mode & 2 && value; typeof current == "object" && !~leafPrototypes.indexOf(current); current = getProto(current)) {
        Object.getOwnPropertyNames(current).forEach((key) => def[key] = () => value[key]);
      }
      def["default"] = () => value;
      __webpack_require__.d(ns, def);
      return ns;
    };
  })();
  (() => {
    __webpack_require__.d = (exports, definition) => {
      for (var key in definition) {
        if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
          Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
      }
    };
  })();
  (() => {
    __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
  })();
  (() => {
    __webpack_require__.r = (exports) => {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
  })();
  var __webpack_exports__ = {};
  __webpack_require__.r(__webpack_exports__);
  __webpack_require__.d(__webpack_exports__, {
    /* harmony export */
    ASTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ASTFeatureExtractor
    ),
    /* harmony export */
    ASTForAudioClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTForAudioClassification
    ),
    /* harmony export */
    ASTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTModel
    ),
    /* harmony export */
    ASTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ASTPreTrainedModel
    ),
    /* harmony export */
    AlbertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForMaskedLM
    ),
    /* harmony export */
    AlbertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForQuestionAnswering
    ),
    /* harmony export */
    AlbertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertForSequenceClassification
    ),
    /* harmony export */
    AlbertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertModel
    ),
    /* harmony export */
    AlbertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AlbertPreTrainedModel
    ),
    /* harmony export */
    AlbertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AlbertTokenizer
    ),
    /* harmony export */
    AudioClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AudioClassificationPipeline
    ),
    /* harmony export */
    AutoConfig: () => (
      /* reexport safe */
      _configs_js__WEBPACK_IMPORTED_MODULE_5__.AutoConfig
    ),
    /* harmony export */
    AutoModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModel
    ),
    /* harmony export */
    AutoModelForAudioClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioClassification
    ),
    /* harmony export */
    AutoModelForAudioFrameClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForAudioFrameClassification
    ),
    /* harmony export */
    AutoModelForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCTC
    ),
    /* harmony export */
    AutoModelForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForCausalLM
    ),
    /* harmony export */
    AutoModelForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDepthEstimation
    ),
    /* harmony export */
    AutoModelForDocumentQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForDocumentQuestionAnswering
    ),
    /* harmony export */
    AutoModelForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageClassification
    ),
    /* harmony export */
    AutoModelForImageFeatureExtraction: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageFeatureExtraction
    ),
    /* harmony export */
    AutoModelForImageMatting: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageMatting
    ),
    /* harmony export */
    AutoModelForImageSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageSegmentation
    ),
    /* harmony export */
    AutoModelForImageToImage: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForImageToImage
    ),
    /* harmony export */
    AutoModelForMaskGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskGeneration
    ),
    /* harmony export */
    AutoModelForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForMaskedLM
    ),
    /* harmony export */
    AutoModelForNormalEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForNormalEstimation
    ),
    /* harmony export */
    AutoModelForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForObjectDetection
    ),
    /* harmony export */
    AutoModelForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForQuestionAnswering
    ),
    /* harmony export */
    AutoModelForSemanticSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSemanticSegmentation
    ),
    /* harmony export */
    AutoModelForSeq2SeqLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSeq2SeqLM
    ),
    /* harmony export */
    AutoModelForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSequenceClassification
    ),
    /* harmony export */
    AutoModelForSpeechSeq2Seq: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForSpeechSeq2Seq
    ),
    /* harmony export */
    AutoModelForTextToSpectrogram: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToSpectrogram
    ),
    /* harmony export */
    AutoModelForTextToWaveform: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTextToWaveform
    ),
    /* harmony export */
    AutoModelForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForTokenClassification
    ),
    /* harmony export */
    AutoModelForUniversalSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForUniversalSegmentation
    ),
    /* harmony export */
    AutoModelForVision2Seq: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForVision2Seq
    ),
    /* harmony export */
    AutoModelForXVector: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForXVector
    ),
    /* harmony export */
    AutoModelForZeroShotObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.AutoModelForZeroShotObjectDetection
    ),
    /* harmony export */
    AutoProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.AutoProcessor
    ),
    /* harmony export */
    AutoTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.AutoTokenizer
    ),
    /* harmony export */
    AutomaticSpeechRecognitionPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.AutomaticSpeechRecognitionPipeline
    ),
    /* harmony export */
    BartForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForConditionalGeneration
    ),
    /* harmony export */
    BartForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BartForSequenceClassification
    ),
    /* harmony export */
    BartModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BartModel
    ),
    /* harmony export */
    BartPretrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BartPretrainedModel
    ),
    /* harmony export */
    BartTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BartTokenizer
    ),
    /* harmony export */
    BaseModelOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BaseModelOutput
    ),
    /* harmony export */
    BaseStreamer: () => (
      /* reexport safe */
      _generation_streamers_js__WEBPACK_IMPORTED_MODULE_10__.BaseStreamer
    ),
    /* harmony export */
    BeitFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.BeitFeatureExtractor
    ),
    /* harmony export */
    BeitForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitForImageClassification
    ),
    /* harmony export */
    BeitModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitModel
    ),
    /* harmony export */
    BeitPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BeitPreTrainedModel
    ),
    /* harmony export */
    BertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForMaskedLM
    ),
    /* harmony export */
    BertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForQuestionAnswering
    ),
    /* harmony export */
    BertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForSequenceClassification
    ),
    /* harmony export */
    BertForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertForTokenClassification
    ),
    /* harmony export */
    BertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertModel
    ),
    /* harmony export */
    BertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BertPreTrainedModel
    ),
    /* harmony export */
    BertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BertTokenizer
    ),
    /* harmony export */
    BitImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.BitImageProcessor
    ),
    /* harmony export */
    BlenderbotForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotForConditionalGeneration
    ),
    /* harmony export */
    BlenderbotModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotModel
    ),
    /* harmony export */
    BlenderbotPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotPreTrainedModel
    ),
    /* harmony export */
    BlenderbotSmallForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallForConditionalGeneration
    ),
    /* harmony export */
    BlenderbotSmallModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallModel
    ),
    /* harmony export */
    BlenderbotSmallPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BlenderbotSmallPreTrainedModel
    ),
    /* harmony export */
    BlenderbotSmallTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotSmallTokenizer
    ),
    /* harmony export */
    BlenderbotTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BlenderbotTokenizer
    ),
    /* harmony export */
    BloomForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomForCausalLM
    ),
    /* harmony export */
    BloomModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomModel
    ),
    /* harmony export */
    BloomPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.BloomPreTrainedModel
    ),
    /* harmony export */
    BloomTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.BloomTokenizer
    ),
    /* harmony export */
    CLIPFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.CLIPFeatureExtractor
    ),
    /* harmony export */
    CLIPImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.CLIPImageProcessor
    ),
    /* harmony export */
    CLIPModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPModel
    ),
    /* harmony export */
    CLIPPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPPreTrainedModel
    ),
    /* harmony export */
    CLIPSegForImageSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegForImageSegmentation
    ),
    /* harmony export */
    CLIPSegModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegModel
    ),
    /* harmony export */
    CLIPSegPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPSegPreTrainedModel
    ),
    /* harmony export */
    CLIPTextModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModel
    ),
    /* harmony export */
    CLIPTextModelWithProjection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPTextModelWithProjection
    ),
    /* harmony export */
    CLIPTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CLIPTokenizer
    ),
    /* harmony export */
    CLIPVisionModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModel
    ),
    /* harmony export */
    CLIPVisionModelWithProjection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CLIPVisionModelWithProjection
    ),
    /* harmony export */
    CamembertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForMaskedLM
    ),
    /* harmony export */
    CamembertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForQuestionAnswering
    ),
    /* harmony export */
    CamembertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForSequenceClassification
    ),
    /* harmony export */
    CamembertForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertForTokenClassification
    ),
    /* harmony export */
    CamembertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertModel
    ),
    /* harmony export */
    CamembertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CamembertPreTrainedModel
    ),
    /* harmony export */
    CamembertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CamembertTokenizer
    ),
    /* harmony export */
    CausalLMOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutput
    ),
    /* harmony export */
    CausalLMOutputWithPast: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CausalLMOutputWithPast
    ),
    /* harmony export */
    ChineseCLIPFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ChineseCLIPFeatureExtractor
    ),
    /* harmony export */
    ChineseCLIPModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPModel
    ),
    /* harmony export */
    ChineseCLIPPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ChineseCLIPPreTrainedModel
    ),
    /* harmony export */
    ClapAudioModelWithProjection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapAudioModelWithProjection
    ),
    /* harmony export */
    ClapFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ClapFeatureExtractor
    ),
    /* harmony export */
    ClapModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapModel
    ),
    /* harmony export */
    ClapPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapPreTrainedModel
    ),
    /* harmony export */
    ClapTextModelWithProjection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ClapTextModelWithProjection
    ),
    /* harmony export */
    CodeGenForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenForCausalLM
    ),
    /* harmony export */
    CodeGenModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenModel
    ),
    /* harmony export */
    CodeGenPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CodeGenPreTrainedModel
    ),
    /* harmony export */
    CodeGenTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeGenTokenizer
    ),
    /* harmony export */
    CodeLlamaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CodeLlamaTokenizer
    ),
    /* harmony export */
    CohereForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereForCausalLM
    ),
    /* harmony export */
    CohereModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CohereModel
    ),
    /* harmony export */
    CoherePreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.CoherePreTrainedModel
    ),
    /* harmony export */
    CohereTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.CohereTokenizer
    ),
    /* harmony export */
    ConvBertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForMaskedLM
    ),
    /* harmony export */
    ConvBertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForQuestionAnswering
    ),
    /* harmony export */
    ConvBertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForSequenceClassification
    ),
    /* harmony export */
    ConvBertForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertForTokenClassification
    ),
    /* harmony export */
    ConvBertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertModel
    ),
    /* harmony export */
    ConvBertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvBertPreTrainedModel
    ),
    /* harmony export */
    ConvBertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ConvBertTokenizer
    ),
    /* harmony export */
    ConvNextFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextFeatureExtractor
    ),
    /* harmony export */
    ConvNextForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextForImageClassification
    ),
    /* harmony export */
    ConvNextImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ConvNextImageProcessor
    ),
    /* harmony export */
    ConvNextModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextModel
    ),
    /* harmony export */
    ConvNextPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextPreTrainedModel
    ),
    /* harmony export */
    ConvNextV2ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2ForImageClassification
    ),
    /* harmony export */
    ConvNextV2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2Model
    ),
    /* harmony export */
    ConvNextV2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ConvNextV2PreTrainedModel
    ),
    /* harmony export */
    DPTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DPTFeatureExtractor
    ),
    /* harmony export */
    DPTForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTForDepthEstimation
    ),
    /* harmony export */
    DPTImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DPTImageProcessor
    ),
    /* harmony export */
    DPTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTModel
    ),
    /* harmony export */
    DPTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DPTPreTrainedModel
    ),
    /* harmony export */
    DebertaForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForMaskedLM
    ),
    /* harmony export */
    DebertaForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForQuestionAnswering
    ),
    /* harmony export */
    DebertaForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForSequenceClassification
    ),
    /* harmony export */
    DebertaForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaForTokenClassification
    ),
    /* harmony export */
    DebertaModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaModel
    ),
    /* harmony export */
    DebertaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaPreTrainedModel
    ),
    /* harmony export */
    DebertaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaTokenizer
    ),
    /* harmony export */
    DebertaV2ForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForMaskedLM
    ),
    /* harmony export */
    DebertaV2ForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForQuestionAnswering
    ),
    /* harmony export */
    DebertaV2ForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForSequenceClassification
    ),
    /* harmony export */
    DebertaV2ForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2ForTokenClassification
    ),
    /* harmony export */
    DebertaV2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2Model
    ),
    /* harmony export */
    DebertaV2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DebertaV2PreTrainedModel
    ),
    /* harmony export */
    DebertaV2Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DebertaV2Tokenizer
    ),
    /* harmony export */
    DecisionTransformerModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerModel
    ),
    /* harmony export */
    DecisionTransformerPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DecisionTransformerPreTrainedModel
    ),
    /* harmony export */
    DeiTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DeiTFeatureExtractor
    ),
    /* harmony export */
    DeiTForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTForImageClassification
    ),
    /* harmony export */
    DeiTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTModel
    ),
    /* harmony export */
    DeiTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DeiTPreTrainedModel
    ),
    /* harmony export */
    DepthAnythingForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingForDepthEstimation
    ),
    /* harmony export */
    DepthAnythingPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthAnythingPreTrainedModel
    ),
    /* harmony export */
    DepthEstimationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DepthEstimationPipeline
    ),
    /* harmony export */
    DepthProForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProForDepthEstimation
    ),
    /* harmony export */
    DepthProPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DepthProPreTrainedModel
    ),
    /* harmony export */
    DetrFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DetrFeatureExtractor
    ),
    /* harmony export */
    DetrForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForObjectDetection
    ),
    /* harmony export */
    DetrForSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrForSegmentation
    ),
    /* harmony export */
    DetrModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrModel
    ),
    /* harmony export */
    DetrObjectDetectionOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrObjectDetectionOutput
    ),
    /* harmony export */
    DetrPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrPreTrainedModel
    ),
    /* harmony export */
    DetrSegmentationOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DetrSegmentationOutput
    ),
    /* harmony export */
    Dinov2ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2ForImageClassification
    ),
    /* harmony export */
    Dinov2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2Model
    ),
    /* harmony export */
    Dinov2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Dinov2PreTrainedModel
    ),
    /* harmony export */
    DistilBertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForMaskedLM
    ),
    /* harmony export */
    DistilBertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForQuestionAnswering
    ),
    /* harmony export */
    DistilBertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForSequenceClassification
    ),
    /* harmony export */
    DistilBertForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertForTokenClassification
    ),
    /* harmony export */
    DistilBertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertModel
    ),
    /* harmony export */
    DistilBertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DistilBertPreTrainedModel
    ),
    /* harmony export */
    DistilBertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.DistilBertTokenizer
    ),
    /* harmony export */
    DocumentQuestionAnsweringPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.DocumentQuestionAnsweringPipeline
    ),
    /* harmony export */
    DonutFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DonutFeatureExtractor
    ),
    /* harmony export */
    DonutImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.DonutImageProcessor
    ),
    /* harmony export */
    DonutSwinModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinModel
    ),
    /* harmony export */
    DonutSwinPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.DonutSwinPreTrainedModel
    ),
    /* harmony export */
    EfficientNetForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetForImageClassification
    ),
    /* harmony export */
    EfficientNetImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.EfficientNetImageProcessor
    ),
    /* harmony export */
    EfficientNetModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetModel
    ),
    /* harmony export */
    EfficientNetPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EfficientNetPreTrainedModel
    ),
    /* harmony export */
    ElectraForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForMaskedLM
    ),
    /* harmony export */
    ElectraForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForQuestionAnswering
    ),
    /* harmony export */
    ElectraForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForSequenceClassification
    ),
    /* harmony export */
    ElectraForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraForTokenClassification
    ),
    /* harmony export */
    ElectraModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraModel
    ),
    /* harmony export */
    ElectraPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ElectraPreTrainedModel
    ),
    /* harmony export */
    ElectraTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.ElectraTokenizer
    ),
    /* harmony export */
    EosTokenCriteria: () => (
      /* reexport safe */
      _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__.EosTokenCriteria
    ),
    /* harmony export */
    EsmForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForMaskedLM
    ),
    /* harmony export */
    EsmForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForSequenceClassification
    ),
    /* harmony export */
    EsmForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmForTokenClassification
    ),
    /* harmony export */
    EsmModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmModel
    ),
    /* harmony export */
    EsmPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.EsmPreTrainedModel
    ),
    /* harmony export */
    EsmTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.EsmTokenizer
    ),
    /* harmony export */
    FFT: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.FFT
    ),
    /* harmony export */
    FalconForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconForCausalLM
    ),
    /* harmony export */
    FalconModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconModel
    ),
    /* harmony export */
    FalconPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FalconPreTrainedModel
    ),
    /* harmony export */
    FalconTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.FalconTokenizer
    ),
    /* harmony export */
    FastViTForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTForImageClassification
    ),
    /* harmony export */
    FastViTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTModel
    ),
    /* harmony export */
    FastViTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.FastViTPreTrainedModel
    ),
    /* harmony export */
    FeatureExtractionPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FeatureExtractionPipeline
    ),
    /* harmony export */
    FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.FeatureExtractor
    ),
    /* harmony export */
    FillMaskPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.FillMaskPipeline
    ),
    /* harmony export */
    Florence2ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2ForConditionalGeneration
    ),
    /* harmony export */
    Florence2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Florence2PreTrainedModel
    ),
    /* harmony export */
    Florence2Processor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Florence2Processor
    ),
    /* harmony export */
    GLPNFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.GLPNFeatureExtractor
    ),
    /* harmony export */
    GLPNForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNForDepthEstimation
    ),
    /* harmony export */
    GLPNModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNModel
    ),
    /* harmony export */
    GLPNPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GLPNPreTrainedModel
    ),
    /* harmony export */
    GPT2LMHeadModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2LMHeadModel
    ),
    /* harmony export */
    GPT2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2Model
    ),
    /* harmony export */
    GPT2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPT2PreTrainedModel
    ),
    /* harmony export */
    GPT2Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPT2Tokenizer
    ),
    /* harmony export */
    GPTBigCodeForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeForCausalLM
    ),
    /* harmony export */
    GPTBigCodeModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodeModel
    ),
    /* harmony export */
    GPTBigCodePreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTBigCodePreTrainedModel
    ),
    /* harmony export */
    GPTJForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJForCausalLM
    ),
    /* harmony export */
    GPTJModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJModel
    ),
    /* harmony export */
    GPTJPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTJPreTrainedModel
    ),
    /* harmony export */
    GPTNeoForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoForCausalLM
    ),
    /* harmony export */
    GPTNeoModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoModel
    ),
    /* harmony export */
    GPTNeoPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoPreTrainedModel
    ),
    /* harmony export */
    GPTNeoXForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXForCausalLM
    ),
    /* harmony export */
    GPTNeoXModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXModel
    ),
    /* harmony export */
    GPTNeoXPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GPTNeoXPreTrainedModel
    ),
    /* harmony export */
    GPTNeoXTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GPTNeoXTokenizer
    ),
    /* harmony export */
    Gemma2ForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2ForCausalLM
    ),
    /* harmony export */
    Gemma2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2Model
    ),
    /* harmony export */
    Gemma2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Gemma2PreTrainedModel
    ),
    /* harmony export */
    GemmaForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaForCausalLM
    ),
    /* harmony export */
    GemmaModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaModel
    ),
    /* harmony export */
    GemmaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GemmaPreTrainedModel
    ),
    /* harmony export */
    GemmaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.GemmaTokenizer
    ),
    /* harmony export */
    GraniteForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteForCausalLM
    ),
    /* harmony export */
    GraniteModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GraniteModel
    ),
    /* harmony export */
    GranitePreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GranitePreTrainedModel
    ),
    /* harmony export */
    Grok1Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Grok1Tokenizer
    ),
    /* harmony export */
    GroupViTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTModel
    ),
    /* harmony export */
    GroupViTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.GroupViTPreTrainedModel
    ),
    /* harmony export */
    HerbertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.HerbertTokenizer
    ),
    /* harmony export */
    HieraForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraForImageClassification
    ),
    /* harmony export */
    HieraModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraModel
    ),
    /* harmony export */
    HieraPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HieraPreTrainedModel
    ),
    /* harmony export */
    HubertForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForCTC
    ),
    /* harmony export */
    HubertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertForSequenceClassification
    ),
    /* harmony export */
    HubertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertModel
    ),
    /* harmony export */
    HubertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.HubertPreTrainedModel
    ),
    /* harmony export */
    ImageClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageClassificationPipeline
    ),
    /* harmony export */
    ImageFeatureExtractionPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageFeatureExtractionPipeline
    ),
    /* harmony export */
    ImageFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ImageFeatureExtractor
    ),
    /* harmony export */
    ImageMattingOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ImageMattingOutput
    ),
    /* harmony export */
    ImageSegmentationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageSegmentationPipeline
    ),
    /* harmony export */
    ImageToImagePipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToImagePipeline
    ),
    /* harmony export */
    ImageToTextPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ImageToTextPipeline
    ),
    /* harmony export */
    InterruptableStoppingCriteria: () => (
      /* reexport safe */
      _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__.InterruptableStoppingCriteria
    ),
    /* harmony export */
    JAISLMHeadModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISLMHeadModel
    ),
    /* harmony export */
    JAISModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISModel
    ),
    /* harmony export */
    JAISPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.JAISPreTrainedModel
    ),
    /* harmony export */
    LlamaForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaForCausalLM
    ),
    /* harmony export */
    LlamaModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaModel
    ),
    /* harmony export */
    LlamaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LlamaPreTrainedModel
    ),
    /* harmony export */
    LlamaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.LlamaTokenizer
    ),
    /* harmony export */
    LlavaForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaForConditionalGeneration
    ),
    /* harmony export */
    LlavaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LlavaPreTrainedModel
    ),
    /* harmony export */
    LongT5ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5ForConditionalGeneration
    ),
    /* harmony export */
    LongT5Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5Model
    ),
    /* harmony export */
    LongT5PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.LongT5PreTrainedModel
    ),
    /* harmony export */
    M2M100ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100ForConditionalGeneration
    ),
    /* harmony export */
    M2M100Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100Model
    ),
    /* harmony export */
    M2M100PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.M2M100PreTrainedModel
    ),
    /* harmony export */
    M2M100Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.M2M100Tokenizer
    ),
    /* harmony export */
    MBart50Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBart50Tokenizer
    ),
    /* harmony export */
    MBartForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForCausalLM
    ),
    /* harmony export */
    MBartForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForConditionalGeneration
    ),
    /* harmony export */
    MBartForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartForSequenceClassification
    ),
    /* harmony export */
    MBartModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartModel
    ),
    /* harmony export */
    MBartPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MBartPreTrainedModel
    ),
    /* harmony export */
    MBartTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MBartTokenizer
    ),
    /* harmony export */
    MPNetForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForMaskedLM
    ),
    /* harmony export */
    MPNetForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForQuestionAnswering
    ),
    /* harmony export */
    MPNetForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForSequenceClassification
    ),
    /* harmony export */
    MPNetForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetForTokenClassification
    ),
    /* harmony export */
    MPNetModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetModel
    ),
    /* harmony export */
    MPNetPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MPNetPreTrainedModel
    ),
    /* harmony export */
    MPNetTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MPNetTokenizer
    ),
    /* harmony export */
    MT5ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5ForConditionalGeneration
    ),
    /* harmony export */
    MT5Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5Model
    ),
    /* harmony export */
    MT5PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MT5PreTrainedModel
    ),
    /* harmony export */
    MarianMTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianMTModel
    ),
    /* harmony export */
    MarianModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianModel
    ),
    /* harmony export */
    MarianPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MarianPreTrainedModel
    ),
    /* harmony export */
    MarianTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MarianTokenizer
    ),
    /* harmony export */
    MaskFormerFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MaskFormerFeatureExtractor
    ),
    /* harmony export */
    MaskFormerForInstanceSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerForInstanceSegmentation
    ),
    /* harmony export */
    MaskFormerModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerModel
    ),
    /* harmony export */
    MaskFormerPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskFormerPreTrainedModel
    ),
    /* harmony export */
    MaskedLMOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MaskedLMOutput
    ),
    /* harmony export */
    MaxLengthCriteria: () => (
      /* reexport safe */
      _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__.MaxLengthCriteria
    ),
    /* harmony export */
    MistralForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralForCausalLM
    ),
    /* harmony export */
    MistralModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralModel
    ),
    /* harmony export */
    MistralPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MistralPreTrainedModel
    ),
    /* harmony export */
    MobileBertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForMaskedLM
    ),
    /* harmony export */
    MobileBertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForQuestionAnswering
    ),
    /* harmony export */
    MobileBertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertForSequenceClassification
    ),
    /* harmony export */
    MobileBertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertModel
    ),
    /* harmony export */
    MobileBertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileBertPreTrainedModel
    ),
    /* harmony export */
    MobileBertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.MobileBertTokenizer
    ),
    /* harmony export */
    MobileLLMForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMForCausalLM
    ),
    /* harmony export */
    MobileLLMModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMModel
    ),
    /* harmony export */
    MobileLLMPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileLLMPreTrainedModel
    ),
    /* harmony export */
    MobileNetV1FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileNetV1FeatureExtractor
    ),
    /* harmony export */
    MobileNetV1ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1ForImageClassification
    ),
    /* harmony export */
    MobileNetV1Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1Model
    ),
    /* harmony export */
    MobileNetV1PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV1PreTrainedModel
    ),
    /* harmony export */
    MobileNetV2FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileNetV2FeatureExtractor
    ),
    /* harmony export */
    MobileNetV2ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2ForImageClassification
    ),
    /* harmony export */
    MobileNetV2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2Model
    ),
    /* harmony export */
    MobileNetV2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV2PreTrainedModel
    ),
    /* harmony export */
    MobileNetV3FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileNetV3FeatureExtractor
    ),
    /* harmony export */
    MobileNetV3ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3ForImageClassification
    ),
    /* harmony export */
    MobileNetV3Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3Model
    ),
    /* harmony export */
    MobileNetV3PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV3PreTrainedModel
    ),
    /* harmony export */
    MobileNetV4FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileNetV4FeatureExtractor
    ),
    /* harmony export */
    MobileNetV4ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4ForImageClassification
    ),
    /* harmony export */
    MobileNetV4Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4Model
    ),
    /* harmony export */
    MobileNetV4PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileNetV4PreTrainedModel
    ),
    /* harmony export */
    MobileViTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileViTFeatureExtractor
    ),
    /* harmony export */
    MobileViTForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTForImageClassification
    ),
    /* harmony export */
    MobileViTImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.MobileViTImageProcessor
    ),
    /* harmony export */
    MobileViTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTModel
    ),
    /* harmony export */
    MobileViTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTPreTrainedModel
    ),
    /* harmony export */
    MobileViTV2ForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2ForImageClassification
    ),
    /* harmony export */
    MobileViTV2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2Model
    ),
    /* harmony export */
    MobileViTV2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MobileViTV2PreTrainedModel
    ),
    /* harmony export */
    ModelOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ModelOutput
    ),
    /* harmony export */
    Moondream1ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Moondream1ForConditionalGeneration
    ),
    /* harmony export */
    MptForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MptForCausalLM
    ),
    /* harmony export */
    MptModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MptModel
    ),
    /* harmony export */
    MptPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MptPreTrainedModel
    ),
    /* harmony export */
    MusicgenForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForCausalLM
    ),
    /* harmony export */
    MusicgenForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenForConditionalGeneration
    ),
    /* harmony export */
    MusicgenModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenModel
    ),
    /* harmony export */
    MusicgenPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.MusicgenPreTrainedModel
    ),
    /* harmony export */
    NllbTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NllbTokenizer
    ),
    /* harmony export */
    NomicBertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertModel
    ),
    /* harmony export */
    NomicBertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.NomicBertPreTrainedModel
    ),
    /* harmony export */
    NougatImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.NougatImageProcessor
    ),
    /* harmony export */
    NougatTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.NougatTokenizer
    ),
    /* harmony export */
    OPTForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTForCausalLM
    ),
    /* harmony export */
    OPTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTModel
    ),
    /* harmony export */
    OPTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OPTPreTrainedModel
    ),
    /* harmony export */
    ObjectDetectionPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ObjectDetectionPipeline
    ),
    /* harmony export */
    OlmoForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoForCausalLM
    ),
    /* harmony export */
    OlmoModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoModel
    ),
    /* harmony export */
    OlmoPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OlmoPreTrainedModel
    ),
    /* harmony export */
    OpenELMForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMForCausalLM
    ),
    /* harmony export */
    OpenELMModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMModel
    ),
    /* harmony export */
    OpenELMPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OpenELMPreTrainedModel
    ),
    /* harmony export */
    OwlViTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.OwlViTFeatureExtractor
    ),
    /* harmony export */
    OwlViTForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTForObjectDetection
    ),
    /* harmony export */
    OwlViTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTModel
    ),
    /* harmony export */
    OwlViTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.OwlViTPreTrainedModel
    ),
    /* harmony export */
    OwlViTProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.OwlViTProcessor
    ),
    /* harmony export */
    Owlv2ForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2ForObjectDetection
    ),
    /* harmony export */
    Owlv2ImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Owlv2ImageProcessor
    ),
    /* harmony export */
    Owlv2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2Model
    ),
    /* harmony export */
    Owlv2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Owlv2PreTrainedModel
    ),
    /* harmony export */
    Phi3ForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3ForCausalLM
    ),
    /* harmony export */
    Phi3Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3Model
    ),
    /* harmony export */
    Phi3PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Phi3PreTrainedModel
    ),
    /* harmony export */
    PhiForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiForCausalLM
    ),
    /* harmony export */
    PhiModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiModel
    ),
    /* harmony export */
    PhiPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PhiPreTrainedModel
    ),
    /* harmony export */
    Pipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Pipeline
    ),
    /* harmony export */
    PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PreTrainedModel
    ),
    /* harmony export */
    PreTrainedTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.PreTrainedTokenizer
    ),
    /* harmony export */
    PretrainedConfig: () => (
      /* reexport safe */
      _configs_js__WEBPACK_IMPORTED_MODULE_5__.PretrainedConfig
    ),
    /* harmony export */
    PretrainedMixin: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PretrainedMixin
    ),
    /* harmony export */
    Processor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Processor
    ),
    /* harmony export */
    PvtForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtForImageClassification
    ),
    /* harmony export */
    PvtImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.PvtImageProcessor
    ),
    /* harmony export */
    PvtModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtModel
    ),
    /* harmony export */
    PvtPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PvtPreTrainedModel
    ),
    /* harmony export */
    PyAnnoteFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.PyAnnoteFeatureExtractor
    ),
    /* harmony export */
    PyAnnoteForAudioFrameClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteForAudioFrameClassification
    ),
    /* harmony export */
    PyAnnoteModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnoteModel
    ),
    /* harmony export */
    PyAnnotePreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.PyAnnotePreTrainedModel
    ),
    /* harmony export */
    PyAnnoteProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.PyAnnoteProcessor
    ),
    /* harmony export */
    QuestionAnsweringModelOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.QuestionAnsweringModelOutput
    ),
    /* harmony export */
    QuestionAnsweringPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.QuestionAnsweringPipeline
    ),
    /* harmony export */
    Qwen2ForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2ForCausalLM
    ),
    /* harmony export */
    Qwen2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2Model
    ),
    /* harmony export */
    Qwen2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Qwen2PreTrainedModel
    ),
    /* harmony export */
    Qwen2Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Qwen2Tokenizer
    ),
    /* harmony export */
    RTDetrForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrForObjectDetection
    ),
    /* harmony export */
    RTDetrImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.RTDetrImageProcessor
    ),
    /* harmony export */
    RTDetrModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrModel
    ),
    /* harmony export */
    RTDetrObjectDetectionOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrObjectDetectionOutput
    ),
    /* harmony export */
    RTDetrPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RTDetrPreTrainedModel
    ),
    /* harmony export */
    RawImage: () => (
      /* reexport safe */
      _utils_image_js__WEBPACK_IMPORTED_MODULE_7__.RawImage
    ),
    /* harmony export */
    ResNetForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetForImageClassification
    ),
    /* harmony export */
    ResNetModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetModel
    ),
    /* harmony export */
    ResNetPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ResNetPreTrainedModel
    ),
    /* harmony export */
    RoFormerForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForMaskedLM
    ),
    /* harmony export */
    RoFormerForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForQuestionAnswering
    ),
    /* harmony export */
    RoFormerForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForSequenceClassification
    ),
    /* harmony export */
    RoFormerForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerForTokenClassification
    ),
    /* harmony export */
    RoFormerModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerModel
    ),
    /* harmony export */
    RoFormerPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RoFormerPreTrainedModel
    ),
    /* harmony export */
    RoFormerTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RoFormerTokenizer
    ),
    /* harmony export */
    RobertaForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForMaskedLM
    ),
    /* harmony export */
    RobertaForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForQuestionAnswering
    ),
    /* harmony export */
    RobertaForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForSequenceClassification
    ),
    /* harmony export */
    RobertaForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaForTokenClassification
    ),
    /* harmony export */
    RobertaModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaModel
    ),
    /* harmony export */
    RobertaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.RobertaPreTrainedModel
    ),
    /* harmony export */
    RobertaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.RobertaTokenizer
    ),
    /* harmony export */
    SamImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SamImageProcessor
    ),
    /* harmony export */
    SamImageSegmentationOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SamImageSegmentationOutput
    ),
    /* harmony export */
    SamModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SamModel
    ),
    /* harmony export */
    SamPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SamPreTrainedModel
    ),
    /* harmony export */
    SamProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SamProcessor
    ),
    /* harmony export */
    SapiensFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SapiensFeatureExtractor
    ),
    /* harmony export */
    SapiensForDepthEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForDepthEstimation
    ),
    /* harmony export */
    SapiensForNormalEstimation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForNormalEstimation
    ),
    /* harmony export */
    SapiensForSemanticSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensForSemanticSegmentation
    ),
    /* harmony export */
    SapiensPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SapiensPreTrainedModel
    ),
    /* harmony export */
    SeamlessM4TFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SeamlessM4TFeatureExtractor
    ),
    /* harmony export */
    SegformerFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SegformerFeatureExtractor
    ),
    /* harmony export */
    SegformerForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForImageClassification
    ),
    /* harmony export */
    SegformerForSemanticSegmentation: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerForSemanticSegmentation
    ),
    /* harmony export */
    SegformerModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerModel
    ),
    /* harmony export */
    SegformerPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SegformerPreTrainedModel
    ),
    /* harmony export */
    Seq2SeqLMOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Seq2SeqLMOutput
    ),
    /* harmony export */
    SequenceClassifierOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SequenceClassifierOutput
    ),
    /* harmony export */
    SiglipImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SiglipImageProcessor
    ),
    /* harmony export */
    SiglipModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipModel
    ),
    /* harmony export */
    SiglipPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipPreTrainedModel
    ),
    /* harmony export */
    SiglipTextModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipTextModel
    ),
    /* harmony export */
    SiglipTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SiglipTokenizer
    ),
    /* harmony export */
    SiglipVisionModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SiglipVisionModel
    ),
    /* harmony export */
    SpeechT5FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SpeechT5FeatureExtractor
    ),
    /* harmony export */
    SpeechT5ForSpeechToText: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForSpeechToText
    ),
    /* harmony export */
    SpeechT5ForTextToSpeech: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5ForTextToSpeech
    ),
    /* harmony export */
    SpeechT5HifiGan: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5HifiGan
    ),
    /* harmony export */
    SpeechT5Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5Model
    ),
    /* harmony export */
    SpeechT5PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SpeechT5PreTrainedModel
    ),
    /* harmony export */
    SpeechT5Processor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.SpeechT5Processor
    ),
    /* harmony export */
    SpeechT5Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SpeechT5Tokenizer
    ),
    /* harmony export */
    SqueezeBertForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForMaskedLM
    ),
    /* harmony export */
    SqueezeBertForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForQuestionAnswering
    ),
    /* harmony export */
    SqueezeBertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertForSequenceClassification
    ),
    /* harmony export */
    SqueezeBertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertModel
    ),
    /* harmony export */
    SqueezeBertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SqueezeBertPreTrainedModel
    ),
    /* harmony export */
    SqueezeBertTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.SqueezeBertTokenizer
    ),
    /* harmony export */
    StableLmForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmForCausalLM
    ),
    /* harmony export */
    StableLmModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmModel
    ),
    /* harmony export */
    StableLmPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.StableLmPreTrainedModel
    ),
    /* harmony export */
    Starcoder2ForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2ForCausalLM
    ),
    /* harmony export */
    Starcoder2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2Model
    ),
    /* harmony export */
    Starcoder2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Starcoder2PreTrainedModel
    ),
    /* harmony export */
    StoppingCriteria: () => (
      /* reexport safe */
      _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__.StoppingCriteria
    ),
    /* harmony export */
    StoppingCriteriaList: () => (
      /* reexport safe */
      _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__.StoppingCriteriaList
    ),
    /* harmony export */
    SummarizationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.SummarizationPipeline
    ),
    /* harmony export */
    Swin2SRForImageSuperResolution: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRForImageSuperResolution
    ),
    /* harmony export */
    Swin2SRImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Swin2SRImageProcessor
    ),
    /* harmony export */
    Swin2SRModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRModel
    ),
    /* harmony export */
    Swin2SRPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Swin2SRPreTrainedModel
    ),
    /* harmony export */
    SwinForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinForImageClassification
    ),
    /* harmony export */
    SwinModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinModel
    ),
    /* harmony export */
    SwinPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.SwinPreTrainedModel
    ),
    /* harmony export */
    T5ForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.T5ForConditionalGeneration
    ),
    /* harmony export */
    T5Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.T5Model
    ),
    /* harmony export */
    T5PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.T5PreTrainedModel
    ),
    /* harmony export */
    T5Tokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.T5Tokenizer
    ),
    /* harmony export */
    TableTransformerForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerForObjectDetection
    ),
    /* harmony export */
    TableTransformerModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerModel
    ),
    /* harmony export */
    TableTransformerObjectDetectionOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerObjectDetectionOutput
    ),
    /* harmony export */
    TableTransformerPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TableTransformerPreTrainedModel
    ),
    /* harmony export */
    Tensor: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.Tensor
    ),
    /* harmony export */
    Text2TextGenerationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.Text2TextGenerationPipeline
    ),
    /* harmony export */
    TextClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextClassificationPipeline
    ),
    /* harmony export */
    TextGenerationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextGenerationPipeline
    ),
    /* harmony export */
    TextStreamer: () => (
      /* reexport safe */
      _generation_streamers_js__WEBPACK_IMPORTED_MODULE_10__.TextStreamer
    ),
    /* harmony export */
    TextToAudioPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TextToAudioPipeline
    ),
    /* harmony export */
    TokenClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TokenClassificationPipeline
    ),
    /* harmony export */
    TokenClassifierOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TokenClassifierOutput
    ),
    /* harmony export */
    TokenizerModel: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.TokenizerModel
    ),
    /* harmony export */
    TrOCRForCausalLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRForCausalLM
    ),
    /* harmony export */
    TrOCRPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.TrOCRPreTrainedModel
    ),
    /* harmony export */
    TranslationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.TranslationPipeline
    ),
    /* harmony export */
    UniSpeechForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForCTC
    ),
    /* harmony export */
    UniSpeechForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechForSequenceClassification
    ),
    /* harmony export */
    UniSpeechModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechModel
    ),
    /* harmony export */
    UniSpeechPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechPreTrainedModel
    ),
    /* harmony export */
    UniSpeechSatForAudioFrameClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForAudioFrameClassification
    ),
    /* harmony export */
    UniSpeechSatForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForCTC
    ),
    /* harmony export */
    UniSpeechSatForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatForSequenceClassification
    ),
    /* harmony export */
    UniSpeechSatModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatModel
    ),
    /* harmony export */
    UniSpeechSatPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.UniSpeechSatPreTrainedModel
    ),
    /* harmony export */
    ViTFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ViTFeatureExtractor
    ),
    /* harmony export */
    ViTForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTForImageClassification
    ),
    /* harmony export */
    ViTImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.ViTImageProcessor
    ),
    /* harmony export */
    ViTMAEModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEModel
    ),
    /* harmony export */
    ViTMAEPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMAEPreTrainedModel
    ),
    /* harmony export */
    ViTMSNForImageClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNForImageClassification
    ),
    /* harmony export */
    ViTMSNModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNModel
    ),
    /* harmony export */
    ViTMSNPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTMSNPreTrainedModel
    ),
    /* harmony export */
    ViTModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTModel
    ),
    /* harmony export */
    ViTPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.ViTPreTrainedModel
    ),
    /* harmony export */
    VisionEncoderDecoderModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VisionEncoderDecoderModel
    ),
    /* harmony export */
    VitMatteForImageMatting: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMatteForImageMatting
    ),
    /* harmony export */
    VitMatteImageProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.VitMatteImageProcessor
    ),
    /* harmony export */
    VitMattePreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VitMattePreTrainedModel
    ),
    /* harmony export */
    VitsModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModel
    ),
    /* harmony export */
    VitsModelOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsModelOutput
    ),
    /* harmony export */
    VitsPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.VitsPreTrainedModel
    ),
    /* harmony export */
    VitsTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.VitsTokenizer
    ),
    /* harmony export */
    Wav2Vec2BertForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForCTC
    ),
    /* harmony export */
    Wav2Vec2BertForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertForSequenceClassification
    ),
    /* harmony export */
    Wav2Vec2BertModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertModel
    ),
    /* harmony export */
    Wav2Vec2BertPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2BertPreTrainedModel
    ),
    /* harmony export */
    Wav2Vec2CTCTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.Wav2Vec2CTCTokenizer
    ),
    /* harmony export */
    Wav2Vec2FeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Wav2Vec2FeatureExtractor
    ),
    /* harmony export */
    Wav2Vec2ForAudioFrameClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForAudioFrameClassification
    ),
    /* harmony export */
    Wav2Vec2ForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForCTC
    ),
    /* harmony export */
    Wav2Vec2ForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2ForSequenceClassification
    ),
    /* harmony export */
    Wav2Vec2Model: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2Model
    ),
    /* harmony export */
    Wav2Vec2PreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.Wav2Vec2PreTrainedModel
    ),
    /* harmony export */
    Wav2Vec2ProcessorWithLM: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.Wav2Vec2ProcessorWithLM
    ),
    /* harmony export */
    WavLMForAudioFrameClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForAudioFrameClassification
    ),
    /* harmony export */
    WavLMForCTC: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForCTC
    ),
    /* harmony export */
    WavLMForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForSequenceClassification
    ),
    /* harmony export */
    WavLMForXVector: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMForXVector
    ),
    /* harmony export */
    WavLMModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMModel
    ),
    /* harmony export */
    WavLMPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WavLMPreTrainedModel
    ),
    /* harmony export */
    WeSpeakerFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.WeSpeakerFeatureExtractor
    ),
    /* harmony export */
    WeSpeakerResNetModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetModel
    ),
    /* harmony export */
    WeSpeakerResNetPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WeSpeakerResNetPreTrainedModel
    ),
    /* harmony export */
    WhisperFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.WhisperFeatureExtractor
    ),
    /* harmony export */
    WhisperForConditionalGeneration: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperForConditionalGeneration
    ),
    /* harmony export */
    WhisperModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperModel
    ),
    /* harmony export */
    WhisperPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.WhisperPreTrainedModel
    ),
    /* harmony export */
    WhisperProcessor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.WhisperProcessor
    ),
    /* harmony export */
    WhisperTextStreamer: () => (
      /* reexport safe */
      _generation_streamers_js__WEBPACK_IMPORTED_MODULE_10__.WhisperTextStreamer
    ),
    /* harmony export */
    WhisperTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.WhisperTokenizer
    ),
    /* harmony export */
    XLMForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForQuestionAnswering
    ),
    /* harmony export */
    XLMForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForSequenceClassification
    ),
    /* harmony export */
    XLMForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMForTokenClassification
    ),
    /* harmony export */
    XLMModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMModel
    ),
    /* harmony export */
    XLMPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMPreTrainedModel
    ),
    /* harmony export */
    XLMRobertaForMaskedLM: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForMaskedLM
    ),
    /* harmony export */
    XLMRobertaForQuestionAnswering: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForQuestionAnswering
    ),
    /* harmony export */
    XLMRobertaForSequenceClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForSequenceClassification
    ),
    /* harmony export */
    XLMRobertaForTokenClassification: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaForTokenClassification
    ),
    /* harmony export */
    XLMRobertaModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaModel
    ),
    /* harmony export */
    XLMRobertaPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMRobertaPreTrainedModel
    ),
    /* harmony export */
    XLMRobertaTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMRobertaTokenizer
    ),
    /* harmony export */
    XLMTokenizer: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.XLMTokenizer
    ),
    /* harmony export */
    XLMWithLMHeadModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XLMWithLMHeadModel
    ),
    /* harmony export */
    XVectorOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.XVectorOutput
    ),
    /* harmony export */
    YolosFeatureExtractor: () => (
      /* reexport safe */
      _processors_js__WEBPACK_IMPORTED_MODULE_4__.YolosFeatureExtractor
    ),
    /* harmony export */
    YolosForObjectDetection: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosForObjectDetection
    ),
    /* harmony export */
    YolosModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosModel
    ),
    /* harmony export */
    YolosObjectDetectionOutput: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosObjectDetectionOutput
    ),
    /* harmony export */
    YolosPreTrainedModel: () => (
      /* reexport safe */
      _models_js__WEBPACK_IMPORTED_MODULE_2__.YolosPreTrainedModel
    ),
    /* harmony export */
    ZeroShotAudioClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotAudioClassificationPipeline
    ),
    /* harmony export */
    ZeroShotClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotClassificationPipeline
    ),
    /* harmony export */
    ZeroShotImageClassificationPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotImageClassificationPipeline
    ),
    /* harmony export */
    ZeroShotObjectDetectionPipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.ZeroShotObjectDetectionPipeline
    ),
    /* harmony export */
    bankers_round: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.bankers_round
    ),
    /* harmony export */
    cat: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.cat
    ),
    /* harmony export */
    cos_sim: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.cos_sim
    ),
    /* harmony export */
    dot: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dot
    ),
    /* harmony export */
    dynamic_time_warping: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.dynamic_time_warping
    ),
    /* harmony export */
    env: () => (
      /* reexport safe */
      _env_js__WEBPACK_IMPORTED_MODULE_0__.env
    ),
    /* harmony export */
    full: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full
    ),
    /* harmony export */
    full_like: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.full_like
    ),
    /* harmony export */
    getKeyValueShapes: () => (
      /* reexport safe */
      _configs_js__WEBPACK_IMPORTED_MODULE_5__.getKeyValueShapes
    ),
    /* harmony export */
    hamming: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.hamming
    ),
    /* harmony export */
    hanning: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.hanning
    ),
    /* harmony export */
    interpolate: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate
    ),
    /* harmony export */
    interpolate_4d: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.interpolate_4d
    ),
    /* harmony export */
    interpolate_data: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.interpolate_data
    ),
    /* harmony export */
    is_chinese_char: () => (
      /* reexport safe */
      _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__.is_chinese_char
    ),
    /* harmony export */
    layer_norm: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.layer_norm
    ),
    /* harmony export */
    log_softmax: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.log_softmax
    ),
    /* harmony export */
    magnitude: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.magnitude
    ),
    /* harmony export */
    matmul: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.matmul
    ),
    /* harmony export */
    max: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.max
    ),
    /* harmony export */
    mean: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean
    ),
    /* harmony export */
    mean_pooling: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.mean_pooling
    ),
    /* harmony export */
    medianFilter: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.medianFilter
    ),
    /* harmony export */
    mel_filter_bank: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.mel_filter_bank
    ),
    /* harmony export */
    min: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.min
    ),
    /* harmony export */
    ones: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones
    ),
    /* harmony export */
    ones_like: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.ones_like
    ),
    /* harmony export */
    permute: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.permute
    ),
    /* harmony export */
    permute_data: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.permute_data
    ),
    /* harmony export */
    pipeline: () => (
      /* reexport safe */
      _pipelines_js__WEBPACK_IMPORTED_MODULE_1__.pipeline
    ),
    /* harmony export */
    quantize_embeddings: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.quantize_embeddings
    ),
    /* harmony export */
    read_audio: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.read_audio
    ),
    /* harmony export */
    rfft: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.rfft
    ),
    /* harmony export */
    round: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.round
    ),
    /* harmony export */
    softmax: () => (
      /* reexport safe */
      _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__.softmax
    ),
    /* harmony export */
    spectrogram: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.spectrogram
    ),
    /* harmony export */
    stack: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.stack
    ),
    /* harmony export */
    std_mean: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.std_mean
    ),
    /* harmony export */
    topk: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.topk
    ),
    /* harmony export */
    window_function: () => (
      /* reexport safe */
      _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__.window_function
    ),
    /* harmony export */
    zeros: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros
    ),
    /* harmony export */
    zeros_like: () => (
      /* reexport safe */
      _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__.zeros_like
    )
    /* harmony export */
  });
  var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
    /*! ./env.js */
    "./src/env.js"
  );
  var _pipelines_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
    /*! ./pipelines.js */
    "./src/pipelines.js"
  );
  var _models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
    /*! ./models.js */
    "./src/models.js"
  );
  var _tokenizers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
    /*! ./tokenizers.js */
    "./src/tokenizers.js"
  );
  var _processors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
    /*! ./processors.js */
    "./src/processors.js"
  );
  var _configs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
    /*! ./configs.js */
    "./src/configs.js"
  );
  var _utils_audio_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
    /*! ./utils/audio.js */
    "./src/utils/audio.js"
  );
  var _utils_image_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
    /*! ./utils/image.js */
    "./src/utils/image.js"
  );
  var _utils_tensor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
    /*! ./utils/tensor.js */
    "./src/utils/tensor.js"
  );
  var _utils_maths_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
    /*! ./utils/maths.js */
    "./src/utils/maths.js"
  );
  var _generation_streamers_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
    /*! ./generation/streamers.js */
    "./src/generation/streamers.js"
  );
  var _generation_stopping_criteria_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
    /*! ./generation/stopping_criteria.js */
    "./src/generation/stopping_criteria.js"
  );
  var __webpack_exports__ASTFeatureExtractor = __webpack_exports__.ASTFeatureExtractor;
  var __webpack_exports__ASTForAudioClassification = __webpack_exports__.ASTForAudioClassification;
  var __webpack_exports__ASTModel = __webpack_exports__.ASTModel;
  var __webpack_exports__ASTPreTrainedModel = __webpack_exports__.ASTPreTrainedModel;
  var __webpack_exports__AlbertForMaskedLM = __webpack_exports__.AlbertForMaskedLM;
  var __webpack_exports__AlbertForQuestionAnswering = __webpack_exports__.AlbertForQuestionAnswering;
  var __webpack_exports__AlbertForSequenceClassification = __webpack_exports__.AlbertForSequenceClassification;
  var __webpack_exports__AlbertModel = __webpack_exports__.AlbertModel;
  var __webpack_exports__AlbertPreTrainedModel = __webpack_exports__.AlbertPreTrainedModel;
  var __webpack_exports__AlbertTokenizer = __webpack_exports__.AlbertTokenizer;
  var __webpack_exports__AudioClassificationPipeline = __webpack_exports__.AudioClassificationPipeline;
  var __webpack_exports__AutoConfig = __webpack_exports__.AutoConfig;
  var __webpack_exports__AutoModel = __webpack_exports__.AutoModel;
  var __webpack_exports__AutoModelForAudioClassification = __webpack_exports__.AutoModelForAudioClassification;
  var __webpack_exports__AutoModelForAudioFrameClassification = __webpack_exports__.AutoModelForAudioFrameClassification;
  var __webpack_exports__AutoModelForCTC = __webpack_exports__.AutoModelForCTC;
  var __webpack_exports__AutoModelForCausalLM = __webpack_exports__.AutoModelForCausalLM;
  var __webpack_exports__AutoModelForDepthEstimation = __webpack_exports__.AutoModelForDepthEstimation;
  var __webpack_exports__AutoModelForDocumentQuestionAnswering = __webpack_exports__.AutoModelForDocumentQuestionAnswering;
  var __webpack_exports__AutoModelForImageClassification = __webpack_exports__.AutoModelForImageClassification;
  var __webpack_exports__AutoModelForImageFeatureExtraction = __webpack_exports__.AutoModelForImageFeatureExtraction;
  var __webpack_exports__AutoModelForImageMatting = __webpack_exports__.AutoModelForImageMatting;
  var __webpack_exports__AutoModelForImageSegmentation = __webpack_exports__.AutoModelForImageSegmentation;
  var __webpack_exports__AutoModelForImageToImage = __webpack_exports__.AutoModelForImageToImage;
  var __webpack_exports__AutoModelForMaskGeneration = __webpack_exports__.AutoModelForMaskGeneration;
  var __webpack_exports__AutoModelForMaskedLM = __webpack_exports__.AutoModelForMaskedLM;
  var __webpack_exports__AutoModelForNormalEstimation = __webpack_exports__.AutoModelForNormalEstimation;
  var __webpack_exports__AutoModelForObjectDetection = __webpack_exports__.AutoModelForObjectDetection;
  var __webpack_exports__AutoModelForQuestionAnswering = __webpack_exports__.AutoModelForQuestionAnswering;
  var __webpack_exports__AutoModelForSemanticSegmentation = __webpack_exports__.AutoModelForSemanticSegmentation;
  var __webpack_exports__AutoModelForSeq2SeqLM = __webpack_exports__.AutoModelForSeq2SeqLM;
  var __webpack_exports__AutoModelForSequenceClassification = __webpack_exports__.AutoModelForSequenceClassification;
  var __webpack_exports__AutoModelForSpeechSeq2Seq = __webpack_exports__.AutoModelForSpeechSeq2Seq;
  var __webpack_exports__AutoModelForTextToSpectrogram = __webpack_exports__.AutoModelForTextToSpectrogram;
  var __webpack_exports__AutoModelForTextToWaveform = __webpack_exports__.AutoModelForTextToWaveform;
  var __webpack_exports__AutoModelForTokenClassification = __webpack_exports__.AutoModelForTokenClassification;
  var __webpack_exports__AutoModelForUniversalSegmentation = __webpack_exports__.AutoModelForUniversalSegmentation;
  var __webpack_exports__AutoModelForVision2Seq = __webpack_exports__.AutoModelForVision2Seq;
  var __webpack_exports__AutoModelForXVector = __webpack_exports__.AutoModelForXVector;
  var __webpack_exports__AutoModelForZeroShotObjectDetection = __webpack_exports__.AutoModelForZeroShotObjectDetection;
  var __webpack_exports__AutoProcessor = __webpack_exports__.AutoProcessor;
  var __webpack_exports__AutoTokenizer = __webpack_exports__.AutoTokenizer;
  var __webpack_exports__AutomaticSpeechRecognitionPipeline = __webpack_exports__.AutomaticSpeechRecognitionPipeline;
  var __webpack_exports__BartForConditionalGeneration = __webpack_exports__.BartForConditionalGeneration;
  var __webpack_exports__BartForSequenceClassification = __webpack_exports__.BartForSequenceClassification;
  var __webpack_exports__BartModel = __webpack_exports__.BartModel;
  var __webpack_exports__BartPretrainedModel = __webpack_exports__.BartPretrainedModel;
  var __webpack_exports__BartTokenizer = __webpack_exports__.BartTokenizer;
  var __webpack_exports__BaseModelOutput = __webpack_exports__.BaseModelOutput;
  var __webpack_exports__BaseStreamer = __webpack_exports__.BaseStreamer;
  var __webpack_exports__BeitFeatureExtractor = __webpack_exports__.BeitFeatureExtractor;
  var __webpack_exports__BeitForImageClassification = __webpack_exports__.BeitForImageClassification;
  var __webpack_exports__BeitModel = __webpack_exports__.BeitModel;
  var __webpack_exports__BeitPreTrainedModel = __webpack_exports__.BeitPreTrainedModel;
  var __webpack_exports__BertForMaskedLM = __webpack_exports__.BertForMaskedLM;
  var __webpack_exports__BertForQuestionAnswering = __webpack_exports__.BertForQuestionAnswering;
  var __webpack_exports__BertForSequenceClassification = __webpack_exports__.BertForSequenceClassification;
  var __webpack_exports__BertForTokenClassification = __webpack_exports__.BertForTokenClassification;
  var __webpack_exports__BertModel = __webpack_exports__.BertModel;
  var __webpack_exports__BertPreTrainedModel = __webpack_exports__.BertPreTrainedModel;
  var __webpack_exports__BertTokenizer = __webpack_exports__.BertTokenizer;
  var __webpack_exports__BitImageProcessor = __webpack_exports__.BitImageProcessor;
  var __webpack_exports__BlenderbotForConditionalGeneration = __webpack_exports__.BlenderbotForConditionalGeneration;
  var __webpack_exports__BlenderbotModel = __webpack_exports__.BlenderbotModel;
  var __webpack_exports__BlenderbotPreTrainedModel = __webpack_exports__.BlenderbotPreTrainedModel;
  var __webpack_exports__BlenderbotSmallForConditionalGeneration = __webpack_exports__.BlenderbotSmallForConditionalGeneration;
  var __webpack_exports__BlenderbotSmallModel = __webpack_exports__.BlenderbotSmallModel;
  var __webpack_exports__BlenderbotSmallPreTrainedModel = __webpack_exports__.BlenderbotSmallPreTrainedModel;
  var __webpack_exports__BlenderbotSmallTokenizer = __webpack_exports__.BlenderbotSmallTokenizer;
  var __webpack_exports__BlenderbotTokenizer = __webpack_exports__.BlenderbotTokenizer;
  var __webpack_exports__BloomForCausalLM = __webpack_exports__.BloomForCausalLM;
  var __webpack_exports__BloomModel = __webpack_exports__.BloomModel;
  var __webpack_exports__BloomPreTrainedModel = __webpack_exports__.BloomPreTrainedModel;
  var __webpack_exports__BloomTokenizer = __webpack_exports__.BloomTokenizer;
  var __webpack_exports__CLIPFeatureExtractor = __webpack_exports__.CLIPFeatureExtractor;
  var __webpack_exports__CLIPImageProcessor = __webpack_exports__.CLIPImageProcessor;
  var __webpack_exports__CLIPModel = __webpack_exports__.CLIPModel;
  var __webpack_exports__CLIPPreTrainedModel = __webpack_exports__.CLIPPreTrainedModel;
  var __webpack_exports__CLIPSegForImageSegmentation = __webpack_exports__.CLIPSegForImageSegmentation;
  var __webpack_exports__CLIPSegModel = __webpack_exports__.CLIPSegModel;
  var __webpack_exports__CLIPSegPreTrainedModel = __webpack_exports__.CLIPSegPreTrainedModel;
  var __webpack_exports__CLIPTextModel = __webpack_exports__.CLIPTextModel;
  var __webpack_exports__CLIPTextModelWithProjection = __webpack_exports__.CLIPTextModelWithProjection;
  var __webpack_exports__CLIPTokenizer = __webpack_exports__.CLIPTokenizer;
  var __webpack_exports__CLIPVisionModel = __webpack_exports__.CLIPVisionModel;
  var __webpack_exports__CLIPVisionModelWithProjection = __webpack_exports__.CLIPVisionModelWithProjection;
  var __webpack_exports__CamembertForMaskedLM = __webpack_exports__.CamembertForMaskedLM;
  var __webpack_exports__CamembertForQuestionAnswering = __webpack_exports__.CamembertForQuestionAnswering;
  var __webpack_exports__CamembertForSequenceClassification = __webpack_exports__.CamembertForSequenceClassification;
  var __webpack_exports__CamembertForTokenClassification = __webpack_exports__.CamembertForTokenClassification;
  var __webpack_exports__CamembertModel = __webpack_exports__.CamembertModel;
  var __webpack_exports__CamembertPreTrainedModel = __webpack_exports__.CamembertPreTrainedModel;
  var __webpack_exports__CamembertTokenizer = __webpack_exports__.CamembertTokenizer;
  var __webpack_exports__CausalLMOutput = __webpack_exports__.CausalLMOutput;
  var __webpack_exports__CausalLMOutputWithPast = __webpack_exports__.CausalLMOutputWithPast;
  var __webpack_exports__ChineseCLIPFeatureExtractor = __webpack_exports__.ChineseCLIPFeatureExtractor;
  var __webpack_exports__ChineseCLIPModel = __webpack_exports__.ChineseCLIPModel;
  var __webpack_exports__ChineseCLIPPreTrainedModel = __webpack_exports__.ChineseCLIPPreTrainedModel;
  var __webpack_exports__ClapAudioModelWithProjection = __webpack_exports__.ClapAudioModelWithProjection;
  var __webpack_exports__ClapFeatureExtractor = __webpack_exports__.ClapFeatureExtractor;
  var __webpack_exports__ClapModel = __webpack_exports__.ClapModel;
  var __webpack_exports__ClapPreTrainedModel = __webpack_exports__.ClapPreTrainedModel;
  var __webpack_exports__ClapTextModelWithProjection = __webpack_exports__.ClapTextModelWithProjection;
  var __webpack_exports__CodeGenForCausalLM = __webpack_exports__.CodeGenForCausalLM;
  var __webpack_exports__CodeGenModel = __webpack_exports__.CodeGenModel;
  var __webpack_exports__CodeGenPreTrainedModel = __webpack_exports__.CodeGenPreTrainedModel;
  var __webpack_exports__CodeGenTokenizer = __webpack_exports__.CodeGenTokenizer;
  var __webpack_exports__CodeLlamaTokenizer = __webpack_exports__.CodeLlamaTokenizer;
  var __webpack_exports__CohereForCausalLM = __webpack_exports__.CohereForCausalLM;
  var __webpack_exports__CohereModel = __webpack_exports__.CohereModel;
  var __webpack_exports__CoherePreTrainedModel = __webpack_exports__.CoherePreTrainedModel;
  var __webpack_exports__CohereTokenizer = __webpack_exports__.CohereTokenizer;
  var __webpack_exports__ConvBertForMaskedLM = __webpack_exports__.ConvBertForMaskedLM;
  var __webpack_exports__ConvBertForQuestionAnswering = __webpack_exports__.ConvBertForQuestionAnswering;
  var __webpack_exports__ConvBertForSequenceClassification = __webpack_exports__.ConvBertForSequenceClassification;
  var __webpack_exports__ConvBertForTokenClassification = __webpack_exports__.ConvBertForTokenClassification;
  var __webpack_exports__ConvBertModel = __webpack_exports__.ConvBertModel;
  var __webpack_exports__ConvBertPreTrainedModel = __webpack_exports__.ConvBertPreTrainedModel;
  var __webpack_exports__ConvBertTokenizer = __webpack_exports__.ConvBertTokenizer;
  var __webpack_exports__ConvNextFeatureExtractor = __webpack_exports__.ConvNextFeatureExtractor;
  var __webpack_exports__ConvNextForImageClassification = __webpack_exports__.ConvNextForImageClassification;
  var __webpack_exports__ConvNextImageProcessor = __webpack_exports__.ConvNextImageProcessor;
  var __webpack_exports__ConvNextModel = __webpack_exports__.ConvNextModel;
  var __webpack_exports__ConvNextPreTrainedModel = __webpack_exports__.ConvNextPreTrainedModel;
  var __webpack_exports__ConvNextV2ForImageClassification = __webpack_exports__.ConvNextV2ForImageClassification;
  var __webpack_exports__ConvNextV2Model = __webpack_exports__.ConvNextV2Model;
  var __webpack_exports__ConvNextV2PreTrainedModel = __webpack_exports__.ConvNextV2PreTrainedModel;
  var __webpack_exports__DPTFeatureExtractor = __webpack_exports__.DPTFeatureExtractor;
  var __webpack_exports__DPTForDepthEstimation = __webpack_exports__.DPTForDepthEstimation;
  var __webpack_exports__DPTImageProcessor = __webpack_exports__.DPTImageProcessor;
  var __webpack_exports__DPTModel = __webpack_exports__.DPTModel;
  var __webpack_exports__DPTPreTrainedModel = __webpack_exports__.DPTPreTrainedModel;
  var __webpack_exports__DebertaForMaskedLM = __webpack_exports__.DebertaForMaskedLM;
  var __webpack_exports__DebertaForQuestionAnswering = __webpack_exports__.DebertaForQuestionAnswering;
  var __webpack_exports__DebertaForSequenceClassification = __webpack_exports__.DebertaForSequenceClassification;
  var __webpack_exports__DebertaForTokenClassification = __webpack_exports__.DebertaForTokenClassification;
  var __webpack_exports__DebertaModel = __webpack_exports__.DebertaModel;
  var __webpack_exports__DebertaPreTrainedModel = __webpack_exports__.DebertaPreTrainedModel;
  var __webpack_exports__DebertaTokenizer = __webpack_exports__.DebertaTokenizer;
  var __webpack_exports__DebertaV2ForMaskedLM = __webpack_exports__.DebertaV2ForMaskedLM;
  var __webpack_exports__DebertaV2ForQuestionAnswering = __webpack_exports__.DebertaV2ForQuestionAnswering;
  var __webpack_exports__DebertaV2ForSequenceClassification = __webpack_exports__.DebertaV2ForSequenceClassification;
  var __webpack_exports__DebertaV2ForTokenClassification = __webpack_exports__.DebertaV2ForTokenClassification;
  var __webpack_exports__DebertaV2Model = __webpack_exports__.DebertaV2Model;
  var __webpack_exports__DebertaV2PreTrainedModel = __webpack_exports__.DebertaV2PreTrainedModel;
  var __webpack_exports__DebertaV2Tokenizer = __webpack_exports__.DebertaV2Tokenizer;
  var __webpack_exports__DecisionTransformerModel = __webpack_exports__.DecisionTransformerModel;
  var __webpack_exports__DecisionTransformerPreTrainedModel = __webpack_exports__.DecisionTransformerPreTrainedModel;
  var __webpack_exports__DeiTFeatureExtractor = __webpack_exports__.DeiTFeatureExtractor;
  var __webpack_exports__DeiTForImageClassification = __webpack_exports__.DeiTForImageClassification;
  var __webpack_exports__DeiTModel = __webpack_exports__.DeiTModel;
  var __webpack_exports__DeiTPreTrainedModel = __webpack_exports__.DeiTPreTrainedModel;
  var __webpack_exports__DepthAnythingForDepthEstimation = __webpack_exports__.DepthAnythingForDepthEstimation;
  var __webpack_exports__DepthAnythingPreTrainedModel = __webpack_exports__.DepthAnythingPreTrainedModel;
  var __webpack_exports__DepthEstimationPipeline = __webpack_exports__.DepthEstimationPipeline;
  var __webpack_exports__DepthProForDepthEstimation = __webpack_exports__.DepthProForDepthEstimation;
  var __webpack_exports__DepthProPreTrainedModel = __webpack_exports__.DepthProPreTrainedModel;
  var __webpack_exports__DetrFeatureExtractor = __webpack_exports__.DetrFeatureExtractor;
  var __webpack_exports__DetrForObjectDetection = __webpack_exports__.DetrForObjectDetection;
  var __webpack_exports__DetrForSegmentation = __webpack_exports__.DetrForSegmentation;
  var __webpack_exports__DetrModel = __webpack_exports__.DetrModel;
  var __webpack_exports__DetrObjectDetectionOutput = __webpack_exports__.DetrObjectDetectionOutput;
  var __webpack_exports__DetrPreTrainedModel = __webpack_exports__.DetrPreTrainedModel;
  var __webpack_exports__DetrSegmentationOutput = __webpack_exports__.DetrSegmentationOutput;
  var __webpack_exports__Dinov2ForImageClassification = __webpack_exports__.Dinov2ForImageClassification;
  var __webpack_exports__Dinov2Model = __webpack_exports__.Dinov2Model;
  var __webpack_exports__Dinov2PreTrainedModel = __webpack_exports__.Dinov2PreTrainedModel;
  var __webpack_exports__DistilBertForMaskedLM = __webpack_exports__.DistilBertForMaskedLM;
  var __webpack_exports__DistilBertForQuestionAnswering = __webpack_exports__.DistilBertForQuestionAnswering;
  var __webpack_exports__DistilBertForSequenceClassification = __webpack_exports__.DistilBertForSequenceClassification;
  var __webpack_exports__DistilBertForTokenClassification = __webpack_exports__.DistilBertForTokenClassification;
  var __webpack_exports__DistilBertModel = __webpack_exports__.DistilBertModel;
  var __webpack_exports__DistilBertPreTrainedModel = __webpack_exports__.DistilBertPreTrainedModel;
  var __webpack_exports__DistilBertTokenizer = __webpack_exports__.DistilBertTokenizer;
  var __webpack_exports__DocumentQuestionAnsweringPipeline = __webpack_exports__.DocumentQuestionAnsweringPipeline;
  var __webpack_exports__DonutFeatureExtractor = __webpack_exports__.DonutFeatureExtractor;
  var __webpack_exports__DonutImageProcessor = __webpack_exports__.DonutImageProcessor;
  var __webpack_exports__DonutSwinModel = __webpack_exports__.DonutSwinModel;
  var __webpack_exports__DonutSwinPreTrainedModel = __webpack_exports__.DonutSwinPreTrainedModel;
  var __webpack_exports__EfficientNetForImageClassification = __webpack_exports__.EfficientNetForImageClassification;
  var __webpack_exports__EfficientNetImageProcessor = __webpack_exports__.EfficientNetImageProcessor;
  var __webpack_exports__EfficientNetModel = __webpack_exports__.EfficientNetModel;
  var __webpack_exports__EfficientNetPreTrainedModel = __webpack_exports__.EfficientNetPreTrainedModel;
  var __webpack_exports__ElectraForMaskedLM = __webpack_exports__.ElectraForMaskedLM;
  var __webpack_exports__ElectraForQuestionAnswering = __webpack_exports__.ElectraForQuestionAnswering;
  var __webpack_exports__ElectraForSequenceClassification = __webpack_exports__.ElectraForSequenceClassification;
  var __webpack_exports__ElectraForTokenClassification = __webpack_exports__.ElectraForTokenClassification;
  var __webpack_exports__ElectraModel = __webpack_exports__.ElectraModel;
  var __webpack_exports__ElectraPreTrainedModel = __webpack_exports__.ElectraPreTrainedModel;
  var __webpack_exports__ElectraTokenizer = __webpack_exports__.ElectraTokenizer;
  var __webpack_exports__EosTokenCriteria = __webpack_exports__.EosTokenCriteria;
  var __webpack_exports__EsmForMaskedLM = __webpack_exports__.EsmForMaskedLM;
  var __webpack_exports__EsmForSequenceClassification = __webpack_exports__.EsmForSequenceClassification;
  var __webpack_exports__EsmForTokenClassification = __webpack_exports__.EsmForTokenClassification;
  var __webpack_exports__EsmModel = __webpack_exports__.EsmModel;
  var __webpack_exports__EsmPreTrainedModel = __webpack_exports__.EsmPreTrainedModel;
  var __webpack_exports__EsmTokenizer = __webpack_exports__.EsmTokenizer;
  var __webpack_exports__FFT = __webpack_exports__.FFT;
  var __webpack_exports__FalconForCausalLM = __webpack_exports__.FalconForCausalLM;
  var __webpack_exports__FalconModel = __webpack_exports__.FalconModel;
  var __webpack_exports__FalconPreTrainedModel = __webpack_exports__.FalconPreTrainedModel;
  var __webpack_exports__FalconTokenizer = __webpack_exports__.FalconTokenizer;
  var __webpack_exports__FastViTForImageClassification = __webpack_exports__.FastViTForImageClassification;
  var __webpack_exports__FastViTModel = __webpack_exports__.FastViTModel;
  var __webpack_exports__FastViTPreTrainedModel = __webpack_exports__.FastViTPreTrainedModel;
  var __webpack_exports__FeatureExtractionPipeline = __webpack_exports__.FeatureExtractionPipeline;
  var __webpack_exports__FeatureExtractor = __webpack_exports__.FeatureExtractor;
  var __webpack_exports__FillMaskPipeline = __webpack_exports__.FillMaskPipeline;
  var __webpack_exports__Florence2ForConditionalGeneration = __webpack_exports__.Florence2ForConditionalGeneration;
  var __webpack_exports__Florence2PreTrainedModel = __webpack_exports__.Florence2PreTrainedModel;
  var __webpack_exports__Florence2Processor = __webpack_exports__.Florence2Processor;
  var __webpack_exports__GLPNFeatureExtractor = __webpack_exports__.GLPNFeatureExtractor;
  var __webpack_exports__GLPNForDepthEstimation = __webpack_exports__.GLPNForDepthEstimation;
  var __webpack_exports__GLPNModel = __webpack_exports__.GLPNModel;
  var __webpack_exports__GLPNPreTrainedModel = __webpack_exports__.GLPNPreTrainedModel;
  var __webpack_exports__GPT2LMHeadModel = __webpack_exports__.GPT2LMHeadModel;
  var __webpack_exports__GPT2Model = __webpack_exports__.GPT2Model;
  var __webpack_exports__GPT2PreTrainedModel = __webpack_exports__.GPT2PreTrainedModel;
  var __webpack_exports__GPT2Tokenizer = __webpack_exports__.GPT2Tokenizer;
  var __webpack_exports__GPTBigCodeForCausalLM = __webpack_exports__.GPTBigCodeForCausalLM;
  var __webpack_exports__GPTBigCodeModel = __webpack_exports__.GPTBigCodeModel;
  var __webpack_exports__GPTBigCodePreTrainedModel = __webpack_exports__.GPTBigCodePreTrainedModel;
  var __webpack_exports__GPTJForCausalLM = __webpack_exports__.GPTJForCausalLM;
  var __webpack_exports__GPTJModel = __webpack_exports__.GPTJModel;
  var __webpack_exports__GPTJPreTrainedModel = __webpack_exports__.GPTJPreTrainedModel;
  var __webpack_exports__GPTNeoForCausalLM = __webpack_exports__.GPTNeoForCausalLM;
  var __webpack_exports__GPTNeoModel = __webpack_exports__.GPTNeoModel;
  var __webpack_exports__GPTNeoPreTrainedModel = __webpack_exports__.GPTNeoPreTrainedModel;
  var __webpack_exports__GPTNeoXForCausalLM = __webpack_exports__.GPTNeoXForCausalLM;
  var __webpack_exports__GPTNeoXModel = __webpack_exports__.GPTNeoXModel;
  var __webpack_exports__GPTNeoXPreTrainedModel = __webpack_exports__.GPTNeoXPreTrainedModel;
  var __webpack_exports__GPTNeoXTokenizer = __webpack_exports__.GPTNeoXTokenizer;
  var __webpack_exports__Gemma2ForCausalLM = __webpack_exports__.Gemma2ForCausalLM;
  var __webpack_exports__Gemma2Model = __webpack_exports__.Gemma2Model;
  var __webpack_exports__Gemma2PreTrainedModel = __webpack_exports__.Gemma2PreTrainedModel;
  var __webpack_exports__GemmaForCausalLM = __webpack_exports__.GemmaForCausalLM;
  var __webpack_exports__GemmaModel = __webpack_exports__.GemmaModel;
  var __webpack_exports__GemmaPreTrainedModel = __webpack_exports__.GemmaPreTrainedModel;
  var __webpack_exports__GemmaTokenizer = __webpack_exports__.GemmaTokenizer;
  var __webpack_exports__GraniteForCausalLM = __webpack_exports__.GraniteForCausalLM;
  var __webpack_exports__GraniteModel = __webpack_exports__.GraniteModel;
  var __webpack_exports__GranitePreTrainedModel = __webpack_exports__.GranitePreTrainedModel;
  var __webpack_exports__Grok1Tokenizer = __webpack_exports__.Grok1Tokenizer;
  var __webpack_exports__GroupViTModel = __webpack_exports__.GroupViTModel;
  var __webpack_exports__GroupViTPreTrainedModel = __webpack_exports__.GroupViTPreTrainedModel;
  var __webpack_exports__HerbertTokenizer = __webpack_exports__.HerbertTokenizer;
  var __webpack_exports__HieraForImageClassification = __webpack_exports__.HieraForImageClassification;
  var __webpack_exports__HieraModel = __webpack_exports__.HieraModel;
  var __webpack_exports__HieraPreTrainedModel = __webpack_exports__.HieraPreTrainedModel;
  var __webpack_exports__HubertForCTC = __webpack_exports__.HubertForCTC;
  var __webpack_exports__HubertForSequenceClassification = __webpack_exports__.HubertForSequenceClassification;
  var __webpack_exports__HubertModel = __webpack_exports__.HubertModel;
  var __webpack_exports__HubertPreTrainedModel = __webpack_exports__.HubertPreTrainedModel;
  var __webpack_exports__ImageClassificationPipeline = __webpack_exports__.ImageClassificationPipeline;
  var __webpack_exports__ImageFeatureExtractionPipeline = __webpack_exports__.ImageFeatureExtractionPipeline;
  var __webpack_exports__ImageFeatureExtractor = __webpack_exports__.ImageFeatureExtractor;
  var __webpack_exports__ImageMattingOutput = __webpack_exports__.ImageMattingOutput;
  var __webpack_exports__ImageSegmentationPipeline = __webpack_exports__.ImageSegmentationPipeline;
  var __webpack_exports__ImageToImagePipeline = __webpack_exports__.ImageToImagePipeline;
  var __webpack_exports__ImageToTextPipeline = __webpack_exports__.ImageToTextPipeline;
  var __webpack_exports__InterruptableStoppingCriteria = __webpack_exports__.InterruptableStoppingCriteria;
  var __webpack_exports__JAISLMHeadModel = __webpack_exports__.JAISLMHeadModel;
  var __webpack_exports__JAISModel = __webpack_exports__.JAISModel;
  var __webpack_exports__JAISPreTrainedModel = __webpack_exports__.JAISPreTrainedModel;
  var __webpack_exports__LlamaForCausalLM = __webpack_exports__.LlamaForCausalLM;
  var __webpack_exports__LlamaModel = __webpack_exports__.LlamaModel;
  var __webpack_exports__LlamaPreTrainedModel = __webpack_exports__.LlamaPreTrainedModel;
  var __webpack_exports__LlamaTokenizer = __webpack_exports__.LlamaTokenizer;
  var __webpack_exports__LlavaForConditionalGeneration = __webpack_exports__.LlavaForConditionalGeneration;
  var __webpack_exports__LlavaPreTrainedModel = __webpack_exports__.LlavaPreTrainedModel;
  var __webpack_exports__LongT5ForConditionalGeneration = __webpack_exports__.LongT5ForConditionalGeneration;
  var __webpack_exports__LongT5Model = __webpack_exports__.LongT5Model;
  var __webpack_exports__LongT5PreTrainedModel = __webpack_exports__.LongT5PreTrainedModel;
  var __webpack_exports__M2M100ForConditionalGeneration = __webpack_exports__.M2M100ForConditionalGeneration;
  var __webpack_exports__M2M100Model = __webpack_exports__.M2M100Model;
  var __webpack_exports__M2M100PreTrainedModel = __webpack_exports__.M2M100PreTrainedModel;
  var __webpack_exports__M2M100Tokenizer = __webpack_exports__.M2M100Tokenizer;
  var __webpack_exports__MBart50Tokenizer = __webpack_exports__.MBart50Tokenizer;
  var __webpack_exports__MBartForCausalLM = __webpack_exports__.MBartForCausalLM;
  var __webpack_exports__MBartForConditionalGeneration = __webpack_exports__.MBartForConditionalGeneration;
  var __webpack_exports__MBartForSequenceClassification = __webpack_exports__.MBartForSequenceClassification;
  var __webpack_exports__MBartModel = __webpack_exports__.MBartModel;
  var __webpack_exports__MBartPreTrainedModel = __webpack_exports__.MBartPreTrainedModel;
  var __webpack_exports__MBartTokenizer = __webpack_exports__.MBartTokenizer;
  var __webpack_exports__MPNetForMaskedLM = __webpack_exports__.MPNetForMaskedLM;
  var __webpack_exports__MPNetForQuestionAnswering = __webpack_exports__.MPNetForQuestionAnswering;
  var __webpack_exports__MPNetForSequenceClassification = __webpack_exports__.MPNetForSequenceClassification;
  var __webpack_exports__MPNetForTokenClassification = __webpack_exports__.MPNetForTokenClassification;
  var __webpack_exports__MPNetModel = __webpack_exports__.MPNetModel;
  var __webpack_exports__MPNetPreTrainedModel = __webpack_exports__.MPNetPreTrainedModel;
  var __webpack_exports__MPNetTokenizer = __webpack_exports__.MPNetTokenizer;
  var __webpack_exports__MT5ForConditionalGeneration = __webpack_exports__.MT5ForConditionalGeneration;
  var __webpack_exports__MT5Model = __webpack_exports__.MT5Model;
  var __webpack_exports__MT5PreTrainedModel = __webpack_exports__.MT5PreTrainedModel;
  var __webpack_exports__MarianMTModel = __webpack_exports__.MarianMTModel;
  var __webpack_exports__MarianModel = __webpack_exports__.MarianModel;
  var __webpack_exports__MarianPreTrainedModel = __webpack_exports__.MarianPreTrainedModel;
  var __webpack_exports__MarianTokenizer = __webpack_exports__.MarianTokenizer;
  var __webpack_exports__MaskFormerFeatureExtractor = __webpack_exports__.MaskFormerFeatureExtractor;
  var __webpack_exports__MaskFormerForInstanceSegmentation = __webpack_exports__.MaskFormerForInstanceSegmentation;
  var __webpack_exports__MaskFormerModel = __webpack_exports__.MaskFormerModel;
  var __webpack_exports__MaskFormerPreTrainedModel = __webpack_exports__.MaskFormerPreTrainedModel;
  var __webpack_exports__MaskedLMOutput = __webpack_exports__.MaskedLMOutput;
  var __webpack_exports__MaxLengthCriteria = __webpack_exports__.MaxLengthCriteria;
  var __webpack_exports__MistralForCausalLM = __webpack_exports__.MistralForCausalLM;
  var __webpack_exports__MistralModel = __webpack_exports__.MistralModel;
  var __webpack_exports__MistralPreTrainedModel = __webpack_exports__.MistralPreTrainedModel;
  var __webpack_exports__MobileBertForMaskedLM = __webpack_exports__.MobileBertForMaskedLM;
  var __webpack_exports__MobileBertForQuestionAnswering = __webpack_exports__.MobileBertForQuestionAnswering;
  var __webpack_exports__MobileBertForSequenceClassification = __webpack_exports__.MobileBertForSequenceClassification;
  var __webpack_exports__MobileBertModel = __webpack_exports__.MobileBertModel;
  var __webpack_exports__MobileBertPreTrainedModel = __webpack_exports__.MobileBertPreTrainedModel;
  var __webpack_exports__MobileBertTokenizer = __webpack_exports__.MobileBertTokenizer;
  var __webpack_exports__MobileLLMForCausalLM = __webpack_exports__.MobileLLMForCausalLM;
  var __webpack_exports__MobileLLMModel = __webpack_exports__.MobileLLMModel;
  var __webpack_exports__MobileLLMPreTrainedModel = __webpack_exports__.MobileLLMPreTrainedModel;
  var __webpack_exports__MobileNetV1FeatureExtractor = __webpack_exports__.MobileNetV1FeatureExtractor;
  var __webpack_exports__MobileNetV1ForImageClassification = __webpack_exports__.MobileNetV1ForImageClassification;
  var __webpack_exports__MobileNetV1Model = __webpack_exports__.MobileNetV1Model;
  var __webpack_exports__MobileNetV1PreTrainedModel = __webpack_exports__.MobileNetV1PreTrainedModel;
  var __webpack_exports__MobileNetV2FeatureExtractor = __webpack_exports__.MobileNetV2FeatureExtractor;
  var __webpack_exports__MobileNetV2ForImageClassification = __webpack_exports__.MobileNetV2ForImageClassification;
  var __webpack_exports__MobileNetV2Model = __webpack_exports__.MobileNetV2Model;
  var __webpack_exports__MobileNetV2PreTrainedModel = __webpack_exports__.MobileNetV2PreTrainedModel;
  var __webpack_exports__MobileNetV3FeatureExtractor = __webpack_exports__.MobileNetV3FeatureExtractor;
  var __webpack_exports__MobileNetV3ForImageClassification = __webpack_exports__.MobileNetV3ForImageClassification;
  var __webpack_exports__MobileNetV3Model = __webpack_exports__.MobileNetV3Model;
  var __webpack_exports__MobileNetV3PreTrainedModel = __webpack_exports__.MobileNetV3PreTrainedModel;
  var __webpack_exports__MobileNetV4FeatureExtractor = __webpack_exports__.MobileNetV4FeatureExtractor;
  var __webpack_exports__MobileNetV4ForImageClassification = __webpack_exports__.MobileNetV4ForImageClassification;
  var __webpack_exports__MobileNetV4Model = __webpack_exports__.MobileNetV4Model;
  var __webpack_exports__MobileNetV4PreTrainedModel = __webpack_exports__.MobileNetV4PreTrainedModel;
  var __webpack_exports__MobileViTFeatureExtractor = __webpack_exports__.MobileViTFeatureExtractor;
  var __webpack_exports__MobileViTForImageClassification = __webpack_exports__.MobileViTForImageClassification;
  var __webpack_exports__MobileViTImageProcessor = __webpack_exports__.MobileViTImageProcessor;
  var __webpack_exports__MobileViTModel = __webpack_exports__.MobileViTModel;
  var __webpack_exports__MobileViTPreTrainedModel = __webpack_exports__.MobileViTPreTrainedModel;
  var __webpack_exports__MobileViTV2ForImageClassification = __webpack_exports__.MobileViTV2ForImageClassification;
  var __webpack_exports__MobileViTV2Model = __webpack_exports__.MobileViTV2Model;
  var __webpack_exports__MobileViTV2PreTrainedModel = __webpack_exports__.MobileViTV2PreTrainedModel;
  var __webpack_exports__ModelOutput = __webpack_exports__.ModelOutput;
  var __webpack_exports__Moondream1ForConditionalGeneration = __webpack_exports__.Moondream1ForConditionalGeneration;
  var __webpack_exports__MptForCausalLM = __webpack_exports__.MptForCausalLM;
  var __webpack_exports__MptModel = __webpack_exports__.MptModel;
  var __webpack_exports__MptPreTrainedModel = __webpack_exports__.MptPreTrainedModel;
  var __webpack_exports__MusicgenForCausalLM = __webpack_exports__.MusicgenForCausalLM;
  var __webpack_exports__MusicgenForConditionalGeneration = __webpack_exports__.MusicgenForConditionalGeneration;
  var __webpack_exports__MusicgenModel = __webpack_exports__.MusicgenModel;
  var __webpack_exports__MusicgenPreTrainedModel = __webpack_exports__.MusicgenPreTrainedModel;
  var __webpack_exports__NllbTokenizer = __webpack_exports__.NllbTokenizer;
  var __webpack_exports__NomicBertModel = __webpack_exports__.NomicBertModel;
  var __webpack_exports__NomicBertPreTrainedModel = __webpack_exports__.NomicBertPreTrainedModel;
  var __webpack_exports__NougatImageProcessor = __webpack_exports__.NougatImageProcessor;
  var __webpack_exports__NougatTokenizer = __webpack_exports__.NougatTokenizer;
  var __webpack_exports__OPTForCausalLM = __webpack_exports__.OPTForCausalLM;
  var __webpack_exports__OPTModel = __webpack_exports__.OPTModel;
  var __webpack_exports__OPTPreTrainedModel = __webpack_exports__.OPTPreTrainedModel;
  var __webpack_exports__ObjectDetectionPipeline = __webpack_exports__.ObjectDetectionPipeline;
  var __webpack_exports__OlmoForCausalLM = __webpack_exports__.OlmoForCausalLM;
  var __webpack_exports__OlmoModel = __webpack_exports__.OlmoModel;
  var __webpack_exports__OlmoPreTrainedModel = __webpack_exports__.OlmoPreTrainedModel;
  var __webpack_exports__OpenELMForCausalLM = __webpack_exports__.OpenELMForCausalLM;
  var __webpack_exports__OpenELMModel = __webpack_exports__.OpenELMModel;
  var __webpack_exports__OpenELMPreTrainedModel = __webpack_exports__.OpenELMPreTrainedModel;
  var __webpack_exports__OwlViTFeatureExtractor = __webpack_exports__.OwlViTFeatureExtractor;
  var __webpack_exports__OwlViTForObjectDetection = __webpack_exports__.OwlViTForObjectDetection;
  var __webpack_exports__OwlViTModel = __webpack_exports__.OwlViTModel;
  var __webpack_exports__OwlViTPreTrainedModel = __webpack_exports__.OwlViTPreTrainedModel;
  var __webpack_exports__OwlViTProcessor = __webpack_exports__.OwlViTProcessor;
  var __webpack_exports__Owlv2ForObjectDetection = __webpack_exports__.Owlv2ForObjectDetection;
  var __webpack_exports__Owlv2ImageProcessor = __webpack_exports__.Owlv2ImageProcessor;
  var __webpack_exports__Owlv2Model = __webpack_exports__.Owlv2Model;
  var __webpack_exports__Owlv2PreTrainedModel = __webpack_exports__.Owlv2PreTrainedModel;
  var __webpack_exports__Phi3ForCausalLM = __webpack_exports__.Phi3ForCausalLM;
  var __webpack_exports__Phi3Model = __webpack_exports__.Phi3Model;
  var __webpack_exports__Phi3PreTrainedModel = __webpack_exports__.Phi3PreTrainedModel;
  var __webpack_exports__PhiForCausalLM = __webpack_exports__.PhiForCausalLM;
  var __webpack_exports__PhiModel = __webpack_exports__.PhiModel;
  var __webpack_exports__PhiPreTrainedModel = __webpack_exports__.PhiPreTrainedModel;
  var __webpack_exports__Pipeline = __webpack_exports__.Pipeline;
  var __webpack_exports__PreTrainedModel = __webpack_exports__.PreTrainedModel;
  var __webpack_exports__PreTrainedTokenizer = __webpack_exports__.PreTrainedTokenizer;
  var __webpack_exports__PretrainedConfig = __webpack_exports__.PretrainedConfig;
  var __webpack_exports__PretrainedMixin = __webpack_exports__.PretrainedMixin;
  var __webpack_exports__Processor = __webpack_exports__.Processor;
  var __webpack_exports__PvtForImageClassification = __webpack_exports__.PvtForImageClassification;
  var __webpack_exports__PvtImageProcessor = __webpack_exports__.PvtImageProcessor;
  var __webpack_exports__PvtModel = __webpack_exports__.PvtModel;
  var __webpack_exports__PvtPreTrainedModel = __webpack_exports__.PvtPreTrainedModel;
  var __webpack_exports__PyAnnoteFeatureExtractor = __webpack_exports__.PyAnnoteFeatureExtractor;
  var __webpack_exports__PyAnnoteForAudioFrameClassification = __webpack_exports__.PyAnnoteForAudioFrameClassification;
  var __webpack_exports__PyAnnoteModel = __webpack_exports__.PyAnnoteModel;
  var __webpack_exports__PyAnnotePreTrainedModel = __webpack_exports__.PyAnnotePreTrainedModel;
  var __webpack_exports__PyAnnoteProcessor = __webpack_exports__.PyAnnoteProcessor;
  var __webpack_exports__QuestionAnsweringModelOutput = __webpack_exports__.QuestionAnsweringModelOutput;
  var __webpack_exports__QuestionAnsweringPipeline = __webpack_exports__.QuestionAnsweringPipeline;
  var __webpack_exports__Qwen2ForCausalLM = __webpack_exports__.Qwen2ForCausalLM;
  var __webpack_exports__Qwen2Model = __webpack_exports__.Qwen2Model;
  var __webpack_exports__Qwen2PreTrainedModel = __webpack_exports__.Qwen2PreTrainedModel;
  var __webpack_exports__Qwen2Tokenizer = __webpack_exports__.Qwen2Tokenizer;
  var __webpack_exports__RTDetrForObjectDetection = __webpack_exports__.RTDetrForObjectDetection;
  var __webpack_exports__RTDetrImageProcessor = __webpack_exports__.RTDetrImageProcessor;
  var __webpack_exports__RTDetrModel = __webpack_exports__.RTDetrModel;
  var __webpack_exports__RTDetrObjectDetectionOutput = __webpack_exports__.RTDetrObjectDetectionOutput;
  var __webpack_exports__RTDetrPreTrainedModel = __webpack_exports__.RTDetrPreTrainedModel;
  var __webpack_exports__RawImage = __webpack_exports__.RawImage;
  var __webpack_exports__ResNetForImageClassification = __webpack_exports__.ResNetForImageClassification;
  var __webpack_exports__ResNetModel = __webpack_exports__.ResNetModel;
  var __webpack_exports__ResNetPreTrainedModel = __webpack_exports__.ResNetPreTrainedModel;
  var __webpack_exports__RoFormerForMaskedLM = __webpack_exports__.RoFormerForMaskedLM;
  var __webpack_exports__RoFormerForQuestionAnswering = __webpack_exports__.RoFormerForQuestionAnswering;
  var __webpack_exports__RoFormerForSequenceClassification = __webpack_exports__.RoFormerForSequenceClassification;
  var __webpack_exports__RoFormerForTokenClassification = __webpack_exports__.RoFormerForTokenClassification;
  var __webpack_exports__RoFormerModel = __webpack_exports__.RoFormerModel;
  var __webpack_exports__RoFormerPreTrainedModel = __webpack_exports__.RoFormerPreTrainedModel;
  var __webpack_exports__RoFormerTokenizer = __webpack_exports__.RoFormerTokenizer;
  var __webpack_exports__RobertaForMaskedLM = __webpack_exports__.RobertaForMaskedLM;
  var __webpack_exports__RobertaForQuestionAnswering = __webpack_exports__.RobertaForQuestionAnswering;
  var __webpack_exports__RobertaForSequenceClassification = __webpack_exports__.RobertaForSequenceClassification;
  var __webpack_exports__RobertaForTokenClassification = __webpack_exports__.RobertaForTokenClassification;
  var __webpack_exports__RobertaModel = __webpack_exports__.RobertaModel;
  var __webpack_exports__RobertaPreTrainedModel = __webpack_exports__.RobertaPreTrainedModel;
  var __webpack_exports__RobertaTokenizer = __webpack_exports__.RobertaTokenizer;
  var __webpack_exports__SamImageProcessor = __webpack_exports__.SamImageProcessor;
  var __webpack_exports__SamImageSegmentationOutput = __webpack_exports__.SamImageSegmentationOutput;
  var __webpack_exports__SamModel = __webpack_exports__.SamModel;
  var __webpack_exports__SamPreTrainedModel = __webpack_exports__.SamPreTrainedModel;
  var __webpack_exports__SamProcessor = __webpack_exports__.SamProcessor;
  var __webpack_exports__SapiensFeatureExtractor = __webpack_exports__.SapiensFeatureExtractor;
  var __webpack_exports__SapiensForDepthEstimation = __webpack_exports__.SapiensForDepthEstimation;
  var __webpack_exports__SapiensForNormalEstimation = __webpack_exports__.SapiensForNormalEstimation;
  var __webpack_exports__SapiensForSemanticSegmentation = __webpack_exports__.SapiensForSemanticSegmentation;
  var __webpack_exports__SapiensPreTrainedModel = __webpack_exports__.SapiensPreTrainedModel;
  var __webpack_exports__SeamlessM4TFeatureExtractor = __webpack_exports__.SeamlessM4TFeatureExtractor;
  var __webpack_exports__SegformerFeatureExtractor = __webpack_exports__.SegformerFeatureExtractor;
  var __webpack_exports__SegformerForImageClassification = __webpack_exports__.SegformerForImageClassification;
  var __webpack_exports__SegformerForSemanticSegmentation = __webpack_exports__.SegformerForSemanticSegmentation;
  var __webpack_exports__SegformerModel = __webpack_exports__.SegformerModel;
  var __webpack_exports__SegformerPreTrainedModel = __webpack_exports__.SegformerPreTrainedModel;
  var __webpack_exports__Seq2SeqLMOutput = __webpack_exports__.Seq2SeqLMOutput;
  var __webpack_exports__SequenceClassifierOutput = __webpack_exports__.SequenceClassifierOutput;
  var __webpack_exports__SiglipImageProcessor = __webpack_exports__.SiglipImageProcessor;
  var __webpack_exports__SiglipModel = __webpack_exports__.SiglipModel;
  var __webpack_exports__SiglipPreTrainedModel = __webpack_exports__.SiglipPreTrainedModel;
  var __webpack_exports__SiglipTextModel = __webpack_exports__.SiglipTextModel;
  var __webpack_exports__SiglipTokenizer = __webpack_exports__.SiglipTokenizer;
  var __webpack_exports__SiglipVisionModel = __webpack_exports__.SiglipVisionModel;
  var __webpack_exports__SpeechT5FeatureExtractor = __webpack_exports__.SpeechT5FeatureExtractor;
  var __webpack_exports__SpeechT5ForSpeechToText = __webpack_exports__.SpeechT5ForSpeechToText;
  var __webpack_exports__SpeechT5ForTextToSpeech = __webpack_exports__.SpeechT5ForTextToSpeech;
  var __webpack_exports__SpeechT5HifiGan = __webpack_exports__.SpeechT5HifiGan;
  var __webpack_exports__SpeechT5Model = __webpack_exports__.SpeechT5Model;
  var __webpack_exports__SpeechT5PreTrainedModel = __webpack_exports__.SpeechT5PreTrainedModel;
  var __webpack_exports__SpeechT5Processor = __webpack_exports__.SpeechT5Processor;
  var __webpack_exports__SpeechT5Tokenizer = __webpack_exports__.SpeechT5Tokenizer;
  var __webpack_exports__SqueezeBertForMaskedLM = __webpack_exports__.SqueezeBertForMaskedLM;
  var __webpack_exports__SqueezeBertForQuestionAnswering = __webpack_exports__.SqueezeBertForQuestionAnswering;
  var __webpack_exports__SqueezeBertForSequenceClassification = __webpack_exports__.SqueezeBertForSequenceClassification;
  var __webpack_exports__SqueezeBertModel = __webpack_exports__.SqueezeBertModel;
  var __webpack_exports__SqueezeBertPreTrainedModel = __webpack_exports__.SqueezeBertPreTrainedModel;
  var __webpack_exports__SqueezeBertTokenizer = __webpack_exports__.SqueezeBertTokenizer;
  var __webpack_exports__StableLmForCausalLM = __webpack_exports__.StableLmForCausalLM;
  var __webpack_exports__StableLmModel = __webpack_exports__.StableLmModel;
  var __webpack_exports__StableLmPreTrainedModel = __webpack_exports__.StableLmPreTrainedModel;
  var __webpack_exports__Starcoder2ForCausalLM = __webpack_exports__.Starcoder2ForCausalLM;
  var __webpack_exports__Starcoder2Model = __webpack_exports__.Starcoder2Model;
  var __webpack_exports__Starcoder2PreTrainedModel = __webpack_exports__.Starcoder2PreTrainedModel;
  var __webpack_exports__StoppingCriteria = __webpack_exports__.StoppingCriteria;
  var __webpack_exports__StoppingCriteriaList = __webpack_exports__.StoppingCriteriaList;
  var __webpack_exports__SummarizationPipeline = __webpack_exports__.SummarizationPipeline;
  var __webpack_exports__Swin2SRForImageSuperResolution = __webpack_exports__.Swin2SRForImageSuperResolution;
  var __webpack_exports__Swin2SRImageProcessor = __webpack_exports__.Swin2SRImageProcessor;
  var __webpack_exports__Swin2SRModel = __webpack_exports__.Swin2SRModel;
  var __webpack_exports__Swin2SRPreTrainedModel = __webpack_exports__.Swin2SRPreTrainedModel;
  var __webpack_exports__SwinForImageClassification = __webpack_exports__.SwinForImageClassification;
  var __webpack_exports__SwinModel = __webpack_exports__.SwinModel;
  var __webpack_exports__SwinPreTrainedModel = __webpack_exports__.SwinPreTrainedModel;
  var __webpack_exports__T5ForConditionalGeneration = __webpack_exports__.T5ForConditionalGeneration;
  var __webpack_exports__T5Model = __webpack_exports__.T5Model;
  var __webpack_exports__T5PreTrainedModel = __webpack_exports__.T5PreTrainedModel;
  var __webpack_exports__T5Tokenizer = __webpack_exports__.T5Tokenizer;
  var __webpack_exports__TableTransformerForObjectDetection = __webpack_exports__.TableTransformerForObjectDetection;
  var __webpack_exports__TableTransformerModel = __webpack_exports__.TableTransformerModel;
  var __webpack_exports__TableTransformerObjectDetectionOutput = __webpack_exports__.TableTransformerObjectDetectionOutput;
  var __webpack_exports__TableTransformerPreTrainedModel = __webpack_exports__.TableTransformerPreTrainedModel;
  var __webpack_exports__Tensor = __webpack_exports__.Tensor;
  var __webpack_exports__Text2TextGenerationPipeline = __webpack_exports__.Text2TextGenerationPipeline;
  var __webpack_exports__TextClassificationPipeline = __webpack_exports__.TextClassificationPipeline;
  var __webpack_exports__TextGenerationPipeline = __webpack_exports__.TextGenerationPipeline;
  var __webpack_exports__TextStreamer = __webpack_exports__.TextStreamer;
  var __webpack_exports__TextToAudioPipeline = __webpack_exports__.TextToAudioPipeline;
  var __webpack_exports__TokenClassificationPipeline = __webpack_exports__.TokenClassificationPipeline;
  var __webpack_exports__TokenClassifierOutput = __webpack_exports__.TokenClassifierOutput;
  var __webpack_exports__TokenizerModel = __webpack_exports__.TokenizerModel;
  var __webpack_exports__TrOCRForCausalLM = __webpack_exports__.TrOCRForCausalLM;
  var __webpack_exports__TrOCRPreTrainedModel = __webpack_exports__.TrOCRPreTrainedModel;
  var __webpack_exports__TranslationPipeline = __webpack_exports__.TranslationPipeline;
  var __webpack_exports__UniSpeechForCTC = __webpack_exports__.UniSpeechForCTC;
  var __webpack_exports__UniSpeechForSequenceClassification = __webpack_exports__.UniSpeechForSequenceClassification;
  var __webpack_exports__UniSpeechModel = __webpack_exports__.UniSpeechModel;
  var __webpack_exports__UniSpeechPreTrainedModel = __webpack_exports__.UniSpeechPreTrainedModel;
  var __webpack_exports__UniSpeechSatForAudioFrameClassification = __webpack_exports__.UniSpeechSatForAudioFrameClassification;
  var __webpack_exports__UniSpeechSatForCTC = __webpack_exports__.UniSpeechSatForCTC;
  var __webpack_exports__UniSpeechSatForSequenceClassification = __webpack_exports__.UniSpeechSatForSequenceClassification;
  var __webpack_exports__UniSpeechSatModel = __webpack_exports__.UniSpeechSatModel;
  var __webpack_exports__UniSpeechSatPreTrainedModel = __webpack_exports__.UniSpeechSatPreTrainedModel;
  var __webpack_exports__ViTFeatureExtractor = __webpack_exports__.ViTFeatureExtractor;
  var __webpack_exports__ViTForImageClassification = __webpack_exports__.ViTForImageClassification;
  var __webpack_exports__ViTImageProcessor = __webpack_exports__.ViTImageProcessor;
  var __webpack_exports__ViTMAEModel = __webpack_exports__.ViTMAEModel;
  var __webpack_exports__ViTMAEPreTrainedModel = __webpack_exports__.ViTMAEPreTrainedModel;
  var __webpack_exports__ViTMSNForImageClassification = __webpack_exports__.ViTMSNForImageClassification;
  var __webpack_exports__ViTMSNModel = __webpack_exports__.ViTMSNModel;
  var __webpack_exports__ViTMSNPreTrainedModel = __webpack_exports__.ViTMSNPreTrainedModel;
  var __webpack_exports__ViTModel = __webpack_exports__.ViTModel;
  var __webpack_exports__ViTPreTrainedModel = __webpack_exports__.ViTPreTrainedModel;
  var __webpack_exports__VisionEncoderDecoderModel = __webpack_exports__.VisionEncoderDecoderModel;
  var __webpack_exports__VitMatteForImageMatting = __webpack_exports__.VitMatteForImageMatting;
  var __webpack_exports__VitMatteImageProcessor = __webpack_exports__.VitMatteImageProcessor;
  var __webpack_exports__VitMattePreTrainedModel = __webpack_exports__.VitMattePreTrainedModel;
  var __webpack_exports__VitsModel = __webpack_exports__.VitsModel;
  var __webpack_exports__VitsModelOutput = __webpack_exports__.VitsModelOutput;
  var __webpack_exports__VitsPreTrainedModel = __webpack_exports__.VitsPreTrainedModel;
  var __webpack_exports__VitsTokenizer = __webpack_exports__.VitsTokenizer;
  var __webpack_exports__Wav2Vec2BertForCTC = __webpack_exports__.Wav2Vec2BertForCTC;
  var __webpack_exports__Wav2Vec2BertForSequenceClassification = __webpack_exports__.Wav2Vec2BertForSequenceClassification;
  var __webpack_exports__Wav2Vec2BertModel = __webpack_exports__.Wav2Vec2BertModel;
  var __webpack_exports__Wav2Vec2BertPreTrainedModel = __webpack_exports__.Wav2Vec2BertPreTrainedModel;
  var __webpack_exports__Wav2Vec2CTCTokenizer = __webpack_exports__.Wav2Vec2CTCTokenizer;
  var __webpack_exports__Wav2Vec2FeatureExtractor = __webpack_exports__.Wav2Vec2FeatureExtractor;
  var __webpack_exports__Wav2Vec2ForAudioFrameClassification = __webpack_exports__.Wav2Vec2ForAudioFrameClassification;
  var __webpack_exports__Wav2Vec2ForCTC = __webpack_exports__.Wav2Vec2ForCTC;
  var __webpack_exports__Wav2Vec2ForSequenceClassification = __webpack_exports__.Wav2Vec2ForSequenceClassification;
  var __webpack_exports__Wav2Vec2Model = __webpack_exports__.Wav2Vec2Model;
  var __webpack_exports__Wav2Vec2PreTrainedModel = __webpack_exports__.Wav2Vec2PreTrainedModel;
  var __webpack_exports__Wav2Vec2ProcessorWithLM = __webpack_exports__.Wav2Vec2ProcessorWithLM;
  var __webpack_exports__WavLMForAudioFrameClassification = __webpack_exports__.WavLMForAudioFrameClassification;
  var __webpack_exports__WavLMForCTC = __webpack_exports__.WavLMForCTC;
  var __webpack_exports__WavLMForSequenceClassification = __webpack_exports__.WavLMForSequenceClassification;
  var __webpack_exports__WavLMForXVector = __webpack_exports__.WavLMForXVector;
  var __webpack_exports__WavLMModel = __webpack_exports__.WavLMModel;
  var __webpack_exports__WavLMPreTrainedModel = __webpack_exports__.WavLMPreTrainedModel;
  var __webpack_exports__WeSpeakerFeatureExtractor = __webpack_exports__.WeSpeakerFeatureExtractor;
  var __webpack_exports__WeSpeakerResNetModel = __webpack_exports__.WeSpeakerResNetModel;
  var __webpack_exports__WeSpeakerResNetPreTrainedModel = __webpack_exports__.WeSpeakerResNetPreTrainedModel;
  var __webpack_exports__WhisperFeatureExtractor = __webpack_exports__.WhisperFeatureExtractor;
  var __webpack_exports__WhisperForConditionalGeneration = __webpack_exports__.WhisperForConditionalGeneration;
  var __webpack_exports__WhisperModel = __webpack_exports__.WhisperModel;
  var __webpack_exports__WhisperPreTrainedModel = __webpack_exports__.WhisperPreTrainedModel;
  var __webpack_exports__WhisperProcessor = __webpack_exports__.WhisperProcessor;
  var __webpack_exports__WhisperTextStreamer = __webpack_exports__.WhisperTextStreamer;
  var __webpack_exports__WhisperTokenizer = __webpack_exports__.WhisperTokenizer;
  var __webpack_exports__XLMForQuestionAnswering = __webpack_exports__.XLMForQuestionAnswering;
  var __webpack_exports__XLMForSequenceClassification = __webpack_exports__.XLMForSequenceClassification;
  var __webpack_exports__XLMForTokenClassification = __webpack_exports__.XLMForTokenClassification;
  var __webpack_exports__XLMModel = __webpack_exports__.XLMModel;
  var __webpack_exports__XLMPreTrainedModel = __webpack_exports__.XLMPreTrainedModel;
  var __webpack_exports__XLMRobertaForMaskedLM = __webpack_exports__.XLMRobertaForMaskedLM;
  var __webpack_exports__XLMRobertaForQuestionAnswering = __webpack_exports__.XLMRobertaForQuestionAnswering;
  var __webpack_exports__XLMRobertaForSequenceClassification = __webpack_exports__.XLMRobertaForSequenceClassification;
  var __webpack_exports__XLMRobertaForTokenClassification = __webpack_exports__.XLMRobertaForTokenClassification;
  var __webpack_exports__XLMRobertaModel = __webpack_exports__.XLMRobertaModel;
  var __webpack_exports__XLMRobertaPreTrainedModel = __webpack_exports__.XLMRobertaPreTrainedModel;
  var __webpack_exports__XLMRobertaTokenizer = __webpack_exports__.XLMRobertaTokenizer;
  var __webpack_exports__XLMTokenizer = __webpack_exports__.XLMTokenizer;
  var __webpack_exports__XLMWithLMHeadModel = __webpack_exports__.XLMWithLMHeadModel;
  var __webpack_exports__XVectorOutput = __webpack_exports__.XVectorOutput;
  var __webpack_exports__YolosFeatureExtractor = __webpack_exports__.YolosFeatureExtractor;
  var __webpack_exports__YolosForObjectDetection = __webpack_exports__.YolosForObjectDetection;
  var __webpack_exports__YolosModel = __webpack_exports__.YolosModel;
  var __webpack_exports__YolosObjectDetectionOutput = __webpack_exports__.YolosObjectDetectionOutput;
  var __webpack_exports__YolosPreTrainedModel = __webpack_exports__.YolosPreTrainedModel;
  var __webpack_exports__ZeroShotAudioClassificationPipeline = __webpack_exports__.ZeroShotAudioClassificationPipeline;
  var __webpack_exports__ZeroShotClassificationPipeline = __webpack_exports__.ZeroShotClassificationPipeline;
  var __webpack_exports__ZeroShotImageClassificationPipeline = __webpack_exports__.ZeroShotImageClassificationPipeline;
  var __webpack_exports__ZeroShotObjectDetectionPipeline = __webpack_exports__.ZeroShotObjectDetectionPipeline;
  var __webpack_exports__bankers_round = __webpack_exports__.bankers_round;
  var __webpack_exports__cat = __webpack_exports__.cat;
  var __webpack_exports__cos_sim = __webpack_exports__.cos_sim;
  var __webpack_exports__dot = __webpack_exports__.dot;
  var __webpack_exports__dynamic_time_warping = __webpack_exports__.dynamic_time_warping;
  var __webpack_exports__env = __webpack_exports__.env;
  var __webpack_exports__full = __webpack_exports__.full;
  var __webpack_exports__full_like = __webpack_exports__.full_like;
  var __webpack_exports__getKeyValueShapes = __webpack_exports__.getKeyValueShapes;
  var __webpack_exports__hamming = __webpack_exports__.hamming;
  var __webpack_exports__hanning = __webpack_exports__.hanning;
  var __webpack_exports__interpolate = __webpack_exports__.interpolate;
  var __webpack_exports__interpolate_4d = __webpack_exports__.interpolate_4d;
  var __webpack_exports__interpolate_data = __webpack_exports__.interpolate_data;
  var __webpack_exports__is_chinese_char = __webpack_exports__.is_chinese_char;
  var __webpack_exports__layer_norm = __webpack_exports__.layer_norm;
  var __webpack_exports__log_softmax = __webpack_exports__.log_softmax;
  var __webpack_exports__magnitude = __webpack_exports__.magnitude;
  var __webpack_exports__matmul = __webpack_exports__.matmul;
  var __webpack_exports__max = __webpack_exports__.max;
  var __webpack_exports__mean = __webpack_exports__.mean;
  var __webpack_exports__mean_pooling = __webpack_exports__.mean_pooling;
  var __webpack_exports__medianFilter = __webpack_exports__.medianFilter;
  var __webpack_exports__mel_filter_bank = __webpack_exports__.mel_filter_bank;
  var __webpack_exports__min = __webpack_exports__.min;
  var __webpack_exports__ones = __webpack_exports__.ones;
  var __webpack_exports__ones_like = __webpack_exports__.ones_like;
  var __webpack_exports__permute = __webpack_exports__.permute;
  var __webpack_exports__permute_data = __webpack_exports__.permute_data;
  var __webpack_exports__pipeline = __webpack_exports__.pipeline;
  var __webpack_exports__quantize_embeddings = __webpack_exports__.quantize_embeddings;
  var __webpack_exports__read_audio = __webpack_exports__.read_audio;
  var __webpack_exports__rfft = __webpack_exports__.rfft;
  var __webpack_exports__round = __webpack_exports__.round;
  var __webpack_exports__softmax = __webpack_exports__.softmax;
  var __webpack_exports__spectrogram = __webpack_exports__.spectrogram;
  var __webpack_exports__stack = __webpack_exports__.stack;
  var __webpack_exports__std_mean = __webpack_exports__.std_mean;
  var __webpack_exports__topk = __webpack_exports__.topk;
  var __webpack_exports__window_function = __webpack_exports__.window_function;
  var __webpack_exports__zeros = __webpack_exports__.zeros;
  var __webpack_exports__zeros_like = __webpack_exports__.zeros_like;
  
  // src/generation.ts
  import Together from "together-ai";
  import { fal } from "@fal-ai/client";
  
  // ../../node_modules/bignumber.js/bignumber.mjs
  var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i;
  var mathceil = Math.ceil;
  var mathfloor = Math.floor;
  var bignumberError = "[BigNumber Error] ";
  var tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ";
  var BASE = 1e14;
  var LOG_BASE = 14;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13];
  var SQRT_BASE = 1e7;
  var MAX = 1e9;
  function clone(configObject) {
    var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
      prefix: "",
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ",",
      decimalSeparator: ".",
      fractionGroupSize: 0,
      fractionGroupSeparator: "\xA0",
      // non-breaking space
      suffix: ""
    }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
    function BigNumber2(v, b) {
      var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
      if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
      if (b == null) {
        if (v && v._isBigNumber === true) {
          x.s = v.s;
          if (!v.c || v.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (v.e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = v.e;
            x.c = v.c.slice();
          }
          return;
        }
        if ((isNum = typeof v == "number") && v * 0 == 0) {
          x.s = 1 / v < 0 ? (v = -v, -1) : 1;
          if (v === ~~v) {
            for (e = 0, i = v; i >= 10; i /= 10, e++) ;
            if (e > MAX_EXP) {
              x.c = x.e = null;
            } else {
              x.e = e;
              x.c = [v];
            }
            return;
          }
          str = String(v);
        } else {
          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
        }
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        if ((i = str.search(/e/i)) > 0) {
          if (e < 0) e = i;
          e += +str.slice(i + 1);
          str = str.substring(0, i);
        } else if (e < 0) {
          e = str.length;
        }
      } else {
        intCheck(b, 2, ALPHABET.length, "Base");
        if (b == 10 && alphabetHasNormalDecimalDigits) {
          x = new BigNumber2(v);
          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
        }
        str = String(v);
        if (isNum = typeof v == "number") {
          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
          if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
            throw Error(tooManyDigits + v);
          }
        } else {
          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
        }
        alphabet = ALPHABET.slice(0, b);
        e = i = 0;
        for (len = str.length; i < len; i++) {
          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
            if (c == ".") {
              if (i > e) {
                e = len;
                continue;
              }
            } else if (!caseChanged) {
              if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                caseChanged = true;
                i = -1;
                e = 0;
                continue;
              }
            }
            return parseNumeric(x, String(v), isNum, b);
          }
        }
        isNum = false;
        str = convertBase(str, b, 10, x.s);
        if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
        else e = str.length;
      }
      for (i = 0; str.charCodeAt(i) === 48; i++) ;
      for (len = str.length; str.charCodeAt(--len) === 48; ) ;
      if (str = str.slice(i, ++len)) {
        len -= i;
        if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error(tooManyDigits + x.s * v);
        }
        if ((e = e - i - 1) > MAX_EXP) {
          x.c = x.e = null;
        } else if (e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = e;
          x.c = [];
          i = (e + 1) % LOG_BASE;
          if (e < 0) i += LOG_BASE;
          if (i < len) {
            if (i) x.c.push(+str.slice(0, i));
            for (len -= LOG_BASE; i < len; ) {
              x.c.push(+str.slice(i, i += LOG_BASE));
            }
            i = LOG_BASE - (str = str.slice(i)).length;
          } else {
            i -= len;
          }
          for (; i--; str += "0") ;
          x.c.push(+str);
        }
      } else {
        x.c = [x.e = 0];
      }
    }
    BigNumber2.clone = clone;
    BigNumber2.ROUND_UP = 0;
    BigNumber2.ROUND_DOWN = 1;
    BigNumber2.ROUND_CEIL = 2;
    BigNumber2.ROUND_FLOOR = 3;
    BigNumber2.ROUND_HALF_UP = 4;
    BigNumber2.ROUND_HALF_DOWN = 5;
    BigNumber2.ROUND_HALF_EVEN = 6;
    BigNumber2.ROUND_HALF_CEIL = 7;
    BigNumber2.ROUND_HALF_FLOOR = 8;
    BigNumber2.EUCLID = 9;
    BigNumber2.config = BigNumber2.set = function(obj) {
      var p, v;
      if (obj != null) {
        if (typeof obj == "object") {
          if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            DECIMAL_PLACES = v;
          }
          if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
            v = obj[p];
            intCheck(v, 0, 8, p);
            ROUNDING_MODE = v;
          }
          if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, 0, p);
              intCheck(v[1], 0, MAX, p);
              TO_EXP_NEG = v[0];
              TO_EXP_POS = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
            }
          }
          if (obj.hasOwnProperty(p = "RANGE")) {
            v = obj[p];
            if (v && v.pop) {
              intCheck(v[0], -MAX, -1, p);
              intCheck(v[1], 1, MAX, p);
              MIN_EXP = v[0];
              MAX_EXP = v[1];
            } else {
              intCheck(v, -MAX, MAX, p);
              if (v) {
                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
              } else {
                throw Error(bignumberError + p + " cannot be zero: " + v);
              }
            }
          }
          if (obj.hasOwnProperty(p = "CRYPTO")) {
            v = obj[p];
            if (v === !!v) {
              if (v) {
                if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                  CRYPTO = v;
                } else {
                  CRYPTO = !v;
                  throw Error(bignumberError + "crypto unavailable");
                }
              } else {
                CRYPTO = v;
              }
            } else {
              throw Error(bignumberError + p + " not true or false: " + v);
            }
          }
          if (obj.hasOwnProperty(p = "MODULO_MODE")) {
            v = obj[p];
            intCheck(v, 0, 9, p);
            MODULO_MODE = v;
          }
          if (obj.hasOwnProperty(p = "POW_PRECISION")) {
            v = obj[p];
            intCheck(v, 0, MAX, p);
            POW_PRECISION = v;
          }
          if (obj.hasOwnProperty(p = "FORMAT")) {
            v = obj[p];
            if (typeof v == "object") FORMAT = v;
            else throw Error(bignumberError + p + " not an object: " + v);
          }
          if (obj.hasOwnProperty(p = "ALPHABET")) {
            v = obj[p];
            if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
              alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
              ALPHABET = v;
            } else {
              throw Error(bignumberError + p + " invalid: " + v);
            }
          }
        } else {
          throw Error(bignumberError + "Object expected: " + obj);
        }
      }
      return {
        DECIMAL_PLACES,
        ROUNDING_MODE,
        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
        RANGE: [MIN_EXP, MAX_EXP],
        CRYPTO,
        MODULO_MODE,
        POW_PRECISION,
        FORMAT,
        ALPHABET
      };
    };
    BigNumber2.isBigNumber = function(v) {
      if (!v || v._isBigNumber !== true) return false;
      if (!BigNumber2.DEBUG) return true;
      var i, n, c = v.c, e = v.e, s = v.s;
      out: if ({}.toString.call(c) == "[object Array]") {
        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
          if (c[0] === 0) {
            if (e === 0 && c.length === 1) return true;
            break out;
          }
          i = (e + 1) % LOG_BASE;
          if (i < 1) i += LOG_BASE;
          if (String(c[0]).length == i) {
            for (i = 0; i < c.length; i++) {
              n = c[i];
              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
            }
            if (n !== 0) return true;
          }
        }
      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
        return true;
      }
      throw Error(bignumberError + "Invalid BigNumber: " + v);
    };
    BigNumber2.maximum = BigNumber2.max = function() {
      return maxOrMin(arguments, -1);
    };
    BigNumber2.minimum = BigNumber2.min = function() {
      return maxOrMin(arguments, 1);
    };
    BigNumber2.random = function() {
      var pow2_53 = 9007199254740992;
      var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
        return mathfloor(Math.random() * pow2_53);
      } : function() {
        return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
      };
      return function(dp) {
        var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
        if (dp == null) dp = DECIMAL_PLACES;
        else intCheck(dp, 0, MAX);
        k = mathceil(dp / LOG_BASE);
        if (CRYPTO) {
          if (crypto.getRandomValues) {
            a = crypto.getRandomValues(new Uint32Array(k *= 2));
            for (; i < k; ) {
              v = a[i] * 131072 + (a[i + 1] >>> 11);
              if (v >= 9e15) {
                b = crypto.getRandomValues(new Uint32Array(2));
                a[i] = b[0];
                a[i + 1] = b[1];
              } else {
                c.push(v % 1e14);
                i += 2;
              }
            }
            i = k / 2;
          } else if (crypto.randomBytes) {
            a = crypto.randomBytes(k *= 7);
            for (; i < k; ) {
              v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
              if (v >= 9e15) {
                crypto.randomBytes(7).copy(a, i);
              } else {
                c.push(v % 1e14);
                i += 7;
              }
            }
            i = k / 7;
          } else {
            CRYPTO = false;
            throw Error(bignumberError + "crypto unavailable");
          }
        }
        if (!CRYPTO) {
          for (; i < k; ) {
            v = random53bitInt();
            if (v < 9e15) c[i++] = v % 1e14;
          }
        }
        k = c[--i];
        dp %= LOG_BASE;
        if (k && dp) {
          v = POWS_TEN[LOG_BASE - dp];
          c[i] = mathfloor(k / v) * v;
        }
        for (; c[i] === 0; c.pop(), i--) ;
        if (i < 0) {
          c = [e = 0];
        } else {
          for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
          for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;
          if (i < LOG_BASE) e -= LOG_BASE - i;
        }
        rand.e = e;
        rand.c = c;
        return rand;
      };
    }();
    BigNumber2.sum = function() {
      var i = 1, args = arguments, sum = new BigNumber2(args[0]);
      for (; i < args.length; ) sum = sum.plus(args[i++]);
      return sum;
    };
    convertBase = /* @__PURE__ */ function() {
      var decimal = "0123456789";
      function toBaseOut(str, baseIn, baseOut, alphabet) {
        var j, arr = [0], arrL, i = 0, len = str.length;
        for (; i < len; ) {
          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
          arr[0] += alphabet.indexOf(str.charAt(i++));
          for (j = 0; j < arr.length; j++) {
            if (arr[j] > baseOut - 1) {
              if (arr[j + 1] == null) arr[j + 1] = 0;
              arr[j + 1] += arr[j] / baseOut | 0;
              arr[j] %= baseOut;
            }
          }
        }
        return arr.reverse();
      }
      return function(str, baseIn, baseOut, sign, callerIsToString) {
        var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
        if (i >= 0) {
          k = POW_PRECISION;
          POW_PRECISION = 0;
          str = str.replace(".", "");
          y = new BigNumber2(baseIn);
          x = y.pow(str.length - i);
          POW_PRECISION = k;
          y.c = toBaseOut(
            toFixedPoint(coeffToString(x.c), x.e, "0"),
            10,
            baseOut,
            decimal
          );
          y.e = y.c.length;
        }
        xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
        e = k = xc.length;
        for (; xc[--k] == 0; xc.pop()) ;
        if (!xc[0]) return alphabet.charAt(0);
        if (i < 0) {
          --e;
        } else {
          x.c = xc;
          x.e = e;
          x.s = sign;
          x = div(x, y, dp, rm, baseOut);
          xc = x.c;
          r = x.r;
          e = x.e;
        }
        d = e + dp + 1;
        i = xc[d];
        k = baseOut / 2;
        r = r || d < 0 || xc[d + 1] != null;
        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
        if (d < 1 || !xc[0]) {
          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
        } else {
          xc.length = d;
          if (r) {
            for (--baseOut; ++xc[--d] > baseOut; ) {
              xc[d] = 0;
              if (!d) {
                ++e;
                xc = [1].concat(xc);
              }
            }
          }
          for (k = xc.length; !xc[--k]; ) ;
          for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
          str = toFixedPoint(str, e, alphabet.charAt(0));
        }
        return str;
      };
    }();
    div = /* @__PURE__ */ function() {
      function multiply(x, k, base) {
        var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
        for (x = x.slice(); i--; ) {
          xlo = x[i] % SQRT_BASE;
          xhi = x[i] / SQRT_BASE | 0;
          m = khi * xlo + xhi * klo;
          temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
          x[i] = temp % base;
        }
        if (carry) x = [carry].concat(x);
        return x;
      }
      function compare2(a, b, aL, bL) {
        var i, cmp;
        if (aL != bL) {
          cmp = aL > bL ? 1 : -1;
        } else {
          for (i = cmp = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              cmp = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }
        return cmp;
      }
      function subtract(a, b, aL, base) {
        var i = 0;
        for (; aL--; ) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
      }
      return function(x, y, dp, rm, base) {
        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
        if (!xc || !xc[0] || !yc || !yc[0]) {
          return new BigNumber2(
            // Return NaN if either NaN, or both Infinity or 0.
            !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
              // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
              xc && xc[0] == 0 || !yc ? s * 0 : s / 0
            )
          );
        }
        q = new BigNumber2(s);
        qc = q.c = [];
        e = x.e - y.e;
        s = dp + e + 1;
        if (!base) {
          base = BASE;
          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
          s = s / LOG_BASE | 0;
        }
        for (i = 0; yc[i] == (xc[i] || 0); i++) ;
        if (yc[i] > (xc[i] || 0)) e--;
        if (s < 0) {
          qc.push(1);
          more = true;
        } else {
          xL = xc.length;
          yL = yc.length;
          i = 0;
          s += 2;
          n = mathfloor(base / (yc[0] + 1));
          if (n > 1) {
            yc = multiply(yc, n, base);
            xc = multiply(xc, n, base);
            yL = yc.length;
            xL = xc.length;
          }
          xi = yL;
          rem = xc.slice(0, yL);
          remL = rem.length;
          for (; remL < yL; rem[remL++] = 0) ;
          yz = yc.slice();
          yz = [0].concat(yz);
          yc0 = yc[0];
          if (yc[1] >= base / 2) yc0++;
          do {
            n = 0;
            cmp = compare2(yc, rem, yL, remL);
            if (cmp < 0) {
              rem0 = rem[0];
              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
              n = mathfloor(rem0 / yc0);
              if (n > 1) {
                if (n >= base) n = base - 1;
                prod = multiply(yc, n, base);
                prodL = prod.length;
                remL = rem.length;
                while (compare2(prod, rem, prodL, remL) == 1) {
                  n--;
                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
                  prodL = prod.length;
                  cmp = 1;
                }
              } else {
                if (n == 0) {
                  cmp = n = 1;
                }
                prod = yc.slice();
                prodL = prod.length;
              }
              if (prodL < remL) prod = [0].concat(prod);
              subtract(rem, prod, remL, base);
              remL = rem.length;
              if (cmp == -1) {
                while (compare2(yc, rem, yL, remL) < 1) {
                  n++;
                  subtract(rem, yL < remL ? yz : yc, remL, base);
                  remL = rem.length;
                }
              }
            } else if (cmp === 0) {
              n++;
              rem = [0];
            }
            qc[i++] = n;
            if (rem[0]) {
              rem[remL++] = xc[xi] || 0;
            } else {
              rem = [xc[xi]];
              remL = 1;
            }
          } while ((xi++ < xL || rem[0] != null) && s--);
          more = rem[0] != null;
          if (!qc[0]) qc.splice(0, 1);
        }
        if (base == BASE) {
          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
        } else {
          q.e = e;
          q.r = +more;
        }
        return q;
      };
    }();
    function format(n, i, rm, id) {
      var c0, e, ne, len, str;
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      if (!n.c) return n.toString();
      c0 = n.c[0];
      ne = n.e;
      if (i == null) {
        str = coeffToString(n.c);
        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
      } else {
        n = round(new BigNumber2(n), i, rm);
        e = n.e;
        str = coeffToString(n.c);
        len = str.length;
        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
          for (; len < i; str += "0", len++) ;
          str = toExponential(str, e);
        } else {
          i -= ne;
          str = toFixedPoint(str, e, "0");
          if (e + 1 > len) {
            if (--i > 0) for (str += "."; i--; str += "0") ;
          } else {
            i += e - len;
            if (i > 0) {
              if (e + 1 == len) str += ".";
              for (; i--; str += "0") ;
            }
          }
        }
      }
      return n.s < 0 && c0 ? "-" + str : str;
    }
    function maxOrMin(args, n) {
      var k, y, i = 1, x = new BigNumber2(args[0]);
      for (; i < args.length; i++) {
        y = new BigNumber2(args[i]);
        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
          x = y;
        }
      }
      return x;
    }
    function normalise(n, c, e) {
      var i = 1, j = c.length;
      for (; !c[--j]; c.pop()) ;
      for (j = c[0]; j >= 10; j /= 10, i++) ;
      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
        n.c = n.e = null;
      } else if (e < MIN_EXP) {
        n.c = [n.e = 0];
      } else {
        n.e = e;
        n.c = c;
      }
      return n;
    }
    parseNumeric = /* @__PURE__ */ function() {
      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
      return function(x, str, isNum, b) {
        var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
        if (isInfinityOrNaN.test(s)) {
          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
        } else {
          if (!isNum) {
            s = s.replace(basePrefix, function(m, p1, p2) {
              base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
              return !b || b == base ? p1 : m;
            });
            if (b) {
              base = b;
              s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
            }
            if (str != s) return new BigNumber2(s, base);
          }
          if (BigNumber2.DEBUG) {
            throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
          }
          x.s = null;
        }
        x.c = x.e = null;
      };
    }();
    function round(x, sd, rm, r) {
      var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
      if (xc) {
        out: {
          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
          i = sd - d;
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            n = xc[ni = 0];
            rd = mathfloor(n / pows10[d - j - 1] % 10);
          } else {
            ni = mathceil((i + 1) / LOG_BASE);
            if (ni >= xc.length) {
              if (r) {
                for (; xc.length <= ni; xc.push(0)) ;
                n = rd = 0;
                d = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              n = k = xc[ni];
              for (d = 1; k >= 10; k /= 10, d++) ;
              i %= LOG_BASE;
              j = i - LOG_BASE + d;
              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
            }
          }
          r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
          xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
          r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
          (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xc[0]) {
            xc.length = 0;
            if (r) {
              sd -= x.e + 1;
              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
              x.e = -sd || 0;
            } else {
              xc[0] = x.e = 0;
            }
            return x;
          }
          if (i == 0) {
            xc.length = ni;
            k = 1;
            ni--;
          } else {
            xc.length = ni + 1;
            k = pows10[LOG_BASE - i];
            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
          }
          if (r) {
            for (; ; ) {
              if (ni == 0) {
                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                j = xc[0] += k;
                for (k = 1; j >= 10; j /= 10, k++) ;
                if (i != k) {
                  x.e++;
                  if (xc[0] == BASE) xc[0] = 1;
                }
                break;
              } else {
                xc[ni] += k;
                if (xc[ni] != BASE) break;
                xc[ni--] = 0;
                k = 1;
              }
            }
          }
          for (i = xc.length; xc[--i] === 0; xc.pop()) ;
        }
        if (x.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (x.e < MIN_EXP) {
          x.c = [x.e = 0];
        }
      }
      return x;
    }
    function valueOf(n) {
      var str, e = n.e;
      if (e === null) return n.toString();
      str = coeffToString(n.c);
      str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
      return n.s < 0 ? "-" + str : str;
    }
    P.absoluteValue = P.abs = function() {
      var x = new BigNumber2(this);
      if (x.s < 0) x.s = 1;
      return x;
    };
    P.comparedTo = function(y, b) {
      return compare(this, new BigNumber2(y, b));
    };
    P.decimalPlaces = P.dp = function(dp, rm) {
      var c, n, v, x = this;
      if (dp != null) {
        intCheck(dp, 0, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), dp + x.e + 1, rm);
      }
      if (!(c = x.c)) return null;
      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
      if (n < 0) n = 0;
      return n;
    };
    P.dividedBy = P.div = function(y, b) {
      return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
    };
    P.dividedToIntegerBy = P.idiv = function(y, b) {
      return div(this, new BigNumber2(y, b), 0, 1);
    };
    P.exponentiatedBy = P.pow = function(n, m) {
      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
      n = new BigNumber2(n);
      if (n.c && !n.isInteger()) {
        throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
      }
      if (m != null) m = new BigNumber2(m);
      nIsBig = n.e > 14;
      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
        y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
        return m ? y.mod(m) : y;
      }
      nIsNeg = n.s < 0;
      if (m) {
        if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
        isModExp = !nIsNeg && x.isInteger() && m.isInteger();
        if (isModExp) x = x.mod(m);
      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
        k = x.s < 0 && isOdd(n) ? -0 : 0;
        if (x.e > -1) k = 1 / k;
        return new BigNumber2(nIsNeg ? 1 / k : k);
      } else if (POW_PRECISION) {
        k = mathceil(POW_PRECISION / LOG_BASE + 2);
      }
      if (nIsBig) {
        half = new BigNumber2(0.5);
        if (nIsNeg) n.s = 1;
        nIsOdd = isOdd(n);
      } else {
        i = Math.abs(+valueOf(n));
        nIsOdd = i % 2;
      }
      y = new BigNumber2(ONE);
      for (; ; ) {
        if (nIsOdd) {
          y = y.times(x);
          if (!y.c) break;
          if (k) {
            if (y.c.length > k) y.c.length = k;
          } else if (isModExp) {
            y = y.mod(m);
          }
        }
        if (i) {
          i = mathfloor(i / 2);
          if (i === 0) break;
          nIsOdd = i % 2;
        } else {
          n = n.times(half);
          round(n, n.e + 1, 1);
          if (n.e > 14) {
            nIsOdd = isOdd(n);
          } else {
            i = +valueOf(n);
            if (i === 0) break;
            nIsOdd = i % 2;
          }
        }
        x = x.times(x);
        if (k) {
          if (x.c && x.c.length > k) x.c.length = k;
        } else if (isModExp) {
          x = x.mod(m);
        }
      }
      if (isModExp) return y;
      if (nIsNeg) y = ONE.div(y);
      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
    };
    P.integerValue = function(rm) {
      var n = new BigNumber2(this);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(n, n.e + 1, rm);
    };
    P.isEqualTo = P.eq = function(y, b) {
      return compare(this, new BigNumber2(y, b)) === 0;
    };
    P.isFinite = function() {
      return !!this.c;
    };
    P.isGreaterThan = P.gt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) > 0;
    };
    P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
    };
    P.isInteger = function() {
      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
    };
    P.isLessThan = P.lt = function(y, b) {
      return compare(this, new BigNumber2(y, b)) < 0;
    };
    P.isLessThanOrEqualTo = P.lte = function(y, b) {
      return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = function() {
      return this.s < 0;
    };
    P.isPositive = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.c && this.c[0] == 0;
    };
    P.minus = function(y, b) {
      var i, j, t, xLTy, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
        if (!xc[0] || !yc[0]) {
          return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
            // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
            ROUNDING_MODE == 3 ? -0 : 0
          ));
        }
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (xLTy = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }
        t.reverse();
        for (b = a; b--; t.push(0)) ;
        t.reverse();
      } else {
        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xLTy = xc[b] < yc[b];
            break;
          }
        }
      }
      if (xLTy) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }
      b = (j = yc.length) - (i = xc.length);
      if (b > 0) for (; b--; xc[i++] = 0) ;
      b = BASE - 1;
      for (; j > a; ) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; xc[i] = b) ;
          --xc[i];
          xc[j] += BASE;
        }
        xc[j] -= yc[j];
      }
      for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
      if (!xc[0]) {
        y.s = ROUNDING_MODE == 3 ? -1 : 1;
        y.c = [y.e = 0];
        return y;
      }
      return normalise(y, xc, ye);
    };
    P.modulo = P.mod = function(y, b) {
      var q, s, x = this;
      y = new BigNumber2(y, b);
      if (!x.c || !y.s || y.c && !y.c[0]) {
        return new BigNumber2(NaN);
      } else if (!y.c || x.c && !x.c[0]) {
        return new BigNumber2(x);
      }
      if (MODULO_MODE == 9) {
        s = y.s;
        y.s = 1;
        q = div(x, y, 0, 3);
        y.s = s;
        q.s *= s;
      } else {
        q = div(x, y, 0, MODULO_MODE);
      }
      y = x.minus(q.times(y));
      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
      return y;
    };
    P.multipliedBy = P.times = function(y, b) {
      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
      if (!xc || !yc || !xc[0] || !yc[0]) {
        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
          y.c = y.e = y.s = null;
        } else {
          y.s *= x.s;
          if (!xc || !yc) {
            y.c = y.e = null;
          } else {
            y.c = [0];
            y.e = 0;
          }
        }
        return y;
      }
      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
      y.s *= x.s;
      xcL = xc.length;
      ycL = yc.length;
      if (xcL < ycL) {
        zc = xc;
        xc = yc;
        yc = zc;
        i = xcL;
        xcL = ycL;
        ycL = i;
      }
      for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
      base = BASE;
      sqrtBase = SQRT_BASE;
      for (i = ycL; --i >= 0; ) {
        c = 0;
        ylo = yc[i] % sqrtBase;
        yhi = yc[i] / sqrtBase | 0;
        for (k = xcL, j = i + k; j > i; ) {
          xlo = xc[--k] % sqrtBase;
          xhi = xc[k] / sqrtBase | 0;
          m = yhi * xlo + xhi * ylo;
          xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
          zc[j--] = xlo % base;
        }
        zc[j] = c;
      }
      if (c) {
        ++e;
      } else {
        zc.splice(0, 1);
      }
      return normalise(y, zc, e);
    };
    P.negated = function() {
      var x = new BigNumber2(this);
      x.s = -x.s || null;
      return x;
    };
    P.plus = function(y, b) {
      var t, x = this, a = x.s;
      y = new BigNumber2(y, b);
      b = y.s;
      if (!a || !b) return new BigNumber2(NaN);
      if (a != b) {
        y.s = -b;
        return x.minus(y);
      }
      var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
      if (!xe || !ye) {
        if (!xc || !yc) return new BigNumber2(a / 0);
        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
      }
      xe = bitFloor(xe);
      ye = bitFloor(ye);
      xc = xc.slice();
      if (a = xe - ye) {
        if (a > 0) {
          ye = xe;
          t = yc;
        } else {
          a = -a;
          t = xc;
        }
        t.reverse();
        for (; a--; t.push(0)) ;
        t.reverse();
      }
      a = xc.length;
      b = yc.length;
      if (a - b < 0) {
        t = yc;
        yc = xc;
        xc = t;
        b = a;
      }
      for (a = 0; b; ) {
        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
      }
      if (a) {
        xc = [a].concat(xc);
        ++ye;
      }
      return normalise(y, xc, ye);
    };
    P.precision = P.sd = function(sd, rm) {
      var c, n, v, x = this;
      if (sd != null && sd !== !!sd) {
        intCheck(sd, 1, MAX);
        if (rm == null) rm = ROUNDING_MODE;
        else intCheck(rm, 0, 8);
        return round(new BigNumber2(x), sd, rm);
      }
      if (!(c = x.c)) return null;
      v = c.length - 1;
      n = v * LOG_BASE + 1;
      if (v = c[v]) {
        for (; v % 10 == 0; v /= 10, n--) ;
        for (v = c[0]; v >= 10; v /= 10, n++) ;
      }
      if (sd && x.e + 1 > n) n = x.e + 1;
      return n;
    };
    P.shiftedBy = function(k) {
      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
      return this.times("1e" + k);
    };
    P.squareRoot = P.sqrt = function() {
      var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
      if (s !== 1 || !c || !c[0]) {
        return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
      }
      s = Math.sqrt(+valueOf(x));
      if (s == 0 || s == 1 / 0) {
        n = coeffToString(c);
        if ((n.length + e) % 2 == 0) n += "0";
        s = Math.sqrt(+n);
        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r = new BigNumber2(n);
      } else {
        r = new BigNumber2(s + "");
      }
      if (r.c[0]) {
        e = r.e;
        s = e + dp;
        if (s < 3) s = 0;
        for (; ; ) {
          t = r;
          r = half.times(t.plus(div(x, t, dp, 1)));
          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
            if (r.e < e) --s;
            n = n.slice(s - 3, s + 1);
            if (n == "9999" || !rep && n == "4999") {
              if (!rep) {
                round(t, t.e + DECIMAL_PLACES + 2, 0);
                if (t.times(t).eq(x)) {
                  r = t;
                  break;
                }
              }
              dp += 4;
              s += 4;
              rep = 1;
            } else {
              if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                round(r, r.e + DECIMAL_PLACES + 2, 1);
                m = !r.times(r).eq(x);
              }
              break;
            }
          }
        }
      }
      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
    };
    P.toExponential = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp++;
      }
      return format(this, dp, rm, 1);
    };
    P.toFixed = function(dp, rm) {
      if (dp != null) {
        intCheck(dp, 0, MAX);
        dp = dp + this.e + 1;
      }
      return format(this, dp, rm);
    };
    P.toFormat = function(dp, rm, format2) {
      var str, x = this;
      if (format2 == null) {
        if (dp != null && rm && typeof rm == "object") {
          format2 = rm;
          rm = null;
        } else if (dp && typeof dp == "object") {
          format2 = dp;
          dp = rm = null;
        } else {
          format2 = FORMAT;
        }
      } else if (typeof format2 != "object") {
        throw Error(bignumberError + "Argument not an object: " + format2);
      }
      str = x.toFixed(dp, rm);
      if (x.c) {
        var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
        if (g2) {
          i = g1;
          g1 = g2;
          g2 = i;
          len -= i;
        }
        if (g1 > 0 && len > 0) {
          i = len % g1 || g1;
          intPart = intDigits.substr(0, i);
          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
          if (isNeg) intPart = "-" + intPart;
        }
        str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
          new RegExp("\\d{" + g2 + "}\\B", "g"),
          "$&" + (format2.fractionGroupSeparator || "")
        ) : fractionPart) : intPart;
      }
      return (format2.prefix || "") + str + (format2.suffix || "");
    };
    P.toFraction = function(md) {
      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
      if (md != null) {
        n = new BigNumber2(md);
        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
          throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
        }
      }
      if (!xc) return new BigNumber2(x);
      d = new BigNumber2(ONE);
      n1 = d0 = new BigNumber2(ONE);
      d1 = n0 = new BigNumber2(ONE);
      s = coeffToString(xc);
      e = d.e = s.length - x.e - 1;
      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
      md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
      exp = MAX_EXP;
      MAX_EXP = 1 / 0;
      n = new BigNumber2(s);
      n0.c[0] = 0;
      for (; ; ) {
        q = div(n, d, 0, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.comparedTo(md) == 1) break;
        d0 = d1;
        d1 = d2;
        n1 = n0.plus(q.times(d2 = n1));
        n0 = d2;
        d = n.minus(q.times(d2 = d));
        n = d2;
      }
      d2 = div(md.minus(d0), d1, 0, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      e = e * 2;
      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
      ) < 1 ? [n1, d1] : [n0, d0];
      MAX_EXP = exp;
      return r;
    };
    P.toNumber = function() {
      return +valueOf(this);
    };
    P.toPrecision = function(sd, rm) {
      if (sd != null) intCheck(sd, 1, MAX);
      return format(this, sd, rm, 2);
    };
    P.toString = function(b) {
      var str, n = this, s = n.s, e = n.e;
      if (e === null) {
        if (s) {
          str = "Infinity";
          if (s < 0) str = "-" + str;
        } else {
          str = "NaN";
        }
      } else {
        if (b == null) {
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
          n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
          str = toFixedPoint(coeffToString(n.c), n.e, "0");
        } else {
          intCheck(b, 2, ALPHABET.length, "Base");
          str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
        }
        if (s < 0 && n.c[0]) str = "-" + str;
      }
      return str;
    };
    P.valueOf = P.toJSON = function() {
      return valueOf(this);
    };
    P._isBigNumber = true;
    P[Symbol.toStringTag] = "BigNumber";
    P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
    if (configObject != null) BigNumber2.set(configObject);
    return BigNumber2;
  }
  function bitFloor(n) {
    var i = n | 0;
    return n > 0 || n === i ? i : i - 1;
  }
  function coeffToString(a) {
    var s, z3, i = 1, j = a.length, r = a[0] + "";
    for (; i < j; ) {
      s = a[i++] + "";
      z3 = LOG_BASE - s.length;
      for (; z3--; s = "0" + s) ;
      r += s;
    }
    for (j = r.length; r.charCodeAt(--j) === 48; ) ;
    return r.slice(0, j + 1 || 1);
  }
  function compare(x, y) {
    var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
    if (!i || !j) return null;
    a = xc && !xc[0];
    b = yc && !yc[0];
    if (a || b) return a ? b ? 0 : -j : i;
    if (i != j) return i;
    a = i < 0;
    b = k == l;
    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
    if (!b) return k > l ^ a ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
    return k == l ? 0 : k > l ^ a ? 1 : -1;
  }
  function intCheck(n, min, max, name) {
    if (n < min || n > max || n !== mathfloor(n)) {
      throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
    }
  }
  function isOdd(n) {
    var k = n.c.length - 1;
    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
  }
  function toExponential(str, e) {
    return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
  }
  function toFixedPoint(str, e, z3) {
    var len, zs;
    if (e < 0) {
      for (zs = z3 + "."; ++e; zs += z3) ;
      str = zs + str;
    } else {
      len = str.length;
      if (++e > len) {
        for (zs = z3, e -= len; --e; zs += z3) ;
        str += zs;
      } else if (e < len) {
        str = str.slice(0, e) + "." + str.slice(e);
      }
    }
    return str;
  }
  var BigNumber = clone();
  var bignumber_default = BigNumber;
  
  // ../../node_modules/viem/_esm/utils/getAction.js
  function getAction(client, actionFn, name) {
    const action_implicit = client[actionFn.name];
    if (typeof action_implicit === "function")
      return action_implicit;
    const action_explicit = client[name];
    if (typeof action_explicit === "function")
      return action_explicit;
    return (params) => actionFn(client, params);
  }
  
  // ../../node_modules/viem/_esm/errors/log.js
  var FilterTypeNotSupportedError = class extends BaseError {
    constructor(type) {
      super(`Filter type "${type}" is not supported.`, {
        name: "FilterTypeNotSupportedError"
      });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/abi/encodeEventTopics.js
  var docsPath = "/docs/contract/encodeEventTopics";
  function encodeEventTopics(parameters) {
    const { abi: abi2, eventName, args } = parameters;
    let abiItem = abi2[0];
    if (eventName) {
      const item = getAbiItem({ abi: abi2, name: eventName });
      if (!item)
        throw new AbiEventNotFoundError(eventName, { docsPath });
      abiItem = item;
    }
    if (abiItem.type !== "event")
      throw new AbiEventNotFoundError(void 0, { docsPath });
    const definition = formatAbiItem(abiItem);
    const signature = toEventSelector(definition);
    let topics = [];
    if (args && "inputs" in abiItem) {
      const indexedInputs = abiItem.inputs?.filter((param) => "indexed" in param && param.indexed);
      const args_ = Array.isArray(args) ? args : Object.values(args).length > 0 ? indexedInputs?.map((x) => args[x.name]) ?? [] : [];
      if (args_.length > 0) {
        topics = indexedInputs?.map((param, i) => {
          if (Array.isArray(args_[i]))
            return args_[i].map((_, j) => encodeArg({ param, value: args_[i][j] }));
          return args_[i] ? encodeArg({ param, value: args_[i] }) : null;
        }) ?? [];
      }
    }
    return [signature, ...topics];
  }
  function encodeArg({ param, value }) {
    if (param.type === "string" || param.type === "bytes")
      return keccak256(toBytes(value));
    if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      throw new FilterTypeNotSupportedError(param.type);
    return encodeAbiParameters([param], [value]);
  }
  
  // ../../node_modules/viem/_esm/utils/filters/createFilterRequestScope.js
  function createFilterRequestScope(client, { method }) {
    const requestMap = {};
    if (client.transport.type === "fallback")
      client.transport.onResponse?.(({ method: method_, response: id, status, transport }) => {
        if (status === "success" && method === method_)
          requestMap[id] = transport.request;
      });
    return (id) => requestMap[id] || client.request;
  }
  
  // ../../node_modules/viem/_esm/actions/public/createContractEventFilter.js
  async function createContractEventFilter(client, parameters) {
    const { address, abi: abi2, args, eventName, fromBlock, strict, toBlock } = parameters;
    const getRequest = createFilterRequestScope(client, {
      method: "eth_newFilter"
    });
    const topics = eventName ? encodeEventTopics({
      abi: abi2,
      args,
      eventName
    }) : void 0;
    const id = await client.request({
      method: "eth_newFilter",
      params: [
        {
          address,
          fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
          toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock,
          topics
        }
      ]
    });
    return {
      abi: abi2,
      args,
      eventName,
      id,
      request: getRequest(id),
      strict: Boolean(strict),
      type: "event"
    };
  }
  
  // ../../node_modules/viem/_esm/utils/errors/getContractError.js
  var EXECUTION_REVERTED_ERROR_CODE = 3;
  function getContractError(err, { abi: abi2, address, args, docsPath: docsPath3, functionName, sender }) {
    const error = err instanceof RawContractError ? err : err instanceof BaseError ? err.walk((err2) => "data" in err2) || err.walk() : {};
    const { code, data, details, message, shortMessage } = error;
    const cause = (() => {
      if (err instanceof AbiDecodingZeroDataError)
        return new ContractFunctionZeroDataError({ functionName });
      if ([EXECUTION_REVERTED_ERROR_CODE, InternalRpcError.code].includes(code) && (data || details || message || shortMessage)) {
        return new ContractFunctionRevertedError({
          abi: abi2,
          data: typeof data === "object" ? data.data : data,
          functionName,
          message: error instanceof RpcRequestError ? details : shortMessage ?? message
        });
      }
      return err;
    })();
    return new ContractFunctionExecutionError(cause, {
      abi: abi2,
      args,
      contractAddress: address,
      docsPath: docsPath3,
      functionName,
      sender
    });
  }
  
  // ../../node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
  function publicKeyToAddress(publicKey) {
    const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
    return checksumAddress(`0x${address}`);
  }
  
  // ../../node_modules/viem/_esm/utils/signature/recoverPublicKey.js
  async function recoverPublicKey({ hash, signature }) {
    const hashHex = isHex(hash) ? hash : toHex(hash);
    const { secp256k1: secp256k12 } = await import("./secp256k1-QUTB2QC2.js");
    const signature_ = (() => {
      if (typeof signature === "object" && "r" in signature && "s" in signature) {
        const { r, s, v, yParity } = signature;
        const yParityOrV2 = Number(yParity ?? v);
        const recoveryBit2 = toRecoveryBit(yParityOrV2);
        return new secp256k12.Signature(hexToBigInt(r), hexToBigInt(s)).addRecoveryBit(recoveryBit2);
      }
      const signatureHex = isHex(signature) ? signature : toHex(signature);
      const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
      const recoveryBit = toRecoveryBit(yParityOrV);
      return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
    })();
    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
    return `0x${publicKey}`;
  }
  function toRecoveryBit(yParityOrV) {
    if (yParityOrV === 0 || yParityOrV === 1)
      return yParityOrV;
    if (yParityOrV === 27)
      return 0;
    if (yParityOrV === 28)
      return 1;
    throw new Error("Invalid yParityOrV value");
  }
  
  // ../../node_modules/viem/_esm/utils/signature/recoverAddress.js
  async function recoverAddress({ hash, signature }) {
    return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
  }
  
  // ../../node_modules/viem/_esm/utils/encoding/toRlp.js
  function toRlp(bytes, to = "hex") {
    const encodable = getEncodable(bytes);
    const cursor = createCursor(new Uint8Array(encodable.length));
    encodable.encode(cursor);
    if (to === "hex")
      return bytesToHex(cursor.bytes);
    return cursor.bytes;
  }
  function getEncodable(bytes) {
    if (Array.isArray(bytes))
      return getEncodableList(bytes.map((x) => getEncodable(x)));
    return getEncodableBytes(bytes);
  }
  function getEncodableList(list) {
    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);
    const sizeOfBodyLength = getSizeOfLength(bodyLength);
    const length = (() => {
      if (bodyLength <= 55)
        return 1 + bodyLength;
      return 1 + sizeOfBodyLength + bodyLength;
    })();
    return {
      length,
      encode(cursor) {
        if (bodyLength <= 55) {
          cursor.pushByte(192 + bodyLength);
        } else {
          cursor.pushByte(192 + 55 + sizeOfBodyLength);
          if (sizeOfBodyLength === 1)
            cursor.pushUint8(bodyLength);
          else if (sizeOfBodyLength === 2)
            cursor.pushUint16(bodyLength);
          else if (sizeOfBodyLength === 3)
            cursor.pushUint24(bodyLength);
          else
            cursor.pushUint32(bodyLength);
        }
        for (const { encode } of list) {
          encode(cursor);
        }
      }
    };
  }
  function getEncodableBytes(bytesOrHex) {
    const bytes = typeof bytesOrHex === "string" ? hexToBytes(bytesOrHex) : bytesOrHex;
    const sizeOfBytesLength = getSizeOfLength(bytes.length);
    const length = (() => {
      if (bytes.length === 1 && bytes[0] < 128)
        return 1;
      if (bytes.length <= 55)
        return 1 + bytes.length;
      return 1 + sizeOfBytesLength + bytes.length;
    })();
    return {
      length,
      encode(cursor) {
        if (bytes.length === 1 && bytes[0] < 128) {
          cursor.pushBytes(bytes);
        } else if (bytes.length <= 55) {
          cursor.pushByte(128 + bytes.length);
          cursor.pushBytes(bytes);
        } else {
          cursor.pushByte(128 + 55 + sizeOfBytesLength);
          if (sizeOfBytesLength === 1)
            cursor.pushUint8(bytes.length);
          else if (sizeOfBytesLength === 2)
            cursor.pushUint16(bytes.length);
          else if (sizeOfBytesLength === 3)
            cursor.pushUint24(bytes.length);
          else
            cursor.pushUint32(bytes.length);
          cursor.pushBytes(bytes);
        }
      }
    };
  }
  function getSizeOfLength(length) {
    if (length < 2 ** 8)
      return 1;
    if (length < 2 ** 16)
      return 2;
    if (length < 2 ** 24)
      return 3;
    if (length < 2 ** 32)
      return 4;
    throw new BaseError("Length is too large.");
  }
  
  // ../../node_modules/viem/_esm/experimental/eip7702/utils/hashAuthorization.js
  function hashAuthorization(parameters) {
    const { chainId, contractAddress, nonce, to } = parameters;
    const hash = keccak256(concatHex([
      "0x05",
      toRlp([
        chainId ? numberToHex(chainId) : "0x",
        contractAddress,
        nonce ? numberToHex(nonce) : "0x"
      ])
    ]));
    if (to === "bytes")
      return hexToBytes(hash);
    return hash;
  }
  
  // ../../node_modules/viem/_esm/experimental/eip7702/utils/recoverAuthorizationAddress.js
  async function recoverAuthorizationAddress(parameters) {
    const { authorization, signature } = parameters;
    return recoverAddress({
      hash: hashAuthorization(authorization),
      signature: signature ?? authorization
    });
  }
  
  // ../../node_modules/viem/_esm/errors/estimateGas.js
  var EstimateGasExecutionError = class extends BaseError {
    constructor(cause, { account, docsPath: docsPath3, chain, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to, value }) {
      const prettyArgs = prettyPrint({
        from: account?.address,
        to,
        value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency?.symbol || "ETH"}`,
        data,
        gas,
        gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
        maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
        maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
        nonce
      });
      super(cause.shortMessage, {
        cause,
        docsPath: docsPath3,
        metaMessages: [
          ...cause.metaMessages ? [...cause.metaMessages, " "] : [],
          "Estimate Gas Arguments:",
          prettyArgs
        ].filter(Boolean),
        name: "EstimateGasExecutionError"
      });
      Object.defineProperty(this, "cause", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: void 0
      });
      this.cause = cause;
    }
  };
  
  // ../../node_modules/viem/_esm/utils/errors/getEstimateGasError.js
  function getEstimateGasError(err, { docsPath: docsPath3, ...args }) {
    const cause = (() => {
      const cause2 = getNodeError(err, args);
      if (cause2 instanceof UnknownNodeError)
        return err;
      return cause2;
    })();
    return new EstimateGasExecutionError(cause, {
      docsPath: docsPath3,
      ...args
    });
  }
  
  // ../../node_modules/viem/_esm/errors/fee.js
  var BaseFeeScalarError = class extends BaseError {
    constructor() {
      super("`baseFeeMultiplier` must be greater than 1.", {
        name: "BaseFeeScalarError"
      });
    }
  };
  var Eip1559FeesNotSupportedError = class extends BaseError {
    constructor() {
      super("Chain does not support EIP-1559 fees.", {
        name: "Eip1559FeesNotSupportedError"
      });
    }
  };
  var MaxFeePerGasTooLowError = class extends BaseError {
    constructor({ maxPriorityFeePerGas }) {
      super(`\`maxFeePerGas\` cannot be less than the \`maxPriorityFeePerGas\` (${formatGwei(maxPriorityFeePerGas)} gwei).`, { name: "MaxFeePerGasTooLowError" });
    }
  };
  
  // ../../node_modules/viem/_esm/errors/block.js
  var BlockNotFoundError = class extends BaseError {
    constructor({ blockHash, blockNumber }) {
      let identifier = "Block";
      if (blockHash)
        identifier = `Block at hash "${blockHash}"`;
      if (blockNumber)
        identifier = `Block at number "${blockNumber}"`;
      super(`${identifier} could not be found.`, { name: "BlockNotFoundError" });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/formatters/transaction.js
  var transactionType = {
    "0x0": "legacy",
    "0x1": "eip2930",
    "0x2": "eip1559",
    "0x3": "eip4844",
    "0x4": "eip7702"
  };
  function formatTransaction(transaction) {
    const transaction_ = {
      ...transaction,
      blockHash: transaction.blockHash ? transaction.blockHash : null,
      blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
      chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
      gas: transaction.gas ? BigInt(transaction.gas) : void 0,
      gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
      maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
      maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
      maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
      nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
      to: transaction.to ? transaction.to : null,
      transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
      type: transaction.type ? transactionType[transaction.type] : void 0,
      typeHex: transaction.type ? transaction.type : void 0,
      value: transaction.value ? BigInt(transaction.value) : void 0,
      v: transaction.v ? BigInt(transaction.v) : void 0
    };
    if (transaction.authorizationList)
      transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
    transaction_.yParity = (() => {
      if (transaction.yParity)
        return Number(transaction.yParity);
      if (typeof transaction_.v === "bigint") {
        if (transaction_.v === 0n || transaction_.v === 27n)
          return 0;
        if (transaction_.v === 1n || transaction_.v === 28n)
          return 1;
        if (transaction_.v >= 35n)
          return transaction_.v % 2n === 0n ? 1 : 0;
      }
      return void 0;
    })();
    if (transaction_.type === "legacy") {
      delete transaction_.accessList;
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
      delete transaction_.yParity;
    }
    if (transaction_.type === "eip2930") {
      delete transaction_.maxFeePerBlobGas;
      delete transaction_.maxFeePerGas;
      delete transaction_.maxPriorityFeePerGas;
    }
    if (transaction_.type === "eip1559") {
      delete transaction_.maxFeePerBlobGas;
    }
    return transaction_;
  }
  function formatAuthorizationList(authorizationList) {
    return authorizationList.map((authorization) => ({
      contractAddress: authorization.address,
      chainId: Number(authorization.chainId),
      nonce: Number(authorization.nonce),
      r: authorization.r,
      s: authorization.s,
      yParity: Number(authorization.yParity)
    }));
  }
  
  // ../../node_modules/viem/_esm/utils/formatters/block.js
  function formatBlock(block) {
    const transactions = (block.transactions ?? []).map((transaction) => {
      if (typeof transaction === "string")
        return transaction;
      return formatTransaction(transaction);
    });
    return {
      ...block,
      baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
      blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
      difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
      excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
      gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
      gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
      hash: block.hash ? block.hash : null,
      logsBloom: block.logsBloom ? block.logsBloom : null,
      nonce: block.nonce ? block.nonce : null,
      number: block.number ? BigInt(block.number) : null,
      size: block.size ? BigInt(block.size) : void 0,
      timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
      transactions,
      totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getBlock.js
  async function getBlock(client, { blockHash, blockNumber, blockTag: blockTag_, includeTransactions: includeTransactions_ } = {}) {
    const blockTag = blockTag_ ?? "latest";
    const includeTransactions = includeTransactions_ ?? false;
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let block = null;
    if (blockHash) {
      block = await client.request({
        method: "eth_getBlockByHash",
        params: [blockHash, includeTransactions]
      }, { dedupe: true });
    } else {
      block = await client.request({
        method: "eth_getBlockByNumber",
        params: [blockNumberHex || blockTag, includeTransactions]
      }, { dedupe: Boolean(blockNumberHex) });
    }
    if (!block)
      throw new BlockNotFoundError({ blockHash, blockNumber });
    const format = client.chain?.formatters?.block?.format || formatBlock;
    return format(block);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getGasPrice.js
  async function getGasPrice(client) {
    const gasPrice = await client.request({
      method: "eth_gasPrice"
    });
    return BigInt(gasPrice);
  }
  
  // ../../node_modules/viem/_esm/actions/public/estimateMaxPriorityFeePerGas.js
  async function estimateMaxPriorityFeePerGas(client, args) {
    return internal_estimateMaxPriorityFeePerGas(client, args);
  }
  async function internal_estimateMaxPriorityFeePerGas(client, args) {
    const { block: block_, chain = client.chain, request } = args || {};
    try {
      const maxPriorityFeePerGas = chain?.fees?.maxPriorityFeePerGas ?? chain?.fees?.defaultPriorityFee;
      if (typeof maxPriorityFeePerGas === "function") {
        const block = block_ || await getAction(client, getBlock, "getBlock")({});
        const maxPriorityFeePerGas_ = await maxPriorityFeePerGas({
          block,
          client,
          request
        });
        if (maxPriorityFeePerGas_ === null)
          throw new Error();
        return maxPriorityFeePerGas_;
      }
      if (typeof maxPriorityFeePerGas !== "undefined")
        return maxPriorityFeePerGas;
      const maxPriorityFeePerGasHex = await client.request({
        method: "eth_maxPriorityFeePerGas"
      });
      return hexToBigInt(maxPriorityFeePerGasHex);
    } catch {
      const [block, gasPrice] = await Promise.all([
        block_ ? Promise.resolve(block_) : getAction(client, getBlock, "getBlock")({}),
        getAction(client, getGasPrice, "getGasPrice")({})
      ]);
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError();
      const maxPriorityFeePerGas = gasPrice - block.baseFeePerGas;
      if (maxPriorityFeePerGas < 0n)
        return 0n;
      return maxPriorityFeePerGas;
    }
  }
  
  // ../../node_modules/viem/_esm/actions/public/estimateFeesPerGas.js
  async function estimateFeesPerGas(client, args) {
    return internal_estimateFeesPerGas(client, args);
  }
  async function internal_estimateFeesPerGas(client, args) {
    const { block: block_, chain = client.chain, request, type = "eip1559" } = args || {};
    const baseFeeMultiplier = await (async () => {
      if (typeof chain?.fees?.baseFeeMultiplier === "function")
        return chain.fees.baseFeeMultiplier({
          block: block_,
          client,
          request
        });
      return chain?.fees?.baseFeeMultiplier ?? 1.2;
    })();
    if (baseFeeMultiplier < 1)
      throw new BaseFeeScalarError();
    const decimals = baseFeeMultiplier.toString().split(".")[1]?.length ?? 0;
    const denominator = 10 ** decimals;
    const multiply = (base) => base * BigInt(Math.ceil(baseFeeMultiplier * denominator)) / BigInt(denominator);
    const block = block_ ? block_ : await getAction(client, getBlock, "getBlock")({});
    if (typeof chain?.fees?.estimateFeesPerGas === "function") {
      const fees = await chain.fees.estimateFeesPerGas({
        block: block_,
        client,
        multiply,
        request,
        type
      });
      if (fees !== null)
        return fees;
    }
    if (type === "eip1559") {
      if (typeof block.baseFeePerGas !== "bigint")
        throw new Eip1559FeesNotSupportedError();
      const maxPriorityFeePerGas = typeof request?.maxPriorityFeePerGas === "bigint" ? request.maxPriorityFeePerGas : await internal_estimateMaxPriorityFeePerGas(client, {
        block,
        chain,
        request
      });
      const baseFeePerGas = multiply(block.baseFeePerGas);
      const maxFeePerGas = request?.maxFeePerGas ?? baseFeePerGas + maxPriorityFeePerGas;
      return {
        maxFeePerGas,
        maxPriorityFeePerGas
      };
    }
    const gasPrice = request?.gasPrice ?? multiply(await getAction(client, getGasPrice, "getGasPrice")({}));
    return {
      gasPrice
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getTransactionCount.js
  async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
    const count = await client.request({
      method: "eth_getTransactionCount",
      params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
    }, { dedupe: Boolean(blockNumber) });
    return hexToNumber(count);
  }
  
  // ../../node_modules/viem/_esm/utils/blob/blobsToCommitments.js
  function blobsToCommitments(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;
    const commitments = [];
    for (const blob of blobs)
      commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));
    return to === "bytes" ? commitments : commitments.map((x) => bytesToHex(x));
  }
  
  // ../../node_modules/viem/_esm/utils/blob/blobsToProofs.js
  function blobsToProofs(parameters) {
    const { kzg } = parameters;
    const to = parameters.to ?? (typeof parameters.blobs[0] === "string" ? "hex" : "bytes");
    const blobs = typeof parameters.blobs[0] === "string" ? parameters.blobs.map((x) => hexToBytes(x)) : parameters.blobs;
    const commitments = typeof parameters.commitments[0] === "string" ? parameters.commitments.map((x) => hexToBytes(x)) : parameters.commitments;
    const proofs = [];
    for (let i = 0; i < blobs.length; i++) {
      const blob = blobs[i];
      const commitment = commitments[i];
      proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));
    }
    return to === "bytes" ? proofs : proofs.map((x) => bytesToHex(x));
  }
  
  // ../../node_modules/viem/node_modules/@noble/hashes/esm/_md.js
  function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
  }
  var Chi = (a, b, c) => a & b ^ ~a & c;
  var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  var HashMD = class extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      aexists(this);
      const { view, buffer: buffer2, blockLen } = this;
      data = toBytes2(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer2.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      aexists(this);
      aoutput(out, this);
      this.finished = true;
      const { buffer: buffer2, view, blockLen, isLE } = this;
      let { pos } = this;
      buffer2[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer2[i] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
      const { buffer: buffer2, outputLen } = this;
      this.digestInto(buffer2);
      const res = buffer2.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer: buffer2, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer2);
      return to;
    }
  };
  
  // ../../node_modules/viem/node_modules/@noble/hashes/esm/sha256.js
  var SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var SHA256_IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  var SHA256 = class extends HashMD {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV[0] | 0;
      this.B = SHA256_IV[1] | 0;
      this.C = SHA256_IV[2] | 0;
      this.D = SHA256_IV[3] | 0;
      this.E = SHA256_IV[4] | 0;
      this.F = SHA256_IV[5] | 0;
      this.G = SHA256_IV[6] | 0;
      this.H = SHA256_IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA256_W[i] = view.getUint32(offset, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  var sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());
  
  // ../../node_modules/viem/_esm/utils/hash/sha256.js
  function sha2562(value, to_) {
    const to = to_ || "hex";
    const bytes = sha256(isHex(value, { strict: false }) ? toBytes(value) : value);
    if (to === "bytes")
      return bytes;
    return toHex(bytes);
  }
  
  // ../../node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js
  function commitmentToVersionedHash(parameters) {
    const { commitment, version = 1 } = parameters;
    const to = parameters.to ?? (typeof commitment === "string" ? "hex" : "bytes");
    const versionedHash = sha2562(commitment, "bytes");
    versionedHash.set([version], 0);
    return to === "bytes" ? versionedHash : bytesToHex(versionedHash);
  }
  
  // ../../node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js
  function commitmentsToVersionedHashes(parameters) {
    const { commitments, version } = parameters;
    const to = parameters.to ?? (typeof commitments[0] === "string" ? "hex" : "bytes");
    const hashes = [];
    for (const commitment of commitments) {
      hashes.push(commitmentToVersionedHash({
        commitment,
        to,
        version
      }));
    }
    return hashes;
  }
  
  // ../../node_modules/viem/_esm/constants/blob.js
  var blobsPerTransaction = 6;
  var bytesPerFieldElement = 32;
  var fieldElementsPerBlob = 4096;
  var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
  var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
  1 - // zero byte (0x00) appended to each field element.
  1 * fieldElementsPerBlob * blobsPerTransaction;
  
  // ../../node_modules/viem/_esm/errors/blob.js
  var BlobSizeTooLargeError = class extends BaseError {
    constructor({ maxSize, size: size3 }) {
      super("Blob size is too large.", {
        metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size3} bytes`],
        name: "BlobSizeTooLargeError"
      });
    }
  };
  var EmptyBlobError = class extends BaseError {
    constructor() {
      super("Blob data must not be empty.", { name: "EmptyBlobError" });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/blob/toBlobs.js
  function toBlobs(parameters) {
    const to = parameters.to ?? (typeof parameters.data === "string" ? "hex" : "bytes");
    const data = typeof parameters.data === "string" ? hexToBytes(parameters.data) : parameters.data;
    const size_ = size(data);
    if (!size_)
      throw new EmptyBlobError();
    if (size_ > maxBytesPerTransaction)
      throw new BlobSizeTooLargeError({
        maxSize: maxBytesPerTransaction,
        size: size_
      });
    const blobs = [];
    let active = true;
    let position = 0;
    while (active) {
      const blob = createCursor(new Uint8Array(bytesPerBlob));
      let size3 = 0;
      while (size3 < fieldElementsPerBlob) {
        const bytes = data.slice(position, position + (bytesPerFieldElement - 1));
        blob.pushByte(0);
        blob.pushBytes(bytes);
        if (bytes.length < 31) {
          blob.pushByte(128);
          active = false;
          break;
        }
        size3++;
        position += 31;
      }
      blobs.push(blob);
    }
    return to === "bytes" ? blobs.map((x) => x.bytes) : blobs.map((x) => bytesToHex(x.bytes));
  }
  
  // ../../node_modules/viem/_esm/utils/blob/toBlobSidecars.js
  function toBlobSidecars(parameters) {
    const { data, kzg, to } = parameters;
    const blobs = parameters.blobs ?? toBlobs({ data, to });
    const commitments = parameters.commitments ?? blobsToCommitments({ blobs, kzg, to });
    const proofs = parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg, to });
    const sidecars = [];
    for (let i = 0; i < blobs.length; i++)
      sidecars.push({
        blob: blobs[i],
        commitment: commitments[i],
        proof: proofs[i]
      });
    return sidecars;
  }
  
  // ../../node_modules/viem/_esm/utils/transaction/getTransactionType.js
  function getTransactionType(transaction) {
    if (transaction.type)
      return transaction.type;
    if (typeof transaction.authorizationList !== "undefined")
      return "eip7702";
    if (typeof transaction.blobs !== "undefined" || typeof transaction.blobVersionedHashes !== "undefined" || typeof transaction.maxFeePerBlobGas !== "undefined" || typeof transaction.sidecars !== "undefined")
      return "eip4844";
    if (typeof transaction.maxFeePerGas !== "undefined" || typeof transaction.maxPriorityFeePerGas !== "undefined") {
      return "eip1559";
    }
    if (typeof transaction.gasPrice !== "undefined") {
      if (typeof transaction.accessList !== "undefined")
        return "eip2930";
      return "legacy";
    }
    throw new InvalidSerializableTransactionError({ transaction });
  }
  
  // ../../node_modules/viem/_esm/actions/public/getChainId.js
  async function getChainId(client) {
    const chainIdHex = await client.request({
      method: "eth_chainId"
    }, { dedupe: true });
    return hexToNumber(chainIdHex);
  }
  
  // ../../node_modules/viem/_esm/actions/wallet/prepareTransactionRequest.js
  var defaultParameters = [
    "blobVersionedHashes",
    "chainId",
    "fees",
    "gas",
    "nonce",
    "type"
  ];
  async function prepareTransactionRequest(client, args) {
    const { account: account_ = client.account, blobs, chain, gas, kzg, nonce, nonceManager, parameters = defaultParameters, type } = args;
    const account = account_ ? parseAccount(account_) : account_;
    const request = { ...args, ...account ? { from: account?.address } : {} };
    let block;
    async function getBlock2() {
      if (block)
        return block;
      block = await getAction(client, getBlock, "getBlock")({ blockTag: "latest" });
      return block;
    }
    let chainId;
    async function getChainId2() {
      if (chainId)
        return chainId;
      if (chain)
        return chain.id;
      if (typeof args.chainId !== "undefined")
        return args.chainId;
      const chainId_ = await getAction(client, getChainId, "getChainId")({});
      chainId = chainId_;
      return chainId;
    }
    if ((parameters.includes("blobVersionedHashes") || parameters.includes("sidecars")) && blobs && kzg) {
      const commitments = blobsToCommitments({ blobs, kzg });
      if (parameters.includes("blobVersionedHashes")) {
        const versionedHashes = commitmentsToVersionedHashes({
          commitments,
          to: "hex"
        });
        request.blobVersionedHashes = versionedHashes;
      }
      if (parameters.includes("sidecars")) {
        const proofs = blobsToProofs({ blobs, commitments, kzg });
        const sidecars = toBlobSidecars({
          blobs,
          commitments,
          proofs,
          to: "hex"
        });
        request.sidecars = sidecars;
      }
    }
    if (parameters.includes("chainId"))
      request.chainId = await getChainId2();
    if (parameters.includes("nonce") && typeof nonce === "undefined" && account) {
      if (nonceManager) {
        const chainId2 = await getChainId2();
        request.nonce = await nonceManager.consume({
          address: account.address,
          chainId: chainId2,
          client
        });
      } else {
        request.nonce = await getAction(client, getTransactionCount, "getTransactionCount")({
          address: account.address,
          blockTag: "pending"
        });
      }
    }
    if ((parameters.includes("fees") || parameters.includes("type")) && typeof type === "undefined") {
      try {
        request.type = getTransactionType(request);
      } catch {
        const block2 = await getBlock2();
        request.type = typeof block2?.baseFeePerGas === "bigint" ? "eip1559" : "legacy";
      }
    }
    if (parameters.includes("fees")) {
      if (request.type !== "legacy" && request.type !== "eip2930") {
        if (typeof request.maxFeePerGas === "undefined" || typeof request.maxPriorityFeePerGas === "undefined") {
          const block2 = await getBlock2();
          const { maxFeePerGas, maxPriorityFeePerGas } = await internal_estimateFeesPerGas(client, {
            block: block2,
            chain,
            request
          });
          if (typeof args.maxPriorityFeePerGas === "undefined" && args.maxFeePerGas && args.maxFeePerGas < maxPriorityFeePerGas)
            throw new MaxFeePerGasTooLowError({
              maxPriorityFeePerGas
            });
          request.maxPriorityFeePerGas = maxPriorityFeePerGas;
          request.maxFeePerGas = maxFeePerGas;
        }
      } else {
        if (typeof args.maxFeePerGas !== "undefined" || typeof args.maxPriorityFeePerGas !== "undefined")
          throw new Eip1559FeesNotSupportedError();
        const block2 = await getBlock2();
        const { gasPrice: gasPrice_ } = await internal_estimateFeesPerGas(client, {
          block: block2,
          chain,
          request,
          type: "legacy"
        });
        request.gasPrice = gasPrice_;
      }
    }
    if (parameters.includes("gas") && typeof gas === "undefined")
      request.gas = await getAction(client, estimateGas, "estimateGas")({
        ...request,
        account: account ? { address: account.address, type: "json-rpc" } : account
      });
    assertRequest(request);
    delete request.parameters;
    return request;
  }
  
  // ../../node_modules/viem/_esm/actions/public/getBalance.js
  async function getBalance(client, { address, blockNumber, blockTag = "latest" }) {
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const balance = await client.request({
      method: "eth_getBalance",
      params: [address, blockNumberHex || blockTag]
    });
    return BigInt(balance);
  }
  
  // ../../node_modules/viem/_esm/actions/public/estimateGas.js
  async function estimateGas(client, args) {
    const { account: account_ = client.account } = args;
    const account = account_ ? parseAccount(account_) : void 0;
    try {
      let estimateGas_rpc = function(parameters) {
        const { block: block2, request: request2, rpcStateOverride: rpcStateOverride2 } = parameters;
        return client.request({
          method: "eth_estimateGas",
          params: rpcStateOverride2 ? [request2, block2 ?? "latest", rpcStateOverride2] : block2 ? [request2, block2] : [request2]
        });
      };
      const { accessList, authorizationList, blobs, blobVersionedHashes, blockNumber, blockTag, data, gas, gasPrice, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, nonce, value, stateOverride, ...rest } = await prepareTransactionRequest(client, {
        ...args,
        parameters: (
          // Some RPC Providers do not compute versioned hashes from blobs. We will need
          // to compute them.
          account?.type === "local" ? void 0 : ["blobVersionedHashes"]
        )
      });
      const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
      const block = blockNumberHex || blockTag;
      const rpcStateOverride = serializeStateOverride(stateOverride);
      const to = await (async () => {
        if (rest.to)
          return rest.to;
        if (authorizationList && authorizationList.length > 0)
          return await recoverAuthorizationAddress({
            authorization: authorizationList[0]
          }).catch(() => {
            throw new BaseError("`to` is required. Could not infer from `authorizationList`");
          });
        return void 0;
      })();
      assertRequest(args);
      const chainFormat = client.chain?.formatters?.transactionRequest?.format;
      const format = chainFormat || formatTransactionRequest;
      const request = format({
        // Pick out extra data that might exist on the chain's transaction request type.
        ...extract(rest, { format: chainFormat }),
        from: account?.address,
        accessList,
        authorizationList,
        blobs,
        blobVersionedHashes,
        data,
        gas,
        gasPrice,
        maxFeePerBlobGas,
        maxFeePerGas,
        maxPriorityFeePerGas,
        nonce,
        to,
        value
      });
      let estimate = BigInt(await estimateGas_rpc({ block, request, rpcStateOverride }));
      if (authorizationList) {
        const value2 = await getBalance(client, { address: request.from });
        const estimates = await Promise.all(authorizationList.map(async (authorization) => {
          const { contractAddress } = authorization;
          const estimate2 = await estimateGas_rpc({
            block,
            request: {
              authorizationList: void 0,
              data,
              from: account?.address,
              to: contractAddress,
              value: numberToHex(value2)
            },
            rpcStateOverride
          }).catch(() => 100000n);
          return 2n * BigInt(estimate2);
        }));
        estimate += estimates.reduce((acc, curr) => acc + curr, 0n);
      }
      return estimate;
    } catch (err) {
      throw getEstimateGasError(err, {
        ...args,
        account,
        chain: client.chain
      });
    }
  }
  
  // ../../node_modules/viem/_esm/actions/public/estimateContractGas.js
  async function estimateContractGas(client, parameters) {
    const { abi: abi2, address, args, functionName, dataSuffix, ...request } = parameters;
    const data = encodeFunctionData({
      abi: abi2,
      args,
      functionName
    });
    try {
      const gas = await getAction(client, estimateGas, "estimateGas")({
        data: `${data}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        ...request
      });
      return gas;
    } catch (error) {
      const account = request.account ? parseAccount(request.account) : void 0;
      throw getContractError(error, {
        abi: abi2,
        address,
        args,
        docsPath: "/docs/contract/estimateContractGas",
        functionName,
        sender: account?.address
      });
    }
  }
  
  // ../../node_modules/viem/_esm/utils/abi/decodeEventLog.js
  var docsPath2 = "/docs/contract/decodeEventLog";
  function decodeEventLog(parameters) {
    const { abi: abi2, data, strict: strict_, topics } = parameters;
    const strict = strict_ ?? true;
    const [signature, ...argTopics] = topics;
    if (!signature)
      throw new AbiEventSignatureEmptyTopicsError({ docsPath: docsPath2 });
    const abiItem = (() => {
      if (abi2.length === 1)
        return abi2[0];
      return abi2.find((x) => x.type === "event" && signature === toEventSelector(formatAbiItem(x)));
    })();
    if (!(abiItem && "name" in abiItem) || abiItem.type !== "event")
      throw new AbiEventSignatureNotFoundError(signature, { docsPath: docsPath2 });
    const { name, inputs } = abiItem;
    const isUnnamed = inputs?.some((x) => !("name" in x && x.name));
    let args = isUnnamed ? [] : {};
    const indexedInputs = inputs.filter((x) => "indexed" in x && x.indexed);
    for (let i = 0; i < indexedInputs.length; i++) {
      const param = indexedInputs[i];
      const topic = argTopics[i];
      if (!topic)
        throw new DecodeLogTopicsMismatch({
          abiItem,
          param
        });
      args[isUnnamed ? i : param.name || i] = decodeTopic({ param, value: topic });
    }
    const nonIndexedInputs = inputs.filter((x) => !("indexed" in x && x.indexed));
    if (nonIndexedInputs.length > 0) {
      if (data && data !== "0x") {
        try {
          const decodedData = decodeAbiParameters(nonIndexedInputs, data);
          if (decodedData) {
            if (isUnnamed)
              args = [...args, ...decodedData];
            else {
              for (let i = 0; i < nonIndexedInputs.length; i++) {
                args[nonIndexedInputs[i].name] = decodedData[i];
              }
            }
          }
        } catch (err) {
          if (strict) {
            if (err instanceof AbiDecodingDataSizeTooSmallError || err instanceof PositionOutOfBoundsError)
              throw new DecodeLogDataMismatch({
                abiItem,
                data,
                params: nonIndexedInputs,
                size: size(data)
              });
            throw err;
          }
        }
      } else if (strict) {
        throw new DecodeLogDataMismatch({
          abiItem,
          data: "0x",
          params: nonIndexedInputs,
          size: 0
        });
      }
    }
    return {
      eventName: name,
      args: Object.values(args).length > 0 ? args : void 0
    };
  }
  function decodeTopic({ param, value }) {
    if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/))
      return value;
    const decodedArg = decodeAbiParameters([param], value) || [];
    return decodedArg[0];
  }
  
  // ../../node_modules/viem/_esm/utils/abi/parseEventLogs.js
  function parseEventLogs(parameters) {
    const { abi: abi2, args, logs, strict = true } = parameters;
    const eventName = (() => {
      if (!parameters.eventName)
        return void 0;
      if (Array.isArray(parameters.eventName))
        return parameters.eventName;
      return [parameters.eventName];
    })();
    return logs.map((log) => {
      try {
        const abiItem = abi2.find((abiItem2) => abiItem2.type === "event" && log.topics[0] === toEventSelector(abiItem2));
        if (!abiItem)
          return null;
        const event = decodeEventLog({
          ...log,
          abi: [abiItem],
          strict
        });
        if (eventName && !eventName.includes(event.eventName))
          return null;
        if (!includesArgs({
          args: event.args,
          inputs: abiItem.inputs,
          matchArgs: args
        }))
          return null;
        return { ...event, ...log };
      } catch (err) {
        let eventName2;
        let isUnnamed;
        if (err instanceof AbiEventSignatureNotFoundError)
          return null;
        if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {
          if (strict)
            return null;
          eventName2 = err.abiItem.name;
          isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
        }
        return { ...log, args: isUnnamed ? [] : {}, eventName: eventName2 };
      }
    }).filter(Boolean);
  }
  function includesArgs(parameters) {
    const { args, inputs, matchArgs } = parameters;
    if (!matchArgs)
      return true;
    if (!args)
      return false;
    function isEqual(input, value, arg) {
      try {
        if (input.type === "address")
          return isAddressEqual(value, arg);
        if (input.type === "string" || input.type === "bytes")
          return keccak256(toBytes(value)) === arg;
        return value === arg;
      } catch {
        return false;
      }
    }
    if (Array.isArray(args) && Array.isArray(matchArgs)) {
      return matchArgs.every((value, index2) => {
        if (value === null || value === void 0)
          return true;
        const input = inputs[index2];
        if (!input)
          return false;
        const value_ = Array.isArray(value) ? value : [value];
        return value_.some((value2) => isEqual(input, value2, args[index2]));
      });
    }
    if (typeof args === "object" && !Array.isArray(args) && typeof matchArgs === "object" && !Array.isArray(matchArgs))
      return Object.entries(matchArgs).every(([key, value]) => {
        if (value === null || value === void 0)
          return true;
        const input = inputs.find((input2) => input2.name === key);
        if (!input)
          return false;
        const value_ = Array.isArray(value) ? value : [value];
        return value_.some((value2) => isEqual(input, value2, args[key]));
      });
    return false;
  }
  
  // ../../node_modules/viem/_esm/utils/formatters/log.js
  function formatLog(log, { args, eventName } = {}) {
    return {
      ...log,
      blockHash: log.blockHash ? log.blockHash : null,
      blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
      logIndex: log.logIndex ? Number(log.logIndex) : null,
      transactionHash: log.transactionHash ? log.transactionHash : null,
      transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
      ...eventName ? { args, eventName } : {}
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getLogs.js
  async function getLogs(client, { address, blockHash, fromBlock, toBlock, event, events: events_, args, strict: strict_ } = {}) {
    const strict = strict_ ?? false;
    const events = events_ ?? (event ? [event] : void 0);
    let topics = [];
    if (events) {
      const encoded = events.flatMap((event2) => encodeEventTopics({
        abi: [event2],
        eventName: event2.name,
        args: events_ ? void 0 : args
      }));
      topics = [encoded];
      if (event)
        topics = topics[0];
    }
    let logs;
    if (blockHash) {
      logs = await client.request({
        method: "eth_getLogs",
        params: [{ address, topics, blockHash }]
      });
    } else {
      logs = await client.request({
        method: "eth_getLogs",
        params: [
          {
            address,
            topics,
            fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
            toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock
          }
        ]
      });
    }
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!events)
      return formattedLogs;
    return parseEventLogs({
      abi: events,
      args,
      logs: formattedLogs,
      strict
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/getContractEvents.js
  async function getContractEvents(client, parameters) {
    const { abi: abi2, address, args, blockHash, eventName, fromBlock, toBlock, strict } = parameters;
    const event = eventName ? getAbiItem({ abi: abi2, name: eventName }) : void 0;
    const events = !event ? abi2.filter((x) => x.type === "event") : void 0;
    return getAction(client, getLogs, "getLogs")({
      address,
      args,
      blockHash,
      event,
      events,
      fromBlock,
      toBlock,
      strict
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/readContract.js
  async function readContract(client, parameters) {
    const { abi: abi2, address, args, functionName, ...rest } = parameters;
    const calldata = encodeFunctionData({
      abi: abi2,
      args,
      functionName
    });
    try {
      const { data } = await getAction(client, call, "call")({
        ...rest,
        data: calldata,
        to: address
      });
      return decodeFunctionResult({
        abi: abi2,
        args,
        functionName,
        data: data || "0x"
      });
    } catch (error) {
      throw getContractError(error, {
        abi: abi2,
        address,
        args,
        docsPath: "/docs/contract/readContract",
        functionName
      });
    }
  }
  
  // ../../node_modules/viem/_esm/actions/public/simulateContract.js
  async function simulateContract(client, parameters) {
    const { abi: abi2, address, args, dataSuffix, functionName, ...callRequest } = parameters;
    const account = callRequest.account ? parseAccount(callRequest.account) : client.account;
    const calldata = encodeFunctionData({ abi: abi2, args, functionName });
    try {
      const { data } = await getAction(client, call, "call")({
        batch: false,
        data: `${calldata}${dataSuffix ? dataSuffix.replace("0x", "") : ""}`,
        to: address,
        ...callRequest,
        account
      });
      const result = decodeFunctionResult({
        abi: abi2,
        args,
        functionName,
        data: data || "0x"
      });
      const minimizedAbi = abi2.filter((abiItem) => "name" in abiItem && abiItem.name === parameters.functionName);
      return {
        result,
        request: {
          abi: minimizedAbi,
          address,
          args,
          dataSuffix,
          functionName,
          ...callRequest,
          account
        }
      };
    } catch (error) {
      throw getContractError(error, {
        abi: abi2,
        address,
        args,
        docsPath: "/docs/contract/simulateContract",
        functionName,
        sender: account?.address
      });
    }
  }
  
  // ../../node_modules/viem/_esm/utils/observe.js
  var listenersCache = /* @__PURE__ */ new Map();
  var cleanupCache = /* @__PURE__ */ new Map();
  var callbackCount = 0;
  function observe(observerId, callbacks, fn) {
    const callbackId = ++callbackCount;
    const getListeners = () => listenersCache.get(observerId) || [];
    const unsubscribe = () => {
      const listeners2 = getListeners();
      listenersCache.set(observerId, listeners2.filter((cb) => cb.id !== callbackId));
    };
    const unwatch = () => {
      const listeners2 = getListeners();
      if (!listeners2.some((cb) => cb.id === callbackId))
        return;
      const cleanup2 = cleanupCache.get(observerId);
      if (listeners2.length === 1 && cleanup2)
        cleanup2();
      unsubscribe();
    };
    const listeners = getListeners();
    listenersCache.set(observerId, [
      ...listeners,
      { id: callbackId, fns: callbacks }
    ]);
    if (listeners && listeners.length > 0)
      return unwatch;
    const emit = {};
    for (const key in callbacks) {
      emit[key] = (...args) => {
        const listeners2 = getListeners();
        if (listeners2.length === 0)
          return;
        for (const listener of listeners2)
          listener.fns[key]?.(...args);
      };
    }
    const cleanup = fn(emit);
    if (typeof cleanup === "function")
      cleanupCache.set(observerId, cleanup);
    return unwatch;
  }
  
  // ../../node_modules/viem/_esm/utils/wait.js
  async function wait(time) {
    return new Promise((res) => setTimeout(res, time));
  }
  
  // ../../node_modules/viem/_esm/utils/poll.js
  function poll(fn, { emitOnBegin, initialWaitTime, interval }) {
    let active = true;
    const unwatch = () => active = false;
    const watch = async () => {
      let data = void 0;
      if (emitOnBegin)
        data = await fn({ unpoll: unwatch });
      const initialWait = await initialWaitTime?.(data) ?? interval;
      await wait(initialWait);
      const poll2 = async () => {
        if (!active)
          return;
        await fn({ unpoll: unwatch });
        await wait(interval);
        poll2();
      };
      poll2();
    };
    watch();
    return unwatch;
  }
  
  // ../../node_modules/viem/_esm/utils/promise/withCache.js
  var promiseCache = /* @__PURE__ */ new Map();
  var responseCache = /* @__PURE__ */ new Map();
  function getCache(cacheKey2) {
    const buildCache = (cacheKey3, cache) => ({
      clear: () => cache.delete(cacheKey3),
      get: () => cache.get(cacheKey3),
      set: (data) => cache.set(cacheKey3, data)
    });
    const promise = buildCache(cacheKey2, promiseCache);
    const response = buildCache(cacheKey2, responseCache);
    return {
      clear: () => {
        promise.clear();
        response.clear();
      },
      promise,
      response
    };
  }
  async function withCache(fn, { cacheKey: cacheKey2, cacheTime = Number.POSITIVE_INFINITY }) {
    const cache = getCache(cacheKey2);
    const response = cache.response.get();
    if (response && cacheTime > 0) {
      const age = (/* @__PURE__ */ new Date()).getTime() - response.created.getTime();
      if (age < cacheTime)
        return response.data;
    }
    let promise = cache.promise.get();
    if (!promise) {
      promise = fn();
      cache.promise.set(promise);
    }
    try {
      const data = await promise;
      cache.response.set({ created: /* @__PURE__ */ new Date(), data });
      return data;
    } finally {
      cache.promise.clear();
    }
  }
  
  // ../../node_modules/viem/_esm/actions/public/getBlockNumber.js
  var cacheKey = (id) => `blockNumber.${id}`;
  async function getBlockNumber(client, { cacheTime = client.cacheTime } = {}) {
    const blockNumberHex = await withCache(() => client.request({
      method: "eth_blockNumber"
    }), { cacheKey: cacheKey(client.uid), cacheTime });
    return BigInt(blockNumberHex);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getFilterChanges.js
  async function getFilterChanges(_client, { filter }) {
    const strict = "strict" in filter && filter.strict;
    const logs = await filter.request({
      method: "eth_getFilterChanges",
      params: [filter.id]
    });
    if (typeof logs[0] === "string")
      return logs;
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!("abi" in filter) || !filter.abi)
      return formattedLogs;
    return parseEventLogs({
      abi: filter.abi,
      logs: formattedLogs,
      strict
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/uninstallFilter.js
  async function uninstallFilter(_client, { filter }) {
    return filter.request({
      method: "eth_uninstallFilter",
      params: [filter.id]
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/watchContractEvent.js
  function watchContractEvent(client, parameters) {
    const { abi: abi2, address, args, batch = true, eventName, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ } = parameters;
    const enablePolling = (() => {
      if (typeof poll_ !== "undefined")
        return poll_;
      if (typeof fromBlock === "bigint")
        return true;
      if (client.transport.type === "webSocket")
        return false;
      if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
        return false;
      return true;
    })();
    const pollContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict,
        fromBlock
      ]);
      return observe(observerId, { onLogs, onError }, (emit) => {
        let previousBlockNumber;
        if (fromBlock !== void 0)
          previousBlockNumber = fromBlock - 1n;
        let filter;
        let initialized = false;
        const unwatch = poll(async () => {
          if (!initialized) {
            try {
              filter = await getAction(client, createContractEventFilter, "createContractEventFilter")({
                abi: abi2,
                address,
                args,
                eventName,
                strict,
                fromBlock
              });
            } catch {
            }
            initialized = true;
            return;
          }
          try {
            let logs;
            if (filter) {
              logs = await getAction(client, getFilterChanges, "getFilterChanges")({ filter });
            } else {
              const blockNumber = await getAction(client, getBlockNumber, "getBlockNumber")({});
              if (previousBlockNumber && previousBlockNumber < blockNumber) {
                logs = await getAction(client, getContractEvents, "getContractEvents")({
                  abi: abi2,
                  address,
                  args,
                  eventName,
                  fromBlock: previousBlockNumber + 1n,
                  toBlock: blockNumber,
                  strict
                });
              } else {
                logs = [];
              }
              previousBlockNumber = blockNumber;
            }
            if (logs.length === 0)
              return;
            if (batch)
              emit.onLogs(logs);
            else
              for (const log of logs)
                emit.onLogs([log]);
          } catch (err) {
            if (filter && err instanceof InvalidInputRpcError)
              initialized = false;
            emit.onError?.(err);
          }
        }, {
          emitOnBegin: true,
          interval: pollingInterval
        });
        return async () => {
          if (filter)
            await getAction(client, uninstallFilter, "uninstallFilter")({ filter });
          unwatch();
        };
      });
    };
    const subscribeContractEvent = () => {
      const strict = strict_ ?? false;
      const observerId = stringify([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval,
        strict
      ]);
      let active = true;
      let unsubscribe = () => active = false;
      return observe(observerId, { onLogs, onError }, (emit) => {
        ;
        (async () => {
          try {
            const transport = (() => {
              if (client.transport.type === "fallback") {
                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                if (!transport2)
                  return client.transport;
                return transport2.value;
              }
              return client.transport;
            })();
            const topics = eventName ? encodeEventTopics({
              abi: abi2,
              eventName,
              args
            }) : [];
            const { unsubscribe: unsubscribe_ } = await transport.subscribe({
              params: ["logs", { address, topics }],
              onData(data) {
                if (!active)
                  return;
                const log = data.result;
                try {
                  const { eventName: eventName2, args: args2 } = decodeEventLog({
                    abi: abi2,
                    data: log.data,
                    topics: log.topics,
                    strict: strict_
                  });
                  const formatted = formatLog(log, {
                    args: args2,
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                } catch (err) {
                  let eventName2;
                  let isUnnamed;
                  if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {
                    if (strict_)
                      return;
                    eventName2 = err.abiItem.name;
                    isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                  }
                  const formatted = formatLog(log, {
                    args: isUnnamed ? [] : {},
                    eventName: eventName2
                  });
                  emit.onLogs([formatted]);
                }
              },
              onError(error) {
                emit.onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      });
    };
    return enablePolling ? pollContractEvent() : subscribeContractEvent();
  }
  
  // ../../node_modules/viem/_esm/actions/wallet/sendRawTransaction.js
  async function sendRawTransaction(client, { serializedTransaction }) {
    return client.request({
      method: "eth_sendRawTransaction",
      params: [serializedTransaction]
    }, { retryCount: 0 });
  }
  
  // ../../node_modules/viem/_esm/errors/eip712.js
  var Eip712DomainNotFoundError = class extends BaseError {
    constructor({ address }) {
      super(`No EIP-712 domain found on contract "${address}".`, {
        metaMessages: [
          "Ensure that:",
          `- The contract is deployed at the address "${address}".`,
          "- `eip712Domain()` function exists on the contract.",
          "- `eip712Domain()` function matches signature to ERC-5267 specification."
        ],
        name: "Eip712DomainNotFoundError"
      });
    }
  };
  
  // ../../node_modules/viem/_esm/actions/public/getEip712Domain.js
  async function getEip712Domain(client, parameters) {
    const { address, factory, factoryData } = parameters;
    try {
      const [fields, name, version, chainId, verifyingContract, salt, extensions] = await getAction(client, readContract, "readContract")({
        abi,
        address,
        functionName: "eip712Domain",
        factory,
        factoryData
      });
      return {
        domain: {
          name,
          version,
          chainId: Number(chainId),
          verifyingContract,
          salt
        },
        extensions,
        fields
      };
    } catch (e) {
      const error = e;
      if (error.name === "ContractFunctionExecutionError" && error.cause.name === "ContractFunctionZeroDataError") {
        throw new Eip712DomainNotFoundError({ address });
      }
      throw error;
    }
  }
  var abi = [
    {
      inputs: [],
      name: "eip712Domain",
      outputs: [
        { name: "fields", type: "bytes1" },
        { name: "name", type: "string" },
        { name: "version", type: "string" },
        { name: "chainId", type: "uint256" },
        { name: "verifyingContract", type: "address" },
        { name: "salt", type: "bytes32" },
        { name: "extensions", type: "uint256[]" }
      ],
      stateMutability: "view",
      type: "function"
    }
  ];
  
  // ../../node_modules/viem/_esm/utils/uid.js
  var size2 = 256;
  var index = size2;
  var buffer;
  function uid(length = 11) {
    if (!buffer || index + length > size2 * 2) {
      buffer = "";
      index = 0;
      for (let i = 0; i < size2; i++) {
        buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
      }
    }
    return buffer.substring(index, index++ + length);
  }
  
  // ../../node_modules/viem/_esm/clients/createClient.js
  function createClient(parameters) {
    const { batch, cacheTime = parameters.pollingInterval ?? 4e3, ccipRead, key = "base", name = "Base Client", pollingInterval = 4e3, type = "base" } = parameters;
    const chain = parameters.chain;
    const account = parameters.account ? parseAccount(parameters.account) : void 0;
    const { config: config2, request, value } = parameters.transport({
      chain,
      pollingInterval
    });
    const transport = { ...config2, ...value };
    const client = {
      account,
      batch,
      cacheTime,
      ccipRead,
      chain,
      key,
      name,
      pollingInterval,
      request,
      transport,
      type,
      uid: uid()
    };
    function extend(base) {
      return (extendFn) => {
        const extended = extendFn(base);
        for (const key2 in client)
          delete extended[key2];
        const combined = { ...base, ...extended };
        return Object.assign(combined, { extend: extend(combined) });
      };
    }
    return Object.assign(client, { extend: extend(client) });
  }
  
  // ../../node_modules/viem/_esm/utils/promise/withDedupe.js
  var promiseCache2 = /* @__PURE__ */ new LruMap(8192);
  function withDedupe(fn, { enabled = true, id }) {
    if (!enabled || !id)
      return fn();
    if (promiseCache2.get(id))
      return promiseCache2.get(id);
    const promise = fn().finally(() => promiseCache2.delete(id));
    promiseCache2.set(id, promise);
    return promise;
  }
  
  // ../../node_modules/viem/_esm/utils/promise/withRetry.js
  function withRetry(fn, { delay: delay_ = 100, retryCount = 2, shouldRetry: shouldRetry2 = () => true } = {}) {
    return new Promise((resolve, reject) => {
      const attemptRetry = async ({ count = 0 } = {}) => {
        const retry = async ({ error }) => {
          const delay = typeof delay_ === "function" ? delay_({ count, error }) : delay_;
          if (delay)
            await wait(delay);
          attemptRetry({ count: count + 1 });
        };
        try {
          const data = await fn();
          resolve(data);
        } catch (err) {
          if (count < retryCount && await shouldRetry2({ count, error: err }))
            return retry({ error: err });
          reject(err);
        }
      };
      attemptRetry();
    });
  }
  
  // ../../node_modules/viem/_esm/utils/buildRequest.js
  function buildRequest(request, options2 = {}) {
    return async (args, overrideOptions = {}) => {
      const { dedupe = false, retryDelay = 150, retryCount = 3, uid: uid2 } = {
        ...options2,
        ...overrideOptions
      };
      const requestId = dedupe ? keccak256(stringToHex(`${uid2}.${stringify(args)}`)) : void 0;
      return withDedupe(() => withRetry(async () => {
        try {
          return await request(args);
        } catch (err_) {
          const err = err_;
          switch (err.code) {
            // -32700
            case ParseRpcError.code:
              throw new ParseRpcError(err);
            // -32600
            case InvalidRequestRpcError.code:
              throw new InvalidRequestRpcError(err);
            // -32601
            case MethodNotFoundRpcError.code:
              throw new MethodNotFoundRpcError(err, { method: args.method });
            // -32602
            case InvalidParamsRpcError.code:
              throw new InvalidParamsRpcError(err);
            // -32603
            case InternalRpcError.code:
              throw new InternalRpcError(err);
            // -32000
            case InvalidInputRpcError.code:
              throw new InvalidInputRpcError(err);
            // -32001
            case ResourceNotFoundRpcError.code:
              throw new ResourceNotFoundRpcError(err);
            // -32002
            case ResourceUnavailableRpcError.code:
              throw new ResourceUnavailableRpcError(err);
            // -32003
            case TransactionRejectedRpcError.code:
              throw new TransactionRejectedRpcError(err);
            // -32004
            case MethodNotSupportedRpcError.code:
              throw new MethodNotSupportedRpcError(err, {
                method: args.method
              });
            // -32005
            case LimitExceededRpcError.code:
              throw new LimitExceededRpcError(err);
            // -32006
            case JsonRpcVersionUnsupportedError.code:
              throw new JsonRpcVersionUnsupportedError(err);
            // 4001
            case UserRejectedRequestError.code:
              throw new UserRejectedRequestError(err);
            // 4100
            case UnauthorizedProviderError.code:
              throw new UnauthorizedProviderError(err);
            // 4200
            case UnsupportedProviderMethodError.code:
              throw new UnsupportedProviderMethodError(err);
            // 4900
            case ProviderDisconnectedError.code:
              throw new ProviderDisconnectedError(err);
            // 4901
            case ChainDisconnectedError.code:
              throw new ChainDisconnectedError(err);
            // 4902
            case SwitchChainError.code:
              throw new SwitchChainError(err);
            // CAIP-25: User Rejected Error
            // https://docs.walletconnect.com/2.0/specs/clients/sign/error-codes#rejected-caip-25
            case 5e3:
              throw new UserRejectedRequestError(err);
            default:
              if (err_ instanceof BaseError)
                throw err_;
              throw new UnknownRpcError(err);
          }
        }
      }, {
        delay: ({ count, error }) => {
          if (error && error instanceof HttpRequestError) {
            const retryAfter = error?.headers?.get("Retry-After");
            if (retryAfter?.match(/\d/))
              return Number.parseInt(retryAfter) * 1e3;
          }
          return ~~(1 << count) * retryDelay;
        },
        retryCount,
        shouldRetry: ({ error }) => shouldRetry(error)
      }), { enabled: dedupe, id: requestId });
    };
  }
  function shouldRetry(error) {
    if ("code" in error && typeof error.code === "number") {
      if (error.code === -1)
        return true;
      if (error.code === LimitExceededRpcError.code)
        return true;
      if (error.code === InternalRpcError.code)
        return true;
      return false;
    }
    if (error instanceof HttpRequestError && error.status) {
      if (error.status === 403)
        return true;
      if (error.status === 408)
        return true;
      if (error.status === 413)
        return true;
      if (error.status === 429)
        return true;
      if (error.status === 500)
        return true;
      if (error.status === 502)
        return true;
      if (error.status === 503)
        return true;
      if (error.status === 504)
        return true;
      return false;
    }
    return true;
  }
  
  // ../../node_modules/viem/_esm/clients/transports/createTransport.js
  function createTransport({ key, name, request, retryCount = 3, retryDelay = 150, timeout, type }, value) {
    const uid2 = uid();
    return {
      config: {
        key,
        name,
        request,
        retryCount,
        retryDelay,
        timeout,
        type
      },
      request: buildRequest(request, { retryCount, retryDelay, uid: uid2 }),
      value
    };
  }
  
  // ../../node_modules/viem/_esm/errors/transport.js
  var UrlRequiredError = class extends BaseError {
    constructor() {
      super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
        docsPath: "/docs/clients/intro",
        name: "UrlRequiredError"
      });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/promise/withTimeout.js
  function withTimeout(fn, { errorInstance = new Error("timed out"), timeout, signal }) {
    return new Promise((resolve, reject) => {
      ;
      (async () => {
        let timeoutId;
        try {
          const controller = new AbortController();
          if (timeout > 0) {
            timeoutId = setTimeout(() => {
              if (signal) {
                controller.abort();
              } else {
                reject(errorInstance);
              }
            }, timeout);
          }
          resolve(await fn({ signal: controller?.signal || null }));
        } catch (err) {
          if (err?.name === "AbortError")
            reject(errorInstance);
          reject(err);
        } finally {
          clearTimeout(timeoutId);
        }
      })();
    });
  }
  
  // ../../node_modules/viem/_esm/utils/rpc/id.js
  function createIdStore() {
    return {
      current: 0,
      take() {
        return this.current++;
      },
      reset() {
        this.current = 0;
      }
    };
  }
  var idCache = /* @__PURE__ */ createIdStore();
  
  // ../../node_modules/viem/_esm/utils/rpc/http.js
  function getHttpRpcClient(url, options2 = {}) {
    return {
      async request(params) {
        const { body, onRequest = options2.onRequest, onResponse = options2.onResponse, timeout = options2.timeout ?? 1e4 } = params;
        const fetchOptions = {
          ...options2.fetchOptions ?? {},
          ...params.fetchOptions ?? {}
        };
        const { headers, method, signal: signal_ } = fetchOptions;
        try {
          const response = await withTimeout(async ({ signal }) => {
            const init = {
              ...fetchOptions,
              body: Array.isArray(body) ? stringify(body.map((body2) => ({
                jsonrpc: "2.0",
                id: body2.id ?? idCache.take(),
                ...body2
              }))) : stringify({
                jsonrpc: "2.0",
                id: body.id ?? idCache.take(),
                ...body
              }),
              headers: {
                "Content-Type": "application/json",
                ...headers
              },
              method: method || "POST",
              signal: signal_ || (timeout > 0 ? signal : null)
            };
            const request = new Request(url, init);
            const args = await onRequest?.(request, init) ?? { ...init, url };
            const response2 = await fetch(args.url ?? url, args);
            return response2;
          }, {
            errorInstance: new TimeoutError({ body, url }),
            timeout,
            signal: true
          });
          if (onResponse)
            await onResponse(response);
          let data;
          if (response.headers.get("Content-Type")?.startsWith("application/json"))
            data = await response.json();
          else {
            data = await response.text();
            try {
              data = JSON.parse(data || "{}");
            } catch (err) {
              if (response.ok)
                throw err;
              data = { error: data };
            }
          }
          if (!response.ok) {
            throw new HttpRequestError({
              body,
              details: stringify(data.error) || response.statusText,
              headers: response.headers,
              status: response.status,
              url
            });
          }
          return data;
        } catch (err) {
          if (err instanceof HttpRequestError)
            throw err;
          if (err instanceof TimeoutError)
            throw err;
          throw new HttpRequestError({
            body,
            cause: err,
            url
          });
        }
      }
    };
  }
  
  // ../../node_modules/viem/_esm/clients/transports/http.js
  function http(url, config2 = {}) {
    const { batch, fetchOptions, key = "http", name = "HTTP JSON-RPC", onFetchRequest, onFetchResponse, retryDelay } = config2;
    return ({ chain, retryCount: retryCount_, timeout: timeout_ }) => {
      const { batchSize = 1e3, wait: wait2 = 0 } = typeof batch === "object" ? batch : {};
      const retryCount = config2.retryCount ?? retryCount_;
      const timeout = timeout_ ?? config2.timeout ?? 1e4;
      const url_ = url || chain?.rpcUrls.default.http[0];
      if (!url_)
        throw new UrlRequiredError();
      const rpcClient = getHttpRpcClient(url_, {
        fetchOptions,
        onRequest: onFetchRequest,
        onResponse: onFetchResponse,
        timeout
      });
      return createTransport({
        key,
        name,
        async request({ method, params }) {
          const body = { method, params };
          const { schedule } = createBatchScheduler({
            id: url_,
            wait: wait2,
            shouldSplitBatch(requests) {
              return requests.length > batchSize;
            },
            fn: (body2) => rpcClient.request({
              body: body2
            }),
            sort: (a, b) => a.id - b.id
          });
          const fn = async (body2) => batch ? schedule(body2) : [
            await rpcClient.request({
              body: body2
            })
          ];
          const [{ error, result }] = await fn(body);
          if (error)
            throw new RpcRequestError({
              body,
              error,
              url: url_
            });
          return result;
        },
        retryCount,
        retryDelay,
        timeout,
        type: "http"
      }, {
        fetchOptions,
        url: url_
      });
    };
  }
  
  // ../../node_modules/viem/_esm/utils/ens/errors.js
  function isNullUniversalResolverError(err, callType) {
    if (!(err instanceof BaseError))
      return false;
    const cause = err.walk((e) => e instanceof ContractFunctionRevertedError);
    if (!(cause instanceof ContractFunctionRevertedError))
      return false;
    if (cause.data?.errorName === "ResolverNotFound")
      return true;
    if (cause.data?.errorName === "ResolverWildcardNotSupported")
      return true;
    if (cause.data?.errorName === "ResolverNotContract")
      return true;
    if (cause.data?.errorName === "ResolverError")
      return true;
    if (cause.data?.errorName === "HttpError")
      return true;
    if (cause.reason?.includes("Wildcard on non-extended resolvers is not supported"))
      return true;
    if (callType === "reverse" && cause.reason === panicReasons[50])
      return true;
    return false;
  }
  
  // ../../node_modules/viem/_esm/utils/ens/encodedLabelToLabelhash.js
  function encodedLabelToLabelhash(label) {
    if (label.length !== 66)
      return null;
    if (label.indexOf("[") !== 0)
      return null;
    if (label.indexOf("]") !== 65)
      return null;
    const hash = `0x${label.slice(1, 65)}`;
    if (!isHex(hash))
      return null;
    return hash;
  }
  
  // ../../node_modules/viem/_esm/utils/ens/namehash.js
  function namehash(name) {
    let result = new Uint8Array(32).fill(0);
    if (!name)
      return bytesToHex(result);
    const labels = name.split(".");
    for (let i = labels.length - 1; i >= 0; i -= 1) {
      const hashFromEncodedLabel = encodedLabelToLabelhash(labels[i]);
      const hashed = hashFromEncodedLabel ? toBytes(hashFromEncodedLabel) : keccak256(stringToBytes(labels[i]), "bytes");
      result = keccak256(concat([result, hashed]), "bytes");
    }
    return bytesToHex(result);
  }
  
  // ../../node_modules/viem/_esm/utils/ens/encodeLabelhash.js
  function encodeLabelhash(hash) {
    return `[${hash.slice(2)}]`;
  }
  
  // ../../node_modules/viem/_esm/utils/ens/labelhash.js
  function labelhash(label) {
    const result = new Uint8Array(32).fill(0);
    if (!label)
      return bytesToHex(result);
    return encodedLabelToLabelhash(label) || keccak256(stringToBytes(label));
  }
  
  // ../../node_modules/viem/_esm/utils/ens/packetToBytes.js
  function packetToBytes(packet) {
    const value = packet.replace(/^\.|\.$/gm, "");
    if (value.length === 0)
      return new Uint8Array(1);
    const bytes = new Uint8Array(stringToBytes(value).byteLength + 2);
    let offset = 0;
    const list = value.split(".");
    for (let i = 0; i < list.length; i++) {
      let encoded = stringToBytes(list[i]);
      if (encoded.byteLength > 255)
        encoded = stringToBytes(encodeLabelhash(labelhash(list[i])));
      bytes[offset] = encoded.length;
      bytes.set(encoded, offset + 1);
      offset += encoded.length + 1;
    }
    if (bytes.byteLength !== offset + 1)
      return bytes.slice(0, offset + 1);
    return bytes;
  }
  
  // ../../node_modules/viem/_esm/actions/ens/getEnsAddress.js
  async function getEnsAddress(client, { blockNumber, blockTag, coinType, name, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
      if (!client.chain)
        throw new Error("client chain not configured. universalResolverAddress is required.");
      universalResolverAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "ensUniversalResolver"
      });
    }
    try {
      const functionData = encodeFunctionData({
        abi: addressResolverAbi,
        functionName: "addr",
        ...coinType != null ? { args: [namehash(name), BigInt(coinType)] } : { args: [namehash(name)] }
      });
      const readContractParameters = {
        address: universalResolverAddress,
        abi: universalResolverResolveAbi,
        functionName: "resolve",
        args: [toHex(packetToBytes(name)), functionData],
        blockNumber,
        blockTag
      };
      const readContractAction = getAction(client, readContract, "readContract");
      const res = gatewayUrls ? await readContractAction({
        ...readContractParameters,
        args: [...readContractParameters.args, gatewayUrls]
      }) : await readContractAction(readContractParameters);
      if (res[0] === "0x")
        return null;
      const address = decodeFunctionResult({
        abi: addressResolverAbi,
        args: coinType != null ? [namehash(name), BigInt(coinType)] : void 0,
        functionName: "addr",
        data: res[0]
      });
      if (address === "0x")
        return null;
      if (trim(address) === "0x00")
        return null;
      return address;
    } catch (err) {
      if (strict)
        throw err;
      if (isNullUniversalResolverError(err, "resolve"))
        return null;
      throw err;
    }
  }
  
  // ../../node_modules/viem/_esm/errors/ens.js
  var EnsAvatarInvalidMetadataError = class extends BaseError {
    constructor({ data }) {
      super("Unable to extract image from metadata. The metadata may be malformed or invalid.", {
        metaMessages: [
          "- Metadata must be a JSON object with at least an `image`, `image_url` or `image_data` property.",
          "",
          `Provided data: ${JSON.stringify(data)}`
        ],
        name: "EnsAvatarInvalidMetadataError"
      });
    }
  };
  var EnsAvatarInvalidNftUriError = class extends BaseError {
    constructor({ reason }) {
      super(`ENS NFT avatar URI is invalid. ${reason}`, {
        name: "EnsAvatarInvalidNftUriError"
      });
    }
  };
  var EnsAvatarUriResolutionError = class extends BaseError {
    constructor({ uri }) {
      super(`Unable to resolve ENS avatar URI "${uri}". The URI may be malformed, invalid, or does not respond with a valid image.`, { name: "EnsAvatarUriResolutionError" });
    }
  };
  var EnsAvatarUnsupportedNamespaceError = class extends BaseError {
    constructor({ namespace }) {
      super(`ENS NFT avatar namespace "${namespace}" is not supported. Must be "erc721" or "erc1155".`, { name: "EnsAvatarUnsupportedNamespaceError" });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/ens/avatar/utils.js
  var networkRegex = /(?<protocol>https?:\/\/[^\/]*|ipfs:\/|ipns:\/|ar:\/)?(?<root>\/)?(?<subpath>ipfs\/|ipns\/)?(?<target>[\w\-.]+)(?<subtarget>\/.*)?/;
  var ipfsHashRegex = /^(Qm[1-9A-HJ-NP-Za-km-z]{44,}|b[A-Za-z2-7]{58,}|B[A-Z2-7]{58,}|z[1-9A-HJ-NP-Za-km-z]{48,}|F[0-9A-F]{50,})(\/(?<target>[\w\-.]+))?(?<subtarget>\/.*)?$/;
  var base64Regex = /^data:([a-zA-Z\-/+]*);base64,([^"].*)/;
  var dataURIRegex = /^data:([a-zA-Z\-/+]*)?(;[a-zA-Z0-9].*?)?(,)/;
  async function isImageUri(uri) {
    try {
      const res = await fetch(uri, { method: "HEAD" });
      if (res.status === 200) {
        const contentType = res.headers.get("content-type");
        return contentType?.startsWith("image/");
      }
      return false;
    } catch (error) {
      if (typeof error === "object" && typeof error.response !== "undefined") {
        return false;
      }
      if (!globalThis.hasOwnProperty("Image"))
        return false;
      return new Promise((resolve) => {
        const img = new Image();
        img.onload = () => {
          resolve(true);
        };
        img.onerror = () => {
          resolve(false);
        };
        img.src = uri;
      });
    }
  }
  function getGateway(custom, defaultGateway) {
    if (!custom)
      return defaultGateway;
    if (custom.endsWith("/"))
      return custom.slice(0, -1);
    return custom;
  }
  function resolveAvatarUri({ uri, gatewayUrls }) {
    const isEncoded = base64Regex.test(uri);
    if (isEncoded)
      return { uri, isOnChain: true, isEncoded };
    const ipfsGateway = getGateway(gatewayUrls?.ipfs, "https://ipfs.io");
    const arweaveGateway = getGateway(gatewayUrls?.arweave, "https://arweave.net");
    const networkRegexMatch = uri.match(networkRegex);
    const { protocol, subpath, target, subtarget = "" } = networkRegexMatch?.groups || {};
    const isIPNS = protocol === "ipns:/" || subpath === "ipns/";
    const isIPFS = protocol === "ipfs:/" || subpath === "ipfs/" || ipfsHashRegex.test(uri);
    if (uri.startsWith("http") && !isIPNS && !isIPFS) {
      let replacedUri = uri;
      if (gatewayUrls?.arweave)
        replacedUri = uri.replace(/https:\/\/arweave.net/g, gatewayUrls?.arweave);
      return { uri: replacedUri, isOnChain: false, isEncoded: false };
    }
    if ((isIPNS || isIPFS) && target) {
      return {
        uri: `${ipfsGateway}/${isIPNS ? "ipns" : "ipfs"}/${target}${subtarget}`,
        isOnChain: false,
        isEncoded: false
      };
    }
    if (protocol === "ar:/" && target) {
      return {
        uri: `${arweaveGateway}/${target}${subtarget || ""}`,
        isOnChain: false,
        isEncoded: false
      };
    }
    let parsedUri = uri.replace(dataURIRegex, "");
    if (parsedUri.startsWith("<svg")) {
      parsedUri = `data:image/svg+xml;base64,${btoa(parsedUri)}`;
    }
    if (parsedUri.startsWith("data:") || parsedUri.startsWith("{")) {
      return {
        uri: parsedUri,
        isOnChain: true,
        isEncoded: false
      };
    }
    throw new EnsAvatarUriResolutionError({ uri });
  }
  function getJsonImage(data) {
    if (typeof data !== "object" || !("image" in data) && !("image_url" in data) && !("image_data" in data)) {
      throw new EnsAvatarInvalidMetadataError({ data });
    }
    return data.image || data.image_url || data.image_data;
  }
  async function getMetadataAvatarUri({ gatewayUrls, uri }) {
    try {
      const res = await fetch(uri).then((res2) => res2.json());
      const image = await parseAvatarUri({
        gatewayUrls,
        uri: getJsonImage(res)
      });
      return image;
    } catch {
      throw new EnsAvatarUriResolutionError({ uri });
    }
  }
  async function parseAvatarUri({ gatewayUrls, uri }) {
    const { uri: resolvedURI, isOnChain } = resolveAvatarUri({ uri, gatewayUrls });
    if (isOnChain)
      return resolvedURI;
    const isImage = await isImageUri(resolvedURI);
    if (isImage)
      return resolvedURI;
    throw new EnsAvatarUriResolutionError({ uri });
  }
  function parseNftUri(uri_) {
    let uri = uri_;
    if (uri.startsWith("did:nft:")) {
      uri = uri.replace("did:nft:", "").replace(/_/g, "/");
    }
    const [reference, asset_namespace, tokenID] = uri.split("/");
    const [eip_namespace, chainID] = reference.split(":");
    const [erc_namespace, contractAddress] = asset_namespace.split(":");
    if (!eip_namespace || eip_namespace.toLowerCase() !== "eip155")
      throw new EnsAvatarInvalidNftUriError({ reason: "Only EIP-155 supported" });
    if (!chainID)
      throw new EnsAvatarInvalidNftUriError({ reason: "Chain ID not found" });
    if (!contractAddress)
      throw new EnsAvatarInvalidNftUriError({
        reason: "Contract address not found"
      });
    if (!tokenID)
      throw new EnsAvatarInvalidNftUriError({ reason: "Token ID not found" });
    if (!erc_namespace)
      throw new EnsAvatarInvalidNftUriError({ reason: "ERC namespace not found" });
    return {
      chainID: Number.parseInt(chainID),
      namespace: erc_namespace.toLowerCase(),
      contractAddress,
      tokenID
    };
  }
  async function getNftTokenUri(client, { nft }) {
    if (nft.namespace === "erc721") {
      return readContract(client, {
        address: nft.contractAddress,
        abi: [
          {
            name: "tokenURI",
            type: "function",
            stateMutability: "view",
            inputs: [{ name: "tokenId", type: "uint256" }],
            outputs: [{ name: "", type: "string" }]
          }
        ],
        functionName: "tokenURI",
        args: [BigInt(nft.tokenID)]
      });
    }
    if (nft.namespace === "erc1155") {
      return readContract(client, {
        address: nft.contractAddress,
        abi: [
          {
            name: "uri",
            type: "function",
            stateMutability: "view",
            inputs: [{ name: "_id", type: "uint256" }],
            outputs: [{ name: "", type: "string" }]
          }
        ],
        functionName: "uri",
        args: [BigInt(nft.tokenID)]
      });
    }
    throw new EnsAvatarUnsupportedNamespaceError({ namespace: nft.namespace });
  }
  
  // ../../node_modules/viem/_esm/utils/ens/avatar/parseAvatarRecord.js
  async function parseAvatarRecord(client, { gatewayUrls, record }) {
    if (/eip155:/i.test(record))
      return parseNftAvatarUri(client, { gatewayUrls, record });
    return parseAvatarUri({ uri: record, gatewayUrls });
  }
  async function parseNftAvatarUri(client, { gatewayUrls, record }) {
    const nft = parseNftUri(record);
    const nftUri = await getNftTokenUri(client, { nft });
    const { uri: resolvedNftUri, isOnChain, isEncoded } = resolveAvatarUri({ uri: nftUri, gatewayUrls });
    if (isOnChain && (resolvedNftUri.includes("data:application/json;base64,") || resolvedNftUri.startsWith("{"))) {
      const encodedJson = isEncoded ? (
        // if it is encoded, decode it
        atob(resolvedNftUri.replace("data:application/json;base64,", ""))
      ) : (
        // if it isn't encoded assume it is a JSON string, but it could be anything (it will error if it is)
        resolvedNftUri
      );
      const decoded = JSON.parse(encodedJson);
      return parseAvatarUri({ uri: getJsonImage(decoded), gatewayUrls });
    }
    let uriTokenId = nft.tokenID;
    if (nft.namespace === "erc1155")
      uriTokenId = uriTokenId.replace("0x", "").padStart(64, "0");
    return getMetadataAvatarUri({
      gatewayUrls,
      uri: resolvedNftUri.replace(/(?:0x)?{id}/, uriTokenId)
    });
  }
  
  // ../../node_modules/viem/_esm/actions/ens/getEnsText.js
  async function getEnsText(client, { blockNumber, blockTag, name, key, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
      if (!client.chain)
        throw new Error("client chain not configured. universalResolverAddress is required.");
      universalResolverAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "ensUniversalResolver"
      });
    }
    try {
      const readContractParameters = {
        address: universalResolverAddress,
        abi: universalResolverResolveAbi,
        functionName: "resolve",
        args: [
          toHex(packetToBytes(name)),
          encodeFunctionData({
            abi: textResolverAbi,
            functionName: "text",
            args: [namehash(name), key]
          })
        ],
        blockNumber,
        blockTag
      };
      const readContractAction = getAction(client, readContract, "readContract");
      const res = gatewayUrls ? await readContractAction({
        ...readContractParameters,
        args: [...readContractParameters.args, gatewayUrls]
      }) : await readContractAction(readContractParameters);
      if (res[0] === "0x")
        return null;
      const record = decodeFunctionResult({
        abi: textResolverAbi,
        functionName: "text",
        data: res[0]
      });
      return record === "" ? null : record;
    } catch (err) {
      if (strict)
        throw err;
      if (isNullUniversalResolverError(err, "resolve"))
        return null;
      throw err;
    }
  }
  
  // ../../node_modules/viem/_esm/actions/ens/getEnsAvatar.js
  async function getEnsAvatar(client, { blockNumber, blockTag, assetGatewayUrls, name, gatewayUrls, strict, universalResolverAddress }) {
    const record = await getAction(client, getEnsText, "getEnsText")({
      blockNumber,
      blockTag,
      key: "avatar",
      name,
      universalResolverAddress,
      gatewayUrls,
      strict
    });
    if (!record)
      return null;
    try {
      return await parseAvatarRecord(client, {
        record,
        gatewayUrls: assetGatewayUrls
      });
    } catch {
      return null;
    }
  }
  
  // ../../node_modules/viem/_esm/actions/ens/getEnsName.js
  async function getEnsName(client, { address, blockNumber, blockTag, gatewayUrls, strict, universalResolverAddress: universalResolverAddress_ }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
      if (!client.chain)
        throw new Error("client chain not configured. universalResolverAddress is required.");
      universalResolverAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "ensUniversalResolver"
      });
    }
    const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;
    try {
      const readContractParameters = {
        address: universalResolverAddress,
        abi: universalResolverReverseAbi,
        functionName: "reverse",
        args: [toHex(packetToBytes(reverseNode))],
        blockNumber,
        blockTag
      };
      const readContractAction = getAction(client, readContract, "readContract");
      const [name, resolvedAddress] = gatewayUrls ? await readContractAction({
        ...readContractParameters,
        args: [...readContractParameters.args, gatewayUrls]
      }) : await readContractAction(readContractParameters);
      if (address.toLowerCase() !== resolvedAddress.toLowerCase())
        return null;
      return name;
    } catch (err) {
      if (strict)
        throw err;
      if (isNullUniversalResolverError(err, "reverse"))
        return null;
      throw err;
    }
  }
  
  // ../../node_modules/viem/_esm/actions/ens/getEnsResolver.js
  async function getEnsResolver(client, { blockNumber, blockTag, name, universalResolverAddress: universalResolverAddress_ }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
      if (!client.chain)
        throw new Error("client chain not configured. universalResolverAddress is required.");
      universalResolverAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "ensUniversalResolver"
      });
    }
    const [resolverAddress] = await getAction(client, readContract, "readContract")({
      address: universalResolverAddress,
      abi: [
        {
          inputs: [{ type: "bytes" }],
          name: "findResolver",
          outputs: [{ type: "address" }, { type: "bytes32" }],
          stateMutability: "view",
          type: "function"
        }
      ],
      functionName: "findResolver",
      args: [toHex(packetToBytes(name))],
      blockNumber,
      blockTag
    });
    return resolverAddress;
  }
  
  // ../../node_modules/viem/_esm/actions/public/createBlockFilter.js
  async function createBlockFilter(client) {
    const getRequest = createFilterRequestScope(client, {
      method: "eth_newBlockFilter"
    });
    const id = await client.request({
      method: "eth_newBlockFilter"
    });
    return { id, request: getRequest(id), type: "block" };
  }
  
  // ../../node_modules/viem/_esm/actions/public/createEventFilter.js
  async function createEventFilter(client, { address, args, event, events: events_, fromBlock, strict, toBlock } = {}) {
    const events = events_ ?? (event ? [event] : void 0);
    const getRequest = createFilterRequestScope(client, {
      method: "eth_newFilter"
    });
    let topics = [];
    if (events) {
      const encoded = events.flatMap((event2) => encodeEventTopics({
        abi: [event2],
        eventName: event2.name,
        args
      }));
      topics = [encoded];
      if (event)
        topics = topics[0];
    }
    const id = await client.request({
      method: "eth_newFilter",
      params: [
        {
          address,
          fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
          toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock,
          ...topics.length ? { topics } : {}
        }
      ]
    });
    return {
      abi: events,
      args,
      eventName: event ? event.name : void 0,
      fromBlock,
      id,
      request: getRequest(id),
      strict: Boolean(strict),
      toBlock,
      type: "event"
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/createPendingTransactionFilter.js
  async function createPendingTransactionFilter(client) {
    const getRequest = createFilterRequestScope(client, {
      method: "eth_newPendingTransactionFilter"
    });
    const id = await client.request({
      method: "eth_newPendingTransactionFilter"
    });
    return { id, request: getRequest(id), type: "transaction" };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getBlobBaseFee.js
  async function getBlobBaseFee(client) {
    const baseFee = await client.request({
      method: "eth_blobBaseFee"
    });
    return BigInt(baseFee);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getBlockTransactionCount.js
  async function getBlockTransactionCount(client, { blockHash, blockNumber, blockTag = "latest" } = {}) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let count;
    if (blockHash) {
      count = await client.request({
        method: "eth_getBlockTransactionCountByHash",
        params: [blockHash]
      }, { dedupe: true });
    } else {
      count = await client.request({
        method: "eth_getBlockTransactionCountByNumber",
        params: [blockNumberHex || blockTag]
      }, { dedupe: Boolean(blockNumberHex) });
    }
    return hexToNumber(count);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getCode.js
  async function getCode(client, { address, blockNumber, blockTag = "latest" }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const hex = await client.request({
      method: "eth_getCode",
      params: [address, blockNumberHex || blockTag]
    }, { dedupe: Boolean(blockNumberHex) });
    if (hex === "0x")
      return void 0;
    return hex;
  }
  
  // ../../node_modules/viem/_esm/utils/formatters/feeHistory.js
  function formatFeeHistory(feeHistory) {
    return {
      baseFeePerGas: feeHistory.baseFeePerGas.map((value) => BigInt(value)),
      gasUsedRatio: feeHistory.gasUsedRatio,
      oldestBlock: BigInt(feeHistory.oldestBlock),
      reward: feeHistory.reward?.map((reward) => reward.map((value) => BigInt(value)))
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getFeeHistory.js
  async function getFeeHistory(client, { blockCount, blockNumber, blockTag = "latest", rewardPercentiles }) {
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const feeHistory = await client.request({
      method: "eth_feeHistory",
      params: [
        numberToHex(blockCount),
        blockNumberHex || blockTag,
        rewardPercentiles
      ]
    }, { dedupe: Boolean(blockNumberHex) });
    return formatFeeHistory(feeHistory);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getFilterLogs.js
  async function getFilterLogs(_client, { filter }) {
    const strict = filter.strict ?? false;
    const logs = await filter.request({
      method: "eth_getFilterLogs",
      params: [filter.id]
    });
    const formattedLogs = logs.map((log) => formatLog(log));
    if (!filter.abi)
      return formattedLogs;
    return parseEventLogs({
      abi: filter.abi,
      logs: formattedLogs,
      strict
    });
  }
  
  // ../../node_modules/viem/_esm/errors/typedData.js
  var InvalidDomainError = class extends BaseError {
    constructor({ domain }) {
      super(`Invalid domain "${stringify(domain)}".`, {
        metaMessages: ["Must be a valid EIP-712 domain."]
      });
    }
  };
  var InvalidPrimaryTypeError = class extends BaseError {
    constructor({ primaryType, types }) {
      super(`Invalid primary type \`${primaryType}\` must be one of \`${JSON.stringify(Object.keys(types))}\`.`, {
        docsPath: "/api/glossary/Errors#typeddatainvalidprimarytypeerror",
        metaMessages: ["Check that the primary type is a key in `types`."]
      });
    }
  };
  var InvalidStructTypeError = class extends BaseError {
    constructor({ type }) {
      super(`Struct type "${type}" is invalid.`, {
        metaMessages: ["Struct type must not be a Solidity type."],
        name: "InvalidStructTypeError"
      });
    }
  };
  
  // ../../node_modules/viem/_esm/utils/signature/hashTypedData.js
  function hashTypedData(parameters) {
    const { domain = {}, message, primaryType } = parameters;
    const types = {
      EIP712Domain: getTypesForEIP712Domain({ domain }),
      ...parameters.types
    };
    validateTypedData({
      domain,
      message,
      primaryType,
      types
    });
    const parts = ["0x1901"];
    if (domain)
      parts.push(hashDomain({
        domain,
        types
      }));
    if (primaryType !== "EIP712Domain")
      parts.push(hashStruct({
        data: message,
        primaryType,
        types
      }));
    return keccak256(concat(parts));
  }
  function hashDomain({ domain, types }) {
    return hashStruct({
      data: domain,
      primaryType: "EIP712Domain",
      types
    });
  }
  function hashStruct({ data, primaryType, types }) {
    const encoded = encodeData({
      data,
      primaryType,
      types
    });
    return keccak256(encoded);
  }
  function encodeData({ data, primaryType, types }) {
    const encodedTypes = [{ type: "bytes32" }];
    const encodedValues = [hashType({ primaryType, types })];
    for (const field of types[primaryType]) {
      const [type, value] = encodeField({
        types,
        name: field.name,
        type: field.type,
        value: data[field.name]
      });
      encodedTypes.push(type);
      encodedValues.push(value);
    }
    return encodeAbiParameters(encodedTypes, encodedValues);
  }
  function hashType({ primaryType, types }) {
    const encodedHashType = toHex(encodeType({ primaryType, types }));
    return keccak256(encodedHashType);
  }
  function encodeType({ primaryType, types }) {
    let result = "";
    const unsortedDeps = findTypeDependencies({ primaryType, types });
    unsortedDeps.delete(primaryType);
    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];
    for (const type of deps) {
      result += `${type}(${types[type].map(({ name, type: t }) => `${t} ${name}`).join(",")})`;
    }
    return result;
  }
  function findTypeDependencies({ primaryType: primaryType_, types }, results = /* @__PURE__ */ new Set()) {
    const match = primaryType_.match(/^\w*/u);
    const primaryType = match?.[0];
    if (results.has(primaryType) || types[primaryType] === void 0) {
      return results;
    }
    results.add(primaryType);
    for (const field of types[primaryType]) {
      findTypeDependencies({ primaryType: field.type, types }, results);
    }
    return results;
  }
  function encodeField({ types, name, type, value }) {
    if (types[type] !== void 0) {
      return [
        { type: "bytes32" },
        keccak256(encodeData({ data: value, primaryType: type, types }))
      ];
    }
    if (type === "bytes") {
      const prepend = value.length % 2 ? "0" : "";
      value = `0x${prepend + value.slice(2)}`;
      return [{ type: "bytes32" }, keccak256(value)];
    }
    if (type === "string")
      return [{ type: "bytes32" }, keccak256(toHex(value))];
    if (type.lastIndexOf("]") === type.length - 1) {
      const parsedType = type.slice(0, type.lastIndexOf("["));
      const typeValuePairs = value.map((item) => encodeField({
        name,
        type: parsedType,
        types,
        value: item
      }));
      return [
        { type: "bytes32" },
        keccak256(encodeAbiParameters(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))
      ];
    }
    return [{ type }, value];
  }
  
  // ../../node_modules/viem/_esm/utils/typedData.js
  function validateTypedData(parameters) {
    const { domain, message, primaryType, types } = parameters;
    const validateData = (struct, data) => {
      for (const param of struct) {
        const { name, type } = param;
        const value = data[name];
        const integerMatch = type.match(integerRegex);
        if (integerMatch && (typeof value === "number" || typeof value === "bigint")) {
          const [_type, base, size_] = integerMatch;
          numberToHex(value, {
            signed: base === "int",
            size: Number.parseInt(size_) / 8
          });
        }
        if (type === "address" && typeof value === "string" && !isAddress(value))
          throw new InvalidAddressError({ address: value });
        const bytesMatch = type.match(bytesRegex);
        if (bytesMatch) {
          const [_type, size_] = bytesMatch;
          if (size_ && size(value) !== Number.parseInt(size_))
            throw new BytesSizeMismatchError({
              expectedSize: Number.parseInt(size_),
              givenSize: size(value)
            });
        }
        const struct2 = types[type];
        if (struct2) {
          validateReference(type);
          validateData(struct2, value);
        }
      }
    };
    if (types.EIP712Domain && domain) {
      if (typeof domain !== "object")
        throw new InvalidDomainError({ domain });
      validateData(types.EIP712Domain, domain);
    }
    if (primaryType !== "EIP712Domain") {
      if (types[primaryType])
        validateData(types[primaryType], message);
      else
        throw new InvalidPrimaryTypeError({ primaryType, types });
    }
  }
  function getTypesForEIP712Domain({ domain }) {
    return [
      typeof domain?.name === "string" && { name: "name", type: "string" },
      domain?.version && { name: "version", type: "string" },
      typeof domain?.chainId === "number" && {
        name: "chainId",
        type: "uint256"
      },
      domain?.verifyingContract && {
        name: "verifyingContract",
        type: "address"
      },
      domain?.salt && { name: "salt", type: "bytes32" }
    ].filter(Boolean);
  }
  function validateReference(type) {
    if (type === "address" || type === "bool" || type === "string" || type.startsWith("bytes") || type.startsWith("uint") || type.startsWith("int"))
      throw new InvalidStructTypeError({ type });
  }
  
  // ../../node_modules/viem/_esm/utils/formatters/transactionReceipt.js
  var receiptStatuses = {
    "0x0": "reverted",
    "0x1": "success"
  };
  function formatTransactionReceipt(transactionReceipt) {
    const receipt = {
      ...transactionReceipt,
      blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
      contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
      cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
      effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
      gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
      logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
      to: transactionReceipt.to ? transactionReceipt.to : null,
      transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
      status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
      type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
    };
    if (transactionReceipt.blobGasPrice)
      receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
    if (transactionReceipt.blobGasUsed)
      receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
    return receipt;
  }
  
  // ../../node_modules/viem/_esm/constants/strings.js
  var presignMessagePrefix = "Ethereum Signed Message:\n";
  
  // ../../node_modules/viem/_esm/utils/signature/toPrefixedMessage.js
  function toPrefixedMessage(message_) {
    const message = (() => {
      if (typeof message_ === "string")
        return stringToHex(message_);
      if (typeof message_.raw === "string")
        return message_.raw;
      return bytesToHex(message_.raw);
    })();
    const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`);
    return concat([prefix, message]);
  }
  
  // ../../node_modules/viem/_esm/utils/signature/hashMessage.js
  function hashMessage(message, to_) {
    return keccak256(toPrefixedMessage(message), to_);
  }
  
  // ../../node_modules/viem/_esm/constants/bytes.js
  var erc6492MagicBytes = "0x6492649264926492649264926492649264926492649264926492649264926492";
  
  // ../../node_modules/viem/_esm/utils/signature/isErc6492Signature.js
  function isErc6492Signature(signature) {
    return sliceHex(signature, -32) === erc6492MagicBytes;
  }
  
  // ../../node_modules/viem/_esm/utils/signature/serializeErc6492Signature.js
  function serializeErc6492Signature(parameters) {
    const { address, data, signature, to = "hex" } = parameters;
    const signature_ = concatHex([
      encodeAbiParameters([{ type: "address" }, { type: "bytes" }, { type: "bytes" }], [address, data, signature]),
      erc6492MagicBytes
    ]);
    if (to === "hex")
      return signature_;
    return hexToBytes(signature_);
  }
  
  // ../../node_modules/viem/_esm/utils/formatters/proof.js
  function formatStorageProof(storageProof) {
    return storageProof.map((proof) => ({
      ...proof,
      value: BigInt(proof.value)
    }));
  }
  function formatProof(proof) {
    return {
      ...proof,
      balance: proof.balance ? BigInt(proof.balance) : void 0,
      nonce: proof.nonce ? hexToNumber(proof.nonce) : void 0,
      storageProof: proof.storageProof ? formatStorageProof(proof.storageProof) : void 0
    };
  }
  
  // ../../node_modules/viem/_esm/actions/public/getProof.js
  async function getProof(client, { address, blockNumber, blockTag: blockTag_, storageKeys }) {
    const blockTag = blockTag_ ?? "latest";
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const proof = await client.request({
      method: "eth_getProof",
      params: [address, storageKeys, blockNumberHex || blockTag]
    });
    return formatProof(proof);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getStorageAt.js
  async function getStorageAt(client, { address, blockNumber, blockTag = "latest", slot }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const data = await client.request({
      method: "eth_getStorageAt",
      params: [address, slot, blockNumberHex || blockTag]
    });
    return data;
  }
  
  // ../../node_modules/viem/_esm/actions/public/getTransaction.js
  async function getTransaction(client, { blockHash, blockNumber, blockTag: blockTag_, hash, index: index2 }) {
    const blockTag = blockTag_ || "latest";
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let transaction = null;
    if (hash) {
      transaction = await client.request({
        method: "eth_getTransactionByHash",
        params: [hash]
      }, { dedupe: true });
    } else if (blockHash) {
      transaction = await client.request({
        method: "eth_getTransactionByBlockHashAndIndex",
        params: [blockHash, numberToHex(index2)]
      }, { dedupe: true });
    } else if (blockNumberHex || blockTag) {
      transaction = await client.request({
        method: "eth_getTransactionByBlockNumberAndIndex",
        params: [blockNumberHex || blockTag, numberToHex(index2)]
      }, { dedupe: Boolean(blockNumberHex) });
    }
    if (!transaction)
      throw new TransactionNotFoundError({
        blockHash,
        blockNumber,
        blockTag,
        hash,
        index: index2
      });
    const format = client.chain?.formatters?.transaction?.format || formatTransaction;
    return format(transaction);
  }
  
  // ../../node_modules/viem/_esm/actions/public/getTransactionConfirmations.js
  async function getTransactionConfirmations(client, { hash, transactionReceipt }) {
    const [blockNumber, transaction] = await Promise.all([
      getAction(client, getBlockNumber, "getBlockNumber")({}),
      hash ? getAction(client, getTransaction, "getTransaction")({ hash }) : void 0
    ]);
    const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;
    if (!transactionBlockNumber)
      return 0n;
    return blockNumber - transactionBlockNumber + 1n;
  }
  
  // ../../node_modules/viem/_esm/actions/public/getTransactionReceipt.js
  async function getTransactionReceipt(client, { hash }) {
    const receipt = await client.request({
      method: "eth_getTransactionReceipt",
      params: [hash]
    }, { dedupe: true });
    if (!receipt)
      throw new TransactionReceiptNotFoundError({ hash });
    const format = client.chain?.formatters?.transactionReceipt?.format || formatTransactionReceipt;
    return format(receipt);
  }
  
  // ../../node_modules/viem/_esm/actions/public/multicall.js
  async function multicall(client, parameters) {
    const { allowFailure = true, batchSize: batchSize_, blockNumber, blockTag, multicallAddress: multicallAddress_, stateOverride } = parameters;
    const contracts = parameters.contracts;
    const batchSize = batchSize_ ?? (typeof client.batch?.multicall === "object" && client.batch.multicall.batchSize || 1024);
    let multicallAddress = multicallAddress_;
    if (!multicallAddress) {
      if (!client.chain)
        throw new Error("client chain not configured. multicallAddress is required.");
      multicallAddress = getChainContractAddress({
        blockNumber,
        chain: client.chain,
        contract: "multicall3"
      });
    }
    const chunkedCalls = [[]];
    let currentChunk = 0;
    let currentChunkSize = 0;
    for (let i = 0; i < contracts.length; i++) {
      const { abi: abi2, address, args, functionName } = contracts[i];
      try {
        const callData = encodeFunctionData({ abi: abi2, args, functionName });
        currentChunkSize += (callData.length - 2) / 2;
        if (
          // Check if batching is enabled.
          batchSize > 0 && // Check if the current size of the batch exceeds the size limit.
          currentChunkSize > batchSize && // Check if the current chunk is not already empty.
          chunkedCalls[currentChunk].length > 0
        ) {
          currentChunk++;
          currentChunkSize = (callData.length - 2) / 2;
          chunkedCalls[currentChunk] = [];
        }
        chunkedCalls[currentChunk] = [
          ...chunkedCalls[currentChunk],
          {
            allowFailure: true,
            callData,
            target: address
          }
        ];
      } catch (err) {
        const error = getContractError(err, {
          abi: abi2,
          address,
          args,
          docsPath: "/docs/contract/multicall",
          functionName
        });
        if (!allowFailure)
          throw error;
        chunkedCalls[currentChunk] = [
          ...chunkedCalls[currentChunk],
          {
            allowFailure: true,
            callData: "0x",
            target: address
          }
        ];
      }
    }
    const aggregate3Results = await Promise.allSettled(chunkedCalls.map((calls) => getAction(client, readContract, "readContract")({
      abi: multicall3Abi,
      address: multicallAddress,
      args: [calls],
      blockNumber,
      blockTag,
      functionName: "aggregate3",
      stateOverride
    })));
    const results = [];
    for (let i = 0; i < aggregate3Results.length; i++) {
      const result = aggregate3Results[i];
      if (result.status === "rejected") {
        if (!allowFailure)
          throw result.reason;
        for (let j = 0; j < chunkedCalls[i].length; j++) {
          results.push({
            status: "failure",
            error: result.reason,
            result: void 0
          });
        }
        continue;
      }
      const aggregate3Result = result.value;
      for (let j = 0; j < aggregate3Result.length; j++) {
        const { returnData, success } = aggregate3Result[j];
        const { callData } = chunkedCalls[i][j];
        const { abi: abi2, address, functionName, args } = contracts[results.length];
        try {
          if (callData === "0x")
            throw new AbiDecodingZeroDataError();
          if (!success)
            throw new RawContractError({ data: returnData });
          const result2 = decodeFunctionResult({
            abi: abi2,
            args,
            data: returnData,
            functionName
          });
          results.push(allowFailure ? { result: result2, status: "success" } : result2);
        } catch (err) {
          const error = getContractError(err, {
            abi: abi2,
            address,
            args,
            docsPath: "/docs/contract/multicall",
            functionName
          });
          if (!allowFailure)
            throw error;
          results.push({ error, result: void 0, status: "failure" });
        }
      }
    }
    if (results.length !== contracts.length)
      throw new BaseError("multicall results mismatch");
    return results;
  }
  
  // ../../node_modules/viem/_esm/utils/signature/serializeSignature.js
  function serializeSignature({ r, s, to = "hex", v, yParity }) {
    const yParity_ = (() => {
      if (yParity === 0 || yParity === 1)
        return yParity;
      if (v && (v === 27n || v === 28n || v >= 35n))
        return v % 2n === 0n ? 1 : 0;
      throw new Error("Invalid `v` or `yParity` value");
    })();
    const signature = `0x${new secp256k1.Signature(hexToBigInt(r), hexToBigInt(s)).toCompactHex()}${yParity_ === 0 ? "1b" : "1c"}`;
    if (to === "hex")
      return signature;
    return hexToBytes(signature);
  }
  
  // ../../node_modules/viem/_esm/actions/public/verifyHash.js
  async function verifyHash(client, parameters) {
    const { address, factory, factoryData, hash, signature, universalSignatureVerifierAddress = client.chain?.contracts?.universalSignatureVerifier?.address, ...rest } = parameters;
    const signatureHex = (() => {
      if (isHex(signature))
        return signature;
      if (typeof signature === "object" && "r" in signature && "s" in signature)
        return serializeSignature(signature);
      return bytesToHex(signature);
    })();
    const wrappedSignature = await (async () => {
      if (!factory && !factoryData)
        return signatureHex;
      if (isErc6492Signature(signatureHex))
        return signatureHex;
      return serializeErc6492Signature({
        address: factory,
        data: factoryData,
        signature: signatureHex
      });
    })();
    try {
      const args = universalSignatureVerifierAddress ? {
        to: universalSignatureVerifierAddress,
        data: encodeFunctionData({
          abi: universalSignatureValidatorAbi,
          functionName: "isValidSig",
          args: [address, hash, wrappedSignature]
        }),
        ...rest
      } : {
        data: encodeDeployData({
          abi: universalSignatureValidatorAbi,
          args: [address, hash, wrappedSignature],
          bytecode: universalSignatureValidatorByteCode
        }),
        ...rest
      };
      const { data } = await getAction(client, call, "call")(args);
      return hexToBool(data ?? "0x0");
    } catch (error) {
      try {
        const verified = isAddressEqual(getAddress(address), await recoverAddress({ hash, signature }));
        if (verified)
          return true;
      } catch {
      }
      if (error instanceof CallExecutionError) {
        return false;
      }
      throw error;
    }
  }
  
  // ../../node_modules/viem/_esm/actions/public/verifyMessage.js
  async function verifyMessage(client, { address, message, factory, factoryData, signature, ...callRequest }) {
    const hash = hashMessage(message);
    return verifyHash(client, {
      address,
      factory,
      factoryData,
      hash,
      signature,
      ...callRequest
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/verifyTypedData.js
  async function verifyTypedData(client, parameters) {
    const { address, factory, factoryData, signature, message, primaryType, types, domain, ...callRequest } = parameters;
    const hash = hashTypedData({ message, primaryType, types, domain });
    return verifyHash(client, {
      address,
      factory,
      factoryData,
      hash,
      signature,
      ...callRequest
    });
  }
  
  // ../../node_modules/viem/_esm/actions/public/watchBlockNumber.js
  function watchBlockNumber(client, { emitOnBegin = false, emitMissed = false, onBlockNumber, onError, poll: poll_, pollingInterval = client.pollingInterval }) {
    const enablePolling = (() => {
      if (typeof poll_ !== "undefined")
        return poll_;
      if (client.transport.type === "webSocket")
        return false;
      if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
        return false;
      return true;
    })();
    let prevBlockNumber;
    const pollBlockNumber = () => {
      const observerId = stringify([
        "watchBlockNumber",
        client.uid,
        emitOnBegin,
        emitMissed,
        pollingInterval
      ]);
      return observe(observerId, { onBlockNumber, onError }, (emit) => poll(async () => {
        try {
          const blockNumber = await getAction(client, getBlockNumber, "getBlockNumber")({ cacheTime: 0 });
          if (prevBlockNumber) {
            if (blockNumber === prevBlockNumber)
              return;
            if (blockNumber - prevBlockNumber > 1 && emitMissed) {
              for (let i = prevBlockNumber + 1n; i < blockNumber; i++) {
                emit.onBlockNumber(i, prevBlockNumber);
                prevBlockNumber = i;
              }
            }
          }
          if (!prevBlockNumber || blockNumber > prevBlockNumber) {
            emit.onBlockNumber(blockNumber, prevBlockNumber);
            prevBlockNumber = blockNumber;
          }
        } catch (err) {
          emit.onError?.(err);
        }
      }, {
        emitOnBegin,
        interval: pollingInterval
      }));
    };
    const subscribeBlockNumber = () => {
      const observerId = stringify([
        "watchBlockNumber",
        client.uid,
        emitOnBegin,
        emitMissed
      ]);
      return observe(observerId, { onBlockNumber, onError }, (emit) => {
        let active = true;
        let unsubscribe = () => active = false;
        (async () => {
          try {
            const transport = (() => {
              if (client.transport.type === "fallback") {
                const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
                if (!transport2)
                  return client.transport;
                return transport2.value;
              }
              return client.transport;
            })();
            const { unsubscribe: unsubscribe_ } = await transport.subscribe({
              params: ["newHeads"],
              onData(data) {
                if (!active)
                  return;
                const blockNumber = hexToBigInt(data.result?.number);
                emit.onBlockNumber(blockNumber, prevBlockNumber);
                prevBlockNumber = blockNumber;
              },
              onError(error) {
                emit.onError?.(error);
              }
            });
            unsubscribe = unsubscribe_;
            if (!active)
              unsubscribe();
          } catch (err) {
            onError?.(err);
          }
        })();
        return () => unsubscribe();
      });
    };
    return enablePolling ? pollBlockNumber() : subscribeBlockNumber();
  }
  
  // ../../node_modules/viem/_esm/actions/public/waitForTransactionReceipt.js
  async function waitForTransactionReceipt(client, {
    confirmations = 1,
    hash,
    onReplaced,
    pollingInterval = client.pollingInterval,
    retryCount = 6,
    retryDelay = ({ count }) => ~~(1 << count) * 200,
    // exponential backoff
    timeout = 18e4
  }) {
    const observerId = stringify(["waitForTransactionReceipt", client.uid, hash]);
    let transaction;
    let replacedTransaction;
    let receipt;
    let retrying = false;
    const { promise, resolve, reject } = withResolvers();
    const timer = timeout ? setTimeout(() => reject(new WaitForTransactionReceiptTimeoutError({ hash })), timeout) : void 0;
    const _unobserve = observe(observerId, { onReplaced, resolve, reject }, (emit) => {
      const _unwatch = getAction(client, watchBlockNumber, "watchBlockNumber")({
        emitMissed: true,
        emitOnBegin: true,
        poll: true,
        pollingInterval,
        async onBlockNumber(blockNumber_) {
          const done = (fn) => {
            clearTimeout(timer);
            _unwatch();
            fn();
            _unobserve();
          };
          let blockNumber = blockNumber_;
          if (retrying)
            return;
          try {
            if (receipt) {
              if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                return;
              done(() => emit.resolve(receipt));
              return;
            }
            if (!transaction) {
              retrying = true;
              await withRetry(async () => {
                transaction = await getAction(client, getTransaction, "getTransaction")({ hash });
                if (transaction.blockNumber)
                  blockNumber = transaction.blockNumber;
              }, {
                delay: retryDelay,
                retryCount
              });
              retrying = false;
            }
            receipt = await getAction(client, getTransactionReceipt, "getTransactionReceipt")({ hash });
            if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
              return;
            done(() => emit.resolve(receipt));
          } catch (err) {
            if (err instanceof TransactionNotFoundError || err instanceof TransactionReceiptNotFoundError) {
              if (!transaction) {
                retrying = false;
                return;
              }
              try {
                replacedTransaction = transaction;
                retrying = true;
                const block = await withRetry(() => getAction(client, getBlock, "getBlock")({
                  blockNumber,
                  includeTransactions: true
                }), {
                  delay: retryDelay,
                  retryCount,
                  shouldRetry: ({ error }) => error instanceof BlockNotFoundError
                });
                retrying = false;
                const replacementTransaction = block.transactions.find(({ from, nonce }) => from === replacedTransaction.from && nonce === replacedTransaction.nonce);
                if (!replacementTransaction)
                  return;
                receipt = await getAction(client, getTransactionReceipt, "getTransactionReceipt")({
                  hash: replacementTransaction.hash
                });
                if (confirmations > 1 && (!receipt.blockNumber || blockNumber - receipt.blockNumber + 1n < confirmations))
                  return;
                let reason = "replaced";
                if (replacementTransaction.to === replacedTransaction.to && replacementTransaction.value === replacedTransaction.value) {
                  reason = "repriced";
                } else if (replacementTransaction.from === replacementTransaction.to && replacementTransaction.value === 0n) {
                  reason = "cancelled";
                }
                done(() => {
                  emit.onReplaced?.({
                    reason,
                    replacedTransaction,
                    transaction: replacementTransaction,
                    transactionReceipt: receipt
                  });
                  emit.resolve(receipt);
                });
              } catch (err_) {
                done(() => emit.reject(err_));
              }
            } else {
              done(() => emit.reject(err));
            }
          }
        }
      });
    });
    return promise;
  }
  
  // ../../node_modules/viem/_esm/actions/public/watchBlocks.js
  function watchBlocks(client, { blockTag = "latest", emitMissed = false, emitOnBegin = false, onBlock, onError, includeTransactions: includeTransactions_, poll: poll_, pollingInterval = client.pollingInterval }) {
    const enablePolling = (() => {
      if (typeof poll_ !== "undefined")
        return poll_;
      if (client.transport.type === "webSocket")
        return false;
      if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
        return false;
      return true;
    })();
    const includeTransactions = includeTransactions_ ?? false;
    let prevBlock;
    const pollBlocks = () => {
      const observerId = stringify([
        "watchBlocks",
        client.uid,
        blockTag,
        emitMissed,
        emitOnBegin,
        includeTransactions,
        pollingInterval
      ]);
      return observe(observerId, { onBlock, onError }, (emit) => poll(async () => {
        try {
          const block = await getAction(client, getBlock, "getBlock")({
            blockTag,
            includeTransactions
          });
          if (block.number && prevBlock?.number) {
            if (block.number === prevBlock.number)
              return;
            if (block.number - prevBlock.number > 1 && emitMissed) {
              for (let i = prevBlock?.number + 1n; i < block.number; i++) {
                const block2 = await getAction(client, getBlock, "getBlock")({
                  blockNumber: i,
                  includeTransactions
                });
                emit.onBlock(block2, prevBlock);
                prevBlock = block2;
              }
            }
          }
          if (
            // If no previous block exists, emit.
            !prevBlock?.number || // If the block tag is "pending" with no block number, emit.
            blockTag === "pending" && !block?.number || // If the next block number is greater than the previous block number, emit.
            // We don't want to emit blocks in the past.
            block.number && block.number > prevBlock.number
          ) {
            emit.onBlock(block, prevBlock);
            prevBlock = block;
          }
        } catch (err) {
          emit.onError?.(err);
        }
      }, {
        emitOnBegin,
        interval: pollingInterval
      }));
    };
    const subscribeBlocks = () => {
      let active = true;
      let emitFetched = true;
      let unsubscribe = () => active = false;
      (async () => {
        try {
          if (emitOnBegin) {
            getAction(client, getBlock, "getBlock")({
              blockTag,
              includeTransactions
            }).then((block) => {
              if (!active)
                return;
              if (!emitFetched)
                return;
              onBlock(block, void 0);
              emitFetched = false;
            });
          }
          const transport = (() => {
            if (client.transport.type === "fallback") {
              const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
              if (!transport2)
                return client.transport;
              return transport2.value;
            }
            return client.transport;
          })();
          const { unsubscribe: unsubscribe_ } = await transport.subscribe({
            params: ["newHeads"],
            async onData(data) {
              if (!active)
                return;
              const block = await getAction(client, getBlock, "getBlock")({
                blockNumber: data.blockNumber,
                includeTransactions
              }).catch(() => {
              });
              if (!active)
                return;
              onBlock(block, prevBlock);
              emitFetched = false;
              prevBlock = block;
            },
            onError(error) {
              onError?.(error);
            }
          });
          unsubscribe = unsubscribe_;
          if (!active)
            unsubscribe();
        } catch (err) {
          onError?.(err);
        }
      })();
      return () => unsubscribe();
    };
    return enablePolling ? pollBlocks() : subscribeBlocks();
  }
  
  // ../../node_modules/viem/_esm/actions/public/watchEvent.js
  function watchEvent(client, { address, args, batch = true, event, events, fromBlock, onError, onLogs, poll: poll_, pollingInterval = client.pollingInterval, strict: strict_ }) {
    const enablePolling = (() => {
      if (typeof poll_ !== "undefined")
        return poll_;
      if (typeof fromBlock === "bigint")
        return true;
      if (client.transport.type === "webSocket")
        return false;
      if (client.transport.type === "fallback" && client.transport.transports[0].config.type === "webSocket")
        return false;
      return true;
    })();
    const strict = strict_ ?? false;
    const pollEvent = () => {
      const observerId = stringify([
        "watchEvent",
        address,
        args,
        batch,
        client.uid,
        event,
        pollingInterval,
        fromBlock
      ]);
      return observe(observerId, { onLogs, onError }, (emit) => {
        let previousBlockNumber;
        if (fromBlock !== void 0)
          previousBlockNumber = fromBlock - 1n;
        let filter;
        let initialized = false;
        const unwatch = poll(async () => {
          if (!initialized) {
            try {
              filter = await getAction(client, createEventFilter, "createEventFilter")({
                address,
                args,
                event,
                events,
                strict,
                fromBlock
              });
            } catch {
            }
            initialized = true;
            return;
          }
          try {
            let logs;
            if (filter) {
              logs = await getAction(client, getFilterChanges, "getFilterChanges")({ filter });
            } else {
              const blockNumber = await getAction(client, getBlockNumber, "getBlockNumber")({});
              if (previousBlockNumber && previousBlockNumber !== blockNumber) {
                logs = await getAction(client, getLogs, "getLogs")({
                  address,
                  args,
                  event,
                  events,
                  fromBlock: previousBlockNumber + 1n,
                  toBlock: blockNumber
                });
              } else {
                logs = [];
              }
              previousBlockNumber = blockNumber;
            }
            if (logs.length === 0)
              return;
            if (batch)
              emit.onLogs(logs);
            else
              for (const log of logs)
                emit.onLogs([log]);
          } catch (err) {
            if (filter && err instanceof InvalidInputRpcError)
              initialized = false;
            emit.onError?.(err);
          }
        }, {
          emitOnBegin: true,
          interval: pollingInterval
        });
        return async () => {
          if (filter)
            await getAction(client, uninstallFilter, "uninstallFilter")({ filter });
          unwatch();
        };
      });
    };
    const subscribeEvent = () => {
      let active = true;
      let unsubscribe = () => active = false;
      (async () => {
        try {
          const transport = (() => {
            if (client.transport.type === "fallback") {
              const transport2 = client.transport.transports.find((transport3) => transport3.config.type === "webSocket");
              if (!transport2)
                return client.transport;
              return transport2.value;
            }
            return client.transport;
          })();
          const events_ = events ?? (event ? [event] : void 0);
          let topics = [];
          if (events_) {
            const encoded = events_.flatMap((event2) => encodeEventTopics({
              abi: [event2],
              eventName: event2.name,
              args
            }));
            topics = [encoded];
            if (event)
              topics = topics[0];
          }
          const { unsubscribe: unsubscribe_ } = await transport.subscribe({
            params: ["logs", { address, topics }],
            onData(data) {
              if (!active)
                return;
              const log = data.result;
              try {
                const { eventName, args: args2 } = decodeEventLog({
                  abi: events_ ?? [],
                  data: log.data,
                  topics: log.topics,
                  strict
                });
                const formatted = formatLog(log, { args: args2, eventName });
                onLogs([formatted]);
              } catch (err) {
                let eventName;
                let isUnnamed;
                if (err instanceof DecodeLogDataMismatch || err instanceof DecodeLogTopicsMismatch) {
                  if (strict_)
                    return;
                  eventName = err.abiItem.name;
                  isUnnamed = err.abiItem.inputs?.some((x) => !("name" in x && x.name));
                }
                const formatted = formatLog(log, {
                  args: isUnnamed ? [] : {},
                  eventName
                });
                onLogs([formatted]);
              }
            },
            onError(error) {
              onError?.(error);
            }
          });
          unsubscribe = unsubscribe_;
          if (!active)
            unsubscribe();
        } catch (err) {
          onError?.(err);
        }
      })();
      return () => unsubscribe();
    };
    return enablePolling ? pollEvent() : subscribeEvent();
  }
  
  // ../../node_modules/viem/_esm/actions/public/watchPendingTransactions.js
  function watchPendingTransactions(client, { batch = true, onError, onTransactions, poll: poll_, pollingInterval = client.pollingInterval }) {
    const enablePolling = typeof poll_ !== "undefined" ? poll_ : client.transport.type !== "webSocket";
    const pollPendingTransactions = () => {
      const observerId = stringify([
        "watchPendingTransactions",
        client.uid,
        batch,
        pollingInterval
      ]);
      return observe(observerId, { onTransactions, onError }, (emit) => {
        let filter;
        const unwatch = poll(async () => {
          try {
            if (!filter) {
              try {
                filter = await getAction(client, createPendingTransactionFilter, "createPendingTransactionFilter")({});
                return;
              } catch (err) {
                unwatch();
                throw err;
              }
            }
            const hashes = await getAction(client, getFilterChanges, "getFilterChanges")({ filter });
            if (hashes.length === 0)
              return;
            if (batch)
              emit.onTransactions(hashes);
            else
              for (const hash of hashes)
                emit.onTransactions([hash]);
          } catch (err) {
            emit.onError?.(err);
          }
        }, {
          emitOnBegin: true,
          interval: pollingInterval
        });
        return async () => {
          if (filter)
            await getAction(client, uninstallFilter, "uninstallFilter")({ filter });
          unwatch();
        };
      });
    };
    const subscribePendingTransactions = () => {
      let active = true;
      let unsubscribe = () => active = false;
      (async () => {
        try {
          const { unsubscribe: unsubscribe_ } = await client.transport.subscribe({
            params: ["newPendingTransactions"],
            onData(data) {
              if (!active)
                return;
              const transaction = data.result;
              onTransactions([transaction]);
            },
            onError(error) {
              onError?.(error);
            }
          });
          unsubscribe = unsubscribe_;
          if (!active)
            unsubscribe();
        } catch (err) {
          onError?.(err);
        }
      })();
      return () => unsubscribe();
    };
    return enablePolling ? pollPendingTransactions() : subscribePendingTransactions();
  }
  
  // ../../node_modules/viem/_esm/utils/siwe/parseSiweMessage.js
  function parseSiweMessage(message) {
    const { scheme, statement, ...prefix } = message.match(prefixRegex)?.groups ?? {};
    const { chainId, expirationTime, issuedAt, notBefore, requestId, ...suffix } = message.match(suffixRegex)?.groups ?? {};
    const resources = message.split("Resources:")[1]?.split("\n- ").slice(1);
    return {
      ...prefix,
      ...suffix,
      ...chainId ? { chainId: Number(chainId) } : {},
      ...expirationTime ? { expirationTime: new Date(expirationTime) } : {},
      ...issuedAt ? { issuedAt: new Date(issuedAt) } : {},
      ...notBefore ? { notBefore: new Date(notBefore) } : {},
      ...requestId ? { requestId } : {},
      ...resources ? { resources } : {},
      ...scheme ? { scheme } : {},
      ...statement ? { statement } : {}
    };
  }
  var prefixRegex = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\/\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\n)(?<address>0x[a-fA-F0-9]{40})\n\n(?:(?<statement>.*)\n\n)?/;
  var suffixRegex = /(?:URI: (?<uri>.+))\n(?:Version: (?<version>.+))\n(?:Chain ID: (?<chainId>\d+))\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\n(?:Issued At: (?<issuedAt>.+))(?:\nExpiration Time: (?<expirationTime>.+))?(?:\nNot Before: (?<notBefore>.+))?(?:\nRequest ID: (?<requestId>.+))?/;
  
  // ../../node_modules/viem/_esm/utils/siwe/validateSiweMessage.js
  function validateSiweMessage(parameters) {
    const { address, domain, message, nonce, scheme, time = /* @__PURE__ */ new Date() } = parameters;
    if (domain && message.domain !== domain)
      return false;
    if (nonce && message.nonce !== nonce)
      return false;
    if (scheme && message.scheme !== scheme)
      return false;
    if (message.expirationTime && time >= message.expirationTime)
      return false;
    if (message.notBefore && time < message.notBefore)
      return false;
    try {
      if (!message.address)
        return false;
      if (address && !isAddressEqual(message.address, address))
        return false;
    } catch {
      return false;
    }
    return true;
  }
  
  // ../../node_modules/viem/_esm/actions/siwe/verifySiweMessage.js
  async function verifySiweMessage(client, parameters) {
    const { address, domain, message, nonce, scheme, signature, time = /* @__PURE__ */ new Date(), ...callRequest } = parameters;
    const parsed = parseSiweMessage(message);
    if (!parsed.address)
      return false;
    const isValid = validateSiweMessage({
      address,
      domain,
      message: parsed,
      nonce,
      scheme,
      time
    });
    if (!isValid)
      return false;
    const hash = hashMessage(message);
    return verifyHash(client, {
      address: parsed.address,
      hash,
      signature,
      ...callRequest
    });
  }
  
  // ../../node_modules/viem/_esm/clients/decorators/public.js
  function publicActions(client) {
    return {
      call: (args) => call(client, args),
      createBlockFilter: () => createBlockFilter(client),
      createContractEventFilter: (args) => createContractEventFilter(client, args),
      createEventFilter: (args) => createEventFilter(client, args),
      createPendingTransactionFilter: () => createPendingTransactionFilter(client),
      estimateContractGas: (args) => estimateContractGas(client, args),
      estimateGas: (args) => estimateGas(client, args),
      getBalance: (args) => getBalance(client, args),
      getBlobBaseFee: () => getBlobBaseFee(client),
      getBlock: (args) => getBlock(client, args),
      getBlockNumber: (args) => getBlockNumber(client, args),
      getBlockTransactionCount: (args) => getBlockTransactionCount(client, args),
      getBytecode: (args) => getCode(client, args),
      getChainId: () => getChainId(client),
      getCode: (args) => getCode(client, args),
      getContractEvents: (args) => getContractEvents(client, args),
      getEip712Domain: (args) => getEip712Domain(client, args),
      getEnsAddress: (args) => getEnsAddress(client, args),
      getEnsAvatar: (args) => getEnsAvatar(client, args),
      getEnsName: (args) => getEnsName(client, args),
      getEnsResolver: (args) => getEnsResolver(client, args),
      getEnsText: (args) => getEnsText(client, args),
      getFeeHistory: (args) => getFeeHistory(client, args),
      estimateFeesPerGas: (args) => estimateFeesPerGas(client, args),
      getFilterChanges: (args) => getFilterChanges(client, args),
      getFilterLogs: (args) => getFilterLogs(client, args),
      getGasPrice: () => getGasPrice(client),
      getLogs: (args) => getLogs(client, args),
      getProof: (args) => getProof(client, args),
      estimateMaxPriorityFeePerGas: (args) => estimateMaxPriorityFeePerGas(client, args),
      getStorageAt: (args) => getStorageAt(client, args),
      getTransaction: (args) => getTransaction(client, args),
      getTransactionConfirmations: (args) => getTransactionConfirmations(client, args),
      getTransactionCount: (args) => getTransactionCount(client, args),
      getTransactionReceipt: (args) => getTransactionReceipt(client, args),
      multicall: (args) => multicall(client, args),
      prepareTransactionRequest: (args) => prepareTransactionRequest(client, args),
      readContract: (args) => readContract(client, args),
      sendRawTransaction: (args) => sendRawTransaction(client, args),
      simulateContract: (args) => simulateContract(client, args),
      verifyMessage: (args) => verifyMessage(client, args),
      verifySiweMessage: (args) => verifySiweMessage(client, args),
      verifyTypedData: (args) => verifyTypedData(client, args),
      uninstallFilter: (args) => uninstallFilter(client, args),
      waitForTransactionReceipt: (args) => waitForTransactionReceipt(client, args),
      watchBlocks: (args) => watchBlocks(client, args),
      watchBlockNumber: (args) => watchBlockNumber(client, args),
      watchContractEvent: (args) => watchContractEvent(client, args),
      watchEvent: (args) => watchEvent(client, args),
      watchPendingTransactions: (args) => watchPendingTransactions(client, args)
    };
  }
  
  // ../../node_modules/viem/_esm/clients/createPublicClient.js
  function createPublicClient(parameters) {
    const { key = "public", name = "Public Client" } = parameters;
    const client = createClient({
      ...parameters,
      key,
      name,
      type: "publicClient"
    });
    return client.extend(publicActions);
  }
  
  // src/generation.ts
  async function trimTokens(context, maxTokens, runtime) {
    if (!context) return "";
    if (maxTokens <= 0) throw new Error("maxTokens must be positive");
    const tokenizerModel = runtime.getSetting("TOKENIZER_MODEL");
    const tokenizerType = runtime.getSetting("TOKENIZER_TYPE");
    if (!tokenizerModel || !tokenizerType) {
      return truncateTiktoken("gpt-4o", context, maxTokens);
    }
    if (tokenizerType === "auto" /* Auto */) {
      return truncateAuto(tokenizerModel, context, maxTokens);
    }
    if (tokenizerType === "tiktoken" /* TikToken */) {
      return truncateTiktoken(
        tokenizerModel,
        context,
        maxTokens
      );
    }
    elizaLogger.warn(`Unsupported tokenizer type: ${tokenizerType}`);
    return truncateTiktoken("gpt-4o", context, maxTokens);
  }
  async function truncateAuto(modelPath, context, maxTokens) {
    try {
      const tokenizer = await __webpack_exports__AutoTokenizer.from_pretrained(modelPath);
      const tokens = tokenizer.encode(context);
      if (tokens.length <= maxTokens) {
        return context;
      }
      const truncatedTokens = tokens.slice(-maxTokens);
      return tokenizer.decode(truncatedTokens);
    } catch (error) {
      elizaLogger.error("Error in trimTokens:", error);
      return context.slice(-maxTokens * 4);
    }
  }
  async function truncateTiktoken(model, context, maxTokens) {
    try {
      const encoding = encodingForModel(model);
      const tokens = encoding.encode(context);
      if (tokens.length <= maxTokens) {
        return context;
      }
      const truncatedTokens = tokens.slice(-maxTokens);
      return encoding.decode(truncatedTokens);
    } catch (error) {
      elizaLogger.error("Error in trimTokens:", error);
      return context.slice(-maxTokens * 4);
    }
  }
  async function getOnChainEternalAISystemPrompt(runtime) {
    const agentId = runtime.getSetting("ETERNALAI_AGENT_ID");
    const providerUrl = runtime.getSetting("ETERNALAI_RPC_URL");
    const contractAddress = runtime.getSetting(
      "ETERNALAI_AGENT_CONTRACT_ADDRESS"
    );
    if (agentId && providerUrl && contractAddress) {
      const contractABI = [
        {
          inputs: [
            {
              internalType: "uint256",
              name: "_agentId",
              type: "uint256"
            }
          ],
          name: "getAgentSystemPrompt",
          outputs: [
            { internalType: "bytes[]", name: "", type: "bytes[]" }
          ],
          stateMutability: "view",
          type: "function"
        }
      ];
      const publicClient = createPublicClient({
        transport: http(providerUrl)
      });
      try {
        const validAddress = contractAddress;
        const result = await publicClient.readContract({
          address: validAddress,
          abi: contractABI,
          functionName: "getAgentSystemPrompt",
          args: [new bignumber_default(agentId)]
        });
        if (result) {
          elizaLogger.info("on-chain system-prompt response", result[0]);
          const value = result[0].toString().replace("0x", "");
          const content = Buffer2.from(value, "hex").toString("utf-8");
          elizaLogger.info("on-chain system-prompt", content);
          return await fetchEternalAISystemPrompt(runtime, content);
        } else {
          return void 0;
        }
      } catch (error) {
        elizaLogger.error(error);
        elizaLogger.error("err", error);
      }
    }
    return void 0;
  }
  async function fetchEternalAISystemPrompt(runtime, content) {
    const IPFS = "ipfs://";
    const containsSubstring = content.includes(IPFS);
    if (containsSubstring) {
      const lightHouse = content.replace(
        IPFS,
        "https://gateway.lighthouse.storage/ipfs/"
      );
      elizaLogger.info("fetch lightHouse", lightHouse);
      const responseLH = await fetch(lightHouse, {
        method: "GET"
      });
      elizaLogger.info("fetch lightHouse resp", responseLH);
      if (responseLH.ok) {
        const data = await responseLH.text();
        return data;
      } else {
        const gcs = content.replace(
          IPFS,
          "https://cdn.eternalai.org/upload/"
        );
        elizaLogger.info("fetch gcs", gcs);
        const responseGCS = await fetch(gcs, {
          method: "GET"
        });
        elizaLogger.info("fetch lightHouse gcs", responseGCS);
        if (responseGCS.ok) {
          const data = await responseGCS.text();
          return data;
        } else {
          throw new Error("invalid on-chain system prompt");
        }
      }
    } else {
      return content;
    }
  }
  function getCloudflareGatewayBaseURL(runtime, provider) {
    const isCloudflareEnabled = runtime.getSetting("CLOUDFLARE_GW_ENABLED") === "true";
    const cloudflareAccountId = runtime.getSetting("CLOUDFLARE_AI_ACCOUNT_ID");
    const cloudflareGatewayId = runtime.getSetting("CLOUDFLARE_AI_GATEWAY_ID");
    elizaLogger.debug("Cloudflare Gateway Configuration:", {
      isEnabled: isCloudflareEnabled,
      hasAccountId: !!cloudflareAccountId,
      hasGatewayId: !!cloudflareGatewayId,
      provider
    });
    if (!isCloudflareEnabled) {
      elizaLogger.debug("Cloudflare Gateway is not enabled");
      return void 0;
    }
    if (!cloudflareAccountId) {
      elizaLogger.warn(
        "Cloudflare Gateway is enabled but CLOUDFLARE_AI_ACCOUNT_ID is not set"
      );
      return void 0;
    }
    if (!cloudflareGatewayId) {
      elizaLogger.warn(
        "Cloudflare Gateway is enabled but CLOUDFLARE_AI_GATEWAY_ID is not set"
      );
      return void 0;
    }
    const baseURL = `https://gateway.ai.cloudflare.com/v1/${cloudflareAccountId}/${cloudflareGatewayId}/${provider.toLowerCase()}`;
    elizaLogger.info("Using Cloudflare Gateway:", {
      provider,
      baseURL,
      accountId: cloudflareAccountId,
      gatewayId: cloudflareGatewayId
    });
    return baseURL;
  }
  async function generateText({
    runtime,
    context,
    modelClass,
    tools = {},
    onStepFinish,
    maxSteps = 1,
    stop,
    customSystemPrompt,
    verifiableInference = process.env.VERIFIABLE_INFERENCE_ENABLED === "true",
    verifiableInferenceOptions
  }) {
    if (!context) {
      console.error("generateText context is empty");
      return "";
    }
    elizaLogger.log("Generating text...");
    elizaLogger.info("Generating text with options:", {
      modelProvider: runtime.modelProvider,
      model: modelClass,
      verifiableInference
    });
    elizaLogger.log("Using provider:", runtime.modelProvider);
    if (verifiableInference && runtime.verifiableInferenceAdapter) {
      elizaLogger.log(
        "Using verifiable inference adapter:",
        runtime.verifiableInferenceAdapter
      );
      try {
        const result = await runtime.verifiableInferenceAdapter.generateText(
          context,
          modelClass,
          verifiableInferenceOptions
        );
        elizaLogger.log("Verifiable inference result:", result);
        const isValid = await runtime.verifiableInferenceAdapter.verifyProof(result);
        if (!isValid) {
          throw new Error("Failed to verify inference proof");
        }
        return result.text;
      } catch (error) {
        elizaLogger.error("Error in verifiable inference:", error);
        throw error;
      }
    }
    const provider = runtime.modelProvider;
    elizaLogger.debug("Provider settings:", {
      provider,
      hasRuntime: !!runtime,
      runtimeSettings: {
        CLOUDFLARE_GW_ENABLED: runtime.getSetting("CLOUDFLARE_GW_ENABLED"),
        CLOUDFLARE_AI_ACCOUNT_ID: runtime.getSetting(
          "CLOUDFLARE_AI_ACCOUNT_ID"
        ),
        CLOUDFLARE_AI_GATEWAY_ID: runtime.getSetting(
          "CLOUDFLARE_AI_GATEWAY_ID"
        )
      }
    });
    const endpoint = runtime.character.modelEndpointOverride || getEndpoint(provider);
    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);
    let model = modelSettings.name;
    switch (provider) {
      // if runtime.getSetting("LLAMACLOUD_MODEL_LARGE") is true and modelProvider is LLAMACLOUD, then use the large model
      case "llama_cloud" /* LLAMACLOUD */:
        {
          switch (modelClass) {
            case "large" /* LARGE */:
              {
                model = runtime.getSetting("LLAMACLOUD_MODEL_LARGE") || model;
              }
              break;
            case "small" /* SMALL */:
              {
                model = runtime.getSetting("LLAMACLOUD_MODEL_SMALL") || model;
              }
              break;
          }
        }
        break;
      case "together" /* TOGETHER */:
        {
          switch (modelClass) {
            case "large" /* LARGE */:
              {
                model = runtime.getSetting("TOGETHER_MODEL_LARGE") || model;
              }
              break;
            case "small" /* SMALL */:
              {
                model = runtime.getSetting("TOGETHER_MODEL_SMALL") || model;
              }
              break;
          }
        }
        break;
      case "openrouter" /* OPENROUTER */:
        {
          switch (modelClass) {
            case "large" /* LARGE */:
              {
                model = runtime.getSetting("LARGE_OPENROUTER_MODEL") || model;
              }
              break;
            case "small" /* SMALL */:
              {
                model = runtime.getSetting("SMALL_OPENROUTER_MODEL") || model;
              }
              break;
          }
        }
        break;
    }
    elizaLogger.info("Selected model:", model);
    const modelConfiguration = runtime.character?.settings?.modelConfig;
    const temperature = modelConfiguration?.temperature || modelSettings.temperature;
    const frequency_penalty = modelConfiguration?.frequency_penalty || modelSettings.frequency_penalty;
    const presence_penalty = modelConfiguration?.presence_penalty || modelSettings.presence_penalty;
    const max_context_length = modelConfiguration?.maxInputTokens || modelSettings.maxInputTokens;
    const max_response_length = modelConfiguration?.max_response_length || modelSettings.maxOutputTokens;
    const experimental_telemetry = modelConfiguration?.experimental_telemetry || modelSettings.experimental_telemetry;
    const apiKey = runtime.token;
    try {
      elizaLogger.debug(
        `Trimming context to max length of ${max_context_length} tokens.`
      );
      context = await trimTokens(context, max_context_length, runtime);
      let response;
      const _stop = stop || modelSettings.stop;
      elizaLogger.debug(
        `Using provider: ${provider}, model: ${model}, temperature: ${temperature}, max response length: ${max_response_length}`
      );
      switch (provider) {
        // OPENAI & LLAMACLOUD shared same structure.
        case "openai" /* OPENAI */:
        case "ali_bailian" /* ALI_BAILIAN */:
        case "volengine" /* VOLENGINE */:
        case "llama_cloud" /* LLAMACLOUD */:
        case "nanogpt" /* NANOGPT */:
        case "hyperbolic" /* HYPERBOLIC */:
        case "together" /* TOGETHER */:
        case "nineteen_ai" /* NINETEEN_AI */:
        case "akash_chat_api" /* AKASH_CHAT_API */:
        case "lmstudio" /* LMSTUDIO */: {
          elizaLogger.debug(
            "Initializing OpenAI model with Cloudflare check"
          );
          const baseURL2 = getCloudflareGatewayBaseURL(runtime, "openai") || endpoint;
          const openai = createOpenAI({
            apiKey,
            baseURL: baseURL2,
            fetch: runtime.fetch
          });
          const { text: openaiResponse } = await aiGenerateText({
            model: openai.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = openaiResponse;
          console.log("Received response from OpenAI model.");
          break;
        }
        case "eternalai" /* ETERNALAI */: {
          elizaLogger.debug("Initializing EternalAI model.");
          const openai = createOpenAI({
            apiKey,
            baseURL: endpoint,
            fetch: async (input, init) => {
              const url = typeof input === "string" ? input : input.toString();
              const chain_id = runtime.getSetting("ETERNALAI_CHAIN_ID") || "45762";
              const options2 = { ...init };
              if (options2?.body) {
                const body = JSON.parse(options2.body);
                body.chain_id = chain_id;
                options2.body = JSON.stringify(body);
              }
              const fetching = await runtime.fetch(url, options2);
              if (parseBooleanFromText(
                runtime.getSetting("ETERNALAI_LOG")
              )) {
                elizaLogger.info(
                  "Request data: ",
                  JSON.stringify(options2, null, 2)
                );
                const clonedResponse = fetching.clone();
                try {
                  clonedResponse.json().then((data) => {
                    elizaLogger.info(
                      "Response data: ",
                      JSON.stringify(data, null, 2)
                    );
                  });
                } catch (e) {
                  elizaLogger.debug(e);
                }
              }
              return fetching;
            }
          });
          let system_prompt = runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0;
          try {
            const on_chain_system_prompt = await getOnChainEternalAISystemPrompt(runtime);
            if (!on_chain_system_prompt) {
              elizaLogger.error(
                new Error("invalid on_chain_system_prompt")
              );
            } else {
              system_prompt = on_chain_system_prompt;
              elizaLogger.info(
                "new on-chain system prompt",
                system_prompt
              );
            }
          } catch (e) {
            elizaLogger.error(e);
          }
          const { text: openaiResponse } = await aiGenerateText({
            model: openai.languageModel(model),
            prompt: context,
            system: system_prompt,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty
          });
          response = openaiResponse;
          elizaLogger.debug("Received response from EternalAI model.");
          break;
        }
        case "google" /* GOOGLE */: {
          const google = createGoogleGenerativeAI({
            apiKey,
            fetch: runtime.fetch
          });
          const { text: googleResponse } = await aiGenerateText({
            model: google(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = googleResponse;
          elizaLogger.debug("Received response from Google model.");
          break;
        }
        case "mistral" /* MISTRAL */: {
          const mistral = createMistral();
          const { text: mistralResponse } = await aiGenerateText({
            model: mistral(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty
          });
          response = mistralResponse;
          elizaLogger.debug("Received response from Mistral model.");
          break;
        }
        case "anthropic" /* ANTHROPIC */: {
          elizaLogger.debug(
            "Initializing Anthropic model with Cloudflare check"
          );
          const baseURL2 = getCloudflareGatewayBaseURL(runtime, "anthropic") || "https://api.anthropic.com/v1";
          elizaLogger.debug("Anthropic baseURL result:", { baseURL: baseURL2 });
          const anthropic = createAnthropic({
            apiKey,
            baseURL: baseURL2,
            fetch: runtime.fetch
          });
          const { text: anthropicResponse } = await aiGenerateText({
            model: anthropic.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = anthropicResponse;
          elizaLogger.debug("Received response from Anthropic model.");
          break;
        }
        case "claude_vertex" /* CLAUDE_VERTEX */: {
          elizaLogger.debug("Initializing Claude Vertex model.");
          const anthropic = createAnthropic({
            apiKey,
            fetch: runtime.fetch
          });
          const { text: anthropicResponse } = await aiGenerateText({
            model: anthropic.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = anthropicResponse;
          elizaLogger.debug(
            "Received response from Claude Vertex model."
          );
          break;
        }
        case "grok" /* GROK */: {
          elizaLogger.debug("Initializing Grok model.");
          const grok = createOpenAI({
            apiKey,
            baseURL: endpoint,
            fetch: runtime.fetch
          });
          const { text: grokResponse } = await aiGenerateText({
            model: grok.languageModel(model, {
              parallelToolCalls: false
            }),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = grokResponse;
          elizaLogger.debug("Received response from Grok model.");
          break;
        }
        case "groq" /* GROQ */: {
          elizaLogger.debug(
            "Initializing Groq model with Cloudflare check"
          );
          const baseURL2 = getCloudflareGatewayBaseURL(runtime, "groq");
          elizaLogger.debug("Groq baseURL result:", { baseURL: baseURL2 });
          const groq = createGroq({
            apiKey,
            fetch: runtime.fetch,
            baseURL: baseURL2
          });
          const { text: groqResponse } = await aiGenerateText({
            model: groq.languageModel(model),
            prompt: context,
            temperature,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = groqResponse;
          elizaLogger.debug("Received response from Groq model.");
          break;
        }
        case "llama_local" /* LLAMALOCAL */: {
          elizaLogger.debug(
            "Using local Llama model for text completion."
          );
          const textGenerationService = runtime.getService(
            "text_generation" /* TEXT_GENERATION */
          );
          if (!textGenerationService) {
            throw new Error("Text generation service not found");
          }
          response = await textGenerationService.queueTextCompletion(
            context,
            temperature,
            _stop,
            frequency_penalty,
            presence_penalty,
            max_response_length
          );
          elizaLogger.debug("Received response from local Llama model.");
          break;
        }
        case "redpill" /* REDPILL */: {
          elizaLogger.debug("Initializing RedPill model.");
          const serverUrl = getEndpoint(provider);
          const openai = createOpenAI({
            apiKey,
            baseURL: serverUrl,
            fetch: runtime.fetch
          });
          const { text: redpillResponse } = await aiGenerateText({
            model: openai.languageModel(model),
            prompt: context,
            temperature,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = redpillResponse;
          elizaLogger.debug("Received response from redpill model.");
          break;
        }
        case "openrouter" /* OPENROUTER */: {
          elizaLogger.debug("Initializing OpenRouter model.");
          const serverUrl = getEndpoint(provider);
          const openrouter = createOpenAI({
            apiKey,
            baseURL: serverUrl,
            fetch: runtime.fetch
          });
          const { text: openrouterResponse } = await aiGenerateText({
            model: openrouter.languageModel(model),
            prompt: context,
            temperature,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = openrouterResponse;
          elizaLogger.debug("Received response from OpenRouter model.");
          break;
        }
        case "ollama" /* OLLAMA */:
          {
            elizaLogger.debug("Initializing Ollama model.");
            const ollamaProvider = createOllama({
              baseURL: getEndpoint(provider) + "/api",
              fetch: runtime.fetch
            });
            const ollama = ollamaProvider(model);
            elizaLogger.debug("****** MODEL\n", model);
            const { text: ollamaResponse } = await aiGenerateText({
              model: ollama,
              prompt: context,
              tools,
              onStepFinish,
              temperature,
              maxSteps,
              maxTokens: max_response_length,
              frequencyPenalty: frequency_penalty,
              presencePenalty: presence_penalty,
              experimental_telemetry
            });
            response = ollamaResponse;
          }
          elizaLogger.debug("Received response from Ollama model.");
          break;
        case "heurist" /* HEURIST */: {
          elizaLogger.debug("Initializing Heurist model.");
          const heurist = createOpenAI({
            apiKey,
            baseURL: endpoint,
            fetch: runtime.fetch
          });
          const { text: heuristResponse } = await aiGenerateText({
            model: heurist.languageModel(model),
            prompt: context,
            system: customSystemPrompt ?? runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            temperature,
            maxTokens: max_response_length,
            maxSteps,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = heuristResponse;
          elizaLogger.debug("Received response from Heurist model.");
          break;
        }
        case "gaianet" /* GAIANET */: {
          elizaLogger.debug("Initializing GAIANET model.");
          var baseURL = getEndpoint(provider);
          if (!baseURL) {
            switch (modelClass) {
              case "small" /* SMALL */:
                baseURL = settings_default.SMALL_GAIANET_SERVER_URL || "https://llama3b.gaia.domains/v1";
                break;
              case "medium" /* MEDIUM */:
                baseURL = settings_default.MEDIUM_GAIANET_SERVER_URL || "https://llama8b.gaia.domains/v1";
                break;
              case "large" /* LARGE */:
                baseURL = settings_default.LARGE_GAIANET_SERVER_URL || "https://qwen72b.gaia.domains/v1";
                break;
            }
          }
          elizaLogger.debug("Using GAIANET model with baseURL:", baseURL);
          const openai = createOpenAI({
            apiKey,
            baseURL: endpoint,
            fetch: runtime.fetch
          });
          const { text: openaiResponse } = await aiGenerateText({
            model: openai.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = openaiResponse;
          elizaLogger.debug("Received response from GAIANET model.");
          break;
        }
        case "atoma" /* ATOMA */: {
          elizaLogger.debug("Initializing Atoma model.");
          const atoma = createOpenAI({
            apiKey,
            baseURL: endpoint,
            fetch: runtime.fetch
          });
          const { text: atomaResponse } = await aiGenerateText({
            model: atoma.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = atomaResponse;
          elizaLogger.debug("Received response from Atoma model.");
          break;
        }
        case "galadriel" /* GALADRIEL */: {
          elizaLogger.debug("Initializing Galadriel model.");
          const headers = {};
          const fineTuneApiKey = runtime.getSetting(
            "GALADRIEL_FINE_TUNE_API_KEY"
          );
          if (fineTuneApiKey) {
            headers["Fine-Tune-Authentication"] = fineTuneApiKey;
          }
          const galadriel = createOpenAI({
            headers,
            apiKey,
            baseURL: endpoint,
            fetch: runtime.fetch
          });
          const { text: galadrielResponse } = await aiGenerateText({
            model: galadriel.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = galadrielResponse;
          elizaLogger.debug("Received response from Galadriel model.");
          break;
        }
        case "infera" /* INFERA */: {
          elizaLogger.debug("Initializing Infera model.");
          const apiKey2 = settings_default.INFERA_API_KEY || runtime.token;
          const infera = createOpenAI({
            apiKey: apiKey2,
            baseURL: endpoint,
            headers: {
              api_key: apiKey2,
              "Content-Type": "application/json"
            }
          });
          const { text: inferaResponse } = await aiGenerateText({
            model: infera.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            temperature,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty
          });
          response = inferaResponse;
          elizaLogger.debug("Received response from Infera model.");
          break;
        }
        case "venice" /* VENICE */: {
          elizaLogger.debug("Initializing Venice model.");
          const venice = createOpenAI({
            apiKey,
            baseURL: endpoint
          });
          const { text: veniceResponse } = await aiGenerateText({
            model: venice.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            temperature,
            maxSteps,
            maxTokens: max_response_length
          });
          response = veniceResponse;
          elizaLogger.debug("Received response from Venice model.");
          break;
        }
        case "nvidia" /* NVIDIA */: {
          elizaLogger.debug("Initializing NVIDIA model.");
          const nvidia = createOpenAI({
            apiKey,
            baseURL: endpoint
          });
          const { text: nvidiaResponse } = await aiGenerateText({
            model: nvidia.languageModel(model),
            prompt: context,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            temperature,
            maxSteps,
            maxTokens: max_response_length
          });
          response = nvidiaResponse;
          elizaLogger.debug("Received response from NVIDIA model.");
          break;
        }
        case "deepseek" /* DEEPSEEK */: {
          elizaLogger.debug("Initializing Deepseek model.");
          const serverUrl = models[provider].endpoint;
          const deepseek = createOpenAI({
            apiKey,
            baseURL: serverUrl,
            fetch: runtime.fetch
          });
          const { text: deepseekResponse } = await aiGenerateText({
            model: deepseek.languageModel(model),
            prompt: context,
            temperature,
            system: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? void 0,
            tools,
            onStepFinish,
            maxSteps,
            maxTokens: max_response_length,
            frequencyPenalty: frequency_penalty,
            presencePenalty: presence_penalty,
            experimental_telemetry
          });
          response = deepseekResponse;
          elizaLogger.debug("Received response from Deepseek model.");
          break;
        }
        case "livepeer" /* LIVEPEER */: {
          elizaLogger.debug("Initializing Livepeer model.");
          if (!endpoint) {
            throw new Error("Livepeer Gateway URL is not defined");
          }
          const requestBody = {
            model,
            messages: [
              {
                role: "system",
                content: runtime.character.system ?? settings_default.SYSTEM_PROMPT ?? "You are a helpful assistant"
              },
              {
                role: "user",
                content: context
              }
            ],
            max_tokens: max_response_length,
            stream: false
          };
          const fetchResponse = await runtime.fetch(endpoint + "/llm", {
            method: "POST",
            headers: {
              accept: "text/event-stream",
              "Content-Type": "application/json",
              Authorization: "Bearer eliza-app-llm"
            },
            body: JSON.stringify(requestBody)
          });
          if (!fetchResponse.ok) {
            const errorText = await fetchResponse.text();
            throw new Error(
              `Livepeer request failed (${fetchResponse.status}): ${errorText}`
            );
          }
          const json = await fetchResponse.json();
          if (!json?.choices?.[0]?.message?.content) {
            throw new Error("Invalid response format from Livepeer");
          }
          response = json.choices[0].message.content.replace(
            /<\|start_header_id\|>assistant<\|end_header_id\|>\n\n/,
            ""
          );
          elizaLogger.debug(
            "Successfully received response from Livepeer model"
          );
          break;
        }
        default: {
          const errorMessage = `Unsupported provider: ${provider}`;
          elizaLogger.error(errorMessage);
          throw new Error(errorMessage);
        }
      }
      return response;
    } catch (error) {
      elizaLogger.error("Error in generateText:", error);
      throw error;
    }
  }
  async function generateShouldRespond({
    runtime,
    context,
    modelClass
  }) {
    let retryDelay = 1e3;
    while (true) {
      try {
        elizaLogger.debug(
          "Attempting to generate text with context:",
          context
        );
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        elizaLogger.debug("Received response from generateText:", response);
        const parsedResponse = parseShouldRespondFromText(response.trim());
        if (parsedResponse) {
          elizaLogger.debug("Parsed response:", parsedResponse);
          return parsedResponse;
        } else {
          elizaLogger.debug("generateShouldRespond no response");
        }
      } catch (error) {
        elizaLogger.error("Error in generateShouldRespond:", error);
        if (error instanceof TypeError && error.message.includes("queueTextCompletion")) {
          elizaLogger.error(
            "TypeError: Cannot read properties of null (reading 'queueTextCompletion')"
          );
        }
      }
      elizaLogger.log(`Retrying in ${retryDelay}ms...`);
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  async function splitChunks(content, chunkSize = 512, bleed = 20) {
    elizaLogger.debug(`[splitChunks] Starting text split`);
    const textSplitter = new RecursiveCharacterTextSplitter({
      chunkSize: Number(chunkSize),
      chunkOverlap: Number(bleed)
    });
    const chunks = await textSplitter.splitText(content);
    elizaLogger.debug(`[splitChunks] Split complete:`, {
      numberOfChunks: chunks.length,
      averageChunkSize: chunks.reduce((acc, chunk) => acc + chunk.length, 0) / chunks.length
    });
    return chunks;
  }
  async function generateTrueOrFalse({
    runtime,
    context = "",
    modelClass
  }) {
    let retryDelay = 1e3;
    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);
    const stop = Array.from(
      /* @__PURE__ */ new Set([...modelSettings.stop || [], ["\n"]])
    );
    while (true) {
      try {
        const response = await generateText({
          stop,
          runtime,
          context,
          modelClass
        });
        const parsedResponse = parseBooleanFromText(response.trim());
        if (parsedResponse !== null) {
          return parsedResponse;
        }
      } catch (error) {
        elizaLogger.error("Error in generateTrueOrFalse:", error);
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  async function generateTextArray({
    runtime,
    context,
    modelClass
  }) {
    if (!context) {
      elizaLogger.error("generateTextArray context is empty");
      return [];
    }
    let retryDelay = 1e3;
    while (true) {
      try {
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        const parsedResponse = parseJsonArrayFromText(response);
        if (parsedResponse) {
          return parsedResponse;
        }
      } catch (error) {
        elizaLogger.error("Error in generateTextArray:", error);
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  async function generateObjectDeprecated({
    runtime,
    context,
    modelClass
  }) {
    if (!context) {
      elizaLogger.error("generateObjectDeprecated context is empty");
      return null;
    }
    let retryDelay = 1e3;
    while (true) {
      try {
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        const parsedResponse = parseJSONObjectFromText(response);
        if (parsedResponse) {
          return parsedResponse;
        }
      } catch (error) {
        elizaLogger.error("Error in generateObject:", error);
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  async function generateObjectArray({
    runtime,
    context,
    modelClass
  }) {
    if (!context) {
      elizaLogger.error("generateObjectArray context is empty");
      return [];
    }
    let retryDelay = 1e3;
    while (true) {
      try {
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        const parsedResponse = parseJsonArrayFromText(response);
        if (parsedResponse) {
          return parsedResponse;
        }
      } catch (error) {
        elizaLogger.error("Error in generateTextArray:", error);
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  async function generateMessageResponse({
    runtime,
    context,
    modelClass
  }) {
    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);
    const max_context_length = modelSettings.maxInputTokens;
    context = await trimTokens(context, max_context_length, runtime);
    elizaLogger.debug("Context:", context);
    let retryLength = 1e3;
    while (true) {
      try {
        elizaLogger.log("Generating message response..");
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        const parsedContent = parseJSONObjectFromText(response);
        if (!parsedContent) {
          elizaLogger.debug("parsedContent is null, retrying");
          continue;
        }
        return parsedContent;
      } catch (error) {
        elizaLogger.error("ERROR:", error);
        retryLength *= 2;
        await new Promise((resolve) => setTimeout(resolve, retryLength));
        elizaLogger.debug("Retrying...");
      }
    }
  }
  var generateImage = async (data, runtime) => {
    const modelSettings = getImageModelSettings(runtime.imageModelProvider);
    if (!modelSettings) {
      elizaLogger.warn("No model settings found for the image model provider.");
      return { success: false, error: "No model settings available" };
    }
    const model = modelSettings.name;
    elizaLogger.info("Generating image with options:", {
      imageModelProvider: model
    });
    const apiKey = runtime.imageModelProvider === runtime.modelProvider ? runtime.token : (() => {
      switch (runtime.imageModelProvider) {
        case "heurist" /* HEURIST */:
          return runtime.getSetting("HEURIST_API_KEY");
        case "together" /* TOGETHER */:
          return runtime.getSetting("TOGETHER_API_KEY");
        case "falai" /* FAL */:
          return runtime.getSetting("FAL_API_KEY");
        case "openai" /* OPENAI */:
          return runtime.getSetting("OPENAI_API_KEY");
        case "venice" /* VENICE */:
          return runtime.getSetting("VENICE_API_KEY");
        case "livepeer" /* LIVEPEER */:
          return runtime.getSetting("LIVEPEER_GATEWAY_URL");
        default:
          return runtime.getSetting("HEURIST_API_KEY") ?? runtime.getSetting("NINETEEN_AI_API_KEY") ?? runtime.getSetting("TOGETHER_API_KEY") ?? runtime.getSetting("FAL_API_KEY") ?? runtime.getSetting("OPENAI_API_KEY") ?? runtime.getSetting("VENICE_API_KEY") ?? runtime.getSetting("LIVEPEER_GATEWAY_URL");
      }
    })();
    try {
      if (runtime.imageModelProvider === "heurist" /* HEURIST */) {
        const response = await fetch(
          "http://sequencer.heurist.xyz/submit_job",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              job_id: data.jobId || crypto.randomUUID(),
              model_input: {
                SD: {
                  prompt: data.prompt,
                  neg_prompt: data.negativePrompt,
                  num_iterations: data.numIterations || 20,
                  width: data.width || 512,
                  height: data.height || 512,
                  guidance_scale: data.guidanceScale || 3,
                  seed: data.seed || -1
                }
              },
              model_id: model,
              deadline: 60,
              priority: 1
            })
          }
        );
        if (!response.ok) {
          throw new Error(
            `Heurist image generation failed: ${response.statusText}`
          );
        }
        const imageURL = await response.json();
        return { success: true, data: [imageURL] };
      } else if (runtime.imageModelProvider === "together" /* TOGETHER */ || // for backwards compat
      runtime.imageModelProvider === "llama_cloud" /* LLAMACLOUD */) {
        const together = new Together({ apiKey });
        const response = await together.images.create({
          model,
          prompt: data.prompt,
          width: data.width,
          height: data.height,
          steps: modelSettings?.steps ?? 4,
          n: data.count
        });
        const togetherResponse = response;
        if (!togetherResponse.data || !Array.isArray(togetherResponse.data)) {
          throw new Error("Invalid response format from Together AI");
        }
        const base64s = await Promise.all(
          togetherResponse.data.map(async (image) => {
            if (!image.url) {
              elizaLogger.error("Missing URL in image data:", image);
              throw new Error("Missing URL in Together AI response");
            }
            const imageResponse = await fetch(image.url);
            if (!imageResponse.ok) {
              throw new Error(
                `Failed to fetch image: ${imageResponse.statusText}`
              );
            }
            const blob = await imageResponse.blob();
            const arrayBuffer = await blob.arrayBuffer();
            const base64 = Buffer2.from(arrayBuffer).toString("base64");
            return `data:image/jpeg;base64,${base64}`;
          })
        );
        if (base64s.length === 0) {
          throw new Error("No images generated by Together AI");
        }
        elizaLogger.debug(`Generated ${base64s.length} images`);
        return { success: true, data: base64s };
      } else if (runtime.imageModelProvider === "falai" /* FAL */) {
        fal.config({
          credentials: apiKey
        });
        const input = {
          prompt: data.prompt,
          image_size: "square",
          num_inference_steps: modelSettings?.steps ?? 50,
          guidance_scale: data.guidanceScale || 3.5,
          num_images: data.count,
          enable_safety_checker: runtime.getSetting("FAL_AI_ENABLE_SAFETY_CHECKER") === "true",
          safety_tolerance: Number(
            runtime.getSetting("FAL_AI_SAFETY_TOLERANCE") || "2"
          ),
          output_format: "png",
          seed: data.seed ?? 6252023,
          ...runtime.getSetting("FAL_AI_LORA_PATH") ? {
            loras: [
              {
                path: runtime.getSetting("FAL_AI_LORA_PATH"),
                scale: 1
              }
            ]
          } : {}
        };
        const result = await fal.subscribe(model, {
          input,
          logs: true,
          onQueueUpdate: (update) => {
            if (update.status === "IN_PROGRESS") {
              elizaLogger.info(update.logs.map((log) => log.message));
            }
          }
        });
        const base64Promises = result.data.images.map(async (image) => {
          const response = await fetch(image.url);
          const blob = await response.blob();
          const buffer2 = await blob.arrayBuffer();
          const base64 = Buffer2.from(buffer2).toString("base64");
          return `data:${image.content_type};base64,${base64}`;
        });
        const base64s = await Promise.all(base64Promises);
        return { success: true, data: base64s };
      } else if (runtime.imageModelProvider === "venice" /* VENICE */) {
        const response = await fetch(
          "https://api.venice.ai/api/v1/image/generate",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model,
              prompt: data.prompt,
              cfg_scale: data.guidanceScale,
              negative_prompt: data.negativePrompt,
              width: data.width,
              height: data.height,
              steps: data.numIterations,
              safe_mode: data.safeMode,
              seed: data.seed,
              style_preset: data.stylePreset,
              hide_watermark: data.hideWatermark
            })
          }
        );
        const result = await response.json();
        if (!result.images || !Array.isArray(result.images)) {
          throw new Error("Invalid response format from Venice AI");
        }
        const base64s = result.images.map((base64String) => {
          if (!base64String) {
            throw new Error(
              "Empty base64 string in Venice AI response"
            );
          }
          return `data:image/png;base64,${base64String}`;
        });
        return { success: true, data: base64s };
      } else if (runtime.imageModelProvider === "nineteen_ai" /* NINETEEN_AI */) {
        const response = await fetch(
          "https://api.nineteen.ai/v1/text-to-image",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${apiKey}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model,
              prompt: data.prompt,
              negative_prompt: data.negativePrompt,
              width: data.width,
              height: data.height,
              steps: data.numIterations,
              cfg_scale: data.guidanceScale || 3
            })
          }
        );
        const result = await response.json();
        if (!result.images || !Array.isArray(result.images)) {
          throw new Error("Invalid response format from Nineteen AI");
        }
        const base64s = result.images.map((base64String) => {
          if (!base64String) {
            throw new Error(
              "Empty base64 string in Nineteen AI response"
            );
          }
          return `data:image/png;base64,${base64String}`;
        });
        return { success: true, data: base64s };
      } else if (runtime.imageModelProvider === "livepeer" /* LIVEPEER */) {
        if (!apiKey) {
          throw new Error("Livepeer Gateway is not defined");
        }
        try {
          const baseUrl = new URL(apiKey);
          if (!baseUrl.protocol.startsWith("http")) {
            throw new Error("Invalid Livepeer Gateway URL protocol");
          }
          const response = await fetch(
            `${baseUrl.toString()}text-to-image`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: "Bearer eliza-app-img"
              },
              body: JSON.stringify({
                model_id: data.modelId || "ByteDance/SDXL-Lightning",
                prompt: data.prompt,
                width: data.width || 1024,
                height: data.height || 1024
              })
            }
          );
          const result = await response.json();
          if (!result.images?.length) {
            throw new Error("No images generated");
          }
          const base64Images = await Promise.all(
            result.images.map(async (image) => {
              console.log("imageUrl console log", image.url);
              let imageUrl;
              if (image.url.includes("http")) {
                imageUrl = image.url;
              } else {
                imageUrl = `${apiKey}${image.url}`;
              }
              const imageResponse = await fetch(imageUrl);
              if (!imageResponse.ok) {
                throw new Error(
                  `Failed to fetch image: ${imageResponse.statusText}`
                );
              }
              const blob = await imageResponse.blob();
              const arrayBuffer = await blob.arrayBuffer();
              const base64 = Buffer2.from(arrayBuffer).toString("base64");
              return `data:image/jpeg;base64,${base64}`;
            })
          );
          return {
            success: true,
            data: base64Images
          };
        } catch (error) {
          console.error(error);
          return { success: false, error };
        }
      } else {
        let targetSize = `${data.width}x${data.height}`;
        if (targetSize !== "1024x1024" && targetSize !== "1792x1024" && targetSize !== "1024x1792") {
          targetSize = "1024x1024";
        }
        const openaiApiKey = runtime.getSetting("OPENAI_API_KEY");
        if (!openaiApiKey) {
          throw new Error("OPENAI_API_KEY is not set");
        }
        const openai = new OpenAI({
          apiKey: openaiApiKey
        });
        const response = await openai.images.generate({
          model,
          prompt: data.prompt,
          size: targetSize,
          n: data.count,
          response_format: "b64_json"
        });
        const base64s = response.data.map(
          (image) => `data:image/png;base64,${image.b64_json}`
        );
        return { success: true, data: base64s };
      }
    } catch (error) {
      console.error(error);
      return { success: false, error };
    }
  };
  var generateCaption = async (data, runtime) => {
    const { imageUrl } = data;
    const imageDescriptionService = runtime.getService(
      "image_description" /* IMAGE_DESCRIPTION */
    );
    if (!imageDescriptionService) {
      throw new Error("Image description service not found");
    }
    const resp = await imageDescriptionService.describeImage(imageUrl);
    return {
      title: resp.title.trim(),
      description: resp.description.trim()
    };
  };
  var generateObject = async ({
    runtime,
    context,
    modelClass,
    schema,
    schemaName,
    schemaDescription,
    stop,
    mode = "json",
    verifiableInference = false,
    verifiableInferenceAdapter,
    verifiableInferenceOptions
  }) => {
    if (!context) {
      const errorMessage = "generateObject context is empty";
      console.error(errorMessage);
      throw new Error(errorMessage);
    }
    const provider = runtime.modelProvider;
    const modelSettings = getModelSettings(runtime.modelProvider, modelClass);
    const model = modelSettings.name;
    const temperature = modelSettings.temperature;
    const frequency_penalty = modelSettings.frequency_penalty;
    const presence_penalty = modelSettings.presence_penalty;
    const max_context_length = modelSettings.maxInputTokens;
    const max_response_length = modelSettings.maxOutputTokens;
    const experimental_telemetry = modelSettings.experimental_telemetry;
    const apiKey = runtime.token;
    try {
      context = await trimTokens(context, max_context_length, runtime);
      const modelOptions = {
        prompt: context,
        temperature,
        maxTokens: max_response_length,
        frequencyPenalty: frequency_penalty,
        presencePenalty: presence_penalty,
        stop: stop || modelSettings.stop,
        experimental_telemetry
      };
      const response = await handleProvider({
        provider,
        model,
        apiKey,
        schema,
        schemaName,
        schemaDescription,
        mode,
        modelOptions,
        runtime,
        context,
        modelClass,
        verifiableInference,
        verifiableInferenceAdapter,
        verifiableInferenceOptions
      });
      return response;
    } catch (error) {
      console.error("Error in generateObject:", error);
      throw error;
    }
  };
  async function handleProvider(options2) {
    const {
      provider,
      runtime,
      context,
      modelClass
      //verifiableInference,
      //verifiableInferenceAdapter,
      //verifiableInferenceOptions,
    } = options2;
    switch (provider) {
      case "openai" /* OPENAI */:
      case "eternalai" /* ETERNALAI */:
      case "ali_bailian" /* ALI_BAILIAN */:
      case "volengine" /* VOLENGINE */:
      case "llama_cloud" /* LLAMACLOUD */:
      case "together" /* TOGETHER */:
      case "nanogpt" /* NANOGPT */:
      case "akash_chat_api" /* AKASH_CHAT_API */:
      case "lmstudio" /* LMSTUDIO */:
        return await handleOpenAI(options2);
      case "anthropic" /* ANTHROPIC */:
      case "claude_vertex" /* CLAUDE_VERTEX */:
        return await handleAnthropic(options2);
      case "grok" /* GROK */:
        return await handleGrok(options2);
      case "groq" /* GROQ */:
        return await handleGroq(options2);
      case "llama_local" /* LLAMALOCAL */:
        return await generateObjectDeprecated({
          runtime,
          context,
          modelClass
        });
      case "google" /* GOOGLE */:
        return await handleGoogle(options2);
      case "mistral" /* MISTRAL */:
        return await handleMistral(options2);
      case "redpill" /* REDPILL */:
        return await handleRedPill(options2);
      case "openrouter" /* OPENROUTER */:
        return await handleOpenRouter(options2);
      case "ollama" /* OLLAMA */:
        return await handleOllama(options2);
      case "deepseek" /* DEEPSEEK */:
        return await handleDeepSeek(options2);
      case "livepeer" /* LIVEPEER */:
        return await handleLivepeer(options2);
      default: {
        const errorMessage = `Unsupported provider: ${provider}`;
        elizaLogger.error(errorMessage);
        throw new Error(errorMessage);
      }
    }
  }
  async function handleOpenAI({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions,
    provider: _provider,
    runtime
  }) {
    const baseURL = getCloudflareGatewayBaseURL(runtime, "openai") || models.openai.endpoint;
    const openai = createOpenAI({ apiKey, baseURL });
    return await aiGenerateObject({
      model: openai.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleAnthropic({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "auto",
    modelOptions,
    runtime
  }) {
    elizaLogger.debug("Handling Anthropic request with Cloudflare check");
    if (mode === "json") {
      elizaLogger.warn("Anthropic mode is set to json, changing to auto");
      mode = "auto";
    }
    const baseURL = getCloudflareGatewayBaseURL(runtime, "anthropic");
    elizaLogger.debug("Anthropic handleAnthropic baseURL:", { baseURL });
    const anthropic = createAnthropic({ apiKey, baseURL });
    return await aiGenerateObject({
      model: anthropic.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleGrok({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions
  }) {
    const grok = createOpenAI({ apiKey, baseURL: models.grok.endpoint });
    return await aiGenerateObject({
      model: grok.languageModel(model, { parallelToolCalls: false }),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleGroq({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions,
    runtime
  }) {
    elizaLogger.debug("Handling Groq request with Cloudflare check");
    const baseURL = getCloudflareGatewayBaseURL(runtime, "groq");
    elizaLogger.debug("Groq handleGroq baseURL:", { baseURL });
    const groq = createGroq({ apiKey, baseURL });
    return await aiGenerateObject({
      model: groq.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleGoogle({
    model,
    apiKey: _apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions
  }) {
    const google = createGoogleGenerativeAI();
    return await aiGenerateObject({
      model: google(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleMistral({
    model,
    schema,
    schemaName,
    schemaDescription,
    mode,
    modelOptions
  }) {
    const mistral = createMistral();
    return await aiGenerateObject({
      model: mistral(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleRedPill({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions
  }) {
    const redPill = createOpenAI({ apiKey, baseURL: models.redpill.endpoint });
    return await aiGenerateObject({
      model: redPill.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleOpenRouter({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions
  }) {
    const openRouter = createOpenAI({
      apiKey,
      baseURL: models.openrouter.endpoint
    });
    return await aiGenerateObject({
      model: openRouter.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleOllama({
    model,
    schema,
    schemaName,
    schemaDescription,
    mode = "json",
    modelOptions,
    provider
  }) {
    const ollamaProvider = createOllama({
      baseURL: getEndpoint(provider) + "/api"
    });
    const ollama = ollamaProvider(model);
    return await aiGenerateObject({
      model: ollama,
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleDeepSeek({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode,
    modelOptions
  }) {
    const openai = createOpenAI({ apiKey, baseURL: models.deepseek.endpoint });
    return await aiGenerateObject({
      model: openai.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function handleLivepeer({
    model,
    apiKey,
    schema,
    schemaName,
    schemaDescription,
    mode,
    modelOptions
  }) {
    console.log("Livepeer provider api key:", apiKey);
    if (!apiKey) {
      throw new Error(
        "Livepeer provider requires LIVEPEER_GATEWAY_URL to be configured"
      );
    }
    const livepeerClient = createOpenAI({
      apiKey,
      baseURL: apiKey
      // Use the apiKey as the baseURL since it contains the gateway URL
    });
    return await aiGenerateObject({
      model: livepeerClient.languageModel(model),
      schema,
      schemaName,
      schemaDescription,
      mode,
      ...modelOptions
    });
  }
  async function generateTweetActions({
    runtime,
    context,
    modelClass
  }) {
    let retryDelay = 1e3;
    while (true) {
      try {
        const response = await generateText({
          runtime,
          context,
          modelClass
        });
        elizaLogger.debug(
          "Received response from generateText for tweet actions:",
          response
        );
        const { actions } = parseActionResponseFromText(response.trim());
        if (actions) {
          elizaLogger.debug("Parsed tweet actions:", actions);
          return actions;
        } else {
          elizaLogger.debug("generateTweetActions no valid response");
        }
      } catch (error) {
        elizaLogger.error("Error in generateTweetActions:", error);
        if (error instanceof TypeError && error.message.includes("queueTextCompletion")) {
          elizaLogger.error(
            "TypeError: Cannot read properties of null (reading 'queueTextCompletion')"
          );
        }
      }
      elizaLogger.log(`Retrying in ${retryDelay}ms...`);
      await new Promise((resolve) => setTimeout(resolve, retryDelay));
      retryDelay *= 2;
    }
  }
  
  // src/goals.ts
  var getGoals = async ({
    runtime,
    roomId,
    userId,
    onlyInProgress = true,
    count = 5
  }) => {
    return runtime.databaseAdapter.getGoals({
      agentId: runtime.agentId,
      roomId,
      userId,
      onlyInProgress,
      count
    });
  };
  var formatGoalsAsString = ({ goals }) => {
    const goalStrings = goals.map((goal) => {
      const header = `Goal: ${goal.name}
  id: ${goal.id}`;
      const objectives = "Objectives:\n" + goal.objectives.map((objective) => {
        return `- ${objective.completed ? "[x]" : "[ ]"} ${objective.description} ${objective.completed ? " (DONE)" : " (IN PROGRESS)"}`;
      }).join("\n");
      return `${header}
  ${objectives}`;
    });
    return goalStrings.join("\n");
  };
  var updateGoal = async ({
    runtime,
    goal
  }) => {
    return runtime.databaseAdapter.updateGoal(goal);
  };
  var createGoal = async ({
    runtime,
    goal
  }) => {
    return runtime.databaseAdapter.createGoal(goal);
  };
  
  // src/memory.ts
  var defaultMatchThreshold = 0.1;
  var defaultMatchCount = 10;
  var MemoryManager = class {
    /**
     * The AgentRuntime instance associated with this manager.
     */
    runtime;
    /**
     * The name of the database table this manager operates on.
     */
    tableName;
    /**
     * Constructs a new MemoryManager instance.
     * @param opts Options for the manager.
     * @param opts.tableName The name of the table this manager will operate on.
     * @param opts.runtime The AgentRuntime instance associated with this manager.
     */
    constructor(opts) {
      this.runtime = opts.runtime;
      this.tableName = opts.tableName;
    }
    /**
     * Adds an embedding vector to a memory object. If the memory already has an embedding, it is returned as is.
     * @param memory The memory object to add an embedding to.
     * @returns A Promise resolving to the memory object, potentially updated with an embedding vector.
     */
    /**
     * Adds an embedding vector to a memory object if one doesn't already exist.
     * The embedding is generated from the memory's text content using the runtime's
     * embedding model. If the memory has no text content, an error is thrown.
     *
     * @param memory The memory object to add an embedding to
     * @returns The memory object with an embedding vector added
     * @throws Error if the memory content is empty
     */
    async addEmbeddingToMemory(memory) {
      if (memory.embedding) {
        return memory;
      }
      const memoryText = memory.content.text;
      if (!memoryText) {
        throw new Error(
          "Cannot generate embedding: Memory content is empty"
        );
      }
      try {
        memory.embedding = await embed(this.runtime, memoryText);
      } catch (error) {
        logger_default.error("Failed to generate embedding:", error);
        memory.embedding = getEmbeddingZeroVector().slice();
      }
      return memory;
    }
    /**
     * Retrieves a list of memories by user IDs, with optional deduplication.
     * @param opts Options including user IDs, count, and uniqueness.
     * @param opts.roomId The room ID to retrieve memories for.
     * @param opts.count The number of memories to retrieve.
     * @param opts.unique Whether to retrieve unique memories only.
     * @returns A Promise resolving to an array of Memory objects.
     */
    async getMemories({
      roomId,
      count = 10,
      unique = true,
      start,
      end
    }) {
      return await this.runtime.databaseAdapter.getMemories({
        roomId,
        count,
        unique,
        tableName: this.tableName,
        agentId: this.runtime.agentId,
        start,
        end
      });
    }
    async getCachedEmbeddings(content) {
      return await this.runtime.databaseAdapter.getCachedEmbeddings({
        query_table_name: this.tableName,
        query_threshold: 2,
        query_input: content,
        query_field_name: "content",
        query_field_sub_name: "text",
        query_match_count: 10
      });
    }
    /**
     * Searches for memories similar to a given embedding vector.
     * @param embedding The embedding vector to search with.
     * @param opts Options including match threshold, count, user IDs, and uniqueness.
     * @param opts.match_threshold The similarity threshold for matching memories.
     * @param opts.count The maximum number of memories to retrieve.
     * @param opts.roomId The room ID to retrieve memories for.
     * @param opts.unique Whether to retrieve unique memories only.
     * @returns A Promise resolving to an array of Memory objects that match the embedding.
     */
    async searchMemoriesByEmbedding(embedding, opts) {
      const {
        match_threshold = defaultMatchThreshold,
        count = defaultMatchCount,
        roomId,
        unique
      } = opts;
      const result = await this.runtime.databaseAdapter.searchMemories({
        tableName: this.tableName,
        roomId,
        agentId: this.runtime.agentId,
        embedding,
        match_threshold,
        match_count: count,
        unique: !!unique
      });
      return result;
    }
    /**
     * Creates a new memory in the database, with an option to check for similarity before insertion.
     * @param memory The memory object to create.
     * @param unique Whether to check for similarity before insertion.
     * @returns A Promise that resolves when the operation completes.
     */
    async createMemory(memory, unique = false) {
      const existingMessage = await this.runtime.databaseAdapter.getMemoryById(memory.id);
      if (existingMessage) {
        logger_default.debug("Memory already exists, skipping");
        return;
      }
      logger_default.log("Creating Memory", memory.id, memory.content.text);
      await this.runtime.databaseAdapter.createMemory(
        memory,
        this.tableName,
        unique
      );
    }
    async getMemoriesByRoomIds(params) {
      return await this.runtime.databaseAdapter.getMemoriesByRoomIds({
        tableName: this.tableName,
        agentId: this.runtime.agentId,
        roomIds: params.roomIds,
        limit: params.limit
      });
    }
    async getMemoryById(id) {
      const result = await this.runtime.databaseAdapter.getMemoryById(id);
      if (result && result.agentId !== this.runtime.agentId) return null;
      return result;
    }
    /**
     * Removes a memory from the database by its ID.
     * @param memoryId The ID of the memory to remove.
     * @returns A Promise that resolves when the operation completes.
     */
    async removeMemory(memoryId) {
      await this.runtime.databaseAdapter.removeMemory(
        memoryId,
        this.tableName
      );
    }
    /**
     * Removes all memories associated with a set of user IDs.
     * @param roomId The room ID to remove memories for.
     * @returns A Promise that resolves when the operation completes.
     */
    async removeAllMemories(roomId) {
      await this.runtime.databaseAdapter.removeAllMemories(
        roomId,
        this.tableName
      );
    }
    /**
     * Counts the number of memories associated with a set of user IDs, with an option for uniqueness.
     * @param roomId The room ID to count memories for.
     * @param unique Whether to count unique memories only.
     * @returns A Promise resolving to the count of memories.
     */
    async countMemories(roomId, unique = true) {
      return await this.runtime.databaseAdapter.countMemories(
        roomId,
        unique,
        this.tableName
      );
    }
  };
  
  // src/messages.ts
  async function getActorDetails({
    runtime,
    roomId
  }) {
    const participantIds = await runtime.databaseAdapter.getParticipantsForRoom(roomId);
    const actors = await Promise.all(
      participantIds.map(async (userId) => {
        const account = await runtime.databaseAdapter.getAccountById(userId);
        if (account) {
          return {
            id: account.id,
            name: account.name,
            username: account.username,
            details: account.details
          };
        }
        return null;
      })
    );
    return actors.filter((actor) => actor !== null);
  }
  function formatActors({ actors }) {
    const actorStrings = actors.map((actor) => {
      const header = `${actor.name}${actor.details?.tagline ? ": " + actor.details?.tagline : ""}${actor.details?.summary ? "\n" + actor.details?.summary : ""}`;
      return header;
    });
    const finalActorStrings = actorStrings.join("\n");
    return finalActorStrings;
  }
  var formatMessages = ({
    messages,
    actors
  }) => {
    const messageStrings = messages.reverse().filter((message) => message.userId).map((message) => {
      const messageContent = message.content.text;
      const messageAction = message.content.action;
      const formattedName = actors.find((actor) => actor.id === message.userId)?.name || "Unknown User";
      const attachments = message.content.attachments;
      const attachmentString = attachments && attachments.length > 0 ? ` (Attachments: ${attachments.map((media) => `[${media.id} - ${media.title} (${media.url})]`).join(", ")})` : "";
      const timestamp = formatTimestamp(message.createdAt);
      const shortId = message.userId.slice(-5);
      return `(${timestamp}) [${shortId}] ${formattedName}: ${messageContent}${attachmentString}${messageAction && messageAction !== "null" ? ` (${messageAction})` : ""}`;
    }).join("\n");
    return messageStrings;
  };
  var formatTimestamp = (messageDate) => {
    const now = /* @__PURE__ */ new Date();
    const diff = now.getTime() - messageDate;
    const absDiff = Math.abs(diff);
    const seconds = Math.floor(absDiff / 1e3);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    if (absDiff < 6e4) {
      return "just now";
    } else if (minutes < 60) {
      return `${minutes} minute${minutes !== 1 ? "s" : ""} ago`;
    } else if (hours < 24) {
      return `${hours} hour${hours !== 1 ? "s" : ""} ago`;
    } else {
      return `${days} day${days !== 1 ? "s" : ""} ago`;
    }
  };
  
  // src/posts.ts
  var formatPosts = ({
    messages,
    actors,
    conversationHeader = true
  }) => {
    const groupedMessages = {};
    messages.forEach((message) => {
      if (message.roomId) {
        if (!groupedMessages[message.roomId]) {
          groupedMessages[message.roomId] = [];
        }
        groupedMessages[message.roomId].push(message);
      }
    });
    Object.values(groupedMessages).forEach((roomMessages) => {
      roomMessages.sort((a, b) => a.createdAt - b.createdAt);
    });
    const sortedRooms = Object.entries(groupedMessages).sort(
      ([, messagesA], [, messagesB]) => messagesB[messagesB.length - 1].createdAt - messagesA[messagesA.length - 1].createdAt
    );
    const formattedPosts = sortedRooms.map(([roomId, roomMessages]) => {
      const messageStrings = roomMessages.filter((message) => message.userId).map((message) => {
        const actor = actors.find(
          (actor2) => actor2.id === message.userId
        );
        const userName = actor?.name || "Unknown User";
        const displayName = actor?.username || "unknown";
        return `Name: ${userName} (@${displayName})
  ID: ${message.id}${message.content.inReplyTo ? `
  In reply to: ${message.content.inReplyTo}` : ""}
  Date: ${formatTimestamp(message.createdAt)}
  Text:
  ${message.content.text}`;
      });
      const header = conversationHeader ? `Conversation: ${roomId.slice(-5)}
  ` : "";
      return `${header}${messageStrings.join("\n\n")}`;
    });
    return formattedPosts.join("\n\n");
  };
  
  // src/providers.ts
  async function getProviders(runtime, message, state) {
    const providerResults = (await Promise.all(
      runtime.providers.map(async (provider) => {
        return await provider.get(runtime, message, state);
      })
    )).filter((result) => result != null && result !== "");
    return providerResults.join("\n");
  }
  
  // src/relationships.ts
  async function createRelationship({
    runtime,
    userA,
    userB
  }) {
    return runtime.databaseAdapter.createRelationship({
      userA,
      userB
    });
  }
  async function getRelationship({
    runtime,
    userA,
    userB
  }) {
    return runtime.databaseAdapter.getRelationship({
      userA,
      userB
    });
  }
  async function getRelationships({
    runtime,
    userId
  }) {
    return runtime.databaseAdapter.getRelationships({ userId });
  }
  async function formatRelationships({
    runtime,
    userId
  }) {
    const relationships = await getRelationships({ runtime, userId });
    const formattedRelationships = relationships.map(
      (relationship) => {
        const { userA, userB } = relationship;
        if (userA === userId) {
          return userB;
        }
        return userA;
      }
    );
    return formattedRelationships;
  }
  
  // src/runtime.ts
  import { readFile } from "fs/promises";
  import { join as join2 } from "path";
  import { names as names4, uniqueNamesGenerator as uniqueNamesGenerator4 } from "unique-names-generator";
  import { v4 as uuidv4 } from "uuid";
  
  // src/uuid.ts
  import { sha1 } from "js-sha1";
  import { z } from "zod";
  var uuidSchema = z.string().uuid();
  function validateUuid(value) {
    const result = uuidSchema.safeParse(value);
    return result.success ? result.data : null;
  }
  function stringToUuid(target) {
    if (typeof target === "number") {
      target = target.toString();
    }
    if (typeof target !== "string") {
      throw TypeError("Value must be string");
    }
    const _uint8ToHex = (ubyte) => {
      const first = ubyte >> 4;
      const second = ubyte - (first << 4);
      const HEX_DIGITS = "0123456789abcdef".split("");
      return HEX_DIGITS[first] + HEX_DIGITS[second];
    };
    const _uint8ArrayToHex = (buf) => {
      let out = "";
      for (let i = 0; i < buf.length; i++) {
        out += _uint8ToHex(buf[i]);
      }
      return out;
    };
    const escapedStr = encodeURIComponent(target);
    const buffer2 = new Uint8Array(escapedStr.length);
    for (let i = 0; i < escapedStr.length; i++) {
      buffer2[i] = escapedStr[i].charCodeAt(0);
    }
    const hash = sha1(buffer2);
    const hashBuffer = new Uint8Array(hash.length / 2);
    for (let i = 0; i < hash.length; i += 2) {
      hashBuffer[i / 2] = Number.parseInt(hash.slice(i, i + 2), 16);
    }
    return _uint8ArrayToHex(hashBuffer.slice(0, 4)) + "-" + _uint8ArrayToHex(hashBuffer.slice(4, 6)) + "-" + _uint8ToHex(hashBuffer[6] & 15) + _uint8ToHex(hashBuffer[7]) + "-" + _uint8ToHex(hashBuffer[8] & 63 | 128) + _uint8ToHex(hashBuffer[9]) + "-" + _uint8ArrayToHex(hashBuffer.slice(10, 16));
  }
  
  // src/knowledge.ts
  async function get(runtime, message) {
    if (!message?.content?.text) {
      logger_default.warn("Invalid message for knowledge query:", {
        message,
        content: message?.content,
        text: message?.content?.text
      });
      return [];
    }
    const processed = preprocess(message.content.text);
    logger_default.debug("Knowledge query:", {
      original: message.content.text,
      processed,
      length: processed?.length
    });
    if (!processed || processed.trim().length === 0) {
      logger_default.warn("Empty processed text for knowledge query");
      return [];
    }
    const embedding = await embed(runtime, processed);
    const fragments = await runtime.knowledgeManager.searchMemoriesByEmbedding(
      embedding,
      {
        roomId: message.agentId,
        count: 5,
        match_threshold: 0.1
      }
    );
    const uniqueSources = [
      ...new Set(
        fragments.map((memory) => {
          logger_default.log(
            `Matched fragment: ${memory.content.text} with similarity: ${memory.similarity}`
          );
          return memory.content.source;
        })
      )
    ];
    const knowledgeDocuments = await Promise.all(
      uniqueSources.map(
        (source) => runtime.documentsManager.getMemoryById(source)
      )
    );
    return knowledgeDocuments.filter((memory) => memory !== null).map((memory) => ({ id: memory.id, content: memory.content }));
  }
  async function set(runtime, item, chunkSize = 512, bleed = 20) {
    await runtime.documentsManager.createMemory({
      id: item.id,
      agentId: runtime.agentId,
      roomId: runtime.agentId,
      userId: runtime.agentId,
      createdAt: Date.now(),
      content: item.content,
      embedding: getEmbeddingZeroVector()
    });
    const preprocessed = preprocess(item.content.text);
    const fragments = await splitChunks(preprocessed, chunkSize, bleed);
    for (const fragment of fragments) {
      const embedding = await embed(runtime, fragment);
      await runtime.knowledgeManager.createMemory({
        // We namespace the knowledge base uuid to avoid id
        // collision with the document above.
        id: stringToUuid(item.id + fragment),
        roomId: runtime.agentId,
        agentId: runtime.agentId,
        userId: runtime.agentId,
        createdAt: Date.now(),
        content: {
          source: item.id,
          text: fragment
        },
        embedding
      });
    }
  }
  function preprocess(content) {
    logger_default.debug("Preprocessing text:", {
      input: content,
      length: content?.length
    });
    if (!content || typeof content !== "string") {
      logger_default.warn("Invalid input for preprocessing");
      return "";
    }
    return content.replace(/```[\s\S]*?```/g, "").replace(/`.*?`/g, "").replace(/#{1,6}\s*(.*)/g, "$1").replace(/!\[(.*?)\]\(.*?\)/g, "$1").replace(/\[(.*?)\]\(.*?\)/g, "$1").replace(/(https?:\/\/)?(www\.)?([^\s]+\.[^\s]+)/g, "$3").replace(/<@[!&]?\d+>/g, "").replace(/<[^>]*>/g, "").replace(/^\s*[-*_]{3,}\s*$/gm, "").replace(/\/\*[\s\S]*?\*\//g, "").replace(/\/\/.*/g, "").replace(/\s+/g, " ").replace(/\n{3,}/g, "\n\n").replace(/[^a-zA-Z0-9\s\-_./:?=&]/g, "").trim().toLowerCase();
  }
  var knowledge_default = {
    get,
    set,
    preprocess
  };
  
  // src/ragknowledge.ts
  import { existsSync } from "fs";
  import { join } from "path";
  var RAGKnowledgeManager = class {
    /**
     * The AgentRuntime instance associated with this manager.
     */
    runtime;
    /**
     * The name of the database table this manager operates on.
     */
    tableName;
    /**
     * The root directory where RAG knowledge files are located (internal)
     */
    knowledgeRoot;
    /**
     * Constructs a new KnowledgeManager instance.
     * @param opts Options for the manager.
     * @param opts.tableName The name of the table this manager will operate on.
     * @param opts.runtime The AgentRuntime instance associated with this manager.
     */
    constructor(opts) {
      this.runtime = opts.runtime;
      this.tableName = opts.tableName;
      this.knowledgeRoot = opts.knowledgeRoot;
    }
    defaultRAGMatchThreshold = 0.85;
    defaultRAGMatchCount = 20;
    /**
     * Common English stop words to filter out from query analysis
     */
    stopWords = /* @__PURE__ */ new Set([
      "a",
      "an",
      "and",
      "are",
      "as",
      "at",
      "be",
      "by",
      "does",
      "for",
      "from",
      "had",
      "has",
      "have",
      "he",
      "her",
      "his",
      "how",
      "hey",
      "i",
      "in",
      "is",
      "it",
      "its",
      "of",
      "on",
      "or",
      "that",
      "the",
      "this",
      "to",
      "was",
      "what",
      "when",
      "where",
      "which",
      "who",
      "will",
      "with",
      "would",
      "there",
      "their",
      "they",
      "your",
      "you"
    ]);
    /**
     * Filters out stop words and returns meaningful terms
     */
    getQueryTerms(query) {
      return query.toLowerCase().split(" ").filter((term) => term.length > 3).filter((term) => !this.stopWords.has(term));
    }
    /**
     * Preprocesses text content for better RAG performance.
     * @param content The text content to preprocess.
     * @returns The preprocessed text.
     */
    preprocess(content) {
      if (!content || typeof content !== "string") {
        logger_default.warn("Invalid input for preprocessing");
        return "";
      }
      return content.replace(/```[\s\S]*?```/g, "").replace(/`.*?`/g, "").replace(/#{1,6}\s*(.*)/g, "$1").replace(/!\[(.*?)\]\(.*?\)/g, "$1").replace(/\[(.*?)\]\(.*?\)/g, "$1").replace(/(https?:\/\/)?(www\.)?([^\s]+\.[^\s]+)/g, "$3").replace(/<@[!&]?\d+>/g, "").replace(/<[^>]*>/g, "").replace(/^\s*[-*_]{3,}\s*$/gm, "").replace(/\/\*[\s\S]*?\*\//g, "").replace(/\/\/.*/g, "").replace(/\s+/g, " ").replace(/\n{3,}/g, "\n\n").trim().toLowerCase();
    }
    hasProximityMatch(text, terms) {
      const words = text.toLowerCase().split(" ");
      const positions = terms.map((term) => words.findIndex((w) => w.includes(term))).filter((pos) => pos !== -1);
      if (positions.length < 2) return false;
      for (let i = 0; i < positions.length - 1; i++) {
        if (Math.abs(positions[i] - positions[i + 1]) <= 5) {
          return true;
        }
      }
      return false;
    }
    async getKnowledge(params) {
      const agentId = params.agentId || this.runtime.agentId;
      if (params.id) {
        const directResults = await this.runtime.databaseAdapter.getKnowledge({
          id: params.id,
          agentId
        });
        if (directResults.length > 0) {
          return directResults;
        }
      }
      if (params.query) {
        try {
          const processedQuery = this.preprocess(params.query);
          let searchText = processedQuery;
          if (params.conversationContext) {
            const relevantContext = this.preprocess(
              params.conversationContext
            );
            searchText = `${relevantContext} ${processedQuery}`;
          }
          const embeddingArray = await embed(this.runtime, searchText);
          const embedding = new Float32Array(embeddingArray);
          const results = await this.runtime.databaseAdapter.searchKnowledge({
            agentId: this.runtime.agentId,
            embedding,
            match_threshold: this.defaultRAGMatchThreshold,
            match_count: (params.limit || this.defaultRAGMatchCount) * 2,
            searchText: processedQuery
          });
          // [ 'id', 'agentId', 'content', 'embedding', 'createdAt', 'similarity' ]
          for(let i=0; i<results.length;i++) {
            //console.log(results[i].content.text);
            console.log(results[i].content.metadata.source);
            console.log("-------------------------------");
          }
          // console.log(Object.keys(results[0]))
          console.log(results.length)
          const rerankedResults = results.map((result) => {
            let score = result.similarity;
            const queryTerms = this.getQueryTerms(processedQuery);
            const matchingTerms = queryTerms.filter(
              (term) => result.content.text.toLowerCase().includes(term)
            );
            if (matchingTerms.length > 0) {
              score *= 1 + matchingTerms.length / queryTerms.length * 2;
              if (this.hasProximityMatch(
                result.content.text,
                matchingTerms
              )) {
                score *= 1.5;
              }
            } else {
              if (!params.conversationContext) {
                score *= 0.3;
              }
            }
            return {
              ...result,
              score,
              matchedTerms: matchingTerms
              // Add for debugging
            };
          }).sort((a, b) => b.score - a.score);
          return rerankedResults.filter(
            (result) => result.score >= this.defaultRAGMatchThreshold
          ).slice(0, params.limit || this.defaultRAGMatchCount);
        } catch (error) {
          console.log(`[RAG Search Error] ${error}`);
          return [];
        }
      }
      return [];
    }
    async createKnowledge(item) {
      if (!item.content.text) {
        logger_default.warn("Empty content in knowledge item");
        return;
      }
      try {
        const processedContent = this.preprocess(item.content.text);
        const mainEmbeddingArray = await embed(
          this.runtime,
          processedContent
        );
        const mainEmbedding = new Float32Array(mainEmbeddingArray);
        await this.runtime.databaseAdapter.createKnowledge({
          id: item.id,
          agentId: this.runtime.agentId,
          content: {
            text: item.content.text,
            metadata: {
              ...item.content.metadata,
              isMain: true
            }
          },
          embedding: mainEmbedding,
          createdAt: Date.now()
        });
        const chunks = await splitChunks(processedContent, 512, 20);
        for (const [index2, chunk] of chunks.entries()) {
          const chunkEmbeddingArray = await embed(this.runtime, chunk);
          const chunkEmbedding = new Float32Array(chunkEmbeddingArray);
          const chunkId = `${item.id}-chunk-${index2}`;
          await this.runtime.databaseAdapter.createKnowledge({
            id: chunkId,
            agentId: this.runtime.agentId,
            content: {
              text: chunk,
              metadata: {
                ...item.content.metadata,
                isChunk: true,
                originalId: item.id,
                chunkIndex: index2
              }
            },
            embedding: chunkEmbedding,
            createdAt: Date.now()
          });
        }
      } catch (error) {
        logger_default.error(`Error processing knowledge ${item.id}:`, error);
        throw error;
      }
    }
    
    async searchKnowledge(params) {
      const {
        match_threshold = this.defaultRAGMatchThreshold,
        match_count = this.defaultRAGMatchCount,
        embedding,
        searchText
      } = params;
      
      const float32Embedding = Array.isArray(embedding) ? new Float32Array(embedding) : embedding;
      return await this.runtime.databaseAdapter.searchKnowledge({
        agentId: params.agentId || this.runtime.agentId,
        embedding: float32Embedding,
        match_threshold,
        match_count,
        searchText
      });
    }
    async removeKnowledge(id) {
      await this.runtime.databaseAdapter.removeKnowledge(id);
    }
    async clearKnowledge(shared) {
      await this.runtime.databaseAdapter.clearKnowledge(
        this.runtime.agentId,
        shared ? shared : false
      );
    }
    /**
     * Lists all knowledge entries for an agent without semantic search or reranking.
     * Used primarily for administrative tasks like cleanup.
     *
     * @param agentId The agent ID to fetch knowledge entries for
     * @returns Array of RAGKnowledgeItem entries
     */
    async listAllKnowledge(agentId) {
      logger_default.debug(
        `[Knowledge List] Fetching all entries for agent: ${agentId}`
      );
      try {
        const results = await this.runtime.databaseAdapter.getKnowledge({
          agentId
        });
        logger_default.debug(
          `[Knowledge List] Found ${results.length} entries`
        );
        return results;
      } catch (error) {
        logger_default.error(
          "[Knowledge List] Error fetching knowledge entries:",
          error
        );
        throw error;
      }
    }
    async cleanupDeletedKnowledgeFiles() {
      try {
        logger_default.debug(
          "[Cleanup] Starting knowledge cleanup process, agent: ",
          this.runtime.agentId
        );
        logger_default.debug(
          `[Cleanup] Knowledge root path: ${this.knowledgeRoot}`
        );
        const existingKnowledge = await this.listAllKnowledge(
          this.runtime.agentId
        );
        const parentDocuments = existingKnowledge.filter(
          (item) => !item.id.includes("chunk") && item.content.metadata?.source
          // Must have a source path
        );
        logger_default.debug(
          `[Cleanup] Found ${parentDocuments.length} parent documents to check`
        );
        for (const item of parentDocuments) {
          const relativePath = item.content.metadata?.source;
          const filePath = join(this.knowledgeRoot, relativePath);
          logger_default.debug(
            `[Cleanup] Checking joined file path: ${filePath}`
          );
          if (!existsSync(filePath)) {
            logger_default.warn(
              `[Cleanup] File not found, starting removal process: ${filePath}`
            );
            const idToRemove = item.id;
            logger_default.debug(
              `[Cleanup] Using ID for removal: ${idToRemove}`
            );
            try {
              await this.removeKnowledge(idToRemove);
              logger_default.success(
                `[Cleanup] Successfully removed knowledge for file: ${filePath}`
              );
            } catch (deleteError) {
              logger_default.error(
                `[Cleanup] Error during deletion process for ${filePath}:`,
                deleteError instanceof Error ? {
                  message: deleteError.message,
                  stack: deleteError.stack,
                  name: deleteError.name
                } : deleteError
              );
            }
          }
        }
        logger_default.debug("[Cleanup] Finished knowledge cleanup process");
      } catch (error) {
        logger_default.error(
          "[Cleanup] Error cleaning up deleted knowledge files:",
          error
        );
      }
    }
    generateScopedId(path5, isShared) {
      const scope = isShared ? "shared" /* SHARED */ : "private" /* PRIVATE */;
      const scopedPath = `${scope}-${path5}`;
      return stringToUuid(scopedPath);
    }
    async processFile(file) {
      const timeMarker = (label) => {
        const time = (Date.now() - startTime) / 1e3;
        logger_default.info(`[Timing] ${label}: ${time.toFixed(2)}s`);
      };
      const startTime = Date.now();
      const content = file.content;
      try {
        const fileSizeKB = new TextEncoder().encode(content).length / 1024;
        logger_default.info(
          `[File Progress] Starting ${file.path} (${fileSizeKB.toFixed(2)} KB)`
        );
        const scopedId = this.generateScopedId(
          file.path,
          file.isShared || false
        );
        const processedContent = this.preprocess(content);
        timeMarker("Preprocessing");
        const mainEmbeddingArray = await embed(
          this.runtime,
          processedContent
        );
        const mainEmbedding = new Float32Array(mainEmbeddingArray);
        timeMarker("Main embedding");
        await this.runtime.databaseAdapter.createKnowledge({
          id: scopedId,
          agentId: this.runtime.agentId,
          content: {
            text: content,
            metadata: {
              source: file.path,
              type: file.type,
              isShared: file.isShared || false
            }
          },
          embedding: mainEmbedding,
          createdAt: Date.now()
        });
        timeMarker("Main document storage");
        const chunks = await splitChunks(processedContent, 512, 20);
        const totalChunks = chunks.length;
        logger_default.info(`Generated ${totalChunks} chunks`);
        timeMarker("Chunk generation");
        const BATCH_SIZE = 10;
        let processedChunks = 0;
        for (let i = 0; i < chunks.length; i += BATCH_SIZE) {
          const batchStart = Date.now();
          const batch = chunks.slice(
            i,
            Math.min(i + BATCH_SIZE, chunks.length)
          );
          const embeddings = await Promise.all(
            batch.map((chunk) => embed(this.runtime, chunk))
          );
          await Promise.all(
            embeddings.map(async (embeddingArray, index2) => {
              const chunkId = `${scopedId}-chunk-${i + index2}`;
              const chunkEmbedding = new Float32Array(embeddingArray);
              await this.runtime.databaseAdapter.createKnowledge({
                id: chunkId,
                agentId: this.runtime.agentId,
                content: {
                  text: batch[index2],
                  metadata: {
                    source: file.path,
                    type: file.type,
                    isShared: file.isShared || false,
                    isChunk: true,
                    originalId: scopedId,
                    chunkIndex: i + index2,
                    originalPath: file.path
                  }
                },
                embedding: chunkEmbedding,
                createdAt: Date.now()
              });
            })
          );
          processedChunks += batch.length;
          const batchTime = (Date.now() - batchStart) / 1e3;
          logger_default.info(
            `[Batch Progress] ${file.path}: Processed ${processedChunks}/${totalChunks} chunks (${batchTime.toFixed(2)}s for batch)`
          );
        }
        const totalTime = (Date.now() - startTime) / 1e3;
        logger_default.info(
          `[Complete] Processed ${file.path} in ${totalTime.toFixed(2)}s`
        );
      } catch (error) {
        if (file.isShared && error?.code === "SQLITE_CONSTRAINT_PRIMARYKEY") {
          logger_default.info(
            `Shared knowledge ${file.path} already exists in database, skipping creation`
          );
          return;
        }
        logger_default.error(`Error processing file ${file.path}:`, error);
        throw error;
      }
    }
  };
  
  // src/runtime.ts
  import { glob } from "glob";
  import { existsSync as existsSync2 } from "fs";
  function isDirectoryItem(item) {
    return typeof item === "object" && item !== null && "directory" in item && typeof item.directory === "string";
  }
  var AgentRuntime = class {
    /**
     * Default count for recent messages to be kept in memory.
     * @private
     */
    #conversationLength = 32;
    /**
     * The ID of the agent
     */
    agentId;
    /**
     * The base URL of the server where the agent's requests are processed.
     */
    serverUrl = "http://localhost:7998";
    /**
     * The database adapter used for interacting with the database.
     */
    databaseAdapter;
    /**
     * Authentication token used for securing requests.
     */
    token;
    /**
     * Custom actions that the agent can perform.
     */
    actions = [];
    /**
     * Evaluators used to assess and guide the agent's responses.
     */
    evaluators = [];
    /**
     * Context providers used to provide context for message generation.
     */
    providers = [];
    plugins = [];
    /**
     * The model to use for generateText.
     */
    modelProvider;
    /**
     * The model to use for generateImage.
     */
    imageModelProvider;
    /**
     * The model to use for describing images.
     */
    imageVisionModelProvider;
    /**
     * Fetch function to use
     * Some environments may not have access to the global fetch function and need a custom fetch override.
     */
    fetch = fetch;
    /**
     * The character to use for the agent
     */
    character;
    /**
     * Store messages that are sent and received by the agent.
     */
    messageManager;
    /**
     * Store and recall descriptions of users based on conversations.
     */
    descriptionManager;
    /**
     * Manage the creation and recall of static information (documents, historical game lore, etc)
     */
    loreManager;
    /**
     * Hold large documents that can be referenced
     */
    documentsManager;
    /**
     * Searchable document fragments
     */
    knowledgeManager;
    ragKnowledgeManager;
    knowledgeRoot;
    services = /* @__PURE__ */ new Map();
    memoryManagers = /* @__PURE__ */ new Map();
    cacheManager;
    clients;
    verifiableInferenceAdapter;
    registerMemoryManager(manager) {
      if (!manager.tableName) {
        throw new Error("Memory manager must have a tableName");
      }
      if (this.memoryManagers.has(manager.tableName)) {
        elizaLogger.warn(
          `Memory manager ${manager.tableName} is already registered. Skipping registration.`
        );
        return;
      }
      this.memoryManagers.set(manager.tableName, manager);
    }
    getMemoryManager(tableName) {
      return this.memoryManagers.get(tableName) || null;
    }
    getService(service) {
      const serviceInstance = this.services.get(service);
      if (!serviceInstance) {
        elizaLogger.error(`Service ${service} not found`);
        return null;
      }
      return serviceInstance;
    }
    async registerService(service) {
      const serviceType = service.serviceType;
      elizaLogger.log(`${this.character.name}(${this.agentId}) - Registering service:`, serviceType);
      if (this.services.has(serviceType)) {
        elizaLogger.warn(
          `${this.character.name}(${this.agentId}) - Service ${serviceType} is already registered. Skipping registration.`
        );
        return;
      }
      this.services.set(serviceType, service);
      elizaLogger.success(`${this.character.name}(${this.agentId}) - Service ${serviceType} registered successfully`);
    }
    /**
     * Creates an instance of AgentRuntime.
     * @param opts - The options for configuring the AgentRuntime.
     * @param opts.conversationLength - The number of messages to hold in the recent message cache.
     * @param opts.token - The JWT token, can be a JWT token if outside worker, or an OpenAI token if inside worker.
     * @param opts.serverUrl - The URL of the worker.
     * @param opts.actions - Optional custom actions.
     * @param opts.evaluators - Optional custom evaluators.
     * @param opts.services - Optional custom services.
     * @param opts.memoryManagers - Optional custom memory managers.
     * @param opts.providers - Optional context providers.
     * @param opts.model - The model to use for generateText.
     * @param opts.embeddingModel - The model to use for embedding.
     * @param opts.agentId - Optional ID of the agent.
     * @param opts.databaseAdapter - The database adapter used for interacting with the database.
     * @param opts.fetch - Custom fetch function to use for making requests.
     */
    constructor(opts) {
      this.agentId = opts.character?.id ?? opts?.agentId ?? stringToUuid(opts.character?.name ?? uuidv4());
      this.character = opts.character || defaultCharacter;
      elizaLogger.info(`${this.character.name}(${this.agentId}) - Initializing AgentRuntime with options:`, {
        character: opts.character?.name,
        modelProvider: opts.modelProvider,
        characterModelProvider: opts.character?.modelProvider
      });
      elizaLogger.debug(
        `[AgentRuntime] Process working directory: ${process.cwd()}`
      );
      this.knowledgeRoot = join2(
        process.cwd(),
        "characters",
        "knowledge"
      );
      elizaLogger.debug(
        `[AgentRuntime] Process knowledgeRoot: ${this.knowledgeRoot}`
      );
      this.#conversationLength = opts.conversationLength ?? this.#conversationLength;
      if (!opts.databaseAdapter) {
        throw new Error("No database adapter provided");
      }
      this.databaseAdapter = opts.databaseAdapter;
      this.ensureRoomExists(this.agentId);
      this.ensureUserExists(
        this.agentId,
        this.character.username || this.character.name,
        this.character.name
      ).then(() => {
        this.ensureParticipantExists(this.agentId, this.agentId);
      });
      elizaLogger.success(`Agent ID: ${this.agentId}`);
      this.fetch = opts.fetch ?? this.fetch;
      this.cacheManager = opts.cacheManager;
      this.messageManager = new MemoryManager({
        runtime: this,
        tableName: "messages"
      });
      this.descriptionManager = new MemoryManager({
        runtime: this,
        tableName: "descriptions"
      });
      this.loreManager = new MemoryManager({
        runtime: this,
        tableName: "lore"
      });
      this.documentsManager = new MemoryManager({
        runtime: this,
        tableName: "documents"
      });
      this.knowledgeManager = new MemoryManager({
        runtime: this,
        tableName: "fragments"
      });
      this.ragKnowledgeManager = new RAGKnowledgeManager({
        runtime: this,
        tableName: "knowledge",
        knowledgeRoot: this.knowledgeRoot
      });
      (opts.managers ?? []).forEach((manager) => {
        this.registerMemoryManager(manager);
      });
      (opts.services ?? []).forEach((service) => {
        this.registerService(service);
      });
      this.serverUrl = opts.serverUrl ?? this.serverUrl;
      elizaLogger.info(`${this.character.name}(${this.agentId}) - Setting Model Provider:`, {
        characterModelProvider: this.character.modelProvider,
        optsModelProvider: opts.modelProvider,
        currentModelProvider: this.modelProvider,
        finalSelection: this.character.modelProvider ?? opts.modelProvider ?? this.modelProvider
      });
      this.modelProvider = this.character.modelProvider ?? opts.modelProvider ?? this.modelProvider;
      this.imageModelProvider = this.character.imageModelProvider ?? this.modelProvider;
      this.imageVisionModelProvider = this.character.imageVisionModelProvider ?? this.modelProvider;
      elizaLogger.info(
        `${this.character.name}(${this.agentId}) - Selected model provider:`,
        this.modelProvider
      );
      elizaLogger.info(
        `${this.character.name}(${this.agentId}) - Selected image model provider:`,
        this.imageModelProvider
      );
      elizaLogger.info(
        `${this.character.name}(${this.agentId}) - Selected image vision model provider:`,
        this.imageVisionModelProvider
      );
      if (!Object.values(ModelProviderName).includes(this.modelProvider)) {
        elizaLogger.error("Invalid model provider:", this.modelProvider);
        elizaLogger.error(
          "Available providers:",
          Object.values(ModelProviderName)
        );
        throw new Error(`Invalid model provider: ${this.modelProvider}`);
      }
      if (!this.serverUrl) {
        elizaLogger.warn("No serverUrl provided, defaulting to localhost");
      }
      this.token = opts.token;
      this.plugins = [
        ...opts.character?.plugins ?? [],
        ...opts.plugins ?? []
      ];
      this.plugins.forEach((plugin) => {
        plugin.actions?.forEach((action) => {
          this.registerAction(action);
        });
        plugin.evaluators?.forEach((evaluator) => {
          this.registerEvaluator(evaluator);
        });
        plugin.services?.forEach((service) => {
          this.registerService(service);
        });
        plugin.providers?.forEach((provider) => {
          this.registerContextProvider(provider);
        });
      });
      (opts.actions ?? []).forEach((action) => {
        this.registerAction(action);
      });
      (opts.providers ?? []).forEach((provider) => {
        this.registerContextProvider(provider);
      });
      (opts.evaluators ?? []).forEach((evaluator) => {
        this.registerEvaluator(evaluator);
      });
      this.verifiableInferenceAdapter = opts.verifiableInferenceAdapter;
    }
    async initialize() {
      for (const [serviceType, service] of this.services.entries()) {
        try {
          await service.initialize(this);
          this.services.set(serviceType, service);
          elizaLogger.success(
            `${this.character.name}(${this.agentId}) - Service ${serviceType} initialized successfully`
          );
        } catch (error) {
          elizaLogger.error(
            `${this.character.name}(${this.agentId}) - Failed to initialize service ${serviceType}:`,
            error
          );
          throw error;
        }
      }
      if (this.character && this.character.knowledge && this.character.knowledge.length > 0) {
        elizaLogger.info(
          `[RAG Check] RAG Knowledge enabled: ${this.character.settings.ragKnowledge ? true : false}`
        );
        elizaLogger.info(
          `[RAG Check] Knowledge items:`,
          this.character.knowledge
        );
        if (this.character.settings.ragKnowledge) {
          const [directoryKnowledge, pathKnowledge, stringKnowledge] = this.character.knowledge.reduce(
            (acc, item) => {
              if (typeof item === "object") {
                if (isDirectoryItem(item)) {
                  elizaLogger.debug(
                    `[RAG Filter] Found directory item: ${JSON.stringify(item)}`
                  );
                  acc[0].push(item);
                } else if ("path" in item) {
                  elizaLogger.debug(
                    `[RAG Filter] Found path item: ${JSON.stringify(item)}`
                  );
                  acc[1].push(item);
                }
              } else if (typeof item === "string") {
                elizaLogger.debug(
                  `[RAG Filter] Found string item: ${item.slice(0, 100)}...`
                );
                acc[2].push(item);
              }
              return acc;
            },
            [[], [], []]
          );
          elizaLogger.info(
            `[RAG Summary] Found ${directoryKnowledge.length} directories, ${pathKnowledge.length} paths, and ${stringKnowledge.length} strings`
          );
          if (directoryKnowledge.length > 0) {
            elizaLogger.info(
              `[RAG Process] Processing directory knowledge sources:`
            );
            for (const dir of directoryKnowledge) {
              elizaLogger.info(
                `  - Directory: ${dir.directory} (shared: ${!!dir.shared})`
              );
              await this.processCharacterRAGDirectory(dir);
            }
          }
          if (pathKnowledge.length > 0) {
            elizaLogger.info(
              `[RAG Process] Processing individual file knowledge sources`
            );
            await this.processCharacterRAGKnowledge(pathKnowledge);
          }
          if (stringKnowledge.length > 0) {
            elizaLogger.info(
              `[RAG Process] Processing direct string knowledge`
            );
            await this.processCharacterKnowledge(stringKnowledge);
          }
        } else {
          const stringKnowledge = this.character.knowledge.filter(
            (item) => typeof item === "string"
          );
          await this.processCharacterKnowledge(stringKnowledge);
        }
        elizaLogger.info(
          `[RAG Cleanup] Starting cleanup of deleted knowledge files`
        );
        await this.ragKnowledgeManager.cleanupDeletedKnowledgeFiles();
        elizaLogger.info(`[RAG Cleanup] Cleanup complete`);
      }
    }
    async stop() {
      elizaLogger.debug("runtime::stop - character", this.character.name);
      for (const cStr in this.clients) {
        const c = this.clients[cStr];
        elizaLogger.log(
          "runtime::stop - requesting",
          cStr,
          "client stop for",
          this.character.name
        );
        c.stop();
      }
    }
    /**
     * Processes character knowledge by creating document memories and fragment memories.
     * This function takes an array of knowledge items, creates a document memory for each item if it doesn't exist,
     * then chunks the content into fragments, embeds each fragment, and creates fragment memories.
     * @param knowledge An array of knowledge items containing id, path, and content.
     */
    async processCharacterKnowledge(items) {
      for (const item of items) {
        const knowledgeId = stringToUuid(item);
        const existingDocument = await this.documentsManager.getMemoryById(knowledgeId);
        if (existingDocument) {
          continue;
        }
        elizaLogger.info(
          "Processing knowledge for ",
          this.character.name,
          " - ",
          item.slice(0, 100)
        );
        await knowledge_default.set(this, {
          id: knowledgeId,
          content: {
            text: item
          }
        });
      }
    }
    /**
     * Processes character knowledge by creating document memories and fragment memories.
     * This function takes an array of knowledge items, creates a document knowledge for each item if it doesn't exist,
     * then chunks the content into fragments, embeds each fragment, and creates fragment knowledge.
     * An array of knowledge items or objects containing id, path, and content.
     */
    async processCharacterRAGKnowledge(items) {
      let hasError = false;
      for (const item of items) {
        if (!item) continue;
        try {
          let isShared = false;
          let contentItem = item;
          if (typeof item === "object" && "path" in item) {
            isShared = item.shared === true;
            contentItem = item.path;
          } else {
            contentItem = item;
          }
          const knowledgeId = this.ragKnowledgeManager.generateScopedId(
            contentItem,
            isShared
          );
          const fileExtension = contentItem.split(".").pop()?.toLowerCase();
          if (fileExtension && ["md", "txt", "pdf"].includes(fileExtension)) {
            try {
              const filePath = join2(this.knowledgeRoot, contentItem);
              elizaLogger.debug("[RAG Query]", {
                knowledgeId,
                agentId: this.agentId,
                relativePath: contentItem,
                fullPath: filePath,
                isShared,
                knowledgeRoot: this.knowledgeRoot
              });
              const existingKnowledge = await this.ragKnowledgeManager.getKnowledge({
                id: knowledgeId,
                agentId: this.agentId
                // Keep agentId as it's used in OR query
              });
              elizaLogger.debug("[RAG Query Result]", {
                relativePath: contentItem,
                fullPath: filePath,
                knowledgeId,
                isShared,
                exists: existingKnowledge.length > 0,
                knowledgeCount: existingKnowledge.length,
                firstResult: existingKnowledge[0] ? {
                  id: existingKnowledge[0].id,
                  agentId: existingKnowledge[0].agentId,
                  contentLength: existingKnowledge[0].content.text.length
                } : null,
                results: existingKnowledge.map((k) => ({
                  id: k.id,
                  agentId: k.agentId,
                  isBaseKnowledge: !k.id.includes("chunk")
                }))
              });
              const content = await readFile(
                filePath,
                "utf8"
              );
              if (!content) {
                hasError = true;
                continue;
              }
              if (existingKnowledge.length > 0) {
                const existingContent = existingKnowledge[0].content.text;
                elizaLogger.debug("[RAG Compare]", {
                  path: contentItem,
                  knowledgeId,
                  isShared,
                  existingContentLength: existingContent.length,
                  newContentLength: content.length,
                  contentSample: content.slice(0, 100),
                  existingContentSample: existingContent.slice(
                    0,
                    100
                  ),
                  matches: existingContent === content
                });
                if (existingContent === content) {
                  elizaLogger.info(
                    `${isShared ? "Shared knowledge" : "Knowledge"} ${contentItem} unchanged, skipping`
                  );
                  continue;
                }
                elizaLogger.info(
                  `${isShared ? "Shared knowledge" : "Knowledge"} ${contentItem} changed, updating...`
                );
                await this.ragKnowledgeManager.removeKnowledge(
                  knowledgeId
                );
                await this.ragKnowledgeManager.removeKnowledge(
                  `${knowledgeId}-chunk-*`
                );
              }
              elizaLogger.info(
                `Processing ${fileExtension.toUpperCase()} file content for`,
                this.character.name,
                "-",
                contentItem
              );
              await this.ragKnowledgeManager.processFile({
                path: contentItem,
                content,
                type: fileExtension,
                isShared
              });
            } catch (error) {
              hasError = true;
              elizaLogger.error(
                `Failed to read knowledge file ${contentItem}. Error details:`,
                error?.message || error || "Unknown error"
              );
              continue;
            }
          } else {
            elizaLogger.info(
              "Processing direct knowledge for",
              this.character.name,
              "-",
              contentItem.slice(0, 100)
            );
            const existingKnowledge = await this.ragKnowledgeManager.getKnowledge({
              id: knowledgeId,
              agentId: this.agentId
            });
            if (existingKnowledge.length > 0) {
              elizaLogger.info(
                `Direct knowledge ${knowledgeId} already exists, skipping`
              );
              continue;
            }
            await this.ragKnowledgeManager.createKnowledge({
              id: knowledgeId,
              agentId: this.agentId,
              content: {
                text: contentItem,
                metadata: {
                  type: "direct"
                }
              }
            });
          }
        } catch (error) {
          hasError = true;
          elizaLogger.error(
            `Error processing knowledge item ${item}:`,
            error?.message || error || "Unknown error"
          );
          continue;
        }
      }
      if (hasError) {
        elizaLogger.warn(
          "Some knowledge items failed to process, but continuing with available knowledge"
        );
      }
    }
    /**
     * Processes directory-based RAG knowledge by recursively loading and processing files.
     * @param dirConfig The directory configuration containing path and shared flag
     */
    async processCharacterRAGDirectory(dirConfig) {
      if (!dirConfig.directory) {
        elizaLogger.error("[RAG Directory] No directory specified");
        return;
      }
      const sanitizedDir = dirConfig.directory.replace(/\.\./g, "");
      const dirPath = join2(this.knowledgeRoot, sanitizedDir);
      try {
        const dirExists = existsSync2(dirPath);
        if (!dirExists) {
          elizaLogger.error(
            `[RAG Directory] Directory does not exist: ${sanitizedDir}`
          );
          return;
        }
        elizaLogger.debug(`[RAG Directory] Searching in: ${dirPath}`);
        const files = await glob("**/*.{md,txt,pdf}", {
          cwd: dirPath,
          nodir: true,
          absolute: false
        });
        if (files.length === 0) {
          elizaLogger.warn(
            `No matching files found in directory: ${dirConfig.directory}`
          );
          return;
        }
        elizaLogger.info(
          `[RAG Directory] Found ${files.length} files in ${dirConfig.directory}`
        );
        const BATCH_SIZE = 5;
        for (let i = 0; i < files.length; i += BATCH_SIZE) {
          const batch = files.slice(i, i + BATCH_SIZE);
          await Promise.all(
            batch.map(async (file) => {
              try {
                const relativePath = join2(sanitizedDir, file);
                elizaLogger.debug(
                  `[RAG Directory] Processing file ${i + 1}/${files.length}:`,
                  {
                    file,
                    relativePath,
                    shared: dirConfig.shared
                  }
                );
                await this.processCharacterRAGKnowledge([
                  {
                    path: relativePath,
                    shared: dirConfig.shared
                  }
                ]);
              } catch (error) {
                elizaLogger.error(
                  `[RAG Directory] Failed to process file: ${file}`,
                  error instanceof Error ? {
                    name: error.name,
                    message: error.message,
                    stack: error.stack
                  } : error
                );
              }
            })
          );
          elizaLogger.debug(
            `[RAG Directory] Completed batch ${Math.min(i + BATCH_SIZE, files.length)}/${files.length} files`
          );
        }
        elizaLogger.success(
          `[RAG Directory] Successfully processed directory: ${sanitizedDir}`
        );
      } catch (error) {
        elizaLogger.error(
          `[RAG Directory] Failed to process directory: ${sanitizedDir}`,
          error instanceof Error ? {
            name: error.name,
            message: error.message,
            stack: error.stack
          } : error
        );
        throw error;
      }
    }
    getSetting(key) {
      if (this.character.settings?.secrets?.[key]) {
        return this.character.settings.secrets[key];
      }
      if (this.character.settings?.[key]) {
        return this.character.settings[key];
      }
      if (settings_default[key]) {
        return settings_default[key];
      }
      return null;
    }
    /**
     * Get the number of messages that are kept in the conversation buffer.
     * @returns The number of recent messages to be kept in memory.
     */
    getConversationLength() {
      return this.#conversationLength;
    }
    /**
     * Register an action for the agent to perform.
     * @param action The action to register.
     */
    registerAction(action) {
      elizaLogger.success(`${this.character.name}(${this.agentId}) - Registering action: ${action.name}`);
      this.actions.push(action);
    }
    /**
     * Register an evaluator to assess and guide the agent's responses.
     * @param evaluator The evaluator to register.
     */
    registerEvaluator(evaluator) {
      this.evaluators.push(evaluator);
    }
    /**
     * Register a context provider to provide context for message generation.
     * @param provider The context provider to register.
     */
    registerContextProvider(provider) {
      this.providers.push(provider);
    }
    /**
     * Process the actions of a message.
     * @param message The message to process.
     * @param content The content of the message to process actions from.
     */
    async processActions(message, responses, state, callback) {
      for (const response of responses) {
        if (!response.content?.action) {
          elizaLogger.warn("No action found in the response content.");
          continue;
        }
        const normalizedAction = response.content.action.toLowerCase().replace("_", "");
        elizaLogger.success(`Normalized action: ${normalizedAction}`);
        let action = this.actions.find(
          (a) => a.name.toLowerCase().replace("_", "").includes(normalizedAction) || normalizedAction.includes(
            a.name.toLowerCase().replace("_", "")
          )
        );
        if (!action) {
          elizaLogger.info("Attempting to find action in similes.");
          for (const _action of this.actions) {
            const simileAction = _action.similes.find(
              (simile) => simile.toLowerCase().replace("_", "").includes(normalizedAction) || normalizedAction.includes(
                simile.toLowerCase().replace("_", "")
              )
            );
            if (simileAction) {
              action = _action;
              elizaLogger.success(
                `Action found in similes: ${action.name}`
              );
              break;
            }
          }
        }
        if (!action) {
          elizaLogger.error(
            "No action found for",
            response.content.action
          );
          continue;
        }
        if (!action.handler) {
          elizaLogger.error(`Action ${action.name} has no handler.`);
          continue;
        }
        try {
          elizaLogger.info(
            `Executing handler for action: ${action.name}`
          );
          await action.handler(this, message, state, {}, callback);
        } catch (error) {
          elizaLogger.error(error);
        }
      }
    }
    /**
     * Evaluate the message and state using the registered evaluators.
     * @param message The message to evaluate.
     * @param state The state of the agent.
     * @param didRespond Whether the agent responded to the message.~
     * @param callback The handler callback
     * @returns The results of the evaluation.
     */
    async evaluate(message, state, didRespond, callback) {
      const evaluatorPromises = this.evaluators.map(
        async (evaluator) => {
          elizaLogger.log("Evaluating", evaluator.name);
          if (!evaluator.handler) {
            return null;
          }
          if (!didRespond && !evaluator.alwaysRun) {
            return null;
          }
          const result2 = await evaluator.validate(this, message, state);
          if (result2) {
            return evaluator;
          }
          return null;
        }
      );
      const resolvedEvaluators = await Promise.all(evaluatorPromises);
      const evaluatorsData = resolvedEvaluators.filter(
        (evaluator) => evaluator !== null
      );
      if (!evaluatorsData || evaluatorsData.length === 0) {
        return [];
      }
      const context = composeContext({
        state: {
          ...state,
          evaluators: formatEvaluators(evaluatorsData),
          evaluatorNames: formatEvaluatorNames(evaluatorsData)
        },
        template: this.character.templates?.evaluationTemplate || evaluationTemplate
      });
      const result = await generateText({
        runtime: this,
        context,
        modelClass: "small" /* SMALL */,
        verifiableInferenceAdapter: this.verifiableInferenceAdapter
      });
      const evaluators = parseJsonArrayFromText(
        result
      );
      for (const evaluator of this.evaluators) {
        if (!evaluators?.includes(evaluator.name)) continue;
        if (evaluator.handler)
          await evaluator.handler(this, message, state, {}, callback);
      }
      return evaluators;
    }
    /**
     * Ensure the existence of a participant in the room. If the participant does not exist, they are added to the room.
     * @param userId - The user ID to ensure the existence of.
     * @throws An error if the participant cannot be added.
     */
    async ensureParticipantExists(userId, roomId) {
      const participants = await this.databaseAdapter.getParticipantsForAccount(userId);
      if (participants?.length === 0) {
        await this.databaseAdapter.addParticipant(userId, roomId);
      }
    }
    /**
     * Ensure the existence of a user in the database. If the user does not exist, they are added to the database.
     * @param userId - The user ID to ensure the existence of.
     * @param userName - The user name to ensure the existence of.
     * @returns
     */
    async ensureUserExists(userId, userName, name, email, source) {
      const account = await this.databaseAdapter.getAccountById(userId);
      if (!account) {
        await this.databaseAdapter.createAccount({
          id: userId,
          name: name || this.character.name || "Unknown User",
          username: userName || this.character.username || "Unknown",
          email: email || this.character.email || userId,
          // Temporary
          details: this.character || { summary: "" }
        });
        elizaLogger.success(`User ${userName} created successfully.`);
      }
    }
    async ensureParticipantInRoom(userId, roomId) {
      const participants = await this.databaseAdapter.getParticipantsForRoom(roomId);
      if (!participants.includes(userId)) {
        await this.databaseAdapter.addParticipant(userId, roomId);
        if (userId === this.agentId) {
          elizaLogger.log(
            `Agent ${this.character.name} linked to room ${roomId} successfully.`
          );
        } else {
          elizaLogger.log(
            `User ${userId} linked to room ${roomId} successfully.`
          );
        }
      }
    }
    async ensureConnection(userId, roomId, userName, userScreenName, source) {
      await Promise.all([
        this.ensureUserExists(
          this.agentId,
          this.character.username ?? "Agent",
          this.character.name ?? "Agent",
          source
        ),
        this.ensureUserExists(
          userId,
          userName ?? "User" + userId,
          userScreenName ?? "User" + userId,
          source
        ),
        this.ensureRoomExists(roomId)
      ]);
      await Promise.all([
        this.ensureParticipantInRoom(userId, roomId),
        this.ensureParticipantInRoom(this.agentId, roomId)
      ]);
    }
    /**
     * Ensure the existence of a room between the agent and a user. If no room exists, a new room is created and the user
     * and agent are added as participants. The room ID is returned.
     * @param userId - The user ID to create a room with.
     * @returns The room ID of the room between the agent and the user.
     * @throws An error if the room cannot be created.
     */
    async ensureRoomExists(roomId) {
      const room = await this.databaseAdapter.getRoom(roomId);
      if (!room) {
        await this.databaseAdapter.createRoom(roomId);
        elizaLogger.log(`Room ${roomId} created successfully.`);
      }
    }
    /**
     * Compose the state of the agent into an object that can be passed or used for response generation.
     * @param message The message to compose the state from.
     * @returns The state of the agent.
     */
    async composeState(message, additionalKeys = {}) {
      const { userId, roomId } = message;
      const conversationLength = this.getConversationLength();
      const [actorsData, recentMessagesData, goalsData] = await Promise.all([
        getActorDetails({ runtime: this, roomId }),
        this.messageManager.getMemories({
          roomId,
          count: conversationLength,
          unique: false
        }),
        getGoals({
          runtime: this,
          count: 10,
          onlyInProgress: false,
          roomId
        })
      ]);
      const goals = formatGoalsAsString({ goals: goalsData });
      const actors = formatActors({ actors: actorsData ?? [] });
      const recentMessages = formatMessages({
        messages: recentMessagesData,
        actors: actorsData
      });
      const recentPosts = formatPosts({
        messages: recentMessagesData,
        actors: actorsData,
        conversationHeader: false
      });
      const senderName = actorsData?.find(
        (actor) => actor.id === userId
      )?.name;
      const agentName = actorsData?.find((actor) => actor.id === this.agentId)?.name || this.character.name;
      let allAttachments = message.content.attachments || [];
      if (recentMessagesData && Array.isArray(recentMessagesData)) {
        const lastMessageWithAttachment = recentMessagesData.find(
          (msg) => msg.content.attachments && msg.content.attachments.length > 0
        );
        if (lastMessageWithAttachment) {
          const lastMessageTime = lastMessageWithAttachment?.createdAt ?? Date.now();
          const oneHourBeforeLastMessage = lastMessageTime - 60 * 60 * 1e3;
          allAttachments = recentMessagesData.reverse().flatMap((msg) => {
            const msgTime = msg.createdAt ?? Date.now();
            const isWithinTime = msgTime >= oneHourBeforeLastMessage;
            const attachments = msg.content.attachments || [];
            if (!isWithinTime) {
              attachments.forEach((attachment) => {
                attachment.text = "[Hidden]";
              });
            }
            return attachments;
          });
        }
      }
      const formattedAttachments = allAttachments.map(
        (attachment) => `ID: ${attachment.id}
  Name: ${attachment.title}
  URL: ${attachment.url}
  Type: ${attachment.source}
  Description: ${attachment.description}
  Text: ${attachment.text}
    `
      ).join("\n");
      let lore = "";
      if (this.character.lore && this.character.lore.length > 0) {
        const shuffledLore = [...this.character.lore].sort(
          () => Math.random() - 0.5
        );
        const selectedLore = shuffledLore.slice(0, 10);
        lore = selectedLore.join("\n");
      }
      const formattedCharacterPostExamples = this.character.postExamples.sort(() => 0.5 - Math.random()).map((post) => {
        const messageString = `${post}`;
        return messageString;
      }).slice(0, 50).join("\n");
      const formattedCharacterMessageExamples = this.character.messageExamples.sort(() => 0.5 - Math.random()).slice(0, 5).map((example) => {
        const exampleNames = Array.from(
          { length: 5 },
          () => uniqueNamesGenerator4({ dictionaries: [names4] })
        );
        return example.map((message2) => {
          let messageString = `${message2.user}: ${message2.content.text}`;
          exampleNames.forEach((name, index2) => {
            const placeholder = `{{user${index2 + 1}}}`;
            messageString = messageString.replaceAll(
              placeholder,
              name
            );
          });
          return messageString;
        }).join("\n");
      }).join("\n\n");
      const getRecentInteractions = async (userA, userB) => {
        const rooms = await this.databaseAdapter.getRoomsForParticipants([
          userA,
          userB
        ]);
        return this.messageManager.getMemoriesByRoomIds({
          // filter out the current room id from rooms
          roomIds: rooms.filter((room) => room !== roomId),
          limit: 20
        });
      };
      const recentInteractions = userId !== this.agentId ? await getRecentInteractions(userId, this.agentId) : [];
      const getRecentMessageInteractions = async (recentInteractionsData) => {
        const formattedInteractions = await Promise.all(
          recentInteractionsData.map(async (message2) => {
            const isSelf = message2.userId === this.agentId;
            let sender;
            if (isSelf) {
              sender = this.character.name;
            } else {
              const accountId = await this.databaseAdapter.getAccountById(
                message2.userId
              );
              sender = accountId?.username || "unknown";
            }
            return `${sender}: ${message2.content.text}`;
          })
        );
        return formattedInteractions.join("\n");
      };
      const formattedMessageInteractions = await getRecentMessageInteractions(recentInteractions);
      const getRecentPostInteractions = async (recentInteractionsData, actors2) => {
        const formattedInteractions = formatPosts({
          messages: recentInteractionsData,
          actors: actors2,
          conversationHeader: true
        });
        return formattedInteractions;
      };
      const formattedPostInteractions = await getRecentPostInteractions(
        recentInteractions,
        actorsData
      );
      let bio = this.character.bio || "";
      if (Array.isArray(bio)) {
        bio = bio.sort(() => 0.5 - Math.random()).slice(0, 3).join(" ");
      }
      let knowledgeData = [];
      let formattedKnowledge = "";
      if (this.character.settings?.ragKnowledge) {
        const recentContext = recentMessagesData.slice(-3).map((msg) => msg.content.text).join(" ");
        knowledgeData = await this.ragKnowledgeManager.getKnowledge({
          query: message.content.text,
          conversationContext: recentContext,
          limit: 500
        });
        formattedKnowledge = formatKnowledge(knowledgeData);
      } else {
        knowledgeData = await knowledge_default.get(this, message);
        formattedKnowledge = formatKnowledge(knowledgeData);
      }
      const initialState = {
        agentId: this.agentId,
        agentName,
        bio,
        lore,
        adjective: this.character.adjectives && this.character.adjectives.length > 0 ? this.character.adjectives[Math.floor(
          Math.random() * this.character.adjectives.length
        )] : "",
        knowledge: formattedKnowledge,
        knowledgeData,
        ragKnowledgeData: knowledgeData,
        // Recent interactions between the sender and receiver, formatted as messages
        recentMessageInteractions: formattedMessageInteractions,
        // Recent interactions between the sender and receiver, formatted as posts
        recentPostInteractions: formattedPostInteractions,
        // Raw memory[] array of interactions
        recentInteractionsData: recentInteractions,
        // randomly pick one topic
        topic: this.character.topics && this.character.topics.length > 0 ? this.character.topics[Math.floor(
          Math.random() * this.character.topics.length
        )] : null,
        topics: this.character.topics && this.character.topics.length > 0 ? `${this.character.name} is interested in ` + this.character.topics.sort(() => 0.5 - Math.random()).slice(0, 5).map((topic, index2, array) => {
          if (index2 === array.length - 2) {
            return topic + " and ";
          }
          if (index2 === array.length - 1) {
            return topic;
          }
          return topic + ", ";
        }).join("") : "",
        characterPostExamples: formattedCharacterPostExamples && formattedCharacterPostExamples.replaceAll("\n", "").length > 0 ? addHeader(
          `# Example Posts for ${this.character.name}`,
          formattedCharacterPostExamples
        ) : "",
        characterMessageExamples: formattedCharacterMessageExamples && formattedCharacterMessageExamples.replaceAll("\n", "").length > 0 ? addHeader(
          `# Example Conversations for ${this.character.name}`,
          formattedCharacterMessageExamples
        ) : "",
        messageDirections: this.character?.style?.all?.length > 0 || this.character?.style?.chat.length > 0 ? addHeader(
          "# Message Directions for " + this.character.name,
          (() => {
            const all = this.character?.style?.all || [];
            const chat = this.character?.style?.chat || [];
            return [...all, ...chat].join("\n");
          })()
        ) : "",
        postDirections: this.character?.style?.all?.length > 0 || this.character?.style?.post.length > 0 ? addHeader(
          "# Post Directions for " + this.character.name,
          (() => {
            const all = this.character?.style?.all || [];
            const post = this.character?.style?.post || [];
            return [...all, ...post].join("\n");
          })()
        ) : "",
        //old logic left in for reference
        //food for thought. how could we dynamically decide what parts of the character to add to the prompt other than random? rag? prompt the llm to decide?
        /*
        postDirections:
            this.character?.style?.all?.length > 0 ||
            this.character?.style?.post.length > 0
                ? addHeader(
                        "# Post Directions for " + this.character.name,
                        (() => {
                            const all = this.character?.style?.all || [];
                            const post = this.character?.style?.post || [];
                            const shuffled = [...all, ...post].sort(
                                () => 0.5 - Math.random()
                            );
                            return shuffled
                                .slice(0, conversationLength / 2)
                                .join("\n");
                        })()
                    )
                : "",*/
        // Agent runtime stuff
        senderName,
        actors: actors && actors.length > 0 ? addHeader("# Actors", actors) : "",
        actorsData,
        roomId,
        goals: goals && goals.length > 0 ? addHeader(
          "# Goals\n{{agentName}} should prioritize accomplishing the objectives that are in progress.",
          goals
        ) : "",
        goalsData,
        recentMessages: recentMessages && recentMessages.length > 0 ? addHeader("# Conversation Messages", recentMessages) : "",
        recentPosts: recentPosts && recentPosts.length > 0 ? addHeader("# Posts in Thread", recentPosts) : "",
        recentMessagesData,
        attachments: formattedAttachments && formattedAttachments.length > 0 ? addHeader("# Attachments", formattedAttachments) : "",
        ...additionalKeys
      };
      const actionPromises = this.actions.map(async (action) => {
        const result = await action.validate(this, message, initialState);
        if (result) {
          return action;
        }
        return null;
      });
      const evaluatorPromises = this.evaluators.map(async (evaluator) => {
        const result = await evaluator.validate(
          this,
          message,
          initialState
        );
        if (result) {
          return evaluator;
        }
        return null;
      });
      const [resolvedEvaluators, resolvedActions, providers] = await Promise.all([
        Promise.all(evaluatorPromises),
        Promise.all(actionPromises),
        getProviders(this, message, initialState)
      ]);
      const evaluatorsData = resolvedEvaluators.filter(
        Boolean
      );
      const actionsData = resolvedActions.filter(Boolean);
      const actionState = {
        actionNames: "Possible response actions: " + formatActionNames(actionsData),
        actions: actionsData.length > 0 ? addHeader(
          "# Available Actions",
          formatActions(actionsData)
        ) : "",
        actionExamples: actionsData.length > 0 ? addHeader(
          "# Action Examples",
          composeActionExamples(actionsData, 10)
        ) : "",
        evaluatorsData,
        evaluators: evaluatorsData.length > 0 ? formatEvaluators(evaluatorsData) : "",
        evaluatorNames: evaluatorsData.length > 0 ? formatEvaluatorNames(evaluatorsData) : "",
        evaluatorExamples: evaluatorsData.length > 0 ? formatEvaluatorExamples(evaluatorsData) : "",
        providers: addHeader(
          `# Additional Information About ${this.character.name} and The World`,
          providers
        )
      };
      return { ...initialState, ...actionState };
    }
    async updateRecentMessageState(state) {
      const conversationLength = this.getConversationLength();
      const recentMessagesData = await this.messageManager.getMemories({
        roomId: state.roomId,
        count: conversationLength,
        unique: false
      });
      const recentMessages = formatMessages({
        actors: state.actorsData ?? [],
        messages: recentMessagesData.map((memory) => {
          const newMemory = { ...memory };
          delete newMemory.embedding;
          return newMemory;
        })
      });
      let allAttachments = [];
      if (recentMessagesData && Array.isArray(recentMessagesData)) {
        const lastMessageWithAttachment = recentMessagesData.find(
          (msg) => msg.content.attachments && msg.content.attachments.length > 0
        );
        if (lastMessageWithAttachment) {
          const lastMessageTime = lastMessageWithAttachment?.createdAt ?? Date.now();
          const oneHourBeforeLastMessage = lastMessageTime - 60 * 60 * 1e3;
          allAttachments = recentMessagesData.filter((msg) => {
            const msgTime = msg.createdAt ?? Date.now();
            return msgTime >= oneHourBeforeLastMessage;
          }).flatMap((msg) => msg.content.attachments || []);
        }
      }
      const formattedAttachments = allAttachments.map(
        (attachment) => `ID: ${attachment.id}
  Name: ${attachment.title}
  URL: ${attachment.url}
  Type: ${attachment.source}
  Description: ${attachment.description}
  Text: ${attachment.text}
      `
      ).join("\n");
      return {
        ...state,
        recentMessages: addHeader(
          "# Conversation Messages",
          recentMessages
        ),
        recentMessagesData,
        attachments: formattedAttachments
      };
    }
    getVerifiableInferenceAdapter() {
      return this.verifiableInferenceAdapter;
    }
    setVerifiableInferenceAdapter(adapter) {
      this.verifiableInferenceAdapter = adapter;
    }
  };
  var formatKnowledge = (knowledge) => {
    return knowledge.map((knowledge2) => `- ${knowledge2.content.text}`).join("\n");
  };
  
  // src/environment.ts
  import { z as z2 } from "zod";
  var envSchema = z2.object({
    // API Keys with specific formats
    OPENAI_API_KEY: z2.string().startsWith("sk-", "OpenAI API key must start with 'sk-'"),
    REDPILL_API_KEY: z2.string().min(1, "REDPILL API key is required"),
    GROK_API_KEY: z2.string().min(1, "GROK API key is required"),
    GROQ_API_KEY: z2.string().startsWith("gsk_", "GROQ API key must start with 'gsk_'"),
    OPENROUTER_API_KEY: z2.string().min(1, "OpenRouter API key is required"),
    GOOGLE_GENERATIVE_AI_API_KEY: z2.string().min(1, "Gemini API key is required"),
    ELEVENLABS_XI_API_KEY: z2.string().min(1, "ElevenLabs API key is required")
  });
  function validateEnv() {
    try {
      return envSchema.parse(process.env);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        const errorMessages = error.errors.map((err) => `${err.path}: ${err.message}`).join("\n");
        throw new Error(`Environment validation failed:
  ${errorMessages}`);
      }
      throw error;
    }
  }
  var MessageExampleSchema = z2.object({
    user: z2.string(),
    content: z2.object({
      text: z2.string(),
      action: z2.string().optional(),
      source: z2.string().optional(),
      url: z2.string().optional(),
      inReplyTo: z2.string().uuid().optional(),
      attachments: z2.array(z2.any()).optional()
    }).and(z2.record(z2.string(), z2.unknown()))
    // For additional properties
  });
  var PluginSchema = z2.object({
    name: z2.string(),
    description: z2.string(),
    actions: z2.array(z2.any()).optional(),
    providers: z2.array(z2.any()).optional(),
    evaluators: z2.array(z2.any()).optional(),
    services: z2.array(z2.any()).optional(),
    clients: z2.array(z2.any()).optional()
  });
  var CharacterSchema = z2.object({
    id: z2.string().uuid().optional(),
    name: z2.string(),
    system: z2.string().optional(),
    modelProvider: z2.nativeEnum(ModelProviderName),
    modelEndpointOverride: z2.string().optional(),
    templates: z2.record(z2.string()).optional(),
    bio: z2.union([z2.string(), z2.array(z2.string())]),
    lore: z2.array(z2.string()),
    messageExamples: z2.array(z2.array(MessageExampleSchema)),
    postExamples: z2.array(z2.string()),
    topics: z2.array(z2.string()),
    adjectives: z2.array(z2.string()),
    knowledge: z2.array(
      z2.union([
        z2.string(),
        // Direct knowledge strings
        z2.object({
          // Individual file config
          path: z2.string(),
          shared: z2.boolean().optional()
        }),
        z2.object({
          // Directory config
          directory: z2.string(),
          shared: z2.boolean().optional()
        })
      ])
    ).optional(),
    clients: z2.array(z2.nativeEnum(Clients)),
    plugins: z2.union([z2.array(z2.string()), z2.array(PluginSchema)]),
    settings: z2.object({
      secrets: z2.record(z2.string()).optional(),
      voice: z2.object({
        model: z2.string().optional(),
        url: z2.string().optional()
      }).optional(),
      model: z2.string().optional(),
      embeddingModel: z2.string().optional()
    }).optional(),
    clientConfig: z2.object({
      discord: z2.object({
        shouldIgnoreBotMessages: z2.boolean().optional(),
        shouldIgnoreDirectMessages: z2.boolean().optional()
      }).optional(),
      telegram: z2.object({
        shouldIgnoreBotMessages: z2.boolean().optional(),
        shouldIgnoreDirectMessages: z2.boolean().optional()
      }).optional()
    }).optional(),
    style: z2.object({
      all: z2.array(z2.string()),
      chat: z2.array(z2.string()),
      post: z2.array(z2.string())
    }),
    twitterProfile: z2.object({
      username: z2.string(),
      screenName: z2.string(),
      bio: z2.string(),
      nicknames: z2.array(z2.string()).optional()
    }).optional(),
    nft: z2.object({
      prompt: z2.string().optional()
    }).optional(),
    extends: z2.array(z2.string()).optional()
  });
  function validateCharacterConfig(json) {
    try {
      return CharacterSchema.parse(json);
    } catch (error) {
      if (error instanceof z2.ZodError) {
        const groupedErrors = error.errors.reduce(
          (acc, err) => {
            const path5 = err.path.join(".");
            if (!acc[path5]) {
              acc[path5] = [];
            }
            acc[path5].push(err.message);
            return acc;
          },
          {}
        );
        Object.entries(groupedErrors).forEach(([field, messages]) => {
          logger_default.error(
            `Validation errors in ${field}: ${messages.join(" - ")}`
          );
        });
        throw new Error(
          "Character configuration validation failed. Check logs for details."
        );
      }
      throw error;
    }
  }
  
  // src/cache.ts
  import path4 from "path";
  import fs2 from "fs/promises";
  var MemoryCacheAdapter = class {
    data;
    constructor(initalData) {
      this.data = initalData ?? /* @__PURE__ */ new Map();
    }
    async get(key) {
      return this.data.get(key);
    }
    async set(key, value) {
      this.data.set(key, value);
    }
    async delete(key) {
      this.data.delete(key);
    }
  };
  var FsCacheAdapter = class {
    constructor(dataDir) {
      this.dataDir = dataDir;
    }
    async get(key) {
      try {
        return await fs2.readFile(path4.join(this.dataDir, key), "utf8");
      } catch {
        return void 0;
      }
    }
    async set(key, value) {
      try {
        const filePath = path4.join(this.dataDir, key);
        await fs2.mkdir(path4.dirname(filePath), { recursive: true });
        await fs2.writeFile(filePath, value, "utf8");
      } catch (error) {
        console.error(error);
      }
    }
    async delete(key) {
      try {
        const filePath = path4.join(this.dataDir, key);
        await fs2.unlink(filePath);
      } catch {
      }
    }
  };
  var DbCacheAdapter = class {
    constructor(db, agentId) {
      this.db = db;
      this.agentId = agentId;
    }
    async get(key) {
      return this.db.getCache({ agentId: this.agentId, key });
    }
    async set(key, value) {
      await this.db.setCache({ agentId: this.agentId, key, value });
    }
    async delete(key) {
      await this.db.deleteCache({ agentId: this.agentId, key });
    }
  };
  var CacheManager = class {
    adapter;
    constructor(adapter) {
      this.adapter = adapter;
    }
    async get(key) {
      const data = await this.adapter.get(key);
      if (data) {
        const { value, expires } = JSON.parse(data);
        if (!expires || expires > Date.now()) {
          return value;
        }
        this.adapter.delete(key).catch(() => {
        });
      }
      return void 0;
    }
    async set(key, value, opts) {
      return this.adapter.set(
        key,
        JSON.stringify({ value, expires: opts?.expires ?? 0 })
      );
    }
    async delete(key) {
      return this.adapter.delete(key);
    }
  };
  export {
    ActionTimelineType,
    AgentRuntime,
    CacheKeyPrefix,
    CacheManager,
    CacheStore,
    CharacterSchema,
    Clients,
    DatabaseAdapter,
    DbCacheAdapter,
    EmbeddingProvider,
    FsCacheAdapter,
    GoalStatus,
    IrysDataType,
    IrysMessageType,
    KnowledgeScope,
    LoggingLevel,
    MemoryCacheAdapter,
    MemoryManager,
    ModelClass,
    ModelProviderName,
    RAGKnowledgeManager,
    Service,
    ServiceType,
    TokenizerType,
    TranscriptionProvider,
    VerifiableInferenceProvider,
    addHeader,
    booleanFooter,
    cleanJsonResponse,
    composeActionExamples,
    composeContext,
    composeRandomUser,
    configureSettings,
    createGoal,
    createRelationship,
    defaultCharacter,
    elizaLogger,
    embed,
    envSchema,
    evaluationTemplate,
    extractAttributes,
    findNearestEnvFile,
    formatActionNames,
    formatActions,
    formatActors,
    formatEvaluatorExampleDescriptions,
    formatEvaluatorExamples,
    formatEvaluatorNames,
    formatEvaluators,
    formatGoalsAsString,
    formatMessages,
    formatPosts,
    formatRelationships,
    formatTimestamp,
    generateCaption,
    generateImage,
    generateMessageResponse,
    generateObject,
    generateObjectArray,
    generateObjectDeprecated,
    generateShouldRespond,
    generateText,
    generateTextArray,
    generateTrueOrFalse,
    generateTweetActions,
    getActorDetails,
    getEmbeddingConfig,
    getEmbeddingModelSettings,
    getEmbeddingType,
    getEmbeddingZeroVector,
    getEndpoint,
    getEnvVariable,
    getGoals,
    getImageModelSettings,
    getModelSettings,
    getProviders,
    getRelationship,
    getRelationships,
    handleProvider,
    hasEnvVariable,
    knowledge_default as knowledge,
    loadEnvConfig,
    messageCompletionFooter,
    models,
    normalizeJsonString,
    parseActionResponseFromText,
    parseBooleanFromText,
    parseJSONObjectFromText,
    parseJsonArrayFromText,
    parseShouldRespondFromText,
    postActionResponseFooter,
    settings,
    shouldRespondFooter,
    splitChunks,
    stringArrayFooter,
    stringToUuid,
    trimTokens,
    truncateToCompleteSentence,
    updateGoal,
    uuidSchema,
    validateCharacterConfig,
    validateEnv,
    validateUuid
  };
  /*! Bundled license information:
  
  @huggingface/transformers/dist/transformers.mjs:
    (*!*****************************!*\
      !*** ./src/transformers.js ***!
      \*****************************)
  */
  //# sourceMappingURL=index.js.map